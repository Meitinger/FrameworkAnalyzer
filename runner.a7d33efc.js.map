{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA;;;AAIA,gBAAS,CAA4B,gBAAwB;QAArB,OAAO,SAAP,OAAO,EAAE,KAAK,SAAL,KAAK;IACpD,IAAM,WAAW,GAAG,SAAC,UAA6B,EAAa;QAC7D,OAAQ,UAAU,CAAC,IAAI;YACrB,KAAK,GAAG;gBAAE,OAAO,UAAU,CAAC,KAAK,CAAA;YACjC,KAAK,KAAK;oBAAS,KAAsB;gBAA7B,OAAO,CAAA,KAAsB,GAAtB,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,cAAtB,KAAsB,cAAtB,KAAsB,GAAI,aAAM,CAAC,IAAI,SAAS,CAAC,AAAC,YAAU,CAAkB,MAAc,CAA9B,UAAU,CAAC,IAAI,EAAC,gBAAc,CAAC,CAAC,CAAC,CAAA;YAChH,KAAK,GAAG;gBAAE,OAAO,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC,UAAU,CAAC,KAAK,CAAC,CAAA;YAC7E,KAAK,GAAG;gBAAC,OAAO,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC,UAAU,CAAC,KAAK,CAAC,CAAA;YAC5E,KAAK,GAAG;gBAAE,OAAO,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC,UAAU,CAAC,KAAK,CAAC,CAAA;YAC7E,KAAK,GAAG;gBAAE,OAAO,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAA;SAC1F;KACF;IAED,IAAM,WAAW,GAAG,SAAC,UAA6B,EAAc;QAC9D,OAAQ,UAAU,CAAC,IAAI;YACrB,KAAK,MAAM;gBAAE,OAAO,IAAI,CAAA;YACxB,KAAK,OAAO;gBAAE,OAAO,KAAK,CAAA;YAC1B,KAAK,KAAK;gBAAE,OAAO,CAAC,WAAW,CAAC,UAAU,CAAC,KAAK,CAAC,CAAA;YACjD,KAAK,GAAG;gBAAE,OAAO,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC,UAAU,CAAC,KAAK,CAAC,CAAA;YAC7E,KAAK,GAAG;gBAAE,OAAO,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC,UAAU,CAAC,KAAK,CAAC,CAAA;YAC7E,KAAK,IAAI;gBAAE,OAAO,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,WAAW,CAAC,UAAU,CAAC,KAAK,CAAC,CAAA;YAC/E,KAAK,IAAI;gBAAE,OAAO,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,WAAW,CAAC,UAAU,CAAC,KAAK,CAAC,CAAA;YAC/E,KAAK,IAAI;gBAAE,OAAO,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,WAAW,CAAC,UAAU,CAAC,KAAK,CAAC,CAAA;YAChF,KAAK,IAAI;gBAAE,OAAO,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,WAAW,CAAC,UAAU,CAAC,KAAK,CAAC,CAAA;YAChF,KAAK,IAAI;gBAAE,OAAO,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,WAAW,CAAC,UAAU,CAAC,KAAK,CAAC,CAAA;YAC/E,KAAK,KAAK;gBAAE,OAAO,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,WAAW,CAAC,UAAU,CAAC,KAAK,CAAC,CAAA;SACjF;KACF;IAED,IAAM,GAAG,GAAG,SAAC,SAAoB,EAAW;QAC1C,OAAQ,SAAS,CAAC,IAAI;YACpB,KAAK,MAAM;gBACT,MAAK;YACP,KAAK,QAAQ;gBACX,KAAK,GAAG,wBAAK,KAAK,EAAE,0BAAC,SAAS,CAAC,QAAQ,EAAG,WAAW,CAAC,SAAS,CAAC,UAAU,CAAC,CAAA,CAAE;gBAC7E,MAAK;YACP,KAAK,IAAI;gBACP,IAAI,WAAW,CAAC,SAAS,CAAC,SAAS,CAAC,EAClC,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC;qBAErB,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC;gBAEzB,MAAK;YACP,KAAK,OAAO;gBACV,MAAO,WAAW,CAAC,SAAS,CAAC,SAAS,CAAC,CACrC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC;gBAErB,MAAK;YACP,KAAK,KAAK;gBACR,SAAS,CAAC,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC;gBACjC,MAAK;SACR;KACF;IAED,GAAG,CAAC,OAAO,CAAC;IACZ,OAAO;QAAE,KAAK,EAAL,KAAK;KAAE,CAAA;CACjB,CAAC","sources":["src/runner.ts"],"sourcesContent":["/*\n * Monotone Framework Analyzer\n * Copyright (C) 2022  Manuel Meitinger\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { _throw, runWorker } from './helpers'\nimport { BooleanExpression, NumericExpression, Statement } from './program'\nimport { RunnerInput, RunnerOutput } from './workers'\n\nrunWorker<RunnerInput, RunnerOutput>(({ program, state }) => {\n  const evalNumeric = (expression: NumericExpression): number => {\n    switch (expression.type) {\n      case 'n': return expression.value\n      case 'var': return state[expression.name] ?? _throw(new TypeError(`Variable \"${expression.name}\" not defined.`))\n      case '+': return evalNumeric(expression.left) + evalNumeric(expression.right)\n      case '-':return evalNumeric(expression.left) - evalNumeric(expression.right)\n      case '*': return evalNumeric(expression.left) * evalNumeric(expression.right)\n      case '/': return Math.trunc(evalNumeric(expression.left) / evalNumeric(expression.right))\n    }\n  }\n\n  const evalBoolean = (expression: BooleanExpression): boolean => {\n    switch (expression.type) {\n      case 'true': return true\n      case 'false': return false\n      case 'not': return !evalBoolean(expression.value)\n      case '<': return evalNumeric(expression.left) < evalNumeric(expression.right)\n      case '>': return evalNumeric(expression.left) > evalNumeric(expression.right)\n      case '<=': return evalNumeric(expression.left) <= evalNumeric(expression.right)\n      case '>=': return evalNumeric(expression.left) >= evalNumeric(expression.right)\n      case '==': return evalNumeric(expression.left) === evalNumeric(expression.right)\n      case '!=': return evalNumeric(expression.left) !== evalNumeric(expression.right)\n      case 'or': return evalBoolean(expression.left) || evalBoolean(expression.right)\n      case 'and': return evalBoolean(expression.left) && evalBoolean(expression.right)\n    }\n  }\n\n  const run = (statement: Statement): void => {\n    switch (statement.type) {\n      case 'skip':\n        break\n      case 'assign':\n        state = { ...state, [statement.variable]: evalNumeric(statement.expression) }\n        break\n      case 'if':\n        if (evalBoolean(statement.condition)) {\n          run(statement.ifBody)\n        } else {\n          run(statement.elseBody)\n        }\n        break\n      case 'while':\n        while (evalBoolean(statement.condition)) {\n          run(statement.body)\n        }\n        break\n      case 'seq':\n        statement.statements.forEach(run)\n        break\n    }\n  }\n\n  run(program)\n  return { state }\n})\n"],"names":[],"version":3,"file":"runner.a7d33efc.js.map"}