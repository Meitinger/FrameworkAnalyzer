// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"2rRk1":[function(require,module,exports) {
require('./helpers/bundle-manifest').register(JSON.parse("{\"3wiNu\":\"index.eed7fbe6.js\",\"5S8nT\":\"tsMode.d6b990eb.js\",\"aEQC1\":\"index.d340b689.css\",\"hYBl0\":\"index.18833f34.js\",\"eV2tY\":\"cssMode.e163c049.js\",\"4H18Z\":\"jsonMode.b17f0993.js\",\"kQAof\":\"htmlMode.734d43bd.js\",\"6wl9G\":\"abap.8be0f240.js\",\"lAxMW\":\"apex.8d40d040.js\",\"553sL\":\"azcli.e1f980c3.js\",\"dLiKg\":\"bat.7ece6bed.js\",\"cmGXR\":\"bicep.8f305cb5.js\",\"db4qL\":\"cameligo.81407470.js\",\"8YJo8\":\"clojure.246244f1.js\",\"drMwd\":\"coffee.0ee42cf6.js\",\"2THVe\":\"cpp.22423ef9.js\",\"axumX\":\"csharp.47fd45f8.js\",\"3Kai6\":\"csp.69d3019e.js\",\"6LXpv\":\"css.7ce930cc.js\",\"JVDtk\":\"dart.0c59848e.js\",\"h7WIx\":\"dockerfile.0cb190db.js\",\"1bnZa\":\"ecl.ad219576.js\",\"aZaAb\":\"elixir.c85defd5.js\",\"j5AtM\":\"flow9.7ce08a85.js\",\"6DTPz\":\"fsharp.4fea99f8.js\",\"79JCH\":\"go.6dabbb12.js\",\"9jvOe\":\"graphql.b9d838a1.js\",\"7axw6\":\"handlebars.30456010.js\",\"43Nft\":\"hcl.6a25ea3e.js\",\"5MmSA\":\"html.b905e5b5.js\",\"gFZFU\":\"ini.9eca4c3b.js\",\"4EmYD\":\"java.e8a388fd.js\",\"6lkxQ\":\"javascript.952791d4.js\",\"L0c6V\":\"typescript.e36c4934.js\",\"7bQIe\":\"julia.1bc74e57.js\",\"aEfyd\":\"kotlin.25fb7ec7.js\",\"93iRN\":\"less.0685c758.js\",\"9Kdt6\":\"lexon.01588af7.js\",\"btk3p\":\"lua.d629b914.js\",\"95ctL\":\"liquid.3c578623.js\",\"ec2D9\":\"m3.0bb79f45.js\",\"9ECcX\":\"markdown.08b42974.js\",\"gKeMR\":\"mips.3a234b7b.js\",\"aEBJJ\":\"msdax.0d311932.js\",\"cmc48\":\"mysql.2aa4b7ec.js\",\"g8YBE\":\"objective-c.ab034fd7.js\",\"49PDH\":\"pascal.e2e25714.js\",\"dUQwQ\":\"pascaligo.631335d7.js\",\"6Em52\":\"perl.59935d5e.js\",\"gTQ72\":\"pgsql.f8d9c9ef.js\",\"8iCMW\":\"php.7cb368aa.js\",\"di9bo\":\"pla.79f40757.js\",\"fc836\":\"postiats.3b2c9b2c.js\",\"edhAU\":\"powerquery.b7775ae0.js\",\"jvSTo\":\"powershell.13551b71.js\",\"5jPb2\":\"protobuf.638a6327.js\",\"17bju\":\"pug.12166a92.js\",\"kSA0K\":\"python.6db70f20.js\",\"4NN8B\":\"qsharp.5cd6f5c0.js\",\"jakxL\":\"r.2d3c0c52.js\",\"jclB6\":\"razor.e0fc9a50.js\",\"4XRQQ\":\"redis.7354e5ce.js\",\"fweDw\":\"redshift.db51e0b3.js\",\"gF2QE\":\"restructuredtext.d936ccb1.js\",\"9w6lf\":\"ruby.60b7d21f.js\",\"cBes8\":\"rust.1a9cd23e.js\",\"bljUh\":\"sb.c01dc9e7.js\",\"6K510\":\"scala.6daf37ff.js\",\"dmx6i\":\"scheme.a0db756f.js\",\"2FXxp\":\"scss.e3152c53.js\",\"holvA\":\"shell.4643d2a3.js\",\"1k0Py\":\"solidity.634865e5.js\",\"iOYqn\":\"sophia.3be2bc8f.js\",\"cgYkx\":\"sparql.65400e4c.js\",\"7Z0Dj\":\"sql.24a36ff0.js\",\"bbSfg\":\"st.d2955341.js\",\"1NZ7J\":\"swift.8370d569.js\",\"4GjKg\":\"systemverilog.9c3308eb.js\",\"gMhGf\":\"tcl.996bf7b8.js\",\"8hb7Q\":\"twig.ef96ad19.js\",\"kTEGP\":\"vb.2d2f1c83.js\",\"fY4kd\":\"xml.6507a635.js\",\"3BSLm\":\"yaml.6223afc2.js\",\"h2xNS\":\"program.d.0045b7c0.ts\",\"boLZc\":\"framework.d.13fcdae7.ts\",\"7Ucya\":\"environment.d.6a7c9dde.ts\",\"eoaGF\":\"parser.1d166427.js\",\"bIVsG\":\"solver.23ad8c3a.js\",\"3ugLH\":\"runner.965c9320.js\",\"lxKYq\":\"visualizer.7c0767c1.js\",\"hHh70\":\"ts.worker.08693c32.js\",\"hYTAc\":\"editor.worker.fdc51159.js\"}"));

},{"./helpers/bundle-manifest":"8Y9me"}],"8Y9me":[function(require,module,exports) {
"use strict";
var mapping = {};
function register(pairs) {
    var keys = Object.keys(pairs);
    for(var i = 0; i < keys.length; i++)mapping[keys[i]] = pairs[keys[i]];
}
function resolve(id) {
    var resolved = mapping[id];
    if (resolved == null) throw new Error('Could not resolve bundle with id ' + id);
    return resolved;
}
module.exports.register = register;
module.exports.resolve = resolve;

},{}],"kExux":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _jsxRuntime = require("react/jsx-runtime");
/*
 * Monotone Framework Analyzer
 * Copyright (C) 2022  Manuel Meitinger
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */ var _react = require("react");
var _reactDom = require("react-dom");
var _uikit = require("uikit");
var _uikitDefault = parcelHelpers.interopDefault(_uikit);
var _uikitMinCss = require("uikit/dist/css/uikit.min.css");
var _uikitIcons = require("uikit/dist/js/uikit-icons");
var _uikitIconsDefault = parcelHelpers.interopDefault(_uikitIcons);
var _app = require("./app");
var _language = require("./language");
_uikitDefault.default.use(_uikitIconsDefault.default);
self.MonacoEnvironment = {
    getWorkerUrl: function(_workerId, label) {
        return label === 'typescript' ? new URL(require("bb31b41eb492d5c7")) : new URL(require("aea2fc4574742425"));
    }
};
var alert = function(message) {
    _uikitDefault.default.modal.alert(message).catch(function() {
        return window.alert(message);
    });
};
try {
    _language.registerLanguage();
} catch (e) {
    alert('Failed to register WHILE language. Code highlighting and completion will not be available.');
}
_language.registerLibraries().catch(function() {
    return alert('Failed to register type libraries. Framework and helper definitions will not be available.');
});
_reactDom.render(/*#__PURE__*/ _jsxRuntime.jsx(_react.StrictMode, {
    children: /*#__PURE__*/ _jsxRuntime.jsx(_app.App, {})
}), document.getElementById('root'));

},{"react/jsx-runtime":"cpY4b","react":"9sfFD","react-dom":"1byDl","uikit":"12aQH","uikit/dist/css/uikit.min.css":"2ydou","uikit/dist/js/uikit-icons":"8omYs","./app":"84KA6","./language":"9u22Y","bb31b41eb492d5c7":"htoDK","aea2fc4574742425":"7q1qc","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"cpY4b":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/react-jsx-runtime.production.min.js');

},{"./cjs/react-jsx-runtime.production.min.js":"8cJCA"}],"8cJCA":[function(require,module,exports) {
/** @license React v17.0.2
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
require("object-assign");
var f = require("react"), g = 60103;
exports.Fragment = 60107;
if ("function" === typeof Symbol && Symbol.for) {
    var h = Symbol.for;
    g = h("react.element");
    exports.Fragment = h("react.fragment");
}
var m = f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, n = Object.prototype.hasOwnProperty, p = {
    key: !0,
    ref: !0,
    __self: !0,
    __source: !0
};
function q(c, a, k) {
    var b, d = {}, e = null, l = null;
    void 0 !== k && (e = "" + k);
    void 0 !== a.key && (e = "" + a.key);
    void 0 !== a.ref && (l = a.ref);
    for(b in a)n.call(a, b) && !p.hasOwnProperty(b) && (d[b] = a[b]);
    if (c && c.defaultProps) for(b in a = c.defaultProps, a)void 0 === d[b] && (d[b] = a[b]);
    return {
        $$typeof: g,
        type: c,
        key: e,
        ref: l,
        props: d,
        _owner: m.current
    };
}
exports.jsx = q;
exports.jsxs = q;

},{"object-assign":"9UC7U","react":"9sfFD"}],"9UC7U":[function(require,module,exports) {
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/ 'use strict';
/* eslint-disable no-unused-vars */ var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;
function toObject(val) {
    if (val === null || val === undefined) throw new TypeError('Object.assign cannot be called with null or undefined');
    return Object(val);
}
function shouldUseNative() {
    try {
        if (!Object.assign) return false;
        // Detect buggy property enumeration order in older V8 versions.
        // https://bugs.chromium.org/p/v8/issues/detail?id=4118
        var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
        test1[5] = 'de';
        if (Object.getOwnPropertyNames(test1)[0] === '5') return false;
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test2 = {};
        for(var i = 0; i < 10; i++)test2['_' + String.fromCharCode(i)] = i;
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
        });
        if (order2.join('') !== '0123456789') return false;
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test3 = {};
        'abcdefghijklmnopqrst'.split('').forEach(function(letter) {
            test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') return false;
        return true;
    } catch (err) {
        // We don't expect any of the above to throw, but better to be safe.
        return false;
    }
}
module.exports = shouldUseNative() ? Object.assign : function(target, source) {
    var from;
    var to = toObject(target);
    var symbols;
    for(var s = 1; s < arguments.length; s++){
        from = Object(arguments[s]);
        for(var key in from)if (hasOwnProperty.call(from, key)) to[key] = from[key];
        if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for(var i = 0; i < symbols.length; i++)if (propIsEnumerable.call(from, symbols[i])) to[symbols[i]] = from[symbols[i]];
        }
    }
    return to;
};

},{}],"9sfFD":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/react.production.min.js');

},{"./cjs/react.production.min.js":"fgrjZ"}],"fgrjZ":[function(require,module,exports) {
var _helpers = require("@swc/helpers");
/** @license React v17.0.2
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
var l = require("object-assign"), n = 60103, p = 60106;
exports.Fragment = 60107;
exports.StrictMode = 60108;
exports.Profiler = 60114;
var q = 60109, r = 60110, t = 60112;
exports.Suspense = 60113;
var u = 60115, v = 60116;
if ("function" === typeof Symbol && Symbol.for) {
    var w = Symbol.for;
    n = w("react.element");
    p = w("react.portal");
    exports.Fragment = w("react.fragment");
    exports.StrictMode = w("react.strict_mode");
    exports.Profiler = w("react.profiler");
    q = w("react.provider");
    r = w("react.context");
    t = w("react.forward_ref");
    exports.Suspense = w("react.suspense");
    u = w("react.memo");
    v = w("react.lazy");
}
var x = "function" === typeof Symbol && Symbol.iterator;
function y(a) {
    if (null === a || "object" !== typeof a) return null;
    a = x && a[x] || a["@@iterator"];
    return "function" === typeof a ? a : null;
}
function z(a) {
    for(var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++)b += "&args[]=" + encodeURIComponent(arguments[c]);
    return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
}
var A = {
    isMounted: function isMounted() {
        return !1;
    },
    enqueueForceUpdate: function enqueueForceUpdate() {},
    enqueueReplaceState: function enqueueReplaceState() {},
    enqueueSetState: function enqueueSetState() {}
}, B = {};
function C(a, b, c) {
    this.props = a;
    this.context = b;
    this.refs = B;
    this.updater = c || A;
}
C.prototype.isReactComponent = {};
C.prototype.setState = function(a, b) {
    if ("object" !== typeof a && "function" !== typeof a && null != a) throw Error(z(85));
    this.updater.enqueueSetState(this, a, b, "setState");
};
C.prototype.forceUpdate = function(a) {
    this.updater.enqueueForceUpdate(this, a, "forceUpdate");
};
function D() {}
D.prototype = C.prototype;
function E(a, b, c) {
    this.props = a;
    this.context = b;
    this.refs = B;
    this.updater = c || A;
}
var F = E.prototype = new D;
F.constructor = E;
l(F, C.prototype);
F.isPureReactComponent = !0;
var G = {
    current: null
}, H = Object.prototype.hasOwnProperty, I = {
    key: !0,
    ref: !0,
    __self: !0,
    __source: !0
};
function J(a, b, c) {
    var e, d = {}, k = null, h = null;
    if (null != b) for(e in void 0 !== b.ref && (h = b.ref), void 0 !== b.key && (k = "" + b.key), b)H.call(b, e) && !I.hasOwnProperty(e) && (d[e] = b[e]);
    var g = arguments.length - 2;
    if (1 === g) d.children = c;
    else if (1 < g) {
        for(var f = Array(g), m = 0; m < g; m++)f[m] = arguments[m + 2];
        d.children = f;
    }
    if (a && a.defaultProps) for(e in g = a.defaultProps, g)void 0 === d[e] && (d[e] = g[e]);
    return {
        $$typeof: n,
        type: a,
        key: k,
        ref: h,
        props: d,
        _owner: G.current
    };
}
function K(a, b) {
    return {
        $$typeof: n,
        type: a.type,
        key: b,
        ref: a.ref,
        props: a.props,
        _owner: a._owner
    };
}
function L(a) {
    return "object" === typeof a && null !== a && a.$$typeof === n;
}
function escape(a1) {
    var b = {
        "=": "=0",
        ":": "=2"
    };
    return "$" + a1.replace(/[=:]/g, function(a) {
        return b[a];
    });
}
var M = /\/+/g;
function N(a, b) {
    return "object" === typeof a && null !== a && null != a.key ? escape("" + a.key) : b.toString(36);
}
function O(a2, b, c, e, d) {
    var k = typeof a2 === "undefined" ? "undefined" : _helpers.typeOf(a2);
    if ("undefined" === k || "boolean" === k) a2 = null;
    var h = !1;
    if (null === a2) h = !0;
    else switch(k){
        case "string":
        case "number":
            h = !0;
            break;
        case "object":
            switch(a2.$$typeof){
                case n:
                case p:
                    h = !0;
            }
    }
    if (h) return h = a2, d = d(h), a2 = "" === e ? "." + N(h, 0) : e, Array.isArray(d) ? (c = "", null != a2 && (c = a2.replace(M, "$&/") + "/"), O(d, b, c, "", function(a) {
        return a;
    })) : null != d && (L(d) && (d = K(d, c + (!d.key || h && h.key === d.key ? "" : ("" + d.key).replace(M, "$&/") + "/") + a2)), b.push(d)), 1;
    h = 0;
    e = "" === e ? "." : e + ":";
    if (Array.isArray(a2)) for(var g = 0; g < a2.length; g++){
        k = a2[g];
        var f = e + N(k, g);
        h += O(k, b, c, f, d);
    }
    else if (f = y(a2), "function" === typeof f) for(a2 = f.call(a2), g = 0; !(k = a2.next()).done;)k = k.value, f = e + N(k, g++), h += O(k, b, c, f, d);
    else if ("object" === k) throw b = "" + a2, Error(z(31, "[object Object]" === b ? "object with keys {" + Object.keys(a2).join(", ") + "}" : b));
    return h;
}
function P(a3, b, c) {
    if (null == a3) return a3;
    var e = [], d = 0;
    O(a3, e, "", "", function(a) {
        return b.call(c, a, d++);
    });
    return e;
}
function Q(a) {
    if (-1 === a._status) {
        var b1 = a._result;
        b1 = b1();
        a._status = 0;
        a._result = b1;
        b1.then(function(b) {
            0 === a._status && (b = b.default, a._status = 1, a._result = b);
        }, function(b) {
            0 === a._status && (a._status = 2, a._result = b);
        });
    }
    if (1 === a._status) return a._result;
    throw a._result;
}
var R = {
    current: null
};
function S() {
    var a = R.current;
    if (null === a) throw Error(z(321));
    return a;
}
var T = {
    ReactCurrentDispatcher: R,
    ReactCurrentBatchConfig: {
        transition: 0
    },
    ReactCurrentOwner: G,
    IsSomeRendererActing: {
        current: !1
    },
    assign: l
};
exports.Children = {
    map: P,
    forEach: function forEach(a, b, c) {
        P(a, function() {
            b.apply(this, arguments);
        }, c);
    },
    count: function count(a) {
        var b = 0;
        P(a, function() {
            b++;
        });
        return b;
    },
    toArray: function toArray(a4) {
        return P(a4, function(a) {
            return a;
        }) || [];
    },
    only: function only(a) {
        if (!L(a)) throw Error(z(143));
        return a;
    }
};
exports.Component = C;
exports.PureComponent = E;
exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = T;
exports.cloneElement = function(a, b, c) {
    if (null === a || void 0 === a) throw Error(z(267, a));
    var e = l({}, a.props), d = a.key, k = a.ref, h = a._owner;
    if (null != b) {
        void 0 !== b.ref && (k = b.ref, h = G.current);
        void 0 !== b.key && (d = "" + b.key);
        if (a.type && a.type.defaultProps) var g = a.type.defaultProps;
        for(f in b)H.call(b, f) && !I.hasOwnProperty(f) && (e[f] = void 0 === b[f] && void 0 !== g ? g[f] : b[f]);
    }
    var f = arguments.length - 2;
    if (1 === f) e.children = c;
    else if (1 < f) {
        g = Array(f);
        for(var m = 0; m < f; m++)g[m] = arguments[m + 2];
        e.children = g;
    }
    return {
        $$typeof: n,
        type: a.type,
        key: d,
        ref: k,
        props: e,
        _owner: h
    };
};
exports.createContext = function(a, b) {
    void 0 === b && (b = null);
    a = {
        $$typeof: r,
        _calculateChangedBits: b,
        _currentValue: a,
        _currentValue2: a,
        _threadCount: 0,
        Provider: null,
        Consumer: null
    };
    a.Provider = {
        $$typeof: q,
        _context: a
    };
    return a.Consumer = a;
};
exports.createElement = J;
exports.createFactory = function(a) {
    var b = J.bind(null, a);
    b.type = a;
    return b;
};
exports.createRef = function() {
    return {
        current: null
    };
};
exports.forwardRef = function(a) {
    return {
        $$typeof: t,
        render: a
    };
};
exports.isValidElement = L;
exports.lazy = function(a) {
    return {
        $$typeof: v,
        _payload: {
            _status: -1,
            _result: a
        },
        _init: Q
    };
};
exports.memo = function(a, b) {
    return {
        $$typeof: u,
        type: a,
        compare: void 0 === b ? null : b
    };
};
exports.useCallback = function(a, b) {
    return S().useCallback(a, b);
};
exports.useContext = function(a, b) {
    return S().useContext(a, b);
};
exports.useDebugValue = function() {};
exports.useEffect = function(a, b) {
    return S().useEffect(a, b);
};
exports.useImperativeHandle = function(a, b, c) {
    return S().useImperativeHandle(a, b, c);
};
exports.useLayoutEffect = function(a, b) {
    return S().useLayoutEffect(a, b);
};
exports.useMemo = function(a, b) {
    return S().useMemo(a, b);
};
exports.useReducer = function(a, b, c) {
    return S().useReducer(a, b, c);
};
exports.useRef = function(a) {
    return S().useRef(a);
};
exports.useState = function(a) {
    return S().useState(a);
};
exports.version = "17.0.2";

},{"@swc/helpers":"erO4s","object-assign":"9UC7U"}],"1byDl":[function(require,module,exports) {
'use strict';
function checkDCE() {
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') return;
    try {
        // Verify that the code above has been dead code eliminated (DCE'd).
        __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
    } catch (err) {
        // DevTools shouldn't crash React, no matter what.
        // We should still report in case we break this code.
        console.error(err);
    }
}
// DCE check should happen before ReactDOM bundle executes so that
// DevTools can report bad minification during injection.
checkDCE();
module.exports = require('./cjs/react-dom.production.min.js');

},{"./cjs/react-dom.production.min.js":"2tboD"}],"2tboD":[function(require,module,exports) {
var _helpers = require("@swc/helpers");
/** @license React v17.0.2
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ /*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/ 'use strict';
var aa = require("react"), m = require("object-assign"), r = require("scheduler");
function y(a) {
    for(var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++)b += "&args[]=" + encodeURIComponent(arguments[c]);
    return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
}
if (!aa) throw Error(y(227));
var ba = new Set, ca = {};
function da(a, b) {
    ea(a, b);
    ea(a + "Capture", b);
}
function ea(a, b) {
    ca[a] = b;
    for(a = 0; a < b.length; a++)ba.add(b[a]);
}
var fa = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement), ha = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/, ia = Object.prototype.hasOwnProperty, ja = {}, ka = {};
function la(a) {
    if (ia.call(ka, a)) return !0;
    if (ia.call(ja, a)) return !1;
    if (ha.test(a)) return ka[a] = !0;
    ja[a] = !0;
    return !1;
}
function ma(a, b, c, d) {
    if (null !== c && 0 === c.type) return !1;
    switch(typeof b === "undefined" ? "undefined" : _helpers.typeOf(b)){
        case "function":
        case "symbol":
            return !0;
        case "boolean":
            if (d) return !1;
            if (null !== c) return !c.acceptsBooleans;
            a = a.toLowerCase().slice(0, 5);
            return "data-" !== a && "aria-" !== a;
        default:
            return !1;
    }
}
function na(a, b, c, d) {
    if (null === b || "undefined" === typeof b || ma(a, b, c, d)) return !0;
    if (d) return !1;
    if (null !== c) switch(c.type){
        case 3:
            return !b;
        case 4:
            return !1 === b;
        case 5:
            return isNaN(b);
        case 6:
            return isNaN(b) || 1 > b;
    }
    return !1;
}
function B(a, b, c, d, e, f, g) {
    this.acceptsBooleans = 2 === b || 3 === b || 4 === b;
    this.attributeName = d;
    this.attributeNamespace = e;
    this.mustUseProperty = c;
    this.propertyName = a;
    this.type = b;
    this.sanitizeURL = f;
    this.removeEmptyString = g;
}
var D = {};
"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a) {
    D[a] = new B(a, 0, !1, a, null, !1, !1);
});
[
    [
        "acceptCharset",
        "accept-charset"
    ],
    [
        "className",
        "class"
    ],
    [
        "htmlFor",
        "for"
    ],
    [
        "httpEquiv",
        "http-equiv"
    ]
].forEach(function(a) {
    var b = a[0];
    D[b] = new B(b, 1, !1, a[1], null, !1, !1);
});
[
    "contentEditable",
    "draggable",
    "spellCheck",
    "value"
].forEach(function(a) {
    D[a] = new B(a, 2, !1, a.toLowerCase(), null, !1, !1);
});
[
    "autoReverse",
    "externalResourcesRequired",
    "focusable",
    "preserveAlpha"
].forEach(function(a) {
    D[a] = new B(a, 2, !1, a, null, !1, !1);
});
"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a) {
    D[a] = new B(a, 3, !1, a.toLowerCase(), null, !1, !1);
});
[
    "checked",
    "multiple",
    "muted",
    "selected"
].forEach(function(a) {
    D[a] = new B(a, 3, !0, a, null, !1, !1);
});
[
    "capture",
    "download"
].forEach(function(a) {
    D[a] = new B(a, 4, !1, a, null, !1, !1);
});
[
    "cols",
    "rows",
    "size",
    "span"
].forEach(function(a) {
    D[a] = new B(a, 6, !1, a, null, !1, !1);
});
[
    "rowSpan",
    "start"
].forEach(function(a) {
    D[a] = new B(a, 5, !1, a.toLowerCase(), null, !1, !1);
});
var oa = /[\-:]([a-z])/g;
function pa(a) {
    return a[1].toUpperCase();
}
"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a) {
    var b = a.replace(oa, pa);
    D[b] = new B(b, 1, !1, a, null, !1, !1);
});
"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a) {
    var b = a.replace(oa, pa);
    D[b] = new B(b, 1, !1, a, "http://www.w3.org/1999/xlink", !1, !1);
});
[
    "xml:base",
    "xml:lang",
    "xml:space"
].forEach(function(a) {
    var b = a.replace(oa, pa);
    D[b] = new B(b, 1, !1, a, "http://www.w3.org/XML/1998/namespace", !1, !1);
});
[
    "tabIndex",
    "crossOrigin"
].forEach(function(a) {
    D[a] = new B(a, 1, !1, a.toLowerCase(), null, !1, !1);
});
D.xlinkHref = new B("xlinkHref", 1, !1, "xlink:href", "http://www.w3.org/1999/xlink", !0, !1);
[
    "src",
    "href",
    "action",
    "formAction"
].forEach(function(a) {
    D[a] = new B(a, 1, !1, a.toLowerCase(), null, !0, !0);
});
function qa(a, b, c, d) {
    var e = D.hasOwnProperty(b) ? D[b] : null;
    var f = null !== e ? 0 === e.type : d ? !1 : !(2 < b.length) || "o" !== b[0] && "O" !== b[0] || "n" !== b[1] && "N" !== b[1] ? !1 : !0;
    f || (na(b, c, e, d) && (c = null), d || null === e ? la(b) && (null === c ? a.removeAttribute(b) : a.setAttribute(b, "" + c)) : e.mustUseProperty ? a[e.propertyName] = null === c ? 3 === e.type ? !1 : "" : c : (b = e.attributeName, d = e.attributeNamespace, null === c ? a.removeAttribute(b) : (e = e.type, c = 3 === e || 4 === e && !0 === c ? "" : "" + c, d ? a.setAttributeNS(d, b, c) : a.setAttribute(b, c))));
}
var ra = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, sa = 60103, ta = 60106, ua = 60107, wa = 60108, xa = 60114, ya = 60109, za = 60110, Aa = 60112, Ba = 60113, Ca = 60120, Da = 60115, Ea = 60116, Fa = 60121, Ga = 60128, Ha = 60129, Ia = 60130, Ja = 60131;
if ("function" === typeof Symbol && Symbol.for) {
    var E = Symbol.for;
    sa = E("react.element");
    ta = E("react.portal");
    ua = E("react.fragment");
    wa = E("react.strict_mode");
    xa = E("react.profiler");
    ya = E("react.provider");
    za = E("react.context");
    Aa = E("react.forward_ref");
    Ba = E("react.suspense");
    Ca = E("react.suspense_list");
    Da = E("react.memo");
    Ea = E("react.lazy");
    Fa = E("react.block");
    E("react.scope");
    Ga = E("react.opaque.id");
    Ha = E("react.debug_trace_mode");
    Ia = E("react.offscreen");
    Ja = E("react.legacy_hidden");
}
var Ka = "function" === typeof Symbol && Symbol.iterator;
function La(a) {
    if (null === a || "object" !== typeof a) return null;
    a = Ka && a[Ka] || a["@@iterator"];
    return "function" === typeof a ? a : null;
}
var Ma;
function Na(a) {
    if (void 0 === Ma) try {
        throw Error();
    } catch (c) {
        var b = c.stack.trim().match(/\n( *(at )?)/);
        Ma = b && b[1] || "";
    }
    return "\n" + Ma + a;
}
var Oa = !1;
function Pa(a, b) {
    if (!a || Oa) return "";
    Oa = !0;
    var c = Error.prepareStackTrace;
    Error.prepareStackTrace = void 0;
    try {
        if (b) {
            if (b = function b() {
                throw Error();
            }, Object.defineProperty(b.prototype, "props", {
                set: function set() {
                    throw Error();
                }
            }), "object" === typeof Reflect && Reflect.construct) {
                try {
                    Reflect.construct(b, []);
                } catch (k) {
                    var d = k;
                }
                Reflect.construct(a, [], b);
            } else {
                try {
                    b.call();
                } catch (k) {
                    d = k;
                }
                a.call(b.prototype);
            }
        } else {
            try {
                throw Error();
            } catch (k) {
                d = k;
            }
            a();
        }
    } catch (k) {
        if (k && d && "string" === typeof k.stack) {
            for(var e = k.stack.split("\n"), f = d.stack.split("\n"), g = e.length - 1, h = f.length - 1; 1 <= g && 0 <= h && e[g] !== f[h];)h--;
            for(; 1 <= g && 0 <= h; g--, h--)if (e[g] !== f[h]) {
                if (1 !== g || 1 !== h) {
                    do if (g--, h--, 0 > h || e[g] !== f[h]) return "\n" + e[g].replace(" at new ", " at ");
                    while (1 <= g && 0 <= h)
                }
                break;
            }
        }
    } finally{
        Oa = !1, Error.prepareStackTrace = c;
    }
    return (a = a ? a.displayName || a.name : "") ? Na(a) : "";
}
function Qa(a) {
    switch(a.tag){
        case 5:
            return Na(a.type);
        case 16:
            return Na("Lazy");
        case 13:
            return Na("Suspense");
        case 19:
            return Na("SuspenseList");
        case 0:
        case 2:
        case 15:
            return a = Pa(a.type, !1), a;
        case 11:
            return a = Pa(a.type.render, !1), a;
        case 22:
            return a = Pa(a.type._render, !1), a;
        case 1:
            return a = Pa(a.type, !0), a;
        default:
            return "";
    }
}
function Ra(a) {
    if (null == a) return null;
    if ("function" === typeof a) return a.displayName || a.name || null;
    if ("string" === typeof a) return a;
    switch(a){
        case ua:
            return "Fragment";
        case ta:
            return "Portal";
        case xa:
            return "Profiler";
        case wa:
            return "StrictMode";
        case Ba:
            return "Suspense";
        case Ca:
            return "SuspenseList";
    }
    if ("object" === typeof a) switch(a.$$typeof){
        case za:
            return (a.displayName || "Context") + ".Consumer";
        case ya:
            return (a._context.displayName || "Context") + ".Provider";
        case Aa:
            var b = a.render;
            b = b.displayName || b.name || "";
            return a.displayName || ("" !== b ? "ForwardRef(" + b + ")" : "ForwardRef");
        case Da:
            return Ra(a.type);
        case Fa:
            return Ra(a._render);
        case Ea:
            b = a._payload;
            a = a._init;
            try {
                return Ra(a(b));
            } catch (c) {}
    }
    return null;
}
function Sa(a) {
    switch(typeof a === "undefined" ? "undefined" : _helpers.typeOf(a)){
        case "boolean":
        case "number":
        case "object":
        case "string":
        case "undefined":
            return a;
        default:
            return "";
    }
}
function Ta(a) {
    var b = a.type;
    return (a = a.nodeName) && "input" === a.toLowerCase() && ("checkbox" === b || "radio" === b);
}
function Ua(a1) {
    var b = Ta(a1) ? "checked" : "value", c = Object.getOwnPropertyDescriptor(a1.constructor.prototype, b), d = "" + a1[b];
    if (!a1.hasOwnProperty(b) && "undefined" !== typeof c && "function" === typeof c.get && "function" === typeof c.set) {
        var e = c.get, f = c.set;
        Object.defineProperty(a1, b, {
            configurable: !0,
            get: function get() {
                return e.call(this);
            },
            set: function set(a) {
                d = "" + a;
                f.call(this, a);
            }
        });
        Object.defineProperty(a1, b, {
            enumerable: c.enumerable
        });
        return {
            getValue: function getValue() {
                return d;
            },
            setValue: function setValue(a) {
                d = "" + a;
            },
            stopTracking: function stopTracking() {
                a1._valueTracker = null;
                delete a1[b];
            }
        };
    }
}
function Va(a) {
    a._valueTracker || (a._valueTracker = Ua(a));
}
function Wa(a) {
    if (!a) return !1;
    var b = a._valueTracker;
    if (!b) return !0;
    var c = b.getValue();
    var d = "";
    a && (d = Ta(a) ? a.checked ? "true" : "false" : a.value);
    a = d;
    return a !== c ? (b.setValue(a), !0) : !1;
}
function Xa(a) {
    a = a || ("undefined" !== typeof document ? document : void 0);
    if ("undefined" === typeof a) return null;
    try {
        return a.activeElement || a.body;
    } catch (b) {
        return a.body;
    }
}
function Ya(a, b) {
    var c = b.checked;
    return m({}, b, {
        defaultChecked: void 0,
        defaultValue: void 0,
        value: void 0,
        checked: null != c ? c : a._wrapperState.initialChecked
    });
}
function Za(a, b) {
    var c = null == b.defaultValue ? "" : b.defaultValue, d = null != b.checked ? b.checked : b.defaultChecked;
    c = Sa(null != b.value ? b.value : c);
    a._wrapperState = {
        initialChecked: d,
        initialValue: c,
        controlled: "checkbox" === b.type || "radio" === b.type ? null != b.checked : null != b.value
    };
}
function $a(a, b) {
    b = b.checked;
    null != b && qa(a, "checked", b, !1);
}
function ab(a, b) {
    $a(a, b);
    var c = Sa(b.value), d = b.type;
    if (null != c) {
        if ("number" === d) {
            if (0 === c && "" === a.value || a.value != c) a.value = "" + c;
        } else a.value !== "" + c && (a.value = "" + c);
    } else if ("submit" === d || "reset" === d) {
        a.removeAttribute("value");
        return;
    }
    b.hasOwnProperty("value") ? bb(a, b.type, c) : b.hasOwnProperty("defaultValue") && bb(a, b.type, Sa(b.defaultValue));
    null == b.checked && null != b.defaultChecked && (a.defaultChecked = !!b.defaultChecked);
}
function cb(a, b, c) {
    if (b.hasOwnProperty("value") || b.hasOwnProperty("defaultValue")) {
        var d = b.type;
        if (!("submit" !== d && "reset" !== d || void 0 !== b.value && null !== b.value)) return;
        b = "" + a._wrapperState.initialValue;
        c || b === a.value || (a.value = b);
        a.defaultValue = b;
    }
    c = a.name;
    "" !== c && (a.name = "");
    a.defaultChecked = !!a._wrapperState.initialChecked;
    "" !== c && (a.name = c);
}
function bb(a, b, c) {
    if ("number" !== b || Xa(a.ownerDocument) !== a) null == c ? a.defaultValue = "" + a._wrapperState.initialValue : a.defaultValue !== "" + c && (a.defaultValue = "" + c);
}
function db(a2) {
    var b = "";
    aa.Children.forEach(a2, function(a) {
        null != a && (b += a);
    });
    return b;
}
function eb(a, b) {
    a = m({
        children: void 0
    }, b);
    if (b = db(b.children)) a.children = b;
    return a;
}
function fb(a, b, c, d) {
    a = a.options;
    if (b) {
        b = {};
        for(var e = 0; e < c.length; e++)b["$" + c[e]] = !0;
        for(c = 0; c < a.length; c++)e = b.hasOwnProperty("$" + a[c].value), a[c].selected !== e && (a[c].selected = e), e && d && (a[c].defaultSelected = !0);
    } else {
        c = "" + Sa(c);
        b = null;
        for(e = 0; e < a.length; e++){
            if (a[e].value === c) {
                a[e].selected = !0;
                d && (a[e].defaultSelected = !0);
                return;
            }
            null !== b || a[e].disabled || (b = a[e]);
        }
        null !== b && (b.selected = !0);
    }
}
function gb(a, b) {
    if (null != b.dangerouslySetInnerHTML) throw Error(y(91));
    return m({}, b, {
        value: void 0,
        defaultValue: void 0,
        children: "" + a._wrapperState.initialValue
    });
}
function hb(a, b) {
    var c = b.value;
    if (null == c) {
        c = b.children;
        b = b.defaultValue;
        if (null != c) {
            if (null != b) throw Error(y(92));
            if (Array.isArray(c)) {
                if (!(1 >= c.length)) throw Error(y(93));
                c = c[0];
            }
            b = c;
        }
        null == b && (b = "");
        c = b;
    }
    a._wrapperState = {
        initialValue: Sa(c)
    };
}
function ib(a, b) {
    var c = Sa(b.value), d = Sa(b.defaultValue);
    null != c && (c = "" + c, c !== a.value && (a.value = c), null == b.defaultValue && a.defaultValue !== c && (a.defaultValue = c));
    null != d && (a.defaultValue = "" + d);
}
function jb(a) {
    var b = a.textContent;
    b === a._wrapperState.initialValue && "" !== b && null !== b && (a.value = b);
}
var kb = {
    html: "http://www.w3.org/1999/xhtml",
    mathml: "http://www.w3.org/1998/Math/MathML",
    svg: "http://www.w3.org/2000/svg"
};
function lb(a) {
    switch(a){
        case "svg":
            return "http://www.w3.org/2000/svg";
        case "math":
            return "http://www.w3.org/1998/Math/MathML";
        default:
            return "http://www.w3.org/1999/xhtml";
    }
}
function mb(a, b) {
    return null == a || "http://www.w3.org/1999/xhtml" === a ? lb(b) : "http://www.w3.org/2000/svg" === a && "foreignObject" === b ? "http://www.w3.org/1999/xhtml" : a;
}
var nb, ob = function(a) {
    return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function(b, c, d, e) {
        MSApp.execUnsafeLocalFunction(function() {
            return a(b, c, d, e);
        });
    } : a;
}(function(a, b) {
    if (a.namespaceURI !== kb.svg || "innerHTML" in a) a.innerHTML = b;
    else {
        nb = nb || document.createElement("div");
        nb.innerHTML = "<svg>" + b.valueOf().toString() + "</svg>";
        for(b = nb.firstChild; a.firstChild;)a.removeChild(a.firstChild);
        for(; b.firstChild;)a.appendChild(b.firstChild);
    }
});
function pb(a, b) {
    if (b) {
        var c = a.firstChild;
        if (c && c === a.lastChild && 3 === c.nodeType) {
            c.nodeValue = b;
            return;
        }
    }
    a.textContent = b;
}
var qb = {
    animationIterationCount: !0,
    borderImageOutset: !0,
    borderImageSlice: !0,
    borderImageWidth: !0,
    boxFlex: !0,
    boxFlexGroup: !0,
    boxOrdinalGroup: !0,
    columnCount: !0,
    columns: !0,
    flex: !0,
    flexGrow: !0,
    flexPositive: !0,
    flexShrink: !0,
    flexNegative: !0,
    flexOrder: !0,
    gridArea: !0,
    gridRow: !0,
    gridRowEnd: !0,
    gridRowSpan: !0,
    gridRowStart: !0,
    gridColumn: !0,
    gridColumnEnd: !0,
    gridColumnSpan: !0,
    gridColumnStart: !0,
    fontWeight: !0,
    lineClamp: !0,
    lineHeight: !0,
    opacity: !0,
    order: !0,
    orphans: !0,
    tabSize: !0,
    widows: !0,
    zIndex: !0,
    zoom: !0,
    fillOpacity: !0,
    floodOpacity: !0,
    stopOpacity: !0,
    strokeDasharray: !0,
    strokeDashoffset: !0,
    strokeMiterlimit: !0,
    strokeOpacity: !0,
    strokeWidth: !0
}, rb = [
    "Webkit",
    "ms",
    "Moz",
    "O"
];
Object.keys(qb).forEach(function(a) {
    rb.forEach(function(b) {
        b = b + a.charAt(0).toUpperCase() + a.substring(1);
        qb[b] = qb[a];
    });
});
function sb(a, b, c) {
    return null == b || "boolean" === typeof b || "" === b ? "" : c || "number" !== typeof b || 0 === b || qb.hasOwnProperty(a) && qb[a] ? ("" + b).trim() : b + "px";
}
function tb(a, b) {
    a = a.style;
    for(var c in b)if (b.hasOwnProperty(c)) {
        var d = 0 === c.indexOf("--"), e = sb(c, b[c], d);
        "float" === c && (c = "cssFloat");
        d ? a.setProperty(c, e) : a[c] = e;
    }
}
var ub = m({
    menuitem: !0
}, {
    area: !0,
    base: !0,
    br: !0,
    col: !0,
    embed: !0,
    hr: !0,
    img: !0,
    input: !0,
    keygen: !0,
    link: !0,
    meta: !0,
    param: !0,
    source: !0,
    track: !0,
    wbr: !0
});
function vb(a, b) {
    if (b) {
        if (ub[a] && (null != b.children || null != b.dangerouslySetInnerHTML)) throw Error(y(137, a));
        if (null != b.dangerouslySetInnerHTML) {
            if (null != b.children) throw Error(y(60));
            if (!("object" === typeof b.dangerouslySetInnerHTML && "__html" in b.dangerouslySetInnerHTML)) throw Error(y(61));
        }
        if (null != b.style && "object" !== typeof b.style) throw Error(y(62));
    }
}
function wb(a, b) {
    if (-1 === a.indexOf("-")) return "string" === typeof b.is;
    switch(a){
        case "annotation-xml":
        case "color-profile":
        case "font-face":
        case "font-face-src":
        case "font-face-uri":
        case "font-face-format":
        case "font-face-name":
        case "missing-glyph":
            return !1;
        default:
            return !0;
    }
}
function xb(a) {
    a = a.target || a.srcElement || window;
    a.correspondingUseElement && (a = a.correspondingUseElement);
    return 3 === a.nodeType ? a.parentNode : a;
}
var yb = null, zb = null, Ab = null;
function Bb(a) {
    if (a = Cb(a)) {
        if ("function" !== typeof yb) throw Error(y(280));
        var b = a.stateNode;
        b && (b = Db(b), yb(a.stateNode, a.type, b));
    }
}
function Eb(a) {
    zb ? Ab ? Ab.push(a) : Ab = [
        a
    ] : zb = a;
}
function Fb() {
    if (zb) {
        var a = zb, b = Ab;
        Ab = zb = null;
        Bb(a);
        if (b) for(a = 0; a < b.length; a++)Bb(b[a]);
    }
}
function Gb(a, b) {
    return a(b);
}
function Hb(a, b, c, d, e) {
    return a(b, c, d, e);
}
function Ib() {}
var Jb = Gb, Kb = !1, Lb = !1;
function Mb() {
    if (null !== zb || null !== Ab) Ib(), Fb();
}
function Nb(a, b, c) {
    if (Lb) return a(b, c);
    Lb = !0;
    try {
        return Jb(a, b, c);
    } finally{
        Lb = !1, Mb();
    }
}
function Ob(a, b) {
    var c = a.stateNode;
    if (null === c) return null;
    var d = Db(c);
    if (null === d) return null;
    c = d[b];
    a: switch(b){
        case "onClick":
        case "onClickCapture":
        case "onDoubleClick":
        case "onDoubleClickCapture":
        case "onMouseDown":
        case "onMouseDownCapture":
        case "onMouseMove":
        case "onMouseMoveCapture":
        case "onMouseUp":
        case "onMouseUpCapture":
        case "onMouseEnter":
            (d = !d.disabled) || (a = a.type, d = !("button" === a || "input" === a || "select" === a || "textarea" === a));
            a = !d;
            break a;
        default:
            a = !1;
    }
    if (a) return null;
    if (c && "function" !== typeof c) throw Error(y(231, b, typeof c === "undefined" ? "undefined" : _helpers.typeOf(c)));
    return c;
}
var Pb = !1;
if (fa) try {
    var Qb = {};
    Object.defineProperty(Qb, "passive", {
        get: function get() {
            Pb = !0;
        }
    });
    window.addEventListener("test", Qb, Qb);
    window.removeEventListener("test", Qb, Qb);
} catch (a) {
    Pb = !1;
}
function Rb(a, b, c, d, e, f, g, h, k) {
    var l = Array.prototype.slice.call(arguments, 3);
    try {
        b.apply(c, l);
    } catch (n) {
        this.onError(n);
    }
}
var Sb = !1, Tb = null, Ub = !1, Vb = null, Wb = {
    onError: function onError(a3) {
        Sb = !0;
        Tb = a3;
    }
};
function Xb(a, b, c, d, e, f, g, h, k) {
    Sb = !1;
    Tb = null;
    Rb.apply(Wb, arguments);
}
function Yb(a, b, c, d, e, f, g, h, k) {
    Xb.apply(this, arguments);
    if (Sb) {
        if (Sb) {
            var l = Tb;
            Sb = !1;
            Tb = null;
        } else throw Error(y(198));
        Ub || (Ub = !0, Vb = l);
    }
}
function Zb(a4) {
    var b = a4, c = a4;
    if (a4.alternate) for(; b.return;)b = b.return;
    else {
        a4 = b;
        do b = a4, 0 !== (b.flags & 1026) && (c = b.return), a4 = b.return;
        while (a4)
    }
    return 3 === b.tag ? c : null;
}
function $b(a5) {
    if (13 === a5.tag) {
        var b = a5.memoizedState;
        null === b && (a5 = a5.alternate, null !== a5 && (b = a5.memoizedState));
        if (null !== b) return b.dehydrated;
    }
    return null;
}
function ac(a6) {
    if (Zb(a6) !== a6) throw Error(y(188));
}
function bc(a7) {
    var b = a7.alternate;
    if (!b) {
        b = Zb(a7);
        if (null === b) throw Error(y(188));
        return b !== a7 ? null : a7;
    }
    for(var c = a7, d = b;;){
        var e = c.return;
        if (null === e) break;
        var f = e.alternate;
        if (null === f) {
            d = e.return;
            if (null !== d) {
                c = d;
                continue;
            }
            break;
        }
        if (e.child === f.child) {
            for(f = e.child; f;){
                if (f === c) return ac(e), a7;
                if (f === d) return ac(e), b;
                f = f.sibling;
            }
            throw Error(y(188));
        }
        if (c.return !== d.return) c = e, d = f;
        else {
            for(var g = !1, h = e.child; h;){
                if (h === c) {
                    g = !0;
                    c = e;
                    d = f;
                    break;
                }
                if (h === d) {
                    g = !0;
                    d = e;
                    c = f;
                    break;
                }
                h = h.sibling;
            }
            if (!g) {
                for(h = f.child; h;){
                    if (h === c) {
                        g = !0;
                        c = f;
                        d = e;
                        break;
                    }
                    if (h === d) {
                        g = !0;
                        d = f;
                        c = e;
                        break;
                    }
                    h = h.sibling;
                }
                if (!g) throw Error(y(189));
            }
        }
        if (c.alternate !== d) throw Error(y(190));
    }
    if (3 !== c.tag) throw Error(y(188));
    return c.stateNode.current === c ? a7 : b;
}
function cc(a8) {
    a8 = bc(a8);
    if (!a8) return null;
    for(var b = a8;;){
        if (5 === b.tag || 6 === b.tag) return b;
        if (b.child) b.child.return = b, b = b.child;
        else {
            if (b === a8) break;
            for(; !b.sibling;){
                if (!b.return || b.return === a8) return null;
                b = b.return;
            }
            b.sibling.return = b.return;
            b = b.sibling;
        }
    }
    return null;
}
function dc(a9, b) {
    for(var c = a9.alternate; null !== b;){
        if (b === a9 || b === c) return !0;
        b = b.return;
    }
    return !1;
}
var ec, fc, gc, hc, ic = !1, jc = [], kc = null, lc = null, mc = null, nc = new Map, oc = new Map, pc = [], qc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
function rc(a10, b, c, d, e) {
    return {
        blockedOn: a10,
        domEventName: b,
        eventSystemFlags: c | 16,
        nativeEvent: e,
        targetContainers: [
            d
        ]
    };
}
function sc(a11, b) {
    switch(a11){
        case "focusin":
        case "focusout":
            kc = null;
            break;
        case "dragenter":
        case "dragleave":
            lc = null;
            break;
        case "mouseover":
        case "mouseout":
            mc = null;
            break;
        case "pointerover":
        case "pointerout":
            nc.delete(b.pointerId);
            break;
        case "gotpointercapture":
        case "lostpointercapture":
            oc.delete(b.pointerId);
    }
}
function tc(a12, b, c, d, e, f) {
    if (null === a12 || a12.nativeEvent !== f) return a12 = rc(b, c, d, e, f), null !== b && (b = Cb(b), null !== b && fc(b)), a12;
    a12.eventSystemFlags |= d;
    b = a12.targetContainers;
    null !== e && -1 === b.indexOf(e) && b.push(e);
    return a12;
}
function uc(a13, b, c, d, e) {
    switch(b){
        case "focusin":
            return kc = tc(kc, a13, b, c, d, e), !0;
        case "dragenter":
            return lc = tc(lc, a13, b, c, d, e), !0;
        case "mouseover":
            return mc = tc(mc, a13, b, c, d, e), !0;
        case "pointerover":
            var f = e.pointerId;
            nc.set(f, tc(nc.get(f) || null, a13, b, c, d, e));
            return !0;
        case "gotpointercapture":
            return f = e.pointerId, oc.set(f, tc(oc.get(f) || null, a13, b, c, d, e)), !0;
    }
    return !1;
}
function vc(a14) {
    var b = wc(a14.target);
    if (null !== b) {
        var c = Zb(b);
        if (null !== c) {
            if (b = c.tag, 13 === b) {
                if (b = $b(c), null !== b) {
                    a14.blockedOn = b;
                    hc(a14.lanePriority, function() {
                        r.unstable_runWithPriority(a14.priority, function() {
                            gc(c);
                        });
                    });
                    return;
                }
            } else if (3 === b && c.stateNode.hydrate) {
                a14.blockedOn = 3 === c.tag ? c.stateNode.containerInfo : null;
                return;
            }
        }
    }
    a14.blockedOn = null;
}
function xc(a15) {
    if (null !== a15.blockedOn) return !1;
    for(var b = a15.targetContainers; 0 < b.length;){
        var c = yc(a15.domEventName, a15.eventSystemFlags, b[0], a15.nativeEvent);
        if (null !== c) return b = Cb(c), null !== b && fc(b), a15.blockedOn = c, !1;
        b.shift();
    }
    return !0;
}
function zc(a16, b, c) {
    xc(a16) && c.delete(b);
}
function Ac() {
    for(ic = !1; 0 < jc.length;){
        var a17 = jc[0];
        if (null !== a17.blockedOn) {
            a17 = Cb(a17.blockedOn);
            null !== a17 && ec(a17);
            break;
        }
        for(var b = a17.targetContainers; 0 < b.length;){
            var c = yc(a17.domEventName, a17.eventSystemFlags, b[0], a17.nativeEvent);
            if (null !== c) {
                a17.blockedOn = c;
                break;
            }
            b.shift();
        }
        null === a17.blockedOn && jc.shift();
    }
    null !== kc && xc(kc) && (kc = null);
    null !== lc && xc(lc) && (lc = null);
    null !== mc && xc(mc) && (mc = null);
    nc.forEach(zc);
    oc.forEach(zc);
}
function Bc(a18, b) {
    a18.blockedOn === b && (a18.blockedOn = null, ic || (ic = !0, r.unstable_scheduleCallback(r.unstable_NormalPriority, Ac)));
}
function Cc(a19) {
    function b1(b) {
        return Bc(b, a19);
    }
    if (0 < jc.length) {
        Bc(jc[0], a19);
        for(var c = 1; c < jc.length; c++){
            var d = jc[c];
            d.blockedOn === a19 && (d.blockedOn = null);
        }
    }
    null !== kc && Bc(kc, a19);
    null !== lc && Bc(lc, a19);
    null !== mc && Bc(mc, a19);
    nc.forEach(b1);
    oc.forEach(b1);
    for(c = 0; c < pc.length; c++)d = pc[c], d.blockedOn === a19 && (d.blockedOn = null);
    for(; 0 < pc.length && (c = pc[0], null === c.blockedOn);)vc(c), null === c.blockedOn && pc.shift();
}
function Dc(a20, b) {
    var c = {};
    c[a20.toLowerCase()] = b.toLowerCase();
    c["Webkit" + a20] = "webkit" + b;
    c["Moz" + a20] = "moz" + b;
    return c;
}
var Ec = {
    animationend: Dc("Animation", "AnimationEnd"),
    animationiteration: Dc("Animation", "AnimationIteration"),
    animationstart: Dc("Animation", "AnimationStart"),
    transitionend: Dc("Transition", "TransitionEnd")
}, Fc = {}, Gc = {};
fa && (Gc = document.createElement("div").style, "AnimationEvent" in window || (delete Ec.animationend.animation, delete Ec.animationiteration.animation, delete Ec.animationstart.animation), "TransitionEvent" in window || delete Ec.transitionend.transition);
function Hc(a21) {
    if (Fc[a21]) return Fc[a21];
    if (!Ec[a21]) return a21;
    var b = Ec[a21], c;
    for(c in b)if (b.hasOwnProperty(c) && c in Gc) return Fc[a21] = b[c];
    return a21;
}
var Ic = Hc("animationend"), Jc = Hc("animationiteration"), Kc = Hc("animationstart"), Lc = Hc("transitionend"), Mc = new Map, Nc = new Map, Oc = [
    "abort",
    "abort",
    Ic,
    "animationEnd",
    Jc,
    "animationIteration",
    Kc,
    "animationStart",
    "canplay",
    "canPlay",
    "canplaythrough",
    "canPlayThrough",
    "durationchange",
    "durationChange",
    "emptied",
    "emptied",
    "encrypted",
    "encrypted",
    "ended",
    "ended",
    "error",
    "error",
    "gotpointercapture",
    "gotPointerCapture",
    "load",
    "load",
    "loadeddata",
    "loadedData",
    "loadedmetadata",
    "loadedMetadata",
    "loadstart",
    "loadStart",
    "lostpointercapture",
    "lostPointerCapture",
    "playing",
    "playing",
    "progress",
    "progress",
    "seeking",
    "seeking",
    "stalled",
    "stalled",
    "suspend",
    "suspend",
    "timeupdate",
    "timeUpdate",
    Lc,
    "transitionEnd",
    "waiting",
    "waiting"
];
function Pc(a22, b) {
    for(var c = 0; c < a22.length; c += 2){
        var d = a22[c], e = a22[c + 1];
        e = "on" + (e[0].toUpperCase() + e.slice(1));
        Nc.set(d, b);
        Mc.set(d, e);
        da(e, [
            d
        ]);
    }
}
var Qc = r.unstable_now;
Qc();
var F = 8;
function Rc(a23) {
    if (0 !== (1 & a23)) return F = 15, 1;
    if (0 !== (2 & a23)) return F = 14, 2;
    if (0 !== (4 & a23)) return F = 13, 4;
    var b = 24 & a23;
    if (0 !== b) return F = 12, b;
    if (0 !== (a23 & 32)) return F = 11, 32;
    b = 192 & a23;
    if (0 !== b) return F = 10, b;
    if (0 !== (a23 & 256)) return F = 9, 256;
    b = 3584 & a23;
    if (0 !== b) return F = 8, b;
    if (0 !== (a23 & 4096)) return F = 7, 4096;
    b = 4186112 & a23;
    if (0 !== b) return F = 6, b;
    b = 62914560 & a23;
    if (0 !== b) return F = 5, b;
    if (a23 & 67108864) return F = 4, 67108864;
    if (0 !== (a23 & 134217728)) return F = 3, 134217728;
    b = 805306368 & a23;
    if (0 !== b) return F = 2, b;
    if (0 !== (1073741824 & a23)) return F = 1, 1073741824;
    F = 8;
    return a23;
}
function Sc(a24) {
    switch(a24){
        case 99:
            return 15;
        case 98:
            return 10;
        case 97:
        case 96:
            return 8;
        case 95:
            return 2;
        default:
            return 0;
    }
}
function Tc(a25) {
    switch(a25){
        case 15:
        case 14:
            return 99;
        case 13:
        case 12:
        case 11:
        case 10:
            return 98;
        case 9:
        case 8:
        case 7:
        case 6:
        case 4:
        case 5:
            return 97;
        case 3:
        case 2:
        case 1:
            return 95;
        case 0:
            return 90;
        default:
            throw Error(y(358, a25));
    }
}
function Uc(a26, b) {
    var c = a26.pendingLanes;
    if (0 === c) return F = 0;
    var d = 0, e = 0, f = a26.expiredLanes, g = a26.suspendedLanes, h = a26.pingedLanes;
    if (0 !== f) d = f, e = F = 15;
    else if (f = c & 134217727, 0 !== f) {
        var k = f & ~g;
        0 !== k ? (d = Rc(k), e = F) : (h &= f, 0 !== h && (d = Rc(h), e = F));
    } else f = c & ~g, 0 !== f ? (d = Rc(f), e = F) : 0 !== h && (d = Rc(h), e = F);
    if (0 === d) return 0;
    d = 31 - Vc(d);
    d = c & ((0 > d ? 0 : 1 << d) << 1) - 1;
    if (0 !== b && b !== d && 0 === (b & g)) {
        Rc(b);
        if (e <= F) return b;
        F = e;
    }
    b = a26.entangledLanes;
    if (0 !== b) for(a26 = a26.entanglements, b &= d; 0 < b;)c = 31 - Vc(b), e = 1 << c, d |= a26[c], b &= ~e;
    return d;
}
function Wc(a27) {
    a27 = a27.pendingLanes & -1073741825;
    return 0 !== a27 ? a27 : a27 & 1073741824 ? 1073741824 : 0;
}
function Xc(a28, b) {
    switch(a28){
        case 15:
            return 1;
        case 14:
            return 2;
        case 12:
            return a28 = Yc(24 & ~b), 0 === a28 ? Xc(10, b) : a28;
        case 10:
            return a28 = Yc(192 & ~b), 0 === a28 ? Xc(8, b) : a28;
        case 8:
            return a28 = Yc(3584 & ~b), 0 === a28 && (a28 = Yc(4186112 & ~b), 0 === a28 && (a28 = 512)), a28;
        case 2:
            return b = Yc(805306368 & ~b), 0 === b && (b = 268435456), b;
    }
    throw Error(y(358, a28));
}
function Yc(a29) {
    return a29 & -a29;
}
function Zc(a30) {
    for(var b = [], c = 0; 31 > c; c++)b.push(a30);
    return b;
}
function $c(a31, b, c) {
    a31.pendingLanes |= b;
    var d = b - 1;
    a31.suspendedLanes &= d;
    a31.pingedLanes &= d;
    a31 = a31.eventTimes;
    b = 31 - Vc(b);
    a31[b] = c;
}
var Vc = Math.clz32 ? Math.clz32 : ad, bd = Math.log, cd = Math.LN2;
function ad(a32) {
    return 0 === a32 ? 32 : 31 - (bd(a32) / cd | 0) | 0;
}
var dd = r.unstable_UserBlockingPriority, ed = r.unstable_runWithPriority, fd = !0;
function gd(a33, b, c, d) {
    Kb || Ib();
    var e = hd, f = Kb;
    Kb = !0;
    try {
        Hb(e, a33, b, c, d);
    } finally{
        (Kb = f) || Mb();
    }
}
function id(a34, b, c, d) {
    ed(dd, hd.bind(null, a34, b, c, d));
}
function hd(a35, b, c, d) {
    if (fd) {
        var e;
        if ((e = 0 === (b & 4)) && 0 < jc.length && -1 < qc.indexOf(a35)) a35 = rc(null, a35, b, c, d), jc.push(a35);
        else {
            var f = yc(a35, b, c, d);
            if (null === f) e && sc(a35, d);
            else {
                if (e) {
                    if (-1 < qc.indexOf(a35)) {
                        a35 = rc(f, a35, b, c, d);
                        jc.push(a35);
                        return;
                    }
                    if (uc(f, a35, b, c, d)) return;
                    sc(a35, d);
                }
                jd(a35, b, d, null, c);
            }
        }
    }
}
function yc(a36, b, c, d) {
    var e = xb(d);
    e = wc(e);
    if (null !== e) {
        var f = Zb(e);
        if (null === f) e = null;
        else {
            var g = f.tag;
            if (13 === g) {
                e = $b(f);
                if (null !== e) return e;
                e = null;
            } else if (3 === g) {
                if (f.stateNode.hydrate) return 3 === f.tag ? f.stateNode.containerInfo : null;
                e = null;
            } else f !== e && (e = null);
        }
    }
    jd(a36, b, d, e, c);
    return null;
}
var kd = null, ld = null, md = null;
function nd() {
    if (md) return md;
    var a37, b = ld, c = b.length, d, e = "value" in kd ? kd.value : kd.textContent, f = e.length;
    for(a37 = 0; a37 < c && b[a37] === e[a37]; a37++);
    var g = c - a37;
    for(d = 1; d <= g && b[c - d] === e[f - d]; d++);
    return md = e.slice(a37, 1 < d ? 1 - d : void 0);
}
function od(a38) {
    var b = a38.keyCode;
    "charCode" in a38 ? (a38 = a38.charCode, 0 === a38 && 13 === b && (a38 = 13)) : a38 = b;
    10 === a38 && (a38 = 13);
    return 32 <= a38 || 13 === a38 ? a38 : 0;
}
function pd() {
    return !0;
}
function qd() {
    return !1;
}
function rd(a39) {
    function b2(b, d, e, f, g) {
        this._reactName = b;
        this._targetInst = e;
        this.type = d;
        this.nativeEvent = f;
        this.target = g;
        this.currentTarget = null;
        for(var c in a39)a39.hasOwnProperty(c) && (b = a39[c], this[c] = b ? b(f) : f[c]);
        this.isDefaultPrevented = (null != f.defaultPrevented ? f.defaultPrevented : !1 === f.returnValue) ? pd : qd;
        this.isPropagationStopped = qd;
        return this;
    }
    m(b2.prototype, {
        preventDefault: function preventDefault() {
            this.defaultPrevented = !0;
            var a40 = this.nativeEvent;
            a40 && (a40.preventDefault ? a40.preventDefault() : "unknown" !== _helpers.typeOf(a40.returnValue) && (a40.returnValue = !1), this.isDefaultPrevented = pd);
        },
        stopPropagation: function stopPropagation() {
            var a41 = this.nativeEvent;
            a41 && (a41.stopPropagation ? a41.stopPropagation() : "unknown" !== _helpers.typeOf(a41.cancelBubble) && (a41.cancelBubble = !0), this.isPropagationStopped = pd);
        },
        persist: function persist() {},
        isPersistent: pd
    });
    return b2;
}
var sd = {
    eventPhase: 0,
    bubbles: 0,
    cancelable: 0,
    timeStamp: function timeStamp(a42) {
        return a42.timeStamp || Date.now();
    },
    defaultPrevented: 0,
    isTrusted: 0
}, td = rd(sd), ud = m({}, sd, {
    view: 0,
    detail: 0
}), vd = rd(ud), wd, xd, yd, Ad = m({}, ud, {
    screenX: 0,
    screenY: 0,
    clientX: 0,
    clientY: 0,
    pageX: 0,
    pageY: 0,
    ctrlKey: 0,
    shiftKey: 0,
    altKey: 0,
    metaKey: 0,
    getModifierState: zd,
    button: 0,
    buttons: 0,
    relatedTarget: function relatedTarget(a43) {
        return void 0 === a43.relatedTarget ? a43.fromElement === a43.srcElement ? a43.toElement : a43.fromElement : a43.relatedTarget;
    },
    movementX: function movementX(a44) {
        if ("movementX" in a44) return a44.movementX;
        a44 !== yd && (yd && "mousemove" === a44.type ? (wd = a44.screenX - yd.screenX, xd = a44.screenY - yd.screenY) : xd = wd = 0, yd = a44);
        return wd;
    },
    movementY: function movementY(a45) {
        return "movementY" in a45 ? a45.movementY : xd;
    }
}), Bd = rd(Ad), Cd = m({}, Ad, {
    dataTransfer: 0
}), Dd = rd(Cd), Ed = m({}, ud, {
    relatedTarget: 0
}), Fd = rd(Ed), Gd = m({}, sd, {
    animationName: 0,
    elapsedTime: 0,
    pseudoElement: 0
}), Hd = rd(Gd), Id = m({}, sd, {
    clipboardData: function clipboardData(a46) {
        return "clipboardData" in a46 ? a46.clipboardData : window.clipboardData;
    }
}), Jd = rd(Id), Kd = m({}, sd, {
    data: 0
}), Ld = rd(Kd), Md = {
    Esc: "Escape",
    Spacebar: " ",
    Left: "ArrowLeft",
    Up: "ArrowUp",
    Right: "ArrowRight",
    Down: "ArrowDown",
    Del: "Delete",
    Win: "OS",
    Menu: "ContextMenu",
    Apps: "ContextMenu",
    Scroll: "ScrollLock",
    MozPrintableKey: "Unidentified"
}, Nd = {
    8: "Backspace",
    9: "Tab",
    12: "Clear",
    13: "Enter",
    16: "Shift",
    17: "Control",
    18: "Alt",
    19: "Pause",
    20: "CapsLock",
    27: "Escape",
    32: " ",
    33: "PageUp",
    34: "PageDown",
    35: "End",
    36: "Home",
    37: "ArrowLeft",
    38: "ArrowUp",
    39: "ArrowRight",
    40: "ArrowDown",
    45: "Insert",
    46: "Delete",
    112: "F1",
    113: "F2",
    114: "F3",
    115: "F4",
    116: "F5",
    117: "F6",
    118: "F7",
    119: "F8",
    120: "F9",
    121: "F10",
    122: "F11",
    123: "F12",
    144: "NumLock",
    145: "ScrollLock",
    224: "Meta"
}, Od = {
    Alt: "altKey",
    Control: "ctrlKey",
    Meta: "metaKey",
    Shift: "shiftKey"
};
function Pd(a47) {
    var b = this.nativeEvent;
    return b.getModifierState ? b.getModifierState(a47) : (a47 = Od[a47]) ? !!b[a47] : !1;
}
function zd() {
    return Pd;
}
var Qd = m({}, ud, {
    key: function key(a48) {
        if (a48.key) {
            var b = Md[a48.key] || a48.key;
            if ("Unidentified" !== b) return b;
        }
        return "keypress" === a48.type ? (a48 = od(a48), 13 === a48 ? "Enter" : String.fromCharCode(a48)) : "keydown" === a48.type || "keyup" === a48.type ? Nd[a48.keyCode] || "Unidentified" : "";
    },
    code: 0,
    location: 0,
    ctrlKey: 0,
    shiftKey: 0,
    altKey: 0,
    metaKey: 0,
    repeat: 0,
    locale: 0,
    getModifierState: zd,
    charCode: function charCode(a49) {
        return "keypress" === a49.type ? od(a49) : 0;
    },
    keyCode: function keyCode(a50) {
        return "keydown" === a50.type || "keyup" === a50.type ? a50.keyCode : 0;
    },
    which: function which(a51) {
        return "keypress" === a51.type ? od(a51) : "keydown" === a51.type || "keyup" === a51.type ? a51.keyCode : 0;
    }
}), Rd = rd(Qd), Sd = m({}, Ad, {
    pointerId: 0,
    width: 0,
    height: 0,
    pressure: 0,
    tangentialPressure: 0,
    tiltX: 0,
    tiltY: 0,
    twist: 0,
    pointerType: 0,
    isPrimary: 0
}), Td = rd(Sd), Ud = m({}, ud, {
    touches: 0,
    targetTouches: 0,
    changedTouches: 0,
    altKey: 0,
    metaKey: 0,
    ctrlKey: 0,
    shiftKey: 0,
    getModifierState: zd
}), Vd = rd(Ud), Wd = m({}, sd, {
    propertyName: 0,
    elapsedTime: 0,
    pseudoElement: 0
}), Xd = rd(Wd), Yd = m({}, Ad, {
    deltaX: function deltaX(a52) {
        return "deltaX" in a52 ? a52.deltaX : "wheelDeltaX" in a52 ? -a52.wheelDeltaX : 0;
    },
    deltaY: function deltaY(a53) {
        return "deltaY" in a53 ? a53.deltaY : "wheelDeltaY" in a53 ? -a53.wheelDeltaY : "wheelDelta" in a53 ? -a53.wheelDelta : 0;
    },
    deltaZ: 0,
    deltaMode: 0
}), Zd = rd(Yd), $d = [
    9,
    13,
    27,
    32
], ae = fa && "CompositionEvent" in window, be = null;
fa && "documentMode" in document && (be = document.documentMode);
var ce = fa && "TextEvent" in window && !be, de = fa && (!ae || be && 8 < be && 11 >= be), ee = String.fromCharCode(32), fe = !1;
function ge(a54, b) {
    switch(a54){
        case "keyup":
            return -1 !== $d.indexOf(b.keyCode);
        case "keydown":
            return 229 !== b.keyCode;
        case "keypress":
        case "mousedown":
        case "focusout":
            return !0;
        default:
            return !1;
    }
}
function he(a55) {
    a55 = a55.detail;
    return "object" === typeof a55 && "data" in a55 ? a55.data : null;
}
var ie = !1;
function je(a56, b) {
    switch(a56){
        case "compositionend":
            return he(b);
        case "keypress":
            if (32 !== b.which) return null;
            fe = !0;
            return ee;
        case "textInput":
            return a56 = b.data, a56 === ee && fe ? null : a56;
        default:
            return null;
    }
}
function ke(a57, b) {
    if (ie) return "compositionend" === a57 || !ae && ge(a57, b) ? (a57 = nd(), md = ld = kd = null, ie = !1, a57) : null;
    switch(a57){
        case "paste":
            return null;
        case "keypress":
            if (!(b.ctrlKey || b.altKey || b.metaKey) || b.ctrlKey && b.altKey) {
                if (b.char && 1 < b.char.length) return b.char;
                if (b.which) return String.fromCharCode(b.which);
            }
            return null;
        case "compositionend":
            return de && "ko" !== b.locale ? null : b.data;
        default:
            return null;
    }
}
var le = {
    color: !0,
    date: !0,
    datetime: !0,
    "datetime-local": !0,
    email: !0,
    month: !0,
    number: !0,
    password: !0,
    range: !0,
    search: !0,
    tel: !0,
    text: !0,
    time: !0,
    url: !0,
    week: !0
};
function me(a58) {
    var b = a58 && a58.nodeName && a58.nodeName.toLowerCase();
    return "input" === b ? !!le[a58.type] : "textarea" === b ? !0 : !1;
}
function ne(a59, b, c, d) {
    Eb(d);
    b = oe(b, "onChange");
    0 < b.length && (c = new td("onChange", "change", null, c, d), a59.push({
        event: c,
        listeners: b
    }));
}
var pe = null, qe = null;
function re(a60) {
    se(a60, 0);
}
function te(a61) {
    var b = ue(a61);
    if (Wa(b)) return a61;
}
function ve(a62, b) {
    if ("change" === a62) return b;
}
var we = !1;
if (fa) {
    var xe;
    if (fa) {
        var ye = "oninput" in document;
        if (!ye) {
            var ze = document.createElement("div");
            ze.setAttribute("oninput", "return;");
            ye = "function" === typeof ze.oninput;
        }
        xe = ye;
    } else xe = !1;
    we = xe && (!document.documentMode || 9 < document.documentMode);
}
function Ae() {
    pe && (pe.detachEvent("onpropertychange", Be), qe = pe = null);
}
function Be(a63) {
    if ("value" === a63.propertyName && te(qe)) {
        var b = [];
        ne(b, qe, a63, xb(a63));
        a63 = re;
        if (Kb) a63(b);
        else {
            Kb = !0;
            try {
                Gb(a63, b);
            } finally{
                Kb = !1, Mb();
            }
        }
    }
}
function Ce(a64, b, c) {
    "focusin" === a64 ? (Ae(), pe = b, qe = c, pe.attachEvent("onpropertychange", Be)) : "focusout" === a64 && Ae();
}
function De(a65) {
    if ("selectionchange" === a65 || "keyup" === a65 || "keydown" === a65) return te(qe);
}
function Ee(a66, b) {
    if ("click" === a66) return te(b);
}
function Fe(a67, b) {
    if ("input" === a67 || "change" === a67) return te(b);
}
function Ge(a68, b) {
    return a68 === b && (0 !== a68 || 1 / a68 === 1 / b) || a68 !== a68 && b !== b;
}
var He = "function" === typeof Object.is ? Object.is : Ge, Ie = Object.prototype.hasOwnProperty;
function Je(a69, b) {
    if (He(a69, b)) return !0;
    if ("object" !== typeof a69 || null === a69 || "object" !== typeof b || null === b) return !1;
    var c = Object.keys(a69), d = Object.keys(b);
    if (c.length !== d.length) return !1;
    for(d = 0; d < c.length; d++)if (!Ie.call(b, c[d]) || !He(a69[c[d]], b[c[d]])) return !1;
    return !0;
}
function Ke(a70) {
    for(; a70 && a70.firstChild;)a70 = a70.firstChild;
    return a70;
}
function Le(a71, b) {
    var c = Ke(a71);
    a71 = 0;
    for(var d; c;){
        if (3 === c.nodeType) {
            d = a71 + c.textContent.length;
            if (a71 <= b && d >= b) return {
                node: c,
                offset: b - a71
            };
            a71 = d;
        }
        a: {
            for(; c;){
                if (c.nextSibling) {
                    c = c.nextSibling;
                    break a;
                }
                c = c.parentNode;
            }
            c = void 0;
        }
        c = Ke(c);
    }
}
function Me(a72, b) {
    return a72 && b ? a72 === b ? !0 : a72 && 3 === a72.nodeType ? !1 : b && 3 === b.nodeType ? Me(a72, b.parentNode) : "contains" in a72 ? a72.contains(b) : a72.compareDocumentPosition ? !!(a72.compareDocumentPosition(b) & 16) : !1 : !1;
}
function Ne() {
    for(var a73 = window, b = Xa(); b instanceof a73.HTMLIFrameElement;){
        try {
            var c = "string" === typeof b.contentWindow.location.href;
        } catch (d) {
            c = !1;
        }
        if (c) a73 = b.contentWindow;
        else break;
        b = Xa(a73.document);
    }
    return b;
}
function Oe(a74) {
    var b = a74 && a74.nodeName && a74.nodeName.toLowerCase();
    return b && ("input" === b && ("text" === a74.type || "search" === a74.type || "tel" === a74.type || "url" === a74.type || "password" === a74.type) || "textarea" === b || "true" === a74.contentEditable);
}
var Pe = fa && "documentMode" in document && 11 >= document.documentMode, Qe = null, Re = null, Se = null, Te = !1;
function Ue(a75, b, c) {
    var d = c.window === c ? c.document : 9 === c.nodeType ? c : c.ownerDocument;
    Te || null == Qe || Qe !== Xa(d) || (d = Qe, "selectionStart" in d && Oe(d) ? d = {
        start: d.selectionStart,
        end: d.selectionEnd
    } : (d = (d.ownerDocument && d.ownerDocument.defaultView || window).getSelection(), d = {
        anchorNode: d.anchorNode,
        anchorOffset: d.anchorOffset,
        focusNode: d.focusNode,
        focusOffset: d.focusOffset
    }), Se && Je(Se, d) || (Se = d, d = oe(Re, "onSelect"), 0 < d.length && (b = new td("onSelect", "select", null, b, c), a75.push({
        event: b,
        listeners: d
    }), b.target = Qe)));
}
Pc("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "), 0);
Pc("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "), 1);
Pc(Oc, 2);
for(var Ve = "change selectionchange textInput compositionstart compositionend compositionupdate".split(" "), We = 0; We < Ve.length; We++)Nc.set(Ve[We], 0);
ea("onMouseEnter", [
    "mouseout",
    "mouseover"
]);
ea("onMouseLeave", [
    "mouseout",
    "mouseover"
]);
ea("onPointerEnter", [
    "pointerout",
    "pointerover"
]);
ea("onPointerLeave", [
    "pointerout",
    "pointerover"
]);
da("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
da("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
da("onBeforeInput", [
    "compositionend",
    "keypress",
    "textInput",
    "paste"
]);
da("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
da("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
da("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
var Xe = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "), Ye = new Set("cancel close invalid load scroll toggle".split(" ").concat(Xe));
function Ze(a76, b, c) {
    var d = a76.type || "unknown-event";
    a76.currentTarget = c;
    Yb(d, b, void 0, a76);
    a76.currentTarget = null;
}
function se(a77, b) {
    b = 0 !== (b & 4);
    for(var c = 0; c < a77.length; c++){
        var d = a77[c], e = d.event;
        d = d.listeners;
        a: {
            var f = void 0;
            if (b) for(var g = d.length - 1; 0 <= g; g--){
                var h = d[g], k = h.instance, l = h.currentTarget;
                h = h.listener;
                if (k !== f && e.isPropagationStopped()) break a;
                Ze(e, h, l);
                f = k;
            }
            else for(g = 0; g < d.length; g++){
                h = d[g];
                k = h.instance;
                l = h.currentTarget;
                h = h.listener;
                if (k !== f && e.isPropagationStopped()) break a;
                Ze(e, h, l);
                f = k;
            }
        }
    }
    if (Ub) throw a77 = Vb, Ub = !1, Vb = null, a77;
}
function G(a78, b) {
    var c = $e(b), d = a78 + "__bubble";
    c.has(d) || (af(b, a78, 2, !1), c.add(d));
}
var bf = "_reactListening" + Math.random().toString(36).slice(2);
function cf(a79) {
    a79[bf] || (a79[bf] = !0, ba.forEach(function(b) {
        Ye.has(b) || df(b, !1, a79, null);
        df(b, !0, a79, null);
    }));
}
function df(a80, b, c, d) {
    var e = 4 < arguments.length && void 0 !== arguments[4] ? arguments[4] : 0, f = c;
    "selectionchange" === a80 && 9 !== c.nodeType && (f = c.ownerDocument);
    if (null !== d && !b && Ye.has(a80)) {
        if ("scroll" !== a80) return;
        e |= 2;
        f = d;
    }
    var g = $e(f), h = a80 + "__" + (b ? "capture" : "bubble");
    g.has(h) || (b && (e |= 4), af(f, a80, e, b), g.add(h));
}
function af(a81, b, c, d) {
    var e = Nc.get(b);
    switch(void 0 === e ? 2 : e){
        case 0:
            e = gd;
            break;
        case 1:
            e = id;
            break;
        default:
            e = hd;
    }
    c = e.bind(null, b, c, a81);
    e = void 0;
    !Pb || "touchstart" !== b && "touchmove" !== b && "wheel" !== b || (e = !0);
    d ? void 0 !== e ? a81.addEventListener(b, c, {
        capture: !0,
        passive: e
    }) : a81.addEventListener(b, c, !0) : void 0 !== e ? a81.addEventListener(b, c, {
        passive: e
    }) : a81.addEventListener(b, c, !1);
}
function jd(a82, b, c, d, e) {
    var f = d;
    if (0 === (b & 1) && 0 === (b & 2) && null !== d) a: for(;;){
        if (null === d) return;
        var g = d.tag;
        if (3 === g || 4 === g) {
            var h = d.stateNode.containerInfo;
            if (h === e || 8 === h.nodeType && h.parentNode === e) break;
            if (4 === g) for(g = d.return; null !== g;){
                var k = g.tag;
                if (3 === k || 4 === k) {
                    if (k = g.stateNode.containerInfo, k === e || 8 === k.nodeType && k.parentNode === e) return;
                }
                g = g.return;
            }
            for(; null !== h;){
                g = wc(h);
                if (null === g) return;
                k = g.tag;
                if (5 === k || 6 === k) {
                    d = f = g;
                    continue a;
                }
                h = h.parentNode;
            }
        }
        d = d.return;
    }
    Nb(function() {
        var _$d = f, _$e = xb(c), g = [];
        a: {
            var h = Mc.get(a82);
            if (void 0 !== h) {
                var k = td, x = a82;
                switch(a82){
                    case "keypress":
                        if (0 === od(c)) break a;
                    case "keydown":
                    case "keyup":
                        k = Rd;
                        break;
                    case "focusin":
                        x = "focus";
                        k = Fd;
                        break;
                    case "focusout":
                        x = "blur";
                        k = Fd;
                        break;
                    case "beforeblur":
                    case "afterblur":
                        k = Fd;
                        break;
                    case "click":
                        if (2 === c.button) break a;
                    case "auxclick":
                    case "dblclick":
                    case "mousedown":
                    case "mousemove":
                    case "mouseup":
                    case "mouseout":
                    case "mouseover":
                    case "contextmenu":
                        k = Bd;
                        break;
                    case "drag":
                    case "dragend":
                    case "dragenter":
                    case "dragexit":
                    case "dragleave":
                    case "dragover":
                    case "dragstart":
                    case "drop":
                        k = Dd;
                        break;
                    case "touchcancel":
                    case "touchend":
                    case "touchmove":
                    case "touchstart":
                        k = Vd;
                        break;
                    case Ic:
                    case Jc:
                    case Kc:
                        k = Hd;
                        break;
                    case Lc:
                        k = Xd;
                        break;
                    case "scroll":
                        k = vd;
                        break;
                    case "wheel":
                        k = Zd;
                        break;
                    case "copy":
                    case "cut":
                    case "paste":
                        k = Jd;
                        break;
                    case "gotpointercapture":
                    case "lostpointercapture":
                    case "pointercancel":
                    case "pointerdown":
                    case "pointermove":
                    case "pointerout":
                    case "pointerover":
                    case "pointerup":
                        k = Td;
                }
                var w = 0 !== (b & 4), z = !w && "scroll" === a82, u = w ? null !== h ? h + "Capture" : null : h;
                w = [];
                for(var t = _$d, q; null !== t;){
                    q = t;
                    var v = q.stateNode;
                    5 === q.tag && null !== v && (q = v, null !== u && (v = Ob(t, u), null != v && w.push(ef(t, v, q))));
                    if (z) break;
                    t = t.return;
                }
                0 < w.length && (h = new k(h, x, null, c, _$e), g.push({
                    event: h,
                    listeners: w
                }));
            }
        }
        if (0 === (b & 7)) {
            a: {
                h = "mouseover" === a82 || "pointerover" === a82;
                k = "mouseout" === a82 || "pointerout" === a82;
                if (h && 0 === (b & 16) && (x = c.relatedTarget || c.fromElement) && (wc(x) || x[ff])) break a;
                if (k || h) {
                    h = _$e.window === _$e ? _$e : (h = _$e.ownerDocument) ? h.defaultView || h.parentWindow : window;
                    if (k) {
                        if (x = c.relatedTarget || c.toElement, k = _$d, x = x ? wc(x) : null, null !== x && (z = Zb(x), x !== z || 5 !== x.tag && 6 !== x.tag)) x = null;
                    } else k = null, x = _$d;
                    if (k !== x) {
                        w = Bd;
                        v = "onMouseLeave";
                        u = "onMouseEnter";
                        t = "mouse";
                        if ("pointerout" === a82 || "pointerover" === a82) w = Td, v = "onPointerLeave", u = "onPointerEnter", t = "pointer";
                        z = null == k ? h : ue(k);
                        q = null == x ? h : ue(x);
                        h = new w(v, t + "leave", k, c, _$e);
                        h.target = z;
                        h.relatedTarget = q;
                        v = null;
                        wc(_$e) === _$d && (w = new w(u, t + "enter", x, c, _$e), w.target = q, w.relatedTarget = z, v = w);
                        z = v;
                        if (k && x) b: {
                            w = k;
                            u = x;
                            t = 0;
                            for(q = w; q; q = gf(q))t++;
                            q = 0;
                            for(v = u; v; v = gf(v))q++;
                            for(; 0 < t - q;)w = gf(w), t--;
                            for(; 0 < q - t;)u = gf(u), q--;
                            for(; t--;){
                                if (w === u || null !== u && w === u.alternate) break b;
                                w = gf(w);
                                u = gf(u);
                            }
                            w = null;
                        }
                        else w = null;
                        null !== k && hf(g, h, k, w, !1);
                        null !== x && null !== z && hf(g, z, x, w, !0);
                    }
                }
            }
            a: {
                h = _$d ? ue(_$d) : window;
                k = h.nodeName && h.nodeName.toLowerCase();
                if ("select" === k || "input" === k && "file" === h.type) var J = ve;
                else if (me(h)) {
                    if (we) J = Fe;
                    else {
                        J = De;
                        var K = Ce;
                    }
                } else (k = h.nodeName) && "input" === k.toLowerCase() && ("checkbox" === h.type || "radio" === h.type) && (J = Ee);
                if (J && (J = J(a82, _$d))) {
                    ne(g, J, c, _$e);
                    break a;
                }
                K && K(a82, h, _$d);
                "focusout" === a82 && (K = h._wrapperState) && K.controlled && "number" === h.type && bb(h, "number", h.value);
            }
            K = _$d ? ue(_$d) : window;
            switch(a82){
                case "focusin":
                    if (me(K) || "true" === K.contentEditable) Qe = K, Re = _$d, Se = null;
                    break;
                case "focusout":
                    Se = Re = Qe = null;
                    break;
                case "mousedown":
                    Te = !0;
                    break;
                case "contextmenu":
                case "mouseup":
                case "dragend":
                    Te = !1;
                    Ue(g, c, _$e);
                    break;
                case "selectionchange":
                    if (Pe) break;
                case "keydown":
                case "keyup":
                    Ue(g, c, _$e);
            }
            var Q;
            if (ae) b: {
                switch(a82){
                    case "compositionstart":
                        var L = "onCompositionStart";
                        break b;
                    case "compositionend":
                        L = "onCompositionEnd";
                        break b;
                    case "compositionupdate":
                        L = "onCompositionUpdate";
                        break b;
                }
                L = void 0;
            }
            else ie ? ge(a82, c) && (L = "onCompositionEnd") : "keydown" === a82 && 229 === c.keyCode && (L = "onCompositionStart");
            L && (de && "ko" !== c.locale && (ie || "onCompositionStart" !== L ? "onCompositionEnd" === L && ie && (Q = nd()) : (kd = _$e, ld = "value" in kd ? kd.value : kd.textContent, ie = !0)), K = oe(_$d, L), 0 < K.length && (L = new Ld(L, a82, null, c, _$e), g.push({
                event: L,
                listeners: K
            }), Q ? L.data = Q : (Q = he(c), null !== Q && (L.data = Q))));
            if (Q = ce ? je(a82, c) : ke(a82, c)) _$d = oe(_$d, "onBeforeInput"), 0 < _$d.length && (_$e = new Ld("onBeforeInput", "beforeinput", null, c, _$e), g.push({
                event: _$e,
                listeners: _$d
            }), _$e.data = Q);
        }
        se(g, b);
    });
}
function ef(a83, b, c) {
    return {
        instance: a83,
        listener: b,
        currentTarget: c
    };
}
function oe(a84, b) {
    for(var c = b + "Capture", d = []; null !== a84;){
        var e = a84, f = e.stateNode;
        5 === e.tag && null !== f && (e = f, f = Ob(a84, c), null != f && d.unshift(ef(a84, f, e)), f = Ob(a84, b), null != f && d.push(ef(a84, f, e)));
        a84 = a84.return;
    }
    return d;
}
function gf(a85) {
    if (null === a85) return null;
    do a85 = a85.return;
    while (a85 && 5 !== a85.tag)
    return a85 ? a85 : null;
}
function hf(a86, b, c, d, e) {
    for(var f = b._reactName, g = []; null !== c && c !== d;){
        var h = c, k = h.alternate, l = h.stateNode;
        if (null !== k && k === d) break;
        5 === h.tag && null !== l && (h = l, e ? (k = Ob(c, f), null != k && g.unshift(ef(c, k, h))) : e || (k = Ob(c, f), null != k && g.push(ef(c, k, h))));
        c = c.return;
    }
    0 !== g.length && a86.push({
        event: b,
        listeners: g
    });
}
function jf() {}
var kf = null, lf = null;
function mf(a87, b) {
    switch(a87){
        case "button":
        case "input":
        case "select":
        case "textarea":
            return !!b.autoFocus;
    }
    return !1;
}
function nf(a88, b) {
    return "textarea" === a88 || "option" === a88 || "noscript" === a88 || "string" === typeof b.children || "number" === typeof b.children || "object" === typeof b.dangerouslySetInnerHTML && null !== b.dangerouslySetInnerHTML && null != b.dangerouslySetInnerHTML.__html;
}
var of = "function" === typeof setTimeout ? setTimeout : void 0, pf = "function" === typeof clearTimeout ? clearTimeout : void 0;
function qf(a89) {
    1 === a89.nodeType ? a89.textContent = "" : 9 === a89.nodeType && (a89 = a89.body, null != a89 && (a89.textContent = ""));
}
function rf(a90) {
    for(; null != a90; a90 = a90.nextSibling){
        var b = a90.nodeType;
        if (1 === b || 3 === b) break;
    }
    return a90;
}
function sf(a91) {
    a91 = a91.previousSibling;
    for(var b = 0; a91;){
        if (8 === a91.nodeType) {
            var c = a91.data;
            if ("$" === c || "$!" === c || "$?" === c) {
                if (0 === b) return a91;
                b--;
            } else "/$" === c && b++;
        }
        a91 = a91.previousSibling;
    }
    return null;
}
var tf = 0;
function uf(a92) {
    return {
        $$typeof: Ga,
        toString: a92,
        valueOf: a92
    };
}
var vf = Math.random().toString(36).slice(2), wf = "__reactFiber$" + vf, xf = "__reactProps$" + vf, ff = "__reactContainer$" + vf, yf = "__reactEvents$" + vf;
function wc(a93) {
    var b = a93[wf];
    if (b) return b;
    for(var c = a93.parentNode; c;){
        if (b = c[ff] || c[wf]) {
            c = b.alternate;
            if (null !== b.child || null !== c && null !== c.child) for(a93 = sf(a93); null !== a93;){
                if (c = a93[wf]) return c;
                a93 = sf(a93);
            }
            return b;
        }
        a93 = c;
        c = a93.parentNode;
    }
    return null;
}
function Cb(a94) {
    a94 = a94[wf] || a94[ff];
    return !a94 || 5 !== a94.tag && 6 !== a94.tag && 13 !== a94.tag && 3 !== a94.tag ? null : a94;
}
function ue(a95) {
    if (5 === a95.tag || 6 === a95.tag) return a95.stateNode;
    throw Error(y(33));
}
function Db(a96) {
    return a96[xf] || null;
}
function $e(a97) {
    var b = a97[yf];
    void 0 === b && (b = a97[yf] = new Set);
    return b;
}
var zf = [], Af = -1;
function Bf(a98) {
    return {
        current: a98
    };
}
function H(a99) {
    0 > Af || (a99.current = zf[Af], zf[Af] = null, Af--);
}
function I(a100, b) {
    Af++;
    zf[Af] = a100.current;
    a100.current = b;
}
var Cf = {}, M = Bf(Cf), N = Bf(!1), Df = Cf;
function Ef(a101, b) {
    var c = a101.type.contextTypes;
    if (!c) return Cf;
    var d = a101.stateNode;
    if (d && d.__reactInternalMemoizedUnmaskedChildContext === b) return d.__reactInternalMemoizedMaskedChildContext;
    var e = {}, f;
    for(f in c)e[f] = b[f];
    d && (a101 = a101.stateNode, a101.__reactInternalMemoizedUnmaskedChildContext = b, a101.__reactInternalMemoizedMaskedChildContext = e);
    return e;
}
function Ff(a102) {
    a102 = a102.childContextTypes;
    return null !== a102 && void 0 !== a102;
}
function Gf() {
    H(N);
    H(M);
}
function Hf(a, b, c) {
    if (M.current !== Cf) throw Error(y(168));
    I(M, b);
    I(N, c);
}
function If(a103, b, c) {
    var d = a103.stateNode;
    a103 = b.childContextTypes;
    if ("function" !== typeof d.getChildContext) return c;
    d = d.getChildContext();
    for(var e in d)if (!(e in a103)) throw Error(y(108, Ra(b) || "Unknown", e));
    return m({}, c, d);
}
function Jf(a104) {
    a104 = (a104 = a104.stateNode) && a104.__reactInternalMemoizedMergedChildContext || Cf;
    Df = M.current;
    I(M, a104);
    I(N, N.current);
    return !0;
}
function Kf(a105, b, c) {
    var d = a105.stateNode;
    if (!d) throw Error(y(169));
    c ? (a105 = If(a105, b, Df), d.__reactInternalMemoizedMergedChildContext = a105, H(N), H(M), I(M, a105)) : H(N);
    I(N, c);
}
var Lf = null, Mf = null, Nf = r.unstable_runWithPriority, Of = r.unstable_scheduleCallback, Pf = r.unstable_cancelCallback, Qf = r.unstable_shouldYield, Rf = r.unstable_requestPaint, Sf = r.unstable_now, Tf = r.unstable_getCurrentPriorityLevel, Uf = r.unstable_ImmediatePriority, Vf = r.unstable_UserBlockingPriority, Wf = r.unstable_NormalPriority, Xf = r.unstable_LowPriority, Yf = r.unstable_IdlePriority, Zf = {}, $f = void 0 !== Rf ? Rf : function $f() {}, ag = null, bg = null, cg = !1, dg = Sf(), O = 1E4 > dg ? Sf : function O() {
    return Sf() - dg;
};
function eg() {
    switch(Tf()){
        case Uf:
            return 99;
        case Vf:
            return 98;
        case Wf:
            return 97;
        case Xf:
            return 96;
        case Yf:
            return 95;
        default:
            throw Error(y(332));
    }
}
function fg(a106) {
    switch(a106){
        case 99:
            return Uf;
        case 98:
            return Vf;
        case 97:
            return Wf;
        case 96:
            return Xf;
        case 95:
            return Yf;
        default:
            throw Error(y(332));
    }
}
function gg(a107, b) {
    a107 = fg(a107);
    return Nf(a107, b);
}
function hg(a108, b, c) {
    a108 = fg(a108);
    return Of(a108, b, c);
}
function ig() {
    if (null !== bg) {
        var a109 = bg;
        bg = null;
        Pf(a109);
    }
    jg();
}
function jg() {
    if (!cg && null !== ag) {
        cg = !0;
        var a110 = 0;
        try {
            var b = ag;
            gg(99, function() {
                for(; a110 < b.length; a110++){
                    var _$c = b[a110];
                    do _$c = _$c(!0);
                    while (null !== _$c)
                }
            });
            ag = null;
        } catch (c) {
            throw null !== ag && (ag = ag.slice(a110 + 1)), Of(Uf, ig), c;
        } finally{
            cg = !1;
        }
    }
}
var kg = ra.ReactCurrentBatchConfig;
function lg(a111, b) {
    if (a111 && a111.defaultProps) {
        b = m({}, b);
        a111 = a111.defaultProps;
        for(var c in a111)void 0 === b[c] && (b[c] = a111[c]);
        return b;
    }
    return b;
}
var mg = Bf(null), ng = null, og = null, pg = null;
function qg() {
    pg = og = ng = null;
}
function rg(a112) {
    var b = mg.current;
    H(mg);
    a112.type._context._currentValue = b;
}
function sg(a113, b) {
    for(; null !== a113;){
        var c = a113.alternate;
        if ((a113.childLanes & b) === b) {
            if (null === c || (c.childLanes & b) === b) break;
            else c.childLanes |= b;
        } else a113.childLanes |= b, null !== c && (c.childLanes |= b);
        a113 = a113.return;
    }
}
function tg(a114, b) {
    ng = a114;
    pg = og = null;
    a114 = a114.dependencies;
    null !== a114 && null !== a114.firstContext && (0 !== (a114.lanes & b) && (ug = !0), a114.firstContext = null);
}
function vg(a115, b) {
    if (pg !== a115 && !1 !== b && 0 !== b) {
        if ("number" !== typeof b || 1073741823 === b) pg = a115, b = 1073741823;
        b = {
            context: a115,
            observedBits: b,
            next: null
        };
        if (null === og) {
            if (null === ng) throw Error(y(308));
            og = b;
            ng.dependencies = {
                lanes: 0,
                firstContext: b,
                responders: null
            };
        } else og = og.next = b;
    }
    return a115._currentValue;
}
var wg = !1;
function xg(a116) {
    a116.updateQueue = {
        baseState: a116.memoizedState,
        firstBaseUpdate: null,
        lastBaseUpdate: null,
        shared: {
            pending: null
        },
        effects: null
    };
}
function yg(a117, b) {
    a117 = a117.updateQueue;
    b.updateQueue === a117 && (b.updateQueue = {
        baseState: a117.baseState,
        firstBaseUpdate: a117.firstBaseUpdate,
        lastBaseUpdate: a117.lastBaseUpdate,
        shared: a117.shared,
        effects: a117.effects
    });
}
function zg(a118, b) {
    return {
        eventTime: a118,
        lane: b,
        tag: 0,
        payload: null,
        callback: null,
        next: null
    };
}
function Ag(a119, b) {
    a119 = a119.updateQueue;
    if (null !== a119) {
        a119 = a119.shared;
        var c = a119.pending;
        null === c ? b.next = b : (b.next = c.next, c.next = b);
        a119.pending = b;
    }
}
function Bg(a120, b) {
    var c = a120.updateQueue, d = a120.alternate;
    if (null !== d && (d = d.updateQueue, c === d)) {
        var e = null, f = null;
        c = c.firstBaseUpdate;
        if (null !== c) {
            do {
                var g = {
                    eventTime: c.eventTime,
                    lane: c.lane,
                    tag: c.tag,
                    payload: c.payload,
                    callback: c.callback,
                    next: null
                };
                null === f ? e = f = g : f = f.next = g;
                c = c.next;
            }while (null !== c)
            null === f ? e = f = b : f = f.next = b;
        } else e = f = b;
        c = {
            baseState: d.baseState,
            firstBaseUpdate: e,
            lastBaseUpdate: f,
            shared: d.shared,
            effects: d.effects
        };
        a120.updateQueue = c;
        return;
    }
    a120 = c.lastBaseUpdate;
    null === a120 ? c.firstBaseUpdate = b : a120.next = b;
    c.lastBaseUpdate = b;
}
function Cg(a121, b, c, d) {
    var e = a121.updateQueue;
    wg = !1;
    var f = e.firstBaseUpdate, g = e.lastBaseUpdate, h = e.shared.pending;
    if (null !== h) {
        e.shared.pending = null;
        var k = h, l = k.next;
        k.next = null;
        null === g ? f = l : g.next = l;
        g = k;
        var n = a121.alternate;
        if (null !== n) {
            n = n.updateQueue;
            var A = n.lastBaseUpdate;
            A !== g && (null === A ? n.firstBaseUpdate = l : A.next = l, n.lastBaseUpdate = k);
        }
    }
    if (null !== f) {
        A = e.baseState;
        g = 0;
        n = l = k = null;
        do {
            h = f.lane;
            var p = f.eventTime;
            if ((d & h) === h) {
                null !== n && (n = n.next = {
                    eventTime: p,
                    lane: 0,
                    tag: f.tag,
                    payload: f.payload,
                    callback: f.callback,
                    next: null
                });
                a: {
                    var C = a121, x = f;
                    h = b;
                    p = c;
                    switch(x.tag){
                        case 1:
                            C = x.payload;
                            if ("function" === typeof C) {
                                A = C.call(p, A, h);
                                break a;
                            }
                            A = C;
                            break a;
                        case 3:
                            C.flags = C.flags & -4097 | 64;
                        case 0:
                            C = x.payload;
                            h = "function" === typeof C ? C.call(p, A, h) : C;
                            if (null === h || void 0 === h) break a;
                            A = m({}, A, h);
                            break a;
                        case 2:
                            wg = !0;
                    }
                }
                null !== f.callback && (a121.flags |= 32, h = e.effects, null === h ? e.effects = [
                    f
                ] : h.push(f));
            } else p = {
                eventTime: p,
                lane: h,
                tag: f.tag,
                payload: f.payload,
                callback: f.callback,
                next: null
            }, null === n ? (l = n = p, k = A) : n = n.next = p, g |= h;
            f = f.next;
            if (null === f) {
                if (h = e.shared.pending, null === h) break;
                else f = h.next, h.next = null, e.lastBaseUpdate = h, e.shared.pending = null;
            }
        }while (1)
        null === n && (k = A);
        e.baseState = k;
        e.firstBaseUpdate = l;
        e.lastBaseUpdate = n;
        Dg |= g;
        a121.lanes = g;
        a121.memoizedState = A;
    }
}
function Eg(a122, b, c) {
    a122 = b.effects;
    b.effects = null;
    if (null !== a122) for(b = 0; b < a122.length; b++){
        var d = a122[b], e = d.callback;
        if (null !== e) {
            d.callback = null;
            d = c;
            if ("function" !== typeof e) throw Error(y(191, e));
            e.call(d);
        }
    }
}
var Fg = (new aa.Component).refs;
function Gg(a123, b, c, d) {
    b = a123.memoizedState;
    c = c(d, b);
    c = null === c || void 0 === c ? b : m({}, b, c);
    a123.memoizedState = c;
    0 === a123.lanes && (a123.updateQueue.baseState = c);
}
var Kg = {
    isMounted: function isMounted(a124) {
        return (a124 = a124._reactInternals) ? Zb(a124) === a124 : !1;
    },
    enqueueSetState: function enqueueSetState(a125, b, c) {
        a125 = a125._reactInternals;
        var d = Hg(), e = Ig(a125), f = zg(d, e);
        f.payload = b;
        void 0 !== c && null !== c && (f.callback = c);
        Ag(a125, f);
        Jg(a125, e, d);
    },
    enqueueReplaceState: function enqueueReplaceState(a126, b, c) {
        a126 = a126._reactInternals;
        var d = Hg(), e = Ig(a126), f = zg(d, e);
        f.tag = 1;
        f.payload = b;
        void 0 !== c && null !== c && (f.callback = c);
        Ag(a126, f);
        Jg(a126, e, d);
    },
    enqueueForceUpdate: function enqueueForceUpdate(a127, b) {
        a127 = a127._reactInternals;
        var c = Hg(), d = Ig(a127), e = zg(c, d);
        e.tag = 2;
        void 0 !== b && null !== b && (e.callback = b);
        Ag(a127, e);
        Jg(a127, d, c);
    }
};
function Lg(a128, b, c, d, e, f, g) {
    a128 = a128.stateNode;
    return "function" === typeof a128.shouldComponentUpdate ? a128.shouldComponentUpdate(d, f, g) : b.prototype && b.prototype.isPureReactComponent ? !Je(c, d) || !Je(e, f) : !0;
}
function Mg(a129, b, c) {
    var d = !1, e = Cf;
    var f = b.contextType;
    "object" === typeof f && null !== f ? f = vg(f) : (e = Ff(b) ? Df : M.current, d = b.contextTypes, f = (d = null !== d && void 0 !== d) ? Ef(a129, e) : Cf);
    b = new b(c, f);
    a129.memoizedState = null !== b.state && void 0 !== b.state ? b.state : null;
    b.updater = Kg;
    a129.stateNode = b;
    b._reactInternals = a129;
    d && (a129 = a129.stateNode, a129.__reactInternalMemoizedUnmaskedChildContext = e, a129.__reactInternalMemoizedMaskedChildContext = f);
    return b;
}
function Ng(a130, b, c, d) {
    a130 = b.state;
    "function" === typeof b.componentWillReceiveProps && b.componentWillReceiveProps(c, d);
    "function" === typeof b.UNSAFE_componentWillReceiveProps && b.UNSAFE_componentWillReceiveProps(c, d);
    b.state !== a130 && Kg.enqueueReplaceState(b, b.state, null);
}
function Og(a131, b, c, d) {
    var e = a131.stateNode;
    e.props = c;
    e.state = a131.memoizedState;
    e.refs = Fg;
    xg(a131);
    var f = b.contextType;
    "object" === typeof f && null !== f ? e.context = vg(f) : (f = Ff(b) ? Df : M.current, e.context = Ef(a131, f));
    Cg(a131, c, e, d);
    e.state = a131.memoizedState;
    f = b.getDerivedStateFromProps;
    "function" === typeof f && (Gg(a131, b, f, c), e.state = a131.memoizedState);
    "function" === typeof b.getDerivedStateFromProps || "function" === typeof e.getSnapshotBeforeUpdate || "function" !== typeof e.UNSAFE_componentWillMount && "function" !== typeof e.componentWillMount || (b = e.state, "function" === typeof e.componentWillMount && e.componentWillMount(), "function" === typeof e.UNSAFE_componentWillMount && e.UNSAFE_componentWillMount(), b !== e.state && Kg.enqueueReplaceState(e, e.state, null), Cg(a131, c, e, d), e.state = a131.memoizedState);
    "function" === typeof e.componentDidMount && (a131.flags |= 4);
}
var Pg = Array.isArray;
function Qg(a132, b, c) {
    a132 = c.ref;
    if (null !== a132 && "function" !== typeof a132 && "object" !== typeof a132) {
        if (c._owner) {
            c = c._owner;
            if (c) {
                if (1 !== c.tag) throw Error(y(309));
                var d = c.stateNode;
            }
            if (!d) throw Error(y(147, a132));
            var e = "" + a132;
            if (null !== b && null !== b.ref && "function" === typeof b.ref && b.ref._stringRef === e) return b.ref;
            b = function b(a133) {
                var _$b = d.refs;
                _$b === Fg && (_$b = d.refs = {});
                null === a133 ? delete _$b[e] : _$b[e] = a133;
            };
            b._stringRef = e;
            return b;
        }
        if ("string" !== typeof a132) throw Error(y(284));
        if (!c._owner) throw Error(y(290, a132));
    }
    return a132;
}
function Rg(a134, b) {
    if ("textarea" !== a134.type) throw Error(y(31, "[object Object]" === Object.prototype.toString.call(b) ? "object with keys {" + Object.keys(b).join(", ") + "}" : b));
}
function Sg(a135) {
    function b3(b, c) {
        if (a135) {
            var d = b.lastEffect;
            null !== d ? (d.nextEffect = c, b.lastEffect = c) : b.firstEffect = b.lastEffect = c;
            c.nextEffect = null;
            c.flags = 8;
        }
    }
    function c1(c, d) {
        if (!a135) return null;
        for(; null !== d;)b3(c, d), d = d.sibling;
        return null;
    }
    function d1(a136, b) {
        for(a136 = new Map; null !== b;)null !== b.key ? a136.set(b.key, b) : a136.set(b.index, b), b = b.sibling;
        return a136;
    }
    function e1(a137, b) {
        a137 = Tg(a137, b);
        a137.index = 0;
        a137.sibling = null;
        return a137;
    }
    function f1(b, c, d) {
        b.index = d;
        if (!a135) return c;
        d = b.alternate;
        if (null !== d) return d = d.index, d < c ? (b.flags = 2, c) : d;
        b.flags = 2;
        return c;
    }
    function g1(b) {
        a135 && null === b.alternate && (b.flags = 2);
        return b;
    }
    function h1(a138, b, c, d) {
        if (null === b || 6 !== b.tag) return b = Ug(c, a138.mode, d), b.return = a138, b;
        b = e1(b, c);
        b.return = a138;
        return b;
    }
    function k1(a139, b, c, d) {
        if (null !== b && b.elementType === c.type) return d = e1(b, c.props), d.ref = Qg(a139, b, c), d.return = a139, d;
        d = Vg(c.type, c.key, c.props, null, a139.mode, d);
        d.ref = Qg(a139, b, c);
        d.return = a139;
        return d;
    }
    function l1(a140, b, c, d) {
        if (null === b || 4 !== b.tag || b.stateNode.containerInfo !== c.containerInfo || b.stateNode.implementation !== c.implementation) return b = Wg(c, a140.mode, d), b.return = a140, b;
        b = e1(b, c.children || []);
        b.return = a140;
        return b;
    }
    function n1(a141, b, c, d, f) {
        if (null === b || 7 !== b.tag) return b = Xg(c, a141.mode, d, f), b.return = a141, b;
        b = e1(b, c);
        b.return = a141;
        return b;
    }
    function A(a142, b, c) {
        if ("string" === typeof b || "number" === typeof b) return b = Ug("" + b, a142.mode, c), b.return = a142, b;
        if ("object" === typeof b && null !== b) {
            switch(b.$$typeof){
                case sa:
                    return c = Vg(b.type, b.key, b.props, null, a142.mode, c), c.ref = Qg(a142, null, b), c.return = a142, c;
                case ta:
                    return b = Wg(b, a142.mode, c), b.return = a142, b;
            }
            if (Pg(b) || La(b)) return b = Xg(b, a142.mode, c, null), b.return = a142, b;
            Rg(a142, b);
        }
        return null;
    }
    function p(a143, b, c, d) {
        var e = null !== b ? b.key : null;
        if ("string" === typeof c || "number" === typeof c) return null !== e ? null : h1(a143, b, "" + c, d);
        if ("object" === typeof c && null !== c) {
            switch(c.$$typeof){
                case sa:
                    return c.key === e ? c.type === ua ? n1(a143, b, c.props.children, d, e) : k1(a143, b, c, d) : null;
                case ta:
                    return c.key === e ? l1(a143, b, c, d) : null;
            }
            if (Pg(c) || La(c)) return null !== e ? null : n1(a143, b, c, d, null);
            Rg(a143, c);
        }
        return null;
    }
    function C(a144, b, c, d, e) {
        if ("string" === typeof d || "number" === typeof d) return a144 = a144.get(c) || null, h1(b, a144, "" + d, e);
        if ("object" === typeof d && null !== d) {
            switch(d.$$typeof){
                case sa:
                    return a144 = a144.get(null === d.key ? c : d.key) || null, d.type === ua ? n1(b, a144, d.props.children, e, d.key) : k1(b, a144, d, e);
                case ta:
                    return a144 = a144.get(null === d.key ? c : d.key) || null, l1(b, a144, d, e);
            }
            if (Pg(d) || La(d)) return a144 = a144.get(c) || null, n1(b, a144, d, e, null);
            Rg(b, d);
        }
        return null;
    }
    function x(e, g, h, k) {
        for(var l = null, t = null, u = g, z = g = 0, q = null; null !== u && z < h.length; z++){
            u.index > z ? (q = u, u = null) : q = u.sibling;
            var n = p(e, u, h[z], k);
            if (null === n) {
                null === u && (u = q);
                break;
            }
            a135 && u && null === n.alternate && b3(e, u);
            g = f1(n, g, z);
            null === t ? l = n : t.sibling = n;
            t = n;
            u = q;
        }
        if (z === h.length) return c1(e, u), l;
        if (null === u) {
            for(; z < h.length; z++)u = A(e, h[z], k), null !== u && (g = f1(u, g, z), null === t ? l = u : t.sibling = u, t = u);
            return l;
        }
        for(u = d1(e, u); z < h.length; z++)q = C(u, e, z, h[z], k), null !== q && (a135 && null !== q.alternate && u.delete(null === q.key ? z : q.key), g = f1(q, g, z), null === t ? l = q : t.sibling = q, t = q);
        a135 && u.forEach(function(a145) {
            return b3(e, a145);
        });
        return l;
    }
    function w1(e, g, h, k) {
        var l = La(h);
        if ("function" !== typeof l) throw Error(y(150));
        h = l.call(h);
        if (null == h) throw Error(y(151));
        for(var t = l = null, u = g, z = g = 0, q = null, n = h.next(); null !== u && !n.done; z++, n = h.next()){
            u.index > z ? (q = u, u = null) : q = u.sibling;
            var w = p(e, u, n.value, k);
            if (null === w) {
                null === u && (u = q);
                break;
            }
            a135 && u && null === w.alternate && b3(e, u);
            g = f1(w, g, z);
            null === t ? l = w : t.sibling = w;
            t = w;
            u = q;
        }
        if (n.done) return c1(e, u), l;
        if (null === u) {
            for(; !n.done; z++, n = h.next())n = A(e, n.value, k), null !== n && (g = f1(n, g, z), null === t ? l = n : t.sibling = n, t = n);
            return l;
        }
        for(u = d1(e, u); !n.done; z++, n = h.next())n = C(u, e, z, n.value, k), null !== n && (a135 && null !== n.alternate && u.delete(null === n.key ? z : n.key), g = f1(n, g, z), null === t ? l = n : t.sibling = n, t = n);
        a135 && u.forEach(function(a146) {
            return b3(e, a146);
        });
        return l;
    }
    return function(a147, d, f, h) {
        var k = "object" === typeof f && null !== f && f.type === ua && null === f.key;
        k && (f = f.props.children);
        var l = "object" === typeof f && null !== f;
        if (l) switch(f.$$typeof){
            case sa:
                a: {
                    l = f.key;
                    for(k = d; null !== k;){
                        if (k.key === l) {
                            switch(k.tag){
                                case 7:
                                    if (f.type === ua) {
                                        c1(a147, k.sibling);
                                        d = e1(k, f.props.children);
                                        d.return = a147;
                                        a147 = d;
                                        break a;
                                    }
                                    break;
                                default:
                                    if (k.elementType === f.type) {
                                        c1(a147, k.sibling);
                                        d = e1(k, f.props);
                                        d.ref = Qg(a147, k, f);
                                        d.return = a147;
                                        a147 = d;
                                        break a;
                                    }
                            }
                            c1(a147, k);
                            break;
                        } else b3(a147, k);
                        k = k.sibling;
                    }
                    f.type === ua ? (d = Xg(f.props.children, a147.mode, h, f.key), d.return = a147, a147 = d) : (h = Vg(f.type, f.key, f.props, null, a147.mode, h), h.ref = Qg(a147, d, f), h.return = a147, a147 = h);
                }
                return g1(a147);
            case ta:
                a: {
                    for(k = f.key; null !== d;){
                        if (d.key === k) {
                            if (4 === d.tag && d.stateNode.containerInfo === f.containerInfo && d.stateNode.implementation === f.implementation) {
                                c1(a147, d.sibling);
                                d = e1(d, f.children || []);
                                d.return = a147;
                                a147 = d;
                                break a;
                            } else {
                                c1(a147, d);
                                break;
                            }
                        } else b3(a147, d);
                        d = d.sibling;
                    }
                    d = Wg(f, a147.mode, h);
                    d.return = a147;
                    a147 = d;
                }
                return g1(a147);
        }
        if ("string" === typeof f || "number" === typeof f) return f = "" + f, null !== d && 6 === d.tag ? (c1(a147, d.sibling), d = e1(d, f), d.return = a147, a147 = d) : (c1(a147, d), d = Ug(f, a147.mode, h), d.return = a147, a147 = d), g1(a147);
        if (Pg(f)) return x(a147, d, f, h);
        if (La(f)) return w1(a147, d, f, h);
        l && Rg(a147, f);
        if ("undefined" === typeof f && !k) switch(a147.tag){
            case 1:
            case 22:
            case 0:
            case 11:
            case 15:
                throw Error(y(152, Ra(a147.type) || "Component"));
        }
        return c1(a147, d);
    };
}
var Yg = Sg(!0), Zg = Sg(!1), $g = {}, ah = Bf($g), bh = Bf($g), ch = Bf($g);
function dh(a148) {
    if (a148 === $g) throw Error(y(174));
    return a148;
}
function eh(a149, b) {
    I(ch, b);
    I(bh, a149);
    I(ah, $g);
    a149 = b.nodeType;
    switch(a149){
        case 9:
        case 11:
            b = (b = b.documentElement) ? b.namespaceURI : mb(null, "");
            break;
        default:
            a149 = 8 === a149 ? b.parentNode : b, b = a149.namespaceURI || null, a149 = a149.tagName, b = mb(b, a149);
    }
    H(ah);
    I(ah, b);
}
function fh() {
    H(ah);
    H(bh);
    H(ch);
}
function gh(a150) {
    dh(ch.current);
    var b = dh(ah.current);
    var c = mb(b, a150.type);
    b !== c && (I(bh, a150), I(ah, c));
}
function hh(a151) {
    bh.current === a151 && (H(ah), H(bh));
}
var P = Bf(0);
function ih(a152) {
    for(var b = a152; null !== b;){
        if (13 === b.tag) {
            var c = b.memoizedState;
            if (null !== c && (c = c.dehydrated, null === c || "$?" === c.data || "$!" === c.data)) return b;
        } else if (19 === b.tag && void 0 !== b.memoizedProps.revealOrder) {
            if (0 !== (b.flags & 64)) return b;
        } else if (null !== b.child) {
            b.child.return = b;
            b = b.child;
            continue;
        }
        if (b === a152) break;
        for(; null === b.sibling;){
            if (null === b.return || b.return === a152) return null;
            b = b.return;
        }
        b.sibling.return = b.return;
        b = b.sibling;
    }
    return null;
}
var jh = null, kh = null, lh = !1;
function mh(a153, b) {
    var c = nh(5, null, null, 0);
    c.elementType = "DELETED";
    c.type = "DELETED";
    c.stateNode = b;
    c.return = a153;
    c.flags = 8;
    null !== a153.lastEffect ? (a153.lastEffect.nextEffect = c, a153.lastEffect = c) : a153.firstEffect = a153.lastEffect = c;
}
function oh(a154, b) {
    switch(a154.tag){
        case 5:
            var c = a154.type;
            b = 1 !== b.nodeType || c.toLowerCase() !== b.nodeName.toLowerCase() ? null : b;
            return null !== b ? (a154.stateNode = b, !0) : !1;
        case 6:
            return b = "" === a154.pendingProps || 3 !== b.nodeType ? null : b, null !== b ? (a154.stateNode = b, !0) : !1;
        case 13:
            return !1;
        default:
            return !1;
    }
}
function ph(a155) {
    if (lh) {
        var b = kh;
        if (b) {
            var c = b;
            if (!oh(a155, b)) {
                b = rf(c.nextSibling);
                if (!b || !oh(a155, b)) {
                    a155.flags = a155.flags & -1025 | 2;
                    lh = !1;
                    jh = a155;
                    return;
                }
                mh(jh, c);
            }
            jh = a155;
            kh = rf(b.firstChild);
        } else a155.flags = a155.flags & -1025 | 2, lh = !1, jh = a155;
    }
}
function qh(a156) {
    for(a156 = a156.return; null !== a156 && 5 !== a156.tag && 3 !== a156.tag && 13 !== a156.tag;)a156 = a156.return;
    jh = a156;
}
function rh(a157) {
    if (a157 !== jh) return !1;
    if (!lh) return qh(a157), lh = !0, !1;
    var b = a157.type;
    if (5 !== a157.tag || "head" !== b && "body" !== b && !nf(b, a157.memoizedProps)) for(b = kh; b;)mh(a157, b), b = rf(b.nextSibling);
    qh(a157);
    if (13 === a157.tag) {
        a157 = a157.memoizedState;
        a157 = null !== a157 ? a157.dehydrated : null;
        if (!a157) throw Error(y(317));
        a: {
            a157 = a157.nextSibling;
            for(b = 0; a157;){
                if (8 === a157.nodeType) {
                    var c = a157.data;
                    if ("/$" === c) {
                        if (0 === b) {
                            kh = rf(a157.nextSibling);
                            break a;
                        }
                        b--;
                    } else "$" !== c && "$!" !== c && "$?" !== c || b++;
                }
                a157 = a157.nextSibling;
            }
            kh = null;
        }
    } else kh = jh ? rf(a157.stateNode.nextSibling) : null;
    return !0;
}
function sh() {
    kh = jh = null;
    lh = !1;
}
var th = [];
function uh() {
    for(var a158 = 0; a158 < th.length; a158++)th[a158]._workInProgressVersionPrimary = null;
    th.length = 0;
}
var vh = ra.ReactCurrentDispatcher, wh = ra.ReactCurrentBatchConfig, xh = 0, R = null, S = null, T = null, yh = !1, zh = !1;
function Ah() {
    throw Error(y(321));
}
function Bh(a159, b) {
    if (null === b) return !1;
    for(var c = 0; c < b.length && c < a159.length; c++)if (!He(a159[c], b[c])) return !1;
    return !0;
}
function Ch(a160, b, c, d, e, f) {
    xh = f;
    R = b;
    b.memoizedState = null;
    b.updateQueue = null;
    b.lanes = 0;
    vh.current = null === a160 || null === a160.memoizedState ? Dh : Eh;
    a160 = c(d, e);
    if (zh) {
        f = 0;
        do {
            zh = !1;
            if (!(25 > f)) throw Error(y(301));
            f += 1;
            T = S = null;
            b.updateQueue = null;
            vh.current = Fh;
            a160 = c(d, e);
        }while (zh)
    }
    vh.current = Gh;
    b = null !== S && null !== S.next;
    xh = 0;
    T = S = R = null;
    yh = !1;
    if (b) throw Error(y(300));
    return a160;
}
function Hh() {
    var a161 = {
        memoizedState: null,
        baseState: null,
        baseQueue: null,
        queue: null,
        next: null
    };
    null === T ? R.memoizedState = T = a161 : T = T.next = a161;
    return T;
}
function Ih() {
    if (null === S) {
        var a162 = R.alternate;
        a162 = null !== a162 ? a162.memoizedState : null;
    } else a162 = S.next;
    var b = null === T ? R.memoizedState : T.next;
    if (null !== b) T = b, S = a162;
    else {
        if (null === a162) throw Error(y(310));
        S = a162;
        a162 = {
            memoizedState: S.memoizedState,
            baseState: S.baseState,
            baseQueue: S.baseQueue,
            queue: S.queue,
            next: null
        };
        null === T ? R.memoizedState = T = a162 : T = T.next = a162;
    }
    return T;
}
function Jh(a163, b) {
    return "function" === typeof b ? b(a163) : b;
}
function Kh(a164) {
    var b = Ih(), c = b.queue;
    if (null === c) throw Error(y(311));
    c.lastRenderedReducer = a164;
    var d = S, e = d.baseQueue, f = c.pending;
    if (null !== f) {
        if (null !== e) {
            var g = e.next;
            e.next = f.next;
            f.next = g;
        }
        d.baseQueue = e = f;
        c.pending = null;
    }
    if (null !== e) {
        e = e.next;
        d = d.baseState;
        var h = g = f = null, k = e;
        do {
            var l = k.lane;
            if ((xh & l) === l) null !== h && (h = h.next = {
                lane: 0,
                action: k.action,
                eagerReducer: k.eagerReducer,
                eagerState: k.eagerState,
                next: null
            }), d = k.eagerReducer === a164 ? k.eagerState : a164(d, k.action);
            else {
                var n = {
                    lane: l,
                    action: k.action,
                    eagerReducer: k.eagerReducer,
                    eagerState: k.eagerState,
                    next: null
                };
                null === h ? (g = h = n, f = d) : h = h.next = n;
                R.lanes |= l;
                Dg |= l;
            }
            k = k.next;
        }while (null !== k && k !== e)
        null === h ? f = d : h.next = g;
        He(d, b.memoizedState) || (ug = !0);
        b.memoizedState = d;
        b.baseState = f;
        b.baseQueue = h;
        c.lastRenderedState = d;
    }
    return [
        b.memoizedState,
        c.dispatch
    ];
}
function Lh(a165) {
    var b = Ih(), c = b.queue;
    if (null === c) throw Error(y(311));
    c.lastRenderedReducer = a165;
    var d = c.dispatch, e = c.pending, f = b.memoizedState;
    if (null !== e) {
        c.pending = null;
        var g = e = e.next;
        do f = a165(f, g.action), g = g.next;
        while (g !== e)
        He(f, b.memoizedState) || (ug = !0);
        b.memoizedState = f;
        null === b.baseQueue && (b.baseState = f);
        c.lastRenderedState = f;
    }
    return [
        f,
        d
    ];
}
function Mh(a166, b, c) {
    var d = b._getVersion;
    d = d(b._source);
    var e = b._workInProgressVersionPrimary;
    if (null !== e) a166 = e === d;
    else if (a166 = a166.mutableReadLanes, a166 = (xh & a166) === a166) b._workInProgressVersionPrimary = d, th.push(b);
    if (a166) return c(b._source);
    th.push(b);
    throw Error(y(350));
}
function Nh(a167, b, c, d) {
    var e = U;
    if (null === e) throw Error(y(349));
    var f = b._getVersion, g = f(b._source), h2 = vh.current, k2 = h2.useState(function() {
        return Mh(e, b, c);
    }), l = k2[1], n = k2[0];
    k2 = T;
    var A = a167.memoizedState, p = A.refs, C = p.getSnapshot, x = A.source;
    A = A.subscribe;
    var w = R;
    a167.memoizedState = {
        refs: p,
        source: b,
        subscribe: d
    };
    h2.useEffect(function() {
        p.getSnapshot = c;
        p.setSnapshot = l;
        var _$a = f(b._source);
        if (!He(g, _$a)) {
            _$a = c(b._source);
            He(n, _$a) || (l(_$a), _$a = Ig(w), e.mutableReadLanes |= _$a & e.pendingLanes);
            _$a = e.mutableReadLanes;
            e.entangledLanes |= _$a;
            for(var _$d = e.entanglements, h = _$a; 0 < h;){
                var k = 31 - Vc(h), v = 1 << k;
                _$d[k] |= _$a;
                h &= ~v;
            }
        }
    }, [
        c,
        b,
        d
    ]);
    h2.useEffect(function() {
        return d(b._source, function() {
            var _$a = p.getSnapshot, _$c = p.setSnapshot;
            try {
                _$c(_$a(b._source));
                var _$d = Ig(w);
                e.mutableReadLanes |= _$d & e.pendingLanes;
            } catch (q) {
                _$c(function() {
                    throw q;
                });
            }
        });
    }, [
        b,
        d
    ]);
    He(C, c) && He(x, b) && He(A, d) || (a167 = {
        pending: null,
        dispatch: null,
        lastRenderedReducer: Jh,
        lastRenderedState: n
    }, a167.dispatch = l = Oh.bind(null, R, a167), k2.queue = a167, k2.baseQueue = null, n = Mh(e, b, c), k2.memoizedState = k2.baseState = n);
    return n;
}
function Ph(a168, b, c) {
    var d = Ih();
    return Nh(d, a168, b, c);
}
function Qh(a169) {
    var b = Hh();
    "function" === typeof a169 && (a169 = a169());
    b.memoizedState = b.baseState = a169;
    a169 = b.queue = {
        pending: null,
        dispatch: null,
        lastRenderedReducer: Jh,
        lastRenderedState: a169
    };
    a169 = a169.dispatch = Oh.bind(null, R, a169);
    return [
        b.memoizedState,
        a169
    ];
}
function Rh(a170, b, c, d) {
    a170 = {
        tag: a170,
        create: b,
        destroy: c,
        deps: d,
        next: null
    };
    b = R.updateQueue;
    null === b ? (b = {
        lastEffect: null
    }, R.updateQueue = b, b.lastEffect = a170.next = a170) : (c = b.lastEffect, null === c ? b.lastEffect = a170.next = a170 : (d = c.next, c.next = a170, a170.next = d, b.lastEffect = a170));
    return a170;
}
function Sh(a171) {
    var b = Hh();
    a171 = {
        current: a171
    };
    return b.memoizedState = a171;
}
function Th() {
    return Ih().memoizedState;
}
function Uh(a172, b, c, d) {
    var e = Hh();
    R.flags |= a172;
    e.memoizedState = Rh(1 | b, c, void 0, void 0 === d ? null : d);
}
function Vh(a173, b, c, d) {
    var e = Ih();
    d = void 0 === d ? null : d;
    var f = void 0;
    if (null !== S) {
        var g = S.memoizedState;
        f = g.destroy;
        if (null !== d && Bh(d, g.deps)) {
            Rh(b, c, f, d);
            return;
        }
    }
    R.flags |= a173;
    e.memoizedState = Rh(1 | b, c, f, d);
}
function Wh(a174, b) {
    return Uh(516, 4, a174, b);
}
function Xh(a175, b) {
    return Vh(516, 4, a175, b);
}
function Yh(a176, b) {
    return Vh(4, 2, a176, b);
}
function Zh(a177, b) {
    if ("function" === typeof b) return a177 = a177(), b(a177), function() {
        b(null);
    };
    if (null !== b && void 0 !== b) return a177 = a177(), b.current = a177, function() {
        b.current = null;
    };
}
function $h(a178, b, c) {
    c = null !== c && void 0 !== c ? c.concat([
        a178
    ]) : null;
    return Vh(4, 2, Zh.bind(null, b, a178), c);
}
function ai() {}
function bi(a179, b) {
    var c = Ih();
    b = void 0 === b ? null : b;
    var d = c.memoizedState;
    if (null !== d && null !== b && Bh(b, d[1])) return d[0];
    c.memoizedState = [
        a179,
        b
    ];
    return a179;
}
function ci(a180, b) {
    var c = Ih();
    b = void 0 === b ? null : b;
    var d = c.memoizedState;
    if (null !== d && null !== b && Bh(b, d[1])) return d[0];
    a180 = a180();
    c.memoizedState = [
        a180,
        b
    ];
    return a180;
}
function di(a181, b) {
    var c2 = eg();
    gg(98 > c2 ? 98 : c2, function() {
        a181(!0);
    });
    gg(97 < c2 ? 97 : c2, function() {
        var c = wh.transition;
        wh.transition = 1;
        try {
            a181(!1), b();
        } finally{
            wh.transition = c;
        }
    });
}
function Oh(a182, b, c) {
    var d = Hg(), e = Ig(a182), f = {
        lane: e,
        action: c,
        eagerReducer: null,
        eagerState: null,
        next: null
    }, g = b.pending;
    null === g ? f.next = f : (f.next = g.next, g.next = f);
    b.pending = f;
    g = a182.alternate;
    if (a182 === R || null !== g && g === R) zh = yh = !0;
    else {
        if (0 === a182.lanes && (null === g || 0 === g.lanes) && (g = b.lastRenderedReducer, null !== g)) try {
            var h = b.lastRenderedState, k = g(h, c);
            f.eagerReducer = g;
            f.eagerState = k;
            if (He(k, h)) return;
        } catch (l) {} finally{}
        Jg(a182, e, d);
    }
}
var Gh = {
    readContext: vg,
    useCallback: Ah,
    useContext: Ah,
    useEffect: Ah,
    useImperativeHandle: Ah,
    useLayoutEffect: Ah,
    useMemo: Ah,
    useReducer: Ah,
    useRef: Ah,
    useState: Ah,
    useDebugValue: Ah,
    useDeferredValue: Ah,
    useTransition: Ah,
    useMutableSource: Ah,
    useOpaqueIdentifier: Ah,
    unstable_isNewReconciler: !1
}, Dh = {
    readContext: vg,
    useCallback: function useCallback(a183, b) {
        Hh().memoizedState = [
            a183,
            void 0 === b ? null : b
        ];
        return a183;
    },
    useContext: vg,
    useEffect: Wh,
    useImperativeHandle: function useImperativeHandle(a184, b, c) {
        c = null !== c && void 0 !== c ? c.concat([
            a184
        ]) : null;
        return Uh(4, 2, Zh.bind(null, b, a184), c);
    },
    useLayoutEffect: function useLayoutEffect(a185, b) {
        return Uh(4, 2, a185, b);
    },
    useMemo: function useMemo(a186, b) {
        var c = Hh();
        b = void 0 === b ? null : b;
        a186 = a186();
        c.memoizedState = [
            a186,
            b
        ];
        return a186;
    },
    useReducer: function useReducer(a187, b, c) {
        var d = Hh();
        b = void 0 !== c ? c(b) : b;
        d.memoizedState = d.baseState = b;
        a187 = d.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: a187,
            lastRenderedState: b
        };
        a187 = a187.dispatch = Oh.bind(null, R, a187);
        return [
            d.memoizedState,
            a187
        ];
    },
    useRef: Sh,
    useState: Qh,
    useDebugValue: ai,
    useDeferredValue: function useDeferredValue(a188) {
        var b4 = Qh(a188), c = b4[0], d = b4[1];
        Wh(function() {
            var b = wh.transition;
            wh.transition = 1;
            try {
                d(a188);
            } finally{
                wh.transition = b;
            }
        }, [
            a188
        ]);
        return c;
    },
    useTransition: function useTransition() {
        var a189 = Qh(!1), b = a189[0];
        a189 = di.bind(null, a189[1]);
        Sh(a189);
        return [
            a189,
            b
        ];
    },
    useMutableSource: function useMutableSource(a190, b, c) {
        var d = Hh();
        d.memoizedState = {
            refs: {
                getSnapshot: b,
                setSnapshot: null
            },
            source: a190,
            subscribe: c
        };
        return Nh(d, a190, b, c);
    },
    useOpaqueIdentifier: function useOpaqueIdentifier() {
        if (lh) {
            var a191 = !1, b = uf(function() {
                a191 || (a191 = !0, c("r:" + (tf++).toString(36)));
                throw Error(y(355));
            }), c = Qh(b)[1];
            0 === (R.mode & 2) && (R.flags |= 516, Rh(5, function() {
                c("r:" + (tf++).toString(36));
            }, void 0, null));
            return b;
        }
        b = "r:" + (tf++).toString(36);
        Qh(b);
        return b;
    },
    unstable_isNewReconciler: !1
}, Eh = {
    readContext: vg,
    useCallback: bi,
    useContext: vg,
    useEffect: Xh,
    useImperativeHandle: $h,
    useLayoutEffect: Yh,
    useMemo: ci,
    useReducer: Kh,
    useRef: Th,
    useState: function useState() {
        return Kh(Jh);
    },
    useDebugValue: ai,
    useDeferredValue: function useDeferredValue(a192) {
        var b5 = Kh(Jh), c = b5[0], d = b5[1];
        Xh(function() {
            var b = wh.transition;
            wh.transition = 1;
            try {
                d(a192);
            } finally{
                wh.transition = b;
            }
        }, [
            a192
        ]);
        return c;
    },
    useTransition: function useTransition() {
        var a193 = Kh(Jh)[0];
        return [
            Th().current,
            a193
        ];
    },
    useMutableSource: Ph,
    useOpaqueIdentifier: function useOpaqueIdentifier() {
        return Kh(Jh)[0];
    },
    unstable_isNewReconciler: !1
}, Fh = {
    readContext: vg,
    useCallback: bi,
    useContext: vg,
    useEffect: Xh,
    useImperativeHandle: $h,
    useLayoutEffect: Yh,
    useMemo: ci,
    useReducer: Lh,
    useRef: Th,
    useState: function useState() {
        return Lh(Jh);
    },
    useDebugValue: ai,
    useDeferredValue: function useDeferredValue(a194) {
        var b6 = Lh(Jh), c = b6[0], d = b6[1];
        Xh(function() {
            var b = wh.transition;
            wh.transition = 1;
            try {
                d(a194);
            } finally{
                wh.transition = b;
            }
        }, [
            a194
        ]);
        return c;
    },
    useTransition: function useTransition() {
        var a195 = Lh(Jh)[0];
        return [
            Th().current,
            a195
        ];
    },
    useMutableSource: Ph,
    useOpaqueIdentifier: function useOpaqueIdentifier() {
        return Lh(Jh)[0];
    },
    unstable_isNewReconciler: !1
}, ei = ra.ReactCurrentOwner, ug = !1;
function fi(a196, b, c, d) {
    b.child = null === a196 ? Zg(b, null, c, d) : Yg(b, a196.child, c, d);
}
function gi(a197, b, c, d, e) {
    c = c.render;
    var f = b.ref;
    tg(b, e);
    d = Ch(a197, b, c, d, f, e);
    if (null !== a197 && !ug) return b.updateQueue = a197.updateQueue, b.flags &= -517, a197.lanes &= ~e, hi(a197, b, e);
    b.flags |= 1;
    fi(a197, b, d, e);
    return b.child;
}
function ii(a198, b, c, d, e, f) {
    if (null === a198) {
        var g = c.type;
        if ("function" === typeof g && !ji(g) && void 0 === g.defaultProps && null === c.compare && void 0 === c.defaultProps) return b.tag = 15, b.type = g, ki(a198, b, g, d, e, f);
        a198 = Vg(c.type, null, d, b, b.mode, f);
        a198.ref = b.ref;
        a198.return = b;
        return b.child = a198;
    }
    g = a198.child;
    if (0 === (e & f) && (e = g.memoizedProps, c = c.compare, c = null !== c ? c : Je, c(e, d) && a198.ref === b.ref)) return hi(a198, b, f);
    b.flags |= 1;
    a198 = Tg(g, d);
    a198.ref = b.ref;
    a198.return = b;
    return b.child = a198;
}
function ki(a199, b, c, d, e, f) {
    if (null !== a199 && Je(a199.memoizedProps, d) && a199.ref === b.ref) {
        if (ug = !1, 0 !== (f & e)) 0 !== (a199.flags & 16384) && (ug = !0);
        else return b.lanes = a199.lanes, hi(a199, b, f);
    }
    return li(a199, b, c, d, f);
}
function mi(a200, b, c) {
    var d = b.pendingProps, e = d.children, f = null !== a200 ? a200.memoizedState : null;
    if ("hidden" === d.mode || "unstable-defer-without-hiding" === d.mode) {
        if (0 === (b.mode & 4)) b.memoizedState = {
            baseLanes: 0
        }, ni(b, c);
        else if (0 !== (c & 1073741824)) b.memoizedState = {
            baseLanes: 0
        }, ni(b, null !== f ? f.baseLanes : c);
        else return a200 = null !== f ? f.baseLanes | c : c, b.lanes = b.childLanes = 1073741824, b.memoizedState = {
            baseLanes: a200
        }, ni(b, a200), null;
    } else null !== f ? (d = f.baseLanes | c, b.memoizedState = null) : d = c, ni(b, d);
    fi(a200, b, e, c);
    return b.child;
}
function oi(a201, b) {
    var c = b.ref;
    if (null === a201 && null !== c || null !== a201 && a201.ref !== c) b.flags |= 128;
}
function li(a202, b, c, d, e) {
    var f = Ff(c) ? Df : M.current;
    f = Ef(b, f);
    tg(b, e);
    c = Ch(a202, b, c, d, f, e);
    if (null !== a202 && !ug) return b.updateQueue = a202.updateQueue, b.flags &= -517, a202.lanes &= ~e, hi(a202, b, e);
    b.flags |= 1;
    fi(a202, b, c, e);
    return b.child;
}
function pi(a203, b, c, d, e) {
    if (Ff(c)) {
        var f = !0;
        Jf(b);
    } else f = !1;
    tg(b, e);
    if (null === b.stateNode) null !== a203 && (a203.alternate = null, b.alternate = null, b.flags |= 2), Mg(b, c, d), Og(b, c, d, e), d = !0;
    else if (null === a203) {
        var g = b.stateNode, h = b.memoizedProps;
        g.props = h;
        var k = g.context, l = c.contextType;
        "object" === typeof l && null !== l ? l = vg(l) : (l = Ff(c) ? Df : M.current, l = Ef(b, l));
        var n = c.getDerivedStateFromProps, A = "function" === typeof n || "function" === typeof g.getSnapshotBeforeUpdate;
        A || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== d || k !== l) && Ng(b, g, d, l);
        wg = !1;
        var p = b.memoizedState;
        g.state = p;
        Cg(b, d, g, e);
        k = b.memoizedState;
        h !== d || p !== k || N.current || wg ? ("function" === typeof n && (Gg(b, c, n, d), k = b.memoizedState), (h = wg || Lg(b, c, h, d, p, k, l)) ? (A || "function" !== typeof g.UNSAFE_componentWillMount && "function" !== typeof g.componentWillMount || ("function" === typeof g.componentWillMount && g.componentWillMount(), "function" === typeof g.UNSAFE_componentWillMount && g.UNSAFE_componentWillMount()), "function" === typeof g.componentDidMount && (b.flags |= 4)) : ("function" === typeof g.componentDidMount && (b.flags |= 4), b.memoizedProps = d, b.memoizedState = k), g.props = d, g.state = k, g.context = l, d = h) : ("function" === typeof g.componentDidMount && (b.flags |= 4), d = !1);
    } else {
        g = b.stateNode;
        yg(a203, b);
        h = b.memoizedProps;
        l = b.type === b.elementType ? h : lg(b.type, h);
        g.props = l;
        A = b.pendingProps;
        p = g.context;
        k = c.contextType;
        "object" === typeof k && null !== k ? k = vg(k) : (k = Ff(c) ? Df : M.current, k = Ef(b, k));
        var C = c.getDerivedStateFromProps;
        (n = "function" === typeof C || "function" === typeof g.getSnapshotBeforeUpdate) || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== A || p !== k) && Ng(b, g, d, k);
        wg = !1;
        p = b.memoizedState;
        g.state = p;
        Cg(b, d, g, e);
        var x = b.memoizedState;
        h !== A || p !== x || N.current || wg ? ("function" === typeof C && (Gg(b, c, C, d), x = b.memoizedState), (l = wg || Lg(b, c, l, d, p, x, k)) ? (n || "function" !== typeof g.UNSAFE_componentWillUpdate && "function" !== typeof g.componentWillUpdate || ("function" === typeof g.componentWillUpdate && g.componentWillUpdate(d, x, k), "function" === typeof g.UNSAFE_componentWillUpdate && g.UNSAFE_componentWillUpdate(d, x, k)), "function" === typeof g.componentDidUpdate && (b.flags |= 4), "function" === typeof g.getSnapshotBeforeUpdate && (b.flags |= 256)) : ("function" !== typeof g.componentDidUpdate || h === a203.memoizedProps && p === a203.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a203.memoizedProps && p === a203.memoizedState || (b.flags |= 256), b.memoizedProps = d, b.memoizedState = x), g.props = d, g.state = x, g.context = k, d = l) : ("function" !== typeof g.componentDidUpdate || h === a203.memoizedProps && p === a203.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a203.memoizedProps && p === a203.memoizedState || (b.flags |= 256), d = !1);
    }
    return qi(a203, b, c, d, f, e);
}
function qi(a204, b, c, d, e, f) {
    oi(a204, b);
    var g = 0 !== (b.flags & 64);
    if (!d && !g) return e && Kf(b, c, !1), hi(a204, b, f);
    d = b.stateNode;
    ei.current = b;
    var h = g && "function" !== typeof c.getDerivedStateFromError ? null : d.render();
    b.flags |= 1;
    null !== a204 && g ? (b.child = Yg(b, a204.child, null, f), b.child = Yg(b, null, h, f)) : fi(a204, b, h, f);
    b.memoizedState = d.state;
    e && Kf(b, c, !0);
    return b.child;
}
function ri(a205) {
    var b = a205.stateNode;
    b.pendingContext ? Hf(a205, b.pendingContext, b.pendingContext !== b.context) : b.context && Hf(a205, b.context, !1);
    eh(a205, b.containerInfo);
}
var si = {
    dehydrated: null,
    retryLane: 0
};
function ti(a206, b, c) {
    var d = b.pendingProps, e = P.current, f = !1, g;
    (g = 0 !== (b.flags & 64)) || (g = null !== a206 && null === a206.memoizedState ? !1 : 0 !== (e & 2));
    g ? (f = !0, b.flags &= -65) : null !== a206 && null === a206.memoizedState || void 0 === d.fallback || !0 === d.unstable_avoidThisFallback || (e |= 1);
    I(P, e & 1);
    if (null === a206) {
        void 0 !== d.fallback && ph(b);
        a206 = d.children;
        e = d.fallback;
        if (f) return a206 = ui(b, a206, e, c), b.child.memoizedState = {
            baseLanes: c
        }, b.memoizedState = si, a206;
        if ("number" === typeof d.unstable_expectedLoadTime) return a206 = ui(b, a206, e, c), b.child.memoizedState = {
            baseLanes: c
        }, b.memoizedState = si, b.lanes = 33554432, a206;
        c = vi({
            mode: "visible",
            children: a206
        }, b.mode, c, null);
        c.return = b;
        return b.child = c;
    }
    if (null !== a206.memoizedState) {
        if (f) return d = wi(a206, b, d.children, d.fallback, c), f = b.child, e = a206.child.memoizedState, f.memoizedState = null === e ? {
            baseLanes: c
        } : {
            baseLanes: e.baseLanes | c
        }, f.childLanes = a206.childLanes & ~c, b.memoizedState = si, d;
        c = xi(a206, b, d.children, c);
        b.memoizedState = null;
        return c;
    }
    if (f) return d = wi(a206, b, d.children, d.fallback, c), f = b.child, e = a206.child.memoizedState, f.memoizedState = null === e ? {
        baseLanes: c
    } : {
        baseLanes: e.baseLanes | c
    }, f.childLanes = a206.childLanes & ~c, b.memoizedState = si, d;
    c = xi(a206, b, d.children, c);
    b.memoizedState = null;
    return c;
}
function ui(a207, b, c, d) {
    var e = a207.mode, f = a207.child;
    b = {
        mode: "hidden",
        children: b
    };
    0 === (e & 2) && null !== f ? (f.childLanes = 0, f.pendingProps = b) : f = vi(b, e, 0, null);
    c = Xg(c, e, d, null);
    f.return = a207;
    c.return = a207;
    f.sibling = c;
    a207.child = f;
    return c;
}
function xi(a208, b, c, d) {
    var e = a208.child;
    a208 = e.sibling;
    c = Tg(e, {
        mode: "visible",
        children: c
    });
    0 === (b.mode & 2) && (c.lanes = d);
    c.return = b;
    c.sibling = null;
    null !== a208 && (a208.nextEffect = null, a208.flags = 8, b.firstEffect = b.lastEffect = a208);
    return b.child = c;
}
function wi(a209, b, c, d, e) {
    var f = b.mode, g = a209.child;
    a209 = g.sibling;
    var h = {
        mode: "hidden",
        children: c
    };
    0 === (f & 2) && b.child !== g ? (c = b.child, c.childLanes = 0, c.pendingProps = h, g = c.lastEffect, null !== g ? (b.firstEffect = c.firstEffect, b.lastEffect = g, g.nextEffect = null) : b.firstEffect = b.lastEffect = null) : c = Tg(g, h);
    null !== a209 ? d = Tg(a209, d) : (d = Xg(d, f, e, null), d.flags |= 2);
    d.return = b;
    c.return = b;
    c.sibling = d;
    b.child = c;
    return d;
}
function yi(a210, b) {
    a210.lanes |= b;
    var c = a210.alternate;
    null !== c && (c.lanes |= b);
    sg(a210.return, b);
}
function zi(a211, b, c, d, e, f) {
    var g = a211.memoizedState;
    null === g ? a211.memoizedState = {
        isBackwards: b,
        rendering: null,
        renderingStartTime: 0,
        last: d,
        tail: c,
        tailMode: e,
        lastEffect: f
    } : (g.isBackwards = b, g.rendering = null, g.renderingStartTime = 0, g.last = d, g.tail = c, g.tailMode = e, g.lastEffect = f);
}
function Ai(a212, b, c) {
    var d = b.pendingProps, e = d.revealOrder, f = d.tail;
    fi(a212, b, d.children, c);
    d = P.current;
    if (0 !== (d & 2)) d = d & 1 | 2, b.flags |= 64;
    else {
        if (null !== a212 && 0 !== (a212.flags & 64)) a: for(a212 = b.child; null !== a212;){
            if (13 === a212.tag) null !== a212.memoizedState && yi(a212, c);
            else if (19 === a212.tag) yi(a212, c);
            else if (null !== a212.child) {
                a212.child.return = a212;
                a212 = a212.child;
                continue;
            }
            if (a212 === b) break a;
            for(; null === a212.sibling;){
                if (null === a212.return || a212.return === b) break a;
                a212 = a212.return;
            }
            a212.sibling.return = a212.return;
            a212 = a212.sibling;
        }
        d &= 1;
    }
    I(P, d);
    if (0 === (b.mode & 2)) b.memoizedState = null;
    else switch(e){
        case "forwards":
            c = b.child;
            for(e = null; null !== c;)a212 = c.alternate, null !== a212 && null === ih(a212) && (e = c), c = c.sibling;
            c = e;
            null === c ? (e = b.child, b.child = null) : (e = c.sibling, c.sibling = null);
            zi(b, !1, e, c, f, b.lastEffect);
            break;
        case "backwards":
            c = null;
            e = b.child;
            for(b.child = null; null !== e;){
                a212 = e.alternate;
                if (null !== a212 && null === ih(a212)) {
                    b.child = e;
                    break;
                }
                a212 = e.sibling;
                e.sibling = c;
                c = e;
                e = a212;
            }
            zi(b, !0, c, null, f, b.lastEffect);
            break;
        case "together":
            zi(b, !1, null, null, void 0, b.lastEffect);
            break;
        default:
            b.memoizedState = null;
    }
    return b.child;
}
function hi(a213, b, c) {
    null !== a213 && (b.dependencies = a213.dependencies);
    Dg |= b.lanes;
    if (0 !== (c & b.childLanes)) {
        if (null !== a213 && b.child !== a213.child) throw Error(y(153));
        if (null !== b.child) {
            a213 = b.child;
            c = Tg(a213, a213.pendingProps);
            b.child = c;
            for(c.return = b; null !== a213.sibling;)a213 = a213.sibling, c = c.sibling = Tg(a213, a213.pendingProps), c.return = b;
            c.sibling = null;
        }
        return b.child;
    }
    return null;
}
var Bi, Ci, Di, Ei;
Bi = function Bi(a214, b) {
    for(var c = b.child; null !== c;){
        if (5 === c.tag || 6 === c.tag) a214.appendChild(c.stateNode);
        else if (4 !== c.tag && null !== c.child) {
            c.child.return = c;
            c = c.child;
            continue;
        }
        if (c === b) break;
        for(; null === c.sibling;){
            if (null === c.return || c.return === b) return;
            c = c.return;
        }
        c.sibling.return = c.return;
        c = c.sibling;
    }
};
Ci = function Ci() {};
Di = function Di(a215, b, c, d) {
    var e = a215.memoizedProps;
    if (e !== d) {
        a215 = b.stateNode;
        dh(ah.current);
        var f = null;
        switch(c){
            case "input":
                e = Ya(a215, e);
                d = Ya(a215, d);
                f = [];
                break;
            case "option":
                e = eb(a215, e);
                d = eb(a215, d);
                f = [];
                break;
            case "select":
                e = m({}, e, {
                    value: void 0
                });
                d = m({}, d, {
                    value: void 0
                });
                f = [];
                break;
            case "textarea":
                e = gb(a215, e);
                d = gb(a215, d);
                f = [];
                break;
            default:
                "function" !== typeof e.onClick && "function" === typeof d.onClick && (a215.onclick = jf);
        }
        vb(c, d);
        var g;
        c = null;
        for(l in e)if (!d.hasOwnProperty(l) && e.hasOwnProperty(l) && null != e[l]) {
            if ("style" === l) {
                var h = e[l];
                for(g in h)h.hasOwnProperty(g) && (c || (c = {}), c[g] = "");
            } else "dangerouslySetInnerHTML" !== l && "children" !== l && "suppressContentEditableWarning" !== l && "suppressHydrationWarning" !== l && "autoFocus" !== l && (ca.hasOwnProperty(l) ? f || (f = []) : (f = f || []).push(l, null));
        }
        for(l in d){
            var k = d[l];
            h = null != e ? e[l] : void 0;
            if (d.hasOwnProperty(l) && k !== h && (null != k || null != h)) {
                if ("style" === l) {
                    if (h) {
                        for(g in h)!h.hasOwnProperty(g) || k && k.hasOwnProperty(g) || (c || (c = {}), c[g] = "");
                        for(g in k)k.hasOwnProperty(g) && h[g] !== k[g] && (c || (c = {}), c[g] = k[g]);
                    } else c || (f || (f = []), f.push(l, c)), c = k;
                } else "dangerouslySetInnerHTML" === l ? (k = k ? k.__html : void 0, h = h ? h.__html : void 0, null != k && h !== k && (f = f || []).push(l, k)) : "children" === l ? "string" !== typeof k && "number" !== typeof k || (f = f || []).push(l, "" + k) : "suppressContentEditableWarning" !== l && "suppressHydrationWarning" !== l && (ca.hasOwnProperty(l) ? (null != k && "onScroll" === l && G("scroll", a215), f || h === k || (f = [])) : "object" === typeof k && null !== k && k.$$typeof === Ga ? k.toString() : (f = f || []).push(l, k));
            }
        }
        c && (f = f || []).push("style", c);
        var l = f;
        if (b.updateQueue = l) b.flags |= 4;
    }
};
Ei = function Ei(a, b, c, d) {
    c !== d && (b.flags |= 4);
};
function Fi(a216, b) {
    if (!lh) switch(a216.tailMode){
        case "hidden":
            b = a216.tail;
            for(var c = null; null !== b;)null !== b.alternate && (c = b), b = b.sibling;
            null === c ? a216.tail = null : c.sibling = null;
            break;
        case "collapsed":
            c = a216.tail;
            for(var d = null; null !== c;)null !== c.alternate && (d = c), c = c.sibling;
            null === d ? b || null === a216.tail ? a216.tail = null : a216.tail.sibling = null : d.sibling = null;
    }
}
function Gi(a217, b, c) {
    var d = b.pendingProps;
    switch(b.tag){
        case 2:
        case 16:
        case 15:
        case 0:
        case 11:
        case 7:
        case 8:
        case 12:
        case 9:
        case 14:
            return null;
        case 1:
            return Ff(b.type) && Gf(), null;
        case 3:
            fh();
            H(N);
            H(M);
            uh();
            d = b.stateNode;
            d.pendingContext && (d.context = d.pendingContext, d.pendingContext = null);
            if (null === a217 || null === a217.child) rh(b) ? b.flags |= 4 : d.hydrate || (b.flags |= 256);
            Ci(b);
            return null;
        case 5:
            hh(b);
            var e = dh(ch.current);
            c = b.type;
            if (null !== a217 && null != b.stateNode) Di(a217, b, c, d, e), a217.ref !== b.ref && (b.flags |= 128);
            else {
                if (!d) {
                    if (null === b.stateNode) throw Error(y(166));
                    return null;
                }
                a217 = dh(ah.current);
                if (rh(b)) {
                    d = b.stateNode;
                    c = b.type;
                    var f = b.memoizedProps;
                    d[wf] = b;
                    d[xf] = f;
                    switch(c){
                        case "dialog":
                            G("cancel", d);
                            G("close", d);
                            break;
                        case "iframe":
                        case "object":
                        case "embed":
                            G("load", d);
                            break;
                        case "video":
                        case "audio":
                            for(a217 = 0; a217 < Xe.length; a217++)G(Xe[a217], d);
                            break;
                        case "source":
                            G("error", d);
                            break;
                        case "img":
                        case "image":
                        case "link":
                            G("error", d);
                            G("load", d);
                            break;
                        case "details":
                            G("toggle", d);
                            break;
                        case "input":
                            Za(d, f);
                            G("invalid", d);
                            break;
                        case "select":
                            d._wrapperState = {
                                wasMultiple: !!f.multiple
                            };
                            G("invalid", d);
                            break;
                        case "textarea":
                            hb(d, f), G("invalid", d);
                    }
                    vb(c, f);
                    a217 = null;
                    for(var g in f)f.hasOwnProperty(g) && (e = f[g], "children" === g ? "string" === typeof e ? d.textContent !== e && (a217 = [
                        "children",
                        e
                    ]) : "number" === typeof e && d.textContent !== "" + e && (a217 = [
                        "children",
                        "" + e
                    ]) : ca.hasOwnProperty(g) && null != e && "onScroll" === g && G("scroll", d));
                    switch(c){
                        case "input":
                            Va(d);
                            cb(d, f, !0);
                            break;
                        case "textarea":
                            Va(d);
                            jb(d);
                            break;
                        case "select":
                        case "option":
                            break;
                        default:
                            "function" === typeof f.onClick && (d.onclick = jf);
                    }
                    d = a217;
                    b.updateQueue = d;
                    null !== d && (b.flags |= 4);
                } else {
                    g = 9 === e.nodeType ? e : e.ownerDocument;
                    a217 === kb.html && (a217 = lb(c));
                    a217 === kb.html ? "script" === c ? (a217 = g.createElement("div"), a217.innerHTML = "<script>\x3c/script>", a217 = a217.removeChild(a217.firstChild)) : "string" === typeof d.is ? a217 = g.createElement(c, {
                        is: d.is
                    }) : (a217 = g.createElement(c), "select" === c && (g = a217, d.multiple ? g.multiple = !0 : d.size && (g.size = d.size))) : a217 = g.createElementNS(a217, c);
                    a217[wf] = b;
                    a217[xf] = d;
                    Bi(a217, b, !1, !1);
                    b.stateNode = a217;
                    g = wb(c, d);
                    switch(c){
                        case "dialog":
                            G("cancel", a217);
                            G("close", a217);
                            e = d;
                            break;
                        case "iframe":
                        case "object":
                        case "embed":
                            G("load", a217);
                            e = d;
                            break;
                        case "video":
                        case "audio":
                            for(e = 0; e < Xe.length; e++)G(Xe[e], a217);
                            e = d;
                            break;
                        case "source":
                            G("error", a217);
                            e = d;
                            break;
                        case "img":
                        case "image":
                        case "link":
                            G("error", a217);
                            G("load", a217);
                            e = d;
                            break;
                        case "details":
                            G("toggle", a217);
                            e = d;
                            break;
                        case "input":
                            Za(a217, d);
                            e = Ya(a217, d);
                            G("invalid", a217);
                            break;
                        case "option":
                            e = eb(a217, d);
                            break;
                        case "select":
                            a217._wrapperState = {
                                wasMultiple: !!d.multiple
                            };
                            e = m({}, d, {
                                value: void 0
                            });
                            G("invalid", a217);
                            break;
                        case "textarea":
                            hb(a217, d);
                            e = gb(a217, d);
                            G("invalid", a217);
                            break;
                        default:
                            e = d;
                    }
                    vb(c, e);
                    var h = e;
                    for(f in h)if (h.hasOwnProperty(f)) {
                        var k = h[f];
                        "style" === f ? tb(a217, k) : "dangerouslySetInnerHTML" === f ? (k = k ? k.__html : void 0, null != k && ob(a217, k)) : "children" === f ? "string" === typeof k ? ("textarea" !== c || "" !== k) && pb(a217, k) : "number" === typeof k && pb(a217, "" + k) : "suppressContentEditableWarning" !== f && "suppressHydrationWarning" !== f && "autoFocus" !== f && (ca.hasOwnProperty(f) ? null != k && "onScroll" === f && G("scroll", a217) : null != k && qa(a217, f, k, g));
                    }
                    switch(c){
                        case "input":
                            Va(a217);
                            cb(a217, d, !1);
                            break;
                        case "textarea":
                            Va(a217);
                            jb(a217);
                            break;
                        case "option":
                            null != d.value && a217.setAttribute("value", "" + Sa(d.value));
                            break;
                        case "select":
                            a217.multiple = !!d.multiple;
                            f = d.value;
                            null != f ? fb(a217, !!d.multiple, f, !1) : null != d.defaultValue && fb(a217, !!d.multiple, d.defaultValue, !0);
                            break;
                        default:
                            "function" === typeof e.onClick && (a217.onclick = jf);
                    }
                    mf(c, d) && (b.flags |= 4);
                }
                null !== b.ref && (b.flags |= 128);
            }
            return null;
        case 6:
            if (a217 && null != b.stateNode) Ei(a217, b, a217.memoizedProps, d);
            else {
                if ("string" !== typeof d && null === b.stateNode) throw Error(y(166));
                c = dh(ch.current);
                dh(ah.current);
                rh(b) ? (d = b.stateNode, c = b.memoizedProps, d[wf] = b, d.nodeValue !== c && (b.flags |= 4)) : (d = (9 === c.nodeType ? c : c.ownerDocument).createTextNode(d), d[wf] = b, b.stateNode = d);
            }
            return null;
        case 13:
            H(P);
            d = b.memoizedState;
            if (0 !== (b.flags & 64)) return b.lanes = c, b;
            d = null !== d;
            c = !1;
            null === a217 ? void 0 !== b.memoizedProps.fallback && rh(b) : c = null !== a217.memoizedState;
            if (d && !c && 0 !== (b.mode & 2)) {
                if (null === a217 && !0 !== b.memoizedProps.unstable_avoidThisFallback || 0 !== (P.current & 1)) 0 === V && (V = 3);
                else {
                    if (0 === V || 3 === V) V = 4;
                    null === U || 0 === (Dg & 134217727) && 0 === (Hi & 134217727) || Ii(U, W);
                }
            }
            if (d || c) b.flags |= 4;
            return null;
        case 4:
            return fh(), Ci(b), null === a217 && cf(b.stateNode.containerInfo), null;
        case 10:
            return rg(b), null;
        case 17:
            return Ff(b.type) && Gf(), null;
        case 19:
            H(P);
            d = b.memoizedState;
            if (null === d) return null;
            f = 0 !== (b.flags & 64);
            g = d.rendering;
            if (null === g) {
                if (f) Fi(d, !1);
                else {
                    if (0 !== V || null !== a217 && 0 !== (a217.flags & 64)) for(a217 = b.child; null !== a217;){
                        g = ih(a217);
                        if (null !== g) {
                            b.flags |= 64;
                            Fi(d, !1);
                            f = g.updateQueue;
                            null !== f && (b.updateQueue = f, b.flags |= 4);
                            null === d.lastEffect && (b.firstEffect = null);
                            b.lastEffect = d.lastEffect;
                            d = c;
                            for(c = b.child; null !== c;)f = c, a217 = d, f.flags &= 2, f.nextEffect = null, f.firstEffect = null, f.lastEffect = null, g = f.alternate, null === g ? (f.childLanes = 0, f.lanes = a217, f.child = null, f.memoizedProps = null, f.memoizedState = null, f.updateQueue = null, f.dependencies = null, f.stateNode = null) : (f.childLanes = g.childLanes, f.lanes = g.lanes, f.child = g.child, f.memoizedProps = g.memoizedProps, f.memoizedState = g.memoizedState, f.updateQueue = g.updateQueue, f.type = g.type, a217 = g.dependencies, f.dependencies = null === a217 ? null : {
                                lanes: a217.lanes,
                                firstContext: a217.firstContext
                            }), c = c.sibling;
                            I(P, P.current & 1 | 2);
                            return b.child;
                        }
                        a217 = a217.sibling;
                    }
                    null !== d.tail && O() > Ji && (b.flags |= 64, f = !0, Fi(d, !1), b.lanes = 33554432);
                }
            } else {
                if (!f) {
                    if (a217 = ih(g), null !== a217) {
                        if (b.flags |= 64, f = !0, c = a217.updateQueue, null !== c && (b.updateQueue = c, b.flags |= 4), Fi(d, !0), null === d.tail && "hidden" === d.tailMode && !g.alternate && !lh) return b = b.lastEffect = d.lastEffect, null !== b && (b.nextEffect = null), null;
                    } else 2 * O() - d.renderingStartTime > Ji && 1073741824 !== c && (b.flags |= 64, f = !0, Fi(d, !1), b.lanes = 33554432);
                }
                d.isBackwards ? (g.sibling = b.child, b.child = g) : (c = d.last, null !== c ? c.sibling = g : b.child = g, d.last = g);
            }
            return null !== d.tail ? (c = d.tail, d.rendering = c, d.tail = c.sibling, d.lastEffect = b.lastEffect, d.renderingStartTime = O(), c.sibling = null, b = P.current, I(P, f ? b & 1 | 2 : b & 1), c) : null;
        case 23:
        case 24:
            return Ki(), null !== a217 && null !== a217.memoizedState !== (null !== b.memoizedState) && "unstable-defer-without-hiding" !== d.mode && (b.flags |= 4), null;
    }
    throw Error(y(156, b.tag));
}
function Li(a218) {
    switch(a218.tag){
        case 1:
            Ff(a218.type) && Gf();
            var b = a218.flags;
            return b & 4096 ? (a218.flags = b & -4097 | 64, a218) : null;
        case 3:
            fh();
            H(N);
            H(M);
            uh();
            b = a218.flags;
            if (0 !== (b & 64)) throw Error(y(285));
            a218.flags = b & -4097 | 64;
            return a218;
        case 5:
            return hh(a218), null;
        case 13:
            return H(P), b = a218.flags, b & 4096 ? (a218.flags = b & -4097 | 64, a218) : null;
        case 19:
            return H(P), null;
        case 4:
            return fh(), null;
        case 10:
            return rg(a218), null;
        case 23:
        case 24:
            return Ki(), null;
        default:
            return null;
    }
}
function Mi(a219, b) {
    try {
        var c = "", d = b;
        do c += Qa(d), d = d.return;
        while (d)
        var e = c;
    } catch (f) {
        e = "\nError generating stack: " + f.message + "\n" + f.stack;
    }
    return {
        value: a219,
        source: b,
        stack: e
    };
}
function Ni(a, b) {
    try {
        console.error(b.value);
    } catch (c) {
        setTimeout(function() {
            throw c;
        });
    }
}
var Oi = "function" === typeof WeakMap ? WeakMap : Map;
function Pi(a220, b, c) {
    c = zg(-1, c);
    c.tag = 3;
    c.payload = {
        element: null
    };
    var d = b.value;
    c.callback = function() {
        Qi || (Qi = !0, Ri = d);
        Ni(a220, b);
    };
    return c;
}
function Si(a221, b, c) {
    c = zg(-1, c);
    c.tag = 3;
    var d = a221.type.getDerivedStateFromError;
    if ("function" === typeof d) {
        var e = b.value;
        c.payload = function() {
            Ni(a221, b);
            return d(e);
        };
    }
    var f = a221.stateNode;
    null !== f && "function" === typeof f.componentDidCatch && (c.callback = function() {
        "function" !== typeof d && (null === Ti ? Ti = new Set([
            this
        ]) : Ti.add(this), Ni(a221, b));
        var _$c = b.stack;
        this.componentDidCatch(b.value, {
            componentStack: null !== _$c ? _$c : ""
        });
    });
    return c;
}
var Ui = "function" === typeof WeakSet ? WeakSet : Set;
function Vi(a222) {
    var b = a222.ref;
    if (null !== b) {
        if ("function" === typeof b) try {
            b(null);
        } catch (c) {
            Wi(a222, c);
        }
        else b.current = null;
    }
}
function Xi(a223, b) {
    switch(b.tag){
        case 0:
        case 11:
        case 15:
        case 22:
            return;
        case 1:
            if (b.flags & 256 && null !== a223) {
                var c = a223.memoizedProps, d = a223.memoizedState;
                a223 = b.stateNode;
                b = a223.getSnapshotBeforeUpdate(b.elementType === b.type ? c : lg(b.type, c), d);
                a223.__reactInternalSnapshotBeforeUpdate = b;
            }
            return;
        case 3:
            b.flags & 256 && qf(b.stateNode.containerInfo);
            return;
        case 5:
        case 6:
        case 4:
        case 17:
            return;
    }
    throw Error(y(163));
}
function Yi(a224, b, c) {
    switch(c.tag){
        case 0:
        case 11:
        case 15:
        case 22:
            b = c.updateQueue;
            b = null !== b ? b.lastEffect : null;
            if (null !== b) {
                a224 = b = b.next;
                do {
                    if (3 === (a224.tag & 3)) {
                        var d = a224.create;
                        a224.destroy = d();
                    }
                    a224 = a224.next;
                }while (a224 !== b)
            }
            b = c.updateQueue;
            b = null !== b ? b.lastEffect : null;
            if (null !== b) {
                a224 = b = b.next;
                do {
                    var e = a224;
                    d = e.next;
                    e = e.tag;
                    0 !== (e & 4) && 0 !== (e & 1) && (Zi(c, a224), $i(c, a224));
                    a224 = d;
                }while (a224 !== b)
            }
            return;
        case 1:
            a224 = c.stateNode;
            c.flags & 4 && (null === b ? a224.componentDidMount() : (d = c.elementType === c.type ? b.memoizedProps : lg(c.type, b.memoizedProps), a224.componentDidUpdate(d, b.memoizedState, a224.__reactInternalSnapshotBeforeUpdate)));
            b = c.updateQueue;
            null !== b && Eg(c, b, a224);
            return;
        case 3:
            b = c.updateQueue;
            if (null !== b) {
                a224 = null;
                if (null !== c.child) switch(c.child.tag){
                    case 5:
                        a224 = c.child.stateNode;
                        break;
                    case 1:
                        a224 = c.child.stateNode;
                }
                Eg(c, b, a224);
            }
            return;
        case 5:
            a224 = c.stateNode;
            null === b && c.flags & 4 && mf(c.type, c.memoizedProps) && a224.focus();
            return;
        case 6:
            return;
        case 4:
            return;
        case 12:
            return;
        case 13:
            null === c.memoizedState && (c = c.alternate, null !== c && (c = c.memoizedState, null !== c && (c = c.dehydrated, null !== c && Cc(c))));
            return;
        case 19:
        case 17:
        case 20:
        case 21:
        case 23:
        case 24:
            return;
    }
    throw Error(y(163));
}
function aj(a225, b) {
    for(var c = a225;;){
        if (5 === c.tag) {
            var d = c.stateNode;
            if (b) d = d.style, "function" === typeof d.setProperty ? d.setProperty("display", "none", "important") : d.display = "none";
            else {
                d = c.stateNode;
                var e = c.memoizedProps.style;
                e = void 0 !== e && null !== e && e.hasOwnProperty("display") ? e.display : null;
                d.style.display = sb("display", e);
            }
        } else if (6 === c.tag) c.stateNode.nodeValue = b ? "" : c.memoizedProps;
        else if ((23 !== c.tag && 24 !== c.tag || null === c.memoizedState || c === a225) && null !== c.child) {
            c.child.return = c;
            c = c.child;
            continue;
        }
        if (c === a225) break;
        for(; null === c.sibling;){
            if (null === c.return || c.return === a225) return;
            c = c.return;
        }
        c.sibling.return = c.return;
        c = c.sibling;
    }
}
function bj(a226, b) {
    if (Mf && "function" === typeof Mf.onCommitFiberUnmount) try {
        Mf.onCommitFiberUnmount(Lf, b);
    } catch (f) {}
    switch(b.tag){
        case 0:
        case 11:
        case 14:
        case 15:
        case 22:
            a226 = b.updateQueue;
            if (null !== a226 && (a226 = a226.lastEffect, null !== a226)) {
                var c = a226 = a226.next;
                do {
                    var d = c, e = d.destroy;
                    d = d.tag;
                    if (void 0 !== e) {
                        if (0 !== (d & 4)) Zi(b, c);
                        else {
                            d = b;
                            try {
                                e();
                            } catch (f) {
                                Wi(d, f);
                            }
                        }
                    }
                    c = c.next;
                }while (c !== a226)
            }
            break;
        case 1:
            Vi(b);
            a226 = b.stateNode;
            if ("function" === typeof a226.componentWillUnmount) try {
                a226.props = b.memoizedProps, a226.state = b.memoizedState, a226.componentWillUnmount();
            } catch (f2) {
                Wi(b, f2);
            }
            break;
        case 5:
            Vi(b);
            break;
        case 4:
            cj(a226, b);
    }
}
function dj(a227) {
    a227.alternate = null;
    a227.child = null;
    a227.dependencies = null;
    a227.firstEffect = null;
    a227.lastEffect = null;
    a227.memoizedProps = null;
    a227.memoizedState = null;
    a227.pendingProps = null;
    a227.return = null;
    a227.updateQueue = null;
}
function ej(a228) {
    return 5 === a228.tag || 3 === a228.tag || 4 === a228.tag;
}
function fj(a229) {
    a: {
        for(var b = a229.return; null !== b;){
            if (ej(b)) break a;
            b = b.return;
        }
        throw Error(y(160));
    }
    var c = b;
    b = c.stateNode;
    switch(c.tag){
        case 5:
            var d = !1;
            break;
        case 3:
            b = b.containerInfo;
            d = !0;
            break;
        case 4:
            b = b.containerInfo;
            d = !0;
            break;
        default:
            throw Error(y(161));
    }
    c.flags & 16 && (pb(b, ""), c.flags &= -17);
    a: b: for(c = a229;;){
        for(; null === c.sibling;){
            if (null === c.return || ej(c.return)) {
                c = null;
                break a;
            }
            c = c.return;
        }
        c.sibling.return = c.return;
        for(c = c.sibling; 5 !== c.tag && 6 !== c.tag && 18 !== c.tag;){
            if (c.flags & 2) continue b;
            if (null === c.child || 4 === c.tag) continue b;
            else c.child.return = c, c = c.child;
        }
        if (!(c.flags & 2)) {
            c = c.stateNode;
            break a;
        }
    }
    d ? gj(a229, c, b) : hj(a229, c, b);
}
function gj(a230, b, c) {
    var d = a230.tag, e = 5 === d || 6 === d;
    if (e) a230 = e ? a230.stateNode : a230.stateNode.instance, b ? 8 === c.nodeType ? c.parentNode.insertBefore(a230, b) : c.insertBefore(a230, b) : (8 === c.nodeType ? (b = c.parentNode, b.insertBefore(a230, c)) : (b = c, b.appendChild(a230)), c = c._reactRootContainer, null !== c && void 0 !== c || null !== b.onclick || (b.onclick = jf));
    else if (4 !== d && (a230 = a230.child, null !== a230)) for(gj(a230, b, c), a230 = a230.sibling; null !== a230;)gj(a230, b, c), a230 = a230.sibling;
}
function hj(a231, b, c) {
    var d = a231.tag, e = 5 === d || 6 === d;
    if (e) a231 = e ? a231.stateNode : a231.stateNode.instance, b ? c.insertBefore(a231, b) : c.appendChild(a231);
    else if (4 !== d && (a231 = a231.child, null !== a231)) for(hj(a231, b, c), a231 = a231.sibling; null !== a231;)hj(a231, b, c), a231 = a231.sibling;
}
function cj(a232, b) {
    for(var c = b, d = !1, e, f;;){
        if (!d) {
            d = c.return;
            a: for(;;){
                if (null === d) throw Error(y(160));
                e = d.stateNode;
                switch(d.tag){
                    case 5:
                        f = !1;
                        break a;
                    case 3:
                        e = e.containerInfo;
                        f = !0;
                        break a;
                    case 4:
                        e = e.containerInfo;
                        f = !0;
                        break a;
                }
                d = d.return;
            }
            d = !0;
        }
        if (5 === c.tag || 6 === c.tag) {
            a: for(var g = a232, h = c, k = h;;)if (bj(g, k), null !== k.child && 4 !== k.tag) k.child.return = k, k = k.child;
            else {
                if (k === h) break a;
                for(; null === k.sibling;){
                    if (null === k.return || k.return === h) break a;
                    k = k.return;
                }
                k.sibling.return = k.return;
                k = k.sibling;
            }
            f ? (g = e, h = c.stateNode, 8 === g.nodeType ? g.parentNode.removeChild(h) : g.removeChild(h)) : e.removeChild(c.stateNode);
        } else if (4 === c.tag) {
            if (null !== c.child) {
                e = c.stateNode.containerInfo;
                f = !0;
                c.child.return = c;
                c = c.child;
                continue;
            }
        } else if (bj(a232, c), null !== c.child) {
            c.child.return = c;
            c = c.child;
            continue;
        }
        if (c === b) break;
        for(; null === c.sibling;){
            if (null === c.return || c.return === b) return;
            c = c.return;
            4 === c.tag && (d = !1);
        }
        c.sibling.return = c.return;
        c = c.sibling;
    }
}
function ij(a233, b) {
    switch(b.tag){
        case 0:
        case 11:
        case 14:
        case 15:
        case 22:
            var c = b.updateQueue;
            c = null !== c ? c.lastEffect : null;
            if (null !== c) {
                var d = c = c.next;
                do 3 === (d.tag & 3) && (a233 = d.destroy, d.destroy = void 0, void 0 !== a233 && a233()), d = d.next;
                while (d !== c)
            }
            return;
        case 1:
            return;
        case 5:
            c = b.stateNode;
            if (null != c) {
                d = b.memoizedProps;
                var e = null !== a233 ? a233.memoizedProps : d;
                a233 = b.type;
                var f = b.updateQueue;
                b.updateQueue = null;
                if (null !== f) {
                    c[xf] = d;
                    "input" === a233 && "radio" === d.type && null != d.name && $a(c, d);
                    wb(a233, e);
                    b = wb(a233, d);
                    for(e = 0; e < f.length; e += 2){
                        var g = f[e], h = f[e + 1];
                        "style" === g ? tb(c, h) : "dangerouslySetInnerHTML" === g ? ob(c, h) : "children" === g ? pb(c, h) : qa(c, g, h, b);
                    }
                    switch(a233){
                        case "input":
                            ab(c, d);
                            break;
                        case "textarea":
                            ib(c, d);
                            break;
                        case "select":
                            a233 = c._wrapperState.wasMultiple, c._wrapperState.wasMultiple = !!d.multiple, f = d.value, null != f ? fb(c, !!d.multiple, f, !1) : a233 !== !!d.multiple && (null != d.defaultValue ? fb(c, !!d.multiple, d.defaultValue, !0) : fb(c, !!d.multiple, d.multiple ? [] : "", !1));
                    }
                }
            }
            return;
        case 6:
            if (null === b.stateNode) throw Error(y(162));
            b.stateNode.nodeValue = b.memoizedProps;
            return;
        case 3:
            c = b.stateNode;
            c.hydrate && (c.hydrate = !1, Cc(c.containerInfo));
            return;
        case 12:
            return;
        case 13:
            null !== b.memoizedState && (jj = O(), aj(b.child, !0));
            kj(b);
            return;
        case 19:
            kj(b);
            return;
        case 17:
            return;
        case 23:
        case 24:
            aj(b, null !== b.memoizedState);
            return;
    }
    throw Error(y(163));
}
function kj(a234) {
    var b7 = a234.updateQueue;
    if (null !== b7) {
        a234.updateQueue = null;
        var c = a234.stateNode;
        null === c && (c = a234.stateNode = new Ui);
        b7.forEach(function(b) {
            var d = lj.bind(null, a234, b);
            c.has(b) || (c.add(b), b.then(d, d));
        });
    }
}
function mj(a235, b) {
    return null !== a235 && (a235 = a235.memoizedState, null === a235 || null !== a235.dehydrated) ? (b = b.memoizedState, null !== b && null === b.dehydrated) : !1;
}
var nj = Math.ceil, oj = ra.ReactCurrentDispatcher, pj = ra.ReactCurrentOwner, X = 0, U = null, Y = null, W = 0, qj = 0, rj = Bf(0), V = 0, sj = null, tj = 0, Dg = 0, Hi = 0, uj = 0, vj = null, jj = 0, Ji = Infinity;
function wj() {
    Ji = O() + 500;
}
var Z = null, Qi = !1, Ri = null, Ti = null, xj = !1, yj = null, zj = 90, Aj = [], Bj = [], Cj = null, Dj = 0, Ej = null, Fj = -1, Gj = 0, Hj = 0, Ij = null, Jj = !1;
function Hg() {
    return 0 !== (X & 48) ? O() : -1 !== Fj ? Fj : Fj = O();
}
function Ig(a236) {
    a236 = a236.mode;
    if (0 === (a236 & 2)) return 1;
    if (0 === (a236 & 4)) return 99 === eg() ? 1 : 2;
    0 === Gj && (Gj = tj);
    if (0 !== kg.transition) {
        0 !== Hj && (Hj = null !== vj ? vj.pendingLanes : 0);
        a236 = Gj;
        var b = 4186112 & ~Hj;
        b &= -b;
        0 === b && (a236 = 4186112 & ~a236, b = a236 & -a236, 0 === b && (b = 8192));
        return b;
    }
    a236 = eg();
    0 !== (X & 4) && 98 === a236 ? a236 = Xc(12, Gj) : (a236 = Sc(a236), a236 = Xc(a236, Gj));
    return a236;
}
function Jg(a237, b, c) {
    if (50 < Dj) throw Dj = 0, Ej = null, Error(y(185));
    a237 = Kj(a237, b);
    if (null === a237) return null;
    $c(a237, b, c);
    a237 === U && (Hi |= b, 4 === V && Ii(a237, W));
    var d = eg();
    1 === b ? 0 !== (X & 8) && 0 === (X & 48) ? Lj(a237) : (Mj(a237, c), 0 === X && (wj(), ig())) : (0 === (X & 4) || 98 !== d && 99 !== d || (null === Cj ? Cj = new Set([
        a237
    ]) : Cj.add(a237)), Mj(a237, c));
    vj = a237;
}
function Kj(a238, b) {
    a238.lanes |= b;
    var c = a238.alternate;
    null !== c && (c.lanes |= b);
    c = a238;
    for(a238 = a238.return; null !== a238;)a238.childLanes |= b, c = a238.alternate, null !== c && (c.childLanes |= b), c = a238, a238 = a238.return;
    return 3 === c.tag ? c.stateNode : null;
}
function Mj(a239, b) {
    for(var c = a239.callbackNode, d = a239.suspendedLanes, e = a239.pingedLanes, f = a239.expirationTimes, g = a239.pendingLanes; 0 < g;){
        var h = 31 - Vc(g), k = 1 << h, l = f[h];
        if (-1 === l) {
            if (0 === (k & d) || 0 !== (k & e)) {
                l = b;
                Rc(k);
                var n = F;
                f[h] = 10 <= n ? l + 250 : 6 <= n ? l + 5E3 : -1;
            }
        } else l <= b && (a239.expiredLanes |= k);
        g &= ~k;
    }
    d = Uc(a239, a239 === U ? W : 0);
    b = F;
    if (0 === d) null !== c && (c !== Zf && Pf(c), a239.callbackNode = null, a239.callbackPriority = 0);
    else {
        if (null !== c) {
            if (a239.callbackPriority === b) return;
            c !== Zf && Pf(c);
        }
        15 === b ? (c = Lj.bind(null, a239), null === ag ? (ag = [
            c
        ], bg = Of(Uf, jg)) : ag.push(c), c = Zf) : 14 === b ? c = hg(99, Lj.bind(null, a239)) : (c = Tc(b), c = hg(c, Nj.bind(null, a239)));
        a239.callbackPriority = b;
        a239.callbackNode = c;
    }
}
function Nj(a240) {
    Fj = -1;
    Hj = Gj = 0;
    if (0 !== (X & 48)) throw Error(y(327));
    var b = a240.callbackNode;
    if (Oj() && a240.callbackNode !== b) return null;
    var c = Uc(a240, a240 === U ? W : 0);
    if (0 === c) return null;
    var d = c;
    var e = X;
    X |= 16;
    var f = Pj();
    if (U !== a240 || W !== d) wj(), Qj(a240, d);
    for(;;)try {
        Rj();
        break;
    } catch (h) {
        Sj(a240, h);
    }
    qg();
    oj.current = f;
    X = e;
    null !== Y ? d = 0 : (U = null, W = 0, d = V);
    if (0 !== (tj & Hi)) Qj(a240, 0);
    else if (0 !== d) {
        2 === d && (X |= 64, a240.hydrate && (a240.hydrate = !1, qf(a240.containerInfo)), c = Wc(a240), 0 !== c && (d = Tj(a240, c)));
        if (1 === d) throw b = sj, Qj(a240, 0), Ii(a240, c), Mj(a240, O()), b;
        a240.finishedWork = a240.current.alternate;
        a240.finishedLanes = c;
        switch(d){
            case 0:
            case 1:
                throw Error(y(345));
            case 2:
                Uj(a240);
                break;
            case 3:
                Ii(a240, c);
                if ((c & 62914560) === c && (d = jj + 500 - O(), 10 < d)) {
                    if (0 !== Uc(a240, 0)) break;
                    e = a240.suspendedLanes;
                    if ((e & c) !== c) {
                        Hg();
                        a240.pingedLanes |= a240.suspendedLanes & e;
                        break;
                    }
                    a240.timeoutHandle = of(Uj.bind(null, a240), d);
                    break;
                }
                Uj(a240);
                break;
            case 4:
                Ii(a240, c);
                if ((c & 4186112) === c) break;
                d = a240.eventTimes;
                for(e = -1; 0 < c;){
                    var g = 31 - Vc(c);
                    f = 1 << g;
                    g = d[g];
                    g > e && (e = g);
                    c &= ~f;
                }
                c = e;
                c = O() - c;
                c = (120 > c ? 120 : 480 > c ? 480 : 1080 > c ? 1080 : 1920 > c ? 1920 : 3E3 > c ? 3E3 : 4320 > c ? 4320 : 1960 * nj(c / 1960)) - c;
                if (10 < c) {
                    a240.timeoutHandle = of(Uj.bind(null, a240), c);
                    break;
                }
                Uj(a240);
                break;
            case 5:
                Uj(a240);
                break;
            default:
                throw Error(y(329));
        }
    }
    Mj(a240, O());
    return a240.callbackNode === b ? Nj.bind(null, a240) : null;
}
function Ii(a241, b) {
    b &= ~uj;
    b &= ~Hi;
    a241.suspendedLanes |= b;
    a241.pingedLanes &= ~b;
    for(a241 = a241.expirationTimes; 0 < b;){
        var c = 31 - Vc(b), d = 1 << c;
        a241[c] = -1;
        b &= ~d;
    }
}
function Lj(a242) {
    if (0 !== (X & 48)) throw Error(y(327));
    Oj();
    if (a242 === U && 0 !== (a242.expiredLanes & W)) {
        var b = W;
        var c = Tj(a242, b);
        0 !== (tj & Hi) && (b = Uc(a242, b), c = Tj(a242, b));
    } else b = Uc(a242, 0), c = Tj(a242, b);
    0 !== a242.tag && 2 === c && (X |= 64, a242.hydrate && (a242.hydrate = !1, qf(a242.containerInfo)), b = Wc(a242), 0 !== b && (c = Tj(a242, b)));
    if (1 === c) throw c = sj, Qj(a242, 0), Ii(a242, b), Mj(a242, O()), c;
    a242.finishedWork = a242.current.alternate;
    a242.finishedLanes = b;
    Uj(a242);
    Mj(a242, O());
    return null;
}
function Vj() {
    if (null !== Cj) {
        var a243 = Cj;
        Cj = null;
        a243.forEach(function(a244) {
            a244.expiredLanes |= 24 & a244.pendingLanes;
            Mj(a244, O());
        });
    }
    ig();
}
function Wj(a245, b) {
    var c = X;
    X |= 1;
    try {
        return a245(b);
    } finally{
        X = c, 0 === X && (wj(), ig());
    }
}
function Xj(a246, b) {
    var c = X;
    X &= -2;
    X |= 8;
    try {
        return a246(b);
    } finally{
        X = c, 0 === X && (wj(), ig());
    }
}
function ni(a, b) {
    I(rj, qj);
    qj |= b;
    tj |= b;
}
function Ki() {
    qj = rj.current;
    H(rj);
}
function Qj(a247, b) {
    a247.finishedWork = null;
    a247.finishedLanes = 0;
    var c = a247.timeoutHandle;
    -1 !== c && (a247.timeoutHandle = -1, pf(c));
    if (null !== Y) for(c = Y.return; null !== c;){
        var d = c;
        switch(d.tag){
            case 1:
                d = d.type.childContextTypes;
                null !== d && void 0 !== d && Gf();
                break;
            case 3:
                fh();
                H(N);
                H(M);
                uh();
                break;
            case 5:
                hh(d);
                break;
            case 4:
                fh();
                break;
            case 13:
                H(P);
                break;
            case 19:
                H(P);
                break;
            case 10:
                rg(d);
                break;
            case 23:
            case 24:
                Ki();
        }
        c = c.return;
    }
    U = a247;
    Y = Tg(a247.current, null);
    W = qj = tj = b;
    V = 0;
    sj = null;
    uj = Hi = Dg = 0;
}
function Sj(a248, b) {
    do {
        var c = Y;
        try {
            qg();
            vh.current = Gh;
            if (yh) {
                for(var d = R.memoizedState; null !== d;){
                    var e = d.queue;
                    null !== e && (e.pending = null);
                    d = d.next;
                }
                yh = !1;
            }
            xh = 0;
            T = S = R = null;
            zh = !1;
            pj.current = null;
            if (null === c || null === c.return) {
                V = 1;
                sj = b;
                Y = null;
                break;
            }
            a: {
                var f = a248, g = c.return, h = c, k = b;
                b = W;
                h.flags |= 2048;
                h.firstEffect = h.lastEffect = null;
                if (null !== k && "object" === typeof k && "function" === typeof k.then) {
                    var l = k;
                    if (0 === (h.mode & 2)) {
                        var n = h.alternate;
                        n ? (h.updateQueue = n.updateQueue, h.memoizedState = n.memoizedState, h.lanes = n.lanes) : (h.updateQueue = null, h.memoizedState = null);
                    }
                    var A = 0 !== (P.current & 1), p = g;
                    do {
                        var C;
                        if (C = 13 === p.tag) {
                            var x = p.memoizedState;
                            if (null !== x) C = null !== x.dehydrated ? !0 : !1;
                            else {
                                var w = p.memoizedProps;
                                C = void 0 === w.fallback ? !1 : !0 !== w.unstable_avoidThisFallback ? !0 : A ? !1 : !0;
                            }
                        }
                        if (C) {
                            var z = p.updateQueue;
                            if (null === z) {
                                var u = new Set;
                                u.add(l);
                                p.updateQueue = u;
                            } else z.add(l);
                            if (0 === (p.mode & 2)) {
                                p.flags |= 64;
                                h.flags |= 16384;
                                h.flags &= -2981;
                                if (1 === h.tag) {
                                    if (null === h.alternate) h.tag = 17;
                                    else {
                                        var t = zg(-1, 1);
                                        t.tag = 2;
                                        Ag(h, t);
                                    }
                                }
                                h.lanes |= 1;
                                break a;
                            }
                            k = void 0;
                            h = b;
                            var q = f.pingCache;
                            null === q ? (q = f.pingCache = new Oi, k = new Set, q.set(l, k)) : (k = q.get(l), void 0 === k && (k = new Set, q.set(l, k)));
                            if (!k.has(h)) {
                                k.add(h);
                                var v = Yj.bind(null, f, l, h);
                                l.then(v, v);
                            }
                            p.flags |= 4096;
                            p.lanes = b;
                            break a;
                        }
                        p = p.return;
                    }while (null !== p)
                    k = Error((Ra(h.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.");
                }
                5 !== V && (V = 2);
                k = Mi(k, h);
                p = g;
                do {
                    switch(p.tag){
                        case 3:
                            f = k;
                            p.flags |= 4096;
                            b &= -b;
                            p.lanes |= b;
                            var J = Pi(p, f, b);
                            Bg(p, J);
                            break a;
                        case 1:
                            f = k;
                            var K = p.type, Q = p.stateNode;
                            if (0 === (p.flags & 64) && ("function" === typeof K.getDerivedStateFromError || null !== Q && "function" === typeof Q.componentDidCatch && (null === Ti || !Ti.has(Q)))) {
                                p.flags |= 4096;
                                b &= -b;
                                p.lanes |= b;
                                var L = Si(p, f, b);
                                Bg(p, L);
                                break a;
                            }
                    }
                    p = p.return;
                }while (null !== p)
            }
            Zj(c);
        } catch (va) {
            b = va;
            Y === c && null !== c && (Y = c = c.return);
            continue;
        }
        break;
    }while (1)
}
function Pj() {
    var a249 = oj.current;
    oj.current = Gh;
    return null === a249 ? Gh : a249;
}
function Tj(a250, b) {
    var c = X;
    X |= 16;
    var d = Pj();
    U === a250 && W === b || Qj(a250, b);
    for(;;)try {
        ak();
        break;
    } catch (e) {
        Sj(a250, e);
    }
    qg();
    X = c;
    oj.current = d;
    if (null !== Y) throw Error(y(261));
    U = null;
    W = 0;
    return V;
}
function ak() {
    for(; null !== Y;)bk(Y);
}
function Rj() {
    for(; null !== Y && !Qf();)bk(Y);
}
function bk(a251) {
    var b = ck(a251.alternate, a251, qj);
    a251.memoizedProps = a251.pendingProps;
    null === b ? Zj(a251) : Y = b;
    pj.current = null;
}
function Zj(a252) {
    var b = a252;
    do {
        var c = b.alternate;
        a252 = b.return;
        if (0 === (b.flags & 2048)) {
            c = Gi(c, b, qj);
            if (null !== c) {
                Y = c;
                return;
            }
            c = b;
            if (24 !== c.tag && 23 !== c.tag || null === c.memoizedState || 0 !== (qj & 1073741824) || 0 === (c.mode & 4)) {
                for(var d = 0, e = c.child; null !== e;)d |= e.lanes | e.childLanes, e = e.sibling;
                c.childLanes = d;
            }
            null !== a252 && 0 === (a252.flags & 2048) && (null === a252.firstEffect && (a252.firstEffect = b.firstEffect), null !== b.lastEffect && (null !== a252.lastEffect && (a252.lastEffect.nextEffect = b.firstEffect), a252.lastEffect = b.lastEffect), 1 < b.flags && (null !== a252.lastEffect ? a252.lastEffect.nextEffect = b : a252.firstEffect = b, a252.lastEffect = b));
        } else {
            c = Li(b);
            if (null !== c) {
                c.flags &= 2047;
                Y = c;
                return;
            }
            null !== a252 && (a252.firstEffect = a252.lastEffect = null, a252.flags |= 2048);
        }
        b = b.sibling;
        if (null !== b) {
            Y = b;
            return;
        }
        Y = b = a252;
    }while (null !== b)
    0 === V && (V = 5);
}
function Uj(a253) {
    var b = eg();
    gg(99, dk.bind(null, a253, b));
    return null;
}
function dk(a254, b) {
    do Oj();
    while (null !== yj)
    if (0 !== (X & 48)) throw Error(y(327));
    var c = a254.finishedWork;
    if (null === c) return null;
    a254.finishedWork = null;
    a254.finishedLanes = 0;
    if (c === a254.current) throw Error(y(177));
    a254.callbackNode = null;
    var d = c.lanes | c.childLanes, e = d, f = a254.pendingLanes & ~e;
    a254.pendingLanes = e;
    a254.suspendedLanes = 0;
    a254.pingedLanes = 0;
    a254.expiredLanes &= e;
    a254.mutableReadLanes &= e;
    a254.entangledLanes &= e;
    e = a254.entanglements;
    for(var g = a254.eventTimes, h = a254.expirationTimes; 0 < f;){
        var k = 31 - Vc(f), l = 1 << k;
        e[k] = 0;
        g[k] = -1;
        h[k] = -1;
        f &= ~l;
    }
    null !== Cj && 0 === (d & 24) && Cj.has(a254) && Cj.delete(a254);
    a254 === U && (Y = U = null, W = 0);
    1 < c.flags ? null !== c.lastEffect ? (c.lastEffect.nextEffect = c, d = c.firstEffect) : d = c : d = c.firstEffect;
    if (null !== d) {
        e = X;
        X |= 32;
        pj.current = null;
        kf = fd;
        g = Ne();
        if (Oe(g)) {
            if ("selectionStart" in g) h = {
                start: g.selectionStart,
                end: g.selectionEnd
            };
            else a: if (h = (h = g.ownerDocument) && h.defaultView || window, (l = h.getSelection && h.getSelection()) && 0 !== l.rangeCount) {
                h = l.anchorNode;
                f = l.anchorOffset;
                k = l.focusNode;
                l = l.focusOffset;
                try {
                    h.nodeType, k.nodeType;
                } catch (va) {
                    h = null;
                    break a;
                }
                var n = 0, A = -1, p = -1, C = 0, x = 0, w = g, z = null;
                b: for(;;){
                    for(var u;;){
                        w !== h || 0 !== f && 3 !== w.nodeType || (A = n + f);
                        w !== k || 0 !== l && 3 !== w.nodeType || (p = n + l);
                        3 === w.nodeType && (n += w.nodeValue.length);
                        if (null === (u = w.firstChild)) break;
                        z = w;
                        w = u;
                    }
                    for(;;){
                        if (w === g) break b;
                        z === h && ++C === f && (A = n);
                        z === k && ++x === l && (p = n);
                        if (null !== (u = w.nextSibling)) break;
                        w = z;
                        z = w.parentNode;
                    }
                    w = u;
                }
                h = -1 === A || -1 === p ? null : {
                    start: A,
                    end: p
                };
            } else h = null;
            h = h || {
                start: 0,
                end: 0
            };
        } else h = null;
        lf = {
            focusedElem: g,
            selectionRange: h
        };
        fd = !1;
        Ij = null;
        Jj = !1;
        Z = d;
        do try {
            ek();
        } catch (va) {
            if (null === Z) throw Error(y(330));
            Wi(Z, va);
            Z = Z.nextEffect;
        }
        while (null !== Z)
        Ij = null;
        Z = d;
        do try {
            for(g = a254; null !== Z;){
                var t = Z.flags;
                t & 16 && pb(Z.stateNode, "");
                if (t & 128) {
                    var q = Z.alternate;
                    if (null !== q) {
                        var v = q.ref;
                        null !== v && ("function" === typeof v ? v(null) : v.current = null);
                    }
                }
                switch(t & 1038){
                    case 2:
                        fj(Z);
                        Z.flags &= -3;
                        break;
                    case 6:
                        fj(Z);
                        Z.flags &= -3;
                        ij(Z.alternate, Z);
                        break;
                    case 1024:
                        Z.flags &= -1025;
                        break;
                    case 1028:
                        Z.flags &= -1025;
                        ij(Z.alternate, Z);
                        break;
                    case 4:
                        ij(Z.alternate, Z);
                        break;
                    case 8:
                        h = Z;
                        cj(g, h);
                        var J = h.alternate;
                        dj(h);
                        null !== J && dj(J);
                }
                Z = Z.nextEffect;
            }
        } catch (va1) {
            if (null === Z) throw Error(y(330));
            Wi(Z, va1);
            Z = Z.nextEffect;
        }
        while (null !== Z)
        v = lf;
        q = Ne();
        t = v.focusedElem;
        g = v.selectionRange;
        if (q !== t && t && t.ownerDocument && Me(t.ownerDocument.documentElement, t)) {
            null !== g && Oe(t) && (q = g.start, v = g.end, void 0 === v && (v = q), "selectionStart" in t ? (t.selectionStart = q, t.selectionEnd = Math.min(v, t.value.length)) : (v = (q = t.ownerDocument || document) && q.defaultView || window, v.getSelection && (v = v.getSelection(), h = t.textContent.length, J = Math.min(g.start, h), g = void 0 === g.end ? J : Math.min(g.end, h), !v.extend && J > g && (h = g, g = J, J = h), h = Le(t, J), f = Le(t, g), h && f && (1 !== v.rangeCount || v.anchorNode !== h.node || v.anchorOffset !== h.offset || v.focusNode !== f.node || v.focusOffset !== f.offset) && (q = q.createRange(), q.setStart(h.node, h.offset), v.removeAllRanges(), J > g ? (v.addRange(q), v.extend(f.node, f.offset)) : (q.setEnd(f.node, f.offset), v.addRange(q))))));
            q = [];
            for(v = t; v = v.parentNode;)1 === v.nodeType && q.push({
                element: v,
                left: v.scrollLeft,
                top: v.scrollTop
            });
            "function" === typeof t.focus && t.focus();
            for(t = 0; t < q.length; t++)v = q[t], v.element.scrollLeft = v.left, v.element.scrollTop = v.top;
        }
        fd = !!kf;
        lf = kf = null;
        a254.current = c;
        Z = d;
        do try {
            for(t = a254; null !== Z;){
                var K = Z.flags;
                K & 36 && Yi(t, Z.alternate, Z);
                if (K & 128) {
                    q = void 0;
                    var Q = Z.ref;
                    if (null !== Q) {
                        var L = Z.stateNode;
                        switch(Z.tag){
                            case 5:
                                q = L;
                                break;
                            default:
                                q = L;
                        }
                        "function" === typeof Q ? Q(q) : Q.current = q;
                    }
                }
                Z = Z.nextEffect;
            }
        } catch (va2) {
            if (null === Z) throw Error(y(330));
            Wi(Z, va2);
            Z = Z.nextEffect;
        }
        while (null !== Z)
        Z = null;
        $f();
        X = e;
    } else a254.current = c;
    if (xj) xj = !1, yj = a254, zj = b;
    else for(Z = d; null !== Z;)b = Z.nextEffect, Z.nextEffect = null, Z.flags & 8 && (K = Z, K.sibling = null, K.stateNode = null), Z = b;
    d = a254.pendingLanes;
    0 === d && (Ti = null);
    1 === d ? a254 === Ej ? Dj++ : (Dj = 0, Ej = a254) : Dj = 0;
    c = c.stateNode;
    if (Mf && "function" === typeof Mf.onCommitFiberRoot) try {
        Mf.onCommitFiberRoot(Lf, c, void 0, 64 === (c.current.flags & 64));
    } catch (va) {}
    Mj(a254, O());
    if (Qi) throw Qi = !1, a254 = Ri, Ri = null, a254;
    if (0 !== (X & 8)) return null;
    ig();
    return null;
}
function ek() {
    for(; null !== Z;){
        var a255 = Z.alternate;
        Jj || null === Ij || (0 !== (Z.flags & 8) ? dc(Z, Ij) && (Jj = !0) : 13 === Z.tag && mj(a255, Z) && dc(Z, Ij) && (Jj = !0));
        var b = Z.flags;
        0 !== (b & 256) && Xi(a255, Z);
        0 === (b & 512) || xj || (xj = !0, hg(97, function() {
            Oj();
            return null;
        }));
        Z = Z.nextEffect;
    }
}
function Oj() {
    if (90 !== zj) {
        var a256 = 97 < zj ? 97 : zj;
        zj = 90;
        return gg(a256, fk);
    }
    return !1;
}
function $i(a257, b) {
    Aj.push(b, a257);
    xj || (xj = !0, hg(97, function() {
        Oj();
        return null;
    }));
}
function Zi(a258, b) {
    Bj.push(b, a258);
    xj || (xj = !0, hg(97, function() {
        Oj();
        return null;
    }));
}
function fk() {
    if (null === yj) return !1;
    var a259 = yj;
    yj = null;
    if (0 !== (X & 48)) throw Error(y(331));
    var b = X;
    X |= 32;
    var c = Bj;
    Bj = [];
    for(var d = 0; d < c.length; d += 2){
        var e = c[d], f = c[d + 1], g = e.destroy;
        e.destroy = void 0;
        if ("function" === typeof g) try {
            g();
        } catch (k) {
            if (null === f) throw Error(y(330));
            Wi(f, k);
        }
    }
    c = Aj;
    Aj = [];
    for(d = 0; d < c.length; d += 2){
        e = c[d];
        f = c[d + 1];
        try {
            var h = e.create;
            e.destroy = h();
        } catch (k) {
            if (null === f) throw Error(y(330));
            Wi(f, k);
        }
    }
    for(h = a259.current.firstEffect; null !== h;)a259 = h.nextEffect, h.nextEffect = null, h.flags & 8 && (h.sibling = null, h.stateNode = null), h = a259;
    X = b;
    ig();
    return !0;
}
function gk(a260, b, c) {
    b = Mi(c, b);
    b = Pi(a260, b, 1);
    Ag(a260, b);
    b = Hg();
    a260 = Kj(a260, 1);
    null !== a260 && ($c(a260, 1, b), Mj(a260, b));
}
function Wi(a261, b) {
    if (3 === a261.tag) gk(a261, a261, b);
    else for(var c = a261.return; null !== c;){
        if (3 === c.tag) {
            gk(c, a261, b);
            break;
        } else if (1 === c.tag) {
            var d = c.stateNode;
            if ("function" === typeof c.type.getDerivedStateFromError || "function" === typeof d.componentDidCatch && (null === Ti || !Ti.has(d))) {
                a261 = Mi(b, a261);
                var e = Si(c, a261, 1);
                Ag(c, e);
                e = Hg();
                c = Kj(c, 1);
                if (null !== c) $c(c, 1, e), Mj(c, e);
                else if ("function" === typeof d.componentDidCatch && (null === Ti || !Ti.has(d))) try {
                    d.componentDidCatch(b, a261);
                } catch (f) {}
                break;
            }
        }
        c = c.return;
    }
}
function Yj(a262, b, c) {
    var d = a262.pingCache;
    null !== d && d.delete(b);
    b = Hg();
    a262.pingedLanes |= a262.suspendedLanes & c;
    U === a262 && (W & c) === c && (4 === V || 3 === V && (W & 62914560) === W && 500 > O() - jj ? Qj(a262, 0) : uj |= c);
    Mj(a262, b);
}
function lj(a263, b) {
    var c = a263.stateNode;
    null !== c && c.delete(b);
    b = 0;
    0 === b && (b = a263.mode, 0 === (b & 2) ? b = 1 : 0 === (b & 4) ? b = 99 === eg() ? 1 : 2 : (0 === Gj && (Gj = tj), b = Yc(62914560 & ~Gj), 0 === b && (b = 4194304)));
    c = Hg();
    a263 = Kj(a263, b);
    null !== a263 && ($c(a263, b, c), Mj(a263, c));
}
var ck;
ck = function ck(a264, b, c) {
    var d = b.lanes;
    if (null !== a264) {
        if (a264.memoizedProps !== b.pendingProps || N.current) ug = !0;
        else if (0 !== (c & d)) ug = 0 !== (a264.flags & 16384) ? !0 : !1;
        else {
            ug = !1;
            switch(b.tag){
                case 3:
                    ri(b);
                    sh();
                    break;
                case 5:
                    gh(b);
                    break;
                case 1:
                    Ff(b.type) && Jf(b);
                    break;
                case 4:
                    eh(b, b.stateNode.containerInfo);
                    break;
                case 10:
                    d = b.memoizedProps.value;
                    var e = b.type._context;
                    I(mg, e._currentValue);
                    e._currentValue = d;
                    break;
                case 13:
                    if (null !== b.memoizedState) {
                        if (0 !== (c & b.child.childLanes)) return ti(a264, b, c);
                        I(P, P.current & 1);
                        b = hi(a264, b, c);
                        return null !== b ? b.sibling : null;
                    }
                    I(P, P.current & 1);
                    break;
                case 19:
                    d = 0 !== (c & b.childLanes);
                    if (0 !== (a264.flags & 64)) {
                        if (d) return Ai(a264, b, c);
                        b.flags |= 64;
                    }
                    e = b.memoizedState;
                    null !== e && (e.rendering = null, e.tail = null, e.lastEffect = null);
                    I(P, P.current);
                    if (d) break;
                    else return null;
                case 23:
                case 24:
                    return b.lanes = 0, mi(a264, b, c);
            }
            return hi(a264, b, c);
        }
    } else ug = !1;
    b.lanes = 0;
    switch(b.tag){
        case 2:
            d = b.type;
            null !== a264 && (a264.alternate = null, b.alternate = null, b.flags |= 2);
            a264 = b.pendingProps;
            e = Ef(b, M.current);
            tg(b, c);
            e = Ch(null, b, d, a264, e, c);
            b.flags |= 1;
            if ("object" === typeof e && null !== e && "function" === typeof e.render && void 0 === e.$$typeof) {
                b.tag = 1;
                b.memoizedState = null;
                b.updateQueue = null;
                if (Ff(d)) {
                    var f = !0;
                    Jf(b);
                } else f = !1;
                b.memoizedState = null !== e.state && void 0 !== e.state ? e.state : null;
                xg(b);
                var g = d.getDerivedStateFromProps;
                "function" === typeof g && Gg(b, d, g, a264);
                e.updater = Kg;
                b.stateNode = e;
                e._reactInternals = b;
                Og(b, d, a264, c);
                b = qi(null, b, d, !0, f, c);
            } else b.tag = 0, fi(null, b, e, c), b = b.child;
            return b;
        case 16:
            e = b.elementType;
            a: {
                null !== a264 && (a264.alternate = null, b.alternate = null, b.flags |= 2);
                a264 = b.pendingProps;
                f = e._init;
                e = f(e._payload);
                b.type = e;
                f = b.tag = hk(e);
                a264 = lg(e, a264);
                switch(f){
                    case 0:
                        b = li(null, b, e, a264, c);
                        break a;
                    case 1:
                        b = pi(null, b, e, a264, c);
                        break a;
                    case 11:
                        b = gi(null, b, e, a264, c);
                        break a;
                    case 14:
                        b = ii(null, b, e, lg(e.type, a264), d, c);
                        break a;
                }
                throw Error(y(306, e, ""));
            }
            return b;
        case 0:
            return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : lg(d, e), li(a264, b, d, e, c);
        case 1:
            return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : lg(d, e), pi(a264, b, d, e, c);
        case 3:
            ri(b);
            d = b.updateQueue;
            if (null === a264 || null === d) throw Error(y(282));
            d = b.pendingProps;
            e = b.memoizedState;
            e = null !== e ? e.element : null;
            yg(a264, b);
            Cg(b, d, null, c);
            d = b.memoizedState.element;
            if (d === e) sh(), b = hi(a264, b, c);
            else {
                e = b.stateNode;
                if (f = e.hydrate) kh = rf(b.stateNode.containerInfo.firstChild), jh = b, f = lh = !0;
                if (f) {
                    a264 = e.mutableSourceEagerHydrationData;
                    if (null != a264) for(e = 0; e < a264.length; e += 2)f = a264[e], f._workInProgressVersionPrimary = a264[e + 1], th.push(f);
                    c = Zg(b, null, d, c);
                    for(b.child = c; c;)c.flags = c.flags & -3 | 1024, c = c.sibling;
                } else fi(a264, b, d, c), sh();
                b = b.child;
            }
            return b;
        case 5:
            return gh(b), null === a264 && ph(b), d = b.type, e = b.pendingProps, f = null !== a264 ? a264.memoizedProps : null, g = e.children, nf(d, e) ? g = null : null !== f && nf(d, f) && (b.flags |= 16), oi(a264, b), fi(a264, b, g, c), b.child;
        case 6:
            return null === a264 && ph(b), null;
        case 13:
            return ti(a264, b, c);
        case 4:
            return eh(b, b.stateNode.containerInfo), d = b.pendingProps, null === a264 ? b.child = Yg(b, null, d, c) : fi(a264, b, d, c), b.child;
        case 11:
            return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : lg(d, e), gi(a264, b, d, e, c);
        case 7:
            return fi(a264, b, b.pendingProps, c), b.child;
        case 8:
            return fi(a264, b, b.pendingProps.children, c), b.child;
        case 12:
            return fi(a264, b, b.pendingProps.children, c), b.child;
        case 10:
            a: {
                d = b.type._context;
                e = b.pendingProps;
                g = b.memoizedProps;
                f = e.value;
                var h = b.type._context;
                I(mg, h._currentValue);
                h._currentValue = f;
                if (null !== g) {
                    if (h = g.value, f = He(h, f) ? 0 : ("function" === typeof d._calculateChangedBits ? d._calculateChangedBits(h, f) : 1073741823) | 0, 0 === f) {
                        if (g.children === e.children && !N.current) {
                            b = hi(a264, b, c);
                            break a;
                        }
                    } else for(h = b.child, null !== h && (h.return = b); null !== h;){
                        var k = h.dependencies;
                        if (null !== k) {
                            g = h.child;
                            for(var l = k.firstContext; null !== l;){
                                if (l.context === d && 0 !== (l.observedBits & f)) {
                                    1 === h.tag && (l = zg(-1, c & -c), l.tag = 2, Ag(h, l));
                                    h.lanes |= c;
                                    l = h.alternate;
                                    null !== l && (l.lanes |= c);
                                    sg(h.return, c);
                                    k.lanes |= c;
                                    break;
                                }
                                l = l.next;
                            }
                        } else g = 10 === h.tag ? h.type === b.type ? null : h.child : h.child;
                        if (null !== g) g.return = h;
                        else for(g = h; null !== g;){
                            if (g === b) {
                                g = null;
                                break;
                            }
                            h = g.sibling;
                            if (null !== h) {
                                h.return = g.return;
                                g = h;
                                break;
                            }
                            g = g.return;
                        }
                        h = g;
                    }
                }
                fi(a264, b, e.children, c);
                b = b.child;
            }
            return b;
        case 9:
            return e = b.type, f = b.pendingProps, d = f.children, tg(b, c), e = vg(e, f.unstable_observedBits), d = d(e), b.flags |= 1, fi(a264, b, d, c), b.child;
        case 14:
            return e = b.type, f = lg(e, b.pendingProps), f = lg(e.type, f), ii(a264, b, e, f, d, c);
        case 15:
            return ki(a264, b, b.type, b.pendingProps, d, c);
        case 17:
            return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : lg(d, e), null !== a264 && (a264.alternate = null, b.alternate = null, b.flags |= 2), b.tag = 1, Ff(d) ? (a264 = !0, Jf(b)) : a264 = !1, tg(b, c), Mg(b, d, e), Og(b, d, e, c), qi(null, b, d, !0, a264, c);
        case 19:
            return Ai(a264, b, c);
        case 23:
            return mi(a264, b, c);
        case 24:
            return mi(a264, b, c);
    }
    throw Error(y(156, b.tag));
};
function ik(a265, b, c, d) {
    this.tag = a265;
    this.key = c;
    this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
    this.index = 0;
    this.ref = null;
    this.pendingProps = b;
    this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
    this.mode = d;
    this.flags = 0;
    this.lastEffect = this.firstEffect = this.nextEffect = null;
    this.childLanes = this.lanes = 0;
    this.alternate = null;
}
function nh(a266, b, c, d) {
    return new ik(a266, b, c, d);
}
function ji(a267) {
    a267 = a267.prototype;
    return !(!a267 || !a267.isReactComponent);
}
function hk(a268) {
    if ("function" === typeof a268) return ji(a268) ? 1 : 0;
    if (void 0 !== a268 && null !== a268) {
        a268 = a268.$$typeof;
        if (a268 === Aa) return 11;
        if (a268 === Da) return 14;
    }
    return 2;
}
function Tg(a269, b) {
    var c = a269.alternate;
    null === c ? (c = nh(a269.tag, b, a269.key, a269.mode), c.elementType = a269.elementType, c.type = a269.type, c.stateNode = a269.stateNode, c.alternate = a269, a269.alternate = c) : (c.pendingProps = b, c.type = a269.type, c.flags = 0, c.nextEffect = null, c.firstEffect = null, c.lastEffect = null);
    c.childLanes = a269.childLanes;
    c.lanes = a269.lanes;
    c.child = a269.child;
    c.memoizedProps = a269.memoizedProps;
    c.memoizedState = a269.memoizedState;
    c.updateQueue = a269.updateQueue;
    b = a269.dependencies;
    c.dependencies = null === b ? null : {
        lanes: b.lanes,
        firstContext: b.firstContext
    };
    c.sibling = a269.sibling;
    c.index = a269.index;
    c.ref = a269.ref;
    return c;
}
function Vg(a270, b, c, d, e, f) {
    var g = 2;
    d = a270;
    if ("function" === typeof a270) ji(a270) && (g = 1);
    else if ("string" === typeof a270) g = 5;
    else a: switch(a270){
        case ua:
            return Xg(c.children, e, f, b);
        case Ha:
            g = 8;
            e |= 16;
            break;
        case wa:
            g = 8;
            e |= 1;
            break;
        case xa:
            return a270 = nh(12, c, b, e | 8), a270.elementType = xa, a270.type = xa, a270.lanes = f, a270;
        case Ba:
            return a270 = nh(13, c, b, e), a270.type = Ba, a270.elementType = Ba, a270.lanes = f, a270;
        case Ca:
            return a270 = nh(19, c, b, e), a270.elementType = Ca, a270.lanes = f, a270;
        case Ia:
            return vi(c, e, f, b);
        case Ja:
            return a270 = nh(24, c, b, e), a270.elementType = Ja, a270.lanes = f, a270;
        default:
            if ("object" === typeof a270 && null !== a270) switch(a270.$$typeof){
                case ya:
                    g = 10;
                    break a;
                case za:
                    g = 9;
                    break a;
                case Aa:
                    g = 11;
                    break a;
                case Da:
                    g = 14;
                    break a;
                case Ea:
                    g = 16;
                    d = null;
                    break a;
                case Fa:
                    g = 22;
                    break a;
            }
            throw Error(y(130, null == a270 ? a270 : typeof a270 === "undefined" ? "undefined" : _helpers.typeOf(a270), ""));
    }
    b = nh(g, c, b, e);
    b.elementType = a270;
    b.type = d;
    b.lanes = f;
    return b;
}
function Xg(a271, b, c, d) {
    a271 = nh(7, a271, d, b);
    a271.lanes = c;
    return a271;
}
function vi(a272, b, c, d) {
    a272 = nh(23, a272, d, b);
    a272.elementType = Ia;
    a272.lanes = c;
    return a272;
}
function Ug(a273, b, c) {
    a273 = nh(6, a273, null, b);
    a273.lanes = c;
    return a273;
}
function Wg(a274, b, c) {
    b = nh(4, null !== a274.children ? a274.children : [], a274.key, b);
    b.lanes = c;
    b.stateNode = {
        containerInfo: a274.containerInfo,
        pendingChildren: null,
        implementation: a274.implementation
    };
    return b;
}
function jk(a275, b, c) {
    this.tag = b;
    this.containerInfo = a275;
    this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
    this.timeoutHandle = -1;
    this.pendingContext = this.context = null;
    this.hydrate = c;
    this.callbackNode = null;
    this.callbackPriority = 0;
    this.eventTimes = Zc(0);
    this.expirationTimes = Zc(-1);
    this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
    this.entanglements = Zc(0);
    this.mutableSourceEagerHydrationData = null;
}
function kk(a276, b, c) {
    var d = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
    return {
        $$typeof: ta,
        key: null == d ? null : "" + d,
        children: a276,
        containerInfo: b,
        implementation: c
    };
}
function lk(a277, b, c, d) {
    var e = b.current, f = Hg(), g = Ig(e);
    a: if (c) {
        c = c._reactInternals;
        b: {
            if (Zb(c) !== c || 1 !== c.tag) throw Error(y(170));
            var h = c;
            do {
                switch(h.tag){
                    case 3:
                        h = h.stateNode.context;
                        break b;
                    case 1:
                        if (Ff(h.type)) {
                            h = h.stateNode.__reactInternalMemoizedMergedChildContext;
                            break b;
                        }
                }
                h = h.return;
            }while (null !== h)
            throw Error(y(171));
        }
        if (1 === c.tag) {
            var k = c.type;
            if (Ff(k)) {
                c = If(c, k, h);
                break a;
            }
        }
        c = h;
    } else c = Cf;
    null === b.context ? b.context = c : b.pendingContext = c;
    b = zg(f, g);
    b.payload = {
        element: a277
    };
    d = void 0 === d ? null : d;
    null !== d && (b.callback = d);
    Ag(e, b);
    Jg(e, g, f);
    return g;
}
function mk(a278) {
    a278 = a278.current;
    if (!a278.child) return null;
    switch(a278.child.tag){
        case 5:
            return a278.child.stateNode;
        default:
            return a278.child.stateNode;
    }
}
function nk(a279, b) {
    a279 = a279.memoizedState;
    if (null !== a279 && null !== a279.dehydrated) {
        var c = a279.retryLane;
        a279.retryLane = 0 !== c && c < b ? c : b;
    }
}
function ok(a280, b) {
    nk(a280, b);
    (a280 = a280.alternate) && nk(a280, b);
}
function pk() {
    return null;
}
function qk(a281, b, c) {
    var d = null != c && null != c.hydrationOptions && c.hydrationOptions.mutableSources || null;
    c = new jk(a281, b, null != c && !0 === c.hydrate);
    b = nh(3, null, null, 2 === b ? 7 : 1 === b ? 3 : 0);
    c.current = b;
    b.stateNode = c;
    xg(b);
    a281[ff] = c.current;
    cf(8 === a281.nodeType ? a281.parentNode : a281);
    if (d) for(a281 = 0; a281 < d.length; a281++){
        b = d[a281];
        var e = b._getVersion;
        e = e(b._source);
        null == c.mutableSourceEagerHydrationData ? c.mutableSourceEagerHydrationData = [
            b,
            e
        ] : c.mutableSourceEagerHydrationData.push(b, e);
    }
    this._internalRoot = c;
}
qk.prototype.render = function(a282) {
    lk(a282, this._internalRoot, null, null);
};
qk.prototype.unmount = function() {
    var a283 = this._internalRoot, b = a283.containerInfo;
    lk(null, a283, null, function() {
        b[ff] = null;
    });
};
function rk(a284) {
    return !(!a284 || 1 !== a284.nodeType && 9 !== a284.nodeType && 11 !== a284.nodeType && (8 !== a284.nodeType || " react-mount-point-unstable " !== a284.nodeValue));
}
function sk(a285, b) {
    b || (b = a285 ? 9 === a285.nodeType ? a285.documentElement : a285.firstChild : null, b = !(!b || 1 !== b.nodeType || !b.hasAttribute("data-reactroot")));
    if (!b) for(var c; c = a285.lastChild;)a285.removeChild(c);
    return new qk(a285, 0, b ? {
        hydrate: !0
    } : void 0);
}
function tk(a286, b, c, d, e) {
    var f = c._reactRootContainer;
    if (f) {
        var g = f._internalRoot;
        if ("function" === typeof e) {
            var h = e;
            e = function e() {
                var _$a = mk(g);
                h.call(_$a);
            };
        }
        lk(b, g, a286, e);
    } else {
        f = c._reactRootContainer = sk(c, d);
        g = f._internalRoot;
        if ("function" === typeof e) {
            var k = e;
            e = function e() {
                var _$a = mk(g);
                k.call(_$a);
            };
        }
        Xj(function() {
            lk(b, g, a286, e);
        });
    }
    return mk(g);
}
ec = function ec(a287) {
    if (13 === a287.tag) {
        var b = Hg();
        Jg(a287, 4, b);
        ok(a287, 4);
    }
};
fc = function fc(a288) {
    if (13 === a288.tag) {
        var b = Hg();
        Jg(a288, 67108864, b);
        ok(a288, 67108864);
    }
};
gc = function gc(a289) {
    if (13 === a289.tag) {
        var b = Hg(), c = Ig(a289);
        Jg(a289, c, b);
        ok(a289, c);
    }
};
hc = function hc(a, b) {
    return b();
};
yb = function yb(a290, b, c) {
    switch(b){
        case "input":
            ab(a290, c);
            b = c.name;
            if ("radio" === c.type && null != b) {
                for(c = a290; c.parentNode;)c = c.parentNode;
                c = c.querySelectorAll("input[name=" + JSON.stringify("" + b) + '][type="radio"]');
                for(b = 0; b < c.length; b++){
                    var d = c[b];
                    if (d !== a290 && d.form === a290.form) {
                        var e = Db(d);
                        if (!e) throw Error(y(90));
                        Wa(d);
                        ab(d, e);
                    }
                }
            }
            break;
        case "textarea":
            ib(a290, c);
            break;
        case "select":
            b = c.value, null != b && fb(a290, !!c.multiple, b, !1);
    }
};
Gb = Wj;
Hb = function Hb(a291, b, c, d, e) {
    var f = X;
    X |= 4;
    try {
        return gg(98, a291.bind(null, b, c, d, e));
    } finally{
        X = f, 0 === X && (wj(), ig());
    }
};
Ib = function Ib() {
    0 === (X & 49) && (Vj(), Oj());
};
Jb = function Jb(a292, b) {
    var c = X;
    X |= 2;
    try {
        return a292(b);
    } finally{
        X = c, 0 === X && (wj(), ig());
    }
};
function uk(a293, b) {
    var c = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
    if (!rk(b)) throw Error(y(200));
    return kk(a293, b, null, c);
}
var vk = {
    Events: [
        Cb,
        ue,
        Db,
        Eb,
        Fb,
        Oj,
        {
            current: !1
        }
    ]
}, wk = {
    findFiberByHostInstance: wc,
    bundleType: 0,
    version: "17.0.2",
    rendererPackageName: "react-dom"
};
var xk = {
    bundleType: wk.bundleType,
    version: wk.version,
    rendererPackageName: wk.rendererPackageName,
    rendererConfig: wk.rendererConfig,
    overrideHookState: null,
    overrideHookStateDeletePath: null,
    overrideHookStateRenamePath: null,
    overrideProps: null,
    overridePropsDeletePath: null,
    overridePropsRenamePath: null,
    setSuspenseHandler: null,
    scheduleUpdate: null,
    currentDispatcherRef: ra.ReactCurrentDispatcher,
    findHostInstanceByFiber: function findHostInstanceByFiber(a294) {
        a294 = cc(a294);
        return null === a294 ? null : a294.stateNode;
    },
    findFiberByHostInstance: wk.findFiberByHostInstance || pk,
    findHostInstancesForRefresh: null,
    scheduleRefresh: null,
    scheduleRoot: null,
    setRefreshHandler: null,
    getCurrentFiber: null
};
if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
    var yk = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (!yk.isDisabled && yk.supportsFiber) try {
        Lf = yk.inject(xk), Mf = yk;
    } catch (a) {}
}
exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = vk;
exports.createPortal = uk;
exports.findDOMNode = function(a295) {
    if (null == a295) return null;
    if (1 === a295.nodeType) return a295;
    var b = a295._reactInternals;
    if (void 0 === b) {
        if ("function" === typeof a295.render) throw Error(y(188));
        throw Error(y(268, Object.keys(a295)));
    }
    a295 = cc(b);
    a295 = null === a295 ? null : a295.stateNode;
    return a295;
};
exports.flushSync = function(a296, b) {
    var c = X;
    if (0 !== (c & 48)) return a296(b);
    X |= 1;
    try {
        if (a296) return gg(99, a296.bind(null, b));
    } finally{
        X = c, ig();
    }
};
exports.hydrate = function(a297, b, c) {
    if (!rk(b)) throw Error(y(200));
    return tk(null, a297, b, !0, c);
};
exports.render = function(a298, b, c) {
    if (!rk(b)) throw Error(y(200));
    return tk(null, a298, b, !1, c);
};
exports.unmountComponentAtNode = function(a299) {
    if (!rk(a299)) throw Error(y(40));
    return a299._reactRootContainer ? (Xj(function() {
        tk(null, null, a299, !1, function() {
            a299._reactRootContainer = null;
            a299[ff] = null;
        });
    }), !0) : !1;
};
exports.unstable_batchedUpdates = Wj;
exports.unstable_createPortal = function(a300, b) {
    return uk(a300, b, 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null);
};
exports.unstable_renderSubtreeIntoContainer = function(a301, b, c, d) {
    if (!rk(c)) throw Error(y(200));
    if (null == a301 || void 0 === a301._reactInternals) throw Error(y(38));
    return tk(a301, b, c, !1, d);
};
exports.version = "17.0.2";

},{"@swc/helpers":"erO4s","react":"9sfFD","object-assign":"9UC7U","scheduler":"dTJ7n"}],"dTJ7n":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/scheduler.production.min.js');

},{"./cjs/scheduler.production.min.js":"hJfWr"}],"hJfWr":[function(require,module,exports) {
/** @license React v0.20.2
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
var f, g, h, k;
if ("object" === typeof performance && "function" === typeof performance.now) {
    var l = performance;
    exports.unstable_now = function() {
        return l.now();
    };
} else {
    var p = Date, q = p.now();
    exports.unstable_now = function() {
        return p.now() - q;
    };
}
if ("undefined" === typeof window || "function" !== typeof MessageChannel) {
    var t = null, u = null, w = function() {
        if (null !== t) try {
            var a = exports.unstable_now();
            t(!0, a);
            t = null;
        } catch (b) {
            throw setTimeout(w, 0), b;
        }
    };
    f = function(a) {
        null !== t ? setTimeout(f, 0, a) : (t = a, setTimeout(w, 0));
    };
    g = function g(a, b) {
        u = setTimeout(a, b);
    };
    h = function h() {
        clearTimeout(u);
    };
    exports.unstable_shouldYield = function() {
        return !1;
    };
    k = exports.unstable_forceFrameRate = function k() {};
} else {
    var x = window.setTimeout, y = window.clearTimeout;
    if ("undefined" !== typeof console) {
        var z = window.cancelAnimationFrame;
        "function" !== typeof window.requestAnimationFrame && console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
        "function" !== typeof z && console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
    }
    var A = !1, B = null, C = -1, D = 5, E = 0;
    exports.unstable_shouldYield = function() {
        return exports.unstable_now() >= E;
    };
    k = function k() {};
    exports.unstable_forceFrameRate = function(a) {
        0 > a || 125 < a ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : D = 0 < a ? Math.floor(1E3 / a) : 5;
    };
    var F = new MessageChannel, G = F.port2;
    F.port1.onmessage = function() {
        if (null !== B) {
            var a = exports.unstable_now();
            E = a + D;
            try {
                B(!0, a) ? G.postMessage(null) : (A = !1, B = null);
            } catch (b) {
                throw G.postMessage(null), b;
            }
        } else A = !1;
    };
    f = function f(a) {
        B = a;
        A || (A = !0, G.postMessage(null));
    };
    g = function g(a, b) {
        C = x(function() {
            a(exports.unstable_now());
        }, b);
    };
    h = function h() {
        y(C);
        C = -1;
    };
}
function H(a, b) {
    var c = a.length;
    a.push(b);
    a: for(;;){
        var d = c - 1 >>> 1, e = a[d];
        if (void 0 !== e && 0 < I(e, b)) a[d] = b, a[c] = e, c = d;
        else break a;
    }
}
function J(a) {
    a = a[0];
    return void 0 === a ? null : a;
}
function K(a) {
    var b = a[0];
    if (void 0 !== b) {
        var c = a.pop();
        if (c !== b) {
            a[0] = c;
            a: for(var d = 0, e = a.length; d < e;){
                var m = 2 * (d + 1) - 1, n = a[m], v = m + 1, r = a[v];
                if (void 0 !== n && 0 > I(n, c)) void 0 !== r && 0 > I(r, n) ? (a[d] = r, a[v] = c, d = v) : (a[d] = n, a[m] = c, d = m);
                else if (void 0 !== r && 0 > I(r, c)) a[d] = r, a[v] = c, d = v;
                else break a;
            }
        }
        return b;
    }
    return null;
}
function I(a, b) {
    var c = a.sortIndex - b.sortIndex;
    return 0 !== c ? c : a.id - b.id;
}
var L = [], M = [], N = 1, O = null, P = 3, Q = !1, R = !1, S = !1;
function T(a) {
    for(var b = J(M); null !== b;){
        if (null === b.callback) K(M);
        else if (b.startTime <= a) K(M), b.sortIndex = b.expirationTime, H(L, b);
        else break;
        b = J(M);
    }
}
function U(a) {
    S = !1;
    T(a);
    if (!R) {
        if (null !== J(L)) R = !0, f(V);
        else {
            var b = J(M);
            null !== b && g(U, b.startTime - a);
        }
    }
}
function V(a, b) {
    R = !1;
    S && (S = !1, h());
    Q = !0;
    var c = P;
    try {
        T(b);
        for(O = J(L); null !== O && (!(O.expirationTime > b) || a && !exports.unstable_shouldYield());){
            var d = O.callback;
            if ("function" === typeof d) {
                O.callback = null;
                P = O.priorityLevel;
                var e = d(O.expirationTime <= b);
                b = exports.unstable_now();
                "function" === typeof e ? O.callback = e : O === J(L) && K(L);
                T(b);
            } else K(L);
            O = J(L);
        }
        if (null !== O) var m = !0;
        else {
            var n = J(M);
            null !== n && g(U, n.startTime - b);
            m = !1;
        }
        return m;
    } finally{
        O = null, P = c, Q = !1;
    }
}
var W = k;
exports.unstable_IdlePriority = 5;
exports.unstable_ImmediatePriority = 1;
exports.unstable_LowPriority = 4;
exports.unstable_NormalPriority = 3;
exports.unstable_Profiling = null;
exports.unstable_UserBlockingPriority = 2;
exports.unstable_cancelCallback = function(a) {
    a.callback = null;
};
exports.unstable_continueExecution = function() {
    R || Q || (R = !0, f(V));
};
exports.unstable_getCurrentPriorityLevel = function() {
    return P;
};
exports.unstable_getFirstCallbackNode = function() {
    return J(L);
};
exports.unstable_next = function(a) {
    switch(P){
        case 1:
        case 2:
        case 3:
            var b = 3;
            break;
        default:
            b = P;
    }
    var c = P;
    P = b;
    try {
        return a();
    } finally{
        P = c;
    }
};
exports.unstable_pauseExecution = function() {};
exports.unstable_requestPaint = W;
exports.unstable_runWithPriority = function(a, b) {
    switch(a){
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
            break;
        default:
            a = 3;
    }
    var c = P;
    P = a;
    try {
        return b();
    } finally{
        P = c;
    }
};
exports.unstable_scheduleCallback = function(a, b, c) {
    var d = exports.unstable_now();
    "object" === typeof c && null !== c ? (c = c.delay, c = "number" === typeof c && 0 < c ? d + c : d) : c = d;
    switch(a){
        case 1:
            var e = -1;
            break;
        case 2:
            e = 250;
            break;
        case 5:
            e = 1073741823;
            break;
        case 4:
            e = 1E4;
            break;
        default:
            e = 5E3;
    }
    e = c + e;
    a = {
        id: N++,
        callback: b,
        priorityLevel: a,
        startTime: c,
        expirationTime: e,
        sortIndex: -1
    };
    c > d ? (a.sortIndex = c, H(M, a), null === J(L) && a === J(M) && (S ? h() : S = !0, g(U, c - d))) : (a.sortIndex = e, H(L, a), R || Q || (R = !0, f(V)));
    return a;
};
exports.unstable_wrapCallback = function(a) {
    var b = P;
    return function() {
        var c = P;
        P = b;
        try {
            return a.apply(this, arguments);
        } finally{
            P = c;
        }
    };
};

},{}],"12aQH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
/*! UIkit 3.14.0 | https://www.getuikit.com | (c) 2014 - 2022 YOOtheme | MIT License */ (function(global, factory) {
    module.exports = factory();
})(undefined, function() {
    'use strict';
    var _prototype = Object.prototype, hasOwnProperty = _prototype.hasOwnProperty, toString = _prototype.toString;
    function hasOwn(obj, key) {
        return hasOwnProperty.call(obj, key);
    }
    var hyphenateRe = /\B([A-Z])/g;
    var hyphenate = memoize(function(str) {
        return str.replace(hyphenateRe, '-$1').toLowerCase();
    });
    var camelizeRe = /-(\w)/g;
    var camelize = memoize(function(str) {
        return str.replace(camelizeRe, toUpper);
    });
    var ucfirst = memoize(function(str) {
        return str.length ? toUpper(null, str.charAt(0)) + str.slice(1) : '';
    });
    function toUpper(_, c) {
        return c ? c.toUpperCase() : '';
    }
    function startsWith(str, search) {
        return str == null ? void 0 : str.startsWith == null ? void 0 : str.startsWith(search);
    }
    function endsWith(str, search) {
        return str == null ? void 0 : str.endsWith == null ? void 0 : str.endsWith(search);
    }
    function includes(obj, search) {
        return obj == null ? void 0 : obj.includes == null ? void 0 : obj.includes(search);
    }
    function findIndex(array, predicate) {
        return array == null ? void 0 : array.findIndex == null ? void 0 : array.findIndex(predicate);
    }
    var isArray = Array.isArray, toArray = Array.from;
    var assign = Object.assign;
    function isFunction(obj) {
        return typeof obj === 'function';
    }
    function isObject(obj) {
        return obj !== null && typeof obj === 'object';
    }
    function isPlainObject(obj) {
        return toString.call(obj) === '[object Object]';
    }
    function isWindow(obj) {
        return isObject(obj) && obj === obj.window;
    }
    function isDocument(obj) {
        return nodeType(obj) === 9;
    }
    function isNode(obj) {
        return nodeType(obj) >= 1;
    }
    function isElement(obj) {
        return nodeType(obj) === 1;
    }
    function nodeType(obj) {
        return !isWindow(obj) && isObject(obj) && obj.nodeType;
    }
    function isBoolean(value) {
        return typeof value === 'boolean';
    }
    function isString(value) {
        return typeof value === 'string';
    }
    function isNumber(value) {
        return typeof value === 'number';
    }
    function isNumeric(value) {
        return isNumber(value) || isString(value) && !isNaN(value - parseFloat(value));
    }
    function isEmpty(obj) {
        return !(isArray(obj) ? obj.length : isObject(obj) ? Object.keys(obj).length : false);
    }
    function isUndefined(value) {
        return value === void 0;
    }
    function toBoolean(value) {
        return isBoolean(value) ? value : value === 'true' || value === '1' || value === '' ? true : value === 'false' || value === '0' ? false : value;
    }
    function toNumber(value) {
        var number = Number(value);
        return isNaN(number) ? false : number;
    }
    function toFloat(value) {
        return parseFloat(value) || 0;
    }
    function toNode(element) {
        return toNodes(element)[0];
    }
    function toNodes(element) {
        return element && (isNode(element) ? [
            element
        ] : Array.from(element).filter(isNode)) || [];
    }
    function toWindow(element) {
        var _element;
        if (isWindow(element)) return element;
        element = toNode(element);
        var _$document = isDocument(element) ? element : (_element = element) == null ? void 0 : _element.ownerDocument;
        return (_$document == null ? void 0 : _$document.defaultView) || window;
    }
    function isEqual(value, other) {
        return value === other || isObject(value) && isObject(other) && Object.keys(value).length === Object.keys(other).length && each(value, function(val, key) {
            return val === other[key];
        });
    }
    function swap(value, a, b) {
        return value.replace(new RegExp(a + "|" + b, 'g'), function(match) {
            return match === a ? b : a;
        });
    }
    function last(array) {
        return array[array.length - 1];
    }
    function each(obj, cb) {
        for(var key in obj){
            if (false === cb(obj[key], key)) return false;
        }
        return true;
    }
    function sortBy$1(array, prop) {
        return array.slice().sort(function(_ref, _ref2) {
            var tmp = _ref[prop], propA = tmp === void 0 ? 0 : tmp;
            var tmp1 = _ref2[prop], propB = tmp1 === void 0 ? 0 : tmp1;
            return propA > propB ? 1 : propB > propA ? -1 : 0;
        });
    }
    function uniqueBy(array, prop) {
        var seen = new Set();
        return array.filter(function(_ref3) {
            var check = _ref3[prop];
            return seen.has(check) ? false : seen.add(check);
        });
    }
    function clamp(number, min, max) {
        if (min === void 0) min = 0;
        if (max === void 0) max = 1;
        return Math.min(Math.max(toNumber(number) || 0, min), max);
    }
    function noop() {}
    function intersectRect() {
        for(var _len = arguments.length, rects = new Array(_len), _key = 0; _key < _len; _key++)rects[_key] = arguments[_key];
        return [
            [
                'bottom',
                'top'
            ],
            [
                'right',
                'left'
            ]
        ].every(function(_ref4) {
            var _Math, _Math1;
            var __ref4 = _helpers.slicedToArray(_ref4, 2), minProp = __ref4[0], maxProp = __ref4[1];
            return (_Math = Math).min.apply(_Math, _helpers.toConsumableArray(rects.map(function(_ref5) {
                var min = _ref5[minProp];
                return min;
            }))) - (_Math1 = Math).max.apply(_Math1, _helpers.toConsumableArray(rects.map(function(_ref6) {
                var max = _ref6[maxProp];
                return max;
            }))) > 0;
        });
    }
    function pointInRect(point, rect) {
        return point.x <= rect.right && point.x >= rect.left && point.y <= rect.bottom && point.y >= rect.top;
    }
    function ratio(dimensions, prop, value) {
        var aProp = prop === 'width' ? 'height' : 'width';
        var _obj;
        return _obj = {}, _helpers.defineProperty(_obj, aProp, dimensions[prop] ? Math.round(value * dimensions[aProp] / dimensions[prop]) : dimensions[aProp]), _helpers.defineProperty(_obj, prop, value), _obj;
    }
    function contain(dimensions, maxDimensions) {
        dimensions = _helpers.objectSpread({}, dimensions);
        for(var prop in dimensions)dimensions = dimensions[prop] > maxDimensions[prop] ? ratio(dimensions, prop, maxDimensions[prop]) : dimensions;
        return dimensions;
    }
    function cover$1(dimensions, maxDimensions) {
        dimensions = contain(dimensions, maxDimensions);
        for(var prop in dimensions)dimensions = dimensions[prop] < maxDimensions[prop] ? ratio(dimensions, prop, maxDimensions[prop]) : dimensions;
        return dimensions;
    }
    var Dimensions = {
        ratio: ratio,
        contain: contain,
        cover: cover$1
    };
    function getIndex(i, elements, current, finite) {
        if (current === void 0) current = 0;
        if (finite === void 0) finite = false;
        elements = toNodes(elements);
        var length = elements.length;
        if (!length) return -1;
        i = isNumeric(i) ? toNumber(i) : i === 'next' ? current + 1 : i === 'previous' ? current - 1 : elements.indexOf(toNode(i));
        if (finite) return clamp(i, 0, length - 1);
        i %= length;
        return i < 0 ? i + length : i;
    }
    function memoize(fn) {
        var cache = Object.create(null);
        return function(key) {
            return cache[key] || (cache[key] = fn(key));
        };
    }
    var Deferred = function Deferred() {
        var _this = this;
        _helpers.classCallCheck(this, Deferred);
        this.promise = new Promise(function(resolve, reject) {
            _this.reject = reject;
            _this.resolve = resolve;
        });
    };
    function attr1(element, name, value) {
        if (isObject(name)) {
            for(var key in name)attr1(element, key, name[key]);
            return;
        }
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        if (isUndefined(value)) {
            var _toNode;
            return (_toNode = toNode(element)) == null ? void 0 : _toNode.getAttribute(name);
        } else try {
            for(var _iterator = toNodes(element)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var el = _step.value;
                if (isFunction(value)) value = value.call(el, attr1(el, name));
                if (value === null) removeAttr(el, name);
                else el.setAttribute(name, value);
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
    }
    function hasAttr(element1, name) {
        return toNodes(element1).some(function(element) {
            return element.hasAttribute(name);
        });
    }
    function removeAttr(element, name) {
        var elements = toNodes(element);
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined, _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
        try {
            for(var _iterator = name.split(' ')[Symbol.iterator](), _step; !(_iteratorNormalCompletion1 = (_step = _iterator.next()).done); _iteratorNormalCompletion1 = true){
                var attribute = _step.value;
                try {
                    for(var _iterator1 = elements[Symbol.iterator](), _step1; !(_iteratorNormalCompletion = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion = true){
                        var _$element = _step1.value;
                        _$element.removeAttribute(attribute);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator1.return != null) {
                            _iterator1.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        } catch (err) {
            _didIteratorError1 = true;
            _iteratorError1 = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion1 && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError1) {
                    throw _iteratorError1;
                }
            }
        }
    }
    function data1(element, attribute) {
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = [
                attribute,
                "data-" + attribute
            ][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var name = _step.value;
                if (hasAttr(element, name)) return attr1(element, name);
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
    }
    var voidElements = {
        area: true,
        base: true,
        br: true,
        col: true,
        embed: true,
        hr: true,
        img: true,
        input: true,
        keygen: true,
        link: true,
        menuitem: true,
        meta: true,
        param: true,
        source: true,
        track: true,
        wbr: true
    };
    function isVoidElement(element2) {
        return toNodes(element2).some(function(element) {
            return voidElements[element.tagName.toLowerCase()];
        });
    }
    function isVisible(element3) {
        return toNodes(element3).some(function(element) {
            return element.offsetWidth || element.offsetHeight || element.getClientRects().length;
        });
    }
    var selInput = 'input,select,textarea,button';
    function isInput(element4) {
        return toNodes(element4).some(function(element) {
            return matches(element, selInput);
        });
    }
    var selFocusable = selInput + ",a[href],[tabindex]";
    function isFocusable(element) {
        return matches(element, selFocusable);
    }
    function parent1(element) {
        var _toNode;
        return (_toNode = toNode(element)) == null ? void 0 : _toNode.parentElement;
    }
    function filter$1(element5, selector) {
        return toNodes(element5).filter(function(element) {
            return matches(element, selector);
        });
    }
    function matches(element6, selector) {
        return toNodes(element6).some(function(element) {
            return element.matches(selector);
        });
    }
    function closest(element7, selector) {
        if (startsWith(selector, '>')) selector = selector.slice(1);
        return isElement(element7) ? element7.closest(selector) : toNodes(element7).map(function(element) {
            return closest(element, selector);
        }).filter(Boolean);
    }
    function within(element, selector) {
        return isString(selector) ? matches(element, selector) || !!closest(element, selector) : element === selector || toNode(selector).contains(toNode(element));
    }
    function parents(element, selector) {
        var elements = [];
        while(element = parent1(element))if (!selector || matches(element, selector)) elements.push(element);
        return elements;
    }
    function children1(element, selector) {
        element = toNode(element);
        var _$children = element ? toNodes(element.children) : [];
        return selector ? filter$1(_$children, selector) : _$children;
    }
    function index1(element, ref) {
        return ref ? toNodes(element).indexOf(toNode(ref)) : children1(parent1(element)).indexOf(element);
    }
    function query(selector, context) {
        return find(selector, getContext(selector, context));
    }
    function queryAll(selector, context) {
        return findAll(selector, getContext(selector, context));
    }
    function find(selector, context) {
        return toNode(_query(selector, context, 'querySelector'));
    }
    function findAll(selector, context) {
        return toNodes(_query(selector, context, 'querySelectorAll'));
    }
    var contextSelectorRe = /(^|[^\\],)\s*[!>+~-]/;
    var isContextSelector = memoize(function(selector) {
        return selector.match(contextSelectorRe);
    });
    function getContext(selector, context) {
        if (context === void 0) context = document;
        return isString(selector) && isContextSelector(selector) || isDocument(context) ? context : context.ownerDocument;
    }
    var contextSanitizeRe = /([!>+~-])(?=\s+[!>+~-]|\s*$)/g;
    var sanatize = memoize(function(selector) {
        return selector.replace(contextSanitizeRe, '$1 *');
    });
    function _query(selector, context, queryFn) {
        if (context === void 0) context = document;
        if (!selector || !isString(selector)) return selector;
        selector = sanatize(selector);
        if (isContextSelector(selector)) {
            var split = splitSelector(selector);
            selector = '';
            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
            try {
                for(var _iterator = split[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                    var sel = _step.value;
                    var ctx = context;
                    if (sel[0] === '!') {
                        var selectors = sel.substr(1).trim().split(' ');
                        ctx = closest(parent1(context), selectors[0]);
                        sel = selectors.slice(1).join(' ').trim();
                        if (!sel.length && split.length === 1) return ctx;
                    }
                    if (sel[0] === '-') {
                        var selectors1 = sel.substr(1).trim().split(' ');
                        var prev = (ctx || context).previousElementSibling;
                        ctx = matches(prev, sel.substr(1)) ? prev : null;
                        sel = selectors1.slice(1).join(' ');
                    }
                    if (ctx) selector += "" + (selector ? ',' : '') + domPath(ctx) + " " + sel;
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally{
                try {
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                    }
                } finally{
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
            context = document;
        }
        try {
            return context[queryFn](selector);
        } catch (e) {
            return null;
        }
    }
    var selectorRe = /.*?[^\\](?:,|$)/g;
    var splitSelector = memoize(function(selector1) {
        return selector1.match(selectorRe).map(function(selector) {
            return selector.replace(/,$/, '').trim();
        });
    });
    function domPath(element) {
        var names = [];
        while(element.parentNode){
            var id = attr1(element, 'id');
            if (id) {
                names.unshift("#" + escape(id));
                break;
            } else {
                var tagName = element.tagName;
                if (tagName !== 'HTML') tagName += ":nth-child(" + (index1(element) + 1) + ")";
                names.unshift(tagName);
                element = element.parentNode;
            }
        }
        return names.join(' > ');
    }
    function escape(css) {
        return isString(css) ? CSS.escape(css) : '';
    }
    function on() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        var ref = _helpers.slicedToArray(getArgs(args), 5), targets = ref[0], types = ref[1], selector = ref[2], listener = ref[3], tmp = ref[4], useCapture = tmp === void 0 ? false : tmp;
        if (listener.length > 1) listener = detail1(listener);
        if (useCapture != null && useCapture.self) listener = selfFilter(listener);
        if (selector) listener = delegate1(selector, listener);
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined, _iteratorNormalCompletion2 = true, _didIteratorError2 = false, _iteratorError2 = undefined;
        try {
            for(var _iterator = types[Symbol.iterator](), _step; !(_iteratorNormalCompletion2 = (_step = _iterator.next()).done); _iteratorNormalCompletion2 = true){
                var type = _step.value;
                try {
                    for(var _iterator2 = targets[Symbol.iterator](), _step2; !(_iteratorNormalCompletion = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion = true){
                        var target = _step2.value;
                        target.addEventListener(type, listener, useCapture);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator2.return != null) {
                            _iterator2.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion2 && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError2) {
                    throw _iteratorError2;
                }
            }
        }
        return function() {
            return off(targets, types, listener, useCapture);
        };
    }
    function off() {
        for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++)args[_key2] = arguments[_key2];
        var ref = _helpers.slicedToArray(getArgs(args), 5), targets = ref[0], types = ref[1], listener = ref[3], tmp = ref[4], useCapture = tmp === void 0 ? false : tmp;
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined, _iteratorNormalCompletion3 = true, _didIteratorError3 = false, _iteratorError3 = undefined;
        try {
            for(var _iterator = types[Symbol.iterator](), _step; !(_iteratorNormalCompletion3 = (_step = _iterator.next()).done); _iteratorNormalCompletion3 = true){
                var type = _step.value;
                try {
                    for(var _iterator3 = targets[Symbol.iterator](), _step3; !(_iteratorNormalCompletion = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion = true){
                        var target = _step3.value;
                        target.removeEventListener(type, listener, useCapture);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator3.return != null) {
                            _iterator3.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion3 && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError3) {
                    throw _iteratorError3;
                }
            }
        }
    }
    function once() {
        for(var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++)args[_key3] = arguments[_key3];
        var ref = _helpers.slicedToArray(getArgs(args), 6), element = ref[0], types = ref[1], selector = ref[2], listener = ref[3], tmp = ref[4], useCapture = tmp === void 0 ? false : tmp, condition = ref[5];
        var _$off = on(element, types, selector, function(e) {
            var result = !condition || condition(e);
            if (result) {
                _$off();
                listener(e, result);
            }
        }, useCapture);
        return _$off;
    }
    function trigger(targets, event, detail) {
        return toEventTargets(targets).every(function(target) {
            return target.dispatchEvent(createEvent(event, true, true, detail));
        });
    }
    function createEvent(e, bubbles, cancelable, detail) {
        if (bubbles === void 0) bubbles = true;
        if (cancelable === void 0) cancelable = false;
        if (isString(e)) e = new CustomEvent(e, {
            bubbles: bubbles,
            cancelable: cancelable,
            detail: detail
        });
        return e;
    }
    function getArgs(args) {
        // Event targets
        args[0] = toEventTargets(args[0]);
        // Event types
        if (isString(args[1])) args[1] = args[1].split(' ');
        // Delegate?
        if (isFunction(args[2])) args.splice(2, 0, false);
        return args;
    }
    function delegate1(selector, listener) {
        var _this = this;
        return function(e) {
            var current = selector[0] === '>' ? findAll(selector, e.currentTarget).reverse().filter(function(element) {
                return within(e.target, element);
            })[0] : closest(e.target, selector);
            if (current) {
                e.current = current;
                listener.call(_this, e);
            }
        };
    }
    function detail1(listener) {
        return function(e) {
            return isArray(e.detail) ? listener.apply(void 0, [
                e
            ].concat(_helpers.toConsumableArray(e.detail))) : listener(e);
        };
    }
    function selfFilter(listener) {
        return function(e) {
            if (e.target === e.currentTarget || e.target === e.current) return listener.call(null, e);
        };
    }
    function isEventTarget(target) {
        return target && 'addEventListener' in target;
    }
    function toEventTarget(target) {
        return isEventTarget(target) ? target : toNode(target);
    }
    function toEventTargets(target) {
        return isArray(target) ? target.map(toEventTarget).filter(Boolean) : isString(target) ? findAll(target) : isEventTarget(target) ? [
            target
        ] : toNodes(target);
    }
    function isTouch(e) {
        return e.pointerType === 'touch' || !!e.touches;
    }
    function getEventPos(e) {
        var _e$touches, _e$changedTouches;
        var ref = ((_e$touches = e.touches) == null ? void 0 : _e$touches[0]) || ((_e$changedTouches = e.changedTouches) == null ? void 0 : _e$changedTouches[0]) || e, x = ref.clientX, y = ref.clientY;
        return {
            x: x,
            y: y
        };
    }
    function ajax(url, options) {
        var env = _helpers.objectSpread({
            data: null,
            method: 'GET',
            headers: {},
            xhr: new XMLHttpRequest(),
            beforeSend: noop,
            responseType: ''
        }, options);
        return Promise.resolve().then(function() {
            return env.beforeSend(env);
        }).then(function() {
            return send(url, env);
        });
    }
    function send(url, env) {
        return new Promise(function(resolve, reject) {
            var xhr = env.xhr;
            for(var prop in env){
                if (prop in xhr) try {
                    xhr[prop] = env[prop];
                } catch (e) {
                // noop
                }
            }
            xhr.open(env.method.toUpperCase(), url);
            for(var header in env.headers)xhr.setRequestHeader(header, env.headers[header]);
            on(xhr, 'load', function() {
                if (xhr.status === 0 || xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) resolve(xhr);
                else reject(assign(Error(xhr.statusText), {
                    xhr: xhr,
                    status: xhr.status
                }));
            });
            on(xhr, 'error', function() {
                return reject(assign(Error('Network Error'), {
                    xhr: xhr
                }));
            });
            on(xhr, 'timeout', function() {
                return reject(assign(Error('Network Timeout'), {
                    xhr: xhr
                }));
            });
            xhr.send(env.data);
        });
    }
    function getImage(src, srcset, sizes) {
        return new Promise(function(resolve, reject) {
            var img = new Image();
            img.onerror = function(e) {
                reject(e);
            };
            img.onload = function() {
                resolve(img);
            };
            sizes && (img.sizes = sizes);
            srcset && (img.srcset = srcset);
            img.src = src;
        });
    }
    var cssNumber = {
        'animation-iteration-count': true,
        'column-count': true,
        'fill-opacity': true,
        'flex-grow': true,
        'flex-shrink': true,
        'font-weight': true,
        'line-height': true,
        opacity: true,
        order: true,
        orphans: true,
        'stroke-dasharray': true,
        'stroke-dashoffset': true,
        widows: true,
        'z-index': true,
        zoom: true
    };
    function css1(element, property1, value1, priority) {
        if (priority === void 0) priority = '';
        var elements = toNodes(element);
        var _iteratorNormalCompletion4 = true, _didIteratorError4 = false, _iteratorError4 = undefined;
        try {
            var _loop = function(_iterator, _step) {
                var _$element = _step.value;
                if (isString(property1)) {
                    property1 = propName1(property1);
                    if (isUndefined(value1)) return {
                        v: getComputedStyle(_$element).getPropertyValue(property1)
                    };
                    else _$element.style.setProperty(property1, isNumeric(value1) && !cssNumber[property1] ? value1 + "px" : value1 || isNumber(value1) ? value1 : '', priority);
                } else if (isArray(property1)) {
                    var props = {};
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator4 = property1[Symbol.iterator](), _step4; !(_iteratorNormalCompletion = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion = true){
                            var prop = _step4.value;
                            props[prop] = css1(_$element, prop);
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator4.return != null) {
                                _iterator4.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return {
                        v: props
                    };
                } else if (isObject(property1)) {
                    priority = value1;
                    each(property1, function(value, property) {
                        return css1(_$element, property, value, priority);
                    });
                }
            };
            for(var _iterator = elements[Symbol.iterator](), _step; !(_iteratorNormalCompletion4 = (_step = _iterator.next()).done); _iteratorNormalCompletion4 = true){
                var _ret = _loop(_iterator, _step);
                if (_helpers.typeOf(_ret) === "object") return _ret.v;
            }
        } catch (err) {
            _didIteratorError4 = true;
            _iteratorError4 = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion4 && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError4) {
                    throw _iteratorError4;
                }
            }
        }
        return elements[0];
    }
    var propertyRe = /^\s*(["'])?(.*?)\1\s*$/;
    function getCssVar(name, element) {
        if (element === void 0) element = document.documentElement;
        return css1(element, "--uk-" + name).replace(propertyRe, '$2');
    }
    // https://drafts.csswg.org/cssom/#dom-cssstyledeclaration-setproperty
    var propName1 = memoize(function(name) {
        return vendorPropName(name);
    });
    var cssPrefixes = [
        'webkit',
        'moz'
    ];
    function vendorPropName(name) {
        if (name[0] === '-') return name;
        name = hyphenate(name);
        var style = document.documentElement.style;
        if (name in style) return name;
        var i = cssPrefixes.length, prefixedName;
        while(i--){
            prefixedName = "-" + cssPrefixes[i] + "-" + name;
            if (prefixedName in style) return prefixedName;
        }
    }
    function addClass(element) {
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
        apply$1(element, args, 'add');
    }
    function removeClass(element) {
        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
        apply$1(element, args, 'remove');
    }
    function removeClasses(element, cls) {
        attr1(element, 'class', function(value) {
            return (value || '').replace(new RegExp("\\b" + cls + "\\b", 'g'), '');
        });
    }
    function replaceClass(element) {
        (arguments.length <= 1 ? undefined : arguments[1]) && removeClass(element, arguments.length <= 1 ? undefined : arguments[1]);
        (arguments.length <= 2 ? undefined : arguments[2]) && addClass(element, arguments.length <= 2 ? undefined : arguments[2]);
    }
    function hasClass(element, cls) {
        var ref;
        ref = _helpers.slicedToArray(getClasses(cls), 1), cls = ref[0], ref;
        return !!cls && toNodes(element).some(function(node) {
            return node.classList.contains(cls);
        });
    }
    function toggleClass(element, cls, force) {
        var classes = getClasses(cls);
        if (!isUndefined(force)) force = !!force;
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined, _iteratorNormalCompletion5 = true, _didIteratorError5 = false, _iteratorError5 = undefined;
        try {
            for(var _iterator = toNodes(element)[Symbol.iterator](), _step; !(_iteratorNormalCompletion5 = (_step = _iterator.next()).done); _iteratorNormalCompletion5 = true){
                var node = _step.value;
                try {
                    for(var _iterator5 = classes[Symbol.iterator](), _step5; !(_iteratorNormalCompletion = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion = true){
                        var _$cls = _step5.value;
                        node.classList.toggle(_$cls, force);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator5.return != null) {
                            _iterator5.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        } catch (err) {
            _didIteratorError5 = true;
            _iteratorError5 = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion5 && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError5) {
                    throw _iteratorError5;
                }
            }
        }
    }
    function apply$1(element, args1, fn) {
        var _classList;
        args1 = args1.reduce(function(args, arg) {
            return args.concat(getClasses(arg));
        }, []);
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = toNodes(element)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var node = _step.value;
                (_classList = node.classList)[fn].apply(_classList, _helpers.toConsumableArray(args1));
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
    }
    function getClasses(str) {
        return String(str).split(/\s|,/).filter(Boolean);
    }
    function transition(element8, props, duration, timing) {
        if (duration === void 0) duration = 400;
        if (timing === void 0) timing = 'linear';
        return Promise.all(toNodes(element8).map(function(element) {
            return new Promise(function(resolve, reject) {
                for(var name in props){
                    var value = css1(element, name);
                    if (value === '') css1(element, name, value);
                }
                var timer = setTimeout(function() {
                    return trigger(element, 'transitionend');
                }, duration);
                once(element, 'transitionend transitioncanceled', function(_ref) {
                    var type = _ref.type;
                    clearTimeout(timer);
                    removeClass(element, 'uk-transition');
                    css1(element, {
                        transitionProperty: '',
                        transitionDuration: '',
                        transitionTimingFunction: ''
                    });
                    type === 'transitioncanceled' ? reject() : resolve(element);
                }, {
                    self: true
                });
                addClass(element, 'uk-transition');
                css1(element, _helpers.objectSpread({
                    transitionProperty: Object.keys(props).map(propName1).join(','),
                    transitionDuration: duration + "ms",
                    transitionTimingFunction: timing
                }, props));
            });
        }));
    }
    var Transition = {
        start: transition,
        stop: function(element) {
            trigger(element, 'transitionend');
            return Promise.resolve();
        },
        cancel: function(element) {
            trigger(element, 'transitioncanceled');
        },
        inProgress: function(element) {
            return hasClass(element, 'uk-transition');
        }
    };
    var animationPrefix = 'uk-animation-';
    function animate$1(element9, animation, duration, origin, out) {
        if (duration === void 0) duration = 200;
        return Promise.all(toNodes(element9).map(function(element) {
            return new Promise(function(resolve, reject) {
                trigger(element, 'animationcanceled');
                var timer = setTimeout(function() {
                    return trigger(element, 'animationend');
                }, duration);
                once(element, 'animationend animationcanceled', function(_ref2) {
                    var type = _ref2.type;
                    clearTimeout(timer);
                    type === 'animationcanceled' ? reject() : resolve(element);
                    css1(element, 'animationDuration', '');
                    removeClasses(element, animationPrefix + "\\S*");
                }, {
                    self: true
                });
                css1(element, 'animationDuration', duration + "ms");
                addClass(element, animation, animationPrefix + (out ? 'leave' : 'enter'));
                if (startsWith(animation, animationPrefix)) {
                    origin && addClass(element, "uk-transform-origin-" + origin);
                    out && addClass(element, animationPrefix + "reverse");
                }
            });
        }));
    }
    var inProgress1 = new RegExp(animationPrefix + "(enter|leave)");
    var Animation = {
        in: animate$1,
        out: function(element, animation, duration, origin) {
            return animate$1(element, animation, duration, origin, true);
        },
        inProgress: function(element) {
            return inProgress1.test(attr1(element, 'class'));
        },
        cancel: function(element) {
            trigger(element, 'animationcanceled');
        }
    };
    var dirs$1 = {
        width: [
            'left',
            'right'
        ],
        height: [
            'top',
            'bottom'
        ]
    };
    function dimensions$1(element) {
        var rect = isElement(element) ? toNode(element).getBoundingClientRect() : {
            height: height1(element),
            width: width1(element),
            top: 0,
            left: 0
        };
        return {
            height: rect.height,
            width: rect.width,
            top: rect.top,
            left: rect.left,
            bottom: rect.top + rect.height,
            right: rect.left + rect.width
        };
    }
    function offset1(element, coordinates) {
        var currentOffset = dimensions$1(element);
        if (element) {
            var ref = toWindow(element), scrollY = ref.scrollY, scrollX = ref.scrollX;
            var offsetBy = {
                height: scrollY,
                width: scrollX
            };
            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
            for(var dir in dirs$1)try {
                for(var _iterator = dirs$1[dir][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                    var prop = _step.value;
                    currentOffset[prop] += offsetBy[dir];
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally{
                try {
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                    }
                } finally{
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
        if (!coordinates) return currentOffset;
        var pos = css1(element, 'position');
        each(css1(element, [
            'left',
            'top'
        ]), function(value, prop) {
            return css1(element, prop, coordinates[prop] - currentOffset[prop] + toFloat(pos === 'absolute' && value === 'auto' ? position1(element)[prop] : value));
        });
    }
    function position1(element) {
        var ref = offset1(element), top = ref.top, left = ref.left;
        var ref1 = toNode(element), _ownerDocument = ref1.ownerDocument, body = _ownerDocument.body, documentElement = _ownerDocument.documentElement, offsetParent = ref1.offsetParent;
        var _$parent = offsetParent || documentElement;
        while(_$parent && (_$parent === body || _$parent === documentElement) && css1(_$parent, 'position') === 'static')_$parent = _$parent.parentNode;
        if (isElement(_$parent)) {
            var parentOffset = offset1(_$parent);
            top -= parentOffset.top + toFloat(css1(_$parent, 'borderTopWidth'));
            left -= parentOffset.left + toFloat(css1(_$parent, 'borderLeftWidth'));
        }
        return {
            top: top - toFloat(css1(element, 'marginTop')),
            left: left - toFloat(css1(element, 'marginLeft'))
        };
    }
    function offsetPosition(element) {
        var _$offset = [
            0,
            0
        ];
        element = toNode(element);
        do {
            _$offset[0] += element.offsetTop;
            _$offset[1] += element.offsetLeft;
            if (css1(element, 'position') === 'fixed') {
                var win = toWindow(element);
                _$offset[0] += win.scrollY;
                _$offset[1] += win.scrollX;
                return _$offset;
            }
        }while (element = element.offsetParent)
        return _$offset;
    }
    var height1 = dimension('height');
    var width1 = dimension('width');
    function dimension(prop) {
        var propName = ucfirst(prop);
        return function(element, value) {
            if (isUndefined(value)) {
                if (isWindow(element)) return element["inner" + propName];
                if (isDocument(element)) {
                    var doc = element.documentElement;
                    return Math.max(doc["offset" + propName], doc["scroll" + propName]);
                }
                element = toNode(element);
                value = css1(element, prop);
                value = value === 'auto' ? element["offset" + propName] : toFloat(value) || 0;
                return value - boxModelAdjust(element, prop);
            } else return css1(element, prop, !value && value !== 0 ? '' : +value + boxModelAdjust(element, prop) + 'px');
        };
    }
    function boxModelAdjust(element, prop1, sizing) {
        if (sizing === void 0) sizing = 'border-box';
        return css1(element, 'boxSizing') === sizing ? dirs$1[prop1].map(ucfirst).reduce(function(value, prop) {
            return value + toFloat(css1(element, "padding" + prop)) + toFloat(css1(element, "border" + prop + "Width"));
        }, 0) : 0;
    }
    function flipPosition(pos) {
        for(var dir in dirs$1)for(var i in dirs$1[dir]){
            if (dirs$1[dir][i] === pos) return dirs$1[dir][1 - i];
        }
        return pos;
    }
    function toPx(value2, property, element, offsetDim) {
        if (property === void 0) property = 'width';
        if (element === void 0) element = window;
        if (offsetDim === void 0) offsetDim = false;
        if (!isString(value2)) return toFloat(value2);
        return parseCalc(value2).reduce(function(result, value) {
            var unit = parseUnit(value);
            if (unit) value = percent1(unit === 'vh' ? height1(toWindow(element)) : unit === 'vw' ? width1(toWindow(element)) : offsetDim ? element["offset" + ucfirst(property)] : dimensions$1(element)[property], value);
            return result + toFloat(value);
        }, 0);
    }
    var calcRe = /-?\d+(?:\.\d+)?(?:v[wh]|%|px)?/g;
    var parseCalc = memoize(function(calc) {
        return calc.toString().replace(/\s/g, '').match(calcRe) || [];
    });
    var unitRe$1 = /(?:v[hw]|%)$/;
    var parseUnit = memoize(function(str) {
        return (str.match(unitRe$1) || [])[0];
    });
    function percent1(base, value) {
        return base * toFloat(value) / 100;
    }
    function ready(fn) {
        if (document.readyState !== 'loading') {
            fn();
            return;
        }
        once(document, 'DOMContentLoaded', fn);
    }
    function isTag(element, tagName) {
        var _element$tagName;
        return (element == null ? void 0 : (_element$tagName = element.tagName) == null ? void 0 : _element$tagName.toLowerCase()) === tagName.toLowerCase();
    }
    function empty1(element) {
        return replaceChildren(element, '');
    }
    function html1(parent, html) {
        return isUndefined(html) ? $(parent).innerHTML : replaceChildren(parent, html);
    }
    var replaceChildren = applyFn('replaceChildren');
    var prepend = applyFn('prepend');
    var append = applyFn('append');
    var before = applyFn('before');
    var after = applyFn('after');
    function applyFn(fn) {
        return function(ref, element) {
            var __$;
            var _$;
            var nodes = toNodes(isString(element) ? fragment(element) : element);
            (_$ = $(ref)) == null || (__$ = _$)[fn].apply(__$, _helpers.toConsumableArray(nodes));
            return unwrapSingle(nodes);
        };
    }
    function remove$1(element10) {
        toNodes(element10).forEach(function(element) {
            return element.remove();
        });
    }
    function wrapAll(element, structure) {
        structure = toNode(before(element, structure));
        while(structure.firstChild)structure = structure.firstChild;
        append(structure, element);
        return structure;
    }
    function wrapInner(element11, structure) {
        return toNodes(toNodes(element11).map(function(element) {
            return element.hasChildNodes() ? wrapAll(toNodes(element.childNodes), structure) : append(element, structure);
        }));
    }
    function unwrap(element) {
        var _parent;
        toNodes(element).map(parent1).filter(function(value, index, self) {
            return self.indexOf(value) === index;
        }).forEach(function(parent) {
            return (_parent = parent).replaceWith.apply(_parent, _helpers.toConsumableArray(parent.childNodes));
        });
    }
    var fragmentRe = /^\s*<(\w+|!)[^>]*>/;
    var singleTagRe = /^<(\w+)\s*\/?>(?:<\/\1>)?$/;
    function fragment(html) {
        var _$matches = singleTagRe.exec(html);
        if (_$matches) return document.createElement(_$matches[1]);
        var container = document.createElement('div');
        if (fragmentRe.test(html)) container.insertAdjacentHTML('beforeend', html.trim());
        else container.textContent = html;
        return unwrapSingle(container.childNodes);
    }
    function unwrapSingle(nodes) {
        return nodes.length > 1 ? nodes : nodes[0];
    }
    function apply(node, fn) {
        if (!isElement(node)) return;
        fn(node);
        node = node.firstElementChild;
        while(node){
            var next = node.nextElementSibling;
            apply(node, fn);
            node = next;
        }
    }
    function $(selector, context) {
        return isHtml(selector) ? toNode(fragment(selector)) : find(selector, context);
    }
    function $$(selector, context) {
        return isHtml(selector) ? toNodes(fragment(selector)) : findAll(selector, context);
    }
    function isHtml(str) {
        return isString(str) && startsWith(str.trim(), '<');
    }
    var inBrowser = typeof window !== 'undefined';
    var isRtl = inBrowser && attr1(document.documentElement, 'dir') === 'rtl';
    var hasTouch = inBrowser && 'ontouchstart' in window;
    var hasPointerEvents = inBrowser && window.PointerEvent;
    var pointerDown = hasPointerEvents ? 'pointerdown' : hasTouch ? 'touchstart' : 'mousedown';
    var pointerMove = hasPointerEvents ? 'pointermove' : hasTouch ? 'touchmove' : 'mousemove';
    var pointerUp = hasPointerEvents ? 'pointerup' : hasTouch ? 'touchend' : 'mouseup';
    var pointerEnter = hasPointerEvents ? 'pointerenter' : hasTouch ? '' : 'mouseenter';
    var pointerLeave = hasPointerEvents ? 'pointerleave' : hasTouch ? '' : 'mouseleave';
    var pointerCancel = hasPointerEvents ? 'pointercancel' : 'touchcancel';
    /*
        Based on:
        Copyright (c) 2016 Wilson Page wilsonpage@me.com
        https://github.com/wilsonpage/fastdom
    */ var fastdom = {
        reads: [],
        writes: [],
        read: function(task) {
            this.reads.push(task);
            scheduleFlush();
            return task;
        },
        write: function(task) {
            this.writes.push(task);
            scheduleFlush();
            return task;
        },
        clear: function(task) {
            remove(this.reads, task);
            remove(this.writes, task);
        },
        flush: flush
    };
    function flush(recursion) {
        runTasks(fastdom.reads);
        runTasks(fastdom.writes.splice(0));
        fastdom.scheduled = false;
        if (fastdom.reads.length || fastdom.writes.length) scheduleFlush(recursion + 1);
    }
    var RECURSION_LIMIT = 4;
    function scheduleFlush(recursion) {
        if (fastdom.scheduled) return;
        fastdom.scheduled = true;
        if (recursion && recursion < RECURSION_LIMIT) Promise.resolve().then(function() {
            return flush(recursion);
        });
        else requestAnimationFrame(function() {
            return flush(1);
        });
    }
    function runTasks(tasks) {
        var task;
        while(task = tasks.shift())try {
            task();
        } catch (e) {
            console.error(e);
        }
    }
    function remove(array, item) {
        var _$index = array.indexOf(item);
        return ~_$index && array.splice(_$index, 1);
    }
    function MouseTracker() {}
    MouseTracker.prototype = {
        positions: [],
        init: function() {
            var _this = this;
            this.positions = [];
            var _$position;
            this.unbind = on(document, 'mousemove', function(e) {
                return _$position = getEventPos(e);
            });
            this.interval = setInterval(function() {
                if (!_$position) return;
                _this.positions.push(_$position);
                if (_this.positions.length > 5) _this.positions.shift();
            }, 50);
        },
        cancel: function() {
            var _this$unbind;
            (_this$unbind = this.unbind) == null || _this$unbind.call(this);
            this.interval && clearInterval(this.interval);
        },
        movesTo: function(target) {
            if (this.positions.length < 2) return false;
            var p = target.getBoundingClientRect();
            var left = p.left, right = p.right, top = p.top, bottom = p.bottom;
            var _positions = _helpers.slicedToArray(this.positions, 1), prevPosition = _positions[0];
            var _$position = last(this.positions);
            var path = [
                prevPosition,
                _$position
            ];
            if (pointInRect(_$position, p)) return false;
            var diagonals = [
                [
                    {
                        x: left,
                        y: top
                    },
                    {
                        x: right,
                        y: bottom
                    }
                ],
                [
                    {
                        x: left,
                        y: bottom
                    },
                    {
                        x: right,
                        y: top
                    }
                ]
            ];
            return diagonals.some(function(diagonal) {
                var intersection = intersect(path, diagonal);
                return intersection && pointInRect(intersection, p);
            });
        }
    };
    // Inspired by http://paulbourke.net/geometry/pointlineplane/
    function intersect(_ref, _ref2) {
        var __ref = _helpers.slicedToArray(_ref, 2), ref = __ref[0], x1 = ref.x, y1 = ref.y, ref2 = __ref[1], x2 = ref2.x, y2 = ref2.y;
        var __ref2 = _helpers.slicedToArray(_ref2, 2), ref3 = __ref2[0], x3 = ref3.x, y3 = ref3.y, ref4 = __ref2[1], x4 = ref4.x, y4 = ref4.y;
        var denominator = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
        // Lines are parallel
        if (denominator === 0) return false;
        var ua = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) / denominator;
        if (ua < 0) return false;
        // Return an object with the x and y coordinates of the intersection
        return {
            x: x1 + ua * (x2 - x1),
            y: y1 + ua * (y2 - y1)
        };
    }
    function observeIntersection(targets, cb, options, intersecting) {
        if (intersecting === void 0) intersecting = true;
        var observer1 = new IntersectionObserver(intersecting ? function(entries, observer) {
            if (entries.some(function(entry) {
                return entry.isIntersecting;
            })) cb(entries, observer);
        } : cb, options);
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = toNodes(targets)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var el = _step.value;
                observer1.observe(el);
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
        return observer1;
    }
    var hasResizeObserver = inBrowser && window.ResizeObserver;
    function observeResize(targets, cb, options) {
        if (options === void 0) options = {
            box: 'border-box'
        };
        if (hasResizeObserver) return observe(ResizeObserver, targets, cb, options);
        // Fallback Safari < 13.1
        initResizeListener();
        listeners.add(cb);
        return {
            disconnect: function() {
                listeners.delete(cb);
            }
        };
    }
    var listeners;
    function initResizeListener() {
        if (listeners) return;
        listeners = new Set();
        // throttle 'resize'
        var pendingResize;
        var handleResize = function() {
            if (pendingResize) return;
            pendingResize = true;
            fastdom.read(function() {
                return pendingResize = false;
            });
            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
            try {
                for(var _iterator = listeners[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                    var listener = _step.value;
                    listener();
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally{
                try {
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                    }
                } finally{
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        };
        on(window, 'load resize', handleResize);
        on(document, 'loadedmetadata load', handleResize, true);
    }
    function observeMutation(targets, cb, options) {
        return observe(MutationObserver, targets, cb, options);
    }
    function observe(Observer, targets, cb, options) {
        var observer = new Observer(cb);
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = toNodes(targets)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var el = _step.value;
                observer.observe(el, options);
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
        return observer;
    }
    var strats = {};
    strats.events = strats.created = strats.beforeConnect = strats.connected = strats.beforeDisconnect = strats.disconnected = strats.destroy = concatStrat;
    // args strategy
    strats.args = function(parentVal, childVal) {
        return childVal !== false && concatStrat(childVal || parentVal);
    };
    // update strategy
    strats.update = function(parentVal, childVal) {
        return sortBy$1(concatStrat(parentVal, isFunction(childVal) ? {
            read: childVal
        } : childVal), 'order');
    };
    // property strategy
    strats.props = function(parentVal, childVal) {
        if (isArray(childVal)) {
            var value = {};
            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
            try {
                for(var _iterator = childVal[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                    var key = _step.value;
                    value[key] = String;
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally{
                try {
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                    }
                } finally{
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
            childVal = value;
        }
        return strats.methods(parentVal, childVal);
    };
    // extend strategy
    strats.computed = strats.methods = function(parentVal, childVal) {
        return childVal ? parentVal ? _helpers.objectSpread({}, parentVal, childVal) : childVal : parentVal;
    };
    // data strategy
    strats.data = function(parentVal, childVal, vm1) {
        if (!vm1) {
            if (!childVal) return parentVal;
            if (!parentVal) return childVal;
            return function(vm) {
                return mergeFnData(parentVal, childVal, vm);
            };
        }
        return mergeFnData(parentVal, childVal, vm1);
    };
    function mergeFnData(parentVal, childVal, vm) {
        return strats.computed(isFunction(parentVal) ? parentVal.call(vm, vm) : parentVal, isFunction(childVal) ? childVal.call(vm, vm) : childVal);
    }
    // concat strategy
    function concatStrat(parentVal, childVal) {
        parentVal = parentVal && !isArray(parentVal) ? [
            parentVal
        ] : parentVal;
        return childVal ? parentVal ? parentVal.concat(childVal) : isArray(childVal) ? childVal : [
            childVal
        ] : parentVal;
    }
    // default strategy
    function defaultStrat(parentVal, childVal) {
        return isUndefined(childVal) ? parentVal : childVal;
    }
    function mergeOptions(parent, child, vm) {
        var options = {};
        if (isFunction(child)) child = child.options;
        if (child.extends) parent = mergeOptions(parent, child.extends, vm);
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        if (child.mixins) try {
            for(var _iterator = child.mixins[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var mixin = _step.value;
                parent = mergeOptions(parent, mixin, vm);
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
        for(var key2 in parent)mergeKey(key2);
        for(var key1 in child)if (!hasOwn(parent, key1)) mergeKey(key1);
        function mergeKey(key) {
            options[key] = (strats[key] || defaultStrat)(parent[key], child[key], vm);
        }
        return options;
    }
    function parseOptions(options1, args) {
        if (args === void 0) args = [];
        try {
            return options1 ? startsWith(options1, '{') ? JSON.parse(options1) : args.length && !includes(options1, ':') ? _helpers.defineProperty({}, args[0], options1) : options1.split(';').reduce(function(options, option) {
                var ref = _helpers.slicedToArray(option.split(/:(.*)/), 2), key = ref[0], value = ref[1];
                if (key && !isUndefined(value)) options[key.trim()] = value.trim();
                return options;
            }, {}) : {};
        } catch (e) {
            return {};
        }
    }
    function play(el) {
        if (isIFrame(el)) call(el, {
            func: 'playVideo',
            method: 'play'
        });
        if (isHTML5(el)) try {
            el.play().catch(noop);
        } catch (e) {
        // noop
        }
    }
    function pause(el) {
        if (isIFrame(el)) call(el, {
            func: 'pauseVideo',
            method: 'pause'
        });
        if (isHTML5(el)) el.pause();
    }
    function mute(el) {
        if (isIFrame(el)) call(el, {
            func: 'mute',
            method: 'setVolume',
            value: 0
        });
        if (isHTML5(el)) el.muted = true;
    }
    function isVideo(el) {
        return isHTML5(el) || isIFrame(el);
    }
    function isHTML5(el) {
        return isTag(el, 'video');
    }
    function isIFrame(el) {
        return isTag(el, 'iframe') && (isYoutube(el) || isVimeo(el));
    }
    function isYoutube(el) {
        return !!el.src.match(/\/\/.*?youtube(-nocookie)?\.[a-z]+\/(watch\?v=[^&\s]+|embed)|youtu\.be\/.*/);
    }
    function isVimeo(el) {
        return !!el.src.match(/vimeo\.com\/video\/.*/);
    }
    function call(el, cmd) {
        return _call.apply(this, arguments);
    }
    function _call() {
        _call = _helpers.asyncToGenerator(_regeneratorRuntimeDefault.default.mark(function _callee(el, cmd) {
            return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                while(1)switch(_ctx.prev = _ctx.next){
                    case 0:
                        _ctx.next = 2;
                        return enableApi(el);
                    case 2:
                        post(el, cmd);
                    case 3:
                    case "end":
                        return _ctx.stop();
                }
            }, _callee);
        }));
        return _call.apply(this, arguments);
    }
    function post(el, cmd) {
        try {
            el.contentWindow.postMessage(JSON.stringify(_helpers.objectSpread({
                event: 'command'
            }, cmd)), '*');
        } catch (e) {
        // noop
        }
    }
    var stateKey = '_ukPlayer';
    var counter = 0;
    function enableApi(el) {
        if (el[stateKey]) return el[stateKey];
        var youtube = isYoutube(el);
        var vimeo = isVimeo(el);
        var id = ++counter;
        var poller;
        return el[stateKey] = new Promise(function(resolve) {
            youtube && once(el, 'load', function() {
                var listener = function() {
                    return post(el, {
                        event: 'listening',
                        id: id
                    });
                };
                poller = setInterval(listener, 100);
                listener();
            });
            once(window, 'message', resolve, false, function(_ref) {
                var _$data = _ref.data;
                try {
                    _$data = JSON.parse(_$data);
                    return _$data && (youtube && _$data.id === id && _$data.event === 'onReady' || vimeo && Number(_$data.player_id) === id);
                } catch (e) {
                // noop
                }
            });
            el.src = "" + el.src + (includes(el.src, '?') ? '&' : '?') + (youtube ? 'enablejsapi=1' : "api=1&player_id=" + id);
        }).then(function() {
            return clearInterval(poller);
        });
    }
    function isInView(element, offsetTop, offsetLeft) {
        if (offsetTop === void 0) offsetTop = 0;
        if (offsetLeft === void 0) offsetLeft = 0;
        if (!isVisible(element)) return false;
        return intersectRect.apply(void 0, _helpers.toConsumableArray(scrollParents(element).map(function(parent) {
            var ref = offsetViewport(parent), top = ref.top, left = ref.left, bottom = ref.bottom, right = ref.right;
            return {
                top: top - offsetTop,
                left: left - offsetLeft,
                bottom: bottom + offsetTop,
                right: right + offsetLeft
            };
        }).concat(offset1(element))));
    }
    function scrollTop(element, top) {
        if (isWindow(element) || isDocument(element)) element = scrollingElement1(element);
        else element = toNode(element);
        if (isUndefined(top)) return element.scrollTop;
        else element.scrollTop = top;
    }
    function scrollIntoView(element12, _temp) {
        var ref5 = _temp === void 0 ? {} : _temp, tmp = ref5.offset, offsetBy = tmp === void 0 ? 0 : tmp;
        var _$parents = isVisible(element12) ? scrollParents(element12) : [];
        return _$parents.reduce(function(fn, scrollElement, i) {
            var _$scrollTop = scrollElement.scrollTop, scrollHeight = scrollElement.scrollHeight, offsetHeight = scrollElement.offsetHeight;
            var viewport = offsetViewport(scrollElement);
            var maxScroll = scrollHeight - viewport.height;
            var ref = _$parents[i - 1] ? offsetViewport(_$parents[i - 1]) : offset1(element12), elHeight = ref.height, elTop = ref.top;
            var top = Math.ceil(elTop - viewport.top - offsetBy + _$scrollTop);
            if (offsetBy > 0 && offsetHeight < elHeight + offsetBy) top += offsetBy;
            else offsetBy = 0;
            if (top > maxScroll) {
                offsetBy -= top - maxScroll;
                top = maxScroll;
            } else if (top < 0) {
                offsetBy -= top;
                top = 0;
            }
            return function() {
                return scrollTo(scrollElement, top - _$scrollTop).then(fn);
            };
        }, function() {
            return Promise.resolve();
        })();
        function scrollTo(element, top) {
            return new Promise(function(resolve) {
                var scroll = element.scrollTop;
                var duration = getDuration(Math.abs(top));
                var start = Date.now();
                (function step() {
                    var percent = ease(clamp((Date.now() - start) / duration));
                    scrollTop(element, scroll + top * percent);
                    // scroll more if we have not reached our destination
                    if (percent === 1) {
                        resolve();
                    } else {
                        requestAnimationFrame(step);
                    }
                })();
            });
        }
        function getDuration(dist) {
            return 40 * Math.pow(dist, 0.375);
        }
        function ease(k) {
            return 0.5 * (1 - Math.cos(Math.PI * k));
        }
    }
    function scrolledOver(element, startOffset, endOffset) {
        if (startOffset === void 0) startOffset = 0;
        if (endOffset === void 0) endOffset = 0;
        if (!isVisible(element)) return 0;
        var ref = _helpers.slicedToArray(scrollParents(element, /auto|scroll/, true), 1), scrollElement = ref[0];
        var scrollHeight = scrollElement.scrollHeight, _$scrollTop = scrollElement.scrollTop;
        var ref6 = offsetViewport(scrollElement), viewportHeight = ref6.height;
        var maxScroll = scrollHeight - viewportHeight;
        var elementOffsetTop = offsetPosition(element)[0] - offsetPosition(scrollElement)[0];
        var start = Math.max(0, elementOffsetTop - viewportHeight + startOffset);
        var end = Math.min(maxScroll, elementOffsetTop + element.offsetHeight - endOffset);
        return clamp((_$scrollTop - start) / (end - start));
    }
    function scrollParents(element, overflowRe, scrollable) {
        if (overflowRe === void 0) overflowRe = /auto|scroll|hidden/;
        if (scrollable === void 0) scrollable = false;
        var scrollEl = scrollingElement1(element);
        var ancestors = parents(element).reverse();
        ancestors = ancestors.slice(ancestors.indexOf(scrollEl) + 1);
        var fixedIndex = findIndex(ancestors, function(el) {
            return css1(el, 'position') === 'fixed';
        });
        if (~fixedIndex) ancestors = ancestors.slice(fixedIndex);
        return [
            scrollEl
        ].concat(ancestors.filter(function(parent) {
            return overflowRe.test(css1(parent, 'overflow')) && (!scrollable || parent.scrollHeight > offsetViewport(parent).height);
        })).reverse();
    }
    function offsetViewport(scrollElement) {
        var viewportElement = getViewport$1(scrollElement);
        // iOS 12 returns <body> as scrollingElement
        if (viewportElement === scrollingElement1(viewportElement)) viewportElement = document.documentElement;
        var rect = offset1(viewportElement);
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = [
                [
                    'width',
                    'x',
                    'left',
                    'right'
                ],
                [
                    'height',
                    'y',
                    'top',
                    'bottom'
                ]
            ][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var _value = _helpers.slicedToArray(_step.value, 4), prop = _value[0], dir = _value[1], start = _value[2], end = _value[3];
                if (!isWindow(getViewport$1(viewportElement))) rect[start] += toFloat(css1(viewportElement, "border" + ucfirst(start) + "Width"));
                rect[prop] = rect[dir] = (isWindow(viewportElement) ? scrollingElement1(viewportElement) : viewportElement)["client" + ucfirst(prop)];
                rect[end] = rect[prop] + rect[start];
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
        return rect;
    }
    function scrollingElement1(element) {
        var ref = toWindow(element), scrollingElement = ref.document.scrollingElement;
        return scrollingElement;
    }
    function getViewport$1(scrollElement) {
        return scrollElement === scrollingElement1(scrollElement) ? window : scrollElement;
    }
    var dirs = [
        [
            'width',
            'x',
            'left',
            'right'
        ],
        [
            'height',
            'y',
            'top',
            'bottom'
        ]
    ];
    function positionAt(element, target, options) {
        options = _helpers.objectSpread({
            attach: _helpers.objectSpread({
                element: [
                    'left',
                    'top'
                ],
                target: [
                    'left',
                    'top'
                ]
            }, options.attach),
            offset: [
                0,
                0
            ]
        }, options);
        var dim = options.flip ? attachToWithFlip(element, target, options) : attachTo(element, target, options);
        offset1(element, dim);
    }
    function attachTo(element, target, options) {
        var ref = _helpers.objectSpread({
            attach: _helpers.objectSpread({
                element: [
                    'left',
                    'top'
                ],
                target: [
                    'left',
                    'top'
                ]
            }, options.attach),
            offset: [
                0,
                0
            ]
        }, options), attach = ref.attach, offsetBy = ref.offset;
        var _$position = offset1(element);
        var targetOffset = offset1(target);
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = Object.entries(dirs)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var _value = _helpers.slicedToArray(_step.value, 2), i = _value[0], ref7 = _helpers.slicedToArray(_value[1], 4), prop = ref7[0], dir = ref7[1], start = ref7[2], end = ref7[3];
                _$position[start] = _$position[dir] = targetOffset[start] + moveBy(attach.target[i], end, targetOffset[prop]) - moveBy(attach.element[i], end, _$position[prop]) + +offsetBy[i];
                _$position[end] = _$position[start] + _$position[prop];
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
        return _$position;
    }
    function attachToWithFlip(element, target, options) {
        var _$position = attachTo(element, target, options);
        var targetDim = offset1(target);
        var flip = options.flip, _attach = options.attach, elAttach = _attach.element, targetAttach = _attach.target, elOffset = options.offset, boundary = options.boundary, viewport1 = options.viewport, viewportPadding = options.viewportPadding;
        var viewports = scrollParents(element);
        if (boundary === target) viewports = viewports.filter(function(viewport) {
            return viewport !== boundary;
        });
        var _viewports = _helpers.slicedToArray(viewports, 1), scrollElement = _viewports[0];
        viewports.push(viewport1);
        var _$offsetPosition = _helpers.objectSpread({}, _$position);
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = Object.entries(dirs)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var _value = _helpers.slicedToArray(_step.value, 2), i = _value[0], ref = _helpers.slicedToArray(_value[1], 4), prop = ref[0], dir = ref[1], start = ref[2], end = ref[3];
                if (flip !== true && !includes(flip, dir)) continue;
                var willFlip = !intersectLine(_$position, targetDim, i) && intersectLine(_$position, targetDim, 1 - i);
                viewport1 = getIntersectionArea.apply(void 0, _helpers.toConsumableArray(viewports.filter(Boolean).map(offsetViewport)));
                if (viewportPadding) {
                    viewport1[start] += viewportPadding;
                    viewport1[end] -= viewportPadding;
                }
                if (boundary && !willFlip && _$position[prop] <= offset1(boundary)[prop]) viewport1 = getIntersectionArea(viewport1, offset1(boundary));
                var isInStartBoundary = _$position[start] >= viewport1[start];
                var isInEndBoundary = _$position[end] <= viewport1[end];
                if (isInStartBoundary && isInEndBoundary) continue;
                var offsetBy = void 0;
                // Flip
                if (willFlip) {
                    if (elAttach[i] === end && isInStartBoundary || elAttach[i] === start && isInEndBoundary) continue;
                    offsetBy = (elAttach[i] === start ? -_$position[prop] : elAttach[i] === end ? _$position[prop] : 0) + (targetAttach[i] === start ? targetDim[prop] : targetAttach[i] === end ? -targetDim[prop] : 0) - elOffset[i] * 2;
                    var _obj;
                    if (!isInScrollArea(_helpers.objectSpread({}, _$position, (_obj = {}, _helpers.defineProperty(_obj, start, _$position[start] + offsetBy), _helpers.defineProperty(_obj, end, _$position[end] + offsetBy), _obj)), scrollElement, i)) {
                        if (isInScrollArea(_$position, scrollElement, i)) continue;
                        if (options.recursion) return false;
                        var newPos = attachToWithFlip(element, target, _helpers.objectSpread({}, options, {
                            attach: {
                                element: elAttach.map(flipDir).reverse(),
                                target: targetAttach.map(flipDir).reverse()
                            },
                            offset: elOffset.reverse(),
                            flip: flip === true ? flip : _helpers.toConsumableArray(flip).concat([
                                dirs[1 - i][1]
                            ]),
                            recursion: true
                        }));
                        if (newPos && isInScrollArea(newPos, scrollElement, 1 - i)) return newPos;
                    }
                // Move
                } else offsetBy = clamp(clamp(_$position[start], viewport1[start], viewport1[end] - _$position[prop]), targetDim[start] - _$position[prop] + elOffset[i], targetDim[end] - elOffset[i]) - _$position[start];
                _$offsetPosition[start] = _$position[dir] = _$position[start] + offsetBy;
                _$offsetPosition[end] += offsetBy;
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
        return _$offsetPosition;
    }
    function moveBy(start, end, dim) {
        return start === 'center' ? dim / 2 : start === end ? dim : 0;
    }
    function getIntersectionArea() {
        var area = {};
        for(var _len = arguments.length, rects = new Array(_len), _key = 0; _key < _len; _key++)rects[_key] = arguments[_key];
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined, _iteratorNormalCompletion6 = true, _didIteratorError6 = false, _iteratorError6 = undefined;
        try {
            for(var _iterator = rects[Symbol.iterator](), _step; !(_iteratorNormalCompletion6 = (_step = _iterator.next()).done); _iteratorNormalCompletion6 = true){
                var rect = _step.value;
                try {
                    for(var _iterator6 = dirs[Symbol.iterator](), _step6; !(_iteratorNormalCompletion = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion = true){
                        var _value = _helpers.slicedToArray(_step6.value, 4), start = _value[2], end = _value[3];
                        var _Math;
                        area[start] = Math.max(area[start] || 0, rect[start]);
                        area[end] = (_Math = Math).min.apply(_Math, _helpers.toConsumableArray([
                            area[end],
                            rect[end]
                        ].filter(Boolean)));
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator6.return != null) {
                            _iterator6.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        } catch (err) {
            _didIteratorError6 = true;
            _iteratorError6 = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion6 && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError6) {
                    throw _iteratorError6;
                }
            }
        }
        return area;
    }
    function isInScrollArea(position, scrollElement, dir) {
        var viewport = offsetViewport(scrollElement);
        var _dir = _helpers.slicedToArray(dirs[dir], 4), prop = _dir[0], start = _dir[2], end = _dir[3];
        viewport[start] -= scrollElement["scroll" + ucfirst(start)];
        viewport[end] = viewport[start] + scrollElement["scroll" + ucfirst(prop)];
        return position[start] >= viewport[start] && position[end] <= viewport[end];
    }
    function intersectLine(dimA, dimB, dir) {
        var _dir = _helpers.slicedToArray(dirs[dir], 4), start = _dir[2], end = _dir[3];
        return dimA[end] > dimB[start] && dimB[end] > dimA[start];
    }
    function flipDir(prop) {
        for(var i = 0; i < dirs.length; i++){
            var _$index = dirs[i].indexOf(prop);
            if (~_$index) return dirs[1 - i][_$index % 2 + 2];
        }
    }
    var util = /*#__PURE__*/ Object.freeze({
        __proto__: null,
        ajax: ajax,
        getImage: getImage,
        transition: transition,
        Transition: Transition,
        animate: animate$1,
        Animation: Animation,
        attr: attr1,
        hasAttr: hasAttr,
        removeAttr: removeAttr,
        data: data1,
        addClass: addClass,
        removeClass: removeClass,
        removeClasses: removeClasses,
        replaceClass: replaceClass,
        hasClass: hasClass,
        toggleClass: toggleClass,
        dimensions: dimensions$1,
        offset: offset1,
        position: position1,
        offsetPosition: offsetPosition,
        height: height1,
        width: width1,
        boxModelAdjust: boxModelAdjust,
        flipPosition: flipPosition,
        toPx: toPx,
        ready: ready,
        isTag: isTag,
        empty: empty1,
        html: html1,
        replaceChildren: replaceChildren,
        prepend: prepend,
        append: append,
        before: before,
        after: after,
        remove: remove$1,
        wrapAll: wrapAll,
        wrapInner: wrapInner,
        unwrap: unwrap,
        fragment: fragment,
        apply: apply,
        $: $,
        $$: $$,
        inBrowser: inBrowser,
        isRtl: isRtl,
        hasTouch: hasTouch,
        pointerDown: pointerDown,
        pointerMove: pointerMove,
        pointerUp: pointerUp,
        pointerEnter: pointerEnter,
        pointerLeave: pointerLeave,
        pointerCancel: pointerCancel,
        on: on,
        off: off,
        once: once,
        trigger: trigger,
        createEvent: createEvent,
        toEventTargets: toEventTargets,
        isTouch: isTouch,
        getEventPos: getEventPos,
        fastdom: fastdom,
        isVoidElement: isVoidElement,
        isVisible: isVisible,
        selInput: selInput,
        isInput: isInput,
        selFocusable: selFocusable,
        isFocusable: isFocusable,
        parent: parent1,
        filter: filter$1,
        matches: matches,
        closest: closest,
        within: within,
        parents: parents,
        children: children1,
        index: index1,
        hasOwn: hasOwn,
        hyphenate: hyphenate,
        camelize: camelize,
        ucfirst: ucfirst,
        startsWith: startsWith,
        endsWith: endsWith,
        includes: includes,
        findIndex: findIndex,
        isArray: isArray,
        toArray: toArray,
        assign: assign,
        isFunction: isFunction,
        isObject: isObject,
        isPlainObject: isPlainObject,
        isWindow: isWindow,
        isDocument: isDocument,
        isNode: isNode,
        isElement: isElement,
        isBoolean: isBoolean,
        isString: isString,
        isNumber: isNumber,
        isNumeric: isNumeric,
        isEmpty: isEmpty,
        isUndefined: isUndefined,
        toBoolean: toBoolean,
        toNumber: toNumber,
        toFloat: toFloat,
        toNode: toNode,
        toNodes: toNodes,
        toWindow: toWindow,
        isEqual: isEqual,
        swap: swap,
        last: last,
        each: each,
        sortBy: sortBy$1,
        uniqueBy: uniqueBy,
        clamp: clamp,
        noop: noop,
        intersectRect: intersectRect,
        pointInRect: pointInRect,
        Dimensions: Dimensions,
        getIndex: getIndex,
        memoize: memoize,
        Deferred: Deferred,
        MouseTracker: MouseTracker,
        observeIntersection: observeIntersection,
        observeResize: observeResize,
        observeMutation: observeMutation,
        mergeOptions: mergeOptions,
        parseOptions: parseOptions,
        play: play,
        pause: pause,
        mute: mute,
        isVideo: isVideo,
        positionAt: positionAt,
        query: query,
        queryAll: queryAll,
        find: find,
        findAll: findAll,
        escape: escape,
        css: css1,
        getCssVar: getCssVar,
        propName: propName1,
        isInView: isInView,
        scrollTop: scrollTop,
        scrollIntoView: scrollIntoView,
        scrolledOver: scrolledOver,
        scrollParents: scrollParents,
        offsetViewport: offsetViewport
    });
    function globalAPI(UIkit) {
        var DATA = UIkit.data;
        UIkit.use = function(plugin) {
            if (plugin.installed) return;
            plugin.call(null, this);
            plugin.installed = true;
            return this;
        };
        UIkit.mixin = function(mixin, component) {
            component = (isString(component) ? UIkit.component(component) : component) || this;
            component.options = mergeOptions(component.options, mixin);
        };
        UIkit.extend = function(options2) {
            options2 = options2 || {};
            var Super = this;
            var Sub = function UIkitComponent(options) {
                this._init(options);
            };
            Sub.prototype = Object.create(Super.prototype);
            Sub.prototype.constructor = Sub;
            Sub.options = mergeOptions(Super.options, options2);
            Sub.super = Super;
            Sub.extend = Super.extend;
            return Sub;
        };
        UIkit.update = function(element13, e) {
            element13 = element13 ? toNode(element13) : document.body;
            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
            try {
                for(var _iterator = parents(element13).reverse()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                    var parentEl = _step.value;
                    update(parentEl[DATA], e);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally{
                try {
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                    }
                } finally{
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
            apply(element13, function(element) {
                return update(element[DATA], e);
            });
        };
        var container;
        Object.defineProperty(UIkit, 'container', {
            get: function() {
                return container || document.body;
            },
            set: function(element) {
                container = $(element);
            }
        });
        function update(data, e) {
            if (!data) return;
            for(var name in data)if (data[name]._connected) data[name]._callUpdate(e);
        }
    }
    function hooksAPI(UIkit) {
        UIkit.prototype._callHook = function(hook) {
            var _this = this;
            var _this$$options$hook;
            (_this$$options$hook = this.$options[hook]) == null || _this$$options$hook.forEach(function(handler) {
                return handler.call(_this);
            });
        };
        UIkit.prototype._callConnected = function() {
            if (this._connected) return;
            this._data = {};
            this._computed = {};
            this._initProps();
            this._callHook('beforeConnect');
            this._connected = true;
            this._initEvents();
            this._initObservers();
            this._callHook('connected');
            this._callUpdate();
        };
        UIkit.prototype._callDisconnected = function() {
            if (!this._connected) return;
            this._callHook('beforeDisconnect');
            this._disconnectObservers();
            this._unbindEvents();
            this._callHook('disconnected');
            this._connected = false;
            delete this._watch;
        };
        UIkit.prototype._callUpdate = function(e) {
            if (e === void 0) e = 'update';
            if (!this._connected) return;
            if (e === 'update' || e === 'resize') this._callWatches();
            if (!this.$options.update) return;
            if (!this._updates) {
                var _this = this;
                this._updates = new Set();
                fastdom.read(function() {
                    if (_this._connected) runUpdates.call(_this, _this._updates);
                    delete _this._updates;
                });
            }
            this._updates.add(e.type || e);
        };
        UIkit.prototype._callWatches = function() {
            var _this = this;
            if (this._watch) return;
            var initial = !hasOwn(this, '_watch');
            this._watch = fastdom.read(function() {
                if (_this._connected) runWatches.call(_this, initial);
                _this._watch = null;
            });
        };
        function runUpdates(types) {
            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
            try {
                var _this = this, _loop = function(_iterator, _step) {
                    var _value = _step.value, read = _value.read, write = _value.write, _events = _value.events, events = _events === void 0 ? [] : _events;
                    var _this1 = _this;
                    if (!types.has('update') && !events.some(function(type) {
                        return types.has(type);
                    })) return "continue";
                    var result = void 0;
                    if (read) {
                        result = read.call(_this, _this._data, types);
                        if (result && isPlainObject(result)) assign(_this._data, result);
                    }
                    if (write && result !== false) fastdom.write(function() {
                        return write.call(_this1, _this1._data, types);
                    });
                };
                for(var _iterator = this.$options.update[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop(_iterator, _step);
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally{
                try {
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                    }
                } finally{
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
        function runWatches(initial) {
            var ref = this, computed = ref.$options.computed;
            var values = _helpers.objectSpread({}, initial ? {} : this._computed);
            this._computed = {};
            for(var key in computed){
                var _key = computed[key], watch = _key.watch, immediate = _key.immediate;
                if (watch && (initial && immediate || hasOwn(values, key) && !isEqual(values[key], this[key]))) watch.call(this, this[key], values[key]);
            }
        }
    }
    function stateAPI(UIkit) {
        var uid = 0;
        UIkit.prototype._init = function(options) {
            options = options || {};
            options.data = normalizeData(options, this.constructor.options);
            this.$options = mergeOptions(this.constructor.options, options, this);
            this.$el = null;
            this.$props = {};
            this._uid = uid++;
            this._initData();
            this._initMethods();
            this._initComputeds();
            this._callHook('created');
            if (options.el) this.$mount(options.el);
        };
        UIkit.prototype._initData = function() {
            var _$options = this.$options, _data = _$options.data, _$data = _data === void 0 ? {} : _data;
            for(var key in _$data)this.$props[key] = this[key] = _$data[key];
        };
        UIkit.prototype._initMethods = function() {
            var methods = this.$options.methods;
            if (methods) for(var key in methods)this[key] = methods[key].bind(this);
        };
        UIkit.prototype._initComputeds = function() {
            var computed = this.$options.computed;
            this._computed = {};
            if (computed) for(var key in computed)registerComputed(this, key, computed[key]);
        };
        UIkit.prototype._initProps = function(props) {
            var key;
            props = props || getProps$1(this.$options, this.$name);
            for(key in props)if (!isUndefined(props[key])) this.$props[key] = props[key];
            var exclude = [
                this.$options.computed,
                this.$options.methods
            ];
            for(key in this.$props)if (key in props && notIn(exclude, key)) this[key] = this.$props[key];
        };
        UIkit.prototype._initEvents = function() {
            this._events = [];
            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
            try {
                for(var _iterator = (this.$options.events || [])[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                    var event = _step.value;
                    if (hasOwn(event, 'handler')) registerEvent(this, event);
                    else for(var key in event)registerEvent(this, event[key], key);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally{
                try {
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                    }
                } finally{
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        };
        UIkit.prototype._unbindEvents = function() {
            this._events.forEach(function(unbind) {
                return unbind();
            });
            delete this._events;
        };
        UIkit.prototype._initObservers = function() {
            this._observers = [
                initPropsObserver(this)
            ];
            if (this.$options.computed) this.registerObserver(initChildListObserver(this));
        };
        UIkit.prototype.registerObserver = function(observer) {
            this._observers.push(observer);
        };
        UIkit.prototype._disconnectObservers = function() {
            this._observers.forEach(function(observer) {
                return observer == null ? void 0 : observer.disconnect();
            });
        };
    }
    function getProps$1(opts, name) {
        var data$1 = {};
        var _args = opts.args, args = _args === void 0 ? [] : _args, _props = opts.props, props = _props === void 0 ? {} : _props, el = opts.el;
        if (!props) return data$1;
        for(var key in props){
            var prop = hyphenate(key);
            var value = data1(el, prop);
            if (isUndefined(value)) continue;
            value = props[key] === Boolean && value === '' ? true : coerce$1(props[key], value);
            if (prop === 'target' && (!value || startsWith(value, '_'))) continue;
            data$1[key] = value;
        }
        var options = parseOptions(data1(el, name), args);
        for(var key3 in options){
            var prop2 = camelize(key3);
            if (props[prop2] !== undefined) data$1[prop2] = coerce$1(props[prop2], options[key3]);
        }
        return data$1;
    }
    function registerComputed(component, key, cb) {
        Object.defineProperty(component, key, {
            enumerable: true,
            get: function() {
                var _computed = component._computed, $props = component.$props, $el = component.$el;
                if (!hasOwn(_computed, key)) _computed[key] = (cb.get || cb).call(component, $props, $el);
                return _computed[key];
            },
            set: function(value) {
                var _computed = component._computed;
                _computed[key] = cb.set ? cb.set.call(component, value) : value;
                if (isUndefined(_computed[key])) delete _computed[key];
            }
        });
    }
    function registerEvent(component, event, key) {
        if (!isPlainObject(event)) event = {
            name: key,
            handler: event
        };
        var name = event.name, el1 = event.el, handler = event.handler, capture = event.capture, passive = event.passive, delegate = event.delegate, filter = event.filter, self = event.self;
        el1 = isFunction(el1) ? el1.call(component) : el1 || component.$el;
        if (isArray(el1)) {
            el1.forEach(function(el) {
                return registerEvent(component, _helpers.objectSpread({}, event, {
                    el: el
                }), key);
            });
            return;
        }
        if (!el1 || filter && !filter.call(component)) return;
        component._events.push(on(el1, name, delegate ? isString(delegate) ? delegate : delegate.call(component) : null, isString(handler) ? component[handler] : handler.bind(component), {
            passive: passive,
            capture: capture,
            self: self
        }));
    }
    function notIn(options, key) {
        return options.every(function(arr) {
            return !arr || !hasOwn(arr, key);
        });
    }
    function coerce$1(type, value) {
        if (type === Boolean) return toBoolean(value);
        else if (type === Number) return toNumber(value);
        else if (type === 'list') return toList(value);
        return type ? type(value) : value;
    }
    function toList(value3) {
        return isArray(value3) ? value3 : isString(value3) ? value3.split(/,(?![^(]*\))/).map(function(value) {
            return isNumeric(value) ? toNumber(value) : toBoolean(value.trim());
        }) : [
            value3
        ];
    }
    function normalizeData(_ref, _ref2) {
        var _data = _ref.data, _$data = _data === void 0 ? {} : _data;
        var _args = _ref2.args, args = _args === void 0 ? [] : _args, _props = _ref2.props, props = _props === void 0 ? {} : _props;
        if (isArray(_$data)) _$data = _$data.slice(0, args.length).reduce(function(data, value, index) {
            if (isPlainObject(value)) assign(data, value);
            else data[args[index]] = value;
            return data;
        }, {});
        for(var key in _$data){
            if (isUndefined(_$data[key])) delete _$data[key];
            else if (props[key]) _$data[key] = coerce$1(props[key], _$data[key]);
        }
        return _$data;
    }
    function initChildListObserver(component) {
        var el = component.$options.el;
        var observer = new MutationObserver(function() {
            return component.$emit();
        });
        observer.observe(el, {
            childList: true,
            subtree: true
        });
        return observer;
    }
    function initPropsObserver(component) {
        var $name = component.$name, $options = component.$options, $props = component.$props;
        var attrs = $options.attrs, props = $options.props, el = $options.el;
        if (!props || attrs === false) return;
        var attributes = isArray(attrs) ? attrs : Object.keys(props);
        var filter = attributes.map(function(key) {
            return hyphenate(key);
        }).concat($name);
        var observer = new MutationObserver(function(records) {
            var _$data = getProps$1($options, $name);
            if (records.some(function(_ref3) {
                var attributeName = _ref3.attributeName;
                var prop3 = attributeName.replace('data-', '');
                return (prop3 === $name ? attributes : [
                    camelize(prop3),
                    camelize(attributeName)
                ]).some(function(prop) {
                    return !isUndefined(_$data[prop]) && _$data[prop] !== $props[prop];
                });
            })) component.$reset();
        });
        observer.observe(el, {
            attributes: true,
            attributeFilter: filter.concat(filter.map(function(key) {
                return "data-" + key;
            }))
        });
        return observer;
    }
    function instanceAPI(UIkit) {
        var DATA = UIkit.data;
        UIkit.prototype.$create = function(component, element, data) {
            return UIkit[component](element, data);
        };
        UIkit.prototype.$mount = function(el) {
            var name = this.$options.name;
            if (!el[DATA]) el[DATA] = {};
            if (el[DATA][name]) return;
            el[DATA][name] = this;
            this.$el = this.$options.el = this.$options.el || el;
            if (within(el, document)) this._callConnected();
        };
        UIkit.prototype.$reset = function() {
            this._callDisconnected();
            this._callConnected();
        };
        UIkit.prototype.$destroy = function(removeEl) {
            if (removeEl === void 0) removeEl = false;
            var _$options = this.$options, el = _$options.el, name = _$options.name;
            if (el) this._callDisconnected();
            this._callHook('destroy');
            if (!(el != null && el[DATA])) return;
            delete el[DATA][name];
            if (!isEmpty(el[DATA])) delete el[DATA];
            if (removeEl) remove$1(this.$el);
        };
        UIkit.prototype.$emit = function(e) {
            this._callUpdate(e);
        };
        UIkit.prototype.$update = function(element, e) {
            if (element === void 0) element = this.$el;
            UIkit.update(element, e);
        };
        UIkit.prototype.$getComponent = UIkit.getComponent;
        var componentName = memoize(function(name) {
            return UIkit.prefix + hyphenate(name);
        });
        Object.defineProperties(UIkit.prototype, {
            $container: Object.getOwnPropertyDescriptor(UIkit, 'container'),
            $name: {
                get: function() {
                    return componentName(this.$options.name);
                }
            }
        });
    }
    function componentAPI(UIkit) {
        var DATA = UIkit.data;
        var components = {};
        UIkit.component = function(name, options) {
            var id = hyphenate(name);
            name = camelize(id);
            if (!options) {
                if (isPlainObject(components[name])) components[name] = UIkit.extend(components[name]);
                return components[name];
            }
            UIkit[name] = function(element14, data) {
                var component = UIkit.component(name);
                return component.options.functional ? new component({
                    data: isPlainObject(element14) ? element14 : Array.prototype.slice.call(arguments)
                }) : element14 ? $$(element14).map(init)[0] : init();
                function init(element) {
                    var instance = UIkit.getComponent(element, name);
                    if (instance) {
                        if (data) {
                            instance.$destroy();
                        } else {
                            return instance;
                        }
                    }
                    return new component({
                        el: element,
                        data: data
                    });
                }
            };
            var opt = isPlainObject(options) ? _helpers.objectSpread({}, options) : options.options;
            opt.name = name;
            opt.install == null || opt.install(UIkit, opt, name);
            if (UIkit._initialized && !opt.functional) fastdom.read(function() {
                return UIkit[name]("[uk-" + id + "],[data-uk-" + id + "]");
            });
            return components[name] = isPlainObject(options) ? opt : options;
        };
        UIkit.getComponents = function(element) {
            return (element == null ? void 0 : element[DATA]) || {};
        };
        UIkit.getComponent = function(element, name) {
            return UIkit.getComponents(element)[name];
        };
        UIkit.connect = function(node) {
            if (node[DATA]) for(var name in node[DATA])node[DATA][name]._callConnected();
            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
            try {
                for(var _iterator = node.attributes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                    var attribute = _step.value;
                    var name1 = getComponentName(attribute.name);
                    if (name1 && name1 in components) UIkit[name1](node);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally{
                try {
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                    }
                } finally{
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        };
        UIkit.disconnect = function(node) {
            for(var name in node[DATA])node[DATA][name]._callDisconnected();
        };
    }
    var getComponentName = memoize(function(attribute) {
        return startsWith(attribute, 'uk-') || startsWith(attribute, 'data-uk-') ? camelize(attribute.replace('data-uk-', '').replace('uk-', '')) : false;
    });
    var UIkit1 = function UIkit1(options) {
        this._init(options);
    };
    UIkit1.util = util;
    UIkit1.data = '__uikit__';
    UIkit1.prefix = 'uk-';
    UIkit1.options = {};
    UIkit1.version = '3.14.0';
    globalAPI(UIkit1);
    hooksAPI(UIkit1);
    stateAPI(UIkit1);
    componentAPI(UIkit1);
    instanceAPI(UIkit1);
    function boot(UIkit) {
        var connect = UIkit.connect, disconnect = UIkit.disconnect;
        if (!inBrowser || !window.MutationObserver) return;
        fastdom.read(function() {
            if (document.body) apply(document.body, connect);
            new MutationObserver(function(records) {
                return records.forEach(applyChildListMutation);
            }).observe(document, {
                childList: true,
                subtree: true
            });
            new MutationObserver(function(records) {
                return records.forEach(applyAttributeMutation);
            }).observe(document, {
                attributes: true,
                subtree: true
            });
            UIkit._initialized = true;
        });
        function applyChildListMutation(_ref) {
            var addedNodes = _ref.addedNodes, removedNodes = _ref.removedNodes;
            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
            try {
                for(var _iterator = addedNodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                    var node = _step.value;
                    apply(node, connect);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally{
                try {
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                    }
                } finally{
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
            var _iteratorNormalCompletion7 = true, _didIteratorError7 = false, _iteratorError7 = undefined;
            try {
                for(var _iterator7 = removedNodes[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true){
                    var node1 = _step7.value;
                    apply(node1, disconnect);
                }
            } catch (err) {
                _didIteratorError7 = true;
                _iteratorError7 = err;
            } finally{
                try {
                    if (!_iteratorNormalCompletion7 && _iterator7.return != null) {
                        _iterator7.return();
                    }
                } finally{
                    if (_didIteratorError7) {
                        throw _iteratorError7;
                    }
                }
            }
        }
        function applyAttributeMutation(_ref2) {
            var _UIkit$getComponent;
            var target = _ref2.target, attributeName = _ref2.attributeName;
            var name = getComponentName(attributeName);
            if (!name || !(name in UIkit)) return;
            if (hasAttr(target, attributeName)) {
                UIkit[name](target);
                return;
            }
            (_UIkit$getComponent = UIkit.getComponent(target, name)) == null || _UIkit$getComponent.$destroy();
        }
    }
    var Class = {
        connected: function() {
            !hasClass(this.$el, this.$name) && addClass(this.$el, this.$name);
        }
    };
    var Lazyload = {
        methods: {
            lazyload: function(observeTargets, targets) {
                if (observeTargets === void 0) observeTargets = this.$el;
                if (targets === void 0) targets = this.$el;
                this.registerObserver(observeIntersection(observeTargets, function(entries, observer) {
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator = toNodes(isFunction(targets) ? targets() : targets)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var el3 = _step.value;
                            $$('[loading="lazy"]', el3).forEach(function(el) {
                                return removeAttr(el, 'loading');
                            });
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    var _iteratorNormalCompletion8 = true, _didIteratorError8 = false, _iteratorError8 = undefined;
                    try {
                        for(var _iterator8 = entries.filter(function(_ref) {
                            var isIntersecting = _ref.isIntersecting;
                            return isIntersecting;
                        }).map(function(_ref2) {
                            var target = _ref2.target;
                            return target;
                        })[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true){
                            var el2 = _step8.value;
                            observer.unobserve(el2);
                        }
                    } catch (err) {
                        _didIteratorError8 = true;
                        _iteratorError8 = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion8 && _iterator8.return != null) {
                                _iterator8.return();
                            }
                        } finally{
                            if (_didIteratorError8) {
                                throw _iteratorError8;
                            }
                        }
                    }
                }));
            }
        }
    };
    var Togglable = {
        props: {
            cls: Boolean,
            animation: 'list',
            duration: Number,
            origin: String,
            transition: String
        },
        data: {
            cls: false,
            animation: [
                false
            ],
            duration: 200,
            origin: false,
            transition: 'linear',
            clsEnter: 'uk-togglabe-enter',
            clsLeave: 'uk-togglabe-leave',
            initProps: {
                overflow: '',
                height: '',
                paddingTop: '',
                paddingBottom: '',
                marginTop: '',
                marginBottom: ''
            },
            hideProps: {
                overflow: 'hidden',
                height: 0,
                paddingTop: 0,
                paddingBottom: 0,
                marginTop: 0,
                marginBottom: 0
            }
        },
        computed: {
            hasAnimation: function(_ref) {
                var animation = _ref.animation;
                return !!animation[0];
            },
            hasTransition: function(_ref2) {
                var animation = _ref2.animation;
                return this.hasAnimation && animation[0] === true;
            }
        },
        methods: {
            toggleElement: function(targets, toggle, animate) {
                var _this = this;
                return new Promise(function(resolve) {
                    return Promise.all(toNodes(targets).map(function(el) {
                        var _this2 = _this;
                        var show = isBoolean(toggle) ? toggle : !_this.isToggled(el);
                        if (!trigger(el, "before" + (show ? 'show' : 'hide'), [
                            _this
                        ])) return Promise.reject();
                        var promise = (isFunction(animate) ? animate : animate === false || !_this.hasAnimation ? _this._toggle : _this.hasTransition ? toggleHeight(_this) : toggleAnimation(_this))(el, show);
                        var cls = show ? _this.clsEnter : _this.clsLeave;
                        addClass(el, cls);
                        trigger(el, show ? 'show' : 'hide', [
                            _this
                        ]);
                        var done = function() {
                            removeClass(el, cls);
                            trigger(el, show ? 'shown' : 'hidden', [
                                _this2
                            ]);
                            _this2.$update(el);
                        };
                        return promise ? promise.then(done, function() {
                            removeClass(el, cls);
                            return Promise.reject();
                        }) : done();
                    })).then(resolve, noop);
                });
            },
            isToggled: function(el) {
                if (el === void 0) el = this.$el;
                var ref;
                ref = _helpers.slicedToArray(toNodes(el), 1), el = ref[0], ref;
                return hasClass(el, this.clsEnter) ? true : hasClass(el, this.clsLeave) ? false : this.cls ? hasClass(el, this.cls.split(' ')[0]) : isVisible(el);
            },
            _toggle: function(el6, toggled) {
                if (!el6) return;
                toggled = Boolean(toggled);
                var changed;
                if (this.cls) {
                    changed = includes(this.cls, ' ') || toggled !== hasClass(el6, this.cls);
                    changed && toggleClass(el6, this.cls, includes(this.cls, ' ') ? undefined : toggled);
                } else {
                    changed = toggled === el6.hidden;
                    changed && (el6.hidden = !toggled);
                }
                $$('[autofocus]', el6).some(function(el) {
                    return isVisible(el) ? el.focus() || true : el.blur();
                });
                if (changed) {
                    trigger(el6, 'toggled', [
                        toggled,
                        this
                    ]);
                    this.$update(el6);
                }
            }
        }
    };
    function toggleHeight(_ref3) {
        var isToggled = _ref3.isToggled, duration = _ref3.duration, initProps = _ref3.initProps, hideProps = _ref3.hideProps, _$transition = _ref3.transition, _toggle = _ref3._toggle;
        return function(el, show) {
            var inProgress = Transition.inProgress(el);
            var inner = el.hasChildNodes() ? toFloat(css1(el.firstElementChild, 'marginTop')) + toFloat(css1(el.lastElementChild, 'marginBottom')) : 0;
            var currentHeight = isVisible(el) ? height1(el) + (inProgress ? 0 : inner) : 0;
            Transition.cancel(el);
            if (!isToggled(el)) _toggle(el, true);
            height1(el, '');
            // Update child components first
            fastdom.flush();
            var endHeight = height1(el) + (inProgress ? 0 : inner);
            height1(el, currentHeight);
            return (show ? Transition.start(el, _helpers.objectSpread({}, initProps, {
                overflow: 'hidden',
                height: endHeight
            }), Math.round(duration * (1 - currentHeight / endHeight)), _$transition) : Transition.start(el, hideProps, Math.round(duration * (currentHeight / endHeight)), _$transition).then(function() {
                return _toggle(el, false);
            })).then(function() {
                return css1(el, initProps);
            });
        };
    }
    function toggleAnimation(cmp) {
        return function(el, show) {
            Animation.cancel(el);
            var animation = cmp.animation, duration = cmp.duration, _toggle = cmp._toggle;
            if (show) {
                _toggle(el, true);
                return Animation.in(el, animation[0], duration, cmp.origin);
            }
            return Animation.out(el, animation[1] || animation[0], duration, cmp.origin).then(function() {
                return _toggle(el, false);
            });
        };
    }
    var Accordion = {
        mixins: [
            Class,
            Lazyload,
            Togglable
        ],
        props: {
            targets: String,
            active: null,
            collapsible: Boolean,
            multiple: Boolean,
            toggle: String,
            content: String,
            transition: String,
            offset: Number
        },
        data: {
            targets: '> *',
            active: false,
            animation: [
                true
            ],
            collapsible: true,
            multiple: false,
            clsOpen: 'uk-open',
            toggle: '> .uk-accordion-title',
            content: '> .uk-accordion-content',
            transition: 'ease',
            offset: 0
        },
        computed: {
            items: {
                get: function(_ref, $el) {
                    var _this = this;
                    var targets = _ref.targets;
                    return $$(targets, $el).filter(function(el) {
                        return $(_this.content, el);
                    });
                },
                watch: function(items, prev) {
                    var _this = this;
                    items.forEach(function(el) {
                        return hide1($(_this.content, el), !hasClass(el, _this.clsOpen));
                    });
                    if (prev || hasClass(items, this.clsOpen)) return;
                    var active = this.active !== false && items[Number(this.active)] || !this.collapsible && items[0];
                    if (active) this.toggle(active, false);
                },
                immediate: true
            },
            toggles: function(_ref2) {
                var toggle = _ref2.toggle;
                return this.items.map(function(item) {
                    return $(toggle, item);
                });
            }
        },
        connected: function() {
            this.lazyload();
        },
        events: [
            {
                name: 'click',
                delegate: function() {
                    return this.targets + " " + this.$props.toggle;
                },
                handler: function(e) {
                    e.preventDefault();
                    this.toggle(index1(this.toggles, e.current));
                }
            }
        ],
        methods: {
            toggle: function(item, animate) {
                var items = [
                    this.items[getIndex(item, this.items)]
                ];
                var activeItems = filter$1(this.items, "." + this.clsOpen);
                if (!this.multiple && !includes(activeItems, items[0])) items = items.concat(activeItems);
                if (!this.collapsible && activeItems.length < 2 && !filter$1(items, ":not(." + this.clsOpen + ")").length) return;
                var _this = this;
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = items[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var el7 = _step.value;
                        this.toggleElement(el7, !hasClass(el7, this.clsOpen), function() {
                            var _ref = _helpers.asyncToGenerator(_regeneratorRuntimeDefault.default.mark(function _callee(el, show) {
                                var content, toggle;
                                return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                                    while(1)switch(_ctx.prev = _ctx.next){
                                        case 0:
                                            toggleClass(el, _this.clsOpen, show);
                                            attr1($(_this.$props.toggle, el), 'aria-expanded', show);
                                            content = $("" + (el._wrapper ? '> * ' : '') + _this.content, el);
                                            if (!(animate === false || !_this.hasTransition)) {
                                                _ctx.next = 6;
                                                break;
                                            }
                                            hide1(content, !show);
                                            return _ctx.abrupt("return");
                                        case 6:
                                            if (!el._wrapper) el._wrapper = wrapAll(content, "<div" + (show ? ' hidden' : '') + ">");
                                            hide1(content, false);
                                            _ctx.next = 10;
                                            return toggleHeight(_this)(el._wrapper, show);
                                        case 10:
                                            hide1(content, !show);
                                            delete el._wrapper;
                                            unwrap(content);
                                            if (show) {
                                                toggle = $(_this.$props.toggle, el);
                                                fastdom.read(function() {
                                                    if (!isInView(toggle)) scrollIntoView(toggle, {
                                                        offset: _this.offset
                                                    });
                                                });
                                            }
                                        case 14:
                                        case "end":
                                            return _ctx.stop();
                                    }
                                }, _callee);
                            }));
                            return function(el, show) {
                                return _ref.apply(this, arguments);
                            };
                        }());
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        }
    };
    function hide1(el, hide) {
        el && (el.hidden = hide);
    }
    var alert = {
        mixins: [
            Class,
            Togglable
        ],
        args: 'animation',
        props: {
            close: String
        },
        data: {
            animation: [
                true
            ],
            selClose: '.uk-alert-close',
            duration: 150,
            hideProps: _helpers.objectSpread({
                opacity: 0
            }, Togglable.data.hideProps)
        },
        events: [
            {
                name: 'click',
                delegate: function() {
                    return this.selClose;
                },
                handler: function(e) {
                    e.preventDefault();
                    this.close();
                }
            }
        ],
        methods: {
            close: function() {
                return _helpers.asyncToGenerator(_regeneratorRuntimeDefault.default.mark(function _callee() {
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                _ctx.next = 2;
                                return this.toggleElement(this.$el);
                            case 2:
                                this.$destroy(true);
                            case 3:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this);
                })).apply(this);
            }
        }
    };
    var Video = {
        args: 'autoplay',
        props: {
            automute: Boolean,
            autoplay: Boolean
        },
        data: {
            automute: false,
            autoplay: true
        },
        connected: function() {
            var _this = this;
            this.inView = this.autoplay === 'inview';
            if (this.inView && !hasAttr(this.$el, 'preload')) this.$el.preload = 'none';
            if (this.automute) mute(this.$el);
            this.registerObserver(observeIntersection(this.$el, function() {
                return _this.$emit();
            }, {}, false));
        },
        update: {
            read: function() {
                if (!isVideo(this.$el)) return false;
                return {
                    visible: isVisible(this.$el) && css1(this.$el, 'visibility') !== 'hidden',
                    inView: this.inView && isInView(this.$el)
                };
            },
            write: function(_ref) {
                var visible = _ref.visible, inView = _ref.inView;
                if (!visible || this.inView && !inView) pause(this.$el);
                else if (this.autoplay === true || this.inView && inView) play(this.$el);
            }
        }
    };
    var Resize = {
        connected: function() {
            var _this = this;
            var _this$$options$resize;
            this.registerObserver(observeResize(((_this$$options$resize = this.$options.resizeTargets) == null ? void 0 : _this$$options$resize.call(this)) || this.$el, function() {
                return _this.$emit('resize');
            }));
        }
    };
    var cover1 = {
        mixins: [
            Resize,
            Video
        ],
        props: {
            width: Number,
            height: Number
        },
        data: {
            automute: true
        },
        events: {
            'load loadedmetadata': function() {
                this.$emit('resize');
            }
        },
        resizeTargets: function() {
            return [
                this.$el,
                parent1(this.$el)
            ];
        },
        update: {
            read: function() {
                var _$ratio = Dimensions.ratio, cover = Dimensions.cover;
                var ref = this, $el = ref.$el, width = ref.width, height = ref.height;
                var dim = {
                    width: width,
                    height: height
                };
                if (!dim.width || !dim.height) {
                    var intrinsic = {
                        width: $el.naturalWidth || $el.videoWidth || $el.clientWidth,
                        height: $el.naturalHeight || $el.videoHeight || $el.clientHeight
                    };
                    if (dim.width) dim = _$ratio(intrinsic, 'width', dim.width);
                    else if (height) dim = _$ratio(intrinsic, 'height', dim.height);
                    else dim = intrinsic;
                }
                var ref8 = getPositionedParent($el) || parent1($el), coverHeight = ref8.offsetHeight, coverWidth = ref8.offsetWidth;
                var coverDim = cover(dim, {
                    width: coverWidth + (coverWidth % 2 ? 1 : 0),
                    height: coverHeight + (coverHeight % 2 ? 1 : 0)
                });
                if (!coverDim.width || !coverDim.height) return false;
                return coverDim;
            },
            write: function(_ref) {
                var height = _ref.height, width = _ref.width;
                css1(this.$el, {
                    height: height,
                    width: width
                });
            },
            events: [
                'resize'
            ]
        }
    };
    function getPositionedParent(el) {
        while(el = parent1(el)){
            if (css1(el, 'position') !== 'static') return el;
        }
    }
    var Container = {
        props: {
            container: Boolean
        },
        data: {
            container: true
        },
        computed: {
            container: function(_ref) {
                var container = _ref.container;
                return container === true && this.$container || container && $(container);
            }
        }
    };
    var Position = {
        props: {
            pos: String,
            offset: null,
            flip: Boolean
        },
        data: {
            pos: "bottom-" + (isRtl ? 'right' : 'left'),
            flip: true,
            offset: false,
            viewportPadding: 10
        },
        connected: function() {
            this.pos = this.$props.pos.split('-').concat('center').slice(0, 2);
            this.axis = includes([
                'top',
                'bottom'
            ], this.pos[0]) ? 'y' : 'x';
        },
        methods: {
            positionAt: function(element, target, boundary) {
                var _pos = _helpers.slicedToArray(this.pos, 2), dir = _pos[0], align = _pos[1];
                var ref = this, offset$1 = ref.offset;
                if (!isNumeric(offset$1)) {
                    var node = $(offset$1);
                    offset$1 = node ? offset1(node)[this.axis === 'x' ? 'left' : 'top'] - offset1(target)[this.axis === 'x' ? 'right' : 'bottom'] : 0;
                }
                offset$1 = toPx(offset$1) + toPx(getCssVar('position-offset', element));
                offset$1 = [
                    includes([
                        'left',
                        'top'
                    ], dir) ? -offset$1 : +offset$1,
                    0
                ];
                var attach = {
                    element: [
                        flipPosition(dir),
                        align
                    ],
                    target: [
                        dir,
                        align
                    ]
                };
                if (this.axis === 'y') {
                    for(var prop in attach)attach[prop] = attach[prop].reverse();
                    offset$1 = offset$1.reverse();
                }
                positionAt(element, target, {
                    attach: attach,
                    offset: offset$1,
                    boundary: boundary,
                    viewportPadding: this.viewportPadding,
                    flip: this.flip
                });
            }
        }
    };
    var active$1;
    var drop = {
        mixins: [
            Container,
            Lazyload,
            Position,
            Togglable
        ],
        args: 'pos',
        props: {
            mode: 'list',
            toggle: Boolean,
            boundary: Boolean,
            boundaryAlign: Boolean,
            delayShow: Number,
            delayHide: Number,
            display: String,
            clsDrop: String
        },
        data: {
            mode: [
                'click',
                'hover'
            ],
            toggle: '- *',
            boundary: true,
            boundaryAlign: false,
            delayShow: 0,
            delayHide: 800,
            display: null,
            clsDrop: false,
            animation: [
                'uk-animation-fade'
            ],
            cls: 'uk-open',
            container: false
        },
        created: function() {
            this.tracker = new MouseTracker();
        },
        beforeConnect: function() {
            this.clsDrop = this.$props.clsDrop || "uk-" + this.$options.name;
        },
        connected: function() {
            addClass(this.$el, this.clsDrop);
            if (this.toggle && !this.target) {
                this.target = this.$create('toggle', query(this.toggle, this.$el), {
                    target: this.$el,
                    mode: this.mode
                }).$el;
                attr1(this.target, 'aria-haspopup', true);
                this.lazyload(this.target);
            }
        },
        disconnected: function() {
            if (this.isActive()) active$1 = null;
        },
        events: [
            {
                name: 'click',
                delegate: function() {
                    return "." + this.clsDrop + "-close";
                },
                handler: function(e) {
                    e.preventDefault();
                    this.hide(false);
                }
            },
            {
                name: 'click',
                delegate: function() {
                    return 'a[href^="#"]';
                },
                handler: function(_ref) {
                    var defaultPrevented = _ref.defaultPrevented, hash = _ref.current.hash;
                    if (!defaultPrevented && hash && !within(hash, this.$el)) this.hide(false);
                }
            },
            {
                name: 'beforescroll',
                handler: function() {
                    this.hide(false);
                }
            },
            {
                name: 'toggle',
                self: true,
                handler: function(e, toggle) {
                    e.preventDefault();
                    if (this.isToggled()) this.hide(false);
                    else this.show(toggle == null ? void 0 : toggle.$el, false);
                }
            },
            {
                name: 'toggleshow',
                self: true,
                handler: function(e, toggle) {
                    e.preventDefault();
                    this.show(toggle == null ? void 0 : toggle.$el);
                }
            },
            {
                name: 'togglehide',
                self: true,
                handler: function(e) {
                    e.preventDefault();
                    if (!matches(this.$el, ':focus,:hover')) this.hide();
                }
            },
            {
                name: pointerEnter + " focusin",
                filter: function() {
                    return includes(this.mode, 'hover');
                },
                handler: function(e) {
                    if (!isTouch(e)) this.clearTimers();
                }
            },
            {
                name: pointerLeave + " focusout",
                filter: function() {
                    return includes(this.mode, 'hover');
                },
                handler: function(e) {
                    if (!isTouch(e) && e.relatedTarget) this.hide();
                }
            },
            {
                name: 'toggled',
                self: true,
                handler: function(e, toggled) {
                    if (!toggled) return;
                    this.clearTimers();
                    this.position();
                }
            },
            {
                name: 'show',
                self: true,
                handler: function() {
                    var _this = this;
                    active$1 = this;
                    this.tracker.init();
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator = [
                            on(document, pointerDown, function(_ref2) {
                                var _this3 = _this;
                                var target = _ref2.target;
                                return !within(target, _this.$el) && once(document, pointerUp + " " + pointerCancel + " scroll", function(_ref3) {
                                    var defaultPrevented = _ref3.defaultPrevented, type = _ref3.type, newTarget = _ref3.target;
                                    if (!defaultPrevented && type === pointerUp && target === newTarget && !(_this3.target && within(target, _this3.target))) _this3.hide(false);
                                }, true);
                            }),
                            on(document, 'keydown', function(e) {
                                if (e.keyCode === 27) _this.hide(false);
                            })
                        ].concat(_helpers.toConsumableArray(this.display === 'static' ? [] : function() {
                            var _this4 = _this;
                            var handler = function() {
                                return _this4.$emit();
                            };
                            return [
                                on(window, 'resize', handler),
                                on(document, 'scroll', handler, true),
                                function() {
                                    var observer = observeResize(scrollParents(_this4.$el), handler);
                                    return function() {
                                        return observer.disconnect();
                                    };
                                }()
                            ];
                        }()))[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var handler1 = _step.value;
                            once(this.$el, 'hide', handler1, {
                                self: true
                            });
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                }
            },
            {
                name: 'beforehide',
                self: true,
                handler: function() {
                    this.clearTimers();
                }
            },
            {
                name: 'hide',
                handler: function(_ref4) {
                    var target = _ref4.target;
                    if (this.$el !== target) {
                        active$1 = active$1 === null && within(target, this.$el) && this.isToggled() ? this : active$1;
                        return;
                    }
                    active$1 = this.isActive() ? null : active$1;
                    this.tracker.cancel();
                }
            }
        ],
        update: {
            write: function() {
                if (this.isToggled() && !hasClass(this.$el, this.clsEnter)) this.position();
            }
        },
        methods: {
            show: function(target, delay) {
                var _this = this;
                if (target === void 0) target = this.target;
                if (delay === void 0) delay = true;
                if (this.isToggled() && target && this.target && target !== this.target) this.hide(false);
                this.target = target;
                this.clearTimers();
                if (this.isActive()) return;
                if (active$1) {
                    if (delay && active$1.isDelaying) {
                        var _this5 = this;
                        this.showTimer = setTimeout(function() {
                            return matches(target, ':hover') && _this5.show();
                        }, 10);
                        return;
                    }
                    var prev;
                    while(active$1 && prev !== active$1 && !within(this.$el, active$1.$el)){
                        prev = active$1;
                        active$1.hide(false);
                    }
                }
                if (this.container && parent1(this.$el) !== this.container) append(this.container, this.$el);
                this.showTimer = setTimeout(function() {
                    return _this.toggleElement(_this.$el, true);
                }, delay && this.delayShow || 0);
            },
            hide: function(delay) {
                var _this = this;
                if (delay === void 0) delay = true;
                var hide = function() {
                    return _this.toggleElement(_this.$el, false, false);
                };
                this.clearTimers();
                this.isDelaying = getPositionedElements(this.$el).some(function(el) {
                    return _this.tracker.movesTo(el);
                });
                if (delay && this.isDelaying) this.hideTimer = setTimeout(this.hide, 50);
                else if (delay && this.delayHide) this.hideTimer = setTimeout(hide, this.delayHide);
                else hide();
            },
            clearTimers: function() {
                clearTimeout(this.showTimer);
                clearTimeout(this.hideTimer);
                this.showTimer = null;
                this.hideTimer = null;
                this.isDelaying = false;
            },
            isActive: function() {
                return active$1 === this;
            },
            position: function() {
                removeClass(this.$el, this.clsDrop + "-stack");
                toggleClass(this.$el, this.clsDrop + "-boundary", this.boundaryAlign);
                var boundary = query(this.boundary, this.$el);
                var ref = _helpers.slicedToArray(scrollParents(this.$el), 1), scrollParent = ref[0];
                var scrollParentOffset = offsetViewport(scrollParent);
                var boundaryOffset = boundary ? offset1(boundary) : scrollParentOffset;
                css1(this.$el, 'maxWidth', '');
                var maxWidth = scrollParentOffset.width - (this.boundaryAlign ? 0 : 2 * this.viewportPadding);
                if (this.pos[1] === 'justify') {
                    var prop = this.axis === 'y' ? 'width' : 'height';
                    var targetOffset = offset1(this.target);
                    var alignTo = this.boundaryAlign ? boundaryOffset : targetOffset;
                    css1(this.$el, prop, alignTo[prop]);
                } else if (this.$el.offsetWidth > maxWidth) addClass(this.$el, this.clsDrop + "-stack");
                css1(this.$el, 'maxWidth', maxWidth);
                this.positionAt(this.$el, boundary && this.boundaryAlign ? boundary : this.target, boundary);
            }
        }
    };
    function getPositionedElements(el10) {
        var result = [];
        apply(el10, function(el) {
            return css1(el, 'position') !== 'static' && result.push(el);
        });
        return result;
    }
    var formCustom = {
        mixins: [
            Class
        ],
        args: 'target',
        props: {
            target: Boolean
        },
        data: {
            target: false
        },
        computed: {
            input: function(_, $el) {
                return $(selInput, $el);
            },
            state: function() {
                return this.input.nextElementSibling;
            },
            target: function(_ref, $el) {
                var target = _ref.target;
                return target && (target === true && parent1(this.input) === $el && this.input.nextElementSibling || $(target, $el));
            }
        },
        update: function() {
            var _input$files;
            var ref = this, target = ref.target, input = ref.input;
            if (!target) return;
            var option;
            var prop = isInput(target) ? 'value' : 'textContent';
            var prev = target[prop];
            var value = (_input$files = input.files) != null && _input$files[0] ? input.files[0].name : matches(input, 'select') && (option = $$('option', input).filter(function(el) {
                return el.selected;
            })[0] // eslint-disable-line prefer-destructuring
            ) ? option.textContent : input.value;
            if (prev !== value) target[prop] = value;
        },
        events: [
            {
                name: 'change',
                handler: function() {
                    this.$emit();
                }
            },
            {
                name: 'reset',
                el: function() {
                    return closest(this.$el, 'form');
                },
                handler: function() {
                    this.$emit();
                }
            }
        ]
    };
    var Margin = {
        mixins: [
            Resize
        ],
        props: {
            margin: String,
            firstColumn: Boolean
        },
        data: {
            margin: 'uk-margin-small-top',
            firstColumn: 'uk-first-column'
        },
        resizeTargets: function() {
            return [
                this.$el
            ].concat(_helpers.toConsumableArray(toArray(this.$el.children)));
        },
        connected: function() {
            var _this = this;
            this.registerObserver(observeMutation(this.$el, function() {
                return _this.$reset();
            }, {
                childList: true
            }));
        },
        update: {
            read: function() {
                var rows = getRows(this.$el.children);
                return {
                    rows: rows,
                    columns: getColumns(rows)
                };
            },
            write: function(_ref) {
                var columns = _ref.columns, rows = _ref.rows;
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined, _iteratorNormalCompletion9 = true, _didIteratorError9 = false, _iteratorError9 = undefined;
                try {
                    for(var _iterator = rows[Symbol.iterator](), _step; !(_iteratorNormalCompletion9 = (_step = _iterator.next()).done); _iteratorNormalCompletion9 = true){
                        var row = _step.value;
                        try {
                            for(var _iterator9 = row[Symbol.iterator](), _step9; !(_iteratorNormalCompletion = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion = true){
                                var column = _step9.value;
                                toggleClass(column, this.margin, rows[0] !== row);
                                toggleClass(column, this.firstColumn, !!~columns[0].indexOf(column));
                            }
                        } catch (err) {
                            _didIteratorError = true;
                            _iteratorError = err;
                        } finally{
                            try {
                                if (!_iteratorNormalCompletion && _iterator9.return != null) {
                                    _iterator9.return();
                                }
                            } finally{
                                if (_didIteratorError) {
                                    throw _iteratorError;
                                }
                            }
                        }
                    }
                } catch (err) {
                    _didIteratorError9 = true;
                    _iteratorError9 = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion9 && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError9) {
                            throw _iteratorError9;
                        }
                    }
                }
            },
            events: [
                'resize'
            ]
        }
    };
    function getRows(items) {
        return sortBy(items, 'top', 'bottom');
    }
    function getColumns(rows) {
        var columns = [];
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = rows[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var row = _step.value;
                var sorted = sortBy(row, 'left', 'right');
                for(var j = 0; j < sorted.length; j++)columns[j] = columns[j] ? columns[j].concat(sorted[j]) : sorted[j];
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
        return isRtl ? columns.reverse() : columns;
    }
    function sortBy(items, startProp, endProp) {
        var sorted = [
            []
        ];
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = items[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var el = _step.value;
                if (!isVisible(el)) continue;
                var dim = getOffset(el);
                for(var i = sorted.length - 1; i >= 0; i--){
                    var current = sorted[i];
                    if (!current[0]) {
                        current.push(el);
                        break;
                    }
                    var startDim = void 0;
                    if (current[0].offsetParent === el.offsetParent) startDim = getOffset(current[0]);
                    else {
                        dim = getOffset(el, true);
                        startDim = getOffset(current[0], true);
                    }
                    if (dim[startProp] >= startDim[endProp] - 1 && dim[startProp] !== startDim[startProp]) {
                        sorted.push([
                            el
                        ]);
                        break;
                    }
                    if (dim[endProp] - 1 > startDim[startProp] || dim[startProp] === startDim[startProp]) {
                        current.push(el);
                        break;
                    }
                    if (i === 0) {
                        sorted.unshift([
                            el
                        ]);
                        break;
                    }
                }
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
        return sorted;
    }
    function getOffset(element, offset) {
        if (offset === void 0) offset = false;
        var offsetTop = element.offsetTop, offsetLeft = element.offsetLeft, offsetHeight = element.offsetHeight, offsetWidth = element.offsetWidth;
        var ref;
        if (offset) ref = _helpers.slicedToArray(offsetPosition(element), 2), offsetTop = ref[0], offsetLeft = ref[1], ref;
        return {
            top: offsetTop,
            left: offsetLeft,
            bottom: offsetTop + offsetHeight,
            right: offsetLeft + offsetWidth
        };
    }
    var Scroll = {
        connected: function() {
            var _this = this;
            registerScrollListener(this._uid, function() {
                return _this.$emit('scroll');
            });
        },
        disconnected: function() {
            unregisterScrollListener(this._uid);
        }
    };
    var scrollListeners = new Map();
    var unbindScrollListener;
    function registerScrollListener(id, listener1) {
        unbindScrollListener = unbindScrollListener || on(window, 'scroll', function() {
            return scrollListeners.forEach(function(listener) {
                return listener();
            });
        }, {
            passive: true,
            capture: true
        });
        scrollListeners.set(id, listener1);
    }
    function unregisterScrollListener(id) {
        scrollListeners.delete(id);
        if (unbindScrollListener && !scrollListeners.size) {
            unbindScrollListener();
            unbindScrollListener = null;
        }
    }
    var grid = {
        extends: Margin,
        mixins: [
            Class,
            Scroll
        ],
        name: 'grid',
        props: {
            masonry: Boolean,
            parallax: Number
        },
        data: {
            margin: 'uk-grid-margin',
            clsStack: 'uk-grid-stack',
            masonry: false,
            parallax: 0
        },
        connected: function() {
            this.masonry && addClass(this.$el, 'uk-flex-top uk-flex-wrap-top');
        },
        update: [
            {
                write: function(_ref) {
                    var columns = _ref.columns;
                    toggleClass(this.$el, this.clsStack, columns.length < 2);
                },
                events: [
                    'resize'
                ]
            },
            {
                read: function(data) {
                    var _Math;
                    var columns = data.columns, rows = data.rows;
                    // Filter component makes elements positioned absolute
                    if (!columns.length || !this.masonry && !this.parallax || positionedAbsolute(this.$el)) {
                        data.translates = false;
                        return false;
                    }
                    var translates = false;
                    var nodes = children1(this.$el);
                    var columnHeights = getColumnHeights(columns);
                    var margin = getMarginTop(nodes, this.margin) * (rows.length - 1);
                    var elHeight = (_Math = Math).max.apply(_Math, _helpers.toConsumableArray(columnHeights)) + margin;
                    if (this.masonry) {
                        columns = columns.map(function(column) {
                            return sortBy$1(column, 'offsetTop');
                        });
                        translates = getTranslates(rows, columns);
                    }
                    var padding = Math.abs(this.parallax);
                    if (padding) padding = columnHeights.reduce(function(newPadding, hgt, i) {
                        return Math.max(newPadding, hgt + margin + (i % 2 ? padding : padding / 8) - elHeight);
                    }, 0);
                    return {
                        padding: padding,
                        columns: columns,
                        translates: translates,
                        height: translates ? elHeight : ''
                    };
                },
                write: function(_ref2) {
                    var height = _ref2.height, padding = _ref2.padding;
                    css1(this.$el, 'paddingBottom', padding || '');
                    height !== false && css1(this.$el, 'height', height);
                },
                events: [
                    'resize'
                ]
            },
            {
                read: function() {
                    if (this.parallax && positionedAbsolute(this.$el)) return false;
                    return {
                        scrolled: this.parallax ? scrolledOver(this.$el) * Math.abs(this.parallax) : false
                    };
                },
                write: function(_ref3) {
                    var columns = _ref3.columns, scrolled = _ref3.scrolled, translates = _ref3.translates;
                    if (scrolled === false && !translates) return;
                    columns.forEach(function(column, i) {
                        return column.forEach(function(el, j) {
                            return css1(el, 'transform', !scrolled && !translates ? '' : "translateY(" + ((translates && -translates[i][j]) + (scrolled ? i % 2 ? scrolled : scrolled / 8 : 0)) + "px)");
                        });
                    });
                },
                events: [
                    'scroll',
                    'resize'
                ]
            }
        ]
    };
    function positionedAbsolute(el11) {
        return children1(el11).some(function(el) {
            return css1(el, 'position') === 'absolute';
        });
    }
    function getTranslates(rows, columns) {
        var _Math;
        var rowHeights = rows.map(function(row) {
            return (_Math = Math).max.apply(_Math, _helpers.toConsumableArray(row.map(function(el) {
                return el.offsetHeight;
            })));
        });
        return columns.map(function(elements) {
            var prev = 0;
            return elements.map(function(element, row) {
                return prev += row ? rowHeights[row - 1] - elements[row - 1].offsetHeight : 0;
            });
        });
    }
    function getMarginTop(nodes, cls) {
        var ref = _helpers.slicedToArray(nodes.filter(function(el) {
            return hasClass(el, cls);
        }), 1), node = ref[0];
        return toFloat(node ? css1(node, 'marginTop') : css1(nodes[0], 'paddingLeft'));
    }
    function getColumnHeights(columns) {
        return columns.map(function(column) {
            return column.reduce(function(sum, el) {
                return sum + el.offsetHeight;
            }, 0);
        });
    }
    var heightMatch = {
        mixins: [
            Resize
        ],
        args: 'target',
        props: {
            target: String,
            row: Boolean
        },
        data: {
            target: '> *',
            row: true
        },
        computed: {
            elements: {
                get: function(_ref, $el) {
                    var target = _ref.target;
                    return $$(target, $el);
                },
                watch: function() {
                    this.$reset();
                }
            }
        },
        resizeTargets: function() {
            return [
                this.$el
            ].concat(_helpers.toConsumableArray(this.elements));
        },
        update: {
            read: function() {
                return {
                    rows: (this.row ? getRows(this.elements) : [
                        this.elements
                    ]).map(match$1)
                };
            },
            write: function(_ref2) {
                var rows = _ref2.rows;
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function(_iterator, _step) {
                        var _value = _step.value, heights = _value.heights, elements = _value.elements;
                        elements.forEach(function(el, i) {
                            return css1(el, 'minHeight', heights[i]);
                        });
                    };
                    for(var _iterator = rows[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop(_iterator, _step);
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            },
            events: [
                'resize'
            ]
        }
    };
    function match$1(elements) {
        var _Math;
        if (elements.length < 2) return {
            heights: [
                ''
            ],
            elements: elements
        };
        css1(elements, 'minHeight', '');
        var heights = elements.map(getHeight);
        var max = (_Math = Math).max.apply(_Math, _helpers.toConsumableArray(heights));
        return {
            heights: elements.map(function(el, i) {
                return heights[i].toFixed(2) === max.toFixed(2) ? '' : max;
            }),
            elements: elements
        };
    }
    function getHeight(element) {
        var style = false;
        if (!isVisible(element)) {
            style = element.style.display;
            css1(element, 'display', 'block', 'important');
        }
        var height = dimensions$1(element).height - boxModelAdjust(element, 'height', 'content-box');
        if (style !== false) css1(element, 'display', style);
        return height;
    }
    var heightViewport = {
        mixins: [
            Class,
            Resize
        ],
        props: {
            expand: Boolean,
            offsetTop: Boolean,
            offsetBottom: Boolean,
            minHeight: Number
        },
        data: {
            expand: false,
            offsetTop: false,
            offsetBottom: false,
            minHeight: 0
        },
        resizeTargets: function() {
            // check for offsetTop change
            return [
                this.$el,
                document.documentElement
            ];
        },
        update: {
            read: function(_ref) {
                var prev = _ref.minHeight;
                if (!isVisible(this.$el)) return false;
                var minHeight = '';
                var box = boxModelAdjust(this.$el, 'height', 'content-box');
                if (this.expand) minHeight = Math.max(height1(window) - (dimensions$1(document.documentElement).height - dimensions$1(this.$el).height) - box, 0);
                else {
                    // on mobile devices (iOS and Android) window.innerHeight !== 100vh
                    minHeight = 'calc(100vh';
                    if (this.offsetTop) {
                        var top = offset1(this.$el).top;
                        minHeight += top > 0 && top < height1(window) / 2 ? " - " + top + "px" : '';
                    }
                    if (this.offsetBottom === true) minHeight += " - " + dimensions$1(this.$el.nextElementSibling).height + "px";
                    else if (isNumeric(this.offsetBottom)) minHeight += " - " + this.offsetBottom + "vh";
                    else if (this.offsetBottom && endsWith(this.offsetBottom, 'px')) minHeight += " - " + toFloat(this.offsetBottom) + "px";
                    else if (isString(this.offsetBottom)) minHeight += " - " + dimensions$1(query(this.offsetBottom, this.$el)).height + "px";
                    minHeight += (box ? " - " + box + "px" : '') + ")";
                }
                return {
                    minHeight: minHeight,
                    prev: prev
                };
            },
            write: function(_ref2) {
                var minHeight = _ref2.minHeight;
                css1(this.$el, {
                    minHeight: minHeight
                });
                if (this.minHeight && toFloat(css1(this.$el, 'minHeight')) < this.minHeight) css1(this.$el, 'minHeight', this.minHeight);
            },
            events: [
                'resize'
            ]
        }
    };
    var SVG = {
        args: 'src',
        props: {
            id: Boolean,
            icon: String,
            src: String,
            style: String,
            width: Number,
            height: Number,
            ratio: Number,
            class: String,
            strokeAnimation: Boolean,
            focusable: Boolean,
            attributes: 'list'
        },
        data: {
            ratio: 1,
            include: [
                'style',
                'class',
                'focusable'
            ],
            class: '',
            strokeAnimation: false
        },
        beforeConnect: function() {
            this.class += ' uk-svg';
        },
        connected: function() {
            var _this = this;
            var ref;
            if (!this.icon && includes(this.src, '#')) ref = _helpers.slicedToArray(this.src.split('#'), 2), this.src = ref[0], this.icon = ref[1], ref;
            this.svg = this.getSvg().then(function(el) {
                if (_this._connected) {
                    var svg = insertSVG(el, _this.$el);
                    if (_this.svgEl && svg !== _this.svgEl) remove$1(_this.svgEl);
                    _this.applyAttributes(svg, el);
                    return _this.svgEl = svg;
                }
            }, noop);
            if (this.strokeAnimation) this.svg.then(function(el) {
                if (_this._connected) {
                    applyAnimation(el);
                    _this.registerObserver(observeIntersection(el, function(records, observer) {
                        applyAnimation(el);
                        observer.disconnect();
                    }));
                }
            });
        },
        disconnected: function() {
            var _this = this;
            this.svg.then(function(svg) {
                if (_this._connected) return;
                if (isVoidElement(_this.$el)) _this.$el.hidden = false;
                remove$1(svg);
                _this.svgEl = null;
            });
            this.svg = null;
        },
        methods: {
            getSvg: function() {
                return _helpers.asyncToGenerator(_regeneratorRuntimeDefault.default.mark(function _callee() {
                    var _this;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                _this = this;
                                if (!(isTag(this.$el, 'img') && !this.$el.complete && this.$el.loading === 'lazy')) {
                                    _ctx.next = 3;
                                    break;
                                }
                                return _ctx.abrupt("return", new Promise(function(resolve) {
                                    return once(_this.$el, 'load', function() {
                                        return resolve(_this.getSvg());
                                    });
                                }));
                            case 3:
                                _ctx.t1 = parseSVG;
                                _ctx.next = 6;
                                return loadSVG(this.src);
                            case 6:
                                _ctx.t2 = _ctx.sent;
                                _ctx.t3 = this.icon;
                                _ctx.t0 = (0, _ctx.t1)(_ctx.t2, _ctx.t3);
                                if (_ctx.t0) {
                                    _ctx.next = 11;
                                    break;
                                }
                                _ctx.t0 = Promise.reject('SVG not found.');
                            case 11:
                                return _ctx.abrupt("return", _ctx.t0);
                            case 12:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this);
                })).apply(this);
            },
            applyAttributes: function(el, ref) {
                var _this = this;
                for(var prop5 in this.$options.props)if (includes(this.include, prop5) && prop5 in this) attr1(el, prop5, this[prop5]);
                for(var attribute in this.attributes){
                    var _$ref = _helpers.slicedToArray(this.attributes[attribute].split(':', 2), 2), prop4 = _$ref[0], value = _$ref[1];
                    attr1(el, prop4, value);
                }
                if (!this.id) removeAttr(el, 'id');
                var props = [
                    'width',
                    'height'
                ];
                var dimensions = props.map(function(prop) {
                    return _this[prop];
                });
                if (!dimensions.some(function(val) {
                    return val;
                })) dimensions = props.map(function(prop) {
                    return attr1(ref, prop);
                });
                var viewBox = attr1(ref, 'viewBox');
                if (viewBox && !dimensions.some(function(val) {
                    return val;
                })) dimensions = viewBox.split(' ').slice(2);
                dimensions.forEach(function(val, i) {
                    return attr1(el, props[i], toFloat(val) * _this.ratio || null);
                });
            }
        }
    };
    var loadSVG = memoize(function() {
        var _ref = _helpers.asyncToGenerator(_regeneratorRuntimeDefault.default.mark(function _callee(src) {
            return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                while(1)switch(_ctx.prev = _ctx.next){
                    case 0:
                        if (!src) {
                            _ctx.next = 10;
                            break;
                        }
                        if (!startsWith(src, 'data:')) {
                            _ctx.next = 5;
                            break;
                        }
                        return _ctx.abrupt("return", decodeURIComponent(src.split(',')[1]));
                    case 5:
                        _ctx.next = 7;
                        return fetch(src);
                    case 7:
                        return _ctx.abrupt("return", _ctx.sent.text());
                    case 8:
                        _ctx.next = 11;
                        break;
                    case 10:
                        return _ctx.abrupt("return", Promise.reject());
                    case 11:
                    case "end":
                        return _ctx.stop();
                }
            }, _callee);
        }));
        return function(src) {
            return _ref.apply(this, arguments);
        };
    }());
    function parseSVG(svg, icon) {
        var _svg;
        if (icon && includes(svg, '<symbol')) svg = parseSymbols(svg, icon) || svg;
        svg = $(svg.substr(svg.indexOf('<svg')));
        return ((_svg = svg) == null ? void 0 : _svg.hasChildNodes()) && svg;
    }
    var symbolRe = /<symbol([^]*?id=(['"])(.+?)\2[^]*?<\/)symbol>/g;
    var symbols = {};
    function parseSymbols(svg, icon) {
        if (!symbols[svg]) {
            symbols[svg] = {};
            symbolRe.lastIndex = 0;
            var match;
            while(match = symbolRe.exec(svg))symbols[svg][match[3]] = "<svg xmlns=\"http://www.w3.org/2000/svg\"" + match[1] + "svg>";
        }
        return symbols[svg][icon];
    }
    function applyAnimation(el) {
        var length = getMaxPathLength(el);
        if (length) el.style.setProperty('--uk-animation-stroke', length);
    }
    function getMaxPathLength(el) {
        var _Math;
        return Math.ceil((_Math = Math).max.apply(_Math, [
            0
        ].concat(_helpers.toConsumableArray($$('[stroke]', el).map(function(stroke) {
            try {
                return stroke.getTotalLength();
            } catch (e) {
                return 0;
            }
        })))));
    }
    function insertSVG(el, root) {
        if (isVoidElement(root) || isTag(root, 'canvas')) {
            root.hidden = true;
            var next = root.nextElementSibling;
            return equals(el, next) ? next : after(root, el);
        }
        var _$last = root.lastElementChild;
        return equals(el, _$last) ? _$last : append(root, el);
    }
    function equals(el, other) {
        return isTag(el, 'svg') && isTag(other, 'svg') && innerHTML(el) === innerHTML(other);
    }
    function innerHTML(el) {
        return (el.innerHTML || new XMLSerializer().serializeToString(el).replace(/<svg.*?>(.*?)<\/svg>/g, '$1')).replace(/\s/g, '');
    }
    var closeIcon = "<svg width=\"14\" height=\"14\" viewBox=\"0 0 14 14\" xmlns=\"http://www.w3.org/2000/svg\"><line fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" x1=\"1\" y1=\"1\" x2=\"13\" y2=\"13\"/><line fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" x1=\"13\" y1=\"1\" x2=\"1\" y2=\"13\"/></svg>";
    var closeLarge = "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><line fill=\"none\" stroke=\"#000\" stroke-width=\"1.4\" x1=\"1\" y1=\"1\" x2=\"19\" y2=\"19\"/><line fill=\"none\" stroke=\"#000\" stroke-width=\"1.4\" x1=\"19\" y1=\"1\" x2=\"1\" y2=\"19\"/></svg>";
    var marker = "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><rect x=\"9\" y=\"4\" width=\"1\" height=\"11\"/><rect x=\"4\" y=\"9\" width=\"11\" height=\"1\"/></svg>";
    var navbarToggleIcon = "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><rect y=\"9\" width=\"20\" height=\"2\"/><rect y=\"3\" width=\"20\" height=\"2\"/><rect y=\"15\" width=\"20\" height=\"2\"/></svg>";
    var overlayIcon = "<svg width=\"40\" height=\"40\" viewBox=\"0 0 40 40\" xmlns=\"http://www.w3.org/2000/svg\"><rect x=\"19\" y=\"0\" width=\"1\" height=\"40\"/><rect x=\"0\" y=\"19\" width=\"40\" height=\"1\"/></svg>";
    var paginationNext = "<svg width=\"7\" height=\"12\" viewBox=\"0 0 7 12\" xmlns=\"http://www.w3.org/2000/svg\"><polyline fill=\"none\" stroke=\"#000\" stroke-width=\"1.2\" points=\"1 1 6 6 1 11\"/></svg>";
    var paginationPrevious = "<svg width=\"7\" height=\"12\" viewBox=\"0 0 7 12\" xmlns=\"http://www.w3.org/2000/svg\"><polyline fill=\"none\" stroke=\"#000\" stroke-width=\"1.2\" points=\"6 1 1 6 6 11\"/></svg>";
    var searchIcon = "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" cx=\"9\" cy=\"9\" r=\"7\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M14,14 L18,18 L14,14 Z\"/></svg>";
    var searchLarge = "<svg width=\"40\" height=\"40\" viewBox=\"0 0 40 40\" xmlns=\"http://www.w3.org/2000/svg\"><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.8\" cx=\"17.5\" cy=\"17.5\" r=\"16.5\"/><line fill=\"none\" stroke=\"#000\" stroke-width=\"1.8\" x1=\"38\" y1=\"39\" x2=\"29\" y2=\"30\"/></svg>";
    var searchNavbar = "<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" cx=\"10.5\" cy=\"10.5\" r=\"9.5\"/><line fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" x1=\"23\" y1=\"23\" x2=\"17\" y2=\"17\"/></svg>";
    var slidenavNext = "<svg width=\"14\" height=\"24\" viewBox=\"0 0 14 24\" xmlns=\"http://www.w3.org/2000/svg\"><polyline fill=\"none\" stroke=\"#000\" stroke-width=\"1.4\" points=\"1.225,23 12.775,12 1.225,1 \"/></svg>";
    var slidenavNextLarge = "<svg width=\"25\" height=\"40\" viewBox=\"0 0 25 40\" xmlns=\"http://www.w3.org/2000/svg\"><polyline fill=\"none\" stroke=\"#000\" stroke-width=\"2\" points=\"4.002,38.547 22.527,20.024 4,1.5 \"/></svg>";
    var slidenavPrevious = "<svg width=\"14\" height=\"24\" viewBox=\"0 0 14 24\" xmlns=\"http://www.w3.org/2000/svg\"><polyline fill=\"none\" stroke=\"#000\" stroke-width=\"1.4\" points=\"12.775,1 1.225,12 12.775,23 \"/></svg>";
    var slidenavPreviousLarge = "<svg width=\"25\" height=\"40\" viewBox=\"0 0 25 40\" xmlns=\"http://www.w3.org/2000/svg\"><polyline fill=\"none\" stroke=\"#000\" stroke-width=\"2\" points=\"20.527,1.5 2,20.024 20.525,38.547 \"/></svg>";
    var spinner = "<svg width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" xmlns=\"http://www.w3.org/2000/svg\"><circle fill=\"none\" stroke=\"#000\" cx=\"15\" cy=\"15\" r=\"14\"/></svg>";
    var totop = "<svg width=\"18\" height=\"10\" viewBox=\"0 0 18 10\" xmlns=\"http://www.w3.org/2000/svg\"><polyline fill=\"none\" stroke=\"#000\" stroke-width=\"1.2\" points=\"1 9 9 1 17 9 \"/></svg>";
    var icons = {
        spinner: spinner,
        totop: totop,
        marker: marker,
        'close-icon': closeIcon,
        'close-large': closeLarge,
        'navbar-toggle-icon': navbarToggleIcon,
        'overlay-icon': overlayIcon,
        'pagination-next': paginationNext,
        'pagination-previous': paginationPrevious,
        'search-icon': searchIcon,
        'search-large': searchLarge,
        'search-navbar': searchNavbar,
        'slidenav-next': slidenavNext,
        'slidenav-next-large': slidenavNextLarge,
        'slidenav-previous': slidenavPrevious,
        'slidenav-previous-large': slidenavPreviousLarge
    };
    var Icon = {
        install: install$3,
        extends: SVG,
        args: 'icon',
        props: [
            'icon'
        ],
        data: {
            include: [
                'focusable'
            ]
        },
        isIcon: true,
        beforeConnect: function() {
            addClass(this.$el, 'uk-icon');
        },
        methods: {
            getSvg: function() {
                return _helpers.asyncToGenerator(_regeneratorRuntimeDefault.default.mark(function _callee() {
                    var icon;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                icon = getIcon(this.icon);
                                if (icon) {
                                    _ctx.next = 3;
                                    break;
                                }
                                throw 'Icon not found.';
                            case 3:
                                return _ctx.abrupt("return", icon);
                            case 4:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this);
                })).apply(this);
            }
        }
    };
    var IconComponent = {
        args: false,
        extends: Icon,
        data: function(vm) {
            return {
                icon: hyphenate(vm.constructor.options.name)
            };
        },
        beforeConnect: function() {
            addClass(this.$el, this.$name);
        }
    };
    var Slidenav = {
        extends: IconComponent,
        beforeConnect: function() {
            addClass(this.$el, 'uk-slidenav');
            var icon = this.$props.icon;
            this.icon = hasClass(this.$el, 'uk-slidenav-large') ? icon + "-large" : icon;
        }
    };
    var Search = {
        extends: IconComponent,
        beforeConnect: function() {
            this.icon = hasClass(this.$el, 'uk-search-icon') && parents(this.$el, '.uk-search-large').length ? 'search-large' : parents(this.$el, '.uk-search-navbar').length ? 'search-navbar' : this.$props.icon;
        }
    };
    var Close = {
        extends: IconComponent,
        beforeConnect: function() {
            this.icon = "close-" + (hasClass(this.$el, 'uk-close-large') ? 'large' : 'icon');
        }
    };
    var Spinner = {
        extends: IconComponent,
        methods: {
            getSvg: function() {
                return _helpers.asyncToGenerator(_regeneratorRuntimeDefault.default.mark(function _callee() {
                    var icon;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                _ctx.next = 2;
                                return Icon.methods.getSvg.call(this);
                            case 2:
                                icon = _ctx.sent;
                                if (this.ratio !== 1) css1($('circle', icon), 'strokeWidth', 1 / this.ratio);
                                return _ctx.abrupt("return", icon);
                            case 5:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this);
                })).apply(this);
            }
        }
    };
    var parsed = {};
    function install$3(UIkit) {
        UIkit.icon.add = function(name2, svg1) {
            var added = isString(name2) ? _helpers.defineProperty({}, name2, svg1) : name2;
            each(added, function(svg, name) {
                icons[name] = svg;
                delete parsed[name];
            });
            if (UIkit._initialized) apply(document.body, function(el) {
                return each(UIkit.getComponents(el), function(cmp) {
                    cmp.$options.isIcon && cmp.icon in added && cmp.$reset();
                });
            });
        };
    }
    function getIcon(icon) {
        if (!icons[icon]) return null;
        if (!parsed[icon]) parsed[icon] = $((icons[applyRtl(icon)] || icons[icon]).trim());
        return parsed[icon].cloneNode(true);
    }
    function applyRtl(icon) {
        return isRtl ? swap(swap(icon, 'left', 'right'), 'previous', 'next') : icon;
    }
    var nativeLazyLoad = inBrowser && 'loading' in HTMLImageElement.prototype;
    var img1 = {
        args: 'dataSrc',
        props: {
            dataSrc: String,
            sources: String,
            offsetTop: String,
            offsetLeft: String,
            target: String,
            loading: String
        },
        data: {
            dataSrc: '',
            sources: false,
            offsetTop: '50vh',
            offsetLeft: '50vw',
            target: false,
            loading: 'lazy'
        },
        connected: function() {
            var _this = this;
            if (this.loading !== 'lazy') {
                this.load();
                return;
            }
            var target = [
                this.$el
            ].concat(_helpers.toConsumableArray(queryAll(this.$props.target, this.$el)));
            if (nativeLazyLoad && isImg(this.$el)) {
                this.$el.loading = 'lazy';
                setSrcAttrs(this.$el);
                if (target.length === 1) return;
            }
            ensureSrcAttribute(this.$el);
            this.registerObserver(observeIntersection(target, function(entries, observer) {
                _this.load();
                observer.disconnect();
            }, {
                rootMargin: toPx(this.offsetTop, 'height') + "px " + toPx(this.offsetLeft, 'width') + "px"
            }));
        },
        disconnected: function() {
            if (this._data.image) this._data.image.onload = '';
        },
        methods: {
            load: function() {
                if (this._data.image) return this._data.image;
                var image = isImg(this.$el) ? this.$el : getImageFromElement(this.$el, this.dataSrc, this.sources);
                removeAttr(image, 'loading');
                setSrcAttrs(this.$el, image.currentSrc);
                return this._data.image = image;
            }
        }
    };
    function setSrcAttrs(el12, src) {
        if (isImg(el12)) {
            var parentNode = parent1(el12);
            var elements = isPicture(parentNode) ? children1(parentNode) : [
                el12
            ];
            elements.forEach(function(el) {
                return setSourceProps(el, el);
            });
        } else if (src) {
            var change = !includes(el12.style.backgroundImage, src);
            if (change) {
                css1(el12, 'backgroundImage', "url(" + escape(src) + ")");
                trigger(el12, createEvent('load', false));
            }
        }
    }
    var srcProps = [
        'data-src',
        'data-srcset',
        'sizes'
    ];
    function setSourceProps(sourceEl, targetEl) {
        srcProps.forEach(function(prop) {
            var value = data1(sourceEl, prop);
            if (value) attr1(targetEl, prop.replace(/^(data-)+/, ''), value);
        });
    }
    function getImageFromElement(el, src, sources) {
        var img = new Image();
        wrapInPicture(img, sources);
        setSourceProps(el, img);
        img.onload = function() {
            setSrcAttrs(el, img.currentSrc);
        };
        attr1(img, 'src', src);
        return img;
    }
    function wrapInPicture(img, sources) {
        sources = parseSources(sources);
        if (sources.length) {
            var picture = fragment('<picture>');
            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
            try {
                for(var _iterator = sources[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                    var attrs = _step.value;
                    var source = fragment('<source>');
                    attr1(source, attrs);
                    append(picture, source);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally{
                try {
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                    }
                } finally{
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
            append(picture, img);
        }
    }
    function parseSources(sources) {
        if (!sources) return [];
        if (startsWith(sources, '[')) try {
            sources = JSON.parse(sources);
        } catch (e) {
            sources = [];
        }
        else sources = parseOptions(sources);
        if (!isArray(sources)) sources = [
            sources
        ];
        return sources.filter(function(source) {
            return !isEmpty(source);
        });
    }
    function ensureSrcAttribute(el) {
        if (isImg(el) && !hasAttr(el, 'src')) attr1(el, 'src', 'data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg"></svg>');
    }
    function isPicture(el) {
        return isTag(el, 'picture');
    }
    function isImg(el) {
        return isTag(el, 'img');
    }
    var Media = {
        props: {
            media: Boolean
        },
        data: {
            media: false
        },
        connected: function() {
            var media = toMedia(this.media);
            this.matchMedia = true;
            if (media) {
                var _this = this;
                this.mediaObj = window.matchMedia(media);
                var handler = function() {
                    _this.matchMedia = _this.mediaObj.matches;
                    trigger(_this.$el, createEvent('mediachange', false, true, [
                        _this.mediaObj
                    ]));
                };
                this.offMediaObj = on(this.mediaObj, 'change', function() {
                    handler();
                    _this.$emit('resize');
                });
                handler();
            }
        },
        disconnected: function() {
            var _this$offMediaObj;
            (_this$offMediaObj = this.offMediaObj) == null || _this$offMediaObj.call(this);
        }
    };
    function toMedia(value) {
        if (isString(value)) {
            if (startsWith(value, '@')) {
                var name = "breakpoint-" + value.substr(1);
                value = toFloat(getCssVar(name));
            } else if (isNaN(value)) return value;
        }
        return value && isNumeric(value) ? "(min-width: " + value + "px)" : '';
    }
    var leader = {
        mixins: [
            Class,
            Media,
            Resize
        ],
        props: {
            fill: String
        },
        data: {
            fill: '',
            clsWrapper: 'uk-leader-fill',
            clsHide: 'uk-leader-hide',
            attrFill: 'data-fill'
        },
        computed: {
            fill: function(_ref) {
                var fill = _ref.fill;
                return fill || getCssVar('leader-fill-content');
            }
        },
        connected: function() {
            var ref;
            ref = _helpers.slicedToArray(wrapInner(this.$el, "<span class=\"" + this.clsWrapper + "\">"), 1), this.wrapper = ref[0], ref;
        },
        disconnected: function() {
            unwrap(this.wrapper.childNodes);
        },
        update: {
            read: function() {
                var width = Math.trunc(this.$el.offsetWidth / 2);
                return {
                    width: width,
                    fill: this.fill,
                    hide: !this.matchMedia
                };
            },
            write: function(_ref2) {
                var width = _ref2.width, fill = _ref2.fill, hide = _ref2.hide;
                toggleClass(this.wrapper, this.clsHide, hide);
                attr1(this.wrapper, this.attrFill, new Array(width).join(fill));
            },
            events: [
                'resize'
            ]
        }
    };
    var active1 = [];
    var Modal = {
        mixins: [
            Class,
            Container,
            Togglable
        ],
        props: {
            selPanel: String,
            selClose: String,
            escClose: Boolean,
            bgClose: Boolean,
            stack: Boolean
        },
        data: {
            cls: 'uk-open',
            escClose: true,
            bgClose: true,
            overlay: true,
            stack: false
        },
        computed: {
            panel: function(_ref, $el) {
                var selPanel = _ref.selPanel;
                return $(selPanel, $el);
            },
            transitionElement: function() {
                return this.panel;
            },
            bgClose: function(_ref2) {
                var bgClose = _ref2.bgClose;
                return bgClose && this.panel;
            }
        },
        beforeDisconnect: function() {
            if (includes(active1, this)) this.toggleElement(this.$el, false, false);
        },
        events: [
            {
                name: 'click',
                delegate: function() {
                    return this.selClose;
                },
                handler: function(e) {
                    e.preventDefault();
                    this.hide();
                }
            },
            {
                name: 'toggle',
                self: true,
                handler: function(e) {
                    if (e.defaultPrevented) return;
                    e.preventDefault();
                    if (this.isToggled() === includes(active1, this)) this.toggle();
                }
            },
            {
                name: 'beforeshow',
                self: true,
                handler: function(e) {
                    if (includes(active1, this)) return false;
                    if (!this.stack && active1.length) {
                        Promise.all(active1.map(function(modal) {
                            return modal.hide();
                        })).then(this.show);
                        e.preventDefault();
                    } else active1.push(this);
                }
            },
            {
                name: 'show',
                self: true,
                handler: function() {
                    var _this = this;
                    var docEl = document.documentElement;
                    if (width1(window) > docEl.clientWidth && this.overlay) css1(document.body, 'overflowY', 'scroll');
                    if (this.stack) css1(this.$el, 'zIndex', toFloat(css1(this.$el, 'zIndex')) + active1.length);
                    addClass(docEl, this.clsPage);
                    if (this.bgClose) once(this.$el, 'hide', on(document, pointerDown, function(_ref3) {
                        var _this6 = _this;
                        var target = _ref3.target;
                        if (last(active1) !== _this || _this.overlay && !within(target, _this.$el) || within(target, _this.panel)) return;
                        once(document, pointerUp + " " + pointerCancel + " scroll", function(_ref4) {
                            var defaultPrevented = _ref4.defaultPrevented, type = _ref4.type, newTarget = _ref4.target;
                            if (!defaultPrevented && type === pointerUp && target === newTarget) _this6.hide();
                        }, true);
                    }), {
                        self: true
                    });
                    if (this.escClose) once(this.$el, 'hide', on(document, 'keydown', function(e) {
                        if (e.keyCode === 27 && last(active1) === _this) _this.hide();
                    }), {
                        self: true
                    });
                }
            },
            {
                name: 'shown',
                self: true,
                handler: function() {
                    if (!isFocusable(this.$el)) attr1(this.$el, 'tabindex', '-1');
                    if (!$(':focus', this.$el)) this.$el.focus();
                }
            },
            {
                name: 'hidden',
                self: true,
                handler: function() {
                    var _this = this;
                    if (includes(active1, this)) active1.splice(active1.indexOf(this), 1);
                    if (!active1.length) css1(document.body, 'overflowY', '');
                    css1(this.$el, 'zIndex', '');
                    if (!active1.some(function(modal) {
                        return modal.clsPage === _this.clsPage;
                    })) removeClass(document.documentElement, this.clsPage);
                }
            }
        ],
        methods: {
            toggle: function() {
                return this.isToggled() ? this.hide() : this.show();
            },
            show: function() {
                if (this.container && parent1(this.$el) !== this.container) {
                    var _this = this;
                    append(this.container, this.$el);
                    return new Promise(function(resolve) {
                        return requestAnimationFrame(function() {
                            return _this.show().then(resolve);
                        });
                    });
                }
                return this.toggleElement(this.$el, true, animate1(this));
            },
            hide: function() {
                return this.toggleElement(this.$el, false, animate1(this));
            }
        }
    };
    function animate1(_ref5) {
        var transitionElement = _ref5.transitionElement, _toggle = _ref5._toggle;
        return function(el, show) {
            return new Promise(function(resolve, reject) {
                return once(el, 'show hide', function() {
                    el._reject == null || el._reject();
                    el._reject = reject;
                    _toggle(el, show);
                    var _$off = once(transitionElement, 'transitionstart', function() {
                        once(transitionElement, 'transitionend transitioncancel', resolve, {
                            self: true
                        });
                        clearTimeout(timer);
                    }, {
                        self: true
                    });
                    var timer = setTimeout(function() {
                        _$off();
                        resolve();
                    }, toMs(css1(transitionElement, 'transitionDuration')));
                });
            }).then(function() {
                return delete el._reject;
            });
        };
    }
    function toMs(time) {
        return time ? endsWith(time, 'ms') ? toFloat(time) : toFloat(time) * 1000 : 0;
    }
    var modal1 = {
        install: install$2,
        mixins: [
            Modal
        ],
        data: {
            clsPage: 'uk-modal-page',
            selPanel: '.uk-modal-dialog',
            selClose: '.uk-modal-close, .uk-modal-close-default, .uk-modal-close-outside, .uk-modal-close-full'
        },
        events: [
            {
                name: 'show',
                self: true,
                handler: function() {
                    if (hasClass(this.panel, 'uk-margin-auto-vertical')) addClass(this.$el, 'uk-flex');
                    else css1(this.$el, 'display', 'block');
                    height1(this.$el); // force reflow
                }
            },
            {
                name: 'hidden',
                self: true,
                handler: function() {
                    css1(this.$el, 'display', '');
                    removeClass(this.$el, 'uk-flex');
                }
            }
        ]
    };
    function install$2(_ref) {
        var modal = _ref.modal;
        modal.dialog = function(content, options) {
            var dialog = modal("<div class=\"uk-modal\"> <div class=\"uk-modal-dialog\">" + content + "</div> </div>", options);
            dialog.show();
            on(dialog.$el, 'hidden', _helpers.asyncToGenerator(_regeneratorRuntimeDefault.default.mark(function _callee() {
                return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                    while(1)switch(_ctx.prev = _ctx.next){
                        case 0:
                            _ctx.next = 2;
                            return Promise.resolve();
                        case 2:
                            dialog.$destroy(true);
                        case 3:
                        case "end":
                            return _ctx.stop();
                    }
                }, _callee);
            })), {
                self: true
            });
            return dialog;
        };
        modal.alert = function(message, options) {
            return openDialog(function(_ref2) {
                var labels = _ref2.labels;
                return "<div class=\"uk-modal-body\">" + (isString(message) ? message : html1(message)) + "</div> <div class=\"uk-modal-footer uk-text-right\"> <button class=\"uk-button uk-button-primary uk-modal-close\" autofocus>" + labels.ok + "</button> </div>";
            }, options, function(deferred) {
                return deferred.resolve();
            });
        };
        modal.confirm = function(message, options) {
            return openDialog(function(_ref3) {
                var labels = _ref3.labels;
                return "<form> <div class=\"uk-modal-body\">" + (isString(message) ? message : html1(message)) + "</div> <div class=\"uk-modal-footer uk-text-right\"> <button class=\"uk-button uk-button-default uk-modal-close\" type=\"button\">" + labels.cancel + "</button> <button class=\"uk-button uk-button-primary\" autofocus>" + labels.ok + "</button> </div> </form>";
            }, options, function(deferred) {
                return deferred.reject();
            });
        };
        modal.prompt = function(message, value, options) {
            return openDialog(function(_ref4) {
                var labels = _ref4.labels;
                return "<form class=\"uk-form-stacked\"> <div class=\"uk-modal-body\"> <label>" + (isString(message) ? message : html1(message)) + "</label> <input class=\"uk-input\" value=\"" + (value || '') + "\" autofocus> </div> <div class=\"uk-modal-footer uk-text-right\"> <button class=\"uk-button uk-button-default uk-modal-close\" type=\"button\">" + labels.cancel + "</button> <button class=\"uk-button uk-button-primary\">" + labels.ok + "</button> </div> </form>";
            }, options, function(deferred) {
                return deferred.resolve(null);
            }, function(dialog) {
                return $('input', dialog.$el).value;
            });
        };
        modal.labels = {
            ok: 'Ok',
            cancel: 'Cancel'
        };
        function openDialog(tmpl, options, hideFn, submitFn) {
            options = _helpers.objectSpread({
                bgClose: false,
                escClose: true,
                labels: modal.labels
            }, options);
            var dialog = modal.dialog(tmpl(options), options);
            var deferred = new Deferred();
            var resolved = false;
            on(dialog.$el, 'submit', 'form', function(e) {
                e.preventDefault();
                deferred.resolve(submitFn == null ? void 0 : submitFn(dialog));
                resolved = true;
                dialog.hide();
            });
            on(dialog.$el, 'hide', function() {
                return !resolved && hideFn(deferred);
            });
            deferred.promise.dialog = dialog;
            return deferred.promise;
        }
    }
    var nav = {
        extends: Accordion,
        data: {
            targets: '> .uk-parent',
            toggle: '> a',
            content: '> ul'
        }
    };
    var navbar = {
        mixins: [
            Class,
            Container
        ],
        props: {
            dropdown: String,
            mode: 'list',
            align: String,
            offset: Number,
            boundary: Boolean,
            boundaryAlign: Boolean,
            clsDrop: String,
            delayShow: Number,
            delayHide: Number,
            dropbar: Boolean,
            dropbarAnchor: Boolean,
            duration: Number
        },
        data: {
            dropdown: '.uk-navbar-nav > li > a, .uk-navbar-item, .uk-navbar-toggle',
            align: isRtl ? 'right' : 'left',
            clsDrop: 'uk-navbar-dropdown',
            mode: undefined,
            offset: undefined,
            delayShow: undefined,
            delayHide: undefined,
            boundaryAlign: undefined,
            flip: 'x',
            boundary: true,
            dropbar: false,
            dropbarAnchor: false,
            duration: 200,
            container: false
        },
        computed: {
            boundary: function(_ref, $el) {
                var boundary = _ref.boundary;
                return boundary === true ? $el : boundary;
            },
            dropbarAnchor: function(_ref2, $el) {
                var dropbarAnchor = _ref2.dropbarAnchor;
                return query(dropbarAnchor, $el);
            },
            pos: function(_ref3) {
                var align = _ref3.align;
                return "bottom-" + align;
            },
            dropbar: {
                get: function(_ref4) {
                    var dropbar = _ref4.dropbar;
                    if (!dropbar) return null;
                    dropbar = this._dropbar || query(dropbar, this.$el) || $('+ .uk-navbar-dropbar', this.$el);
                    return dropbar ? dropbar : this._dropbar = $('<div></div>');
                },
                watch: function(dropbar) {
                    addClass(dropbar, 'uk-navbar-dropbar');
                },
                immediate: true
            },
            dropContainer: function(_, $el) {
                return this.container || $el;
            },
            dropdowns: {
                get: function(_ref5, $el) {
                    var clsDrop = _ref5.clsDrop;
                    var dropdowns = $$("." + clsDrop, $el);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    if (this.dropContainer !== $el) try {
                        for(var _iterator = $$("." + clsDrop, this.dropContainer)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var el = _step.value;
                            var _this$getDropdown;
                            var target = (_this$getDropdown = this.getDropdown(el)) == null ? void 0 : _this$getDropdown.target;
                            if (!includes(dropdowns, el) && target && within(target, this.$el)) dropdowns.push(el);
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return dropdowns;
                },
                watch: function(dropdowns) {
                    var _this = this;
                    this.$create('drop', dropdowns.filter(function(el) {
                        return !_this.getDropdown(el);
                    }), _helpers.objectSpread({}, this.$props, {
                        boundary: this.boundary,
                        pos: this.pos,
                        offset: this.dropbar || this.offset
                    }));
                },
                immediate: true
            },
            toggles: {
                get: function(_ref6, $el) {
                    var dropdown = _ref6.dropdown;
                    return $$(dropdown, $el);
                },
                watch: function() {
                    var justify = hasClass(this.$el, 'uk-navbar-justify');
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator = $$('.uk-navbar-nav, .uk-navbar-left, .uk-navbar-right', this.$el)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var container = _step.value;
                            css1(container, 'flexGrow', justify ? $$(this.dropdown, container).length : '');
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                },
                immediate: true
            }
        },
        disconnected: function() {
            this.dropbar && remove$1(this.dropbar);
            delete this._dropbar;
        },
        events: [
            {
                name: 'mouseover focusin',
                delegate: function() {
                    return this.dropdown;
                },
                handler: function(_ref7) {
                    var current = _ref7.current;
                    var active = this.getActive();
                    if (active && includes(active.mode, 'hover') && active.target && !within(active.target, current) && !active.isDelaying) active.hide(false);
                }
            },
            {
                name: 'keydown',
                delegate: function() {
                    return this.dropdown;
                },
                handler: function(e) {
                    var current = e.current, keyCode = e.keyCode;
                    var active = this.getActive();
                    if (keyCode === keyMap.DOWN && hasAttr(current, 'aria-expanded')) {
                        e.preventDefault();
                        if (!active || active.target !== current) {
                            current.click();
                            once(this.dropContainer, 'show', function(_ref8) {
                                var target = _ref8.target;
                                return focusFirstFocusableElement(target);
                            });
                        } else focusFirstFocusableElement(active.$el);
                    }
                    handleNavItemNavigation(e, this.toggles, active);
                }
            },
            {
                name: 'keydown',
                el: function() {
                    return this.dropContainer;
                },
                delegate: function() {
                    return "." + this.clsDrop;
                },
                handler: function(e) {
                    var current = e.current, keyCode = e.keyCode;
                    if (!includes(this.dropdowns, current)) return;
                    var active = this.getActive();
                    var elements = $$(selFocusable, current);
                    var i = findIndex(elements, function(el) {
                        return matches(el, ':focus');
                    });
                    if (keyCode === keyMap.UP) {
                        e.preventDefault();
                        if (i > 0) elements[i - 1].focus();
                    }
                    if (keyCode === keyMap.DOWN) {
                        e.preventDefault();
                        if (i < elements.length - 1) elements[i + 1].focus();
                    }
                    if (keyCode === keyMap.ESC) {
                        var _active$target;
                        active == null || (_active$target = active.target) == null || _active$target.focus();
                    }
                    handleNavItemNavigation(e, this.toggles, active);
                }
            },
            {
                name: 'mouseleave',
                el: function() {
                    return this.dropbar;
                },
                filter: function() {
                    return this.dropbar;
                },
                handler: function() {
                    var active = this.getActive();
                    if (active && includes(active.mode, 'hover') && !this.dropdowns.some(function(el) {
                        return matches(el, ':hover');
                    })) active.hide();
                }
            },
            {
                name: 'beforeshow',
                el: function() {
                    return this.dropContainer;
                },
                filter: function() {
                    return this.dropbar;
                },
                handler: function(_, _ref9) {
                    var $el = _ref9.$el;
                    if (!hasClass($el, this.clsDrop)) return;
                    if (!parent1(this.dropbar)) after(this.dropbarAnchor || this.$el, this.dropbar);
                    addClass($el, this.clsDrop + "-dropbar");
                }
            },
            {
                name: 'show',
                el: function() {
                    return this.dropContainer;
                },
                filter: function() {
                    return this.dropbar;
                },
                handler: function(_, _ref10) {
                    var $el = _ref10.$el, tmp = _ref10.pos, ref = _helpers.slicedToArray(tmp === void 0 ? [] : tmp, 1), dir = ref[0];
                    if (!hasClass($el, this.clsDrop)) return;
                    if (dir === 'bottom') this.transitionTo(offset1($el).bottom - offset1(this.dropbar).top + toFloat(css1($el, 'marginBottom')), $el);
                }
            },
            {
                name: 'beforehide',
                el: function() {
                    return this.dropContainer;
                },
                filter: function() {
                    return this.dropbar;
                },
                handler: function(e, _ref11) {
                    var $el = _ref11.$el;
                    var active = this.getActive();
                    if (matches(this.dropbar, ':hover') && (active == null ? void 0 : active.$el) === $el && !this.toggles.some(function(el) {
                        return active.target !== el && matches(el, ':focus');
                    })) e.preventDefault();
                }
            },
            {
                name: 'hide',
                el: function() {
                    return this.dropContainer;
                },
                filter: function() {
                    return this.dropbar;
                },
                handler: function(_, _ref12) {
                    var $el = _ref12.$el;
                    if (!hasClass($el, this.clsDrop)) return;
                    var active = this.getActive();
                    if (!active || (active == null ? void 0 : active.$el) === $el) this.transitionTo(0);
                }
            }
        ],
        methods: {
            getActive: function() {
                return active$1 && within(active$1.target, this.$el) && active$1;
            },
            transitionTo: function(newHeight, el) {
                var _this = this;
                var dropbar = this.dropbar;
                var oldHeight = isVisible(dropbar) ? height1(dropbar) : 0;
                el = oldHeight < newHeight && el;
                css1(el, 'clip', "rect(0," + el.offsetWidth + "px," + oldHeight + "px,0)");
                height1(dropbar, oldHeight);
                Transition.cancel([
                    el,
                    dropbar
                ]);
                return Promise.all([
                    Transition.start(dropbar, {
                        height: newHeight
                    }, this.duration),
                    Transition.start(el, {
                        clip: "rect(0," + el.offsetWidth + "px," + newHeight + "px,0)"
                    }, this.duration)
                ]).catch(noop).then(function() {
                    css1(el, {
                        clip: ''
                    });
                    _this.$update(dropbar);
                });
            },
            getDropdown: function(el) {
                return this.$getComponent(el, 'drop') || this.$getComponent(el, 'dropdown');
            }
        }
    };
    function handleNavItemNavigation(e, toggles, active) {
        var current = e.current, keyCode = e.keyCode;
        var target = (active == null ? void 0 : active.target) || current;
        var i = toggles.indexOf(target);
        // Left
        if (keyCode === keyMap.LEFT && i > 0) {
            active == null || active.hide(false);
            toggles[i - 1].focus();
        }
        // Right
        if (keyCode === keyMap.RIGHT && i < toggles.length - 1) {
            active == null || active.hide(false);
            toggles[i + 1].focus();
        }
        if (keyCode === keyMap.TAB) {
            target.focus();
            active == null || active.hide(false);
        }
    }
    function focusFirstFocusableElement(el) {
        if (!$(':focus', el)) {
            var _$;
            (_$ = $(selFocusable, el)) == null || _$.focus();
        }
    }
    var keyMap = {
        TAB: 9,
        ESC: 27,
        LEFT: 37,
        UP: 38,
        RIGHT: 39,
        DOWN: 40
    };
    var Swipe = {
        props: {
            swiping: Boolean
        },
        data: {
            swiping: true
        },
        computed: {
            swipeTarget: function(props, $el) {
                return $el;
            }
        },
        connected: function() {
            if (!this.swiping) return;
            registerEvent(this, {
                el: this.swipeTarget,
                name: pointerDown,
                passive: true,
                handler: function(e1) {
                    if (!isTouch(e1)) return;
                    // Handle Swipe Gesture
                    var pos = getEventPos(e1);
                    var target = 'tagName' in e1.target ? e1.target : parent1(e1.target);
                    once(document, pointerUp + " " + pointerCancel + " scroll", function(e) {
                        var ref = getEventPos(e), x = ref.x, y = ref.y;
                        // swipe
                        if (e.type !== 'scroll' && target && x && Math.abs(pos.x - x) > 100 || y && Math.abs(pos.y - y) > 100) setTimeout(function() {
                            trigger(target, 'swipe');
                            trigger(target, "swipe" + swipeDirection(pos.x, pos.y, x, y));
                        });
                    });
                }
            });
        }
    };
    function swipeDirection(x1, y1, x2, y2) {
        return Math.abs(x1 - x2) >= Math.abs(y1 - y2) ? x1 - x2 > 0 ? 'Left' : 'Right' : y1 - y2 > 0 ? 'Up' : 'Down';
    }
    var offcanvas = {
        mixins: [
            Modal,
            Swipe
        ],
        args: 'mode',
        props: {
            mode: String,
            flip: Boolean,
            overlay: Boolean
        },
        data: {
            mode: 'slide',
            flip: false,
            overlay: false,
            clsPage: 'uk-offcanvas-page',
            clsContainer: 'uk-offcanvas-container',
            selPanel: '.uk-offcanvas-bar',
            clsFlip: 'uk-offcanvas-flip',
            clsContainerAnimation: 'uk-offcanvas-container-animation',
            clsSidebarAnimation: 'uk-offcanvas-bar-animation',
            clsMode: 'uk-offcanvas',
            clsOverlay: 'uk-offcanvas-overlay',
            selClose: '.uk-offcanvas-close',
            container: false
        },
        computed: {
            clsFlip: function(_ref) {
                var flip = _ref.flip, clsFlip = _ref.clsFlip;
                return flip ? clsFlip : '';
            },
            clsOverlay: function(_ref2) {
                var overlay = _ref2.overlay, clsOverlay = _ref2.clsOverlay;
                return overlay ? clsOverlay : '';
            },
            clsMode: function(_ref3) {
                var mode = _ref3.mode, clsMode = _ref3.clsMode;
                return clsMode + "-" + mode;
            },
            clsSidebarAnimation: function(_ref4) {
                var mode = _ref4.mode, clsSidebarAnimation = _ref4.clsSidebarAnimation;
                return mode === 'none' || mode === 'reveal' ? '' : clsSidebarAnimation;
            },
            clsContainerAnimation: function(_ref5) {
                var mode = _ref5.mode, clsContainerAnimation = _ref5.clsContainerAnimation;
                return mode !== 'push' && mode !== 'reveal' ? '' : clsContainerAnimation;
            },
            transitionElement: function(_ref6) {
                var mode = _ref6.mode;
                return mode === 'reveal' ? parent1(this.panel) : this.panel;
            }
        },
        update: {
            read: function() {
                if (this.isToggled() && !isVisible(this.$el)) this.hide();
            },
            events: [
                'resize'
            ]
        },
        events: [
            {
                name: 'click',
                delegate: function() {
                    return 'a[href^="#"]';
                },
                handler: function(_ref7) {
                    var hash = _ref7.current.hash, defaultPrevented = _ref7.defaultPrevented;
                    if (!defaultPrevented && hash && $(hash, document.body)) this.hide();
                }
            },
            {
                name: 'touchstart',
                passive: true,
                el: function() {
                    return this.panel;
                },
                handler: function(_ref8) {
                    var targetTouches = _ref8.targetTouches;
                    if (targetTouches.length === 1) this.clientY = targetTouches[0].clientY;
                }
            },
            {
                name: 'touchmove',
                self: true,
                passive: false,
                filter: function() {
                    return this.overlay;
                },
                handler: function(e) {
                    e.cancelable && e.preventDefault();
                }
            },
            {
                name: 'touchmove',
                passive: false,
                el: function() {
                    return this.panel;
                },
                handler: function(e) {
                    if (e.targetTouches.length !== 1) return;
                    var clientY = e.targetTouches[0].clientY - this.clientY;
                    var _panel = this.panel, _$scrollTop = _panel.scrollTop, scrollHeight = _panel.scrollHeight, clientHeight = _panel.clientHeight;
                    if (clientHeight >= scrollHeight || _$scrollTop === 0 && clientY > 0 || scrollHeight - _$scrollTop <= clientHeight && clientY < 0) e.cancelable && e.preventDefault();
                }
            },
            {
                name: 'show',
                self: true,
                handler: function() {
                    if (this.mode === 'reveal' && !hasClass(parent1(this.panel), this.clsMode)) {
                        wrapAll(this.panel, '<div>');
                        addClass(parent1(this.panel), this.clsMode);
                    }
                    css1(document.documentElement, 'overflowY', this.overlay ? 'hidden' : '');
                    addClass(document.body, this.clsContainer, this.clsFlip);
                    css1(document.body, 'touch-action', 'pan-y pinch-zoom');
                    css1(this.$el, 'display', 'block');
                    addClass(this.$el, this.clsOverlay);
                    addClass(this.panel, this.clsSidebarAnimation, this.mode !== 'reveal' ? this.clsMode : '');
                    height1(document.body); // force reflow
                    addClass(document.body, this.clsContainerAnimation);
                    this.clsContainerAnimation && suppressUserScale();
                }
            },
            {
                name: 'hide',
                self: true,
                handler: function() {
                    removeClass(document.body, this.clsContainerAnimation);
                    css1(document.body, 'touch-action', '');
                }
            },
            {
                name: 'hidden',
                self: true,
                handler: function() {
                    this.clsContainerAnimation && resumeUserScale();
                    if (this.mode === 'reveal') unwrap(this.panel);
                    removeClass(this.panel, this.clsSidebarAnimation, this.clsMode);
                    removeClass(this.$el, this.clsOverlay);
                    css1(this.$el, 'display', '');
                    removeClass(document.body, this.clsContainer, this.clsFlip);
                    css1(document.documentElement, 'overflowY', '');
                }
            },
            {
                name: 'swipeLeft swipeRight',
                handler: function(e) {
                    if (this.isToggled() && endsWith(e.type, 'Left') ^ this.flip) this.hide();
                }
            }
        ]
    };
    // Chrome in responsive mode zooms page upon opening offcanvas
    function suppressUserScale() {
        getViewport().content += ',user-scalable=0';
    }
    function resumeUserScale() {
        var viewport = getViewport();
        viewport.content = viewport.content.replace(/,user-scalable=0$/, '');
    }
    function getViewport() {
        return $('meta[name="viewport"]', document.head) || append(document.head, '<meta name="viewport">');
    }
    var overflowAuto = {
        mixins: [
            Class,
            Resize
        ],
        props: {
            selContainer: String,
            selContent: String,
            minHeight: Number
        },
        data: {
            selContainer: '.uk-modal',
            selContent: '.uk-modal-dialog',
            minHeight: 150
        },
        computed: {
            container: function(_ref, $el) {
                var selContainer = _ref.selContainer;
                return closest($el, selContainer);
            },
            content: function(_ref2, $el) {
                var selContent = _ref2.selContent;
                return closest($el, selContent);
            }
        },
        resizeTargets: function() {
            return [
                this.container,
                this.content
            ];
        },
        update: {
            read: function() {
                if (!this.content || !this.container || !isVisible(this.$el)) return false;
                return {
                    max: Math.max(this.minHeight, height1(this.container) - (dimensions$1(this.content).height - height1(this.$el)))
                };
            },
            write: function(_ref3) {
                var max = _ref3.max;
                css1(this.$el, {
                    minHeight: this.minHeight,
                    maxHeight: max
                });
            },
            events: [
                'resize'
            ]
        }
    };
    var responsive = {
        mixins: [
            Resize
        ],
        props: [
            'width',
            'height'
        ],
        resizeTargets: function() {
            return [
                this.$el,
                parent1(this.$el)
            ];
        },
        connected: function() {
            addClass(this.$el, 'uk-responsive-width');
        },
        update: {
            read: function() {
                return isVisible(this.$el) && this.width && this.height ? {
                    width: width1(parent1(this.$el)),
                    height: this.height
                } : false;
            },
            write: function(dim) {
                height1(this.$el, Dimensions.contain({
                    height: this.height,
                    width: this.width
                }, dim).height);
            },
            events: [
                'resize'
            ]
        }
    };
    var scroll1 = {
        props: {
            offset: Number
        },
        data: {
            offset: 0
        },
        methods: {
            scrollTo: function(el) {
                return _helpers.asyncToGenerator(_regeneratorRuntimeDefault.default.mark(function _callee() {
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                el = el && $(el) || document.body;
                                if (!trigger(this.$el, 'beforescroll', [
                                    this,
                                    el
                                ])) {
                                    _ctx.next = 5;
                                    break;
                                }
                                _ctx.next = 4;
                                return scrollIntoView(el, {
                                    offset: this.offset
                                });
                            case 4:
                                trigger(this.$el, 'scrolled', [
                                    this,
                                    el
                                ]);
                            case 5:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this);
                })).apply(this);
            }
        },
        events: {
            click: function(e) {
                if (e.defaultPrevented) return;
                e.preventDefault();
                this.scrollTo(getTargetElement(this.$el));
            }
        }
    };
    function getTargetElement(el) {
        return document.getElementById(decodeURIComponent(el.hash).substring(1));
    }
    var scrollspy = {
        mixins: [
            Scroll
        ],
        args: 'cls',
        props: {
            cls: String,
            target: String,
            hidden: Boolean,
            offsetTop: Number,
            offsetLeft: Number,
            repeat: Boolean,
            delay: Number
        },
        data: function() {
            return {
                cls: '',
                target: false,
                hidden: true,
                offsetTop: 0,
                offsetLeft: 0,
                repeat: false,
                delay: 0,
                inViewClass: 'uk-scrollspy-inview'
            };
        },
        computed: {
            elements: {
                get: function(_ref, $el) {
                    var target = _ref.target;
                    return target ? $$(target, $el) : [
                        $el
                    ];
                },
                watch: function(elements, prev) {
                    if (this.hidden) css1(filter$1(elements, ":not(." + this.inViewClass + ")"), 'visibility', 'hidden');
                    if (prev) this.$reset();
                },
                immediate: true
            }
        },
        connected: function() {
            var _this = this;
            this._data.elements = new Map();
            this.registerObserver(observeIntersection(this.elements, function(records) {
                var elements = _this._data.elements;
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = records[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var _value = _step.value, el = _value.target, isIntersecting = _value.isIntersecting;
                        if (!elements.has(el)) elements.set(el, {
                            cls: data1(el, 'uk-scrollspy-class') || _this.cls
                        });
                        var state = elements.get(el);
                        if (!_this.repeat && state.show) continue;
                        state.show = isIntersecting;
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                _this.$emit();
            }, {
                rootMargin: toPx(this.offsetTop, 'height') - 1 + "px " + (toPx(this.offsetLeft, 'width') - 1) + "px"
            }, false));
        },
        disconnected: function() {
            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
            try {
                for(var _iterator = this._data.elements.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                    var _value = _helpers.slicedToArray(_step.value, 2), el = _value[0], state = _value[1];
                    removeClass(el, this.inViewClass, (state == null ? void 0 : state.cls) || '');
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally{
                try {
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                    }
                } finally{
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        },
        update: [
            {
                write: function(data) {
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _this9 = this, _loop = function(_iterator, _step) {
                            var _value = _helpers.slicedToArray(_step.value, 2), el = _value[0], state = _value[1];
                            if (state.show && !state.inview && !state.queued) {
                                var _this7 = _this9;
                                state.queued = true;
                                data.promise = (data.promise || Promise.resolve()).then(function() {
                                    return new Promise(function(resolve) {
                                        return setTimeout(resolve, _this7.delay);
                                    });
                                }).then(function() {
                                    var _this = _this7;
                                    _this7.toggle(el, true);
                                    setTimeout(function() {
                                        state.queued = false;
                                        _this.$emit();
                                    }, 300);
                                });
                            } else if (!state.show && state.inview && !state.queued && _this9.repeat) _this9.toggle(el, false);
                        };
                        for(var _iterator = data.elements.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop(_iterator, _step);
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                }
            }
        ],
        methods: {
            toggle: function(el, inview) {
                var state = this._data.elements.get(el);
                state.off == null || state.off();
                css1(el, 'visibility', !inview && this.hidden ? 'hidden' : '');
                toggleClass(el, this.inViewClass, inview);
                toggleClass(el, state.cls);
                if (/\buk-animation-/.test(state.cls)) {
                    var removeAnimationClasses = function() {
                        return removeClasses(el, 'uk-animation-[\\w-]+');
                    };
                    if (inview) state.off = once(el, 'animationcancel animationend', removeAnimationClasses);
                    else removeAnimationClasses();
                }
                trigger(el, inview ? 'inview' : 'outview');
                state.inview = inview;
                this.$update(el);
            }
        }
    };
    var scrollspyNav = {
        mixins: [
            Scroll
        ],
        props: {
            cls: String,
            closest: String,
            scroll: Boolean,
            overflow: Boolean,
            offset: Number
        },
        data: {
            cls: 'uk-active',
            closest: false,
            scroll: false,
            overflow: true,
            offset: 0
        },
        computed: {
            links: {
                get: function(_, $el) {
                    return $$('a[href^="#"]', $el).filter(function(el) {
                        return el.hash;
                    });
                },
                watch: function(links) {
                    if (this.scroll) this.$create('scroll', links, {
                        offset: this.offset || 0
                    });
                },
                immediate: true
            },
            elements: function(_ref) {
                var selector = _ref.closest;
                return closest(this.links, selector || '*');
            }
        },
        update: [
            {
                read: function() {
                    var targets = this.links.map(getTargetElement).filter(Boolean);
                    var length = targets.length;
                    if (!length || !isVisible(this.$el)) return false;
                    var ref = _helpers.slicedToArray(scrollParents(targets, /auto|scroll/, true), 1), scrollElement = ref[0];
                    var _$scrollTop = scrollElement.scrollTop, scrollHeight = scrollElement.scrollHeight;
                    var viewport = offsetViewport(scrollElement);
                    var max = scrollHeight - viewport.height;
                    var active = false;
                    if (_$scrollTop === max) active = length - 1;
                    else {
                        for(var i = 0; i < targets.length; i++){
                            if (offset1(targets[i]).top - viewport.top - this.offset > 0) break;
                            active = +i;
                        }
                        if (active === false && this.overflow) active = 0;
                    }
                    return {
                        active: active
                    };
                },
                write: function(_ref2) {
                    var active = _ref2.active;
                    var changed = active !== false && !hasClass(this.elements[active], this.cls);
                    this.links.forEach(function(el) {
                        return el.blur();
                    });
                    for(var i = 0; i < this.elements.length; i++)toggleClass(this.elements[i], this.cls, +i === active);
                    if (changed) trigger(this.$el, 'active', [
                        active,
                        this.elements[active]
                    ]);
                },
                events: [
                    'scroll',
                    'resize'
                ]
            }
        ]
    };
    var sticky = {
        mixins: [
            Class,
            Media,
            Resize,
            Scroll
        ],
        props: {
            position: String,
            top: null,
            bottom: null,
            start: null,
            end: null,
            offset: String,
            overflowFlip: Boolean,
            animation: String,
            clsActive: String,
            clsInactive: String,
            clsFixed: String,
            clsBelow: String,
            selTarget: String,
            showOnUp: Boolean,
            targetOffset: Number
        },
        data: {
            position: 'top',
            top: false,
            bottom: false,
            start: false,
            end: false,
            offset: 0,
            overflowFlip: false,
            animation: '',
            clsActive: 'uk-active',
            clsInactive: '',
            clsFixed: 'uk-sticky-fixed',
            clsBelow: 'uk-sticky-below',
            selTarget: '',
            showOnUp: false,
            targetOffset: false
        },
        computed: {
            selTarget: function(_ref, $el) {
                var selTarget = _ref.selTarget;
                return selTarget && $(selTarget, $el) || $el;
            }
        },
        resizeTargets: function() {
            return document.documentElement;
        },
        connected: function() {
            this.start = coerce(this.start || this.top);
            this.end = coerce(this.end || this.bottom);
            this.placeholder = $('+ .uk-sticky-placeholder', this.$el) || $('<div class="uk-sticky-placeholder"></div>');
            this.isFixed = false;
            this.setActive(false);
        },
        disconnected: function() {
            if (this.isFixed) {
                this.hide();
                removeClass(this.selTarget, this.clsInactive);
            }
            remove$1(this.placeholder);
            this.placeholder = null;
        },
        events: [
            {
                name: 'resize',
                el: function() {
                    return window;
                },
                handler: function() {
                    this.$emit('resize');
                }
            },
            {
                name: 'load hashchange popstate',
                el: function() {
                    return window;
                },
                filter: function() {
                    return this.targetOffset !== false;
                },
                handler: function() {
                    var _this = this;
                    if (!location.hash || scrollTop(window) === 0) return;
                    setTimeout(function() {
                        var targetOffset = offset1($(location.hash));
                        var elOffset = offset1(_this.$el);
                        if (_this.isFixed && intersectRect(targetOffset, elOffset)) scrollTop(window, targetOffset.top - elOffset.height - toPx(_this.targetOffset, 'height', _this.placeholder) - toPx(_this.offset, 'height', _this.placeholder));
                    });
                }
            }
        ],
        update: [
            {
                read: function(_ref2, types) {
                    var height$1 = _ref2.height, margin = _ref2.margin;
                    this.inactive = !this.matchMedia || !isVisible(this.$el);
                    if (this.inactive) return false;
                    var hide = this.active && types.has('resize');
                    if (hide) {
                        css1(this.selTarget, 'transition', '0s');
                        this.hide();
                    }
                    if (!this.active) {
                        height$1 = offset1(this.$el).height;
                        margin = css1(this.$el, 'margin');
                    }
                    if (hide) {
                        var _this = this;
                        this.show();
                        requestAnimationFrame(function() {
                            return css1(_this.selTarget, 'transition', '');
                        });
                    }
                    var referenceElement = this.isFixed ? this.placeholder : this.$el;
                    var windowHeight = height1(window);
                    var _$position = this.position;
                    if (this.overflowFlip && height$1 > windowHeight) _$position = _$position === 'top' ? 'bottom' : 'top';
                    var offset$1 = toPx(this.offset, 'height', referenceElement);
                    if (_$position === 'bottom' && (height$1 < windowHeight || this.overflowFlip)) offset$1 += windowHeight - height$1;
                    var overflow = this.overflowFlip ? 0 : Math.max(0, height$1 + offset$1 - windowHeight);
                    var topOffset = offset1(referenceElement).top;
                    var start = (this.start === false ? topOffset : parseProp(this.start, this.$el, topOffset)) - offset$1;
                    var end = this.end === false ? document.scrollingElement.scrollHeight - windowHeight : parseProp(this.end, this.$el, topOffset + height$1, true) - offset1(this.$el).height + overflow - offset$1;
                    return {
                        start: start,
                        end: end,
                        offset: offset$1,
                        overflow: overflow,
                        topOffset: topOffset,
                        height: height$1,
                        margin: margin,
                        width: dimensions$1(referenceElement).width,
                        top: offsetPosition(referenceElement)[0]
                    };
                },
                write: function(_ref3) {
                    var height = _ref3.height, margin = _ref3.margin;
                    var placeholder = this.placeholder;
                    css1(placeholder, {
                        height: height,
                        margin: margin
                    });
                    if (!within(placeholder, document)) {
                        after(this.$el, placeholder);
                        placeholder.hidden = true;
                    }
                },
                events: [
                    'resize'
                ]
            },
            {
                read: function(_ref4) {
                    var tmp = _ref4.scroll, prevScroll = tmp === void 0 ? 0 : tmp, tmp2 = _ref4.dir, prevDir = tmp2 === void 0 ? 'down' : tmp2, overflow = _ref4.overflow, _overflowScroll = _ref4.overflowScroll, overflowScroll = _overflowScroll === void 0 ? 0 : _overflowScroll, start = _ref4.start, end = _ref4.end;
                    var scroll = scrollTop(window);
                    var dir = prevScroll <= scroll ? 'down' : 'up';
                    return {
                        dir: dir,
                        prevDir: prevDir,
                        scroll: scroll,
                        prevScroll: prevScroll,
                        offsetParentTop: offset1((this.isFixed ? this.placeholder : this.$el).offsetParent).top,
                        overflowScroll: clamp(overflowScroll + clamp(scroll, start, end) - clamp(prevScroll, start, end), 0, overflow)
                    };
                },
                write: function(data, types) {
                    var isScrollUpdate = types.has('scroll');
                    var _initTimestamp = data.initTimestamp, initTimestamp = _initTimestamp === void 0 ? 0 : _initTimestamp, dir = data.dir, prevDir = data.prevDir, scroll = data.scroll, _prevScroll = data.prevScroll, prevScroll = _prevScroll === void 0 ? 0 : _prevScroll, top = data.top, start = data.start, topOffset = data.topOffset, height = data.height;
                    if (scroll < 0 || scroll === prevScroll && isScrollUpdate || this.showOnUp && !isScrollUpdate && !this.isFixed) return;
                    var now = Date.now();
                    if (now - initTimestamp > 300 || dir !== prevDir) {
                        data.initScroll = scroll;
                        data.initTimestamp = now;
                    }
                    if (this.showOnUp && !this.isFixed && Math.abs(data.initScroll - scroll) <= 30 && Math.abs(prevScroll - scroll) <= 10) return;
                    if (this.inactive || scroll < start || this.showOnUp && (scroll <= start || dir === 'down' && isScrollUpdate || dir === 'up' && !this.isFixed && scroll <= topOffset + height)) {
                        if (!this.isFixed) {
                            if (Animation.inProgress(this.$el) && top > scroll) {
                                Animation.cancel(this.$el);
                                this.hide();
                            }
                            return;
                        }
                        this.isFixed = false;
                        if (this.animation && scroll > topOffset) {
                            var _this = this;
                            Animation.cancel(this.$el);
                            Animation.out(this.$el, this.animation).then(function() {
                                return _this.hide();
                            }, noop);
                        } else this.hide();
                    } else if (this.isFixed) this.update();
                    else if (this.animation && scroll > topOffset) {
                        Animation.cancel(this.$el);
                        this.show();
                        Animation.in(this.$el, this.animation).catch(noop);
                    } else this.show();
                },
                events: [
                    'resize',
                    'scroll'
                ]
            }
        ],
        methods: {
            show: function() {
                this.isFixed = true;
                this.update();
                this.placeholder.hidden = false;
            },
            hide: function() {
                this.setActive(false);
                removeClass(this.$el, this.clsFixed, this.clsBelow);
                css1(this.$el, {
                    position: '',
                    top: '',
                    width: ''
                });
                this.placeholder.hidden = true;
            },
            update: function() {
                var __data = this._data, width = __data.width, _scroll = __data.scroll, scroll = _scroll === void 0 ? 0 : _scroll, overflow = __data.overflow, _overflowScroll = __data.overflowScroll, overflowScroll = _overflowScroll === void 0 ? 0 : _overflowScroll, start = __data.start, end = __data.end, _$offset = __data.offset, topOffset = __data.topOffset, height = __data.height, offsetParentTop = __data.offsetParentTop;
                var active = start !== 0 || scroll > start;
                var _$position = 'fixed';
                if (scroll > end) {
                    _$offset += end - offsetParentTop;
                    _$position = 'absolute';
                }
                if (overflow) _$offset -= overflowScroll;
                css1(this.$el, {
                    position: _$position,
                    top: _$offset + "px",
                    width: width
                });
                this.setActive(active);
                toggleClass(this.$el, this.clsBelow, scroll > topOffset + height);
                addClass(this.$el, this.clsFixed);
            },
            setActive: function(active) {
                var prev = this.active;
                this.active = active;
                if (active) {
                    replaceClass(this.selTarget, this.clsInactive, this.clsActive);
                    prev !== active && trigger(this.$el, 'active');
                } else {
                    replaceClass(this.selTarget, this.clsActive, this.clsInactive);
                    prev !== active && trigger(this.$el, 'inactive');
                }
            }
        }
    };
    function parseProp(value, el, propOffset, padding) {
        if (!value) return 0;
        if (isNumeric(value) || isString(value) && value.match(/^-?\d/)) return propOffset + toPx(value, 'height', el, true);
        else {
            var refElement = value === true ? parent1(el) : query(value, el);
            return offset1(refElement).bottom - (padding && refElement && within(el, refElement) ? toFloat(css1(refElement, 'paddingBottom')) : 0);
        }
    }
    function coerce(value) {
        if (value === 'true') return true;
        else if (value === 'false') return false;
        return value;
    }
    var Switcher = {
        mixins: [
            Lazyload,
            Swipe,
            Togglable
        ],
        args: 'connect',
        props: {
            connect: String,
            toggle: String,
            itemNav: String,
            active: Number
        },
        data: {
            connect: '~.uk-switcher',
            toggle: '> * > :first-child',
            itemNav: false,
            active: 0,
            cls: 'uk-active',
            attrItem: 'uk-switcher-item'
        },
        computed: {
            connects: {
                get: function(_ref, $el) {
                    var connect = _ref.connect;
                    return queryAll(connect, $el);
                },
                watch: function(connects) {
                    var _this = this;
                    if (this.swiping) css1(connects, 'touch-action', 'pan-y pinch-zoom');
                    var _$index = this.index();
                    this.connects.forEach(function(el) {
                        return children1(el).forEach(function(child, i) {
                            return toggleClass(child, _this.cls, i === _$index);
                        });
                    });
                },
                immediate: true
            },
            toggles: {
                get: function(_ref2, $el) {
                    var toggle = _ref2.toggle;
                    return $$(toggle, $el).filter(function(el) {
                        return !matches(el, '.uk-disabled *, .uk-disabled, [disabled]');
                    });
                },
                watch: function(toggles) {
                    var active = this.index();
                    this.show(~active ? active : toggles[this.active] || toggles[0]);
                },
                immediate: true
            },
            children: function() {
                var _this = this;
                return children1(this.$el).filter(function(child) {
                    return _this.toggles.some(function(toggle) {
                        return within(toggle, child);
                    });
                });
            },
            swipeTarget: function() {
                return this.connects;
            }
        },
        connected: function() {
            var _this = this;
            this.lazyload(this.$el, this.connects);
            // check for connects
            ready(function() {
                return _this.$emit();
            });
        },
        events: [
            {
                name: 'click',
                delegate: function() {
                    return this.toggle;
                },
                handler: function(e) {
                    e.preventDefault();
                    this.show(e.current);
                }
            },
            {
                name: 'click',
                el: function() {
                    return this.connects.concat(this.itemNav ? queryAll(this.itemNav, this.$el) : []);
                },
                delegate: function() {
                    return "[" + this.attrItem + "],[data-" + this.attrItem + "]";
                },
                handler: function(e) {
                    e.preventDefault();
                    this.show(data1(e.current, this.attrItem));
                }
            },
            {
                name: 'swipeRight swipeLeft',
                filter: function() {
                    return this.swiping;
                },
                el: function() {
                    return this.connects;
                },
                handler: function(_ref3) {
                    var type = _ref3.type;
                    this.show(endsWith(type, 'Left') ? 'next' : 'previous');
                }
            }
        ],
        methods: {
            index: function() {
                var _this = this;
                return findIndex(this.children, function(el) {
                    return hasClass(el, _this.cls);
                });
            },
            show: function(item) {
                var _this = this;
                var prev = this.index();
                var next = getIndex(item, this.toggles, prev);
                var active = getIndex(this.children[next], children1(this.$el));
                children1(this.$el).forEach(function(child, i) {
                    toggleClass(child, _this.cls, active === i);
                    attr1(_this.toggles[i], 'aria-expanded', active === i);
                });
                var animate = prev >= 0 && prev !== next;
                var _this11 = this;
                this.connects.forEach(function() {
                    var _ref = _helpers.asyncToGenerator(_regeneratorRuntimeDefault.default.mark(function _callee(_ref4) {
                        var _$children;
                        return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                            while(1)switch(_ctx.prev = _ctx.next){
                                case 0:
                                    _$children = _ref4.children;
                                    _ctx.next = 3;
                                    return _this11.toggleElement(toNodes(_$children).filter(function(child) {
                                        return hasClass(child, _this11.cls);
                                    }), false, animate);
                                case 3:
                                    _ctx.next = 5;
                                    return _this11.toggleElement(_$children[active], true, animate);
                                case 5:
                                case "end":
                                    return _ctx.stop();
                            }
                        }, _callee);
                    }));
                    return function(_ref4) {
                        return _ref.apply(this, arguments);
                    };
                }());
            }
        }
    };
    var tab = {
        mixins: [
            Class
        ],
        extends: Switcher,
        props: {
            media: Boolean
        },
        data: {
            media: 960,
            attrItem: 'uk-tab-item'
        },
        connected: function() {
            var cls = hasClass(this.$el, 'uk-tab-left') ? 'uk-tab-left' : hasClass(this.$el, 'uk-tab-right') ? 'uk-tab-right' : false;
            if (cls) this.$create('toggle', this.$el, {
                cls: cls,
                mode: 'media',
                media: this.media
            });
        }
    };
    var KEY_SPACE = 32;
    var toggle1 = {
        mixins: [
            Lazyload,
            Media,
            Togglable
        ],
        args: 'target',
        props: {
            href: String,
            target: null,
            mode: 'list',
            queued: Boolean
        },
        data: {
            href: false,
            target: false,
            mode: 'click',
            queued: true
        },
        computed: {
            target: {
                get: function(_ref, $el) {
                    var href = _ref.href, target = _ref.target;
                    target = queryAll(target || href, $el);
                    return target.length && target || [
                        $el
                    ];
                },
                watch: function() {
                    this.updateAria();
                },
                immediate: true
            }
        },
        connected: function() {
            var _this = this;
            if (!includes(this.mode, 'media') && !isFocusable(this.$el)) attr1(this.$el, 'tabindex', '0');
            this.lazyload(this.$el, this.target);
            // check for target
            ready(function() {
                return _this.$emit();
            });
        },
        events: [
            {
                name: pointerDown,
                filter: function() {
                    return includes(this.mode, 'hover');
                },
                handler: function(e2) {
                    var _this = this;
                    if (!isTouch(e2) || this._showState) return;
                    // Clicking a button does not give it focus on all browsers and platforms
                    // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#clicking_and_focus
                    trigger(this.$el, 'focus');
                    once(document, pointerDown, function() {
                        return trigger(_this.$el, 'blur');
                    }, true, function(e) {
                        return !within(e.target, _this.$el);
                    });
                    // Prevent initial click to prevent double toggle through focus + click
                    if (includes(this.mode, 'click')) this._preventClick = true;
                }
            },
            {
                name: pointerEnter + " " + pointerLeave + " focus blur",
                filter: function() {
                    return includes(this.mode, 'hover');
                },
                handler: function(e) {
                    if (isTouch(e)) return;
                    var show = includes([
                        pointerEnter,
                        'focus'
                    ], e.type);
                    var expanded = attr1(this.$el, 'aria-expanded');
                    // Skip hide if still hovered or focused
                    if (!show && (e.type === pointerLeave && matches(this.$el, ':focus') || e.type === 'blur' && matches(this.$el, ':hover'))) return;
                    // Skip if state does not change e.g. hover + focus received
                    if (this._showState && show && expanded !== this._showState) {
                        // Ensure reset if state has changed through click
                        if (!show) this._showState = null;
                        return;
                    }
                    this._showState = show ? expanded : null;
                    this.toggle("toggle" + (show ? 'show' : 'hide'));
                }
            },
            {
                name: 'keydown',
                filter: function() {
                    return includes(this.mode, 'click') && !isTag(this.$el, 'input');
                },
                handler: function(e) {
                    if (e.keyCode === KEY_SPACE) {
                        e.preventDefault();
                        this.$el.click();
                    }
                }
            },
            {
                name: 'click',
                handler: function(e) {
                    var link;
                    if (closest(e.target, 'a[href="#"], a[href=""]') || (link = closest(e.target, 'a[href]')) && (attr1(this.$el, 'aria-expanded') !== 'true' || link.hash && matches(this.target, link.hash))) e.preventDefault();
                    if (this._preventClick) return this._preventClick = null;
                    if (!includes(this.mode, 'click')) return;
                    this.toggle();
                }
            },
            {
                name: 'toggled',
                self: true,
                el: function() {
                    return this.target;
                },
                handler: function(e, toggled) {
                    if (e.target === this.target[0]) this.updateAria(toggled);
                }
            },
            {
                name: 'mediachange',
                filter: function() {
                    return includes(this.mode, 'media');
                },
                el: function() {
                    return this.target;
                },
                handler: function(e, mediaObj) {
                    if (mediaObj.matches ^ this.isToggled(this.target)) this.toggle();
                }
            }
        ],
        methods: {
            toggle: function(type) {
                return _helpers.asyncToGenerator(_regeneratorRuntimeDefault.default.mark(function _callee() {
                    var _this, leaving, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, el13, isLeaving, toggled;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                _this = this;
                                if (trigger(this.target, type || 'toggle', [
                                    this
                                ])) {
                                    _ctx.next = 3;
                                    break;
                                }
                                return _ctx.abrupt("return");
                            case 3:
                                if (this.queued) {
                                    _ctx.next = 5;
                                    break;
                                }
                                return _ctx.abrupt("return", this.toggleElement(this.target));
                            case 5:
                                leaving = this.target.filter(function(el) {
                                    return hasClass(el, _this.clsLeave);
                                });
                                if (!leaving.length) {
                                    _ctx.next = 25;
                                    break;
                                }
                                _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                                _ctx.prev = 8;
                                for(_iterator = this.target[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                                    el13 = _step.value;
                                    isLeaving = includes(leaving, el13);
                                    this.toggleElement(el13, isLeaving, isLeaving);
                                }
                                _ctx.next = 16;
                                break;
                            case 12:
                                _ctx.prev = 12;
                                _ctx.t0 = _ctx["catch"](8);
                                _didIteratorError = true;
                                _iteratorError = _ctx.t0;
                            case 16:
                                _ctx.prev = 16;
                                _ctx.prev = 17;
                                if (!_iteratorNormalCompletion && _iterator.return != null) {
                                    _iterator.return();
                                }
                            case 19:
                                _ctx.prev = 19;
                                if (!_didIteratorError) {
                                    _ctx.next = 22;
                                    break;
                                }
                                throw _iteratorError;
                            case 22:
                                return _ctx.finish(19);
                            case 23:
                                return _ctx.finish(16);
                            case 24:
                                return _ctx.abrupt("return");
                            case 25:
                                toggled = this.target.filter(this.isToggled);
                                _ctx.next = 28;
                                return this.toggleElement(toggled, false);
                            case 28:
                                _ctx.next = 30;
                                return this.toggleElement(this.target.filter(function(el) {
                                    return !includes(toggled, el);
                                }), true);
                            case 30:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this, [
                        [
                            8,
                            12,
                            16,
                            24
                        ],
                        [
                            17,
                            ,
                            19,
                            23
                        ]
                    ]);
                })).apply(this);
            },
            updateAria: function(toggled) {
                if (includes(this.mode, 'media')) return;
                attr1(this.$el, 'aria-expanded', isBoolean(toggled) ? toggled : this.isToggled(this.target));
            }
        }
    };
    var components$1 = /*#__PURE__*/ Object.freeze({
        __proto__: null,
        Accordion: Accordion,
        Alert: alert,
        Cover: cover1,
        Drop: drop,
        Dropdown: drop,
        FormCustom: formCustom,
        Grid: grid,
        HeightMatch: heightMatch,
        HeightViewport: heightViewport,
        Icon: Icon,
        Img: img1,
        Leader: leader,
        Margin: Margin,
        Modal: modal1,
        Nav: nav,
        Navbar: navbar,
        Offcanvas: offcanvas,
        OverflowAuto: overflowAuto,
        Responsive: responsive,
        Scroll: scroll1,
        Scrollspy: scrollspy,
        ScrollspyNav: scrollspyNav,
        Sticky: sticky,
        Svg: SVG,
        Switcher: Switcher,
        Tab: tab,
        Toggle: toggle1,
        Video: Video,
        Close: Close,
        Spinner: Spinner,
        SlidenavNext: Slidenav,
        SlidenavPrevious: Slidenav,
        SearchIcon: Search,
        Marker: IconComponent,
        NavbarToggleIcon: IconComponent,
        OverlayIcon: IconComponent,
        PaginationNext: IconComponent,
        PaginationPrevious: IconComponent,
        Totop: IconComponent
    });
    // register components
    each(components$1, function(component, name) {
        return UIkit1.component(name, component);
    });
    boot(UIkit1);
    var units = [
        'days',
        'hours',
        'minutes',
        'seconds'
    ];
    var countdown = {
        mixins: [
            Class
        ],
        props: {
            date: String,
            clsWrapper: String
        },
        data: {
            date: '',
            clsWrapper: '.uk-countdown-%unit%'
        },
        connected: function() {
            this.date = Date.parse(this.$props.date);
            this.start();
        },
        disconnected: function() {
            this.stop();
        },
        events: [
            {
                name: 'visibilitychange',
                el: function() {
                    return document;
                },
                handler: function() {
                    if (document.hidden) this.stop();
                    else this.start();
                }
            }
        ],
        methods: {
            start: function() {
                this.stop();
                this.update();
                this.timer = setInterval(this.update, 1000);
            },
            stop: function() {
                clearInterval(this.timer);
            },
            update: function() {
                var timespan = getTimeSpan(this.date);
                if (!this.date || timespan.total <= 0) {
                    this.stop();
                    timespan.days = timespan.hours = timespan.minutes = timespan.seconds = 0;
                }
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _this = this, _loop = function(_iterator, _step) {
                        var unit = _step.value;
                        var el = $(_this.clsWrapper.replace('%unit%', unit), _this.$el);
                        if (!el) return "continue";
                        var digits = String(Math.trunc(timespan[unit]));
                        digits = digits.length < 2 ? "0" + digits : digits;
                        if (el.textContent !== digits) {
                            digits = digits.split('');
                            if (digits.length !== el.children.length) html1(el, digits.map(function() {
                                return '<span></span>';
                            }).join(''));
                            digits.forEach(function(digit, i) {
                                return el.children[i].textContent = digit;
                            });
                        }
                    };
                    for(var _iterator = units[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop(_iterator, _step);
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        }
    };
    function getTimeSpan(date) {
        var total = date - Date.now();
        return {
            total: total,
            seconds: total / 1000 % 60,
            minutes: total / 1000 / 60 % 60,
            hours: total / 1000 / 60 / 60 % 24,
            days: total / 1000 / 60 / 60 / 24
        };
    }
    var clsLeave = 'uk-transition-leave';
    var clsEnter = 'uk-transition-enter';
    function fade(action, target, duration, stagger) {
        if (stagger === void 0) stagger = 0;
        var _$index = transitionIndex(target, true);
        var propsIn = {
            opacity: 1
        };
        var propsOut = {
            opacity: 0
        };
        var wrapIndexFn = function(fn) {
            return function() {
                return _$index === transitionIndex(target) ? fn() : Promise.reject();
            };
        };
        var leaveFn = wrapIndexFn(function() {
            addClass(target, clsLeave);
            return Promise.all(getTransitionNodes(target).map(function(child, i) {
                return new Promise(function(resolve) {
                    return setTimeout(function() {
                        return Transition.start(child, propsOut, duration / 2, 'ease').then(resolve);
                    }, i * stagger);
                });
            })).then(function() {
                return removeClass(target, clsLeave);
            });
        });
        var enterFn = wrapIndexFn(function() {
            var oldHeight = height1(target);
            addClass(target, clsEnter);
            action();
            css1(children1(target), {
                opacity: 0
            });
            // Ensure UIkit updates have propagated
            return new Promise(function(resolve1) {
                return requestAnimationFrame(function() {
                    var nodes = children1(target);
                    var newHeight = height1(target);
                    // Ensure Grid cells do not stretch when height is applied
                    css1(target, 'alignContent', 'flex-start');
                    height1(target, oldHeight);
                    var transitionNodes = getTransitionNodes(target);
                    css1(nodes, propsOut);
                    var transitions = transitionNodes.map(function(child, i) {
                        return new Promise(function(resolve) {
                            return setTimeout(function() {
                                return Transition.start(child, propsIn, duration / 2, 'ease').then(resolve);
                            }, i * stagger);
                        });
                    });
                    if (oldHeight !== newHeight) transitions.push(Transition.start(target, {
                        height: newHeight
                    }, duration / 2 + transitionNodes.length * stagger, 'ease'));
                    Promise.all(transitions).then(function() {
                        removeClass(target, clsEnter);
                        if (_$index === transitionIndex(target)) {
                            css1(target, {
                                height: '',
                                alignContent: ''
                            });
                            css1(nodes, {
                                opacity: ''
                            });
                            delete target.dataset.transition;
                        }
                        resolve1();
                    });
                });
            });
        });
        return hasClass(target, clsLeave) ? waitTransitionend(target).then(enterFn) : hasClass(target, clsEnter) ? waitTransitionend(target).then(leaveFn).then(enterFn) : leaveFn().then(enterFn);
    }
    function transitionIndex(target, next) {
        if (next) target.dataset.transition = 1 + transitionIndex(target);
        return toNumber(target.dataset.transition) || 0;
    }
    function waitTransitionend(target) {
        return Promise.all(children1(target).filter(Transition.inProgress).map(function(el) {
            return new Promise(function(resolve) {
                return once(el, 'transitionend transitioncanceled', resolve);
            });
        }));
    }
    function getTransitionNodes(target) {
        return getRows(children1(target)).reduce(function(nodes, row) {
            return nodes.concat(sortBy$1(row.filter(function(el) {
                return isInView(el);
            }), 'offsetLeft'));
        }, []);
    }
    function slide1(action, target, duration) {
        return new Promise(function(resolve) {
            return requestAnimationFrame(function() {
                var nodes = children1(target);
                // Get current state
                var currentProps = nodes.map(function(el) {
                    return getProps(el, true);
                });
                var targetProps = css1(target, [
                    'height',
                    'padding'
                ]);
                // Cancel previous animations
                Transition.cancel(target);
                nodes.forEach(Transition.cancel);
                reset1(target);
                // Adding, sorting, removing nodes
                action();
                // Find new nodes
                nodes = nodes.concat(children1(target).filter(function(el) {
                    return !includes(nodes, el);
                }));
                // Wait for update to propagate
                Promise.resolve().then(function() {
                    // Force update
                    fastdom.flush();
                    // Get new state
                    var targetPropsTo = css1(target, [
                        'height',
                        'padding'
                    ]);
                    var ref = _helpers.slicedToArray(getTransitionProps(target, nodes, currentProps), 2), propsTo = ref[0], propsFrom = ref[1];
                    // Reset to previous state
                    nodes.forEach(function(el, i) {
                        return propsFrom[i] && css1(el, propsFrom[i]);
                    });
                    css1(target, _helpers.objectSpread({
                        display: 'block'
                    }, targetProps));
                    // Start transitions on next frame
                    requestAnimationFrame(function() {
                        var transitions = nodes.map(function(el, i) {
                            return parent1(el) === target && Transition.start(el, propsTo[i], duration, 'ease');
                        }).concat(Transition.start(target, targetPropsTo, duration, 'ease'));
                        Promise.all(transitions).then(function() {
                            nodes.forEach(function(el, i) {
                                return parent1(el) === target && css1(el, 'display', propsTo[i].opacity === 0 ? 'none' : '');
                            });
                            reset1(target);
                        }, noop).then(resolve);
                    });
                });
            });
        });
    }
    function getProps(el, opacity) {
        var zIndex = css1(el, 'zIndex');
        return isVisible(el) ? _helpers.objectSpread({
            display: '',
            opacity: opacity ? css1(el, 'opacity') : '0',
            pointerEvents: 'none',
            position: 'absolute',
            zIndex: zIndex === 'auto' ? index1(el) : zIndex
        }, getPositionWithMargin(el)) : false;
    }
    function getTransitionProps(target, nodes, currentProps) {
        var propsTo = nodes.map(function(el, i) {
            return parent1(el) && i in currentProps ? currentProps[i] ? isVisible(el) ? getPositionWithMargin(el) : {
                opacity: 0
            } : {
                opacity: isVisible(el) ? 1 : 0
            } : false;
        });
        var propsFrom = propsTo.map(function(props, i) {
            var from = parent1(nodes[i]) === target && (currentProps[i] || getProps(nodes[i]));
            if (!from) return false;
            if (!props) delete from.opacity;
            else if (!('opacity' in props)) {
                var opacity = from.opacity;
                if (opacity % 1) props.opacity = 1;
                else delete from.opacity;
            }
            return from;
        });
        return [
            propsTo,
            propsFrom
        ];
    }
    function reset1(el) {
        css1(el.children, {
            height: '',
            left: '',
            opacity: '',
            pointerEvents: '',
            position: '',
            top: '',
            marginTop: '',
            marginLeft: '',
            transform: '',
            width: '',
            zIndex: ''
        });
        css1(el, {
            height: '',
            display: '',
            padding: ''
        });
    }
    function getPositionWithMargin(el) {
        var ref = offset1(el), height = ref.height, width = ref.width;
        var ref9 = position1(el), top = ref9.top, left = ref9.left;
        var ref10 = css1(el, [
            'marginTop',
            'marginLeft'
        ]), marginLeft = ref10.marginLeft, marginTop = ref10.marginTop;
        return {
            top: top,
            left: left,
            height: height,
            width: width,
            marginLeft: marginLeft,
            marginTop: marginTop,
            transform: ''
        };
    }
    var Animate = {
        props: {
            duration: Number,
            animation: Boolean
        },
        data: {
            duration: 150,
            animation: 'slide'
        },
        methods: {
            animate: function(action, target) {
                var _this = this;
                if (target === void 0) target = this.$el;
                var name = this.animation;
                var animationFn = name === 'fade' ? fade : name === 'delayed-fade' ? function animationFn() {
                    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
                    return fade.apply(void 0, _helpers.toConsumableArray(args).concat([
                        40
                    ]));
                } : name ? slide1 : function() {
                    action();
                    return Promise.resolve();
                };
                return animationFn(action, target, this.duration).then(function() {
                    return _this.$update(target, 'resize');
                }, noop);
            }
        }
    };
    var filter1 = {
        mixins: [
            Animate
        ],
        args: 'target',
        props: {
            target: Boolean,
            selActive: Boolean
        },
        data: {
            target: null,
            selActive: false,
            attrItem: 'uk-filter-control',
            cls: 'uk-active',
            duration: 250
        },
        computed: {
            toggles: {
                get: function(_ref, $el) {
                    var attrItem = _ref.attrItem;
                    return $$("[" + attrItem + "],[data-" + attrItem + "]", $el);
                },
                watch: function() {
                    this.updateState();
                    if (this.selActive !== false) {
                        var _this = this;
                        var actives = $$(this.selActive, this.$el);
                        this.toggles.forEach(function(el) {
                            return toggleClass(el, _this.cls, includes(actives, el));
                        });
                    }
                },
                immediate: true
            },
            children: {
                get: function(_ref2, $el) {
                    var target = _ref2.target;
                    return $$(target + " > *", $el);
                },
                watch: function(list, old) {
                    if (old && !isEqualList(list, old)) this.updateState();
                },
                immediate: true
            }
        },
        events: [
            {
                name: 'click',
                delegate: function() {
                    return "[" + this.attrItem + "],[data-" + this.attrItem + "]";
                },
                handler: function(e) {
                    e.preventDefault();
                    this.apply(e.current);
                }
            }
        ],
        methods: {
            apply: function(el) {
                var prevState = this.getState();
                var newState = mergeState(el, this.attrItem, this.getState());
                if (!isEqualState(prevState, newState)) this.setState(newState);
            },
            getState: function() {
                var _this = this;
                return this.toggles.filter(function(item) {
                    return hasClass(item, _this.cls);
                }).reduce(function(state, el) {
                    return mergeState(el, _this.attrItem, state);
                }, {
                    filter: {
                        '': ''
                    },
                    sort: []
                });
            },
            setState: function(state, animate) {
                var _this = this;
                if (animate === void 0) animate = true;
                state = _helpers.objectSpread({
                    filter: {
                        '': ''
                    },
                    sort: []
                }, state);
                trigger(this.$el, 'beforeFilter', [
                    this,
                    state
                ]);
                this.toggles.forEach(function(el) {
                    return toggleClass(el, _this.cls, !!matchFilter(el, _this.attrItem, state));
                });
                Promise.all($$(this.target, this.$el).map(function(target) {
                    var _this12 = _this;
                    var _$filterFn = function() {
                        applyState(state, target, children1(target));
                        _this12.$update(_this12.$el);
                    };
                    return animate ? _this.animate(_$filterFn, target) : _$filterFn();
                })).then(function() {
                    return trigger(_this.$el, 'afterFilter', [
                        _this
                    ]);
                });
            },
            updateState: function() {
                var _this = this;
                fastdom.write(function() {
                    return _this.setState(_this.getState(), false);
                });
            }
        }
    };
    function getFilter(el, attr) {
        return parseOptions(data1(el, attr), [
            'filter'
        ]);
    }
    function isEqualState(stateA, stateB) {
        return [
            'filter',
            'sort'
        ].every(function(prop) {
            return isEqual(stateA[prop], stateB[prop]);
        });
    }
    function applyState(state, target, children) {
        var selector = getSelector(state);
        children.forEach(function(el) {
            return css1(el, 'display', selector && !matches(el, selector) ? 'none' : '');
        });
        var _sort = _helpers.slicedToArray(state.sort, 2), sort = _sort[0], order = _sort[1];
        if (sort) {
            var sorted = sortItems(children, sort, order);
            if (!isEqual(sorted, children)) append(target, sorted);
        }
    }
    function mergeState(el, attr, state) {
        var filterBy = getFilter(el, attr);
        var filter = filterBy.filter, group = filterBy.group, sort = filterBy.sort, _order = filterBy.order, order = _order === void 0 ? 'asc' : _order;
        if (filter || isUndefined(sort)) {
            if (group) {
                if (filter) {
                    delete state.filter[''];
                    state.filter[group] = filter;
                } else {
                    delete state.filter[group];
                    if (isEmpty(state.filter) || '' in state.filter) state.filter = {
                        '': filter || ''
                    };
                }
            } else state.filter = {
                '': filter || ''
            };
        }
        if (!isUndefined(sort)) state.sort = [
            sort,
            order
        ];
        return state;
    }
    function matchFilter(el, attr, _ref3) {
        var tmp = _ref3.filter, stateFilter = tmp === void 0 ? {
            '': ''
        } : tmp, _sort = _helpers.slicedToArray(_ref3.sort, 2), stateSort = _sort[0], stateOrder = _sort[1];
        var ref = getFilter(el, attr), _filter = ref.filter, filter = _filter === void 0 ? '' : _filter, _group = ref.group, group = _group === void 0 ? '' : _group, sort = ref.sort, _order = ref.order, order = _order === void 0 ? 'asc' : _order;
        return isUndefined(sort) ? group in stateFilter && filter === stateFilter[group] || !filter && group && !(group in stateFilter) && !stateFilter[''] : stateSort === sort && stateOrder === order;
    }
    function isEqualList(listA, listB) {
        return listA.length === listB.length && listA.every(function(el) {
            return ~listB.indexOf(el);
        });
    }
    function getSelector(_ref4) {
        var filter = _ref4.filter;
        var selector = '';
        each(filter, function(value) {
            return selector += value || '';
        });
        return selector;
    }
    function sortItems(nodes, sort, order) {
        return _helpers.toConsumableArray(nodes).sort(function(a, b) {
            return data1(a, sort).localeCompare(data1(b, sort), undefined, {
                numeric: true
            }) * (order === 'asc' || -1);
        });
    }
    var Animations$2 = {
        slide: {
            show: function(dir) {
                return [
                    {
                        transform: translate1(dir * -100)
                    },
                    {
                        transform: translate1()
                    }
                ];
            },
            percent: function(current) {
                return translated(current);
            },
            translate: function(percent, dir) {
                return [
                    {
                        transform: translate1(dir * -100 * percent)
                    },
                    {
                        transform: translate1(dir * 100 * (1 - percent))
                    }
                ];
            }
        }
    };
    function translated(el) {
        return Math.abs(css1(el, 'transform').split(',')[4] / el.offsetWidth) || 0;
    }
    function translate1(value, unit) {
        if (value === void 0) value = 0;
        if (unit === void 0) unit = '%';
        value += value ? unit : '';
        return "translate3d(" + value + ", 0, 0)";
    }
    function scale3d(value) {
        return "scale3d(" + value + ", " + value + ", 1)";
    }
    var Animations$1 = _helpers.objectSpread({}, Animations$2, {
        fade: {
            show: function() {
                return [
                    {
                        opacity: 0
                    },
                    {
                        opacity: 1
                    }
                ];
            },
            percent: function(current) {
                return 1 - css1(current, 'opacity');
            },
            translate: function(percent) {
                return [
                    {
                        opacity: 1 - percent
                    },
                    {
                        opacity: percent
                    }
                ];
            }
        },
        scale: {
            show: function() {
                return [
                    {
                        opacity: 0,
                        transform: scale3d(0.8)
                    },
                    {
                        opacity: 1,
                        transform: scale3d(1)
                    }
                ];
            },
            percent: function(current) {
                return 1 - css1(current, 'opacity');
            },
            translate: function(percent) {
                return [
                    {
                        opacity: 1 - percent,
                        transform: scale3d(1 - 0.2 * percent)
                    },
                    {
                        opacity: percent,
                        transform: scale3d(0.8 + 0.2 * percent)
                    }
                ];
            }
        }
    });
    function Transitioner$1(prev, next, dir, _ref) {
        var animation = _ref.animation, easing = _ref.easing;
        var percent2 = animation.percent, translate = animation.translate, _show = animation.show, show = _show === void 0 ? noop : _show;
        var props2 = show(dir);
        var deferred = new Deferred();
        return {
            dir: dir,
            show: function(duration, percent, linear) {
                var _this = this;
                if (percent === void 0) percent = 0;
                var timing = linear ? 'linear' : easing;
                duration -= Math.round(duration * clamp(percent, -1, 1));
                this.translate(percent);
                triggerUpdate$1(next, 'itemin', {
                    percent: percent,
                    duration: duration,
                    timing: timing,
                    dir: dir
                });
                triggerUpdate$1(prev, 'itemout', {
                    percent: 1 - percent,
                    duration: duration,
                    timing: timing,
                    dir: dir
                });
                Promise.all([
                    Transition.start(next, props2[1], duration, timing),
                    Transition.start(prev, props2[0], duration, timing)
                ]).then(function() {
                    _this.reset();
                    deferred.resolve();
                }, noop);
                return deferred.promise;
            },
            cancel: function() {
                Transition.cancel([
                    next,
                    prev
                ]);
            },
            reset: function() {
                for(var prop in props2[0])css1([
                    next,
                    prev
                ], prop, '');
            },
            forward: function(duration, percent) {
                if (percent === void 0) percent = this.percent();
                Transition.cancel([
                    next,
                    prev
                ]);
                return this.show(duration, percent, true);
            },
            translate: function(percent) {
                this.reset();
                var props = translate(percent, dir);
                css1(next, props[1]);
                css1(prev, props[0]);
                triggerUpdate$1(next, 'itemtranslatein', {
                    percent: percent,
                    dir: dir
                });
                triggerUpdate$1(prev, 'itemtranslateout', {
                    percent: 1 - percent,
                    dir: dir
                });
            },
            percent: function() {
                return percent2(prev || next, next, dir);
            },
            getDistance: function() {
                return prev == null ? void 0 : prev.offsetWidth;
            }
        };
    }
    function triggerUpdate$1(el, type, data) {
        trigger(el, createEvent(type, false, false, data));
    }
    var SliderAutoplay = {
        props: {
            autoplay: Boolean,
            autoplayInterval: Number,
            pauseOnHover: Boolean
        },
        data: {
            autoplay: false,
            autoplayInterval: 7000,
            pauseOnHover: true
        },
        connected: function() {
            this.autoplay && this.startAutoplay();
        },
        disconnected: function() {
            this.stopAutoplay();
        },
        update: function() {
            attr1(this.slides, 'tabindex', '-1');
        },
        events: [
            {
                name: 'visibilitychange',
                el: function() {
                    return document;
                },
                filter: function() {
                    return this.autoplay;
                },
                handler: function() {
                    if (document.hidden) this.stopAutoplay();
                    else this.startAutoplay();
                }
            }
        ],
        methods: {
            startAutoplay: function() {
                var _this = this;
                this.stopAutoplay();
                this.interval = setInterval(function() {
                    return (!_this.draggable || !$(':focus', _this.$el)) && (!_this.pauseOnHover || !matches(_this.$el, ':hover')) && !_this.stack.length && _this.show('next');
                }, this.autoplayInterval);
            },
            stopAutoplay: function() {
                this.interval && clearInterval(this.interval);
            }
        }
    };
    var SliderDrag = {
        props: {
            draggable: Boolean
        },
        data: {
            draggable: true,
            threshold: 10
        },
        created: function() {
            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
            try {
                var _this = this, _loop = function(_iterator, _step) {
                    var key = _step.value;
                    var _this13 = _this;
                    var fn = _this[key];
                    _this[key] = function(e) {
                        var pos = getEventPos(e).x * (isRtl ? -1 : 1);
                        _this13.prevPos = pos === _this13.pos ? _this13.prevPos : _this13.pos;
                        _this13.pos = pos;
                        fn(e);
                    };
                };
                for(var _iterator = [
                    'start',
                    'move',
                    'end'
                ][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop(_iterator, _step);
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally{
                try {
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                    }
                } finally{
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        },
        events: [
            {
                name: pointerDown,
                delegate: function() {
                    return this.selSlides;
                },
                handler: function(e) {
                    if (!this.draggable || !isTouch(e) && hasTextNodesOnly(e.target) || closest(e.target, selInput) || e.button > 0 || this.length < 2) return;
                    this.start(e);
                }
            },
            {
                name: 'dragstart',
                handler: function(e) {
                    e.preventDefault();
                }
            }
        ],
        methods: {
            start: function() {
                this.drag = this.pos;
                if (this._transitioner) {
                    this.percent = this._transitioner.percent();
                    this.drag += this._transitioner.getDistance() * this.percent * this.dir;
                    this._transitioner.cancel();
                    this._transitioner.translate(this.percent);
                    this.dragging = true;
                    this.stack = [];
                } else this.prevIndex = this.index;
                on(document, pointerMove, this.move, {
                    passive: false
                });
                // 'input' event is triggered by video controls
                on(document, pointerUp + " " + pointerCancel + " input", this.end, true);
                css1(this.list, 'userSelect', 'none');
            },
            move: function(e) {
                var _this = this;
                var distance = this.pos - this.drag;
                if (distance === 0 || this.prevPos === this.pos || !this.dragging && Math.abs(distance) < this.threshold) return;
                // prevent click event
                css1(this.list, 'pointerEvents', 'none');
                e.cancelable && e.preventDefault();
                this.dragging = true;
                this.dir = distance < 0 ? 1 : -1;
                var slides = this.slides;
                var prevIndex = this.prevIndex;
                var dis = Math.abs(distance);
                var nextIndex = this.getIndex(prevIndex + this.dir, prevIndex);
                var width = this._getDistance(prevIndex, nextIndex) || slides[prevIndex].offsetWidth;
                while(nextIndex !== prevIndex && dis > width){
                    this.drag -= width * this.dir;
                    prevIndex = nextIndex;
                    dis -= width;
                    nextIndex = this.getIndex(prevIndex + this.dir, prevIndex);
                    width = this._getDistance(prevIndex, nextIndex) || slides[prevIndex].offsetWidth;
                }
                this.percent = dis / width;
                var prev = slides[prevIndex];
                var next = slides[nextIndex];
                var changed = this.index !== nextIndex;
                var edge = prevIndex === nextIndex;
                var itemShown;
                [
                    this.index,
                    this.prevIndex
                ].filter(function(i) {
                    return !includes([
                        nextIndex,
                        prevIndex
                    ], i);
                }).forEach(function(i) {
                    trigger(slides[i], 'itemhidden', [
                        _this
                    ]);
                    if (edge) {
                        itemShown = true;
                        _this.prevIndex = prevIndex;
                    }
                });
                if (this.index === prevIndex && this.prevIndex !== prevIndex || itemShown) trigger(slides[this.index], 'itemshown', [
                    this
                ]);
                if (changed) {
                    this.prevIndex = prevIndex;
                    this.index = nextIndex;
                    !edge && trigger(prev, 'beforeitemhide', [
                        this
                    ]);
                    trigger(next, 'beforeitemshow', [
                        this
                    ]);
                }
                this._transitioner = this._translate(Math.abs(this.percent), prev, !edge && next);
                if (changed) {
                    !edge && trigger(prev, 'itemhide', [
                        this
                    ]);
                    trigger(next, 'itemshow', [
                        this
                    ]);
                }
            },
            end: function() {
                off(document, pointerMove, this.move, {
                    passive: false
                });
                off(document, pointerUp + " " + pointerCancel + " input", this.end, true);
                if (this.dragging) {
                    this.dragging = null;
                    if (this.index === this.prevIndex) {
                        this.percent = 1 - this.percent;
                        this.dir *= -1;
                        this._show(false, this.index, true);
                        this._transitioner = null;
                    } else {
                        var dirChange = (isRtl ? this.dir * (isRtl ? 1 : -1) : this.dir) < 0 === this.prevPos > this.pos;
                        this.index = dirChange ? this.index : this.prevIndex;
                        if (dirChange) this.percent = 1 - this.percent;
                        this.show(this.dir > 0 && !dirChange || this.dir < 0 && dirChange ? 'next' : 'previous', true);
                    }
                }
                css1(this.list, {
                    userSelect: '',
                    pointerEvents: ''
                });
                this.drag = this.percent = null;
            }
        }
    };
    function hasTextNodesOnly(el) {
        return !el.children.length && el.childNodes.length;
    }
    var SliderNav = {
        data: {
            selNav: false
        },
        computed: {
            nav: function(_ref, $el) {
                var selNav = _ref.selNav;
                return $(selNav, $el);
            },
            selNavItem: function(_ref2) {
                var attrItem = _ref2.attrItem;
                return "[" + attrItem + "],[data-" + attrItem + "]";
            },
            navItems: function(_, $el) {
                return $$(this.selNavItem, $el);
            }
        },
        update: {
            write: function() {
                var _this = this;
                if (this.nav && this.length !== this.nav.children.length) html1(this.nav, this.slides.map(function(_, i) {
                    return "<li " + _this.attrItem + "=\"" + i + "\"><a href></a></li>";
                }).join(''));
                this.navItems.concat(this.nav).forEach(function(el) {
                    return el && (el.hidden = !_this.maxIndex);
                });
                this.updateNav();
            },
            events: [
                'resize'
            ]
        },
        events: [
            {
                name: 'click',
                delegate: function() {
                    return this.selNavItem;
                },
                handler: function(e) {
                    e.preventDefault();
                    this.show(data1(e.current, this.attrItem));
                }
            },
            {
                name: 'itemshow',
                handler: 'updateNav'
            }
        ],
        methods: {
            updateNav: function() {
                var i = this.getValidIndex();
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.navItems[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var el = _step.value;
                        var cmd = data1(el, this.attrItem);
                        toggleClass(el, this.clsActive, toNumber(cmd) === i);
                        toggleClass(el, 'uk-invisible', this.finite && (cmd === 'previous' && i === 0 || cmd === 'next' && i >= this.maxIndex));
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        }
    };
    var Slider = {
        mixins: [
            SliderAutoplay,
            SliderDrag,
            SliderNav,
            Resize
        ],
        props: {
            clsActivated: Boolean,
            easing: String,
            index: Number,
            finite: Boolean,
            velocity: Number,
            selSlides: String
        },
        data: function() {
            return {
                easing: 'ease',
                finite: false,
                velocity: 1,
                index: 0,
                prevIndex: -1,
                stack: [],
                percent: 0,
                clsActive: 'uk-active',
                clsActivated: false,
                Transitioner: false,
                transitionOptions: {}
            };
        },
        connected: function() {
            this.prevIndex = -1;
            this.index = this.getValidIndex(this.$props.index);
            this.stack = [];
        },
        disconnected: function() {
            removeClass(this.slides, this.clsActive);
        },
        computed: {
            duration: function(_ref, $el) {
                var velocity = _ref.velocity;
                return speedUp($el.offsetWidth / velocity);
            },
            list: function(_ref2, $el) {
                var selList = _ref2.selList;
                return $(selList, $el);
            },
            maxIndex: function() {
                return this.length - 1;
            },
            selSlides: function(_ref3) {
                var selList = _ref3.selList, selSlides = _ref3.selSlides;
                return selList + " " + (selSlides || '> *');
            },
            slides: {
                get: function() {
                    return $$(this.selSlides, this.$el);
                },
                watch: function() {
                    this.$reset();
                }
            },
            length: function() {
                return this.slides.length;
            }
        },
        methods: {
            show: function(index, force) {
                var _this15 = this;
                if (force === void 0) force = false;
                if (this.dragging || !this.length) return;
                var stack = this.stack;
                var queueIndex = force ? 0 : stack.length;
                var reset = function() {
                    stack.splice(queueIndex, 1);
                    if (stack.length) _this15.show(stack.shift(), true);
                };
                stack[force ? 'unshift' : 'push'](index);
                if (!force && stack.length > 1) {
                    if (stack.length === 2) this._transitioner.forward(Math.min(this.duration, 200));
                    return;
                }
                var prevIndex = this.getIndex(this.index);
                var prev = hasClass(this.slides, this.clsActive) && this.slides[prevIndex];
                var nextIndex = this.getIndex(index, this.index);
                var next = this.slides[nextIndex];
                if (prev === next) {
                    reset();
                    return;
                }
                this.dir = getDirection(index, prevIndex);
                this.prevIndex = prevIndex;
                this.index = nextIndex;
                if (prev && !trigger(prev, 'beforeitemhide', [
                    this
                ]) || !trigger(next, 'beforeitemshow', [
                    this,
                    prev
                ])) {
                    this.index = this.prevIndex;
                    reset();
                    return;
                }
                var promise = this._show(prev, next, force).then(function() {
                    var _this14 = _this15;
                    prev && trigger(prev, 'itemhidden', [
                        _this15
                    ]);
                    trigger(next, 'itemshown', [
                        _this15
                    ]);
                    return new Promise(function(resolve) {
                        var _this = _this14;
                        fastdom.write(function() {
                            stack.shift();
                            if (stack.length) _this.show(stack.shift(), true);
                            else _this._transitioner = null;
                            resolve();
                        });
                    });
                });
                prev && trigger(prev, 'itemhide', [
                    this
                ]);
                trigger(next, 'itemshow', [
                    this
                ]);
                return promise;
            },
            getIndex: function(index, prev) {
                if (index === void 0) index = this.index;
                if (prev === void 0) prev = this.index;
                return clamp(getIndex(index, this.slides, prev, this.finite), 0, this.maxIndex);
            },
            getValidIndex: function(index, prevIndex) {
                if (index === void 0) index = this.index;
                if (prevIndex === void 0) prevIndex = this.prevIndex;
                return this.getIndex(index, prevIndex);
            },
            _show: function(prev, next, force) {
                this._transitioner = this._getTransitioner(prev, next, this.dir, _helpers.objectSpread({
                    easing: force ? next.offsetWidth < 600 ? 'cubic-bezier(0.25, 0.46, 0.45, 0.94)' /* easeOutQuad */  : 'cubic-bezier(0.165, 0.84, 0.44, 1)' /* easeOutQuart */  : this.easing
                }, this.transitionOptions));
                if (!force && !prev) {
                    this._translate(1);
                    return Promise.resolve();
                }
                var length = this.stack.length;
                return this._transitioner[length > 1 ? 'forward' : 'show'](length > 1 ? Math.min(this.duration, 75 + 75 / (length - 1)) : this.duration, this.percent);
            },
            _getDistance: function(prev, next) {
                return this._getTransitioner(prev, prev !== next && next).getDistance();
            },
            _translate: function(percent, prev, next) {
                if (prev === void 0) prev = this.prevIndex;
                if (next === void 0) next = this.index;
                var transitioner = this._getTransitioner(prev !== next ? prev : false, next);
                transitioner.translate(percent);
                return transitioner;
            },
            _getTransitioner: function(prev, next, dir, options) {
                if (prev === void 0) prev = this.prevIndex;
                if (next === void 0) next = this.index;
                if (dir === void 0) dir = this.dir || 1;
                if (options === void 0) options = this.transitionOptions;
                return new this.Transitioner(isNumber(prev) ? this.slides[prev] : prev, isNumber(next) ? this.slides[next] : next, dir * (isRtl ? -1 : 1), options);
            }
        }
    };
    function getDirection(index, prevIndex) {
        return index === 'next' ? 1 : index === 'previous' ? -1 : index < prevIndex ? -1 : 1;
    }
    function speedUp(x) {
        return 0.5 * x + 300; // parabola through (400,500; 600,600; 1800,1200)
    }
    var Slideshow = {
        mixins: [
            Slider
        ],
        props: {
            animation: String
        },
        data: {
            animation: 'slide',
            clsActivated: 'uk-transition-active',
            Animations: Animations$2,
            Transitioner: Transitioner$1
        },
        computed: {
            animation: function(_ref) {
                var animation = _ref.animation, Animations = _ref.Animations;
                return _helpers.objectSpread({}, Animations[animation] || Animations.slide, {
                    name: animation
                });
            },
            transitionOptions: function() {
                return {
                    animation: this.animation
                };
            }
        },
        events: {
            beforeitemshow: function(_ref2) {
                var target = _ref2.target;
                addClass(target, this.clsActive);
            },
            itemshown: function(_ref3) {
                var target = _ref3.target;
                addClass(target, this.clsActivated);
            },
            itemhidden: function(_ref4) {
                var target = _ref4.target;
                removeClass(target, this.clsActive, this.clsActivated);
            }
        }
    };
    var LightboxPanel = {
        mixins: [
            Container,
            Modal,
            Togglable,
            Slideshow
        ],
        functional: true,
        props: {
            delayControls: Number,
            preload: Number,
            videoAutoplay: Boolean,
            template: String
        },
        data: function() {
            return {
                preload: 1,
                videoAutoplay: false,
                delayControls: 3000,
                items: [],
                cls: 'uk-open',
                clsPage: 'uk-lightbox-page',
                selList: '.uk-lightbox-items',
                attrItem: 'uk-lightbox-item',
                selClose: '.uk-close-large',
                selCaption: '.uk-lightbox-caption',
                pauseOnHover: false,
                velocity: 2,
                Animations: Animations$1,
                template: "<div class=\"uk-lightbox uk-overflow-hidden\"> <ul class=\"uk-lightbox-items\"></ul> <div class=\"uk-lightbox-toolbar uk-position-top uk-text-right uk-transition-slide-top uk-transition-opaque\"> <button class=\"uk-lightbox-toolbar-icon uk-close-large\" type=\"button\" uk-close></button> </div> <a class=\"uk-lightbox-button uk-position-center-left uk-position-medium uk-transition-fade\" href uk-slidenav-previous uk-lightbox-item=\"previous\"></a> <a class=\"uk-lightbox-button uk-position-center-right uk-position-medium uk-transition-fade\" href uk-slidenav-next uk-lightbox-item=\"next\"></a> <div class=\"uk-lightbox-toolbar uk-lightbox-caption uk-position-bottom uk-text-center uk-transition-slide-bottom uk-transition-opaque\"></div> </div>"
            };
        },
        created: function() {
            var $el = $(this.template);
            var list = $(this.selList, $el);
            this.items.forEach(function() {
                return append(list, '<li>');
            });
            this.$mount(append(this.container, $el));
        },
        computed: {
            caption: function(_ref, $el) {
                var selCaption = _ref.selCaption;
                return $(selCaption, $el);
            }
        },
        events: [
            {
                name: pointerMove + " " + pointerDown + " keydown",
                handler: 'showControls'
            },
            {
                name: 'click',
                self: true,
                delegate: function() {
                    return this.selSlides;
                },
                handler: function(e) {
                    if (e.defaultPrevented) return;
                    this.hide();
                }
            },
            {
                name: 'shown',
                self: true,
                handler: function() {
                    this.showControls();
                }
            },
            {
                name: 'hide',
                self: true,
                handler: function() {
                    this.hideControls();
                    removeClass(this.slides, this.clsActive);
                    Transition.stop(this.slides);
                }
            },
            {
                name: 'hidden',
                self: true,
                handler: function() {
                    this.$destroy(true);
                }
            },
            {
                name: 'keyup',
                el: function() {
                    return document;
                },
                handler: function(e) {
                    if (!this.isToggled(this.$el) || !this.draggable) return;
                    switch(e.keyCode){
                        case 37:
                            this.show('previous');
                            break;
                        case 39:
                            this.show('next');
                            break;
                    }
                }
            },
            {
                name: 'beforeitemshow',
                handler: function(e) {
                    if (this.isToggled()) return;
                    this.draggable = false;
                    e.preventDefault();
                    this.toggleElement(this.$el, true, false);
                    this.animation = Animations$1['scale'];
                    removeClass(e.target, this.clsActive);
                    this.stack.splice(1, 0, this.index);
                }
            },
            {
                name: 'itemshow',
                handler: function() {
                    html1(this.caption, this.getItem().caption || '');
                    for(var j = -this.preload; j <= this.preload; j++)this.loadItem(this.index + j);
                }
            },
            {
                name: 'itemshown',
                handler: function() {
                    this.draggable = this.$props.draggable;
                }
            },
            {
                name: 'itemload',
                handler: function(_, item) {
                    return _helpers.asyncToGenerator(_regeneratorRuntimeDefault.default.mark(function _callee() {
                        var src, type, _alt, alt, poster, _attrs, attrs, _$matches, iframeAttrs, ref, width, height, _this, video, ref11, height2, width2;
                        return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                            while(1)switch(_ctx.prev = _ctx.next){
                                case 0:
                                    src = item.source, type = item.type, _alt = item.alt, alt = _alt === void 0 ? '' : _alt, poster = item.poster, _attrs = item.attrs, attrs = _attrs === void 0 ? {} : _attrs;
                                    this.setItem(item, '<span uk-spinner></span>');
                                    if (src) {
                                        _ctx.next = 4;
                                        break;
                                    }
                                    return _ctx.abrupt("return");
                                case 4:
                                    ;
                                    iframeAttrs = {
                                        frameborder: '0',
                                        allow: 'autoplay',
                                        allowfullscreen: '',
                                        style: 'max-width: 100%; box-sizing: border-box;',
                                        'uk-responsive': '',
                                        'uk-video': "" + this.videoAutoplay
                                    };
                                    if (!(type === 'image' || src.match(/\.(avif|jpe?g|jfif|a?png|gif|svg|webp)($|\?)/i))) {
                                        _ctx.next = 21;
                                        break;
                                    }
                                    _ctx.prev = 7;
                                    _ctx.next = 10;
                                    return getImage(src, attrs.srcset, attrs.size);
                                case 10:
                                    ref = _ctx.sent;
                                    width = ref.width;
                                    height = ref.height;
                                    this.setItem(item, createEl('img', _helpers.objectSpread({
                                        src: src,
                                        width: width,
                                        height: height,
                                        alt: alt
                                    }, attrs)));
                                    _ctx.next = 19;
                                    break;
                                case 16:
                                    _ctx.prev = 16;
                                    _ctx.t0 = _ctx["catch"](7);
                                    this.setError(item);
                                case 19:
                                    _ctx.next = 48;
                                    break;
                                case 21:
                                    if (!(type === 'video' || src.match(/\.(mp4|webm|ogv)($|\?)/i))) {
                                        _ctx.next = 25;
                                        break;
                                    }
                                    {
                                        _this = this;
                                        video = createEl('video', _helpers.objectSpread({
                                            src: src,
                                            poster: poster,
                                            controls: '',
                                            playsinline: '',
                                            'uk-video': "" + this.videoAutoplay
                                        }, attrs));
                                        on(video, 'loadedmetadata', function() {
                                            attr1(video, {
                                                width: video.videoWidth,
                                                height: video.videoHeight
                                            });
                                            _this.setItem(item, video);
                                        });
                                        on(video, 'error', function() {
                                            return _this.setError(item);
                                        });
                                    // Iframe
                                    }
                                    _ctx.next = 48;
                                    break;
                                case 25:
                                    if (!(type === 'iframe' || src.match(/\.(html|php)($|\?)/i))) {
                                        _ctx.next = 29;
                                        break;
                                    }
                                    this.setItem(item, createEl('iframe', _helpers.objectSpread({
                                        src: src,
                                        frameborder: '0',
                                        allowfullscreen: '',
                                        class: 'uk-lightbox-iframe'
                                    }, attrs)));
                                    _ctx.next = 48;
                                    break;
                                case 29:
                                    if (!(_$matches = src.match(/\/\/(?:.*?youtube(-nocookie)?\..*?[?&]v=|youtu\.be\/)([\w-]{11})[&?]?(.*)?/))) {
                                        _ctx.next = 33;
                                        break;
                                    }
                                    this.setItem(item, createEl('iframe', _helpers.objectSpread({
                                        src: "https://www.youtube" + (_$matches[1] || '') + ".com/embed/" + _$matches[2] + (_$matches[3] ? "?" + _$matches[3] : ''),
                                        width: 1920,
                                        height: 1080
                                    }, iframeAttrs, attrs)));
                                    _ctx.next = 48;
                                    break;
                                case 33:
                                    if (!(_$matches = src.match(/\/\/.*?vimeo\.[a-z]+\/(\d+)[&?]?(.*)?/))) {
                                        _ctx.next = 48;
                                        break;
                                    }
                                    _ctx.prev = 34;
                                    _ctx.next = 37;
                                    return fetch("https://vimeo.com/api/oembed.json?maxwidth=1920&url=" + encodeURI(src), {
                                        credentials: 'omit'
                                    });
                                case 37:
                                    _ctx.next = 39;
                                    return _ctx.sent.json();
                                case 39:
                                    ref11 = _ctx.sent;
                                    height2 = ref11.height;
                                    width2 = ref11.width;
                                    this.setItem(item, createEl('iframe', _helpers.objectSpread({
                                        src: "https://player.vimeo.com/video/" + _$matches[1] + (_$matches[2] ? "?" + _$matches[2] : ''),
                                        width: width2,
                                        height: height2
                                    }, iframeAttrs, attrs)));
                                    _ctx.next = 48;
                                    break;
                                case 45:
                                    _ctx.prev = 45;
                                    _ctx.t1 = _ctx["catch"](34);
                                    this.setError(item);
                                case 48:
                                case "end":
                                    return _ctx.stop();
                            }
                        }, _callee, this, [
                            [
                                7,
                                16
                            ],
                            [
                                34,
                                45
                            ]
                        ]);
                    })).apply(this);
                }
            }
        ],
        methods: {
            loadItem: function(index) {
                if (index === void 0) index = this.index;
                var item = this.getItem(index);
                if (!this.getSlide(item).childElementCount) trigger(this.$el, 'itemload', [
                    item
                ]);
            },
            getItem: function(index) {
                if (index === void 0) index = this.index;
                return this.items[getIndex(index, this.slides)];
            },
            setItem: function(item, content) {
                trigger(this.$el, 'itemloaded', [
                    this,
                    html1(this.getSlide(item), content)
                ]);
            },
            getSlide: function(item) {
                return this.slides[this.items.indexOf(item)];
            },
            setError: function(item) {
                this.setItem(item, '<span uk-icon="icon: bolt; ratio: 2"></span>');
            },
            showControls: function() {
                clearTimeout(this.controlsTimer);
                this.controlsTimer = setTimeout(this.hideControls, this.delayControls);
                addClass(this.$el, 'uk-active', 'uk-transition-active');
            },
            hideControls: function() {
                removeClass(this.$el, 'uk-active', 'uk-transition-active');
            }
        }
    };
    function createEl(tag, attrs) {
        var el = fragment("<" + tag + ">");
        attr1(el, attrs);
        return el;
    }
    var lightbox = {
        install: install$1,
        props: {
            toggle: String
        },
        data: {
            toggle: 'a'
        },
        computed: {
            toggles: {
                get: function(_ref, $el) {
                    var toggle = _ref.toggle;
                    return $$(toggle, $el);
                },
                watch: function() {
                    this.hide();
                }
            }
        },
        disconnected: function() {
            this.hide();
        },
        events: [
            {
                name: 'click',
                delegate: function() {
                    return this.toggle + ":not(.uk-disabled)";
                },
                handler: function(e) {
                    e.preventDefault();
                    this.show(e.current);
                }
            }
        ],
        methods: {
            show: function(index) {
                var _this = this;
                var items = uniqueBy(this.toggles.map(toItem), 'source');
                if (isElement(index)) {
                    var source = toItem(index).source;
                    index = findIndex(items, function(_ref2) {
                        var src = _ref2.source;
                        return source === src;
                    });
                }
                this.panel = this.panel || this.$create('lightboxPanel', _helpers.objectSpread({}, this.$props, {
                    items: items
                }));
                on(this.panel.$el, 'hidden', function() {
                    return _this.panel = false;
                });
                return this.panel.show(index);
            },
            hide: function() {
                var _this$panel;
                return (_this$panel = this.panel) == null ? void 0 : _this$panel.hide();
            }
        }
    };
    function install$1(UIkit, Lightbox) {
        if (!UIkit.lightboxPanel) UIkit.component('lightboxPanel', LightboxPanel);
        assign(Lightbox.props, UIkit.component('lightboxPanel').options.props);
    }
    function toItem(el) {
        var item = {};
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = [
                'href',
                'caption',
                'type',
                'poster',
                'alt',
                'attrs'
            ][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var _$attr = _step.value;
                item[_$attr === 'href' ? 'source' : _$attr] = data1(el, _$attr);
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
        item.attrs = parseOptions(item.attrs);
        return item;
    }
    var _obj4;
    var notification1 = {
        mixins: [
            Container
        ],
        functional: true,
        args: [
            'message',
            'status'
        ],
        data: {
            message: '',
            status: '',
            timeout: 5000,
            group: null,
            pos: 'top-center',
            clsContainer: 'uk-notification',
            clsClose: 'uk-notification-close',
            clsMsg: 'uk-notification-message'
        },
        install: install,
        computed: {
            marginProp: function(_ref) {
                var pos = _ref.pos;
                return "margin" + (startsWith(pos, 'top') ? 'Top' : 'Bottom');
            },
            startProps: function() {
                return _helpers.defineProperty({
                    opacity: 0
                }, this.marginProp, -this.$el.offsetHeight);
            }
        },
        created: function() {
            var container = $("." + this.clsContainer + "-" + this.pos, this.container) || append(this.container, "<div class=\"" + this.clsContainer + " " + this.clsContainer + "-" + this.pos + "\" style=\"display: block\"></div>");
            this.$mount(append(container, "<div class=\"" + this.clsMsg + (this.status ? " " + this.clsMsg + "-" + this.status : '') + "\"> <a href class=\"" + this.clsClose + "\" data-uk-close></a> <div>" + this.message + "</div> </div>"));
        },
        connected: function() {
            return _helpers.asyncToGenerator(_regeneratorRuntimeDefault.default.mark(function _callee() {
                var margin;
                return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                    while(1)switch(_ctx.prev = _ctx.next){
                        case 0:
                            margin = toFloat(css1(this.$el, this.marginProp));
                            _ctx.next = 3;
                            return Transition.start(css1(this.$el, this.startProps), _helpers.defineProperty({
                                opacity: 1
                            }, this.marginProp, margin));
                        case 3:
                            if (this.timeout) this.timer = setTimeout(this.close, this.timeout);
                        case 4:
                        case "end":
                            return _ctx.stop();
                    }
                }, _callee, this);
            })).apply(this);
        },
        events: (_obj4 = {
            click: function(e) {
                if (closest(e.target, 'a[href="#"],a[href=""]')) e.preventDefault();
                this.close();
            }
        }, _helpers.defineProperty(_obj4, pointerEnter, function() {
            if (this.timer) clearTimeout(this.timer);
        }), _helpers.defineProperty(_obj4, pointerLeave, function() {
            if (this.timeout) this.timer = setTimeout(this.close, this.timeout);
        }), _obj4),
        methods: {
            close: function(immediate) {
                return _helpers.asyncToGenerator(_regeneratorRuntimeDefault.default.mark(function _callee() {
                    var _this, removeFn;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                _this = this;
                                removeFn = function(el) {
                                    var container = parent1(el);
                                    trigger(el, 'close', [
                                        _this
                                    ]);
                                    remove$1(el);
                                    if (!(container != null && container.hasChildNodes())) remove$1(container);
                                };
                                if (this.timer) clearTimeout(this.timer);
                                if (immediate) {
                                    _ctx.next = 6;
                                    break;
                                }
                                _ctx.next = 6;
                                return Transition.start(this.$el, this.startProps);
                            case 6:
                                removeFn(this.$el);
                            case 7:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this);
                })).apply(this);
            }
        }
    };
    function install(UIkit) {
        UIkit.notification.closeAll = function(group, immediate) {
            apply(document.body, function(el) {
                var notification = UIkit.getComponent(el, 'notification');
                if (notification && (!group || group === notification.group)) notification.close(immediate);
            });
        };
    }
    var props1 = {
        x: transformFn,
        y: transformFn,
        rotate: transformFn,
        scale: transformFn,
        color: colorFn,
        backgroundColor: colorFn,
        borderColor: colorFn,
        blur: filterFn,
        hue: filterFn,
        fopacity: filterFn,
        grayscale: filterFn,
        invert: filterFn,
        saturate: filterFn,
        sepia: filterFn,
        opacity: cssPropFn,
        stroke: strokeFn,
        bgx: backgroundFn,
        bgy: backgroundFn
    };
    var keys1 = Object.keys;
    var Parallax = {
        mixins: [
            Media
        ],
        props: fillObject(keys1(props1), 'list'),
        data: fillObject(keys1(props1), undefined),
        computed: {
            props: function(properties, $el) {
                return keys1(props1).reduce(function(result, prop) {
                    if (!isUndefined(properties[prop])) result[prop] = props1[prop](prop, $el, properties[prop].slice());
                    return result;
                }, {});
            }
        },
        events: {
            load: function() {
                this.$emit();
            }
        },
        methods: {
            reset: function() {
                for(var prop in this.getCss(0))css1(this.$el, prop, '');
            },
            getCss: function(percent) {
                var _$css = {
                    transform: '',
                    filter: ''
                };
                for(var prop in this.props)this.props[prop](_$css, percent);
                return _$css;
            }
        }
    };
    function transformFn(prop, el, stops) {
        var unit = getUnit(stops) || ({
            x: 'px',
            y: 'px',
            rotate: 'deg'
        })[prop] || '';
        var _$transformFn;
        if (prop === 'x' || prop === 'y') {
            prop = "translate" + ucfirst(prop);
            _$transformFn = function(stop) {
                return toFloat(toFloat(stop).toFixed(unit === 'px' ? 0 : 6));
            };
        } else if (prop === 'scale') {
            unit = '';
            _$transformFn = function(stop) {
                return getUnit([
                    stop
                ]) ? toPx(stop, 'width', el, true) / el.offsetWidth : stop;
            };
        }
        if (stops.length === 1) stops.unshift(prop === 'scale' ? 1 : 0);
        stops = parseStops(stops, _$transformFn);
        return function(css, percent) {
            css.transform += " " + prop + "(" + getValue(stops, percent) + unit + ")";
        };
    }
    function colorFn(prop, el, stops) {
        if (stops.length === 1) stops.unshift(getCssValue(el, prop, ''));
        stops = parseStops(stops, function(stop) {
            return parseColor(el, stop);
        });
        return function(css, percent) {
            var ref = _helpers.slicedToArray(getStop(stops, percent), 3), start = ref[0], end = ref[1], p = ref[2];
            var value4 = start.map(function(value, i) {
                value += p * (end[i] - value);
                return i === 3 ? toFloat(value) : parseInt(value, 10);
            }).join(',');
            css[prop] = "rgba(" + value4 + ")";
        };
    }
    function parseColor(el, color) {
        return getCssValue(el, 'color', color).split(/[(),]/g).slice(1, -1).concat(1).slice(0, 4).map(toFloat);
    }
    function filterFn(prop, el, stops) {
        if (stops.length === 1) stops.unshift(0);
        var unit = getUnit(stops) || ({
            blur: 'px',
            hue: 'deg'
        })[prop] || '%';
        prop = ({
            fopacity: 'opacity',
            hue: 'hue-rotate'
        })[prop] || prop;
        stops = parseStops(stops);
        return function(css, percent) {
            var value = getValue(stops, percent);
            css.filter += " " + prop + "(" + (value + unit) + ")";
        };
    }
    function cssPropFn(prop, el, stops) {
        if (stops.length === 1) stops.unshift(getCssValue(el, prop, ''));
        stops = parseStops(stops);
        return function(css, percent) {
            css[prop] = getValue(stops, percent);
        };
    }
    function strokeFn(prop, el, stops) {
        if (stops.length === 1) stops.unshift(0);
        var unit = getUnit(stops);
        var length = getMaxPathLength(el);
        stops = parseStops(stops.reverse(), function(stop) {
            stop = toFloat(stop);
            return unit === '%' ? stop * length / 100 : stop;
        });
        if (!stops.some(function(_ref) {
            var __ref = _helpers.slicedToArray(_ref, 1), value = __ref[0];
            return value;
        })) return noop;
        css1(el, 'strokeDasharray', length);
        return function(css, percent) {
            css.strokeDashoffset = getValue(stops, percent);
        };
    }
    function backgroundFn(prop, el, stops) {
        if (stops.length === 1) stops.unshift(0);
        prop = prop.substr(-1);
        var _$attr = prop === 'y' ? 'height' : 'width';
        stops = parseStops(stops, function(stop) {
            return toPx(stop, _$attr, el);
        });
        var bgPos = getCssValue(el, "background-position-" + prop, '');
        return getCssValue(el, 'backgroundSize', '') === 'cover' ? backgroundCoverFn(prop, el, stops, bgPos, _$attr) : setBackgroundPosFn(prop, stops, bgPos);
    }
    function backgroundCoverFn(prop, el, stops, bgPos, attr) {
        var _Math, _Math2;
        var dimImage = getBackgroundImageDimensions(el);
        if (!dimImage.width) return noop;
        var values = stops.map(function(_ref2) {
            var __ref2 = _helpers.slicedToArray(_ref2, 1), value = __ref2[0];
            return value;
        });
        var min = (_Math = Math).min.apply(_Math, _helpers.toConsumableArray(values));
        var max = (_Math2 = Math).max.apply(_Math2, _helpers.toConsumableArray(values));
        var down = values.indexOf(min) < values.indexOf(max);
        var diff = max - min;
        var pos = (down ? -diff : 0) - (down ? min : max);
        var dimEl = {
            width: el.offsetWidth,
            height: el.offsetHeight
        };
        var baseDim = Dimensions.cover(dimImage, dimEl);
        var span = baseDim[attr] - dimEl[attr];
        if (span < diff) dimEl[attr] = baseDim[attr] + diff - span;
        else if (span > diff) {
            var posPercentage = dimEl[attr] / toPx(bgPos, attr, el, true);
            if (posPercentage) pos -= (span - diff) / posPercentage;
        }
        var dim = Dimensions.cover(dimImage, dimEl);
        var fn = setBackgroundPosFn(prop, stops, pos + "px");
        return function(css, percent) {
            fn(css, percent);
            css.backgroundSize = dim.width + "px " + dim.height + "px";
            css.backgroundRepeat = 'no-repeat';
        };
    }
    function setBackgroundPosFn(prop, stops, pos) {
        return function(css, percent) {
            css["background-position-" + prop] = "calc(" + pos + " + " + getValue(stops, percent) + "px)";
        };
    }
    var dimensions1 = {};
    function getBackgroundImageDimensions(el) {
        var src = css1(el, 'backgroundImage').replace(/^none|url\(["']?(.+?)["']?\)$/, '$1');
        if (dimensions1[src]) return dimensions1[src];
        var image = new Image();
        if (src) {
            image.src = src;
            if (!image.naturalWidth) {
                image.onload = function() {
                    dimensions1[src] = toDimensions(image);
                    trigger(el, createEvent('load', false));
                };
                return toDimensions(image);
            }
        }
        return dimensions1[src] = toDimensions(image);
    }
    function toDimensions(image) {
        return {
            width: image.naturalWidth,
            height: image.naturalHeight
        };
    }
    function parseStops(stops, fn) {
        if (fn === void 0) fn = toFloat;
        var result = [];
        var length = stops.length;
        var nullIndex = 0;
        for(var i = 0; i < length; i++){
            var ref = _helpers.slicedToArray(isString(stops[i]) ? stops[i].trim().split(' ') : [
                stops[i]
            ], 2), value = ref[0], percent = ref[1];
            value = fn(value);
            percent = percent ? toFloat(percent) / 100 : null;
            if (i === 0) {
                if (percent === null) percent = 0;
                else if (percent) result.push([
                    value,
                    0
                ]);
            } else if (i === length - 1) {
                if (percent === null) percent = 1;
                else if (percent !== 1) {
                    result.push([
                        value,
                        percent
                    ]);
                    percent = 1;
                }
            }
            result.push([
                value,
                percent
            ]);
            if (percent === null) nullIndex++;
            else if (nullIndex) {
                var leftPercent = result[i - nullIndex - 1][1];
                var p = (percent - leftPercent) / (nullIndex + 1);
                for(var j = nullIndex; j > 0; j--)result[i - j][1] = leftPercent + p * (nullIndex - j + 1);
                nullIndex = 0;
            }
        }
        return result;
    }
    function getStop(stops, percent) {
        var _$index = findIndex(stops.slice(1), function(_ref3) {
            var __ref3 = _helpers.slicedToArray(_ref3, 2), targetPercent = __ref3[1];
            return percent <= targetPercent;
        }) + 1;
        return [
            stops[_$index - 1][0],
            stops[_$index][0],
            (percent - stops[_$index - 1][1]) / (stops[_$index][1] - stops[_$index - 1][1])
        ];
    }
    function getValue(stops, percent) {
        var ref = _helpers.slicedToArray(getStop(stops, percent), 3), start = ref[0], end = ref[1], p = ref[2];
        return isNumber(start) ? start + Math.abs(start - end) * p * (start < end ? 1 : -1) : +end;
    }
    var unitRe = /^-?\d+([^\s]*)/;
    function getUnit(stops, defaultUnit) {
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = stops[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var stop = _step.value;
                var match = stop.match == null ? void 0 : stop.match(unitRe);
                if (match) return match[1];
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
        return defaultUnit;
    }
    function getCssValue(el, prop, value) {
        var prev = el.style[prop];
        var val = css1(css1(el, prop, value), prop);
        el.style[prop] = prev;
        return val;
    }
    function fillObject(keys, value) {
        return keys.reduce(function(data, prop) {
            data[prop] = value;
            return data;
        }, {});
    }
    var parallax = {
        mixins: [
            Parallax,
            Resize,
            Scroll
        ],
        props: {
            target: String,
            viewport: Number,
            easing: Number,
            start: String,
            end: String
        },
        data: {
            target: false,
            viewport: 1,
            easing: 1,
            start: 0,
            end: 0
        },
        computed: {
            target: function(_ref, $el) {
                var target = _ref.target;
                return getOffsetElement(target && query(target, $el) || $el);
            },
            start: function(_ref2) {
                var start = _ref2.start;
                return toPx(start, 'height', this.target, true);
            },
            end: function(_ref3) {
                var end = _ref3.end, viewport = _ref3.viewport;
                return toPx(end || (viewport = (1 - viewport) * 100) && viewport + "vh+" + viewport + "%", 'height', this.target, true);
            }
        },
        update: {
            read: function(_ref4, types) {
                var percent = _ref4.percent;
                if (!types.has('scroll')) percent = false;
                if (!this.matchMedia) return;
                var prev = percent;
                percent = ease1(scrolledOver(this.target, this.start, this.end), this.easing);
                return {
                    percent: percent,
                    style: prev === percent ? false : this.getCss(percent)
                };
            },
            write: function(_ref5) {
                var style = _ref5.style;
                if (!this.matchMedia) {
                    this.reset();
                    return;
                }
                style && css1(this.$el, style);
            },
            events: [
                'scroll',
                'resize'
            ]
        }
    };
    function ease1(percent, easing) {
        return easing >= 0 ? Math.pow(percent, easing + 1) : 1 - Math.pow(1 - percent, -easing + 1);
    }
    // SVG elements do not inherit from HTMLElement
    function getOffsetElement(el) {
        return el ? 'offsetTop' in el ? el : getOffsetElement(parent1(el)) : document.documentElement;
    }
    var SliderReactive = {
        update: {
            write: function() {
                if (this.stack.length || this.dragging) return;
                var _$index = this.getValidIndex(this.index);
                if (!~this.prevIndex || this.index !== _$index) this.show(_$index);
            },
            events: [
                'resize'
            ]
        }
    };
    var SliderPreload = {
        mixins: [
            Lazyload
        ],
        connected: function() {
            this.lazyload(this.slides, this.getAdjacentSlides);
        }
    };
    function Transitioner(prev, next, dir, _ref) {
        var center = _ref.center, easing = _ref.easing, list = _ref.list;
        var deferred = new Deferred();
        var from = prev ? getLeft(prev, list, center) : getLeft(next, list, center) + dimensions$1(next).width * dir;
        var to = next ? getLeft(next, list, center) : from + dimensions$1(prev).width * dir * (isRtl ? -1 : 1);
        return {
            dir: dir,
            show: function(duration, percent, linear) {
                if (percent === void 0) percent = 0;
                var timing = linear ? 'linear' : easing;
                duration -= Math.round(duration * clamp(percent, -1, 1));
                this.translate(percent);
                percent = prev ? percent : clamp(percent, 0, 1);
                triggerUpdate(this.getItemIn(), 'itemin', {
                    percent: percent,
                    duration: duration,
                    timing: timing,
                    dir: dir
                });
                prev && triggerUpdate(this.getItemIn(true), 'itemout', {
                    percent: 1 - percent,
                    duration: duration,
                    timing: timing,
                    dir: dir
                });
                Transition.start(list, {
                    transform: translate1(-to * (isRtl ? -1 : 1), 'px')
                }, duration, timing).then(deferred.resolve, noop);
                return deferred.promise;
            },
            cancel: function() {
                Transition.cancel(list);
            },
            reset: function() {
                css1(list, 'transform', '');
            },
            forward: function(duration, percent) {
                if (percent === void 0) percent = this.percent();
                Transition.cancel(list);
                return this.show(duration, percent, true);
            },
            translate: function(percent) {
                var distance = this.getDistance() * dir * (isRtl ? -1 : 1);
                css1(list, 'transform', translate1(clamp(-to + (distance - distance * percent), -getWidth(list), dimensions$1(list).width) * (isRtl ? -1 : 1), 'px'));
                var actives = this.getActives();
                var itemIn = this.getItemIn();
                var itemOut = this.getItemIn(true);
                percent = prev ? clamp(percent, -1, 1) : 0;
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = children1(list)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var slide = _step.value;
                        var isActive = includes(actives, slide);
                        var isIn = slide === itemIn;
                        var isOut = slide === itemOut;
                        var translateIn = isIn || !isOut && (isActive || dir * (isRtl ? -1 : 1) === -1 ^ getElLeft(slide, list) > getElLeft(prev || next));
                        triggerUpdate(slide, "itemtranslate" + (translateIn ? 'in' : 'out'), {
                            dir: dir,
                            percent: isOut ? 1 - percent : isIn ? percent : isActive ? 1 : 0
                        });
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            },
            percent: function() {
                return Math.abs((css1(list, 'transform').split(',')[4] * (isRtl ? -1 : 1) + from) / (to - from));
            },
            getDistance: function() {
                return Math.abs(to - from);
            },
            getItemIn: function(out) {
                if (out === void 0) out = false;
                var actives = this.getActives();
                var nextActives = inView1(list, getLeft(next || prev, list, center));
                if (out) {
                    var temp = actives;
                    actives = nextActives;
                    nextActives = temp;
                }
                return nextActives[findIndex(nextActives, function(el) {
                    return !includes(actives, el);
                })];
            },
            getActives: function() {
                return inView1(list, getLeft(prev || next, list, center));
            }
        };
    }
    function getLeft(el, list, center) {
        var left = getElLeft(el, list);
        return center ? left - centerEl(el, list) : Math.min(left, getMax(list));
    }
    function getMax(list) {
        return Math.max(0, getWidth(list) - dimensions$1(list).width);
    }
    function getWidth(list) {
        return children1(list).reduce(function(right, el) {
            return dimensions$1(el).width + right;
        }, 0);
    }
    function centerEl(el, list) {
        return dimensions$1(list).width / 2 - dimensions$1(el).width / 2;
    }
    function getElLeft(el, list) {
        return el && (position1(el).left + (isRtl ? dimensions$1(el).width - dimensions$1(list).width : 0)) * (isRtl ? -1 : 1) || 0;
    }
    function inView1(list, listLeft) {
        listLeft -= 1;
        var listWidth = dimensions$1(list).width;
        var listRight = listLeft + listWidth + 2;
        return children1(list).filter(function(slide) {
            var slideLeft = getElLeft(slide, list);
            var slideRight = slideLeft + Math.min(dimensions$1(slide).width, listWidth);
            return slideLeft >= listLeft && slideRight <= listRight;
        });
    }
    function triggerUpdate(el, type, data) {
        trigger(el, createEvent(type, false, false, data));
    }
    var _obj1, _obj2;
    var slider = (_obj2 = {
        mixins: [
            Class,
            Slider,
            SliderReactive,
            SliderPreload
        ],
        props: {
            center: Boolean,
            sets: Boolean
        },
        data: {
            center: false,
            sets: false,
            attrItem: 'uk-slider-item',
            selList: '.uk-slider-items',
            selNav: '.uk-slider-nav',
            clsContainer: 'uk-slider-container',
            Transitioner: Transitioner
        }
    }, _helpers.defineProperty(_obj2, "computed", (_obj1 = {
        avgWidth: function() {
            return getWidth(this.list) / this.length;
        },
        finite: function(_ref) {
            var finite = _ref.finite;
            return finite || Math.ceil(getWidth(this.list)) < Math.trunc(dimensions$1(this.list).width + getMaxElWidth(this.list) + this.center);
        },
        maxIndex: function() {
            if (!this.finite || this.center && !this.sets) return this.length - 1;
            if (this.center) return last(this.sets);
            var lft = 0;
            var max = getMax(this.list);
            var _$index = findIndex(this.slides, function(el) {
                if (lft >= max) return true;
                lft += dimensions$1(el).width;
            });
            return ~_$index ? _$index : this.length - 1;
        }
    }, _helpers.defineProperty(_obj1, "sets", function(_ref2) {
        var enabled = _ref2["sets"];
        if (!enabled) return;
        var left = 0;
        var sets = [];
        var width = dimensions$1(this.list).width;
        for(var i = 0; i < this.slides.length; i++){
            var slideWidth = dimensions$1(this.slides[i]).width;
            if (left + slideWidth > width) left = 0;
            if (this.center) {
                if (left < width / 2 && left + slideWidth + dimensions$1(this.slides[+i + 1]).width / 2 > width / 2) {
                    sets.push(+i);
                    left = width / 2 - slideWidth / 2;
                }
            } else if (left === 0) sets.push(Math.min(+i, this.maxIndex));
            left += slideWidth;
        }
        if (sets.length) return sets;
    }), _helpers.defineProperty(_obj1, "transitionOptions", function() {
        return {
            center: this.center,
            list: this.list
        };
    }), _obj1)), _helpers.defineProperty(_obj2, "connected", function() {
        toggleClass(this.$el, this.clsContainer, !$("." + this.clsContainer, this.$el));
    }), _helpers.defineProperty(_obj2, "update", {
        write: function() {
            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
            try {
                for(var _iterator = this.navItems[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                    var el = _step.value;
                    var _$index = toNumber(data1(el, this.attrItem));
                    if (_$index !== false) el.hidden = !this.maxIndex || _$index > this.maxIndex || this.sets && !includes(this.sets, _$index);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally{
                try {
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                    }
                } finally{
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
            if (this.length && !this.dragging && !this.stack.length) {
                this.reorder();
                this._translate(1);
            }
            this.updateActiveClasses();
        },
        events: [
            'resize'
        ]
    }), _helpers.defineProperty(_obj2, "events", {
        beforeitemshow: function(e) {
            if (!this.dragging && this.sets && this.stack.length < 2 && !includes(this.sets, this.index)) this.index = this.getValidIndex();
            var diff = Math.abs(this.index - this.prevIndex + (this.dir > 0 && this.index < this.prevIndex || this.dir < 0 && this.index > this.prevIndex ? (this.maxIndex + 1) * this.dir : 0));
            if (!this.dragging && diff > 1) {
                for(var i = 0; i < diff; i++)this.stack.splice(1, 0, this.dir > 0 ? 'next' : 'previous');
                e.preventDefault();
                return;
            }
            var _$index = this.dir < 0 || !this.slides[this.prevIndex] ? this.index : this.prevIndex;
            this.duration = speedUp(this.avgWidth / this.velocity) * (dimensions$1(this.slides[_$index]).width / this.avgWidth);
            this.reorder();
        },
        itemshow: function() {
            if (~this.prevIndex) addClass(this._getTransitioner().getItemIn(), this.clsActive);
        },
        itemshown: function() {
            this.updateActiveClasses();
        }
    }), _helpers.defineProperty(_obj2, "methods", {
        reorder: function() {
            var _this = this;
            if (this.finite) {
                css1(this.slides, 'order', '');
                return;
            }
            var _$index = this.dir > 0 && this.slides[this.prevIndex] ? this.prevIndex : this.index;
            this.slides.forEach(function(slide, i) {
                return css1(slide, 'order', _this.dir > 0 && i < _$index ? 1 : _this.dir < 0 && i >= _this.index ? -1 : '');
            });
            if (!this.center) return;
            var next = this.slides[_$index];
            var width = dimensions$1(this.list).width / 2 - dimensions$1(next).width / 2;
            var j = 0;
            while(width > 0){
                var slideIndex = this.getIndex(--j + _$index, _$index);
                var slide2 = this.slides[slideIndex];
                css1(slide2, 'order', slideIndex > _$index ? -2 : -1);
                width -= dimensions$1(slide2).width;
            }
        },
        updateActiveClasses: function() {
            var actives = this._getTransitioner(this.index).getActives();
            var activeClasses = [
                this.clsActive,
                (!this.sets || includes(this.sets, toFloat(this.index))) && this.clsActivated || ''
            ];
            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
            try {
                for(var _iterator = this.slides[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                    var slide = _step.value;
                    toggleClass(slide, activeClasses, includes(actives, slide));
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally{
                try {
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                    }
                } finally{
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        },
        getValidIndex: function(index, prevIndex) {
            if (index === void 0) index = this.index;
            if (prevIndex === void 0) prevIndex = this.prevIndex;
            index = this.getIndex(index, prevIndex);
            if (!this.sets) return index;
            var prev;
            do {
                if (includes(this.sets, index)) return index;
                prev = index;
                index = this.getIndex(index + this.dir, prevIndex);
            }while (index !== prev)
            return index;
        },
        getAdjacentSlides: function() {
            var width = dimensions$1(this.list).width;
            var left = -width;
            var right = width * 2;
            var slideWidth = dimensions$1(this.slides[this.index]).width;
            var slideLeft = this.center ? width / 2 - slideWidth / 2 : 0;
            var slides = new Set();
            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
            try {
                for(var _iterator = [
                    -1,
                    1
                ][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                    var i = _step.value;
                    var currentLeft = slideLeft + (i > 0 ? slideWidth : 0);
                    var j = 0;
                    do {
                        var slide = this.slides[this.getIndex(this.index + i + (j++) * i)];
                        currentLeft += dimensions$1(slide).width * i;
                        slides.add(slide);
                    }while (this.slides.length > j && currentLeft > left && currentLeft < right)
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally{
                try {
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                    }
                } finally{
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
            return Array.from(slides);
        }
    }), _obj2);
    function getMaxElWidth(list) {
        var _Math;
        return (_Math = Math).max.apply(_Math, [
            0
        ].concat(_helpers.toConsumableArray(children1(list).map(function(el) {
            return dimensions$1(el).width;
        }))));
    }
    var sliderParallax = {
        mixins: [
            Parallax
        ],
        data: {
            selItem: '!li'
        },
        beforeConnect: function() {
            this.item = query(this.selItem, this.$el);
        },
        disconnected: function() {
            this.item = null;
        },
        events: [
            {
                name: 'itemin itemout',
                self: true,
                el: function() {
                    return this.item;
                },
                handler: function(_ref) {
                    var _this = this;
                    var type = _ref.type, _detail = _ref.detail, percent = _detail.percent, duration = _detail.duration, timing = _detail.timing, dir = _detail.dir;
                    fastdom.read(function() {
                        var _this16 = _this;
                        var propsFrom = _this.getCss(getCurrentPercent(type, dir, percent));
                        var propsTo = _this.getCss(isIn1(type) ? 0.5 : dir > 0 ? 1 : 0);
                        fastdom.write(function() {
                            css1(_this16.$el, propsFrom);
                            Transition.start(_this16.$el, propsTo, duration, timing).catch(noop);
                        });
                    });
                }
            },
            {
                name: 'transitioncanceled transitionend',
                self: true,
                el: function() {
                    return this.item;
                },
                handler: function() {
                    Transition.cancel(this.$el);
                }
            },
            {
                name: 'itemtranslatein itemtranslateout',
                self: true,
                el: function() {
                    return this.item;
                },
                handler: function(_ref2) {
                    var _this = this;
                    var type = _ref2.type, _detail = _ref2.detail, percent = _detail.percent, dir = _detail.dir;
                    fastdom.read(function() {
                        var _this17 = _this;
                        var props = _this.getCss(getCurrentPercent(type, dir, percent));
                        fastdom.write(function() {
                            return css1(_this17.$el, props);
                        });
                    });
                }
            }
        ]
    };
    function isIn1(type) {
        return endsWith(type, 'in');
    }
    function getCurrentPercent(type, dir, percent) {
        percent /= 2;
        return isIn1(type) ^ dir < 0 ? percent : 1 - percent;
    }
    var Animations1 = _helpers.objectSpread({}, Animations$2, {
        fade: {
            show: function() {
                return [
                    {
                        opacity: 0,
                        zIndex: 0
                    },
                    {
                        zIndex: -1
                    }
                ];
            },
            percent: function(current) {
                return 1 - css1(current, 'opacity');
            },
            translate: function(percent) {
                return [
                    {
                        opacity: 1 - percent,
                        zIndex: 0
                    },
                    {
                        zIndex: -1
                    }
                ];
            }
        },
        scale: {
            show: function() {
                return [
                    {
                        opacity: 0,
                        transform: scale3d(1.5),
                        zIndex: 0
                    },
                    {
                        zIndex: -1
                    }
                ];
            },
            percent: function(current) {
                return 1 - css1(current, 'opacity');
            },
            translate: function(percent) {
                return [
                    {
                        opacity: 1 - percent,
                        transform: scale3d(1 + 0.5 * percent),
                        zIndex: 0
                    },
                    {
                        zIndex: -1
                    }
                ];
            }
        },
        pull: {
            show: function(dir) {
                return dir < 0 ? [
                    {
                        transform: translate1(30),
                        zIndex: -1
                    },
                    {
                        transform: translate1(),
                        zIndex: 0
                    }
                ] : [
                    {
                        transform: translate1(-100),
                        zIndex: 0
                    },
                    {
                        transform: translate1(),
                        zIndex: -1
                    }
                ];
            },
            percent: function(current, next, dir) {
                return dir < 0 ? 1 - translated(next) : translated(current);
            },
            translate: function(percent, dir) {
                return dir < 0 ? [
                    {
                        transform: translate1(30 * percent),
                        zIndex: -1
                    },
                    {
                        transform: translate1(-100 * (1 - percent)),
                        zIndex: 0
                    }
                ] : [
                    {
                        transform: translate1(-percent * 100),
                        zIndex: 0
                    },
                    {
                        transform: translate1(30 * (1 - percent)),
                        zIndex: -1
                    }
                ];
            }
        },
        push: {
            show: function(dir) {
                return dir < 0 ? [
                    {
                        transform: translate1(100),
                        zIndex: 0
                    },
                    {
                        transform: translate1(),
                        zIndex: -1
                    }
                ] : [
                    {
                        transform: translate1(-30),
                        zIndex: -1
                    },
                    {
                        transform: translate1(),
                        zIndex: 0
                    }
                ];
            },
            percent: function(current, next, dir) {
                return dir > 0 ? 1 - translated(next) : translated(current);
            },
            translate: function(percent, dir) {
                return dir < 0 ? [
                    {
                        transform: translate1(percent * 100),
                        zIndex: 0
                    },
                    {
                        transform: translate1(-30 * (1 - percent)),
                        zIndex: -1
                    }
                ] : [
                    {
                        transform: translate1(-30 * percent),
                        zIndex: -1
                    },
                    {
                        transform: translate1(100 * (1 - percent)),
                        zIndex: 0
                    }
                ];
            }
        }
    });
    var slideshow = {
        mixins: [
            Class,
            Slideshow,
            SliderReactive,
            SliderPreload
        ],
        props: {
            ratio: String,
            minHeight: Number,
            maxHeight: Number
        },
        data: {
            ratio: '16:9',
            minHeight: false,
            maxHeight: false,
            selList: '.uk-slideshow-items',
            attrItem: 'uk-slideshow-item',
            selNav: '.uk-slideshow-nav',
            Animations: Animations1
        },
        update: {
            read: function() {
                if (!this.list) return false;
                var ref = _helpers.slicedToArray(this.ratio.split(':').map(Number), 2), width = ref[0], height = ref[1];
                height = height * this.list.offsetWidth / width || 0;
                if (this.minHeight) height = Math.max(this.minHeight, height);
                if (this.maxHeight) height = Math.min(this.maxHeight, height);
                return {
                    height: height - boxModelAdjust(this.list, 'height', 'content-box')
                };
            },
            write: function(_ref) {
                var height = _ref.height;
                height > 0 && css1(this.list, 'minHeight', height);
            },
            events: [
                'resize'
            ]
        },
        methods: {
            getAdjacentSlides: function() {
                var _this = this;
                return [
                    1,
                    -1
                ].map(function(i) {
                    return _this.slides[_this.getIndex(_this.index + i)];
                });
            }
        }
    };
    var sortable1 = {
        mixins: [
            Class,
            Animate
        ],
        props: {
            group: String,
            threshold: Number,
            clsItem: String,
            clsPlaceholder: String,
            clsDrag: String,
            clsDragState: String,
            clsBase: String,
            clsNoDrag: String,
            clsEmpty: String,
            clsCustom: String,
            handle: String
        },
        data: {
            group: false,
            threshold: 5,
            clsItem: 'uk-sortable-item',
            clsPlaceholder: 'uk-sortable-placeholder',
            clsDrag: 'uk-sortable-drag',
            clsDragState: 'uk-drag',
            clsBase: 'uk-sortable',
            clsNoDrag: 'uk-sortable-nodrag',
            clsEmpty: 'uk-sortable-empty',
            clsCustom: '',
            handle: false,
            pos: {}
        },
        created: function() {
            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
            try {
                var _this = this, _loop = function(_iterator, _step) {
                    var key = _step.value;
                    var _this18 = _this;
                    var fn = _this[key];
                    _this[key] = function(e) {
                        assign(_this18.pos, getEventPos(e));
                        fn(e);
                    };
                };
                for(var _iterator = [
                    'init',
                    'start',
                    'move',
                    'end'
                ][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop(_iterator, _step);
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally{
                try {
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                    }
                } finally{
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        },
        events: {
            name: pointerDown,
            passive: false,
            handler: 'init'
        },
        computed: {
            target: function() {
                return (this.$el.tBodies || [
                    this.$el
                ])[0];
            },
            items: function() {
                return children1(this.target);
            },
            isEmpty: {
                get: function() {
                    return isEmpty(this.items);
                },
                watch: function(empty) {
                    toggleClass(this.target, this.clsEmpty, empty);
                },
                immediate: true
            },
            handles: {
                get: function(_ref, el) {
                    var handle = _ref.handle;
                    return handle ? $$(handle, el) : this.items;
                },
                watch: function(handles, prev) {
                    css1(prev, {
                        touchAction: '',
                        userSelect: ''
                    });
                    css1(handles, {
                        touchAction: hasTouch ? 'none' : '',
                        userSelect: 'none'
                    }); // touchAction set to 'none' causes a performance drop in Chrome 80
                },
                immediate: true
            }
        },
        update: {
            write: function(data) {
                if (!this.drag || !parent1(this.placeholder)) return;
                var ref = this, _pos = ref.pos, x = _pos.x, y = _pos.y, _origin = ref.origin, offsetTop = _origin.offsetTop, offsetLeft = _origin.offsetLeft, placeholder = ref.placeholder;
                css1(this.drag, {
                    top: y - offsetTop,
                    left: x - offsetLeft
                });
                var sortable = this.getSortable(document.elementFromPoint(x, y));
                if (!sortable) return;
                var items = sortable.items;
                if (items.some(Transition.inProgress)) return;
                var target = findTarget(items, {
                    x: x,
                    y: y
                });
                if (items.length && (!target || target === placeholder)) return;
                var previous = this.getSortable(placeholder);
                var insertTarget = findInsertTarget(sortable.target, target, placeholder, x, y, sortable === previous && data.moved !== target);
                if (insertTarget === false) return;
                if (insertTarget && placeholder === insertTarget) return;
                if (sortable !== previous) {
                    previous.remove(placeholder);
                    data.moved = target;
                } else delete data.moved;
                sortable.insert(placeholder, insertTarget);
                this.touched.add(sortable);
            },
            events: [
                'move'
            ]
        },
        methods: {
            init: function(e) {
                var target = e.target, button = e.button, defaultPrevented = e.defaultPrevented;
                var ref = _helpers.slicedToArray(this.items.filter(function(el) {
                    return within(target, el);
                }), 1), placeholder = ref[0];
                if (!placeholder || defaultPrevented || button > 0 || isInput(target) || within(target, "." + this.clsNoDrag) || this.handle && !within(target, this.handle)) return;
                e.preventDefault();
                this.touched = new Set([
                    this
                ]);
                this.placeholder = placeholder;
                this.origin = _helpers.objectSpread({
                    target: target,
                    index: index1(placeholder)
                }, this.pos);
                on(document, pointerMove, this.move);
                on(document, pointerUp, this.end);
                if (!this.threshold) this.start(e);
            },
            start: function(e) {
                this.drag = appendDrag(this.$container, this.placeholder);
                var ref = this.placeholder.getBoundingClientRect(), left = ref.left, top = ref.top;
                assign(this.origin, {
                    offsetLeft: this.pos.x - left,
                    offsetTop: this.pos.y - top
                });
                addClass(this.drag, this.clsDrag, this.clsCustom);
                addClass(this.placeholder, this.clsPlaceholder);
                addClass(this.items, this.clsItem);
                addClass(document.documentElement, this.clsDragState);
                trigger(this.$el, 'start', [
                    this,
                    this.placeholder
                ]);
                trackScroll(this.pos);
                this.move(e);
            },
            move: function(e) {
                if (this.drag) this.$emit('move');
                else if (Math.abs(this.pos.x - this.origin.x) > this.threshold || Math.abs(this.pos.y - this.origin.y) > this.threshold) this.start(e);
            },
            end: function() {
                off(document, pointerMove, this.move);
                off(document, pointerUp, this.end);
                if (!this.drag) return;
                untrackScroll();
                var sortable = this.getSortable(this.placeholder);
                if (this === sortable) {
                    if (this.origin.index !== index1(this.placeholder)) trigger(this.$el, 'moved', [
                        this,
                        this.placeholder
                    ]);
                } else {
                    trigger(sortable.$el, 'added', [
                        sortable,
                        this.placeholder
                    ]);
                    trigger(this.$el, 'removed', [
                        this,
                        this.placeholder
                    ]);
                }
                trigger(this.$el, 'stop', [
                    this,
                    this.placeholder
                ]);
                remove$1(this.drag);
                this.drag = null;
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined, _iteratorNormalCompletion10 = true, _didIteratorError10 = false, _iteratorError10 = undefined;
                try {
                    for(var _iterator = this.touched[Symbol.iterator](), _step; !(_iteratorNormalCompletion10 = (_step = _iterator.next()).done); _iteratorNormalCompletion10 = true){
                        var _value = _step.value, clsPlaceholder = _value.clsPlaceholder, clsItem = _value.clsItem;
                        try {
                            for(var _iterator10 = this.touched[Symbol.iterator](), _step10; !(_iteratorNormalCompletion = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion = true){
                                var sortable2 = _step10.value;
                                removeClass(sortable2.items, clsPlaceholder, clsItem);
                            }
                        } catch (err) {
                            _didIteratorError = true;
                            _iteratorError = err;
                        } finally{
                            try {
                                if (!_iteratorNormalCompletion && _iterator10.return != null) {
                                    _iterator10.return();
                                }
                            } finally{
                                if (_didIteratorError) {
                                    throw _iteratorError;
                                }
                            }
                        }
                    }
                } catch (err) {
                    _didIteratorError10 = true;
                    _iteratorError10 = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion10 && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError10) {
                            throw _iteratorError10;
                        }
                    }
                }
                this.touched = null;
                removeClass(document.documentElement, this.clsDragState);
            },
            insert: function(element, target) {
                var _this = this;
                addClass(this.items, this.clsItem);
                var insert = function() {
                    return target ? before(target, element) : append(_this.target, element);
                };
                this.animate(insert);
            },
            remove: function(element) {
                if (!within(element, this.target)) return;
                this.animate(function() {
                    return remove$1(element);
                });
            },
            getSortable: function(element) {
                do {
                    var sortable = this.$getComponent(element, 'sortable');
                    if (sortable && (sortable === this || this.group !== false && sortable.group === this.group)) return sortable;
                }while (element = parent1(element))
            }
        }
    };
    var trackTimer;
    function trackScroll(pos) {
        var _$last = Date.now();
        trackTimer = setInterval(function() {
            var x = pos.x, y = pos.y;
            y += scrollTop(window);
            var dist = (Date.now() - _$last) * 0.3;
            _$last = Date.now();
            scrollParents(document.elementFromPoint(x, pos.y), /auto|scroll/).reverse().some(function(scrollEl) {
                var scroll = scrollEl.scrollTop, scrollHeight = scrollEl.scrollHeight;
                var ref = offsetViewport(scrollEl), top = ref.top, bottom = ref.bottom, height = ref.height;
                if (top < y && top + 35 > y) scroll -= dist;
                else if (bottom > y && bottom - 35 < y) scroll += dist;
                else return;
                if (scroll > 0 && scroll < scrollHeight - height) {
                    scrollTop(scrollEl, scroll);
                    return true;
                }
            });
        }, 15);
    }
    function untrackScroll() {
        clearInterval(trackTimer);
    }
    function appendDrag(container, element) {
        var clone = append(container, element.outerHTML.replace(/(^<)(?:li|tr)|(?:li|tr)(\/>$)/g, '$1div$2'));
        css1(clone, 'margin', '0', 'important');
        css1(clone, {
            boxSizing: 'border-box',
            width: element.offsetWidth,
            height: element.offsetHeight,
            padding: css1(element, 'padding')
        });
        height1(clone.firstElementChild, height1(element.firstElementChild));
        return clone;
    }
    function findTarget(items, point) {
        return items[findIndex(items, function(item) {
            return pointInRect(point, item.getBoundingClientRect());
        })];
    }
    function findInsertTarget(list, target, placeholder, x, y, sameList) {
        if (!children1(list).length) return;
        var rect = target.getBoundingClientRect();
        if (!sameList) {
            if (!isHorizontal1(list, placeholder)) return y < rect.top + rect.height / 2 ? target : target.nextElementSibling;
            return target;
        }
        var placeholderRect = placeholder.getBoundingClientRect();
        var sameRow = linesIntersect([
            rect.top,
            rect.bottom
        ], [
            placeholderRect.top,
            placeholderRect.bottom
        ]);
        var pointerPos = sameRow ? x : y;
        var lengthProp = sameRow ? 'width' : 'height';
        var startProp = sameRow ? 'left' : 'top';
        var endProp = sameRow ? 'right' : 'bottom';
        var diff = placeholderRect[lengthProp] < rect[lengthProp] ? rect[lengthProp] - placeholderRect[lengthProp] : 0;
        if (placeholderRect[startProp] < rect[startProp]) {
            if (diff && pointerPos < rect[startProp] + diff) return false;
            return target.nextElementSibling;
        }
        if (diff && pointerPos > rect[endProp] - diff) return false;
        return target;
    }
    function isHorizontal1(list, placeholder) {
        var single = children1(list).length === 1;
        if (single) append(list, placeholder);
        var items = children1(list);
        var isHorizontal = items.some(function(el14, i) {
            var rectA = el14.getBoundingClientRect();
            return items.slice(i + 1).some(function(el) {
                var rectB = el.getBoundingClientRect();
                return !linesIntersect([
                    rectA.left,
                    rectA.right
                ], [
                    rectB.left,
                    rectB.right
                ]);
            });
        });
        if (single) remove$1(placeholder);
        return isHorizontal;
    }
    function linesIntersect(lineA, lineB) {
        return lineA[1] > lineB[0] && lineB[1] > lineA[0];
    }
    var _obj3;
    var tooltip = {
        mixins: [
            Container,
            Togglable,
            Position
        ],
        args: 'title',
        props: {
            delay: Number,
            title: String
        },
        data: {
            pos: 'top',
            title: '',
            delay: 0,
            animation: [
                'uk-animation-scale-up'
            ],
            duration: 100,
            cls: 'uk-active'
        },
        beforeConnect: function() {
            this._hasTitle = hasAttr(this.$el, 'title');
            attr1(this.$el, 'title', '');
            this.updateAria(false);
            makeFocusable(this.$el);
        },
        disconnected: function() {
            this.hide();
            attr1(this.$el, 'title', this._hasTitle ? this.title : null);
        },
        methods: {
            show: function() {
                var _this = this;
                if (this.isToggled(this.tooltip || null) || !this.title) return;
                this._unbind = once(document, "show keydown " + pointerDown, this.hide, false, function(e) {
                    return e.type === pointerDown && !within(e.target, _this.$el) || e.type === 'keydown' && e.keyCode === 27 || e.type === 'show' && e.detail[0] !== _this && e.detail[0].$name === _this.$name;
                });
                clearTimeout(this.showTimer);
                this.showTimer = setTimeout(this._show, this.delay);
            },
            hide: function() {
                return _helpers.asyncToGenerator(_regeneratorRuntimeDefault.default.mark(function _callee() {
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                if (!matches(this.$el, 'input:focus')) {
                                    _ctx.next = 2;
                                    break;
                                }
                                return _ctx.abrupt("return");
                            case 2:
                                clearTimeout(this.showTimer);
                                if (this.isToggled(this.tooltip || null)) {
                                    _ctx.next = 5;
                                    break;
                                }
                                return _ctx.abrupt("return");
                            case 5:
                                _ctx.next = 7;
                                return this.toggleElement(this.tooltip, false, false);
                            case 7:
                                remove$1(this.tooltip);
                                this.tooltip = null;
                                this._unbind();
                            case 10:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this);
                })).apply(this);
            },
            _show: function() {
                var _this = this;
                this.tooltip = append(this.container, "<div class=\"uk-" + this.$options.name + "\"> <div class=\"uk-" + this.$options.name + "-inner\">" + this.title + "</div> </div>");
                on(this.tooltip, 'toggled', function(e, toggled) {
                    _this.updateAria(toggled);
                    if (!toggled) return;
                    _this.positionAt(_this.tooltip, _this.$el);
                    var ref = _helpers.slicedToArray(getAlignment(_this.tooltip, _this.$el, _this.pos), 2), dir = ref[0], align = ref[1];
                    _this.origin = _this.axis === 'y' ? flipPosition(dir) + "-" + align : align + "-" + flipPosition(dir);
                });
                this.toggleElement(this.tooltip, true);
            },
            updateAria: function(toggled) {
                attr1(this.$el, 'aria-expanded', toggled);
            }
        },
        events: (_obj3 = {
            focus: 'show',
            blur: 'hide'
        }, _helpers.defineProperty(_obj3, pointerEnter + " " + pointerLeave, function(e) {
            if (!isTouch(e)) this[e.type === pointerEnter ? 'show' : 'hide']();
        }), // Clicking a button does not give it focus on all browsers and platforms
        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#clicking_and_focus
        _helpers.defineProperty(_obj3, pointerDown, function(e) {
            if (isTouch(e)) this.show();
        }), _obj3)
    };
    function makeFocusable(el) {
        if (!isFocusable(el)) attr1(el, 'tabindex', '0');
    }
    function getAlignment(el, target, _ref) {
        var __ref = _helpers.slicedToArray(_ref, 2), dir = __ref[0], align = __ref[1];
        var elOffset = offset1(el);
        var targetOffset = offset1(target);
        var properties = [
            [
                'left',
                'right'
            ],
            [
                'top',
                'bottom'
            ]
        ];
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = properties[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var props = _step.value;
                if (elOffset[props[0]] >= targetOffset[props[1]]) {
                    dir = props[1];
                    break;
                }
                if (elOffset[props[1]] <= targetOffset[props[0]]) {
                    dir = props[0];
                    break;
                }
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
        var props3 = includes(properties[0], dir) ? properties[1] : properties[0];
        if (elOffset[props3[0]] === targetOffset[props3[0]]) align = props3[0];
        else if (elOffset[props3[1]] === targetOffset[props3[1]]) align = props3[1];
        else align = 'center';
        return [
            dir,
            align
        ];
    }
    var upload1 = {
        props: {
            allow: String,
            clsDragover: String,
            concurrent: Number,
            maxSize: Number,
            method: String,
            mime: String,
            msgInvalidMime: String,
            msgInvalidName: String,
            msgInvalidSize: String,
            multiple: Boolean,
            name: String,
            params: Object,
            type: String,
            url: String
        },
        data: {
            allow: false,
            clsDragover: 'uk-dragover',
            concurrent: 1,
            maxSize: 0,
            method: 'POST',
            mime: false,
            msgInvalidMime: 'Invalid File Type: %s',
            msgInvalidName: 'Invalid File Name: %s',
            msgInvalidSize: 'Invalid File Size: %s Kilobytes Max',
            multiple: false,
            name: 'files[]',
            params: {},
            type: '',
            url: '',
            abort: noop,
            beforeAll: noop,
            beforeSend: noop,
            complete: noop,
            completeAll: noop,
            error: noop,
            fail: noop,
            load: noop,
            loadEnd: noop,
            loadStart: noop,
            progress: noop
        },
        events: {
            change: function(e) {
                if (!matches(e.target, 'input[type="file"]')) return;
                e.preventDefault();
                if (e.target.files) this.upload(e.target.files);
                e.target.value = '';
            },
            drop: function(e) {
                stop1(e);
                var transfer = e.dataTransfer;
                if (!(transfer != null && transfer.files)) return;
                removeClass(this.$el, this.clsDragover);
                this.upload(transfer.files);
            },
            dragenter: function(e) {
                stop1(e);
            },
            dragover: function(e) {
                stop1(e);
                addClass(this.$el, this.clsDragover);
            },
            dragleave: function(e) {
                stop1(e);
                removeClass(this.$el, this.clsDragover);
            }
        },
        methods: {
            upload: function(files1) {
                return _helpers.asyncToGenerator(_regeneratorRuntimeDefault.default.mark(function _callee1() {
                    var _iteratorNormalCompletion11, _didIteratorError11, _iteratorError11, _iterator11, _step11, file1, chunks, _this, upload;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx1) {
                        while(1)switch(_ctx1.prev = _ctx1.next){
                            case 0:
                                files1 = toArray(files1);
                                if (files1.length) {
                                    _ctx1.next = 3;
                                    break;
                                }
                                return _ctx1.abrupt("return");
                            case 3:
                                trigger(this.$el, 'upload', [
                                    files1
                                ]);
                                _iteratorNormalCompletion11 = true, _didIteratorError11 = false, _iteratorError11 = undefined;
                                _ctx1.prev = 5;
                                _iterator11 = files1[Symbol.iterator]();
                            case 7:
                                if (_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done) {
                                    _ctx1.next = 21;
                                    break;
                                }
                                file1 = _step11.value;
                                if (!(this.maxSize && this.maxSize * 1000 < file1.size)) {
                                    _ctx1.next = 12;
                                    break;
                                }
                                this.fail(this.msgInvalidSize.replace('%s', this.maxSize));
                                return _ctx1.abrupt("return");
                            case 12:
                                if (!(this.allow && !match1(this.allow, file1.name))) {
                                    _ctx1.next = 15;
                                    break;
                                }
                                this.fail(this.msgInvalidName.replace('%s', this.allow));
                                return _ctx1.abrupt("return");
                            case 15:
                                if (!(this.mime && !match1(this.mime, file1.type))) {
                                    _ctx1.next = 18;
                                    break;
                                }
                                this.fail(this.msgInvalidMime.replace('%s', this.mime));
                                return _ctx1.abrupt("return");
                            case 18:
                                _iteratorNormalCompletion11 = true;
                                _ctx1.next = 7;
                                break;
                            case 21:
                                _ctx1.next = 27;
                                break;
                            case 23:
                                _ctx1.prev = 23;
                                _ctx1.t0 = _ctx1["catch"](5);
                                _didIteratorError11 = true;
                                _iteratorError11 = _ctx1.t0;
                            case 27:
                                _ctx1.prev = 27;
                                _ctx1.prev = 28;
                                if (!_iteratorNormalCompletion11 && _iterator11.return != null) {
                                    _iterator11.return();
                                }
                            case 30:
                                _ctx1.prev = 30;
                                if (!_didIteratorError11) {
                                    _ctx1.next = 33;
                                    break;
                                }
                                throw _iteratorError11;
                            case 33:
                                return _ctx1.finish(30);
                            case 34:
                                return _ctx1.finish(27);
                            case 35:
                                if (!this.multiple) files1 = files1.slice(0, 1);
                                this.beforeAll(this, files1);
                                chunks = chunk(files1, this.concurrent);
                                _this = this;
                                upload = function() {
                                    var _ref = _helpers.asyncToGenerator(_regeneratorRuntimeDefault.default.mark(function _callee(files) {
                                        var _$data, key, xhr1;
                                        return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                                            while(1)switch(_ctx.prev = _ctx.next){
                                                case 0:
                                                    _$data = new FormData();
                                                    files.forEach(function(file) {
                                                        return _$data.append(_this.name, file);
                                                    });
                                                    for(key in _this.params)_$data.append(key, _this.params[key]);
                                                    _ctx.prev = 3;
                                                    _ctx.next = 6;
                                                    return ajax(_this.url, {
                                                        data: _$data,
                                                        method: _this.method,
                                                        responseType: _this.type,
                                                        beforeSend: function(env) {
                                                            var xhr = env.xhr;
                                                            xhr.upload && on(xhr.upload, 'progress', _this.progress);
                                                            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                                                            try {
                                                                for(var _iterator = [
                                                                    'loadStart',
                                                                    'load',
                                                                    'loadEnd',
                                                                    'abort'
                                                                ][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                                                                    var type = _step.value;
                                                                    on(xhr, type.toLowerCase(), _this[type]);
                                                                }
                                                            } catch (err) {
                                                                _didIteratorError = true;
                                                                _iteratorError = err;
                                                            } finally{
                                                                try {
                                                                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                                                                        _iterator.return();
                                                                    }
                                                                } finally{
                                                                    if (_didIteratorError) {
                                                                        throw _iteratorError;
                                                                    }
                                                                }
                                                            }
                                                            return _this.beforeSend(env);
                                                        }
                                                    });
                                                case 6:
                                                    xhr1 = _ctx.sent;
                                                    _this.complete(xhr1);
                                                    if (!chunks.length) {
                                                        _ctx.next = 13;
                                                        break;
                                                    }
                                                    _ctx.next = 11;
                                                    return upload(chunks.shift());
                                                case 11:
                                                    _ctx.next = 14;
                                                    break;
                                                case 13:
                                                    _this.completeAll(xhr1);
                                                case 14:
                                                    _ctx.next = 19;
                                                    break;
                                                case 16:
                                                    _ctx.prev = 16;
                                                    _ctx.t0 = _ctx["catch"](3);
                                                    _this.error(_ctx.t0);
                                                case 19:
                                                case "end":
                                                    return _ctx.stop();
                                            }
                                        }, _callee, null, [
                                            [
                                                3,
                                                16
                                            ]
                                        ]);
                                    }));
                                    return function upload(files) {
                                        return _ref.apply(this, arguments);
                                    };
                                }();
                                _ctx1.next = 42;
                                return upload(chunks.shift());
                            case 42:
                            case "end":
                                return _ctx1.stop();
                        }
                    }, _callee1, this, [
                        [
                            5,
                            23,
                            27,
                            35
                        ],
                        [
                            28,
                            ,
                            30,
                            34
                        ]
                    ]);
                })).apply(this);
            }
        }
    };
    function match1(pattern, path) {
        return path.match(new RegExp("^" + pattern.replace(/\//g, '\\/').replace(/\*\*/g, '(\\/[^\\/]+)*').replace(/\*/g, '[^\\/]+').replace(/((?!\\))\?/g, '$1.') + "$", 'i'));
    }
    function chunk(files, size) {
        var chunks = [];
        for(var i = 0; i < files.length; i += size)chunks.push(files.slice(i, i + size));
        return chunks;
    }
    function stop1(e) {
        e.preventDefault();
        e.stopPropagation();
    }
    var components1 = /*#__PURE__*/ Object.freeze({
        __proto__: null,
        Countdown: countdown,
        Filter: filter1,
        Lightbox: lightbox,
        LightboxPanel: LightboxPanel,
        Notification: notification1,
        Parallax: parallax,
        Slider: slider,
        SliderParallax: sliderParallax,
        Slideshow: slideshow,
        SlideshowParallax: sliderParallax,
        Sortable: sortable1,
        Tooltip: tooltip,
        Upload: upload1
    });
    each(components1, function(component, name) {
        return UIkit1.component(name, component);
    });
    return UIkit1;
});

},{"@swc/helpers":"erO4s","regenerator-runtime":"12Ae8","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"2ydou":[function() {},{}],"8omYs":[function(require,module,exports) {
/*! UIkit 3.14.0 | https://www.getuikit.com | (c) 2014 - 2022 YOOtheme | MIT License */ (function(global, factory) {
    module.exports = factory();
})(this, function() {
    'use strict';
    function plugin(UIkit) {
        if (plugin.installed) return;
        UIkit.icon.add({
            "500px": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M9.624,11.866c-0.141,0.132,0.479,0.658,0.662,0.418c0.051-0.046,0.607-0.61,0.662-0.664c0,0,0.738,0.719,0.814,0.719 c0.1,0,0.207-0.055,0.322-0.17c0.27-0.269,0.135-0.416,0.066-0.495l-0.631-0.616l0.658-0.668c0.146-0.156,0.021-0.314-0.1-0.449 c-0.182-0.18-0.359-0.226-0.471-0.125l-0.656,0.654l-0.654-0.654c-0.033-0.034-0.08-0.045-0.124-0.045 c-0.079,0-0.191,0.068-0.307,0.181c-0.202,0.202-0.247,0.351-0.133,0.462l0.665,0.665L9.624,11.866z\"/><path d=\"M11.066,2.884c-1.061,0-2.185,0.248-3.011,0.604c-0.087,0.034-0.141,0.106-0.15,0.205C7.893,3.784,7.919,3.909,7.982,4.066 c0.05,0.136,0.187,0.474,0.452,0.372c0.844-0.326,1.779-0.507,2.633-0.507c0.963,0,1.9,0.191,2.781,0.564 c0.695,0.292,1.357,0.719,2.078,1.34c0.051,0.044,0.105,0.068,0.164,0.068c0.143,0,0.273-0.137,0.389-0.271 c0.191-0.214,0.324-0.395,0.135-0.575c-0.686-0.654-1.436-1.138-2.363-1.533C13.24,3.097,12.168,2.884,11.066,2.884z\"/><path d=\"M16.43,15.747c-0.092-0.028-0.242,0.05-0.309,0.119l0,0c-0.652,0.652-1.42,1.169-2.268,1.521 c-0.877,0.371-1.814,0.551-2.779,0.551c-0.961,0-1.896-0.189-2.775-0.564c-0.848-0.36-1.612-0.879-2.268-1.53 c-0.682-0.688-1.196-1.455-1.529-2.268c-0.325-0.799-0.471-1.643-0.471-1.643c-0.045-0.24-0.258-0.249-0.567-0.203 c-0.128,0.021-0.519,0.079-0.483,0.36v0.01c0.105,0.644,0.289,1.284,0.545,1.895c0.417,0.969,1.002,1.849,1.756,2.604 c0.757,0.754,1.636,1.34,2.604,1.757C8.901,18.785,9.97,19,11.088,19c1.104,0,2.186-0.215,3.188-0.645 c1.838-0.896,2.604-1.757,2.604-1.757c0.182-0.204,0.227-0.317-0.1-0.643C16.779,15.956,16.525,15.774,16.43,15.747z\"/><path d=\"M5.633,13.287c0.293,0.71,0.723,1.341,1.262,1.882c0.54,0.54,1.172,0.971,1.882,1.264c0.731,0.303,1.509,0.461,2.298,0.461 c0.801,0,1.578-0.158,2.297-0.461c0.711-0.293,1.344-0.724,1.883-1.264c0.543-0.541,0.971-1.172,1.264-1.882 c0.314-0.721,0.463-1.5,0.463-2.298c0-0.79-0.148-1.569-0.463-2.289c-0.293-0.699-0.721-1.329-1.264-1.881 c-0.539-0.541-1.172-0.959-1.867-1.263c-0.721-0.303-1.5-0.461-2.299-0.461c-0.802,0-1.613,0.159-2.322,0.461 c-0.577,0.25-1.544,0.867-2.119,1.454v0.012V2.108h8.16C15.1,2.104,15.1,1.69,15.1,1.552C15.1,1.417,15.1,1,14.809,1H5.915 C5.676,1,5.527,1.192,5.527,1.384v6.84c0,0.214,0.273,0.372,0.529,0.428c0.5,0.105,0.614-0.056,0.737-0.224l0,0 c0.18-0.273,0.776-0.884,0.787-0.894c0.901-0.905,2.117-1.408,3.416-1.408c1.285,0,2.5,0.501,3.412,1.408 c0.914,0.914,1.408,2.122,1.408,3.405c0,1.288-0.508,2.496-1.408,3.405c-0.9,0.896-2.152,1.406-3.438,1.406 c-0.877,0-1.711-0.229-2.433-0.671v-4.158c0-0.553,0.237-1.151,0.643-1.614c0.462-0.519,1.094-0.799,1.782-0.799 c0.664,0,1.293,0.253,1.758,0.715c0.459,0.459,0.709,1.071,0.709,1.723c0,1.385-1.094,2.468-2.488,2.468 c-0.273,0-0.769-0.121-0.781-0.125c-0.281-0.087-0.405,0.306-0.438,0.436c-0.159,0.496,0.079,0.585,0.123,0.607 c0.452,0.137,0.743,0.157,1.129,0.157c1.973,0,3.572-1.6,3.572-3.57c0-1.964-1.6-3.552-3.572-3.552c-0.97,0-1.872,0.36-2.546,1.038 c-0.656,0.631-1.027,1.487-1.027,2.322v3.438v-0.011c-0.372-0.42-0.732-1.041-0.981-1.682c-0.102-0.248-0.315-0.202-0.607-0.113 c-0.135,0.035-0.519,0.157-0.44,0.439C5.372,12.799,5.577,13.164,5.633,13.287z\"/></svg>",
            "album": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><rect x=\"5\" y=\"2\" width=\"10\" height=\"1\"/><rect x=\"3\" y=\"4\" width=\"14\" height=\"1\"/><rect fill=\"none\" stroke=\"#000\" x=\"1.5\" y=\"6.5\" width=\"17\" height=\"11\"/></svg>",
            "arrow-down": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polygon points=\"10.5,16.08 5.63,10.66 6.37,10 10.5,14.58 14.63,10 15.37,10.66\"/><line fill=\"none\" stroke=\"#000\" x1=\"10.5\" y1=\"4\" x2=\"10.5\" y2=\"15\"/></svg>",
            "arrow-left": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline fill=\"none\" stroke=\"#000\" points=\"10 14 5 9.5 10 5\"/><line fill=\"none\" stroke=\"#000\" x1=\"16\" y1=\"9.5\" x2=\"5\" y2=\"9.52\"/></svg>",
            "arrow-right": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline fill=\"none\" stroke=\"#000\" points=\"10 5 15 9.5 10 14\"/><line fill=\"none\" stroke=\"#000\" x1=\"4\" y1=\"9.5\" x2=\"15\" y2=\"9.5\"/></svg>",
            "arrow-up": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polygon points=\"10.5,4 15.37,9.4 14.63,10.08 10.5,5.49 6.37,10.08 5.63,9.4\"/><line fill=\"none\" stroke=\"#000\" x1=\"10.5\" y1=\"16\" x2=\"10.5\" y2=\"5\"/></svg>",
            "bag": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" stroke=\"#000\" d=\"M7.5,7.5V4A2.48,2.48,0,0,1,10,1.5,2.54,2.54,0,0,1,12.5,4V7.5\"/><polygon fill=\"none\" stroke=\"#000\" points=\"16.5 7.5 3.5 7.5 2.5 18.5 17.5 18.5 16.5 7.5\"/></svg>",
            "ban": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" cx=\"10\" cy=\"10\" r=\"9\"/><line fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" x1=\"4\" y1=\"3.5\" x2=\"16\" y2=\"16.5\"/></svg>",
            "behance": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M9.5,10.6c-0.4-0.5-0.9-0.9-1.6-1.1c1.7-1,2.2-3.2,0.7-4.7C7.8,4,6.3,4,5.2,4C3.5,4,1.7,4,0,4v12c1.7,0,3.4,0,5.2,0 c1,0,2.1,0,3.1-0.5C10.2,14.6,10.5,12.3,9.5,10.6L9.5,10.6z M5.6,6.1c1.8,0,1.8,2.7-0.1,2.7c-1,0-2,0-2.9,0V6.1H5.6z M2.6,13.8v-3.1 c1.1,0,2.1,0,3.2,0c2.1,0,2.1,3.2,0.1,3.2L2.6,13.8z\"/><path d=\"M19.9,10.9C19.7,9.2,18.7,7.6,17,7c-4.2-1.3-7.3,3.4-5.3,7.1c0.9,1.7,2.8,2.3,4.7,2.1c1.7-0.2,2.9-1.3,3.4-2.9h-2.2 c-0.4,1.3-2.4,1.5-3.5,0.6c-0.4-0.4-0.6-1.1-0.6-1.7H20C20,11.7,19.9,10.9,19.9,10.9z M13.5,10.6c0-1.6,2.3-2.7,3.5-1.4 c0.4,0.4,0.5,0.9,0.6,1.4H13.5L13.5,10.6z\"/><rect x=\"13\" y=\"4\" width=\"5\" height=\"1.4\"/></svg>",
            "bell": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M17,15.5 L3,15.5 C2.99,14.61 3.79,13.34 4.1,12.51 C4.58,11.3 4.72,10.35 5.19,7.01 C5.54,4.53 5.89,3.2 7.28,2.16 C8.13,1.56 9.37,1.5 9.81,1.5 L9.96,1.5 C9.96,1.5 11.62,1.41 12.67,2.17 C14.08,3.2 14.42,4.54 14.77,7.02 C15.26,10.35 15.4,11.31 15.87,12.52 C16.2,13.34 17.01,14.61 17,15.5 L17,15.5 Z\"/><path fill=\"none\" stroke=\"#000\" d=\"M12.39,16 C12.39,17.37 11.35,18.43 9.91,18.43 C8.48,18.43 7.42,17.37 7.42,16\"/></svg>",
            "bold": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M5,15.3 C5.66,15.3 5.9,15 5.9,14.53 L5.9,5.5 C5.9,4.92 5.56,4.7 5,4.7 L5,4 L8.95,4 C12.6,4 13.7,5.37 13.7,6.9 C13.7,7.87 13.14,9.17 10.86,9.59 L10.86,9.7 C13.25,9.86 14.29,11.28 14.3,12.54 C14.3,14.47 12.94,16 9,16 L5,16 L5,15.3 Z M9,9.3 C11.19,9.3 11.8,8.5 11.85,7 C11.85,5.65 11.3,4.8 9,4.8 L7.67,4.8 L7.67,9.3 L9,9.3 Z M9.185,15.22 C11.97,15 12.39,14 12.4,12.58 C12.4,11.15 11.39,10 9,10 L7.67,10 L7.67,15 L9.18,15 Z\"/></svg>",
            "bolt": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M4.74,20 L7.73,12 L3,12 L15.43,1 L12.32,9 L17.02,9 L4.74,20 L4.74,20 L4.74,20 Z M9.18,11 L7.1,16.39 L14.47,10 L10.86,10 L12.99,4.67 L5.61,11 L9.18,11 L9.18,11 L9.18,11 Z\"/></svg>",
            "bookmark": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polygon fill=\"none\" stroke=\"#000\" points=\"5.5 1.5 15.5 1.5 15.5 17.5 10.5 12.5 5.5 17.5\"/></svg>",
            "calendar": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M 2,3 2,17 18,17 18,3 2,3 Z M 17,16 3,16 3,8 17,8 17,16 Z M 17,7 3,7 3,4 17,4 17,7 Z\"/><rect width=\"1\" height=\"3\" x=\"6\" y=\"2\"/><rect width=\"1\" height=\"3\" x=\"13\" y=\"2\"/></svg>",
            "camera": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" cx=\"10\" cy=\"10.8\" r=\"3.8\"/><path fill=\"none\" stroke=\"#000\" d=\"M1,4.5 C0.7,4.5 0.5,4.7 0.5,5 L0.5,17 C0.5,17.3 0.7,17.5 1,17.5 L19,17.5 C19.3,17.5 19.5,17.3 19.5,17 L19.5,5 C19.5,4.7 19.3,4.5 19,4.5 L13.5,4.5 L13.5,2.9 C13.5,2.6 13.3,2.5 13,2.5 L7,2.5 C6.7,2.5 6.5,2.6 6.5,2.9 L6.5,4.5 L1,4.5 L1,4.5 Z\"/></svg>",
            "cart": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"7.3\" cy=\"17.3\" r=\"1.4\"/><circle cx=\"13.3\" cy=\"17.3\" r=\"1.4\"/><polyline fill=\"none\" stroke=\"#000\" points=\"0 2 3.2 4 5.3 12.5 16 12.5 18 6.5 8 6.5\"/></svg>",
            "check": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" points=\"4,10 8,15 17,4\"/></svg>",
            "chevron-double-left": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline fill=\"none\" stroke=\"#000\" stroke-width=\"1.03\" points=\"10 14 6 10 10 6\"/><polyline fill=\"none\" stroke=\"#000\" stroke-width=\"1.03\" points=\"14 14 10 10 14 6\"/></svg>",
            "chevron-double-right": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline fill=\"none\" stroke=\"#000\" stroke-width=\"1.03\" points=\"10 6 14 10 10 14\"/><polyline fill=\"none\" stroke=\"#000\" stroke-width=\"1.03\" points=\"6 6 10 10 6 14\"/></svg>",
            "chevron-down": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline fill=\"none\" stroke=\"#000\" stroke-width=\"1.03\" points=\"16 7 10 13 4 7\"/></svg>",
            "chevron-left": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline fill=\"none\" stroke=\"#000\" stroke-width=\"1.03\" points=\"13 16 7 10 13 4\"/></svg>",
            "chevron-right": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline fill=\"none\" stroke=\"#000\" stroke-width=\"1.03\" points=\"7 4 13 10 7 16\"/></svg>",
            "chevron-up": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline fill=\"none\" stroke=\"#000\" stroke-width=\"1.03\" points=\"4 13 10 7 16 13\"/></svg>",
            "clock": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" cx=\"10\" cy=\"10\" r=\"9\"/><rect x=\"9\" y=\"4\" width=\"1\" height=\"7\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M13.018,14.197 L9.445,10.625\"/></svg>",
            "close": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.06\" d=\"M16,16 L4,4\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.06\" d=\"M16,4 L4,16\"/></svg>",
            "cloud-download": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M6.5,14.61 L3.75,14.61 C1.96,14.61 0.5,13.17 0.5,11.39 C0.5,9.76 1.72,8.41 3.3,8.2 C3.38,5.31 5.75,3 8.68,3 C11.19,3 13.31,4.71 13.89,7.02 C14.39,6.8 14.93,6.68 15.5,6.68 C17.71,6.68 19.5,8.45 19.5,10.64 C19.5,12.83 17.71,14.6 15.5,14.6 L12.5,14.6\"/><polyline fill=\"none\" stroke=\"#000\" points=\"11.75 16 9.5 18.25 7.25 16\"/><path fill=\"none\" stroke=\"#000\" d=\"M9.5,18 L9.5,9.5\"/></svg>",
            "cloud-upload": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M6.5,14.61 L3.75,14.61 C1.96,14.61 0.5,13.17 0.5,11.39 C0.5,9.76 1.72,8.41 3.31,8.2 C3.38,5.31 5.75,3 8.68,3 C11.19,3 13.31,4.71 13.89,7.02 C14.39,6.8 14.93,6.68 15.5,6.68 C17.71,6.68 19.5,8.45 19.5,10.64 C19.5,12.83 17.71,14.6 15.5,14.6 L12.5,14.6\"/><polyline fill=\"none\" stroke=\"#000\" points=\"7.25 11.75 9.5 9.5 11.75 11.75\"/><path fill=\"none\" stroke=\"#000\" d=\"M9.5,18 L9.5,9.5\"/></svg>",
            "code": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline fill=\"none\" stroke=\"#000\" stroke-width=\"1.01\" points=\"13,4 19,10 13,16\"/><polyline fill=\"none\" stroke=\"#000\" stroke-width=\"1.01\" points=\"7,4 1,10 7,16\"/></svg>",
            "cog": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><circle fill=\"none\" stroke=\"#000\" cx=\"9.997\" cy=\"10\" r=\"3.31\"/><path fill=\"none\" stroke=\"#000\" d=\"M18.488,12.285 L16.205,16.237 C15.322,15.496 14.185,15.281 13.303,15.791 C12.428,16.289 12.047,17.373 12.246,18.5 L7.735,18.5 C7.938,17.374 7.553,16.299 6.684,15.791 C5.801,15.27 4.655,15.492 3.773,16.237 L1.5,12.285 C2.573,11.871 3.317,10.999 3.317,9.991 C3.305,8.98 2.573,8.121 1.5,7.716 L3.765,3.784 C4.645,4.516 5.794,4.738 6.687,4.232 C7.555,3.722 7.939,2.637 7.735,1.5 L12.263,1.5 C12.072,2.637 12.441,3.71 13.314,4.22 C14.206,4.73 15.343,4.516 16.225,3.794 L18.487,7.714 C17.404,8.117 16.661,8.988 16.67,10.009 C16.672,11.018 17.415,11.88 18.488,12.285 L18.488,12.285 Z\"/></svg>",
            "comment": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M6,18.71 L6,14 L1,14 L1,1 L19,1 L19,14 L10.71,14 L6,18.71 L6,18.71 Z M2,13 L7,13 L7,16.29 L10.29,13 L18,13 L18,2 L2,2 L2,13 L2,13 Z\"/></svg>",
            "commenting": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polygon fill=\"none\" stroke=\"#000\" points=\"1.5,1.5 18.5,1.5 18.5,13.5 10.5,13.5 6.5,17.5 6.5,13.5 1.5,13.5\"/><circle cx=\"10\" cy=\"8\" r=\"1\"/><circle cx=\"6\" cy=\"8\" r=\"1\"/><circle cx=\"14\" cy=\"8\" r=\"1\"/></svg>",
            "comments": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline fill=\"none\" stroke=\"#000\" points=\"2 0.5 19.5 0.5 19.5 13\"/><path d=\"M5,19.71 L5,15 L0,15 L0,2 L18,2 L18,15 L9.71,15 L5,19.71 L5,19.71 L5,19.71 Z M1,14 L6,14 L6,17.29 L9.29,14 L17,14 L17,3 L1,3 L1,14 L1,14 L1,14 Z\"/></svg>",
            "copy": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><rect fill=\"none\" stroke=\"#000\" x=\"3.5\" y=\"2.5\" width=\"12\" height=\"16\"/><polyline fill=\"none\" stroke=\"#000\" points=\"5 0.5 17.5 0.5 17.5 17\"/></svg>",
            "credit-card": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><rect fill=\"none\" stroke=\"#000\" x=\"1.5\" y=\"4.5\" width=\"17\" height=\"12\"/><rect x=\"1\" y=\"7\" width=\"18\" height=\"3\"/></svg>",
            "database": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><ellipse fill=\"none\" stroke=\"#000\" cx=\"10\" cy=\"4.64\" rx=\"7.5\" ry=\"3.14\"/><path fill=\"none\" stroke=\"#000\" d=\"M17.5,8.11 C17.5,9.85 14.14,11.25 10,11.25 C5.86,11.25 2.5,9.84 2.5,8.11\"/><path fill=\"none\" stroke=\"#000\" d=\"M17.5,11.25 C17.5,12.99 14.14,14.39 10,14.39 C5.86,14.39 2.5,12.98 2.5,11.25\"/><path fill=\"none\" stroke=\"#000\" d=\"M17.49,4.64 L17.5,14.36 C17.5,16.1 14.14,17.5 10,17.5 C5.86,17.5 2.5,16.09 2.5,14.36 L2.5,4.64\"/></svg>",
            "desktop": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><rect x=\"8\" y=\"15\" width=\"1\" height=\"2\"/><rect x=\"11\" y=\"15\" width=\"1\" height=\"2\"/><rect x=\"5\" y=\"16\" width=\"10\" height=\"1\"/><rect fill=\"none\" stroke=\"#000\" x=\"1.5\" y=\"3.5\" width=\"17\" height=\"11\"/></svg>",
            "discord": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\"><path d=\"M16.074,4.361a14.243,14.243,0,0,0-3.61-1.134,10.61,10.61,0,0,0-.463.96,13.219,13.219,0,0,0-4,0,10.138,10.138,0,0,0-.468-.96A14.206,14.206,0,0,0,3.919,4.364,15.146,15.146,0,0,0,1.324,14.5a14.435,14.435,0,0,0,4.428,2.269A10.982,10.982,0,0,0,6.7,15.21a9.294,9.294,0,0,1-1.494-.727c.125-.093.248-.19.366-.289a10.212,10.212,0,0,0,8.854,0c.119.1.242.2.366.289a9.274,9.274,0,0,1-1.5.728,10.8,10.8,0,0,0,.948,1.562,14.419,14.419,0,0,0,4.431-2.27A15.128,15.128,0,0,0,16.074,4.361Zm-8.981,8.1a1.7,1.7,0,0,1-1.573-1.79A1.689,1.689,0,0,1,7.093,8.881a1.679,1.679,0,0,1,1.573,1.791A1.687,1.687,0,0,1,7.093,12.462Zm5.814,0a1.7,1.7,0,0,1-1.573-1.79,1.689,1.689,0,0,1,1.573-1.791,1.679,1.679,0,0,1,1.573,1.791A1.688,1.688,0,0,1,12.907,12.462Z\"/></svg>",
            "download": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline fill=\"none\" stroke=\"#000\" points=\"14,10 9.5,14.5 5,10\"/><rect x=\"3\" y=\"17\" width=\"13\" height=\"1\"/><line fill=\"none\" stroke=\"#000\" x1=\"9.5\" y1=\"13.91\" x2=\"9.5\" y2=\"3\"/></svg>",
            "dribbble": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.4\" d=\"M1.3,8.9c0,0,5,0.1,8.6-1c1.4-0.4,2.6-0.9,4-1.9 c1.4-1.1,2.5-2.5,2.5-2.5\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.4\" d=\"M3.9,16.6c0,0,1.7-2.8,3.5-4.2 c1.8-1.3,4-2,5.7-2.2C16,10,19,10.6,19,10.6\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.4\" d=\"M6.9,1.6c0,0,3.3,4.6,4.2,6.8 c0.4,0.9,1.3,3.1,1.9,5.2c0.6,2,0.9,4.4,0.9,4.4\"/><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.4\" cx=\"10\" cy=\"10\" r=\"9\"/></svg>",
            "etsy": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\"><path d=\"M8,4.26C8,4.07,8,4,8.31,4h4.46c.79,0,1.22.67,1.53,1.91l.25,1h.76c.14-2.82.26-4,.26-4S13.65,3,12.52,3H6.81L3.75,2.92v.84l1,.2c.73.11.9.27,1,1,0,0,.06,2,.06,5.17s-.06,5.14-.06,5.14c0,.59-.23.81-1,.94l-1,.2v.84l3.06-.1h5.11c1.15,0,3.82.1,3.82.1,0-.7.45-3.88.51-4.22h-.73l-.76,1.69a2.25,2.25,0,0,1-2.45,1.47H9.4c-1,0-1.44-.4-1.44-1.24V10.44s2.16,0,2.86.06c.55,0,.85.19,1.06,1l.23,1H13L12.9,9.94,13,7.41h-.85l-.28,1.13c-.16.74-.28.84-1,1-1,.1-2.89.09-2.89.09Z\"/></svg>",
            "expand": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polygon points=\"13 2 18 2 18 7 17 7 17 3 13 3\"/><polygon points=\"2 13 3 13 3 17 7 17 7 18 2 18\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M11,9 L17,3\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M3,17 L9,11\"/></svg>",
            "facebook": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M11,10h2.6l0.4-3H11V5.3c0-0.9,0.2-1.5,1.5-1.5H14V1.1c-0.3,0-1-0.1-2.1-0.1C9.6,1,8,2.4,8,5v2H5.5v3H8v8h3V10z\"/></svg>",
            "file-edit": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" stroke=\"#000\" d=\"M18.65,1.68 C18.41,1.45 18.109,1.33 17.81,1.33 C17.499,1.33 17.209,1.45 16.98,1.68 L8.92,9.76 L8,12.33 L10.55,11.41 L18.651,3.34 C19.12,2.87 19.12,2.15 18.65,1.68 L18.65,1.68 L18.65,1.68 Z\"/><polyline fill=\"none\" stroke=\"#000\" points=\"16.5 8.482 16.5 18.5 3.5 18.5 3.5 1.5 14.211 1.5\"/></svg>",
            "file-pdf": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><rect fill=\"none\" stroke=\"#000\" width=\"13\" height=\"17\" x=\"3.5\" y=\"1.5\"/><path d=\"M14.65 11.67c-.48.3-1.37-.19-1.79-.37a4.65 4.65 0 0 1 1.49.06c.35.1.36.28.3.31zm-6.3.06l.43-.79a14.7 14.7 0 0 0 .75-1.64 5.48 5.48 0 0 0 1.25 1.55l.2.15a16.36 16.36 0 0 0-2.63.73zM9.5 5.32c.2 0 .32.5.32.97a1.99 1.99 0 0 1-.23 1.04 5.05 5.05 0 0 1-.17-1.3s0-.71.08-.71zm-3.9 9a4.35 4.35 0 0 1 1.21-1.46l.24-.22a4.35 4.35 0 0 1-1.46 1.68zm9.23-3.3a2.05 2.05 0 0 0-1.32-.3 11.07 11.07 0 0 0-1.58.11 4.09 4.09 0 0 1-.74-.5 5.39 5.39 0 0 1-1.32-2.06 10.37 10.37 0 0 0 .28-2.62 1.83 1.83 0 0 0-.07-.25.57.57 0 0 0-.52-.4H9.4a.59.59 0 0 0-.6.38 6.95 6.95 0 0 0 .37 3.14c-.26.63-1 2.12-1 2.12-.3.58-.57 1.08-.82 1.5l-.8.44A3.11 3.11 0 0 0 5 14.16a.39.39 0 0 0 .15.42l.24.13c1.15.56 2.28-1.74 2.66-2.42a23.1 23.1 0 0 1 3.59-.85 4.56 4.56 0 0 0 2.91.8.5.5 0 0 0 .3-.21 1.1 1.1 0 0 0 .12-.75.84.84 0 0 0-.14-.25z\"/></svg>",
            "file-text": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><rect fill=\"none\" stroke=\"#000\" width=\"13\" height=\"17\" x=\"3.5\" y=\"1.5\"/><line fill=\"none\" stroke=\"#000\" x1=\"6\" x2=\"12\" y1=\"12.5\" y2=\"12.5\"/><line fill=\"none\" stroke=\"#000\" x1=\"6\" x2=\"14\" y1=\"8.5\" y2=\"8.5\"/><line fill=\"none\" stroke=\"#000\" x1=\"6\" x2=\"14\" y1=\"6.5\" y2=\"6.5\"/><line fill=\"none\" stroke=\"#000\" x1=\"6\" x2=\"14\" y1=\"10.5\" y2=\"10.5\"/></svg>",
            "file": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><rect fill=\"none\" stroke=\"#000\" x=\"3.5\" y=\"1.5\" width=\"13\" height=\"17\"/></svg>",
            "flickr": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"5.5\" cy=\"9.5\" r=\"3.5\"/><circle cx=\"14.5\" cy=\"9.5\" r=\"3.5\"/></svg>",
            "folder": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polygon fill=\"none\" stroke=\"#000\" points=\"9.5 5.5 8.5 3.5 1.5 3.5 1.5 16.5 18.5 16.5 18.5 5.5\"/></svg>",
            "forward": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M2.47,13.11 C4.02,10.02 6.27,7.85 9.04,6.61 C9.48,6.41 10.27,6.13 11,5.91 L11,2 L18.89,9 L11,16 L11,12.13 C9.25,12.47 7.58,13.19 6.02,14.25 C3.03,16.28 1.63,18.54 1.63,18.54 C1.63,18.54 1.38,15.28 2.47,13.11 L2.47,13.11 Z M5.3,13.53 C6.92,12.4 9.04,11.4 12,10.92 L12,13.63 L17.36,9 L12,4.25 L12,6.8 C11.71,6.86 10.86,7.02 9.67,7.49 C6.79,8.65 4.58,10.96 3.49,13.08 C3.18,13.7 2.68,14.87 2.49,16 C3.28,15.05 4.4,14.15 5.3,13.53 L5.3,13.53 Z\"/></svg>",
            "foursquare": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M15.23,2 C15.96,2 16.4,2.41 16.5,2.86 C16.57,3.15 16.56,3.44 16.51,3.73 C16.46,4.04 14.86,11.72 14.75,12.03 C14.56,12.56 14.16,12.82 13.61,12.83 C13.03,12.84 11.09,12.51 10.69,13 C10.38,13.38 7.79,16.39 6.81,17.53 C6.61,17.76 6.4,17.96 6.08,17.99 C5.68,18.04 5.29,17.87 5.17,17.45 C5.12,17.28 5.1,17.09 5.1,16.91 C5.1,12.4 4.86,7.81 5.11,3.31 C5.17,2.5 5.81,2.12 6.53,2 L15.23,2 L15.23,2 Z M9.76,11.42 C9.94,11.19 10.17,11.1 10.45,11.1 L12.86,11.1 C13.12,11.1 13.31,10.94 13.36,10.69 C13.37,10.64 13.62,9.41 13.74,8.83 C13.81,8.52 13.53,8.28 13.27,8.28 C12.35,8.29 11.42,8.28 10.5,8.28 C9.84,8.28 9.83,7.69 9.82,7.21 C9.8,6.85 10.13,6.55 10.5,6.55 C11.59,6.56 12.67,6.55 13.76,6.55 C14.03,6.55 14.23,6.4 14.28,6.14 C14.34,5.87 14.67,4.29 14.67,4.29 C14.67,4.29 14.82,3.74 14.19,3.74 L7.34,3.74 C7,3.75 6.84,4.02 6.84,4.33 C6.84,7.58 6.85,14.95 6.85,14.99 C6.87,15 8.89,12.51 9.76,11.42 L9.76,11.42 Z\"/></svg>",
            "future": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"19 2 18 2 18 6 14 6 14 7 19 7 19 2\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M18,6.548 C16.709,3.29 13.354,1 9.6,1 C4.6,1 0.6,5 0.6,10 C0.6,15 4.6,19 9.6,19 C14.6,19 18.6,15 18.6,10\"/><rect x=\"9\" y=\"4\" width=\"1\" height=\"7\"/><path d=\"M13.018,14.197 L9.445,10.625\" fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\"/></svg>",
            "git-branch": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.2\" cx=\"7\" cy=\"3\" r=\"2\"/><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.2\" cx=\"14\" cy=\"6\" r=\"2\"/><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.2\" cx=\"7\" cy=\"17\" r=\"2\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"2\" d=\"M14,8 C14,10.41 12.43,10.87 10.56,11.25 C9.09,11.54 7,12.06 7,15 L7,5\"/></svg>",
            "git-fork": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.2\" cx=\"5.79\" cy=\"2.79\" r=\"1.79\"/><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.2\" cx=\"14.19\" cy=\"2.79\" r=\"1.79\"/><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.2\" cx=\"10.03\" cy=\"16.79\" r=\"1.79\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"2\" d=\"M5.79,4.57 L5.79,6.56 C5.79,9.19 10.03,10.22 10.03,13.31 C10.03,14.86 10.04,14.55 10.04,14.55 C10.04,14.37 10.04,14.86 10.04,13.31 C10.04,10.22 14.2,9.19 14.2,6.56 L14.2,4.57\"/></svg>",
            "github-alt": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10,0.5 C4.75,0.5 0.5,4.76 0.5,10.01 C0.5,15.26 4.75,19.51 10,19.51 C15.24,19.51 19.5,15.26 19.5,10.01 C19.5,4.76 15.25,0.5 10,0.5 L10,0.5 Z M12.81,17.69 C12.81,17.69 12.81,17.7 12.79,17.69 C12.47,17.75 12.35,17.59 12.35,17.36 L12.35,16.17 C12.35,15.45 12.09,14.92 11.58,14.56 C12.2,14.51 12.77,14.39 13.26,14.21 C13.87,13.98 14.36,13.69 14.74,13.29 C15.42,12.59 15.76,11.55 15.76,10.17 C15.76,9.25 15.45,8.46 14.83,7.8 C15.1,7.08 15.07,6.29 14.75,5.44 L14.51,5.42 C14.34,5.4 14.06,5.46 13.67,5.61 C13.25,5.78 12.79,6.03 12.31,6.35 C11.55,6.16 10.81,6.05 10.09,6.05 C9.36,6.05 8.61,6.15 7.88,6.35 C7.28,5.96 6.75,5.68 6.26,5.54 C6.07,5.47 5.9,5.44 5.78,5.44 L5.42,5.44 C5.06,6.29 5.04,7.08 5.32,7.8 C4.7,8.46 4.4,9.25 4.4,10.17 C4.4,11.94 4.96,13.16 6.08,13.84 C6.53,14.13 7.05,14.32 7.69,14.43 C8.03,14.5 8.32,14.54 8.55,14.55 C8.07,14.89 7.82,15.42 7.82,16.16 L7.82,17.51 C7.8,17.69 7.7,17.8 7.51,17.8 C4.21,16.74 1.82,13.65 1.82,10.01 C1.82,5.5 5.49,1.83 10,1.83 C14.5,1.83 18.17,5.5 18.17,10.01 C18.18,13.53 15.94,16.54 12.81,17.69 L12.81,17.69 Z\"/></svg>",
            "github": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10,1 C5.03,1 1,5.03 1,10 C1,13.98 3.58,17.35 7.16,18.54 C7.61,18.62 7.77,18.34 7.77,18.11 C7.77,17.9 7.76,17.33 7.76,16.58 C5.26,17.12 4.73,15.37 4.73,15.37 C4.32,14.33 3.73,14.05 3.73,14.05 C2.91,13.5 3.79,13.5 3.79,13.5 C4.69,13.56 5.17,14.43 5.17,14.43 C5.97,15.8 7.28,15.41 7.79,15.18 C7.87,14.6 8.1,14.2 8.36,13.98 C6.36,13.75 4.26,12.98 4.26,9.53 C4.26,8.55 4.61,7.74 5.19,7.11 C5.1,6.88 4.79,5.97 5.28,4.73 C5.28,4.73 6.04,4.49 7.75,5.65 C8.47,5.45 9.24,5.35 10,5.35 C10.76,5.35 11.53,5.45 12.25,5.65 C13.97,4.48 14.72,4.73 14.72,4.73 C15.21,5.97 14.9,6.88 14.81,7.11 C15.39,7.74 15.73,8.54 15.73,9.53 C15.73,12.99 13.63,13.75 11.62,13.97 C11.94,14.25 12.23,14.8 12.23,15.64 C12.23,16.84 12.22,17.81 12.22,18.11 C12.22,18.35 12.38,18.63 12.84,18.54 C16.42,17.35 19,13.98 19,10 C19,5.03 14.97,1 10,1 L10,1 Z\"/></svg>",
            "gitter": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><rect x=\"3.5\" y=\"1\" width=\"1.531\" height=\"11.471\"/><rect x=\"7.324\" y=\"4.059\" width=\"1.529\" height=\"15.294\"/><rect x=\"11.148\" y=\"4.059\" width=\"1.527\" height=\"15.294\"/><rect x=\"14.971\" y=\"4.059\" width=\"1.529\" height=\"8.412\"/></svg>",
            "google": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M17.86,9.09 C18.46,12.12 17.14,16.05 13.81,17.56 C9.45,19.53 4.13,17.68 2.47,12.87 C0.68,7.68 4.22,2.42 9.5,2.03 C11.57,1.88 13.42,2.37 15.05,3.65 C15.22,3.78 15.37,3.93 15.61,4.14 C14.9,4.81 14.23,5.45 13.5,6.14 C12.27,5.08 10.84,4.72 9.28,4.98 C8.12,5.17 7.16,5.76 6.37,6.63 C4.88,8.27 4.62,10.86 5.76,12.82 C6.95,14.87 9.17,15.8 11.57,15.25 C13.27,14.87 14.76,13.33 14.89,11.75 L10.51,11.75 L10.51,9.09 L17.86,9.09 L17.86,9.09 Z\"/></svg>",
            "grid": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><rect x=\"2\" y=\"2\" width=\"3\" height=\"3\"/><rect x=\"8\" y=\"2\" width=\"3\" height=\"3\"/><rect x=\"14\" y=\"2\" width=\"3\" height=\"3\"/><rect x=\"2\" y=\"8\" width=\"3\" height=\"3\"/><rect x=\"8\" y=\"8\" width=\"3\" height=\"3\"/><rect x=\"14\" y=\"8\" width=\"3\" height=\"3\"/><rect x=\"2\" y=\"14\" width=\"3\" height=\"3\"/><rect x=\"8\" y=\"14\" width=\"3\" height=\"3\"/><rect x=\"14\" y=\"14\" width=\"3\" height=\"3\"/></svg>",
            "happy": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"13\" cy=\"7\" r=\"1\"/><circle cx=\"7\" cy=\"7\" r=\"1\"/><circle fill=\"none\" stroke=\"#000\" cx=\"10\" cy=\"10\" r=\"8.5\"/><path fill=\"none\" stroke=\"#000\" d=\"M14.6,11.4 C13.9,13.3 12.1,14.5 10,14.5 C7.9,14.5 6.1,13.3 5.4,11.4\"/></svg>",
            "hashtag": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M15.431,8 L15.661,7 L12.911,7 L13.831,3 L12.901,3 L11.98,7 L9.29,7 L10.21,3 L9.281,3 L8.361,7 L5.23,7 L5,8 L8.13,8 L7.21,12 L4.23,12 L4,13 L6.98,13 L6.061,17 L6.991,17 L7.911,13 L10.601,13 L9.681,17 L10.611,17 L11.531,13 L14.431,13 L14.661,12 L11.76,12 L12.681,8 L15.431,8 Z M10.831,12 L8.141,12 L9.061,8 L11.75,8 L10.831,12 Z\"/></svg>",
            "heart": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.03\" d=\"M10,4 C10,4 8.1,2 5.74,2 C3.38,2 1,3.55 1,6.73 C1,8.84 2.67,10.44 2.67,10.44 L10,18 L17.33,10.44 C17.33,10.44 19,8.84 19,6.73 C19,3.55 16.62,2 14.26,2 C11.9,2 10,4 10,4 L10,4 Z\"/></svg>",
            "history": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline fill=\"#000\" points=\"1 2 2 2 2 6 6 6 6 7 1 7 1 2\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M2.1,6.548 C3.391,3.29 6.746,1 10.5,1 C15.5,1 19.5,5 19.5,10 C19.5,15 15.5,19 10.5,19 C5.5,19 1.5,15 1.5,10\"/><rect x=\"9\" y=\"4\" width=\"1\" height=\"7\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M13.018,14.197 L9.445,10.625\"/></svg>",
            "home": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polygon points=\"18.65 11.35 10 2.71 1.35 11.35 0.65 10.65 10 1.29 19.35 10.65\"/><polygon points=\"15 4 18 4 18 7 17 7 17 5 15 5\"/><polygon points=\"3 11 4 11 4 18 7 18 7 12 12 12 12 18 16 18 16 11 17 11 17 19 11 19 11 13 8 13 8 19 3 19\"/></svg>",
            "image": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"16.1\" cy=\"6.1\" r=\"1.1\"/><rect fill=\"none\" stroke=\"#000\" x=\".5\" y=\"2.5\" width=\"19\" height=\"15\"/><polyline fill=\"none\" stroke=\"#000\" stroke-width=\"1.01\" points=\"4,13 8,9 13,14\"/><polyline fill=\"none\" stroke=\"#000\" stroke-width=\"1.01\" points=\"11,12 12.5,10.5 16,14\"/></svg>",
            "info": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M12.13,11.59 C11.97,12.84 10.35,14.12 9.1,14.16 C6.17,14.2 9.89,9.46 8.74,8.37 C9.3,8.16 10.62,7.83 10.62,8.81 C10.62,9.63 10.12,10.55 9.88,11.32 C8.66,15.16 12.13,11.15 12.14,11.18 C12.16,11.21 12.16,11.35 12.13,11.59 C12.08,11.95 12.16,11.35 12.13,11.59 L12.13,11.59 Z M11.56,5.67 C11.56,6.67 9.36,7.15 9.36,6.03 C9.36,5 11.56,4.54 11.56,5.67 L11.56,5.67 Z\"/><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" cx=\"10\" cy=\"10\" r=\"9\"/></svg>",
            "instagram": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M13.55,1H6.46C3.45,1,1,3.44,1,6.44v7.12c0,3,2.45,5.44,5.46,5.44h7.08c3.02,0,5.46-2.44,5.46-5.44V6.44 C19.01,3.44,16.56,1,13.55,1z M17.5,14c0,1.93-1.57,3.5-3.5,3.5H6c-1.93,0-3.5-1.57-3.5-3.5V6c0-1.93,1.57-3.5,3.5-3.5h8 c1.93,0,3.5,1.57,3.5,3.5V14z\"/><circle cx=\"14.87\" cy=\"5.26\" r=\"1.09\"/><path d=\"M10.03,5.45c-2.55,0-4.63,2.06-4.63,4.6c0,2.55,2.07,4.61,4.63,4.61c2.56,0,4.63-2.061,4.63-4.61 C14.65,7.51,12.58,5.45,10.03,5.45L10.03,5.45L10.03,5.45z M10.08,13c-1.66,0-3-1.34-3-2.99c0-1.65,1.34-2.99,3-2.99s3,1.34,3,2.99 C13.08,11.66,11.74,13,10.08,13L10.08,13L10.08,13z\"/></svg>",
            "italic": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M12.63,5.48 L10.15,14.52 C10,15.08 10.37,15.25 11.92,15.3 L11.72,16 L6,16 L6.2,15.31 C7.78,15.26 8.19,15.09 8.34,14.53 L10.82,5.49 C10.97,4.92 10.63,4.76 9.09,4.71 L9.28,4 L15,4 L14.81,4.69 C13.23,4.75 12.78,4.91 12.63,5.48 L12.63,5.48 Z\"/></svg>",
            "joomla": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M7.8,13.4l1.7-1.7L5.9,8c-0.6-0.5-0.6-1.5,0-2c0.6-0.6,1.4-0.6,2,0l1.7-1.7c-1-1-2.3-1.3-3.6-1C5.8,2.2,4.8,1.4,3.7,1.4 c-1.3,0-2.3,1-2.3,2.3c0,1.1,0.8,2,1.8,2.3c-0.4,1.3-0.1,2.8,1,3.8L7.8,13.4L7.8,13.4z\"/><path d=\"M10.2,4.3c1-1,2.5-1.4,3.8-1c0.2-1.1,1.1-2,2.3-2c1.3,0,2.3,1,2.3,2.3c0,1.2-0.9,2.2-2,2.3c0.4,1.3,0,2.8-1,3.8L13.9,8 c0.6-0.5,0.6-1.5,0-2c-0.5-0.6-1.5-0.6-2,0L8.2,9.7L6.5,8\"/><path d=\"M14.1,16.8c-1.3,0.4-2.8,0.1-3.8-1l1.7-1.7c0.6,0.6,1.5,0.6,2,0c0.5-0.6,0.6-1.5,0-2l-3.7-3.7L12,6.7l3.7,3.7 c1,1,1.3,2.4,1,3.6c1.1,0.2,2,1.1,2,2.3c0,1.3-1,2.3-2.3,2.3C15.2,18.6,14.3,17.8,14.1,16.8\"/><path d=\"M13.2,12.2l-3.7,3.7c-1,1-2.4,1.3-3.6,1c-0.2,1-1.2,1.8-2.2,1.8c-1.3,0-2.3-1-2.3-2.3c0-1.1,0.8-2,1.8-2.3 c-0.3-1.3,0-2.7,1-3.7l1.7,1.7c-0.6,0.6-0.6,1.5,0,2c0.6,0.6,1.4,0.6,2,0l3.7-3.7\"/></svg>",
            "laptop": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><rect y=\"16\" width=\"20\" height=\"1\"/><rect fill=\"none\" stroke=\"#000\" x=\"2.5\" y=\"4.5\" width=\"15\" height=\"10\"/></svg>",
            "lifesaver": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10,0.5 C4.76,0.5 0.5,4.76 0.5,10 C0.5,15.24 4.76,19.5 10,19.5 C15.24,19.5 19.5,15.24 19.5,10 C19.5,4.76 15.24,0.5 10,0.5 L10,0.5 Z M10,1.5 C11.49,1.5 12.89,1.88 14.11,2.56 L11.85,4.82 C11.27,4.61 10.65,4.5 10,4.5 C9.21,4.5 8.47,4.67 7.79,4.96 L5.58,2.75 C6.87,1.95 8.38,1.5 10,1.5 L10,1.5 Z M4.96,7.8 C4.67,8.48 4.5,9.21 4.5,10 C4.5,10.65 4.61,11.27 4.83,11.85 L2.56,14.11 C1.88,12.89 1.5,11.49 1.5,10 C1.5,8.38 1.95,6.87 2.75,5.58 L4.96,7.79 L4.96,7.8 L4.96,7.8 Z M10,18.5 C8.25,18.5 6.62,17.97 5.27,17.06 L7.46,14.87 C8.22,15.27 9.08,15.5 10,15.5 C10.79,15.5 11.53,15.33 12.21,15.04 L14.42,17.25 C13.13,18.05 11.62,18.5 10,18.5 L10,18.5 Z M10,14.5 C7.52,14.5 5.5,12.48 5.5,10 C5.5,7.52 7.52,5.5 10,5.5 C12.48,5.5 14.5,7.52 14.5,10 C14.5,12.48 12.48,14.5 10,14.5 L10,14.5 Z M15.04,12.21 C15.33,11.53 15.5,10.79 15.5,10 C15.5,9.08 15.27,8.22 14.87,7.46 L17.06,5.27 C17.97,6.62 18.5,8.25 18.5,10 C18.5,11.62 18.05,13.13 17.25,14.42 L15.04,12.21 L15.04,12.21 Z\"/></svg>",
            "link": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M10.625,12.375 L7.525,15.475 C6.825,16.175 5.925,16.175 5.225,15.475 L4.525,14.775 C3.825,14.074 3.825,13.175 4.525,12.475 L7.625,9.375\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M9.325,7.375 L12.425,4.275 C13.125,3.575 14.025,3.575 14.724,4.275 L15.425,4.975 C16.125,5.675 16.125,6.575 15.425,7.275 L12.325,10.375\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M7.925,11.875 L11.925,7.975\"/></svg>",
            "linkedin": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M5.77,17.89 L5.77,7.17 L2.21,7.17 L2.21,17.89 L5.77,17.89 L5.77,17.89 Z M3.99,5.71 C5.23,5.71 6.01,4.89 6.01,3.86 C5.99,2.8 5.24,2 4.02,2 C2.8,2 2,2.8 2,3.85 C2,4.88 2.77,5.7 3.97,5.7 L3.99,5.7 L3.99,5.71 L3.99,5.71 Z\"/><path d=\"M7.75,17.89 L11.31,17.89 L11.31,11.9 C11.31,11.58 11.33,11.26 11.43,11.03 C11.69,10.39 12.27,9.73 13.26,9.73 C14.55,9.73 15.06,10.71 15.06,12.15 L15.06,17.89 L18.62,17.89 L18.62,11.74 C18.62,8.45 16.86,6.92 14.52,6.92 C12.6,6.92 11.75,7.99 11.28,8.73 L11.3,8.73 L11.3,7.17 L7.75,7.17 C7.79,8.17 7.75,17.89 7.75,17.89 L7.75,17.89 L7.75,17.89 Z\"/></svg>",
            "list": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><rect x=\"6\" y=\"4\" width=\"12\" height=\"1\"/><rect x=\"6\" y=\"9\" width=\"12\" height=\"1\"/><rect x=\"6\" y=\"14\" width=\"12\" height=\"1\"/><rect x=\"2\" y=\"4\" width=\"2\" height=\"1\"/><rect x=\"2\" y=\"9\" width=\"2\" height=\"1\"/><rect x=\"2\" y=\"14\" width=\"2\" height=\"1\"/></svg>",
            "location": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.01\" d=\"M10,0.5 C6.41,0.5 3.5,3.39 3.5,6.98 C3.5,11.83 10,19 10,19 C10,19 16.5,11.83 16.5,6.98 C16.5,3.39 13.59,0.5 10,0.5 L10,0.5 Z\"/><circle fill=\"none\" stroke=\"#000\" cx=\"10\" cy=\"6.8\" r=\"2.3\"/></svg>",
            "lock": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><rect fill=\"none\" stroke=\"#000\" height=\"10\" width=\"13\" y=\"8.5\" x=\"3.5\"/><path fill=\"none\" stroke=\"#000\" d=\"M6.5,8 L6.5,4.88 C6.5,3.01 8.07,1.5 10,1.5 C11.93,1.5 13.5,3.01 13.5,4.88 L13.5,8\"/></svg>",
            "mail": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline fill=\"none\" stroke=\"#000\" points=\"1.4,6.5 10,11 18.6,6.5\"/><path d=\"M 1,4 1,16 19,16 19,4 1,4 Z M 18,15 2,15 2,5 18,5 18,15 Z\"/></svg>",
            "menu": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><rect x=\"2\" y=\"4\" width=\"16\" height=\"1\"/><rect x=\"2\" y=\"9\" width=\"16\" height=\"1\"/><rect x=\"2\" y=\"14\" width=\"16\" height=\"1\"/></svg>",
            "microphone": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><line fill=\"none\" stroke=\"#000\" x1=\"10\" x2=\"10\" y1=\"16.44\" y2=\"18.5\"/><line fill=\"none\" stroke=\"#000\" x1=\"7\" x2=\"13\" y1=\"18.5\" y2=\"18.5\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M13.5 4.89v5.87a3.5 3.5 0 0 1-7 0V4.89a3.5 3.5 0 0 1 7 0z\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M15.5 10.36V11a5.5 5.5 0 0 1-11 0v-.6\"/></svg>",
            "minus-circle": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" cx=\"9.5\" cy=\"9.5\" r=\"9\"/><line fill=\"none\" stroke=\"#000\" x1=\"5\" y1=\"9.5\" x2=\"14\" y2=\"9.5\"/></svg>",
            "minus": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"1\" width=\"18\" y=\"9\" x=\"1\"/></svg>",
            "more-vertical": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"10\" cy=\"3\" r=\"2\"/><circle cx=\"10\" cy=\"10\" r=\"2\"/><circle cx=\"10\" cy=\"17\" r=\"2\"/></svg>",
            "more": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"3\" cy=\"10\" r=\"2\"/><circle cx=\"10\" cy=\"10\" r=\"2\"/><circle cx=\"17\" cy=\"10\" r=\"2\"/></svg>",
            "move": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polygon points=\"4,5 1,5 1,9 2,9 2,6 4,6\"/><polygon points=\"1,16 2,16 2,18 4,18 4,19 1,19\"/><polygon points=\"14,16 14,19 11,19 11,18 13,18 13,16\"/><rect fill=\"none\" stroke=\"#000\" x=\"5.5\" y=\"1.5\" width=\"13\" height=\"13\"/><rect x=\"1\" y=\"11\" width=\"1\" height=\"3\"/><rect x=\"6\" y=\"18\" width=\"3\" height=\"1\"/></svg>",
            "nut": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polygon fill=\"none\" stroke=\"#000\" points=\"2.5,5.7 10,1.3 17.5,5.7 17.5,14.3 10,18.7 2.5,14.3\"/><circle fill=\"none\" stroke=\"#000\" cx=\"10\" cy=\"10\" r=\"3.5\"/></svg>",
            "pagekit": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polygon points=\"3,1 17,1 17,16 10,16 10,13 14,13 14,4 6,4 6,16 10,16 10,19 3,19\"/></svg>",
            "paint-bucket": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10.21,1 L0,11.21 L8.1,19.31 L18.31,9.1 L10.21,1 L10.21,1 Z M16.89,9.1 L15,11 L1.7,11 L10.21,2.42 L16.89,9.1 Z\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M6.42,2.33 L11.7,7.61\"/><path d=\"M18.49,12 C18.49,12 20,14.06 20,15.36 C20,16.28 19.24,17 18.49,17 L18.49,17 C17.74,17 17,16.28 17,15.36 C17,14.06 18.49,12 18.49,12 L18.49,12 Z\"/></svg>",
            "pencil": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" stroke=\"#000\" d=\"M17.25,6.01 L7.12,16.1 L3.82,17.2 L5.02,13.9 L15.12,3.88 C15.71,3.29 16.66,3.29 17.25,3.88 C17.83,4.47 17.83,5.42 17.25,6.01 L17.25,6.01 Z\"/><path fill=\"none\" stroke=\"#000\" d=\"M15.98,7.268 L13.851,5.148\"/></svg>",
            "phone-landscape": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" stroke=\"#000\" d=\"M17,5.5 C17.8,5.5 18.5,6.2 18.5,7 L18.5,14 C18.5,14.8 17.8,15.5 17,15.5 L3,15.5 C2.2,15.5 1.5,14.8 1.5,14 L1.5,7 C1.5,6.2 2.2,5.5 3,5.5 L17,5.5 L17,5.5 L17,5.5 Z\"/><circle cx=\"3.8\" cy=\"10.5\" r=\".8\"/></svg>",
            "phone": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" stroke=\"#000\" d=\"M15.5,17 C15.5,17.8 14.8,18.5 14,18.5 L7,18.5 C6.2,18.5 5.5,17.8 5.5,17 L5.5,3 C5.5,2.2 6.2,1.5 7,1.5 L14,1.5 C14.8,1.5 15.5,2.2 15.5,3 L15.5,17 L15.5,17 L15.5,17 Z\"/><circle cx=\"10.5\" cy=\"16.5\" r=\".8\"/></svg>",
            "pinterest": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10.21,1 C5.5,1 3,4.16 3,7.61 C3,9.21 3.85,11.2 5.22,11.84 C5.43,11.94 5.54,11.89 5.58,11.69 C5.62,11.54 5.8,10.8 5.88,10.45 C5.91,10.34 5.89,10.24 5.8,10.14 C5.36,9.59 5,8.58 5,7.65 C5,5.24 6.82,2.91 9.93,2.91 C12.61,2.91 14.49,4.74 14.49,7.35 C14.49,10.3 13,12.35 11.06,12.35 C9.99,12.35 9.19,11.47 9.44,10.38 C9.75,9.08 10.35,7.68 10.35,6.75 C10.35,5.91 9.9,5.21 8.97,5.21 C7.87,5.21 6.99,6.34 6.99,7.86 C6.99,8.83 7.32,9.48 7.32,9.48 C7.32,9.48 6.24,14.06 6.04,14.91 C5.7,16.35 6.08,18.7 6.12,18.9 C6.14,19.01 6.26,19.05 6.33,18.95 C6.44,18.81 7.74,16.85 8.11,15.44 C8.24,14.93 8.79,12.84 8.79,12.84 C9.15,13.52 10.19,14.09 11.29,14.09 C14.58,14.09 16.96,11.06 16.96,7.3 C16.94,3.7 14,1 10.21,1\"/></svg>",
            "play-circle": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polygon fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" points=\"8.5 7 13.5 10 8.5 13\"/><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" cx=\"10\" cy=\"10\" r=\"9\"/></svg>",
            "play": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polygon fill=\"none\" stroke=\"#000\" points=\"6.5,5 14.5,10 6.5,15\"/></svg>",
            "plus-circle": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" cx=\"9.5\" cy=\"9.5\" r=\"9\"/><line fill=\"none\" stroke=\"#000\" x1=\"9.5\" y1=\"5\" x2=\"9.5\" y2=\"14\"/><line fill=\"none\" stroke=\"#000\" x1=\"5\" y1=\"9.5\" x2=\"14\" y2=\"9.5\"/></svg>",
            "plus": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><rect x=\"9\" y=\"1\" width=\"1\" height=\"17\"/><rect x=\"1\" y=\"9\" width=\"17\" height=\"1\"/></svg>",
            "print": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline fill=\"none\" stroke=\"#000\" points=\"4.5 13.5 1.5 13.5 1.5 6.5 18.5 6.5 18.5 13.5 15.5 13.5\"/><polyline fill=\"none\" stroke=\"#000\" points=\"15.5 6.5 15.5 2.5 4.5 2.5 4.5 6.5\"/><rect fill=\"none\" stroke=\"#000\" width=\"11\" height=\"6\" x=\"4.5\" y=\"11.5\"/><rect width=\"8\" height=\"1\" x=\"6\" y=\"13\"/><rect width=\"8\" height=\"1\" x=\"6\" y=\"15\"/></svg>",
            "pull": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polygon points=\"6.85,8 9.5,10.6 12.15,8 12.85,8.7 9.5,12 6.15,8.7\"/><line fill=\"none\" stroke=\"#000\" x1=\"9.5\" y1=\"11\" x2=\"9.5\" y2=\"2\"/><polyline fill=\"none\" stroke=\"#000\" points=\"6,5.5 3.5,5.5 3.5,18.5 15.5,18.5 15.5,5.5 13,5.5\"/></svg>",
            "push": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polygon points=\"12.15,4 9.5,1.4 6.85,4 6.15,3.3 9.5,0 12.85,3.3\"/><line fill=\"none\" stroke=\"#000\" x1=\"9.5\" y1=\"10\" x2=\"9.5\" y2=\"1\"/><polyline fill=\"none\" stroke=\"#000\" points=\"6 5.5 3.5 5.5 3.5 18.5 15.5 18.5 15.5 5.5 13 5.5\"/></svg>",
            "question": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" cx=\"10\" cy=\"10\" r=\"9\"/><circle cx=\"10.44\" cy=\"14.42\" r=\"1.05\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.2\" d=\"M8.17,7.79 C8.17,4.75 12.72,4.73 12.72,7.72 C12.72,8.67 11.81,9.15 11.23,9.75 C10.75,10.24 10.51,10.73 10.45,11.4 C10.44,11.53 10.43,11.64 10.43,11.75\"/></svg>",
            "quote-right": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M17.27,7.79 C17.27,9.45 16.97,10.43 15.99,12.02 C14.98,13.64 13,15.23 11.56,15.97 L11.1,15.08 C12.34,14.2 13.14,13.51 14.02,11.82 C14.27,11.34 14.41,10.92 14.49,10.54 C14.3,10.58 14.09,10.6 13.88,10.6 C12.06,10.6 10.59,9.12 10.59,7.3 C10.59,5.48 12.06,4 13.88,4 C15.39,4 16.67,5.02 17.05,6.42 C17.19,6.82 17.27,7.27 17.27,7.79 L17.27,7.79 Z\"/><path d=\"M8.68,7.79 C8.68,9.45 8.38,10.43 7.4,12.02 C6.39,13.64 4.41,15.23 2.97,15.97 L2.51,15.08 C3.75,14.2 4.55,13.51 5.43,11.82 C5.68,11.34 5.82,10.92 5.9,10.54 C5.71,10.58 5.5,10.6 5.29,10.6 C3.47,10.6 2,9.12 2,7.3 C2,5.48 3.47,4 5.29,4 C6.8,4 8.08,5.02 8.46,6.42 C8.6,6.82 8.68,7.27 8.68,7.79 L8.68,7.79 Z\"/></svg>",
            "receiver": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.01\" d=\"M6.189,13.611C8.134,15.525 11.097,18.239 13.867,18.257C16.47,18.275 18.2,16.241 18.2,16.241L14.509,12.551L11.539,13.639L6.189,8.29L7.313,5.355L3.76,1.8C3.76,1.8 1.732,3.537 1.7,6.092C1.667,8.809 4.347,11.738 6.189,13.611\"/></svg>",
            "reddit": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M19 9.05a2.56 2.56 0 0 0-2.56-2.56 2.59 2.59 0 0 0-1.88.82 10.63 10.63 0 0 0-4.14-1v-.08c.58-1.62 1.58-3.89 2.7-4.1.38-.08.77.12 1.19.57a1.15 1.15 0 0 0-.06.37 1.48 1.48 0 1 0 1.51-1.45 1.43 1.43 0 0 0-.76.19A2.29 2.29 0 0 0 12.91 1c-2.11.43-3.39 4.38-3.63 5.19 0 0 0 .11-.06.11a10.65 10.65 0 0 0-3.75 1A2.56 2.56 0 0 0 1 9.05a2.42 2.42 0 0 0 .72 1.76A5.18 5.18 0 0 0 1.24 13c0 3.66 3.92 6.64 8.73 6.64s8.74-3 8.74-6.64a5.23 5.23 0 0 0-.46-2.13A2.58 2.58 0 0 0 19 9.05zm-16.88 0a1.44 1.44 0 0 1 2.27-1.19 7.68 7.68 0 0 0-2.07 1.91 1.33 1.33 0 0 1-.2-.72zM10 18.4c-4.17 0-7.55-2.4-7.55-5.4S5.83 7.53 10 7.53 17.5 10 17.5 13s-3.38 5.4-7.5 5.4zm7.69-8.61a7.62 7.62 0 0 0-2.09-1.91 1.41 1.41 0 0 1 .84-.28 1.47 1.47 0 0 1 1.44 1.45 1.34 1.34 0 0 1-.21.72z\"/><path d=\"M6.69 12.58a1.39 1.39 0 1 1 1.39-1.39 1.38 1.38 0 0 1-1.38 1.39z\"/><path d=\"M14.26 11.2a1.39 1.39 0 1 1-1.39-1.39 1.39 1.39 0 0 1 1.39 1.39z\"/><path d=\"M13.09 14.88a.54.54 0 0 1-.09.77 5.3 5.3 0 0 1-3.26 1.19 5.61 5.61 0 0 1-3.4-1.22.55.55 0 1 1 .73-.83 4.09 4.09 0 0 0 5.25 0 .56.56 0 0 1 .77.09z\"/></svg>",
            "refresh": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M17.08,11.15 C17.09,11.31 17.1,11.47 17.1,11.64 C17.1,15.53 13.94,18.69 10.05,18.69 C6.16,18.68 3,15.53 3,11.63 C3,7.74 6.16,4.58 10.05,4.58 C10.9,4.58 11.71,4.73 12.46,5\"/><polyline fill=\"none\" stroke=\"#000\" points=\"9.9 2 12.79 4.89 9.79 7.9\"/></svg>",
            "reply": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M17.7,13.11 C16.12,10.02 13.84,7.85 11.02,6.61 C10.57,6.41 9.75,6.13 9,5.91 L9,2 L1,9 L9,16 L9,12.13 C10.78,12.47 12.5,13.19 14.09,14.25 C17.13,16.28 18.56,18.54 18.56,18.54 C18.56,18.54 18.81,15.28 17.7,13.11 L17.7,13.11 Z M14.82,13.53 C13.17,12.4 11.01,11.4 8,10.92 L8,13.63 L2.55,9 L8,4.25 L8,6.8 C8.3,6.86 9.16,7.02 10.37,7.49 C13.3,8.65 15.54,10.96 16.65,13.08 C16.97,13.7 17.48,14.86 17.68,16 C16.87,15.05 15.73,14.15 14.82,13.53 L14.82,13.53 Z\"/></svg>",
            "rss": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"3.12\" cy=\"16.8\" r=\"1.85\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M1.5,8.2 C1.78,8.18 2.06,8.16 2.35,8.16 C7.57,8.16 11.81,12.37 11.81,17.57 C11.81,17.89 11.79,18.19 11.76,18.5\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M1.5,2.52 C1.78,2.51 2.06,2.5 2.35,2.5 C10.72,2.5 17.5,9.24 17.5,17.57 C17.5,17.89 17.49,18.19 17.47,18.5\"/></svg>",
            "search": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" cx=\"9\" cy=\"9\" r=\"7\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M14,14 L18,18 L14,14 Z\"/></svg>",
            "server": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><rect x=\"3\" y=\"3\" width=\"1\" height=\"2\"/><rect x=\"5\" y=\"3\" width=\"1\" height=\"2\"/><rect x=\"7\" y=\"3\" width=\"1\" height=\"2\"/><rect x=\"16\" y=\"3\" width=\"1\" height=\"1\"/><rect x=\"16\" y=\"10\" width=\"1\" height=\"1\"/><circle fill=\"none\" stroke=\"#000\" cx=\"9.9\" cy=\"17.4\" r=\"1.4\"/><rect x=\"3\" y=\"10\" width=\"1\" height=\"2\"/><rect x=\"5\" y=\"10\" width=\"1\" height=\"2\"/><rect x=\"9.5\" y=\"14\" width=\"1\" height=\"2\"/><rect x=\"3\" y=\"17\" width=\"6\" height=\"1\"/><rect x=\"11\" y=\"17\" width=\"6\" height=\"1\"/><rect fill=\"none\" stroke=\"#000\" x=\"1.5\" y=\"1.5\" width=\"17\" height=\"5\"/><rect fill=\"none\" stroke=\"#000\" x=\"1.5\" y=\"8.5\" width=\"17\" height=\"5\"/></svg>",
            "settings": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><ellipse fill=\"none\" stroke=\"#000\" cx=\"6.11\" cy=\"3.55\" rx=\"2.11\" ry=\"2.15\"/><ellipse fill=\"none\" stroke=\"#000\" cx=\"6.11\" cy=\"15.55\" rx=\"2.11\" ry=\"2.15\"/><circle fill=\"none\" stroke=\"#000\" cx=\"13.15\" cy=\"9.55\" r=\"2.15\"/><rect x=\"1\" y=\"3\" width=\"3\" height=\"1\"/><rect x=\"10\" y=\"3\" width=\"8\" height=\"1\"/><rect x=\"1\" y=\"9\" width=\"8\" height=\"1\"/><rect x=\"15\" y=\"9\" width=\"3\" height=\"1\"/><rect x=\"1\" y=\"15\" width=\"3\" height=\"1\"/><rect x=\"10\" y=\"15\" width=\"8\" height=\"1\"/></svg>",
            "shrink": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polygon points=\"11 4 12 4 12 8 16 8 16 9 11 9\"/><polygon points=\"4 11 9 11 9 16 8 16 8 12 4 12\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M12,8 L18,2\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M2,18 L8,12\"/></svg>",
            "sign-in": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polygon points=\"7 2 17 2 17 17 7 17 7 16 16 16 16 3 7 3\"/><polygon points=\"9.1 13.4 8.5 12.8 11.28 10 4 10 4 9 11.28 9 8.5 6.2 9.1 5.62 13 9.5\"/></svg>",
            "sign-out": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polygon points=\"13.1 13.4 12.5 12.8 15.28 10 8 10 8 9 15.28 9 12.5 6.2 13.1 5.62 17 9.5\"/><polygon points=\"13 2 3 2 3 17 13 17 13 16 4 16 4 3 13 3\"/></svg>",
            "social": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><line fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" x1=\"13.4\" y1=\"14\" x2=\"6.3\" y2=\"10.7\"/><line fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" x1=\"13.5\" y1=\"5.5\" x2=\"6.5\" y2=\"8.8\"/><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" cx=\"15.5\" cy=\"4.6\" r=\"2.3\"/><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" cx=\"15.5\" cy=\"14.8\" r=\"2.3\"/><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" cx=\"4.5\" cy=\"9.8\" r=\"2.3\"/></svg>",
            "soundcloud": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M17.2,9.4c-0.4,0-0.8,0.1-1.101,0.2c-0.199-2.5-2.399-4.5-5-4.5c-0.6,0-1.2,0.1-1.7,0.3C9.2,5.5,9.1,5.6,9.1,5.6V15h8 c1.601,0,2.801-1.2,2.801-2.8C20,10.7,18.7,9.4,17.2,9.4L17.2,9.4z\"/><rect x=\"6\" y=\"6.5\" width=\"1.5\" height=\"8.5\"/><rect x=\"3\" y=\"8\" width=\"1.5\" height=\"7\"/><rect y=\"10\" width=\"1.5\" height=\"5\"/></svg>",
            "star": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polygon fill=\"none\" stroke=\"#000\" stroke-width=\"1.01\" points=\"10 2 12.63 7.27 18.5 8.12 14.25 12.22 15.25 18 10 15.27 4.75 18 5.75 12.22 1.5 8.12 7.37 7.27\"/></svg>",
            "strikethrough": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M6,13.02 L6.65,13.02 C7.64,15.16 8.86,16.12 10.41,16.12 C12.22,16.12 12.92,14.93 12.92,13.89 C12.92,12.55 11.99,12.03 9.74,11.23 C8.05,10.64 6.23,10.11 6.23,7.83 C6.23,5.5 8.09,4.09 10.4,4.09 C11.44,4.09 12.13,4.31 12.72,4.54 L13.33,4 L13.81,4 L13.81,7.59 L13.16,7.59 C12.55,5.88 11.52,4.89 10.07,4.89 C8.84,4.89 7.89,5.69 7.89,7.03 C7.89,8.29 8.89,8.78 10.88,9.45 C12.57,10.03 14.38,10.6 14.38,12.91 C14.38,14.75 13.27,16.93 10.18,16.93 C9.18,16.93 8.17,16.69 7.46,16.39 L6.52,17 L6,17 L6,13.02 L6,13.02 Z\"/><rect x=\"3\" y=\"10\" width=\"15\" height=\"1\"/></svg>",
            "table": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><rect x=\"1\" y=\"3\" width=\"18\" height=\"1\"/><rect x=\"1\" y=\"7\" width=\"18\" height=\"1\"/><rect x=\"1\" y=\"11\" width=\"18\" height=\"1\"/><rect x=\"1\" y=\"15\" width=\"18\" height=\"1\"/></svg>",
            "tablet-landscape": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" stroke=\"#000\" d=\"M1.5,5 C1.5,4.2 2.2,3.5 3,3.5 L17,3.5 C17.8,3.5 18.5,4.2 18.5,5 L18.5,16 C18.5,16.8 17.8,17.5 17,17.5 L3,17.5 C2.2,17.5 1.5,16.8 1.5,16 L1.5,5 L1.5,5 L1.5,5 Z\"/><circle cx=\"3.7\" cy=\"10.5\" r=\".8\"/></svg>",
            "tablet": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" stroke=\"#000\" d=\"M5,18.5 C4.2,18.5 3.5,17.8 3.5,17 L3.5,3 C3.5,2.2 4.2,1.5 5,1.5 L16,1.5 C16.8,1.5 17.5,2.2 17.5,3 L17.5,17 C17.5,17.8 16.8,18.5 16,18.5 L5,18.5 L5,18.5 L5,18.5 Z\"/><circle cx=\"10.5\" cy=\"16.3\" r=\".8\"/></svg>",
            "tag": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M17.5,3.71 L17.5,7.72 C17.5,7.96 17.4,8.2 17.21,8.39 L8.39,17.2 C7.99,17.6 7.33,17.6 6.93,17.2 L2.8,13.07 C2.4,12.67 2.4,12.01 2.8,11.61 L11.61,2.8 C11.81,2.6 12.08,2.5 12.34,2.5 L16.19,2.5 C16.52,2.5 16.86,2.63 17.11,2.88 C17.35,3.11 17.48,3.4 17.5,3.71 L17.5,3.71 Z\"/><circle cx=\"14\" cy=\"6\" r=\"1\"/></svg>",
            "thumbnails": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><rect fill=\"none\" stroke=\"#000\" x=\"3.5\" y=\"3.5\" width=\"5\" height=\"5\"/><rect fill=\"none\" stroke=\"#000\" x=\"11.5\" y=\"3.5\" width=\"5\" height=\"5\"/><rect fill=\"none\" stroke=\"#000\" x=\"11.5\" y=\"11.5\" width=\"5\" height=\"5\"/><rect fill=\"none\" stroke=\"#000\" x=\"3.5\" y=\"11.5\" width=\"5\" height=\"5\"/></svg>",
            "tiktok": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M17.24,6V8.82a6.79,6.79,0,0,1-4-1.28v5.81A5.26,5.26,0,1,1,8,8.1a4.36,4.36,0,0,1,.72.05v2.9A2.57,2.57,0,0,0,7.64,11a2.4,2.4,0,1,0,2.77,2.38V2h2.86a4,4,0,0,0,1.84,3.38A4,4,0,0,0,17.24,6Z\"/></svg>",
            "trash": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline fill=\"none\" stroke=\"#000\" points=\"6.5 3 6.5 1.5 13.5 1.5 13.5 3\"/><polyline fill=\"none\" stroke=\"#000\" points=\"4.5 4 4.5 18.5 15.5 18.5 15.5 4\"/><rect x=\"8\" y=\"7\" width=\"1\" height=\"9\"/><rect x=\"11\" y=\"7\" width=\"1\" height=\"9\"/><rect x=\"2\" y=\"3\" width=\"16\" height=\"1\"/></svg>",
            "triangle-down": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polygon points=\"5 7 15 7 10 12\"/></svg>",
            "triangle-left": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polygon points=\"12 5 7 10 12 15\"/></svg>",
            "triangle-right": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polygon points=\"8 5 13 10 8 15\"/></svg>",
            "triangle-up": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polygon points=\"5 13 10 8 15 13\"/></svg>",
            "tripadvisor": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M19.021,7.866C19.256,6.862,20,5.854,20,5.854h-3.346C14.781,4.641,12.504,4,9.98,4C7.363,4,4.999,4.651,3.135,5.876H0\tc0,0,0.738,0.987,0.976,1.988c-0.611,0.837-0.973,1.852-0.973,2.964c0,2.763,2.249,5.009,5.011,5.009\tc1.576,0,2.976-0.737,3.901-1.879l1.063,1.599l1.075-1.615c0.475,0.611,1.1,1.111,1.838,1.451c1.213,0.547,2.574,0.612,3.825,0.15\tc2.589-0.963,3.913-3.852,2.964-6.439c-0.175-0.463-0.4-0.876-0.675-1.238H19.021z M16.38,14.594\tc-1.002,0.371-2.088,0.328-3.06-0.119c-0.688-0.317-1.252-0.817-1.657-1.438c-0.164-0.25-0.313-0.52-0.417-0.811\tc-0.124-0.328-0.186-0.668-0.217-1.014c-0.063-0.689,0.037-1.396,0.339-2.043c0.448-0.971,1.251-1.71,2.25-2.079\tc2.075-0.765,4.375,0.3,5.14,2.366c0.762,2.066-0.301,4.37-2.363,5.134L16.38,14.594L16.38,14.594z M8.322,13.066\tc-0.72,1.059-1.935,1.76-3.309,1.76c-2.207,0-4.001-1.797-4.001-3.996c0-2.203,1.795-4.002,4.001-4.002\tc2.204,0,3.999,1.8,3.999,4.002c0,0.137-0.024,0.261-0.04,0.396c-0.067,0.678-0.284,1.313-0.648,1.853v-0.013H8.322z M2.472,10.775\tc0,1.367,1.112,2.479,2.476,2.479c1.363,0,2.472-1.11,2.472-2.479c0-1.359-1.11-2.468-2.472-2.468\tC3.584,8.306,2.473,9.416,2.472,10.775L2.472,10.775z M12.514,10.775c0,1.367,1.104,2.479,2.471,2.479\tc1.363,0,2.474-1.108,2.474-2.479c0-1.359-1.11-2.468-2.474-2.468c-1.364,0-2.477,1.109-2.477,2.468H12.514z M3.324,10.775\tc0-0.893,0.726-1.618,1.614-1.618c0.889,0,1.625,0.727,1.625,1.618c0,0.898-0.725,1.627-1.625,1.627\tc-0.901,0-1.625-0.729-1.625-1.627H3.324z M13.354,10.775c0-0.893,0.726-1.618,1.627-1.618c0.886,0,1.61,0.727,1.61,1.618\tc0,0.898-0.726,1.627-1.626,1.627s-1.625-0.729-1.625-1.627H13.354z M9.977,4.875c1.798,0,3.425,0.324,4.849,0.968\tc-0.535,0.015-1.061,0.108-1.586,0.3c-1.264,0.463-2.264,1.388-2.815,2.604c-0.262,0.551-0.398,1.133-0.448,1.72\tC9.79,7.905,7.677,5.873,5.076,5.82C6.501,5.208,8.153,4.875,9.94,4.875H9.977z\"/></svg>",
            "tumblr": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M6.885,8.598c0,0,0,3.393,0,4.996c0,0.282,0,0.66,0.094,0.942c0.377,1.509,1.131,2.545,2.545,3.11 c1.319,0.472,2.356,0.472,3.676,0c0.565-0.188,1.132-0.659,1.132-0.659l-0.849-2.263c0,0-1.036,0.378-1.603,0.283 c-0.565-0.094-1.226-0.66-1.226-1.508c0-1.603,0-4.902,0-4.902h2.828V5.771h-2.828V2H8.205c0,0-0.094,0.66-0.188,0.942 C7.828,3.791,7.262,4.733,6.603,5.394C5.848,6.147,5,6.43,5,6.43v2.168H6.885z\"/></svg>",
            "tv": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><rect x=\"7\" y=\"16\" width=\"6\" height=\"1\"/><rect fill=\"none\" stroke=\"#000\" x=\".5\" y=\"3.5\" width=\"19\" height=\"11\"/></svg>",
            "twitch": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M5.23,1,2,4.23V15.85H5.88v3.23L9.1,15.85h2.59L17.5,10V1Zm11,8.4L13.62,12H11L8.78,14.24V12H5.88V2.29H16.21Z\"/><rect x=\"12.98\" y=\"4.55\" width=\"1.29\" height=\"3.88\"/><rect x=\"9.43\" y=\"4.55\" width=\"1.29\" height=\"3.88\"/></svg>",
            "twitter": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M19,4.74 C18.339,5.029 17.626,5.229 16.881,5.32 C17.644,4.86 18.227,4.139 18.503,3.28 C17.79,3.7 17.001,4.009 16.159,4.17 C15.485,3.45 14.526,3 13.464,3 C11.423,3 9.771,4.66 9.771,6.7 C9.771,6.99 9.804,7.269 9.868,7.539 C6.795,7.38 4.076,5.919 2.254,3.679 C1.936,4.219 1.754,4.86 1.754,5.539 C1.754,6.82 2.405,7.95 3.397,8.61 C2.79,8.589 2.22,8.429 1.723,8.149 L1.723,8.189 C1.723,9.978 2.997,11.478 4.686,11.82 C4.376,11.899 4.049,11.939 3.713,11.939 C3.475,11.939 3.245,11.919 3.018,11.88 C3.49,13.349 4.852,14.419 6.469,14.449 C5.205,15.429 3.612,16.019 1.882,16.019 C1.583,16.019 1.29,16.009 1,15.969 C2.635,17.019 4.576,17.629 6.662,17.629 C13.454,17.629 17.17,12 17.17,7.129 C17.17,6.969 17.166,6.809 17.157,6.649 C17.879,6.129 18.504,5.478 19,4.74\"/></svg>",
            "uikit": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polygon points=\"14.4,3.1 11.3,5.1 15,7.3 15,12.9 10,15.7 5,12.9 5,8.5 2,6.8 2,14.8 9.9,19.5 18,14.8 18,5.3\"/><polygon points=\"9.8,4.2 6.7,2.4 9.8,0.4 12.9,2.3\"/></svg>",
            "unlock": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><rect fill=\"none\" stroke=\"#000\" x=\"3.5\" y=\"8.5\" width=\"13\" height=\"10\"/><path fill=\"none\" stroke=\"#000\" d=\"M6.5,8.5 L6.5,4.9 C6.5,3 8.1,1.5 10,1.5 C11.9,1.5 13.5,3 13.5,4.9\"/></svg>",
            "upload": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline fill=\"none\" stroke=\"#000\" points=\"5 8 9.5 3.5 14 8\"/><rect x=\"3\" y=\"17\" width=\"13\" height=\"1\"/><line fill=\"none\" stroke=\"#000\" x1=\"9.5\" y1=\"15\" x2=\"9.5\" y2=\"4\"/></svg>",
            "user": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" cx=\"9.9\" cy=\"6.4\" r=\"4.4\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M1.5,19 C2.3,14.5 5.8,11.2 10,11.2 C14.2,11.2 17.7,14.6 18.5,19.2\"/></svg>",
            "users": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" cx=\"7.7\" cy=\"8.6\" r=\"3.5\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M1,18.1 C1.7,14.6 4.4,12.1 7.6,12.1 C10.9,12.1 13.7,14.8 14.3,18.3\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M11.4,4 C12.8,2.4 15.4,2.8 16.3,4.7 C17.2,6.6 15.7,8.9 13.6,8.9 C16.5,8.9 18.8,11.3 19.2,14.1\"/></svg>",
            "video-camera": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><polygon fill=\"none\" stroke=\"#000\" points=\"17.5 6.9 17.5 13.1 13.5 10.4 13.5 14.5 2.5 14.5 2.5 5.5 13.5 5.5 13.5 9.6 17.5 6.9\"/></svg>",
            "vimeo": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M2.065,7.59C1.84,7.367,1.654,7.082,1.468,6.838c-0.332-0.42-0.137-0.411,0.274-0.772c1.026-0.91,2.004-1.896,3.127-2.688 c1.017-0.713,2.365-1.173,3.286-0.039c0.849,1.045,0.869,2.629,1.084,3.891c0.215,1.309,0.421,2.648,0.88,3.901 c0.127,0.352,0.37,1.018,0.81,1.074c0.567,0.078,1.145-0.917,1.408-1.289c0.684-0.987,1.611-2.317,1.494-3.587 c-0.115-1.349-1.572-1.095-2.482-0.773c0.146-1.514,1.555-3.216,2.912-3.792c1.439-0.597,3.579-0.587,4.302,1.036 c0.772,1.759,0.078,3.802-0.763,5.396c-0.918,1.731-2.1,3.333-3.363,4.829c-1.114,1.329-2.432,2.787-4.093,3.422 c-1.897,0.723-3.021-0.686-3.667-2.318c-0.705-1.777-1.056-3.771-1.565-5.621C4.898,8.726,4.644,7.836,4.136,7.191 C3.473,6.358,2.72,7.141,2.065,7.59C1.977,7.502,2.115,7.551,2.065,7.59L2.065,7.59z\"/></svg>",
            "warning": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"10\" cy=\"14\" r=\"1\"/><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" cx=\"10\" cy=\"10\" r=\"9\"/><path d=\"M10.97,7.72 C10.85,9.54 10.56,11.29 10.56,11.29 C10.51,11.87 10.27,12 9.99,12 C9.69,12 9.49,11.87 9.43,11.29 C9.43,11.29 9.16,9.54 9.03,7.72 C8.96,6.54 9.03,6 9.03,6 C9.03,5.45 9.46,5.02 9.99,5 C10.53,5.01 10.97,5.44 10.97,6 C10.97,6 11.04,6.54 10.97,7.72 L10.97,7.72 Z\"/></svg>",
            "whatsapp": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M16.7,3.3c-1.8-1.8-4.1-2.8-6.7-2.8c-5.2,0-9.4,4.2-9.4,9.4c0,1.7,0.4,3.3,1.3,4.7l-1.3,4.9l5-1.3c1.4,0.8,2.9,1.2,4.5,1.2 l0,0l0,0c5.2,0,9.4-4.2,9.4-9.4C19.5,7.4,18.5,5,16.7,3.3 M10.1,17.7L10.1,17.7c-1.4,0-2.8-0.4-4-1.1l-0.3-0.2l-3,0.8l0.8-2.9 l-0.2-0.3c-0.8-1.2-1.2-2.7-1.2-4.2c0-4.3,3.5-7.8,7.8-7.8c2.1,0,4.1,0.8,5.5,2.3c1.5,1.5,2.3,3.4,2.3,5.5 C17.9,14.2,14.4,17.7,10.1,17.7 M14.4,11.9c-0.2-0.1-1.4-0.7-1.6-0.8c-0.2-0.1-0.4-0.1-0.5,0.1c-0.2,0.2-0.6,0.8-0.8,0.9 c-0.1,0.2-0.3,0.2-0.5,0.1c-0.2-0.1-1-0.4-1.9-1.2c-0.7-0.6-1.2-1.4-1.3-1.6c-0.1-0.2,0-0.4,0.1-0.5C8,8.8,8.1,8.7,8.2,8.5 c0.1-0.1,0.2-0.2,0.2-0.4c0.1-0.2,0-0.3,0-0.4C8.4,7.6,7.9,6.5,7.7,6C7.5,5.5,7.3,5.6,7.2,5.6c-0.1,0-0.3,0-0.4,0 c-0.2,0-0.4,0.1-0.6,0.3c-0.2,0.2-0.8,0.8-0.8,2c0,1.2,0.8,2.3,1,2.4c0.1,0.2,1.7,2.5,4,3.5c0.6,0.2,1,0.4,1.3,0.5 c0.6,0.2,1.1,0.2,1.5,0.1c0.5-0.1,1.4-0.6,1.6-1.1c0.2-0.5,0.2-1,0.1-1.1C14.8,12.1,14.6,12,14.4,11.9\"/></svg>",
            "wordpress": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10,0.5c-5.2,0-9.5,4.3-9.5,9.5s4.3,9.5,9.5,9.5c5.2,0,9.5-4.3,9.5-9.5S15.2,0.5,10,0.5L10,0.5L10,0.5z M15.6,3.9h-0.1 c-0.8,0-1.4,0.7-1.4,1.5c0,0.7,0.4,1.3,0.8,1.9c0.3,0.6,0.7,1.3,0.7,2.3c0,0.7-0.3,1.5-0.6,2.7L14.1,15l-3-8.9 c0.5,0,0.9-0.1,0.9-0.1C12.5,6,12.5,5.3,12,5.4c0,0-1.3,0.1-2.2,0.1C9,5.5,7.7,5.4,7.7,5.4C7.2,5.3,7.2,6,7.6,6c0,0,0.4,0.1,0.9,0.1 l1.3,3.5L8,15L5,6.1C5.5,6.1,5.9,6,5.9,6C6.4,6,6.3,5.3,5.9,5.4c0,0-1.3,0.1-2.2,0.1c-0.2,0-0.3,0-0.5,0c1.5-2.2,4-3.7,6.9-3.7 C12.2,1.7,14.1,2.6,15.6,3.9L15.6,3.9L15.6,3.9z M2.5,6.6l3.9,10.8c-2.7-1.3-4.6-4.2-4.6-7.4C1.8,8.8,2,7.6,2.5,6.6L2.5,6.6L2.5,6.6 z M10.2,10.7l2.5,6.9c0,0,0,0.1,0.1,0.1C11.9,18,11,18.2,10,18.2c-0.8,0-1.6-0.1-2.3-0.3L10.2,10.7L10.2,10.7L10.2,10.7z M14.2,17.1 l2.5-7.3c0.5-1.2,0.6-2.1,0.6-2.9c0-0.3,0-0.6-0.1-0.8c0.6,1.2,1,2.5,1,4C18.3,13,16.6,15.7,14.2,17.1L14.2,17.1L14.2,17.1z\"/></svg>",
            "world": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" stroke=\"#000\" d=\"M1,10.5 L19,10.5\"/><path fill=\"none\" stroke=\"#000\" d=\"M2.35,15.5 L17.65,15.5\"/><path fill=\"none\" stroke=\"#000\" d=\"M2.35,5.5 L17.523,5.5\"/><path fill=\"none\" stroke=\"#000\" d=\"M10,19.46 L9.98,19.46 C7.31,17.33 5.61,14.141 5.61,10.58 C5.61,7.02 7.33,3.83 10,1.7 C10.01,1.7 9.99,1.7 10,1.7 L10,1.7 C12.67,3.83 14.4,7.02 14.4,10.58 C14.4,14.141 12.67,17.33 10,19.46 L10,19.46 L10,19.46 L10,19.46 Z\"/><circle fill=\"none\" stroke=\"#000\" cx=\"10\" cy=\"10.5\" r=\"9\"/></svg>",
            "xing": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M4.4,4.56 C4.24,4.56 4.11,4.61 4.05,4.72 C3.98,4.83 3.99,4.97 4.07,5.12 L5.82,8.16 L5.82,8.17 L3.06,13.04 C2.99,13.18 2.99,13.33 3.06,13.44 C3.12,13.55 3.24,13.62 3.4,13.62 L6,13.62 C6.39,13.62 6.57,13.36 6.71,13.12 C6.71,13.12 9.41,8.35 9.51,8.16 C9.49,8.14 7.72,5.04 7.72,5.04 C7.58,4.81 7.39,4.56 6.99,4.56 L4.4,4.56 L4.4,4.56 Z\"/><path d=\"M15.3,1 C14.91,1 14.74,1.25 14.6,1.5 C14.6,1.5 9.01,11.42 8.82,11.74 C8.83,11.76 12.51,18.51 12.51,18.51 C12.64,18.74 12.84,19 13.23,19 L15.82,19 C15.98,19 16.1,18.94 16.16,18.83 C16.23,18.72 16.23,18.57 16.16,18.43 L12.5,11.74 L12.5,11.72 L18.25,1.56 C18.32,1.42 18.32,1.27 18.25,1.16 C18.21,1.06 18.08,1 17.93,1 L15.3,1 L15.3,1 Z\"/></svg>",
            "yelp": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M17.175,14.971c-0.112,0.77-1.686,2.767-2.406,3.054c-0.246,0.1-0.487,0.076-0.675-0.069\tc-0.122-0.096-2.446-3.859-2.446-3.859c-0.194-0.293-0.157-0.682,0.083-0.978c0.234-0.284,0.581-0.393,0.881-0.276\tc0.016,0.01,4.21,1.394,4.332,1.482c0.178,0.148,0.263,0.379,0.225,0.646L17.175,14.971L17.175,14.971z M11.464,10.789\tc-0.203-0.307-0.199-0.666,0.009-0.916c0,0,2.625-3.574,2.745-3.657c0.203-0.135,0.452-0.141,0.69-0.025\tc0.691,0.335,2.085,2.405,2.167,3.199v0.027c0.024,0.271-0.082,0.491-0.273,0.623c-0.132,0.083-4.43,1.155-4.43,1.155\tc-0.322,0.096-0.68-0.06-0.882-0.381L11.464,10.789z M9.475,9.563C9.32,9.609,8.848,9.757,8.269,8.817c0,0-3.916-6.16-4.007-6.351\tc-0.057-0.212,0.011-0.455,0.202-0.65C5.047,1.211,8.21,0.327,9.037,0.529c0.27,0.069,0.457,0.238,0.522,0.479\tc0.047,0.266,0.433,5.982,0.488,7.264C10.098,9.368,9.629,9.517,9.475,9.563z M9.927,19.066c-0.083,0.225-0.273,0.373-0.54,0.421\tc-0.762,0.13-3.15-0.751-3.647-1.342c-0.096-0.131-0.155-0.262-0.167-0.394c-0.011-0.095,0-0.189,0.036-0.272\tc0.061-0.155,2.917-3.538,2.917-3.538c0.214-0.272,0.595-0.355,0.952-0.213c0.345,0.13,0.56,0.428,0.536,0.749\tC10.014,14.479,9.977,18.923,9.927,19.066z M3.495,13.912c-0.235-0.009-0.444-0.148-0.568-0.382c-0.089-0.17-0.151-0.453-0.19-0.794\tC2.63,11.701,2.761,10.144,3.07,9.648c0.145-0.226,0.357-0.345,0.592-0.336c0.154,0,4.255,1.667,4.255,1.667\tc0.321,0.118,0.521,0.453,0.5,0.833c-0.023,0.37-0.236,0.655-0.551,0.738L3.495,13.912z\"/></svg>",
            "youtube": "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M15,4.1c1,0.1,2.3,0,3,0.8c0.8,0.8,0.9,2.1,0.9,3.1C19,9.2,19,10.9,19,12c-0.1,1.1,0,2.4-0.5,3.4c-0.5,1.1-1.4,1.5-2.5,1.6 c-1.2,0.1-8.6,0.1-11,0c-1.1-0.1-2.4-0.1-3.2-1c-0.7-0.8-0.7-2-0.8-3C1,11.8,1,10.1,1,8.9c0-1.1,0-2.4,0.5-3.4C2,4.5,3,4.3,4.1,4.2 C5.3,4.1,12.6,4,15,4.1z M8,7.5v6l5.5-3L8,7.5z\"/></svg>"
        });
    }
    if (typeof window !== 'undefined' && window.UIkit) window.UIkit.use(plugin);
    return plugin;
});

},{}],"84KA6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "App", function() {
    return App;
});
var _helpers = require("@swc/helpers");
var _jsxRuntime = require("react/jsx-runtime");
/*
 * Monotone Framework Analyzer
 * Copyright (C) 2022  Manuel Meitinger
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */ var _react = require("react");
var _uikit = require("uikit");
var _uikitDefault = parcelHelpers.interopDefault(_uikit);
var _hooks = require("./hooks");
var _language = require("./language");
var _predefined = require("./predefined");
var parser = function() {
    return new Worker(require("ba20804d5708fdc4"));
};
var solver = function() {
    return new Worker(require("e0172995dd07d17c"));
};
var runner = function() {
    return new Worker(require("3eb74806cd1eb1d"));
};
var visualizer = function() {
    return new Worker(require("77f5454579483536"));
};
var programStoreName = 'program';
var frameworkStoreName = 'framework';
var variableStoreName = function(variable) {
    return "variable_".concat(variable);
};
var App = function() {
    var gridDiv = _react.useRef(null);
    var visualizerDiv = _react.useRef(null);
    var ref9 = _helpers.slicedToArray(_hooks.useEditor(programStoreName, _language.languageId, _predefined.defaultProgram), 3), program = ref9[0], programEditor = ref9[1], programEditorDiv = ref9[2];
    var ref1 = _helpers.slicedToArray(_hooks.useEditor(frameworkStoreName, 'typescript', _predefined.defaultFramework), 3), framework = ref1[0], frameworkEditor = ref1[1], frameworkEditorDiv = ref1[2];
    var ref2 = _helpers.slicedToArray(_react.useState({}), 2), inputState = ref2[0], setInputState = ref2[1];
    var parserInput = _react.useMemo(function() {
        return {
            program: program
        };
    }, [
        program
    ]);
    var ref3 = _helpers.slicedToArray(_hooks.useWorker(parserInput, parser), 2), parserOutput = ref3[0], parserError = ref3[1];
    var runnerInput = _react.useMemo(function() {
        return (parserOutput === null || parserOutput === void 0 ? void 0 : parserOutput.succeeded) === true ? {
            program: parserOutput.program,
            state: inputState
        } : undefined;
    }, [
        parserOutput,
        inputState
    ]);
    var ref4 = _helpers.slicedToArray(_hooks.useWorker(runnerInput, runner), 2), runnerOutput = ref4[0], runnerError = ref4[1];
    var solverInput = _react.useMemo(function() {
        return (parserOutput === null || parserOutput === void 0 ? void 0 : parserOutput.succeeded) === true ? {
            program: parserOutput.program,
            variables: parserOutput.variables,
            framework: framework
        } : undefined;
    }, [
        parserOutput,
        framework
    ]);
    var ref5 = _helpers.slicedToArray(_hooks.useWorker(solverInput, solver), 2), solverOutput = ref5[0], solverError = ref5[1];
    var visualizerInput = _react.useMemo(function() {
        return (parserOutput === null || parserOutput === void 0 ? void 0 : parserOutput.succeeded) === true ? {
            program: parserOutput.program
        } : undefined;
    }, [
        parserOutput
    ]);
    var ref6 = _helpers.slicedToArray(_hooks.useWorker(visualizerInput, visualizer), 2), visualizerOutput = ref6[0], visualizerError = ref6[1];
    _react.useEffect(function() {
        if (gridDiv.current !== null) _uikitDefault.default.update(gridDiv.current);
    }, [
        parserOutput,
        runnerOutput,
        solverOutput
    ]);
    var ref7, _variable;
    _react.useEffect(function() {
        return setInputState(function(oldInputState) {
            return (parserOutput === null || parserOutput === void 0 ? void 0 : parserOutput.succeeded) === true ? Object.fromEntries(parserOutput.variables.map(function(variable) {
                return [
                    variable,
                    (_variable = oldInputState[variable]) !== null && _variable !== void 0 ? _variable : Number.parseInt((ref7 = window.localStorage.getItem(variableStoreName(variable))) !== null && ref7 !== void 0 ? ref7 : '0')
                ];
            })) : oldInputState;
        });
    }, [
        parserOutput
    ]);
    var setInputStateVariableValue = function(variable, value) {
        window.localStorage.setItem(variableStoreName(variable), value.toString());
        setInputState(function(prevState) {
            return _helpers.objectSpread({}, prevState, _helpers.defineProperty({}, variable, value));
        });
    };
    _react.useEffect(function() {
        var ref, ref8;
        var modelId = (ref8 = (ref = programEditor.current) === null || ref === void 0 ? void 0 : ref.getModel()) === null || ref8 === void 0 ? void 0 : ref8.id;
        if (modelId !== undefined && parserOutput !== undefined) {
            if (parserOutput.succeeded) _language.InlayHintsProvider.instance.setInlayHints(modelId, parserOutput.inlayHints);
            else _language.InlayHintsProvider.instance.clearInlayHints(modelId);
        }
        return undefined;
    }, [
        parserOutput,
        programEditor
    ]);
    _react.useEffect(function() {
        var visualizer1 = visualizerDiv.current;
        if (visualizer1 === null || visualizerOutput === undefined) return;
        var graph = new DOMParser().parseFromString(visualizerOutput.svg, 'image/svg+xml').documentElement;
        var node = visualizer1.appendChild(graph);
        return function() {
            visualizer1.removeChild(node);
        };
    }, [
        visualizerOutput
    ]);
    var _variable1;
    return /*#__PURE__*/ _jsxRuntime.jsx("div", {
        className: "uk-margin-top uk-margin-left uk-margin-right",
        children: /*#__PURE__*/ _jsxRuntime.jsxs("ul", {
            ref: gridDiv,
            className: "uk-grid-small uk-child-width-expand@s",
            "data-uk-sortable": "handle: .uk-card-header",
            "data-uk-grid": "masonry: true",
            children: [
                /*#__PURE__*/ _jsxRuntime.jsx("li", {
                    className: "uk-width-1-2",
                    children: /*#__PURE__*/ _jsxRuntime.jsxs("div", {
                        className: "uk-card uk-card-default",
                        children: [
                            /*#__PURE__*/ _jsxRuntime.jsx("div", {
                                className: "uk-card-header",
                                children: /*#__PURE__*/ _jsxRuntime.jsxs("h3", {
                                    className: "uk-card-title",
                                    children: [
                                        "Program",
                                        /*#__PURE__*/ _jsxRuntime.jsx("a", {
                                            href: "https://github.com/Meitinger/FrameworkAnalyzer/blob/main/README.md",
                                            target: "_blank",
                                            rel: "noreferrer",
                                            className: "uk-align-right uk-margin-remove",
                                            title: "Syntax",
                                            children: /*#__PURE__*/ _jsxRuntime.jsx("span", {
                                                "data-uk-icon": "question"
                                            })
                                        })
                                    ]
                                })
                            }),
                            /*#__PURE__*/ _jsxRuntime.jsx("div", {
                                className: "uk-card-body",
                                children: /*#__PURE__*/ _jsxRuntime.jsx("div", {
                                    ref: programEditorDiv,
                                    className: "uk-height-medium"
                                })
                            }),
                            parserError !== undefined && /*#__PURE__*/ _jsxRuntime.jsx("div", {
                                className: "uk-card-footer uk-alert-danger",
                                children: parserError.message
                            }),
                            (parserOutput === null || parserOutput === void 0 ? void 0 : parserOutput.succeeded) === false && /*#__PURE__*/ _jsxRuntime.jsxs("div", {
                                className: "uk-card-footer uk-alert-warning",
                                children: [
                                    "Error at line ",
                                    parserOutput.line,
                                    ", column ",
                                    parserOutput.column,
                                    ". Expected:",
                                    /*#__PURE__*/ _jsxRuntime.jsx("div", {
                                        children: /*#__PURE__*/ _jsxRuntime.jsx("ul", {
                                            className: "uk-list uk-list-collapse uk-list-divider",
                                            children: parserOutput.expected.map(function(value, index) {
                                                return /*#__PURE__*/ _jsxRuntime.jsx("li", {
                                                    children: value
                                                }, index);
                                            })
                                        })
                                    })
                                ]
                            })
                        ]
                    })
                }),
                /*#__PURE__*/ _jsxRuntime.jsx("li", {
                    className: "uk-width-1-2",
                    children: /*#__PURE__*/ _jsxRuntime.jsxs("div", {
                        className: "uk-card uk-card-default",
                        children: [
                            /*#__PURE__*/ _jsxRuntime.jsx("div", {
                                className: "uk-card-header",
                                children: /*#__PURE__*/ _jsxRuntime.jsxs("h3", {
                                    className: "uk-card-title",
                                    children: [
                                        "Framework",
                                        /*#__PURE__*/ _jsxRuntime.jsxs("div", {
                                            className: "uk-inline uk-align-right uk-margin-remove",
                                            children: [
                                                /*#__PURE__*/ _jsxRuntime.jsx("button", {
                                                    type: "button",
                                                    className: "uk-button uk-button-primary uk-button-small",
                                                    children: "Predefined"
                                                }),
                                                /*#__PURE__*/ _jsxRuntime.jsx("div", {
                                                    "data-uk-dropdown": "pos: top-right",
                                                    children: /*#__PURE__*/ _jsxRuntime.jsx("ul", {
                                                        className: "uk-nav uk-dropdown-nav uk-list uk-list-divider",
                                                        children: Object.entries(_predefined.predefinedFrameworks).map(function(param) {
                                                            var _param = _helpers.slicedToArray(param, 2), name = _param[0], text = _param[1];
                                                            /*#__PURE__*/ return _jsxRuntime.jsx("li", {
                                                                children: /*#__PURE__*/ _jsxRuntime.jsx("button", {
                                                                    className: "uk-button uk-button-link uk-text-capitalize uk-text-nowrap",
                                                                    onClick: function() {
                                                                        var ref;
                                                                        return (ref = frameworkEditor.current) === null || ref === void 0 ? void 0 : ref.setValue(text);
                                                                    },
                                                                    children: name
                                                                })
                                                            }, name);
                                                        })
                                                    })
                                                })
                                            ]
                                        })
                                    ]
                                })
                            }),
                            /*#__PURE__*/ _jsxRuntime.jsx("div", {
                                className: "uk-card-body",
                                children: /*#__PURE__*/ _jsxRuntime.jsx("div", {
                                    ref: frameworkEditorDiv,
                                    className: "uk-height-medium"
                                })
                            }),
                            solverError !== undefined && /*#__PURE__*/ _jsxRuntime.jsx("div", {
                                className: "uk-card-footer uk-alert-danger",
                                children: solverError.message
                            })
                        ]
                    })
                }),
                /*#__PURE__*/ _jsxRuntime.jsx("li", {
                    className: "uk-width-1-2",
                    children: /*#__PURE__*/ _jsxRuntime.jsxs("div", {
                        className: "uk-card uk-card-default",
                        children: [
                            /*#__PURE__*/ _jsxRuntime.jsx("div", {
                                className: "uk-card-header",
                                children: /*#__PURE__*/ _jsxRuntime.jsx("h3", {
                                    className: "uk-card-title",
                                    children: "Variables"
                                })
                            }),
                            /*#__PURE__*/ _jsxRuntime.jsx("div", {
                                className: "uk-card-body",
                                children: /*#__PURE__*/ _jsxRuntime.jsxs("table", {
                                    className: "uk-table uk-table-small uk-table-hover uk-table-divider",
                                    children: [
                                        /*#__PURE__*/ _jsxRuntime.jsx("thead", {
                                            children: /*#__PURE__*/ _jsxRuntime.jsxs("tr", {
                                                children: [
                                                    /*#__PURE__*/ _jsxRuntime.jsx("th", {
                                                        children: "Name"
                                                    }),
                                                    /*#__PURE__*/ _jsxRuntime.jsx("th", {
                                                        children: "Initial State"
                                                    }),
                                                    /*#__PURE__*/ _jsxRuntime.jsx("th", {
                                                        children: "Final State"
                                                    })
                                                ]
                                            })
                                        }),
                                        /*#__PURE__*/ _jsxRuntime.jsx("tbody", {
                                            children: (parserOutput === null || parserOutput === void 0 ? void 0 : parserOutput.succeeded) === true && parserOutput.variables.map(function(variable) {
                                                /*#__PURE__*/ return _jsxRuntime.jsxs("tr", {
                                                    children: [
                                                        /*#__PURE__*/ _jsxRuntime.jsx("td", {
                                                            children: variable
                                                        }),
                                                        /*#__PURE__*/ _jsxRuntime.jsx("td", {
                                                            children: /*#__PURE__*/ _jsxRuntime.jsx("input", {
                                                                className: "uk-input uk-form-small",
                                                                type: "number",
                                                                step: 1,
                                                                value: (_variable1 = inputState[variable]) !== null && _variable1 !== void 0 ? _variable1 : '',
                                                                onChange: function(e) {
                                                                    return setInputStateVariableValue(variable, e.target.valueAsNumber);
                                                                }
                                                            })
                                                        }),
                                                        /*#__PURE__*/ _jsxRuntime.jsx("td", {
                                                            children: runnerOutput === undefined && runnerError === undefined ? /*#__PURE__*/ _jsxRuntime.jsx("div", {
                                                                "data-uk-spinner": "ratio: 0.5"
                                                            }) : runnerOutput === null || runnerOutput === void 0 ? void 0 : runnerOutput.state[variable]
                                                        })
                                                    ]
                                                }, variable);
                                            })
                                        })
                                    ]
                                })
                            }),
                            runnerError !== undefined && /*#__PURE__*/ _jsxRuntime.jsx("div", {
                                className: "uk-card-footer uk-alert-danger",
                                children: runnerError.message
                            })
                        ]
                    })
                }),
                /*#__PURE__*/ _jsxRuntime.jsx("li", {
                    className: "uk-width-1-2",
                    children: /*#__PURE__*/ _jsxRuntime.jsxs("div", {
                        className: "uk-card uk-card-default",
                        children: [
                            /*#__PURE__*/ _jsxRuntime.jsx("div", {
                                className: "uk-card-header",
                                children: /*#__PURE__*/ _jsxRuntime.jsx("h3", {
                                    className: "uk-card-title",
                                    children: "Analysis"
                                })
                            }),
                            /*#__PURE__*/ _jsxRuntime.jsx("div", {
                                className: "uk-card-body",
                                children: /*#__PURE__*/ _jsxRuntime.jsxs("table", {
                                    className: "uk-table uk-table-small uk-table-hover uk-table-divider",
                                    children: [
                                        /*#__PURE__*/ _jsxRuntime.jsx("thead", {
                                            children: /*#__PURE__*/ _jsxRuntime.jsxs("tr", {
                                                children: [
                                                    /*#__PURE__*/ _jsxRuntime.jsx("th", {
                                                        children: "Label"
                                                    }),
                                                    /*#__PURE__*/ _jsxRuntime.jsx("th", {
                                                        children: "Entry"
                                                    }),
                                                    /*#__PURE__*/ _jsxRuntime.jsx("th", {
                                                        children: "Exit"
                                                    })
                                                ]
                                            })
                                        }),
                                        /*#__PURE__*/ _jsxRuntime.jsxs("tbody", {
                                            children: [
                                                solverInput !== undefined && solverOutput === undefined && solverError === undefined && /*#__PURE__*/ _jsxRuntime.jsxs("tr", {
                                                    children: [
                                                        /*#__PURE__*/ _jsxRuntime.jsx("td", {
                                                            children: /*#__PURE__*/ _jsxRuntime.jsx("div", {
                                                                "data-uk-spinner": "ratio: .5"
                                                            })
                                                        }),
                                                        /*#__PURE__*/ _jsxRuntime.jsx("td", {
                                                            children: /*#__PURE__*/ _jsxRuntime.jsx("div", {
                                                                "data-uk-spinner": "ratio: .5"
                                                            })
                                                        }),
                                                        /*#__PURE__*/ _jsxRuntime.jsx("td", {
                                                            children: /*#__PURE__*/ _jsxRuntime.jsx("div", {
                                                                "data-uk-spinner": "ratio: .5"
                                                            })
                                                        })
                                                    ]
                                                }),
                                                solverOutput !== undefined && Object.entries(solverOutput.analysis).map(function(param) {
                                                    var _param = _helpers.slicedToArray(param, 2), label = _param[0], analysis = _param[1];
                                                    return /*#__PURE__*/ _jsxRuntime.jsxs("tr", {
                                                        children: [
                                                            /*#__PURE__*/ _jsxRuntime.jsx("td", {
                                                                children: label
                                                            }),
                                                            /*#__PURE__*/ _jsxRuntime.jsx("td", {
                                                                children: analysis.entry
                                                            }),
                                                            /*#__PURE__*/ _jsxRuntime.jsx("td", {
                                                                children: analysis.exit
                                                            })
                                                        ]
                                                    }, label);
                                                })
                                            ]
                                        })
                                    ]
                                })
                            })
                        ]
                    })
                }),
                /*#__PURE__*/ _jsxRuntime.jsx("li", {
                    className: "uk-width-1-2",
                    children: /*#__PURE__*/ _jsxRuntime.jsxs("div", {
                        className: "uk-card uk-card-default",
                        children: [
                            /*#__PURE__*/ _jsxRuntime.jsx("div", {
                                className: "uk-card-header",
                                children: /*#__PURE__*/ _jsxRuntime.jsx("h3", {
                                    className: "uk-card-title",
                                    children: "Flow Graph"
                                })
                            }),
                            /*#__PURE__*/ _jsxRuntime.jsx("div", {
                                ref: visualizerDiv,
                                className: "uk-card-body uk-height-large uk-overflow-auto",
                                children: visualizerInput !== undefined && visualizerOutput === undefined && visualizerError === undefined && /*#__PURE__*/ _jsxRuntime.jsx("div", {
                                    className: "uk-position-center",
                                    "data-uk-spinner": "ratio: 2"
                                })
                            }),
                            visualizerError !== undefined && /*#__PURE__*/ _jsxRuntime.jsx("div", {
                                className: "uk-card-footer uk-alert-danger",
                                children: visualizerError.message
                            })
                        ]
                    })
                })
            ]
        })
    });
};

},{"@swc/helpers":"erO4s","react/jsx-runtime":"cpY4b","react":"9sfFD","uikit":"12aQH","./hooks":"8y7sK","./language":"9u22Y","./predefined":"4p05g","ba20804d5708fdc4":"eYKDV","e0172995dd07d17c":"ebzAd","3eb74806cd1eb1d":"c9N0f","77f5454579483536":"iE5Pi","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"8y7sK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useWorker", function() {
    return useWorker;
});
parcelHelpers.export(exports, "usePersistedState", function() {
    return usePersistedState;
});
parcelHelpers.export(exports, "useEditor", function() {
    return useEditor;
});
var _helpers = require("@swc/helpers");
/*
 * Monotone Framework Analyzer
 * Copyright (C) 2022  Manuel Meitinger
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */ var _monacoEditor = require("monaco-editor");
var _react = require("react");
var useWorker = function(input, builder) {
    var ref = _helpers.slicedToArray(_react.useState(undefined), 2), result = ref[0], setResult = ref[1];
    var ref1 = _helpers.slicedToArray(_react.useState(undefined), 2), error = ref1[0], setError = ref1[1];
    _react.useEffect(function() {
        var resetState = function() {
            setResult(undefined);
            setError(undefined);
        };
        var reportError = function(e) {
            setResult(undefined);
            setError(e);
        };
        if (input === undefined) {
            resetState();
            return;
        }
        var worker;
        try {
            worker = builder();
            worker.onerror = function(e) {
                return reportError(new Error(e.message));
            };
            worker.onmessageerror = function(_) {
                return reportError(new Error('Unexpected worker message error.'));
            };
            worker.onmessage = function(e) {
                setResult(e.data);
                setError(undefined);
            };
            worker.postMessage(input);
        } catch (e) {
            reportError(e instanceof Error ? e : new Error(String(e)));
        }
        return function() {
            worker === null || worker === void 0 ? void 0 : worker.terminate();
            resetState();
        };
    }, [
        input,
        builder
    ]);
    return [
        result,
        error
    ];
};
var usePersistedState = function(name, initialState1) {
    var ref;
    return _react.useReducer(function(prevState, setState) {
        var state = typeof setState === 'function' ? setState(prevState) : setState;
        window.localStorage.setItem(name, state);
        return state;
    }, initialState1, function(initialState) {
        return (ref = window.localStorage.getItem(name)) !== null && ref !== void 0 ? ref : initialState;
    });
};
var useEditor = function(name, language, initial) {
    var ref3;
    var ref2 = _helpers.slicedToArray(_react.useState((ref3 = window.localStorage.getItem(name)) !== null && ref3 !== void 0 ? ref3 : initial), 2), value1 = ref2[0], setValue = ref2[1];
    var editorRef = _react.useRef();
    var editorDivRef = _react.useRef(null);
    _react.useEffect(function() {
        if (editorDivRef.current === null) throw new ReferenceError('Editor DIV reference is not set.');
        var ref;
        var editor = _monacoEditor.editor.create(editorDivRef.current, {
            language: language,
            automaticLayout: true,
            value: (ref = window.localStorage.getItem(name)) !== null && ref !== void 0 ? ref : initial
        });
        editorRef.current = editor;
        var timeout;
        var resetTimeout = function() {
            if (timeout !== undefined) {
                clearTimeout(timeout);
                timeout = undefined;
            }
        };
        editor.onDidChangeModelContent(function(_) {
            resetTimeout();
            timeout = setTimeout(function() {
                timeout = undefined;
                var value = editor.getValue({
                    preserveBOM: false,
                    lineEnding: '\r\n'
                });
                window.localStorage.setItem(name, value);
                setValue(value);
            }, 500);
        });
        return function() {
            resetTimeout();
            editor.dispose();
        };
    }, [
        name,
        language,
        initial
    ]);
    return [
        value1,
        editorRef,
        editorDivRef
    ];
};

},{"@swc/helpers":"erO4s","monaco-editor":"cBoAt","react":"9sfFD","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"cBoAt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _monacoContribution = require("../language/typescript/monaco.contribution");
var _monacoContribution1 = require("../language/css/monaco.contribution");
var _monacoContribution2 = require("../language/json/monaco.contribution");
var _monacoContribution3 = require("../language/html/monaco.contribution");
var _monacoContribution4 = require("../basic-languages/monaco.contribution");
var _edcoreMain = require("./edcore.main");
parcelHelpers.exportAll(_edcoreMain, exports);

},{"../language/typescript/monaco.contribution":"jPxyv","../language/css/monaco.contribution":"lqXZH","../language/json/monaco.contribution":"ldkmi","../language/html/monaco.contribution":"h2raU","../basic-languages/monaco.contribution":"2pTC8","./edcore.main":"1hxHI","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"jPxyv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "JsxEmit", function() {
    return JsxEmit;
});
parcelHelpers.export(exports, "ModuleKind", function() {
    return ModuleKind;
});
parcelHelpers.export(exports, "ModuleResolutionKind", function() {
    return ModuleResolutionKind;
});
parcelHelpers.export(exports, "NewLineKind", function() {
    return NewLineKind;
});
parcelHelpers.export(exports, "ScriptTarget", function() {
    return ScriptTarget;
});
parcelHelpers.export(exports, "getJavaScriptWorker", function() {
    return getJavaScriptWorker;
});
parcelHelpers.export(exports, "getTypeScriptWorker", function() {
    return getTypeScriptWorker;
});
parcelHelpers.export(exports, "javascriptDefaults", function() {
    return javascriptDefaults;
});
parcelHelpers.export(exports, "typescriptDefaults", function() {
    return typescriptDefaults;
});
parcelHelpers.export(exports, "typescriptVersion", function() {
    return typescriptVersion2;
});
var _helpers = require("@swc/helpers");
var _editorApiJs = require("../../editor/editor.api.js");
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = function(target) {
    return __defProp(target, "__esModule", {
        value: true
    });
};
var __reExport = function(target, module, desc) {
    if (module && typeof module === "object" || typeof module === "function") {
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            var _loop = function(_iterator, _step) {
                var key = _step.value;
                if (!__hasOwnProp.call(target, key) && key !== "default") __defProp(target, key, {
                    get: function() {
                        return module[key];
                    },
                    enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable
                });
            };
            for(var _iterator = __getOwnPropNames(module)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop(_iterator, _step);
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
    }
    return target;
};
// src/typescript/lib/typescriptServicesMetadata.ts
var typescriptVersion = "4.4.4";
// src/fillers/monaco-editor-core.ts
var monaco_editor_core_exports = {};
__markAsModule(monaco_editor_core_exports);
__reExport(monaco_editor_core_exports, _editorApiJs);
// src/typescript/monaco.contribution.ts
var ModuleKind;
(function(ModuleKind2) {
    ModuleKind2[ModuleKind2["None"] = 0] = "None";
    ModuleKind2[ModuleKind2["CommonJS"] = 1] = "CommonJS";
    ModuleKind2[ModuleKind2["AMD"] = 2] = "AMD";
    ModuleKind2[ModuleKind2["UMD"] = 3] = "UMD";
    ModuleKind2[ModuleKind2["System"] = 4] = "System";
    ModuleKind2[ModuleKind2["ES2015"] = 5] = "ES2015";
    ModuleKind2[ModuleKind2["ESNext"] = 99] = "ESNext";
})(ModuleKind || (ModuleKind = {}));
var JsxEmit;
(function(JsxEmit2) {
    JsxEmit2[JsxEmit2["None"] = 0] = "None";
    JsxEmit2[JsxEmit2["Preserve"] = 1] = "Preserve";
    JsxEmit2[JsxEmit2["React"] = 2] = "React";
    JsxEmit2[JsxEmit2["ReactNative"] = 3] = "ReactNative";
    JsxEmit2[JsxEmit2["ReactJSX"] = 4] = "ReactJSX";
    JsxEmit2[JsxEmit2["ReactJSXDev"] = 5] = "ReactJSXDev";
})(JsxEmit || (JsxEmit = {}));
var NewLineKind;
(function(NewLineKind2) {
    NewLineKind2[NewLineKind2["CarriageReturnLineFeed"] = 0] = "CarriageReturnLineFeed";
    NewLineKind2[NewLineKind2["LineFeed"] = 1] = "LineFeed";
})(NewLineKind || (NewLineKind = {}));
var ScriptTarget;
(function(ScriptTarget2) {
    ScriptTarget2[ScriptTarget2["ES3"] = 0] = "ES3";
    ScriptTarget2[ScriptTarget2["ES5"] = 1] = "ES5";
    ScriptTarget2[ScriptTarget2["ES2015"] = 2] = "ES2015";
    ScriptTarget2[ScriptTarget2["ES2016"] = 3] = "ES2016";
    ScriptTarget2[ScriptTarget2["ES2017"] = 4] = "ES2017";
    ScriptTarget2[ScriptTarget2["ES2018"] = 5] = "ES2018";
    ScriptTarget2[ScriptTarget2["ES2019"] = 6] = "ES2019";
    ScriptTarget2[ScriptTarget2["ES2020"] = 7] = "ES2020";
    ScriptTarget2[ScriptTarget2["ESNext"] = 99] = "ESNext";
    ScriptTarget2[ScriptTarget2["JSON"] = 100] = "JSON";
    ScriptTarget2[ScriptTarget2["Latest"] = 99] = "Latest";
})(ScriptTarget || (ScriptTarget = {}));
var ModuleResolutionKind;
(function(ModuleResolutionKind2) {
    ModuleResolutionKind2[ModuleResolutionKind2["Classic"] = 1] = "Classic";
    ModuleResolutionKind2[ModuleResolutionKind2["NodeJs"] = 2] = "NodeJs";
})(ModuleResolutionKind || (ModuleResolutionKind = {}));
var LanguageServiceDefaultsImpl = /*#__PURE__*/ function() {
    "use strict";
    function _class(compilerOptions, diagnosticsOptions, workerOptions, inlayHintsOptions) {
        _helpers.classCallCheck(this, _class);
        this._onDidChange = new monaco_editor_core_exports.Emitter();
        this._onDidExtraLibsChange = new monaco_editor_core_exports.Emitter();
        this._extraLibs = Object.create(null);
        this._removedExtraLibs = Object.create(null);
        this._eagerModelSync = false;
        this.setCompilerOptions(compilerOptions);
        this.setDiagnosticsOptions(diagnosticsOptions);
        this.setWorkerOptions(workerOptions);
        this.setInlayHintsOptions(inlayHintsOptions);
        this._onDidExtraLibsChangeTimeout = -1;
    }
    _helpers.createClass(_class, [
        {
            key: "onDidChange",
            get: function get() {
                return this._onDidChange.event;
            }
        },
        {
            key: "onDidExtraLibsChange",
            get: function get() {
                return this._onDidExtraLibsChange.event;
            }
        },
        {
            key: "workerOptions",
            get: function get() {
                return this._workerOptions;
            }
        },
        {
            key: "inlayHintsOptions",
            get: function get() {
                return this._inlayHintsOptions;
            }
        },
        {
            key: "getExtraLibs",
            value: function getExtraLibs() {
                return this._extraLibs;
            }
        },
        {
            key: "addExtraLib",
            value: function addExtraLib(content, _filePath) {
                var _this = this;
                var filePath;
                if (typeof _filePath === "undefined") filePath = "ts:extralib-".concat(Math.random().toString(36).substring(2, 15));
                else filePath = _filePath;
                if (this._extraLibs[filePath] && this._extraLibs[filePath].content === content) return {
                    dispose: function() {}
                };
                var myVersion = 1;
                if (this._removedExtraLibs[filePath]) myVersion = this._removedExtraLibs[filePath] + 1;
                if (this._extraLibs[filePath]) myVersion = this._extraLibs[filePath].version + 1;
                this._extraLibs[filePath] = {
                    content: content,
                    version: myVersion
                };
                this._fireOnDidExtraLibsChangeSoon();
                return {
                    dispose: function() {
                        var extraLib = _this._extraLibs[filePath];
                        if (!extraLib) return;
                        if (extraLib.version !== myVersion) return;
                        delete _this._extraLibs[filePath];
                        _this._removedExtraLibs[filePath] = myVersion;
                        _this._fireOnDidExtraLibsChangeSoon();
                    }
                };
            }
        },
        {
            key: "setExtraLibs",
            value: function setExtraLibs(libs) {
                for(var filePath in this._extraLibs)this._removedExtraLibs[filePath] = this._extraLibs[filePath].version;
                this._extraLibs = Object.create(null);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                if (libs && libs.length > 0) try {
                    for(var _iterator = libs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var lib = _step.value;
                        var filePath1 = lib.filePath || "ts:extralib-".concat(Math.random().toString(36).substring(2, 15));
                        var content = lib.content;
                        var myVersion = 1;
                        if (this._removedExtraLibs[filePath1]) myVersion = this._removedExtraLibs[filePath1] + 1;
                        this._extraLibs[filePath1] = {
                            content: content,
                            version: myVersion
                        };
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                this._fireOnDidExtraLibsChangeSoon();
            }
        },
        {
            key: "_fireOnDidExtraLibsChangeSoon",
            value: function _fireOnDidExtraLibsChangeSoon() {
                var _this = this;
                if (this._onDidExtraLibsChangeTimeout !== -1) return;
                this._onDidExtraLibsChangeTimeout = window.setTimeout(function() {
                    _this._onDidExtraLibsChangeTimeout = -1;
                    _this._onDidExtraLibsChange.fire(void 0);
                }, 0);
            }
        },
        {
            key: "getCompilerOptions",
            value: function getCompilerOptions() {
                return this._compilerOptions;
            }
        },
        {
            key: "setCompilerOptions",
            value: function setCompilerOptions(options) {
                this._compilerOptions = options || Object.create(null);
                this._onDidChange.fire(void 0);
            }
        },
        {
            key: "getDiagnosticsOptions",
            value: function getDiagnosticsOptions() {
                return this._diagnosticsOptions;
            }
        },
        {
            key: "setDiagnosticsOptions",
            value: function setDiagnosticsOptions(options) {
                this._diagnosticsOptions = options || Object.create(null);
                this._onDidChange.fire(void 0);
            }
        },
        {
            key: "setWorkerOptions",
            value: function setWorkerOptions(options) {
                this._workerOptions = options || Object.create(null);
                this._onDidChange.fire(void 0);
            }
        },
        {
            key: "setInlayHintsOptions",
            value: function setInlayHintsOptions(options) {
                this._inlayHintsOptions = options || Object.create(null);
                this._onDidChange.fire(void 0);
            }
        },
        {
            key: "setMaximumWorkerIdleTime",
            value: function setMaximumWorkerIdleTime(value) {}
        },
        {
            key: "setEagerModelSync",
            value: function setEagerModelSync(value) {
                this._eagerModelSync = value;
            }
        },
        {
            key: "getEagerModelSync",
            value: function getEagerModelSync() {
                return this._eagerModelSync;
            }
        }
    ]);
    return _class;
}();
var typescriptVersion2 = typescriptVersion;
var typescriptDefaults = new LanguageServiceDefaultsImpl({
    allowNonTsExtensions: true,
    target: 99
}, {
    noSemanticValidation: false,
    noSyntaxValidation: false,
    onlyVisible: false
}, {}, {});
var javascriptDefaults = new LanguageServiceDefaultsImpl({
    allowNonTsExtensions: true,
    allowJs: true,
    target: 99
}, {
    noSemanticValidation: true,
    noSyntaxValidation: false,
    onlyVisible: false
}, {}, {});
var getTypeScriptWorker = function() {
    return getMode().then(function(mode) {
        return mode.getTypeScriptWorker();
    });
};
var getJavaScriptWorker = function() {
    return getMode().then(function(mode) {
        return mode.getJavaScriptWorker();
    });
};
monaco_editor_core_exports.languages.typescript = {
    ModuleKind: ModuleKind,
    JsxEmit: JsxEmit,
    NewLineKind: NewLineKind,
    ScriptTarget: ScriptTarget,
    ModuleResolutionKind: ModuleResolutionKind,
    typescriptVersion: typescriptVersion2,
    typescriptDefaults: typescriptDefaults,
    javascriptDefaults: javascriptDefaults,
    getTypeScriptWorker: getTypeScriptWorker,
    getJavaScriptWorker: getJavaScriptWorker
};
function getMode() {
    var resolve, reject;
    return require("d2b42f5515e32ad9");
}
monaco_editor_core_exports.languages.onLanguage("typescript", function() {
    return getMode().then(function(mode) {
        return mode.setupTypeScript(typescriptDefaults);
    });
});
monaco_editor_core_exports.languages.onLanguage("javascript", function() {
    return getMode().then(function(mode) {
        return mode.setupJavaScript(javascriptDefaults);
    });
});

},{"@swc/helpers":"erO4s","../../editor/editor.api.js":"8ZK4U","d2b42f5515e32ad9":"6PKq3","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"6PKq3":[function(require,module,exports) {
module.exports = Promise.all([
    require("./helpers/browser/css-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("aEQC1")),
    require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("hYBl0")),
    require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("5S8nT"))
]).then(function() {
    return module.bundle.root('eMeK1');
});

},{"./helpers/browser/css-loader":"jhZtD","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me","./helpers/browser/js-loader":"3dDkg"}],"jhZtD":[function(require,module,exports) {
"use strict";
var cacheLoader = require('../cacheLoader');
module.exports = cacheLoader(function(bundle) {
    return new Promise(function(resolve, reject) {
        // Don't insert the same link element twice (e.g. if it was already in the HTML)
        var existingLinks = document.getElementsByTagName('link');
        if ([].concat(existingLinks).some(function isCurrentBundle(link) {
            return link.href === bundle && link.rel.indexOf('stylesheet') > -1;
        })) {
            resolve();
            return;
        }
        var link1 = document.createElement('link');
        link1.rel = 'stylesheet';
        link1.href = bundle;
        link1.onerror = function(e) {
            link1.onerror = link1.onload = null;
            link1.remove();
            reject(e);
        };
        link1.onload = function() {
            link1.onerror = link1.onload = null;
            resolve();
        };
        document.getElementsByTagName('head')[0].appendChild(link1);
    });
});

},{"../cacheLoader":"khH0r"}],"khH0r":[function(require,module,exports) {
"use strict";
var cachedBundles = {};
var cachedPreloads = {};
var cachedPrefetches = {};
function getCache(type) {
    switch(type){
        case 'preload':
            return cachedPreloads;
        case 'prefetch':
            return cachedPrefetches;
        default:
            return cachedBundles;
    }
}
module.exports = function(loader, type) {
    return function(bundle) {
        var cache = getCache(type);
        if (cache[bundle]) return cache[bundle];
        return cache[bundle] = loader.apply(null, arguments).catch(function(e) {
            delete cache[bundle];
            throw e;
        });
    };
};

},{}],"jkqJ4":[function(require,module,exports) {
"use strict";
var bundleURL = {};
function getBundleURLCached(id) {
    var value = bundleURL[id];
    if (!value) {
        value = getBundleURL();
        bundleURL[id] = value;
    }
    return value;
}
function getBundleURL() {
    try {
        throw new Error();
    } catch (err) {
        var matches = ('' + err.stack).match(/(https?|file|ftp|(chrome|moz)-extension):\/\/[^)\n]+/g);
        if (matches) // The first two stack frames will be this function and getBundleURLCached.
        // Use the 3rd one, which will be a runtime in the original bundle.
        return getBaseURL(matches[2]);
    }
    return '/';
}
function getBaseURL(url) {
    return ('' + url).replace(/^((?:https?|file|ftp|(chrome|moz)-extension):\/\/.+)\/[^/]+$/, '$1') + '/';
} // TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.
function getOrigin(url) {
    var matches = ('' + url).match(/(https?|file|ftp|(chrome|moz)-extension):\/\/[^/]+/);
    if (!matches) throw new Error('Origin not found');
    return matches[0];
}
exports.getBundleURL = getBundleURLCached;
exports.getBaseURL = getBaseURL;
exports.getOrigin = getOrigin;

},{}],"3dDkg":[function(require,module,exports) {
"use strict";
var cacheLoader = require('../cacheLoader');
module.exports = cacheLoader(function(bundle) {
    return new Promise(function(resolve, reject) {
        // Don't insert the same script twice (e.g. if it was already in the HTML)
        var existingScripts = document.getElementsByTagName('script');
        if ([].concat(existingScripts).some(function isCurrentBundle(script) {
            return script.src === bundle;
        })) {
            resolve();
            return;
        }
        var preloadLink = document.createElement('link');
        preloadLink.href = bundle;
        preloadLink.rel = 'preload';
        preloadLink.as = 'script';
        document.head.appendChild(preloadLink);
        var script1 = document.createElement('script');
        script1.async = true;
        script1.type = 'text/javascript';
        script1.charset = 'utf-8';
        script1.src = bundle;
        script1.onerror = function(e) {
            var error = new TypeError("Failed to fetch dynamically imported module: ".concat(bundle, ". Error: ").concat(e.message));
            script1.onerror = script1.onload = null;
            script1.remove();
            reject(error);
        };
        script1.onload = function() {
            script1.onerror = script1.onload = null;
            resolve();
        };
        document.getElementsByTagName('head')[0].appendChild(script1);
    });
});

},{"../cacheLoader":"khH0r"}],"lqXZH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cssDefaults", function() {
    return cssDefaults;
});
parcelHelpers.export(exports, "lessDefaults", function() {
    return lessDefaults;
});
parcelHelpers.export(exports, "scssDefaults", function() {
    return scssDefaults;
});
var _helpers = require("@swc/helpers");
var _editorApiJs = require("../../editor/editor.api.js");
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = function(target) {
    return __defProp(target, "__esModule", {
        value: true
    });
};
var __reExport = function(target, module, desc) {
    if (module && typeof module === "object" || typeof module === "function") {
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            var _loop = function(_iterator, _step) {
                var key = _step.value;
                if (!__hasOwnProp.call(target, key) && key !== "default") __defProp(target, key, {
                    get: function() {
                        return module[key];
                    },
                    enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable
                });
            };
            for(var _iterator = __getOwnPropNames(module)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop(_iterator, _step);
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
    }
    return target;
};
// src/fillers/monaco-editor-core.ts
var monaco_editor_core_exports = {};
__markAsModule(monaco_editor_core_exports);
__reExport(monaco_editor_core_exports, _editorApiJs);
// src/css/monaco.contribution.ts
var LanguageServiceDefaultsImpl = /*#__PURE__*/ function() {
    "use strict";
    function _class(languageId, options, modeConfiguration) {
        _helpers.classCallCheck(this, _class);
        this._onDidChange = new monaco_editor_core_exports.Emitter();
        this._languageId = languageId;
        this.setOptions(options);
        this.setModeConfiguration(modeConfiguration);
    }
    _helpers.createClass(_class, [
        {
            key: "onDidChange",
            get: function get() {
                return this._onDidChange.event;
            }
        },
        {
            key: "languageId",
            get: function get() {
                return this._languageId;
            }
        },
        {
            key: "modeConfiguration",
            get: function get() {
                return this._modeConfiguration;
            }
        },
        {
            key: "diagnosticsOptions",
            get: function get() {
                return this.options;
            }
        },
        {
            key: "options",
            get: function get() {
                return this._options;
            }
        },
        {
            key: "setOptions",
            value: function setOptions(options) {
                this._options = options || Object.create(null);
                this._onDidChange.fire(this);
            }
        },
        {
            key: "setDiagnosticsOptions",
            value: function setDiagnosticsOptions(options) {
                this.setOptions(options);
            }
        },
        {
            key: "setModeConfiguration",
            value: function setModeConfiguration(modeConfiguration) {
                this._modeConfiguration = modeConfiguration || Object.create(null);
                this._onDidChange.fire(this);
            }
        }
    ]);
    return _class;
}();
var optionsDefault = {
    validate: true,
    lint: {
        compatibleVendorPrefixes: "ignore",
        vendorPrefix: "warning",
        duplicateProperties: "warning",
        emptyRules: "warning",
        importStatement: "ignore",
        boxModel: "ignore",
        universalSelector: "ignore",
        zeroUnits: "ignore",
        fontFaceProperties: "warning",
        hexColorLength: "error",
        argumentsInColorFunction: "error",
        unknownProperties: "warning",
        ieHack: "ignore",
        unknownVendorSpecificProperties: "ignore",
        propertyIgnoredDueToDisplay: "warning",
        important: "ignore",
        float: "ignore",
        idSelector: "ignore"
    },
    data: {
        useDefaultDataProvider: true
    }
};
var modeConfigurationDefault = {
    completionItems: true,
    hovers: true,
    documentSymbols: true,
    definitions: true,
    references: true,
    documentHighlights: true,
    rename: true,
    colors: true,
    foldingRanges: true,
    diagnostics: true,
    selectionRanges: true
};
var cssDefaults = new LanguageServiceDefaultsImpl("css", optionsDefault, modeConfigurationDefault);
var scssDefaults = new LanguageServiceDefaultsImpl("scss", optionsDefault, modeConfigurationDefault);
var lessDefaults = new LanguageServiceDefaultsImpl("less", optionsDefault, modeConfigurationDefault);
monaco_editor_core_exports.languages.css = {
    cssDefaults: cssDefaults,
    lessDefaults: lessDefaults,
    scssDefaults: scssDefaults
};
function getMode() {
    var resolve, reject;
    return require("4067aa23409e35b0");
}
monaco_editor_core_exports.languages.onLanguage("less", function() {
    getMode().then(function(mode) {
        return mode.setupMode(lessDefaults);
    });
});
monaco_editor_core_exports.languages.onLanguage("scss", function() {
    getMode().then(function(mode) {
        return mode.setupMode(scssDefaults);
    });
});
monaco_editor_core_exports.languages.onLanguage("css", function() {
    getMode().then(function(mode) {
        return mode.setupMode(cssDefaults);
    });
});

},{"@swc/helpers":"erO4s","../../editor/editor.api.js":"8ZK4U","4067aa23409e35b0":"450vu","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"450vu":[function(require,module,exports) {
module.exports = Promise.all([
    require("./helpers/browser/css-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("aEQC1")),
    require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("eV2tY"))
]).then(function() {
    return module.bundle.root('9CG5H');
});

},{"./helpers/browser/css-loader":"jhZtD","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me","./helpers/browser/js-loader":"3dDkg"}],"ldkmi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "jsonDefaults", function() {
    return jsonDefaults;
});
var _helpers = require("@swc/helpers");
var _editorApiJs = require("../../editor/editor.api.js");
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = function(target) {
    return __defProp(target, "__esModule", {
        value: true
    });
};
var __reExport = function(target, module, desc) {
    if (module && typeof module === "object" || typeof module === "function") {
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            var _loop = function(_iterator, _step) {
                var key = _step.value;
                if (!__hasOwnProp.call(target, key) && key !== "default") __defProp(target, key, {
                    get: function() {
                        return module[key];
                    },
                    enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable
                });
            };
            for(var _iterator = __getOwnPropNames(module)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop(_iterator, _step);
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
    }
    return target;
};
// src/fillers/monaco-editor-core.ts
var monaco_editor_core_exports = {};
__markAsModule(monaco_editor_core_exports);
__reExport(monaco_editor_core_exports, _editorApiJs);
// src/json/monaco.contribution.ts
var LanguageServiceDefaultsImpl = /*#__PURE__*/ function() {
    "use strict";
    function _class(languageId, diagnosticsOptions, modeConfiguration) {
        _helpers.classCallCheck(this, _class);
        this._onDidChange = new monaco_editor_core_exports.Emitter();
        this._languageId = languageId;
        this.setDiagnosticsOptions(diagnosticsOptions);
        this.setModeConfiguration(modeConfiguration);
    }
    _helpers.createClass(_class, [
        {
            key: "onDidChange",
            get: function get() {
                return this._onDidChange.event;
            }
        },
        {
            key: "languageId",
            get: function get() {
                return this._languageId;
            }
        },
        {
            key: "modeConfiguration",
            get: function get() {
                return this._modeConfiguration;
            }
        },
        {
            key: "diagnosticsOptions",
            get: function get() {
                return this._diagnosticsOptions;
            }
        },
        {
            key: "setDiagnosticsOptions",
            value: function setDiagnosticsOptions(options) {
                this._diagnosticsOptions = options || Object.create(null);
                this._onDidChange.fire(this);
            }
        },
        {
            key: "setModeConfiguration",
            value: function setModeConfiguration(modeConfiguration) {
                this._modeConfiguration = modeConfiguration || Object.create(null);
                this._onDidChange.fire(this);
            }
        }
    ]);
    return _class;
}();
var diagnosticDefault = {
    validate: true,
    allowComments: true,
    schemas: [],
    enableSchemaRequest: false,
    schemaRequest: "warning",
    schemaValidation: "warning",
    comments: "error",
    trailingCommas: "error"
};
var modeConfigurationDefault = {
    documentFormattingEdits: true,
    documentRangeFormattingEdits: true,
    completionItems: true,
    hovers: true,
    documentSymbols: true,
    tokens: true,
    colors: true,
    foldingRanges: true,
    diagnostics: true,
    selectionRanges: true
};
var jsonDefaults = new LanguageServiceDefaultsImpl("json", diagnosticDefault, modeConfigurationDefault);
monaco_editor_core_exports.languages.json = {
    jsonDefaults: jsonDefaults
};
function getMode() {
    var resolve, reject;
    return require("ce9d888823b216c3");
}
monaco_editor_core_exports.languages.register({
    id: "json",
    extensions: [
        ".json",
        ".bowerrc",
        ".jshintrc",
        ".jscsrc",
        ".eslintrc",
        ".babelrc",
        ".har"
    ],
    aliases: [
        "JSON",
        "json"
    ],
    mimetypes: [
        "application/json"
    ]
});
monaco_editor_core_exports.languages.onLanguage("json", function() {
    getMode().then(function(mode) {
        return mode.setupMode(jsonDefaults);
    });
});

},{"@swc/helpers":"erO4s","../../editor/editor.api.js":"8ZK4U","ce9d888823b216c3":"baj2n","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"baj2n":[function(require,module,exports) {
module.exports = Promise.all([
    require("./helpers/browser/css-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("aEQC1")),
    require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("4H18Z"))
]).then(function() {
    return module.bundle.root('iZ8tU');
});

},{"./helpers/browser/css-loader":"jhZtD","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me","./helpers/browser/js-loader":"3dDkg"}],"h2raU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "handlebarDefaults", function() {
    return handlebarDefaults;
});
parcelHelpers.export(exports, "handlebarLanguageService", function() {
    return handlebarLanguageService;
});
parcelHelpers.export(exports, "htmlDefaults", function() {
    return htmlDefaults;
});
parcelHelpers.export(exports, "htmlLanguageService", function() {
    return htmlLanguageService;
});
parcelHelpers.export(exports, "razorDefaults", function() {
    return razorDefaults;
});
parcelHelpers.export(exports, "razorLanguageService", function() {
    return razorLanguageService;
});
parcelHelpers.export(exports, "registerHTMLLanguageService", function() {
    return registerHTMLLanguageService;
});
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
var _editorApiJs = require("../../editor/editor.api.js");
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = function(target) {
    return __defProp(target, "__esModule", {
        value: true
    });
};
var __reExport = function(target, module, desc) {
    if (module && typeof module === "object" || typeof module === "function") {
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            var _loop = function(_iterator, _step) {
                var key = _step.value;
                if (!__hasOwnProp.call(target, key) && key !== "default") __defProp(target, key, {
                    get: function() {
                        return module[key];
                    },
                    enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable
                });
            };
            for(var _iterator = __getOwnPropNames(module)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop(_iterator, _step);
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
    }
    return target;
};
// src/fillers/monaco-editor-core.ts
var monaco_editor_core_exports = {};
__markAsModule(monaco_editor_core_exports);
__reExport(monaco_editor_core_exports, _editorApiJs);
// src/html/monaco.contribution.ts
var LanguageServiceDefaultsImpl = /*#__PURE__*/ function() {
    "use strict";
    function _class(languageId, options, modeConfiguration) {
        _helpers.classCallCheck(this, _class);
        this._onDidChange = new monaco_editor_core_exports.Emitter();
        this._languageId = languageId;
        this.setOptions(options);
        this.setModeConfiguration(modeConfiguration);
    }
    _helpers.createClass(_class, [
        {
            key: "onDidChange",
            get: function get() {
                return this._onDidChange.event;
            }
        },
        {
            key: "languageId",
            get: function get() {
                return this._languageId;
            }
        },
        {
            key: "options",
            get: function get() {
                return this._options;
            }
        },
        {
            key: "modeConfiguration",
            get: function get() {
                return this._modeConfiguration;
            }
        },
        {
            key: "setOptions",
            value: function setOptions(options) {
                this._options = options || Object.create(null);
                this._onDidChange.fire(this);
            }
        },
        {
            key: "setModeConfiguration",
            value: function setModeConfiguration(modeConfiguration) {
                this._modeConfiguration = modeConfiguration || Object.create(null);
                this._onDidChange.fire(this);
            }
        }
    ]);
    return _class;
}();
var formatDefaults = {
    tabSize: 4,
    insertSpaces: false,
    wrapLineLength: 120,
    unformatted: 'default": "a, abbr, acronym, b, bdo, big, br, button, cite, code, dfn, em, i, img, input, kbd, label, map, object, q, samp, select, small, span, strong, sub, sup, textarea, tt, var',
    contentUnformatted: "pre",
    indentInnerHtml: false,
    preserveNewLines: true,
    maxPreserveNewLines: void 0,
    indentHandlebars: false,
    endWithNewline: false,
    extraLiners: "head, body, /html",
    wrapAttributes: "auto"
};
var optionsDefault = {
    format: formatDefaults,
    suggest: {},
    data: {
        useDefaultDataProvider: true
    }
};
function getConfigurationDefault(languageId) {
    return {
        completionItems: true,
        hovers: true,
        documentSymbols: true,
        links: true,
        documentHighlights: true,
        rename: true,
        colors: true,
        foldingRanges: true,
        selectionRanges: true,
        diagnostics: languageId === htmlLanguageId,
        documentFormattingEdits: languageId === htmlLanguageId,
        documentRangeFormattingEdits: languageId === htmlLanguageId
    };
}
var htmlLanguageId = "html";
var handlebarsLanguageId = "handlebars";
var razorLanguageId = "razor";
var htmlLanguageService = registerHTMLLanguageService(htmlLanguageId, optionsDefault, getConfigurationDefault(htmlLanguageId));
var htmlDefaults = htmlLanguageService.defaults;
var handlebarLanguageService = registerHTMLLanguageService(handlebarsLanguageId, optionsDefault, getConfigurationDefault(handlebarsLanguageId));
var handlebarDefaults = handlebarLanguageService.defaults;
var razorLanguageService = registerHTMLLanguageService(razorLanguageId, optionsDefault, getConfigurationDefault(razorLanguageId));
var razorDefaults = razorLanguageService.defaults;
monaco_editor_core_exports.languages.html = {
    htmlDefaults: htmlDefaults,
    razorDefaults: razorDefaults,
    handlebarDefaults: handlebarDefaults,
    htmlLanguageService: htmlLanguageService,
    handlebarLanguageService: handlebarLanguageService,
    razorLanguageService: razorLanguageService,
    registerHTMLLanguageService: registerHTMLLanguageService
};
function getMode() {
    var resolve, reject;
    return require("a0e51f515695a353");
}
function registerHTMLLanguageService(languageId) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : optionsDefault, modeConfiguration = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : getConfigurationDefault(languageId);
    var defaults = new LanguageServiceDefaultsImpl(languageId, options, modeConfiguration);
    var mode;
    var onLanguageListener = monaco_editor_core_exports.languages.onLanguage(languageId, _helpers.asyncToGenerator(_regeneratorRuntimeDefault.default.mark(function _callee() {
        return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
            while(1)switch(_ctx.prev = _ctx.next){
                case 0:
                    _ctx.next = 2;
                    return getMode();
                case 2:
                    mode = _ctx.sent.setupMode(defaults);
                case 3:
                case "end":
                    return _ctx.stop();
            }
        }, _callee);
    })));
    return {
        defaults: defaults,
        dispose: function() {
            onLanguageListener.dispose();
            mode === null || mode === void 0 ? void 0 : mode.dispose();
            mode = void 0;
        }
    };
}

},{"@swc/helpers":"erO4s","regenerator-runtime":"12Ae8","../../editor/editor.api.js":"8ZK4U","a0e51f515695a353":"cO3o1","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"cO3o1":[function(require,module,exports) {
module.exports = Promise.all([
    require("./helpers/browser/css-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("aEQC1")),
    require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("kQAof"))
]).then(function() {
    return module.bundle.root('dJIYT');
});

},{"./helpers/browser/css-loader":"jhZtD","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me","./helpers/browser/js-loader":"3dDkg"}],"2pTC8":[function(require,module,exports) {
var _editorApiJs = require("../editor/editor.api.js");
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/monaco.contribution.ts
var _abapContributionJs = require("./abap/abap.contribution.js");
var _apexContributionJs = require("./apex/apex.contribution.js");
var _azcliContributionJs = require("./azcli/azcli.contribution.js");
var _batContributionJs = require("./bat/bat.contribution.js");
var _bicepContributionJs = require("./bicep/bicep.contribution.js");
var _cameligoContributionJs = require("./cameligo/cameligo.contribution.js");
var _clojureContributionJs = require("./clojure/clojure.contribution.js");
var _coffeeContributionJs = require("./coffee/coffee.contribution.js");
var _cppContributionJs = require("./cpp/cpp.contribution.js");
var _csharpContributionJs = require("./csharp/csharp.contribution.js");
var _cspContributionJs = require("./csp/csp.contribution.js");
var _cssContributionJs = require("./css/css.contribution.js");
var _dartContributionJs = require("./dart/dart.contribution.js");
var _dockerfileContributionJs = require("./dockerfile/dockerfile.contribution.js");
var _eclContributionJs = require("./ecl/ecl.contribution.js");
var _elixirContributionJs = require("./elixir/elixir.contribution.js");
var _flow9ContributionJs = require("./flow9/flow9.contribution.js");
var _fsharpContributionJs = require("./fsharp/fsharp.contribution.js");
var _goContributionJs = require("./go/go.contribution.js");
var _graphqlContributionJs = require("./graphql/graphql.contribution.js");
var _handlebarsContributionJs = require("./handlebars/handlebars.contribution.js");
var _hclContributionJs = require("./hcl/hcl.contribution.js");
var _htmlContributionJs = require("./html/html.contribution.js");
var _iniContributionJs = require("./ini/ini.contribution.js");
var _javaContributionJs = require("./java/java.contribution.js");
var _javascriptContributionJs = require("./javascript/javascript.contribution.js");
var _juliaContributionJs = require("./julia/julia.contribution.js");
var _kotlinContributionJs = require("./kotlin/kotlin.contribution.js");
var _lessContributionJs = require("./less/less.contribution.js");
var _lexonContributionJs = require("./lexon/lexon.contribution.js");
var _luaContributionJs = require("./lua/lua.contribution.js");
var _liquidContributionJs = require("./liquid/liquid.contribution.js");
var _m3ContributionJs = require("./m3/m3.contribution.js");
var _markdownContributionJs = require("./markdown/markdown.contribution.js");
var _mipsContributionJs = require("./mips/mips.contribution.js");
var _msdaxContributionJs = require("./msdax/msdax.contribution.js");
var _mysqlContributionJs = require("./mysql/mysql.contribution.js");
var _objectiveCContributionJs = require("./objective-c/objective-c.contribution.js");
var _pascalContributionJs = require("./pascal/pascal.contribution.js");
var _pascaligoContributionJs = require("./pascaligo/pascaligo.contribution.js");
var _perlContributionJs = require("./perl/perl.contribution.js");
var _pgsqlContributionJs = require("./pgsql/pgsql.contribution.js");
var _phpContributionJs = require("./php/php.contribution.js");
var _plaContributionJs = require("./pla/pla.contribution.js");
var _postiatsContributionJs = require("./postiats/postiats.contribution.js");
var _powerqueryContributionJs = require("./powerquery/powerquery.contribution.js");
var _powershellContributionJs = require("./powershell/powershell.contribution.js");
var _protobufContributionJs = require("./protobuf/protobuf.contribution.js");
var _pugContributionJs = require("./pug/pug.contribution.js");
var _pythonContributionJs = require("./python/python.contribution.js");
var _qsharpContributionJs = require("./qsharp/qsharp.contribution.js");
var _rContributionJs = require("./r/r.contribution.js");
var _razorContributionJs = require("./razor/razor.contribution.js");
var _redisContributionJs = require("./redis/redis.contribution.js");
var _redshiftContributionJs = require("./redshift/redshift.contribution.js");
var _restructuredtextContributionJs = require("./restructuredtext/restructuredtext.contribution.js");
var _rubyContributionJs = require("./ruby/ruby.contribution.js");
var _rustContributionJs = require("./rust/rust.contribution.js");
var _sbContributionJs = require("./sb/sb.contribution.js");
var _scalaContributionJs = require("./scala/scala.contribution.js");
var _schemeContributionJs = require("./scheme/scheme.contribution.js");
var _scssContributionJs = require("./scss/scss.contribution.js");
var _shellContributionJs = require("./shell/shell.contribution.js");
var _solidityContributionJs = require("./solidity/solidity.contribution.js");
var _sophiaContributionJs = require("./sophia/sophia.contribution.js");
var _sparqlContributionJs = require("./sparql/sparql.contribution.js");
var _sqlContributionJs = require("./sql/sql.contribution.js");
var _stContributionJs = require("./st/st.contribution.js");
var _swiftContributionJs = require("./swift/swift.contribution.js");
var _systemverilogContributionJs = require("./systemverilog/systemverilog.contribution.js");
var _tclContributionJs = require("./tcl/tcl.contribution.js");
var _twigContributionJs = require("./twig/twig.contribution.js");
var _typescriptContributionJs = require("./typescript/typescript.contribution.js");
var _vbContributionJs = require("./vb/vb.contribution.js");
var _xmlContributionJs = require("./xml/xml.contribution.js");
var _yamlContributionJs = require("./yaml/yaml.contribution.js");

},{"../editor/editor.api.js":"8ZK4U","./abap/abap.contribution.js":"yZC4V","./apex/apex.contribution.js":"l1tpP","./azcli/azcli.contribution.js":"a2ADc","./bat/bat.contribution.js":"eDJVP","./bicep/bicep.contribution.js":"2d5ja","./cameligo/cameligo.contribution.js":"l3wvg","./clojure/clojure.contribution.js":"bgGI3","./coffee/coffee.contribution.js":"VCuCl","./cpp/cpp.contribution.js":"8KRxd","./csharp/csharp.contribution.js":"aDguc","./csp/csp.contribution.js":"k7ZWz","./css/css.contribution.js":"71fMS","./dart/dart.contribution.js":"bVwqK","./dockerfile/dockerfile.contribution.js":"lsvig","./ecl/ecl.contribution.js":"aQ5AS","./elixir/elixir.contribution.js":"js5Cm","./flow9/flow9.contribution.js":"6DSWO","./fsharp/fsharp.contribution.js":"7gE7v","./go/go.contribution.js":"a4UTC","./graphql/graphql.contribution.js":"fgKll","./handlebars/handlebars.contribution.js":"NUbPd","./hcl/hcl.contribution.js":"6xlFN","./html/html.contribution.js":"cUFc3","./ini/ini.contribution.js":"6s5pc","./java/java.contribution.js":"4FZuX","./javascript/javascript.contribution.js":"1TgQO","./julia/julia.contribution.js":"duUJ8","./kotlin/kotlin.contribution.js":"20C5D","./less/less.contribution.js":"9vqQJ","./lexon/lexon.contribution.js":"eaGxi","./lua/lua.contribution.js":"k3TFJ","./liquid/liquid.contribution.js":"8du83","./m3/m3.contribution.js":"jQX1V","./markdown/markdown.contribution.js":"eRPsr","./mips/mips.contribution.js":"dryZH","./msdax/msdax.contribution.js":"adRDC","./mysql/mysql.contribution.js":"2bVLK","./objective-c/objective-c.contribution.js":"f8TgC","./pascal/pascal.contribution.js":"cW24l","./pascaligo/pascaligo.contribution.js":"78DKm","./perl/perl.contribution.js":"1rNrl","./pgsql/pgsql.contribution.js":"brsXz","./php/php.contribution.js":"kmGIM","./pla/pla.contribution.js":"3puWV","./postiats/postiats.contribution.js":"alBWo","./powerquery/powerquery.contribution.js":"aJrSl","./powershell/powershell.contribution.js":"lQ8Sg","./protobuf/protobuf.contribution.js":"eJhWt","./pug/pug.contribution.js":"hjE7c","./python/python.contribution.js":"eTTHW","./qsharp/qsharp.contribution.js":"eQvET","./r/r.contribution.js":"je5wT","./razor/razor.contribution.js":"lGQtW","./redis/redis.contribution.js":"cHqFs","./redshift/redshift.contribution.js":"hrfRI","./restructuredtext/restructuredtext.contribution.js":"9xeLW","./ruby/ruby.contribution.js":"dQWAo","./rust/rust.contribution.js":"zQ8Pc","./sb/sb.contribution.js":"El5YC","./scala/scala.contribution.js":"S6OWx","./scheme/scheme.contribution.js":"H0dax","./scss/scss.contribution.js":"l4msj","./shell/shell.contribution.js":"1A7P6","./solidity/solidity.contribution.js":"kQVy8","./sophia/sophia.contribution.js":"ADSnf","./sparql/sparql.contribution.js":"ctWpE","./sql/sql.contribution.js":"htYRl","./st/st.contribution.js":"XzSaT","./swift/swift.contribution.js":"iugeb","./systemverilog/systemverilog.contribution.js":"6lM2x","./tcl/tcl.contribution.js":"8w9o2","./twig/twig.contribution.js":"awhJ3","./typescript/typescript.contribution.js":"9mQF2","./vb/vb.contribution.js":"eRsKP","./xml/xml.contribution.js":"j2V84","./yaml/yaml.contribution.js":"7jh99"}],"yZC4V":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/abap/abap.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "abap",
    extensions: [
        ".abap"
    ],
    aliases: [
        "abap",
        "ABAP"
    ],
    loader: function() {
        var resolve, reject;
        return require("2222dab18f38e720");
    }
});

},{"../_.contribution.js":"77fye","2222dab18f38e720":"aL3YJ"}],"77fye":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "loadLanguage", function() {
    return loadLanguage;
});
parcelHelpers.export(exports, "registerLanguage", function() {
    return registerLanguage;
});
var _helpers = require("@swc/helpers");
var _editorApiJs = require("../editor/editor.api.js");
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = function(target) {
    return __defProp(target, "__esModule", {
        value: true
    });
};
var __reExport = function(target, module, desc) {
    if (module && typeof module === "object" || typeof module === "function") {
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            var _loop = function(_iterator, _step) {
                var key = _step.value;
                if (!__hasOwnProp.call(target, key) && key !== "default") __defProp(target, key, {
                    get: function() {
                        return module[key];
                    },
                    enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable
                });
            };
            for(var _iterator = __getOwnPropNames(module)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop(_iterator, _step);
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
    }
    return target;
};
// src/fillers/monaco-editor-core.ts
var monaco_editor_core_exports = {};
__markAsModule(monaco_editor_core_exports);
__reExport(monaco_editor_core_exports, _editorApiJs);
// src/basic-languages/_.contribution.ts
var languageDefinitions = {};
var lazyLanguageLoaders = {};
var LazyLanguageLoader = /*#__PURE__*/ function() {
    "use strict";
    function _class(languageId) {
        var _this = this;
        _helpers.classCallCheck(this, _class);
        this._languageId = languageId;
        this._loadingTriggered = false;
        this._lazyLoadPromise = new Promise(function(resolve, reject) {
            _this._lazyLoadPromiseResolve = resolve;
            _this._lazyLoadPromiseReject = reject;
        });
    }
    _helpers.createClass(_class, [
        {
            key: "whenLoaded",
            value: function whenLoaded() {
                return this._lazyLoadPromise;
            }
        },
        {
            key: "load",
            value: function load() {
                if (!this._loadingTriggered) {
                    var _this = this;
                    this._loadingTriggered = true;
                    languageDefinitions[this._languageId].loader().then(function(mod) {
                        return _this._lazyLoadPromiseResolve(mod);
                    }, function(err) {
                        return _this._lazyLoadPromiseReject(err);
                    });
                }
                return this._lazyLoadPromise;
            }
        }
    ], [
        {
            key: "getOrCreate",
            value: function getOrCreate(languageId) {
                if (!lazyLanguageLoaders[languageId]) lazyLanguageLoaders[languageId] = new LazyLanguageLoader(languageId);
                return lazyLanguageLoaders[languageId];
            }
        }
    ]);
    return _class;
}();
function loadLanguage(languageId) {
    return LazyLanguageLoader.getOrCreate(languageId).load();
}
function registerLanguage(def) {
    var languageId = def.id;
    languageDefinitions[languageId] = def;
    monaco_editor_core_exports.languages.register(def);
    var lazyLanguageLoader = LazyLanguageLoader.getOrCreate(languageId);
    monaco_editor_core_exports.languages.setMonarchTokensProvider(languageId, lazyLanguageLoader.whenLoaded().then(function(mod) {
        return mod.language;
    }));
    monaco_editor_core_exports.languages.onLanguage(languageId, function() {
        lazyLanguageLoader.load().then(function(mod) {
            monaco_editor_core_exports.languages.setLanguageConfiguration(languageId, mod.conf);
        });
    });
}

},{"@swc/helpers":"erO4s","../editor/editor.api.js":"8ZK4U","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"aL3YJ":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("6wl9G")).then(function() {
    return module.bundle.root('jGOhG');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"l1tpP":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/apex/apex.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "apex",
    extensions: [
        ".cls"
    ],
    aliases: [
        "Apex",
        "apex"
    ],
    mimetypes: [
        "text/x-apex-source",
        "text/x-apex"
    ],
    loader: function() {
        var resolve, reject;
        return require("2b039a78141ad79d");
    }
});

},{"../_.contribution.js":"77fye","2b039a78141ad79d":"9ZgmO"}],"9ZgmO":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("lAxMW")).then(function() {
    return module.bundle.root('5khjg');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"a2ADc":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/azcli/azcli.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "azcli",
    extensions: [
        ".azcli"
    ],
    aliases: [
        "Azure CLI",
        "azcli"
    ],
    loader: function() {
        var resolve, reject;
        return require("f9bc8a5101853084");
    }
});

},{"../_.contribution.js":"77fye","f9bc8a5101853084":"b7als"}],"b7als":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("553sL")).then(function() {
    return module.bundle.root('ekLv2');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"eDJVP":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/bat/bat.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "bat",
    extensions: [
        ".bat",
        ".cmd"
    ],
    aliases: [
        "Batch",
        "bat"
    ],
    loader: function() {
        var resolve, reject;
        return require("944e59b66347512a");
    }
});

},{"../_.contribution.js":"77fye","944e59b66347512a":"8NZwq"}],"8NZwq":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("dLiKg")).then(function() {
    return module.bundle.root('3Hw7K');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"2d5ja":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/bicep/bicep.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "bicep",
    extensions: [
        ".bicep"
    ],
    aliases: [
        "Bicep"
    ],
    loader: function() {
        var resolve, reject;
        return require("b78fc73a1a8dd459");
    }
});

},{"../_.contribution.js":"77fye","b78fc73a1a8dd459":"4oxuH"}],"4oxuH":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("cmGXR")).then(function() {
    return module.bundle.root('6JDxU');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"l3wvg":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/cameligo/cameligo.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "cameligo",
    extensions: [
        ".mligo"
    ],
    aliases: [
        "Cameligo"
    ],
    loader: function() {
        var resolve, reject;
        return require("4df073125516cfe1");
    }
});

},{"../_.contribution.js":"77fye","4df073125516cfe1":"O9OUg"}],"O9OUg":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("db4qL")).then(function() {
    return module.bundle.root('7PeYG');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"bgGI3":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/clojure/clojure.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "clojure",
    extensions: [
        ".clj",
        ".cljs",
        ".cljc",
        ".edn"
    ],
    aliases: [
        "clojure",
        "Clojure"
    ],
    loader: function() {
        var resolve, reject;
        return require("efc6d2d6dd732733");
    }
});

},{"../_.contribution.js":"77fye","efc6d2d6dd732733":"5r38E"}],"5r38E":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("8YJo8")).then(function() {
    return module.bundle.root('9J6EJ');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"VCuCl":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/coffee/coffee.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "coffeescript",
    extensions: [
        ".coffee"
    ],
    aliases: [
        "CoffeeScript",
        "coffeescript",
        "coffee"
    ],
    mimetypes: [
        "text/x-coffeescript",
        "text/coffeescript"
    ],
    loader: function() {
        var resolve, reject;
        return require("731be2afb5352d12");
    }
});

},{"../_.contribution.js":"77fye","731be2afb5352d12":"fDjVD"}],"fDjVD":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("drMwd")).then(function() {
    return module.bundle.root('ix6g6');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"8KRxd":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/cpp/cpp.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "c",
    extensions: [
        ".c",
        ".h"
    ],
    aliases: [
        "C",
        "c"
    ],
    loader: function() {
        var resolve, reject;
        return require("f90a16598ad3c331");
    }
});
_contributionJs.registerLanguage({
    id: "cpp",
    extensions: [
        ".cpp",
        ".cc",
        ".cxx",
        ".hpp",
        ".hh",
        ".hxx"
    ],
    aliases: [
        "C++",
        "Cpp",
        "cpp"
    ],
    loader: function() {
        var resolve, reject;
        return require("f90a16598ad3c331");
    }
});

},{"../_.contribution.js":"77fye","f90a16598ad3c331":"5ibkF"}],"5ibkF":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("2THVe")).then(function() {
    return module.bundle.root('8D3K6');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"aDguc":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/csharp/csharp.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "csharp",
    extensions: [
        ".cs",
        ".csx",
        ".cake"
    ],
    aliases: [
        "C#",
        "csharp"
    ],
    loader: function() {
        var resolve, reject;
        return require("1c2e58a8715b7827");
    }
});

},{"../_.contribution.js":"77fye","1c2e58a8715b7827":"7k7q6"}],"7k7q6":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("axumX")).then(function() {
    return module.bundle.root('btFoW');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"k7ZWz":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/csp/csp.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "csp",
    extensions: [],
    aliases: [
        "CSP",
        "csp"
    ],
    loader: function() {
        var resolve, reject;
        return require("4468ff45a9ae2c7e");
    }
});

},{"../_.contribution.js":"77fye","4468ff45a9ae2c7e":"h1jUu"}],"h1jUu":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("3Kai6")).then(function() {
    return module.bundle.root('cwTw5');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"71fMS":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/css/css.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "css",
    extensions: [
        ".css"
    ],
    aliases: [
        "CSS",
        "css"
    ],
    mimetypes: [
        "text/css"
    ],
    loader: function() {
        var resolve, reject;
        return require("d99865f2db0c498e");
    }
});

},{"../_.contribution.js":"77fye","d99865f2db0c498e":"fv5ko"}],"fv5ko":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("6LXpv")).then(function() {
    return module.bundle.root('akd8g');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"bVwqK":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/dart/dart.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "dart",
    extensions: [
        ".dart"
    ],
    aliases: [
        "Dart",
        "dart"
    ],
    mimetypes: [
        "text/x-dart-source",
        "text/x-dart"
    ],
    loader: function() {
        var resolve, reject;
        return require("c5404ed901d0238c");
    }
});

},{"../_.contribution.js":"77fye","c5404ed901d0238c":"c12DY"}],"c12DY":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("JVDtk")).then(function() {
    return module.bundle.root('5o3gN');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"lsvig":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/dockerfile/dockerfile.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "dockerfile",
    extensions: [
        ".dockerfile"
    ],
    filenames: [
        "Dockerfile"
    ],
    aliases: [
        "Dockerfile"
    ],
    loader: function() {
        var resolve, reject;
        return require("80651bd4d98abc26");
    }
});

},{"../_.contribution.js":"77fye","80651bd4d98abc26":"awEDE"}],"awEDE":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("h7WIx")).then(function() {
    return module.bundle.root('hm68e');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"aQ5AS":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/ecl/ecl.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "ecl",
    extensions: [
        ".ecl"
    ],
    aliases: [
        "ECL",
        "Ecl",
        "ecl"
    ],
    loader: function() {
        var resolve, reject;
        return require("b4c7ad1d8cdbc3d0");
    }
});

},{"../_.contribution.js":"77fye","b4c7ad1d8cdbc3d0":"clyZp"}],"clyZp":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("1bnZa")).then(function() {
    return module.bundle.root('jBDcx');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"js5Cm":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/elixir/elixir.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "elixir",
    extensions: [
        ".ex",
        ".exs"
    ],
    aliases: [
        "Elixir",
        "elixir",
        "ex"
    ],
    loader: function() {
        var resolve, reject;
        return require("849cd8ce6ab94362");
    }
});

},{"../_.contribution.js":"77fye","849cd8ce6ab94362":"f6Jhl"}],"f6Jhl":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("aZaAb")).then(function() {
    return module.bundle.root('d2Afp');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"6DSWO":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/flow9/flow9.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "flow9",
    extensions: [
        ".flow"
    ],
    aliases: [
        "Flow9",
        "Flow",
        "flow9",
        "flow"
    ],
    loader: function() {
        var resolve, reject;
        return require("dfb427751cca10e1");
    }
});

},{"../_.contribution.js":"77fye","dfb427751cca10e1":"8x2Ff"}],"8x2Ff":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("j5AtM")).then(function() {
    return module.bundle.root('9AxiH');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"7gE7v":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/fsharp/fsharp.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "fsharp",
    extensions: [
        ".fs",
        ".fsi",
        ".ml",
        ".mli",
        ".fsx",
        ".fsscript"
    ],
    aliases: [
        "F#",
        "FSharp",
        "fsharp"
    ],
    loader: function() {
        var resolve, reject;
        return require("85afd44a6ac82846");
    }
});

},{"../_.contribution.js":"77fye","85afd44a6ac82846":"dTUUb"}],"dTUUb":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("6DTPz")).then(function() {
    return module.bundle.root('knAo2');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"a4UTC":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/go/go.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "go",
    extensions: [
        ".go"
    ],
    aliases: [
        "Go"
    ],
    loader: function() {
        var resolve, reject;
        return require("7beecab572d8c625");
    }
});

},{"../_.contribution.js":"77fye","7beecab572d8c625":"lunQO"}],"lunQO":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("79JCH")).then(function() {
    return module.bundle.root('8htzd');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"fgKll":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/graphql/graphql.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "graphql",
    extensions: [
        ".graphql",
        ".gql"
    ],
    aliases: [
        "GraphQL",
        "graphql",
        "gql"
    ],
    mimetypes: [
        "application/graphql"
    ],
    loader: function() {
        var resolve, reject;
        return require("7888c2cd6a453374");
    }
});

},{"../_.contribution.js":"77fye","7888c2cd6a453374":"5CUW7"}],"5CUW7":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("9jvOe")).then(function() {
    return module.bundle.root('4QCJX');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"NUbPd":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/handlebars/handlebars.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "handlebars",
    extensions: [
        ".handlebars",
        ".hbs"
    ],
    aliases: [
        "Handlebars",
        "handlebars",
        "hbs"
    ],
    mimetypes: [
        "text/x-handlebars-template"
    ],
    loader: function() {
        var resolve, reject;
        return require("cc5413b9c3ff9e12");
    }
});

},{"../_.contribution.js":"77fye","cc5413b9c3ff9e12":"dAfVa"}],"dAfVa":[function(require,module,exports) {
module.exports = Promise.all([
    require("./helpers/browser/css-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("aEQC1")),
    require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("7axw6"))
]).then(function() {
    return module.bundle.root('gMUCA');
});

},{"./helpers/browser/css-loader":"jhZtD","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me","./helpers/browser/js-loader":"3dDkg"}],"6xlFN":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/hcl/hcl.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "hcl",
    extensions: [
        ".tf",
        ".tfvars",
        ".hcl"
    ],
    aliases: [
        "Terraform",
        "tf",
        "HCL",
        "hcl"
    ],
    loader: function() {
        var resolve, reject;
        return require("bdd339aa44fa0208");
    }
});

},{"../_.contribution.js":"77fye","bdd339aa44fa0208":"er10e"}],"er10e":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("43Nft")).then(function() {
    return module.bundle.root('ccZTH');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"cUFc3":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/html/html.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "html",
    extensions: [
        ".html",
        ".htm",
        ".shtml",
        ".xhtml",
        ".mdoc",
        ".jsp",
        ".asp",
        ".aspx",
        ".jshtm"
    ],
    aliases: [
        "HTML",
        "htm",
        "html",
        "xhtml"
    ],
    mimetypes: [
        "text/html",
        "text/x-jshtm",
        "text/template",
        "text/ng-template"
    ],
    loader: function() {
        var resolve, reject;
        return require("15041d7c4ccfe9b");
    }
});

},{"../_.contribution.js":"77fye","15041d7c4ccfe9b":"gkEQ3"}],"gkEQ3":[function(require,module,exports) {
module.exports = Promise.all([
    require("./helpers/browser/css-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("aEQC1")),
    require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("5MmSA"))
]).then(function() {
    return module.bundle.root('gcXwL');
});

},{"./helpers/browser/css-loader":"jhZtD","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me","./helpers/browser/js-loader":"3dDkg"}],"6s5pc":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/ini/ini.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "ini",
    extensions: [
        ".ini",
        ".properties",
        ".gitconfig"
    ],
    filenames: [
        "config",
        ".gitattributes",
        ".gitconfig",
        ".editorconfig"
    ],
    aliases: [
        "Ini",
        "ini"
    ],
    loader: function() {
        var resolve, reject;
        return require("9816f6711fe05895");
    }
});

},{"../_.contribution.js":"77fye","9816f6711fe05895":"eKT5i"}],"eKT5i":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("gFZFU")).then(function() {
    return module.bundle.root('ihZOD');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"4FZuX":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/java/java.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "java",
    extensions: [
        ".java",
        ".jav"
    ],
    aliases: [
        "Java",
        "java"
    ],
    mimetypes: [
        "text/x-java-source",
        "text/x-java"
    ],
    loader: function() {
        var resolve, reject;
        return require("2628e9e83f1eaa5f");
    }
});

},{"../_.contribution.js":"77fye","2628e9e83f1eaa5f":"jMhGB"}],"jMhGB":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("4EmYD")).then(function() {
    return module.bundle.root('cPHpN');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"1TgQO":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/javascript/javascript.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "javascript",
    extensions: [
        ".js",
        ".es6",
        ".jsx",
        ".mjs"
    ],
    firstLine: "^#!.*\\bnode",
    filenames: [
        "jakefile"
    ],
    aliases: [
        "JavaScript",
        "javascript",
        "js"
    ],
    mimetypes: [
        "text/javascript"
    ],
    loader: function() {
        var resolve, reject;
        return require("b7c2dbbaabac61af");
    }
});

},{"../_.contribution.js":"77fye","b7c2dbbaabac61af":"6QbMd"}],"6QbMd":[function(require,module,exports) {
module.exports = Promise.all([
    require("./helpers/browser/css-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("aEQC1")),
    require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("L0c6V")),
    require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("6lkxQ"))
]).then(function() {
    return module.bundle.root('5Gtla');
});

},{"./helpers/browser/css-loader":"jhZtD","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me","./helpers/browser/js-loader":"3dDkg"}],"duUJ8":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/julia/julia.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "julia",
    extensions: [
        ".jl"
    ],
    aliases: [
        "julia",
        "Julia"
    ],
    loader: function() {
        var resolve, reject;
        return require("90f793f1ddf47197");
    }
});

},{"../_.contribution.js":"77fye","90f793f1ddf47197":"ggIch"}],"ggIch":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("7bQIe")).then(function() {
    return module.bundle.root('ihmOx');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"20C5D":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/kotlin/kotlin.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "kotlin",
    extensions: [
        ".kt"
    ],
    aliases: [
        "Kotlin",
        "kotlin"
    ],
    mimetypes: [
        "text/x-kotlin-source",
        "text/x-kotlin"
    ],
    loader: function() {
        var resolve, reject;
        return require("4d3b1f3e885a7682");
    }
});

},{"../_.contribution.js":"77fye","4d3b1f3e885a7682":"iLgMi"}],"iLgMi":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("aEfyd")).then(function() {
    return module.bundle.root('hFFZb');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"9vqQJ":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/less/less.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "less",
    extensions: [
        ".less"
    ],
    aliases: [
        "Less",
        "less"
    ],
    mimetypes: [
        "text/x-less",
        "text/less"
    ],
    loader: function() {
        var resolve, reject;
        return require("2bc0e7cf71e8461a");
    }
});

},{"../_.contribution.js":"77fye","2bc0e7cf71e8461a":"jwX0u"}],"jwX0u":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("93iRN")).then(function() {
    return module.bundle.root('7eA8X');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"eaGxi":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/lexon/lexon.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "lexon",
    extensions: [
        ".lex"
    ],
    aliases: [
        "Lexon"
    ],
    loader: function() {
        var resolve, reject;
        return require("1aa49d14c0d0315a");
    }
});

},{"../_.contribution.js":"77fye","1aa49d14c0d0315a":"hcYsQ"}],"hcYsQ":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("9Kdt6")).then(function() {
    return module.bundle.root('9Asxj');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"k3TFJ":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/lua/lua.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "lua",
    extensions: [
        ".lua"
    ],
    aliases: [
        "Lua",
        "lua"
    ],
    loader: function() {
        var resolve, reject;
        return require("2200087b2f4b639b");
    }
});

},{"../_.contribution.js":"77fye","2200087b2f4b639b":"2VQUY"}],"2VQUY":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("btk3p")).then(function() {
    return module.bundle.root('f7JHi');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"8du83":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/liquid/liquid.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "liquid",
    extensions: [
        ".liquid",
        ".html.liquid"
    ],
    aliases: [
        "Liquid",
        "liquid"
    ],
    mimetypes: [
        "application/liquid"
    ],
    loader: function() {
        var resolve, reject;
        return require("9c02e20d9fe8915e");
    }
});

},{"../_.contribution.js":"77fye","9c02e20d9fe8915e":"5BtIQ"}],"5BtIQ":[function(require,module,exports) {
module.exports = Promise.all([
    require("./helpers/browser/css-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("aEQC1")),
    require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("95ctL"))
]).then(function() {
    return module.bundle.root('9hayB');
});

},{"./helpers/browser/css-loader":"jhZtD","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me","./helpers/browser/js-loader":"3dDkg"}],"jQX1V":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/m3/m3.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "m3",
    extensions: [
        ".m3",
        ".i3",
        ".mg",
        ".ig"
    ],
    aliases: [
        "Modula-3",
        "Modula3",
        "modula3",
        "m3"
    ],
    loader: function() {
        var resolve, reject;
        return require("c3ae4a5ac9c0d322");
    }
});

},{"../_.contribution.js":"77fye","c3ae4a5ac9c0d322":"jTrJp"}],"jTrJp":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("ec2D9")).then(function() {
    return module.bundle.root('14Tb2');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"eRPsr":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/markdown/markdown.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "markdown",
    extensions: [
        ".md",
        ".markdown",
        ".mdown",
        ".mkdn",
        ".mkd",
        ".mdwn",
        ".mdtxt",
        ".mdtext"
    ],
    aliases: [
        "Markdown",
        "markdown"
    ],
    loader: function() {
        var resolve, reject;
        return require("95a4bae410bfcd72");
    }
});

},{"../_.contribution.js":"77fye","95a4bae410bfcd72":"13Q66"}],"13Q66":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("9ECcX")).then(function() {
    return module.bundle.root('g7pMI');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"dryZH":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/mips/mips.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "mips",
    extensions: [
        ".s"
    ],
    aliases: [
        "MIPS",
        "MIPS-V"
    ],
    mimetypes: [
        "text/x-mips",
        "text/mips",
        "text/plaintext"
    ],
    loader: function() {
        var resolve, reject;
        return require("22f12fab2befa1ea");
    }
});

},{"../_.contribution.js":"77fye","22f12fab2befa1ea":"8XqpM"}],"8XqpM":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("gKeMR")).then(function() {
    return module.bundle.root('8xfEy');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"adRDC":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/msdax/msdax.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "msdax",
    extensions: [
        ".dax",
        ".msdax"
    ],
    aliases: [
        "DAX",
        "MSDAX"
    ],
    loader: function() {
        var resolve, reject;
        return require("863eca14a2cee75d");
    }
});

},{"../_.contribution.js":"77fye","863eca14a2cee75d":"9lGoV"}],"9lGoV":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("aEBJJ")).then(function() {
    return module.bundle.root('iTxkY');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"2bVLK":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/mysql/mysql.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "mysql",
    extensions: [],
    aliases: [
        "MySQL",
        "mysql"
    ],
    loader: function() {
        var resolve, reject;
        return require("b00fe13dc5bed56");
    }
});

},{"../_.contribution.js":"77fye","b00fe13dc5bed56":"lv10J"}],"lv10J":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("cmc48")).then(function() {
    return module.bundle.root('nHARV');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"f8TgC":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/objective-c/objective-c.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "objective-c",
    extensions: [
        ".m"
    ],
    aliases: [
        "Objective-C"
    ],
    loader: function() {
        var resolve, reject;
        return require("d7e73aa1581c1713");
    }
});

},{"../_.contribution.js":"77fye","d7e73aa1581c1713":"cCJIL"}],"cCJIL":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("g8YBE")).then(function() {
    return module.bundle.root('5eNuF');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"cW24l":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/pascal/pascal.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "pascal",
    extensions: [
        ".pas",
        ".p",
        ".pp"
    ],
    aliases: [
        "Pascal",
        "pas"
    ],
    mimetypes: [
        "text/x-pascal-source",
        "text/x-pascal"
    ],
    loader: function() {
        var resolve, reject;
        return require("bcf927a6a10f9f19");
    }
});

},{"../_.contribution.js":"77fye","bcf927a6a10f9f19":"kFZ5n"}],"kFZ5n":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("49PDH")).then(function() {
    return module.bundle.root('8LYdl');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"78DKm":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/pascaligo/pascaligo.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "pascaligo",
    extensions: [
        ".ligo"
    ],
    aliases: [
        "Pascaligo",
        "ligo"
    ],
    loader: function() {
        var resolve, reject;
        return require("f09da6e65f151a27");
    }
});

},{"../_.contribution.js":"77fye","f09da6e65f151a27":"hg9wV"}],"hg9wV":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("dUQwQ")).then(function() {
    return module.bundle.root('9MwDq');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"1rNrl":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/perl/perl.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "perl",
    extensions: [
        ".pl"
    ],
    aliases: [
        "Perl",
        "pl"
    ],
    loader: function() {
        var resolve, reject;
        return require("6d4b0bdc41cca681");
    }
});

},{"../_.contribution.js":"77fye","6d4b0bdc41cca681":"36jmZ"}],"36jmZ":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("6Em52")).then(function() {
    return module.bundle.root('cgff8');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"brsXz":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/pgsql/pgsql.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "pgsql",
    extensions: [],
    aliases: [
        "PostgreSQL",
        "postgres",
        "pg",
        "postgre"
    ],
    loader: function() {
        var resolve, reject;
        return require("97229778332cddc8");
    }
});

},{"../_.contribution.js":"77fye","97229778332cddc8":"gtMLu"}],"gtMLu":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("gTQ72")).then(function() {
    return module.bundle.root('6IntH');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"kmGIM":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/php/php.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "php",
    extensions: [
        ".php",
        ".php4",
        ".php5",
        ".phtml",
        ".ctp"
    ],
    aliases: [
        "PHP",
        "php"
    ],
    mimetypes: [
        "application/x-php"
    ],
    loader: function() {
        var resolve, reject;
        return require("439d7a70b6f75fdb");
    }
});

},{"../_.contribution.js":"77fye","439d7a70b6f75fdb":"i8gcJ"}],"i8gcJ":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("8iCMW")).then(function() {
    return module.bundle.root('lLL4l');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"3puWV":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/pla/pla.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "pla",
    extensions: [
        ".pla"
    ],
    loader: function() {
        var resolve, reject;
        return require("bb76c0da72d5b314");
    }
});

},{"../_.contribution.js":"77fye","bb76c0da72d5b314":"7H0eN"}],"7H0eN":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("di9bo")).then(function() {
    return module.bundle.root('548ov');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"alBWo":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/postiats/postiats.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "postiats",
    extensions: [
        ".dats",
        ".sats",
        ".hats"
    ],
    aliases: [
        "ATS",
        "ATS/Postiats"
    ],
    loader: function() {
        var resolve, reject;
        return require("926b2864380cf900");
    }
});

},{"../_.contribution.js":"77fye","926b2864380cf900":"9FgI0"}],"9FgI0":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("fc836")).then(function() {
    return module.bundle.root('aSJXe');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"aJrSl":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/powerquery/powerquery.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "powerquery",
    extensions: [
        ".pq",
        ".pqm"
    ],
    aliases: [
        "PQ",
        "M",
        "Power Query",
        "Power Query M"
    ],
    loader: function() {
        var resolve, reject;
        return require("b8feae534a0f6635");
    }
});

},{"../_.contribution.js":"77fye","b8feae534a0f6635":"c5kyJ"}],"c5kyJ":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("edhAU")).then(function() {
    return module.bundle.root('bCMNU');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"lQ8Sg":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/powershell/powershell.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "powershell",
    extensions: [
        ".ps1",
        ".psm1",
        ".psd1"
    ],
    aliases: [
        "PowerShell",
        "powershell",
        "ps",
        "ps1"
    ],
    loader: function() {
        var resolve, reject;
        return require("60625d2587716d38");
    }
});

},{"../_.contribution.js":"77fye","60625d2587716d38":"65BUc"}],"65BUc":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("jvSTo")).then(function() {
    return module.bundle.root('4ivHV');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"eJhWt":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/protobuf/protobuf.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "proto",
    extensions: [
        ".proto"
    ],
    aliases: [
        "protobuf",
        "Protocol Buffers"
    ],
    loader: function() {
        var resolve, reject;
        return require("5880dbb3fdd63c91");
    }
});

},{"../_.contribution.js":"77fye","5880dbb3fdd63c91":"3PKhT"}],"3PKhT":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("5jPb2")).then(function() {
    return module.bundle.root('58RXP');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"hjE7c":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/pug/pug.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "pug",
    extensions: [
        ".jade",
        ".pug"
    ],
    aliases: [
        "Pug",
        "Jade",
        "jade"
    ],
    loader: function() {
        var resolve, reject;
        return require("d979089e57b941da");
    }
});

},{"../_.contribution.js":"77fye","d979089e57b941da":"9v8ZL"}],"9v8ZL":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("17bju")).then(function() {
    return module.bundle.root('70shU');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"eTTHW":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/python/python.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "python",
    extensions: [
        ".py",
        ".rpy",
        ".pyw",
        ".cpy",
        ".gyp",
        ".gypi"
    ],
    aliases: [
        "Python",
        "py"
    ],
    firstLine: "^#!/.*\\bpython[0-9.-]*\\b",
    loader: function() {
        var resolve, reject;
        return require("b7288d6f5bd941e7");
    }
});

},{"../_.contribution.js":"77fye","b7288d6f5bd941e7":"a2aWR"}],"a2aWR":[function(require,module,exports) {
module.exports = Promise.all([
    require("./helpers/browser/css-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("aEQC1")),
    require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("kSA0K"))
]).then(function() {
    return module.bundle.root('9iSgc');
});

},{"./helpers/browser/css-loader":"jhZtD","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me","./helpers/browser/js-loader":"3dDkg"}],"eQvET":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/qsharp/qsharp.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "qsharp",
    extensions: [
        ".qs"
    ],
    aliases: [
        "Q#",
        "qsharp"
    ],
    loader: function() {
        var resolve, reject;
        return require("3ed049eab711395d");
    }
});

},{"../_.contribution.js":"77fye","3ed049eab711395d":"8DkMe"}],"8DkMe":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("4NN8B")).then(function() {
    return module.bundle.root('BsicZ');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"je5wT":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/r/r.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "r",
    extensions: [
        ".r",
        ".rhistory",
        ".rmd",
        ".rprofile",
        ".rt"
    ],
    aliases: [
        "R",
        "r"
    ],
    loader: function() {
        var resolve, reject;
        return require("204dbae2f9534fd7");
    }
});

},{"../_.contribution.js":"77fye","204dbae2f9534fd7":"iOftQ"}],"iOftQ":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("jakxL")).then(function() {
    return module.bundle.root('4XpGS');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"lGQtW":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/razor/razor.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "razor",
    extensions: [
        ".cshtml"
    ],
    aliases: [
        "Razor",
        "razor"
    ],
    mimetypes: [
        "text/x-cshtml"
    ],
    loader: function() {
        var resolve, reject;
        return require("4975775f9ef2fce");
    }
});

},{"../_.contribution.js":"77fye","4975775f9ef2fce":"41TFC"}],"41TFC":[function(require,module,exports) {
module.exports = Promise.all([
    require("./helpers/browser/css-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("aEQC1")),
    require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("jclB6"))
]).then(function() {
    return module.bundle.root('7mYHD');
});

},{"./helpers/browser/css-loader":"jhZtD","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me","./helpers/browser/js-loader":"3dDkg"}],"cHqFs":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/redis/redis.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "redis",
    extensions: [
        ".redis"
    ],
    aliases: [
        "redis"
    ],
    loader: function() {
        var resolve, reject;
        return require("4b3c5c477d2611af");
    }
});

},{"../_.contribution.js":"77fye","4b3c5c477d2611af":"isZCe"}],"isZCe":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("4XRQQ")).then(function() {
    return module.bundle.root('gcPnT');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"hrfRI":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/redshift/redshift.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "redshift",
    extensions: [],
    aliases: [
        "Redshift",
        "redshift"
    ],
    loader: function() {
        var resolve, reject;
        return require("d77d4b5826236be0");
    }
});

},{"../_.contribution.js":"77fye","d77d4b5826236be0":"dHebG"}],"dHebG":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("fweDw")).then(function() {
    return module.bundle.root('f1SNl');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"9xeLW":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/restructuredtext/restructuredtext.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "restructuredtext",
    extensions: [
        ".rst"
    ],
    aliases: [
        "reStructuredText",
        "restructuredtext"
    ],
    loader: function() {
        var resolve, reject;
        return require("b39507463ca87cb0");
    }
});

},{"../_.contribution.js":"77fye","b39507463ca87cb0":"d4DYu"}],"d4DYu":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("gF2QE")).then(function() {
    return module.bundle.root('gOBrk');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"dQWAo":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/ruby/ruby.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "ruby",
    extensions: [
        ".rb",
        ".rbx",
        ".rjs",
        ".gemspec",
        ".pp"
    ],
    filenames: [
        "rakefile",
        "Gemfile"
    ],
    aliases: [
        "Ruby",
        "rb"
    ],
    loader: function() {
        var resolve, reject;
        return require("95232f2e86229790");
    }
});

},{"../_.contribution.js":"77fye","95232f2e86229790":"15MYq"}],"15MYq":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("9w6lf")).then(function() {
    return module.bundle.root('49DGz');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"zQ8Pc":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/rust/rust.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "rust",
    extensions: [
        ".rs",
        ".rlib"
    ],
    aliases: [
        "Rust",
        "rust"
    ],
    loader: function() {
        var resolve, reject;
        return require("91e1029c58544cbd");
    }
});

},{"../_.contribution.js":"77fye","91e1029c58544cbd":"bPFdR"}],"bPFdR":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("cBes8")).then(function() {
    return module.bundle.root('8nmk9');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"El5YC":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/sb/sb.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "sb",
    extensions: [
        ".sb"
    ],
    aliases: [
        "Small Basic",
        "sb"
    ],
    loader: function() {
        var resolve, reject;
        return require("75c7073df35c9d6");
    }
});

},{"../_.contribution.js":"77fye","75c7073df35c9d6":"5ycWE"}],"5ycWE":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("bljUh")).then(function() {
    return module.bundle.root('kKjsn');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"S6OWx":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/scala/scala.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "scala",
    extensions: [
        ".scala",
        ".sc",
        ".sbt"
    ],
    aliases: [
        "Scala",
        "scala",
        "SBT",
        "Sbt",
        "sbt",
        "Dotty",
        "dotty"
    ],
    mimetypes: [
        "text/x-scala-source",
        "text/x-scala",
        "text/x-sbt",
        "text/x-dotty"
    ],
    loader: function() {
        var resolve, reject;
        return require("57c85847b3d2a49a");
    }
});

},{"../_.contribution.js":"77fye","57c85847b3d2a49a":"XvBHS"}],"XvBHS":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("6K510")).then(function() {
    return module.bundle.root('fAym3');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"H0dax":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/scheme/scheme.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "scheme",
    extensions: [
        ".scm",
        ".ss",
        ".sch",
        ".rkt"
    ],
    aliases: [
        "scheme",
        "Scheme"
    ],
    loader: function() {
        var resolve, reject;
        return require("739e3c2a00036a49");
    }
});

},{"../_.contribution.js":"77fye","739e3c2a00036a49":"723Xe"}],"723Xe":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("dmx6i")).then(function() {
    return module.bundle.root('iZAbg');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"l4msj":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/scss/scss.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "scss",
    extensions: [
        ".scss"
    ],
    aliases: [
        "Sass",
        "sass",
        "scss"
    ],
    mimetypes: [
        "text/x-scss",
        "text/scss"
    ],
    loader: function() {
        var resolve, reject;
        return require("8edfe11ca05ad8ce");
    }
});

},{"../_.contribution.js":"77fye","8edfe11ca05ad8ce":"aK8xM"}],"aK8xM":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("2FXxp")).then(function() {
    return module.bundle.root('4dlPo');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"1A7P6":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/shell/shell.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "shell",
    extensions: [
        ".sh",
        ".bash"
    ],
    aliases: [
        "Shell",
        "sh"
    ],
    loader: function() {
        var resolve, reject;
        return require("6d8f3d203270c749");
    }
});

},{"../_.contribution.js":"77fye","6d8f3d203270c749":"Mel8c"}],"Mel8c":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("holvA")).then(function() {
    return module.bundle.root('i9q75');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"kQVy8":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/solidity/solidity.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "sol",
    extensions: [
        ".sol"
    ],
    aliases: [
        "sol",
        "solidity",
        "Solidity"
    ],
    loader: function() {
        var resolve, reject;
        return require("64139522fe074eed");
    }
});

},{"../_.contribution.js":"77fye","64139522fe074eed":"dLb8E"}],"dLb8E":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("1k0Py")).then(function() {
    return module.bundle.root('lYd5h');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"ADSnf":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/sophia/sophia.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "aes",
    extensions: [
        ".aes"
    ],
    aliases: [
        "aes",
        "sophia",
        "Sophia"
    ],
    loader: function() {
        var resolve, reject;
        return require("fa9df0c7fc363989");
    }
});

},{"../_.contribution.js":"77fye","fa9df0c7fc363989":"6I0RS"}],"6I0RS":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("iOYqn")).then(function() {
    return module.bundle.root('cYvZU');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"ctWpE":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/sparql/sparql.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "sparql",
    extensions: [
        ".rq"
    ],
    aliases: [
        "sparql",
        "SPARQL"
    ],
    loader: function() {
        var resolve, reject;
        return require("452c9cad07bf9292");
    }
});

},{"../_.contribution.js":"77fye","452c9cad07bf9292":"eAB66"}],"eAB66":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("cgYkx")).then(function() {
    return module.bundle.root('lxSwR');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"htYRl":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/sql/sql.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "sql",
    extensions: [
        ".sql"
    ],
    aliases: [
        "SQL"
    ],
    loader: function() {
        var resolve, reject;
        return require("a173612a6841aa2b");
    }
});

},{"../_.contribution.js":"77fye","a173612a6841aa2b":"8zt2j"}],"8zt2j":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("7Z0Dj")).then(function() {
    return module.bundle.root('fRqcb');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"XzSaT":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/st/st.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "st",
    extensions: [
        ".st",
        ".iecst",
        ".iecplc",
        ".lc3lib"
    ],
    aliases: [
        "StructuredText",
        "scl",
        "stl"
    ],
    loader: function() {
        var resolve, reject;
        return require("a7ea9b8af0a76285");
    }
});

},{"../_.contribution.js":"77fye","a7ea9b8af0a76285":"jMhT5"}],"jMhT5":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("bbSfg")).then(function() {
    return module.bundle.root('3C7BX');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"iugeb":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/swift/swift.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "swift",
    aliases: [
        "Swift",
        "swift"
    ],
    extensions: [
        ".swift"
    ],
    mimetypes: [
        "text/swift"
    ],
    loader: function() {
        var resolve, reject;
        return require("44b5c0e2f5efbc0b");
    }
});

},{"../_.contribution.js":"77fye","44b5c0e2f5efbc0b":"6nKZa"}],"6nKZa":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("1NZ7J")).then(function() {
    return module.bundle.root('8eMug');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"6lM2x":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/systemverilog/systemverilog.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "systemverilog",
    extensions: [
        ".sv",
        ".svh"
    ],
    aliases: [
        "SV",
        "sv",
        "SystemVerilog",
        "systemverilog"
    ],
    loader: function() {
        var resolve, reject;
        return require("a364eedc66df1f78");
    }
});
_contributionJs.registerLanguage({
    id: "verilog",
    extensions: [
        ".v",
        ".vh"
    ],
    aliases: [
        "V",
        "v",
        "Verilog",
        "verilog"
    ],
    loader: function() {
        var resolve, reject;
        return require("a364eedc66df1f78");
    }
});

},{"../_.contribution.js":"77fye","a364eedc66df1f78":"8ZSu3"}],"8ZSu3":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("4GjKg")).then(function() {
    return module.bundle.root('k4LLg');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"8w9o2":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/tcl/tcl.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "tcl",
    extensions: [
        ".tcl"
    ],
    aliases: [
        "tcl",
        "Tcl",
        "tcltk",
        "TclTk",
        "tcl/tk",
        "Tcl/Tk"
    ],
    loader: function() {
        var resolve, reject;
        return require("8905d86690c2eab7");
    }
});

},{"../_.contribution.js":"77fye","8905d86690c2eab7":"aaaNk"}],"aaaNk":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("gMhGf")).then(function() {
    return module.bundle.root('dNoHH');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"awhJ3":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/twig/twig.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "twig",
    extensions: [
        ".twig"
    ],
    aliases: [
        "Twig",
        "twig"
    ],
    mimetypes: [
        "text/x-twig"
    ],
    loader: function() {
        var resolve, reject;
        return require("c104844982e496d");
    }
});

},{"../_.contribution.js":"77fye","c104844982e496d":"byZyK"}],"byZyK":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("8hb7Q")).then(function() {
    return module.bundle.root('iEKIM');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"9mQF2":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/typescript/typescript.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "typescript",
    extensions: [
        ".ts",
        ".tsx"
    ],
    aliases: [
        "TypeScript",
        "ts",
        "typescript"
    ],
    mimetypes: [
        "text/typescript"
    ],
    loader: function() {
        var resolve, reject;
        return require("28a2bc63450d6e77");
    }
});

},{"../_.contribution.js":"77fye","28a2bc63450d6e77":"3fRPp"}],"3fRPp":[function(require,module,exports) {
module.exports = Promise.all([
    require("./helpers/browser/css-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("aEQC1")),
    require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("L0c6V"))
]).then(function() {
    return module.bundle.root('cpqzj');
});

},{"./helpers/browser/css-loader":"jhZtD","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me","./helpers/browser/js-loader":"3dDkg"}],"eRsKP":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/vb/vb.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "vb",
    extensions: [
        ".vb"
    ],
    aliases: [
        "Visual Basic",
        "vb"
    ],
    loader: function() {
        var resolve, reject;
        return require("1eb1a9bef4f4dc03");
    }
});

},{"../_.contribution.js":"77fye","1eb1a9bef4f4dc03":"iPqJM"}],"iPqJM":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("kTEGP")).then(function() {
    return module.bundle.root('ahteG');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"j2V84":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/xml/xml.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "xml",
    extensions: [
        ".xml",
        ".dtd",
        ".ascx",
        ".csproj",
        ".config",
        ".wxi",
        ".wxl",
        ".wxs",
        ".xaml",
        ".svg",
        ".svgz",
        ".opf",
        ".xsl"
    ],
    firstLine: "(\\<\\?xml.*)|(\\<svg)|(\\<\\!doctype\\s+svg)",
    aliases: [
        "XML",
        "xml"
    ],
    mimetypes: [
        "text/xml",
        "application/xml",
        "application/xaml+xml",
        "application/xml-dtd"
    ],
    loader: function() {
        var resolve, reject;
        return require("e3b27770e2fdc230");
    }
});

},{"../_.contribution.js":"77fye","e3b27770e2fdc230":"aApl6"}],"aApl6":[function(require,module,exports) {
module.exports = Promise.all([
    require("./helpers/browser/css-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("aEQC1")),
    require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("fY4kd"))
]).then(function() {
    return module.bundle.root('9Iw6O');
});

},{"./helpers/browser/css-loader":"jhZtD","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me","./helpers/browser/js-loader":"3dDkg"}],"7jh99":[function(require,module,exports) {
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/ // src/basic-languages/yaml/yaml.contribution.ts
var _contributionJs = require("../_.contribution.js");
_contributionJs.registerLanguage({
    id: "yaml",
    extensions: [
        ".yaml",
        ".yml"
    ],
    aliases: [
        "YAML",
        "yaml",
        "YML",
        "yml"
    ],
    mimetypes: [
        "application/x-yaml",
        "text/x-yaml"
    ],
    loader: function() {
        var resolve, reject;
        return require("c74deb965a27e38f");
    }
});

},{"../_.contribution.js":"77fye","c74deb965a27e38f":"gaNcg"}],"gaNcg":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("3BSLm")).then(function() {
    return module.bundle.root('gEbHE');
});

},{"./helpers/browser/js-loader":"3dDkg","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"1hxHI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _editorAllJs = require("./editor.all.js");
var _accessibilityHelpJs = require("./standalone/browser/accessibilityHelp/accessibilityHelp.js");
var _iPadShowKeyboardJs = require("./standalone/browser/iPadShowKeyboard/iPadShowKeyboard.js");
var _inspectTokensJs = require("./standalone/browser/inspectTokens/inspectTokens.js");
var _standaloneHelpQuickAccessJs = require("./standalone/browser/quickAccess/standaloneHelpQuickAccess.js");
var _standaloneGotoLineQuickAccessJs = require("./standalone/browser/quickAccess/standaloneGotoLineQuickAccess.js");
var _standaloneGotoSymbolQuickAccessJs = require("./standalone/browser/quickAccess/standaloneGotoSymbolQuickAccess.js");
var _standaloneCommandsQuickAccessJs = require("./standalone/browser/quickAccess/standaloneCommandsQuickAccess.js");
var _standaloneReferenceSearchJs = require("./standalone/browser/referenceSearch/standaloneReferenceSearch.js");
var _toggleHighContrastJs = require("./standalone/browser/toggleHighContrast/toggleHighContrast.js");
var _editorApiJs = require("./editor.api.js");
parcelHelpers.exportAll(_editorApiJs, exports);

},{"./editor.all.js":"hKKdX","./standalone/browser/accessibilityHelp/accessibilityHelp.js":"2bfvT","./standalone/browser/iPadShowKeyboard/iPadShowKeyboard.js":"dG7U7","./standalone/browser/inspectTokens/inspectTokens.js":"5JtmY","./standalone/browser/quickAccess/standaloneHelpQuickAccess.js":"apeKH","./standalone/browser/quickAccess/standaloneGotoLineQuickAccess.js":"ScNzc","./standalone/browser/quickAccess/standaloneGotoSymbolQuickAccess.js":"43DCE","./standalone/browser/quickAccess/standaloneCommandsQuickAccess.js":"5IR8K","./standalone/browser/referenceSearch/standaloneReferenceSearch.js":"4b0k3","./standalone/browser/toggleHighContrast/toggleHighContrast.js":"fyzaj","./editor.api.js":"8ZK4U","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"hKKdX":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _coreCommandsJs = require("./browser/controller/coreCommands.js");
var _codeEditorWidgetJs = require("./browser/widget/codeEditorWidget.js");
var _diffEditorWidgetJs = require("./browser/widget/diffEditorWidget.js");
var _diffNavigatorJs = require("./browser/widget/diffNavigator.js");
var _anchorSelectJs = require("./contrib/anchorSelect/anchorSelect.js");
var _bracketMatchingJs = require("./contrib/bracketMatching/bracketMatching.js");
var _caretOperationsJs = require("./contrib/caretOperations/caretOperations.js");
var _transposeJs = require("./contrib/caretOperations/transpose.js");
var _clipboardJs = require("./contrib/clipboard/clipboard.js");
var _codeActionContributionsJs = require("./contrib/codeAction/codeActionContributions.js");
var _codelensControllerJs = require("./contrib/codelens/codelensController.js");
var _colorContributionsJs = require("./contrib/colorPicker/colorContributions.js");
var _commentJs = require("./contrib/comment/comment.js");
var _contextmenuJs = require("./contrib/contextmenu/contextmenu.js");
var _cursorUndoJs = require("./contrib/cursorUndo/cursorUndo.js");
var _dndJs = require("./contrib/dnd/dnd.js");
var _findControllerJs = require("./contrib/find/findController.js");
var _foldingJs = require("./contrib/folding/folding.js");
var _fontZoomJs = require("./contrib/fontZoom/fontZoom.js");
var _formatActionsJs = require("./contrib/format/formatActions.js");
var _documentSymbolsJs = require("./contrib/documentSymbols/documentSymbols.js");
var _ghostTextControllerJs = require("./contrib/inlineCompletions/ghostTextController.js");
var _goToCommandsJs = require("./contrib/gotoSymbol/goToCommands.js");
var _goToDefinitionAtPositionJs = require("./contrib/gotoSymbol/link/goToDefinitionAtPosition.js");
var _gotoErrorJs = require("./contrib/gotoError/gotoError.js");
var _hoverJs = require("./contrib/hover/hover.js");
var _indentationJs = require("./contrib/indentation/indentation.js");
var _inlayHintsControllerJs = require("./contrib/inlayHints/inlayHintsController.js");
var _inPlaceReplaceJs = require("./contrib/inPlaceReplace/inPlaceReplace.js");
var _lineSelectionJs = require("./contrib/lineSelection/lineSelection.js");
var _linesOperationsJs = require("./contrib/linesOperations/linesOperations.js");
var _linkedEditingJs = require("./contrib/linkedEditing/linkedEditing.js");
var _linksJs = require("./contrib/links/links.js");
var _multicursorJs = require("./contrib/multicursor/multicursor.js");
var _parameterHintsJs = require("./contrib/parameterHints/parameterHints.js");
var _renameJs = require("./contrib/rename/rename.js");
var _smartSelectJs = require("./contrib/smartSelect/smartSelect.js");
var _snippetController2Js = require("./contrib/snippet/snippetController2.js");
var _suggestControllerJs = require("./contrib/suggest/suggestController.js");
var _tokenizationJs = require("./contrib/tokenization/tokenization.js");
var _toggleTabFocusModeJs = require("./contrib/toggleTabFocusMode/toggleTabFocusMode.js");
var _unicodeHighlighterJs = require("./contrib/unicodeHighlighter/unicodeHighlighter.js");
var _unusualLineTerminatorsJs = require("./contrib/unusualLineTerminators/unusualLineTerminators.js");
var _viewportSemanticTokensJs = require("./contrib/viewportSemanticTokens/viewportSemanticTokens.js");
var _wordHighlighterJs = require("./contrib/wordHighlighter/wordHighlighter.js");
var _wordOperationsJs = require("./contrib/wordOperations/wordOperations.js");
var _wordPartOperationsJs = require("./contrib/wordPartOperations/wordPartOperations.js");
// Load up these strings even in VSCode, even if they are not used
// in order to get them translated
var _standaloneStringsJs = require("./common/standaloneStrings.js");
var _codiconStylesJs = require("../base/browser/ui/codicons/codiconStyles.js"); // The codicons are defined here and must be loaded

},{"./browser/controller/coreCommands.js":"3tROU","./browser/widget/codeEditorWidget.js":"lVDO3","./browser/widget/diffEditorWidget.js":"9RAhM","./browser/widget/diffNavigator.js":"6x9sv","./contrib/anchorSelect/anchorSelect.js":"k1eXp","./contrib/bracketMatching/bracketMatching.js":"kKClp","./contrib/caretOperations/caretOperations.js":"25uGX","./contrib/caretOperations/transpose.js":"7TyCY","./contrib/clipboard/clipboard.js":"dAOTt","./contrib/codeAction/codeActionContributions.js":"k0FoE","./contrib/codelens/codelensController.js":"gETuC","./contrib/colorPicker/colorContributions.js":"fwHSt","./contrib/comment/comment.js":"9NtgH","./contrib/contextmenu/contextmenu.js":"hcNOg","./contrib/cursorUndo/cursorUndo.js":"geqyf","./contrib/dnd/dnd.js":"aOdfE","./contrib/find/findController.js":"kgAfF","./contrib/folding/folding.js":"f2IpV","./contrib/fontZoom/fontZoom.js":"lIHX7","./contrib/format/formatActions.js":"eT27D","./contrib/documentSymbols/documentSymbols.js":"b3pN7","./contrib/inlineCompletions/ghostTextController.js":"kRSDa","./contrib/gotoSymbol/goToCommands.js":"h1pW2","./contrib/gotoSymbol/link/goToDefinitionAtPosition.js":"9tsTR","./contrib/gotoError/gotoError.js":"kfzPn","./contrib/hover/hover.js":"3r6GV","./contrib/indentation/indentation.js":"7J4Ud","./contrib/inlayHints/inlayHintsController.js":"bbsil","./contrib/inPlaceReplace/inPlaceReplace.js":"4qBz8","./contrib/lineSelection/lineSelection.js":"kySWE","./contrib/linesOperations/linesOperations.js":"aB5jB","./contrib/linkedEditing/linkedEditing.js":"cVXJH","./contrib/links/links.js":"8Hfzi","./contrib/multicursor/multicursor.js":"ciPbW","./contrib/parameterHints/parameterHints.js":"i7PH7","./contrib/rename/rename.js":"72prI","./contrib/smartSelect/smartSelect.js":"lTVcH","./contrib/snippet/snippetController2.js":"gtyum","./contrib/suggest/suggestController.js":"anMj7","./contrib/tokenization/tokenization.js":"kRx40","./contrib/toggleTabFocusMode/toggleTabFocusMode.js":"brrTf","./contrib/unicodeHighlighter/unicodeHighlighter.js":"elscl","./contrib/unusualLineTerminators/unusualLineTerminators.js":"7lq6v","./contrib/viewportSemanticTokens/viewportSemanticTokens.js":"kClr0","./contrib/wordHighlighter/wordHighlighter.js":"idZ3D","./contrib/wordOperations/wordOperations.js":"g49mg","./contrib/wordPartOperations/wordPartOperations.js":"bP7kk","./common/standaloneStrings.js":"325YA","../base/browser/ui/codicons/codiconStyles.js":"bu4zl"}],"k1eXp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SelectionAnchorSet", function() {
    return SelectionAnchorSet;
});
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
var _ariaJs = require("../../../base/browser/ui/aria/aria.js");
var _htmlContentJs = require("../../../base/common/htmlContent.js");
var _keyCodesJs = require("../../../base/common/keyCodes.js");
var _anchorSelectCss = require("./anchorSelect.css");
var _editorExtensionsJs = require("../../browser/editorExtensions.js");
var _selectionJs = require("../../common/core/selection.js");
var _editorContextKeysJs = require("../../common/editorContextKeys.js");
var _nlsJs = require("../../../nls.js");
var _contextkeyJs = require("../../../platform/contextkey/common/contextkey.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var SelectionAnchorSet = new _contextkeyJs.RawContextKey('selectionAnchorSet', false);
var SelectionAnchorController = /*#__PURE__*/ function() {
    "use strict";
    function SelectionAnchorController1(editor, contextKeyService) {
        var _this = this;
        _helpers.classCallCheck(this, SelectionAnchorController1);
        this.editor = editor;
        this.selectionAnchorSetContextKey = SelectionAnchorSet.bindTo(contextKeyService);
        this.modelChangeListener = editor.onDidChangeModel(function() {
            return _this.selectionAnchorSetContextKey.reset();
        });
    }
    _helpers.createClass(SelectionAnchorController1, [
        {
            key: "setSelectionAnchor",
            value: function setSelectionAnchor() {
                if (this.editor.hasModel()) {
                    var position = this.editor.getPosition();
                    var previousDecorations = this.decorationId ? [
                        this.decorationId
                    ] : [];
                    var newDecorationId = this.editor.deltaDecorations(previousDecorations, [
                        {
                            range: _selectionJs.Selection.fromPositions(position, position),
                            options: {
                                description: 'selection-anchor',
                                stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
                                hoverMessage: new _htmlContentJs.MarkdownString().appendText(_nlsJs.localize('selectionAnchor', "Selection Anchor")),
                                className: 'selection-anchor'
                            }
                        }
                    ]);
                    this.decorationId = newDecorationId[0];
                    this.selectionAnchorSetContextKey.set(!!this.decorationId);
                    _ariaJs.alert(_nlsJs.localize('anchorSet', "Anchor set at {0}:{1}", position.lineNumber, position.column));
                }
            }
        },
        {
            key: "goToSelectionAnchor",
            value: function goToSelectionAnchor() {
                if (this.editor.hasModel() && this.decorationId) {
                    var anchorPosition = this.editor.getModel().getDecorationRange(this.decorationId);
                    if (anchorPosition) this.editor.setPosition(anchorPosition.getStartPosition());
                }
            }
        },
        {
            key: "selectFromAnchorToCursor",
            value: function selectFromAnchorToCursor() {
                if (this.editor.hasModel() && this.decorationId) {
                    var start = this.editor.getModel().getDecorationRange(this.decorationId);
                    if (start) {
                        var end = this.editor.getPosition();
                        this.editor.setSelection(_selectionJs.Selection.fromPositions(start.getStartPosition(), end));
                        this.cancelSelectionAnchor();
                    }
                }
            }
        },
        {
            key: "cancelSelectionAnchor",
            value: function cancelSelectionAnchor() {
                if (this.decorationId) {
                    this.editor.deltaDecorations([
                        this.decorationId
                    ], []);
                    this.decorationId = undefined;
                    this.selectionAnchorSetContextKey.set(false);
                }
            }
        },
        {
            key: "dispose",
            value: function dispose() {
                this.cancelSelectionAnchor();
                this.modelChangeListener.dispose();
            }
        }
    ], [
        {
            key: "get",
            value: function get(editor) {
                return editor.getContribution(SelectionAnchorController1.ID);
            }
        }
    ]);
    return SelectionAnchorController1;
}();
SelectionAnchorController.ID = 'editor.contrib.selectionAnchorController';
SelectionAnchorController = __decorate([
    __param(1, _contextkeyJs.IContextKeyService)
], SelectionAnchorController);
var SetSelectionAnchor = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(SetSelectionAnchor, EditorAction);
    var _super = _helpers.createSuper(SetSelectionAnchor);
    function SetSelectionAnchor() {
        _helpers.classCallCheck(this, SetSelectionAnchor);
        return _super.call(this, {
            id: 'editor.action.setSelectionAnchor',
            label: _nlsJs.localize('setSelectionAnchor', "Set Selection Anchor"),
            alias: 'Set Selection Anchor',
            precondition: undefined,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: _keyCodesJs.KeyChord(2089 /* KeyK */ , 2080 /* KeyB */ ),
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    _helpers.createClass(SetSelectionAnchor, [
        {
            key: "run",
            value: function run(_accessor, editor) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var controller;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                controller = SelectionAnchorController.get(editor);
                                controller.setSelectionAnchor();
                            case 2:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee);
                }));
            }
        }
    ]);
    return SetSelectionAnchor;
}(_editorExtensionsJs.EditorAction);
var GoToSelectionAnchor = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(GoToSelectionAnchor, EditorAction);
    var _super = _helpers.createSuper(GoToSelectionAnchor);
    function GoToSelectionAnchor() {
        _helpers.classCallCheck(this, GoToSelectionAnchor);
        return _super.call(this, {
            id: 'editor.action.goToSelectionAnchor',
            label: _nlsJs.localize('goToSelectionAnchor', "Go to Selection Anchor"),
            alias: 'Go to Selection Anchor',
            precondition: SelectionAnchorSet
        });
    }
    _helpers.createClass(GoToSelectionAnchor, [
        {
            key: "run",
            value: function run(_accessor, editor) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var controller;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                controller = SelectionAnchorController.get(editor);
                                controller.goToSelectionAnchor();
                            case 2:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee);
                }));
            }
        }
    ]);
    return GoToSelectionAnchor;
}(_editorExtensionsJs.EditorAction);
var SelectFromAnchorToCursor = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(SelectFromAnchorToCursor, EditorAction);
    var _super = _helpers.createSuper(SelectFromAnchorToCursor);
    function SelectFromAnchorToCursor() {
        _helpers.classCallCheck(this, SelectFromAnchorToCursor);
        return _super.call(this, {
            id: 'editor.action.selectFromAnchorToCursor',
            label: _nlsJs.localize('selectFromAnchorToCursor', "Select from Anchor to Cursor"),
            alias: 'Select from Anchor to Cursor',
            precondition: SelectionAnchorSet,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: _keyCodesJs.KeyChord(2089 /* KeyK */ , 2089 /* KeyK */ ),
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    _helpers.createClass(SelectFromAnchorToCursor, [
        {
            key: "run",
            value: function run(_accessor, editor) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var controller;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                controller = SelectionAnchorController.get(editor);
                                controller.selectFromAnchorToCursor();
                            case 2:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee);
                }));
            }
        }
    ]);
    return SelectFromAnchorToCursor;
}(_editorExtensionsJs.EditorAction);
var CancelSelectionAnchor = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(CancelSelectionAnchor, EditorAction);
    var _super = _helpers.createSuper(CancelSelectionAnchor);
    function CancelSelectionAnchor() {
        _helpers.classCallCheck(this, CancelSelectionAnchor);
        return _super.call(this, {
            id: 'editor.action.cancelSelectionAnchor',
            label: _nlsJs.localize('cancelSelectionAnchor', "Cancel Selection Anchor"),
            alias: 'Cancel Selection Anchor',
            precondition: SelectionAnchorSet,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: 9 /* Escape */ ,
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    _helpers.createClass(CancelSelectionAnchor, [
        {
            key: "run",
            value: function run(_accessor, editor) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var controller;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                controller = SelectionAnchorController.get(editor);
                                controller.cancelSelectionAnchor();
                            case 2:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee);
                }));
            }
        }
    ]);
    return CancelSelectionAnchor;
}(_editorExtensionsJs.EditorAction);
_editorExtensionsJs.registerEditorContribution(SelectionAnchorController.ID, SelectionAnchorController);
_editorExtensionsJs.registerEditorAction(SetSelectionAnchor);
_editorExtensionsJs.registerEditorAction(GoToSelectionAnchor);
_editorExtensionsJs.registerEditorAction(SelectFromAnchorToCursor);
_editorExtensionsJs.registerEditorAction(CancelSelectionAnchor);

},{"@swc/helpers":"erO4s","regenerator-runtime":"12Ae8","../../../base/browser/ui/aria/aria.js":"8SLUe","../../../base/common/htmlContent.js":"i3TMB","../../../base/common/keyCodes.js":"4hRDv","./anchorSelect.css":"4RgUe","../../browser/editorExtensions.js":"dFnlo","../../common/core/selection.js":"hjmnH","../../common/editorContextKeys.js":"2t2PW","../../../nls.js":"9djYb","../../../platform/contextkey/common/contextkey.js":"5cjav","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"4RgUe":[function() {},{}],"kKClp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BracketMatchingController", function() {
    return BracketMatchingController;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _asyncJs = require("../../../base/common/async.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _bracketMatchingCss = require("./bracketMatching.css");
var _editorExtensionsJs = require("../../browser/editorExtensions.js");
var _positionJs = require("../../common/core/position.js");
var _rangeJs = require("../../common/core/range.js");
var _selectionJs = require("../../common/core/selection.js");
var _editorContextKeysJs = require("../../common/editorContextKeys.js");
var _modelJs = require("../../common/model.js");
var _textModelJs = require("../../common/model/textModel.js");
var _editorColorRegistryJs = require("../../common/view/editorColorRegistry.js");
var _nlsJs = require("../../../nls.js");
var _actionsJs = require("../../../platform/actions/common/actions.js");
var _colorRegistryJs = require("../../../platform/theme/common/colorRegistry.js");
var _themeServiceJs = require("../../../platform/theme/common/themeService.js");
var overviewRulerBracketMatchForeground = _colorRegistryJs.registerColor('editorOverviewRuler.bracketMatchForeground', {
    dark: '#A0A0A0',
    light: '#A0A0A0',
    hc: '#A0A0A0'
}, _nlsJs.localize('overviewRulerBracketMatchForeground', 'Overview ruler marker color for matching brackets.'));
var JumpToBracketAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(JumpToBracketAction, EditorAction);
    var _super = _helpers.createSuper(JumpToBracketAction);
    function JumpToBracketAction() {
        _helpers.classCallCheck(this, JumpToBracketAction);
        return _super.call(this, {
            id: 'editor.action.jumpToBracket',
            label: _nlsJs.localize('smartSelect.jumpBracket', "Go to Bracket"),
            alias: 'Go to Bracket',
            precondition: undefined,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: 3160 /* Backslash */ ,
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    _helpers.createClass(JumpToBracketAction, [
        {
            key: "run",
            value: function run(accessor, editor) {
                var controller = BracketMatchingController.get(editor);
                if (!controller) return;
                controller.jumpToBracket();
            }
        }
    ]);
    return JumpToBracketAction;
}(_editorExtensionsJs.EditorAction);
var SelectToBracketAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(SelectToBracketAction, EditorAction);
    var _super = _helpers.createSuper(SelectToBracketAction);
    function SelectToBracketAction() {
        _helpers.classCallCheck(this, SelectToBracketAction);
        return _super.call(this, {
            id: 'editor.action.selectToBracket',
            label: _nlsJs.localize('smartSelect.selectToBracket', "Select to Bracket"),
            alias: 'Select to Bracket',
            precondition: undefined,
            description: {
                description: "Select to Bracket",
                args: [
                    {
                        name: 'args',
                        schema: {
                            type: 'object',
                            properties: {
                                'selectBrackets': {
                                    type: 'boolean',
                                    default: true
                                }
                            }
                        }
                    }
                ]
            }
        });
    }
    _helpers.createClass(SelectToBracketAction, [
        {
            key: "run",
            value: function run(accessor, editor, args) {
                var controller = BracketMatchingController.get(editor);
                if (!controller) return;
                var selectBrackets = true;
                if (args && args.selectBrackets === false) selectBrackets = false;
                controller.selectToBracket(selectBrackets);
            }
        }
    ]);
    return SelectToBracketAction;
}(_editorExtensionsJs.EditorAction);
var BracketsData = function BracketsData(position, brackets, options) {
    "use strict";
    _helpers.classCallCheck(this, BracketsData);
    this.position = position;
    this.brackets = brackets;
    this.options = options;
};
var BracketMatchingController = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(BracketMatchingController, Disposable);
    var _super = _helpers.createSuper(BracketMatchingController);
    function BracketMatchingController(editor) {
        _helpers.classCallCheck(this, BracketMatchingController);
        var _this;
        _this = _super.call(this);
        _this._editor = editor;
        _this._lastBracketsData = [];
        _this._lastVersionId = 0;
        _this._decorations = [];
        _this._updateBracketsSoon = _this._register(new _asyncJs.RunOnceScheduler(function() {
            return _this._updateBrackets();
        }, 50));
        _this._matchBrackets = _this._editor.getOption(63 /* matchBrackets */ );
        _this._updateBracketsSoon.schedule();
        _this._register(editor.onDidChangeCursorPosition(function(e) {
            if (_this._matchBrackets === 'never') // Early exit if nothing needs to be done!
            // Leave some form of early exit check here if you wish to continue being a cursor position change listener ;)
            return;
            _this._updateBracketsSoon.schedule();
        }));
        _this._register(editor.onDidChangeModelContent(function(e) {
            _this._updateBracketsSoon.schedule();
        }));
        _this._register(editor.onDidChangeModel(function(e) {
            _this._lastBracketsData = [];
            _this._decorations = [];
            _this._updateBracketsSoon.schedule();
        }));
        _this._register(editor.onDidChangeModelLanguageConfiguration(function(e) {
            _this._lastBracketsData = [];
            _this._updateBracketsSoon.schedule();
        }));
        _this._register(editor.onDidChangeConfiguration(function(e) {
            if (e.hasChanged(63 /* matchBrackets */ )) {
                _this._matchBrackets = _this._editor.getOption(63 /* matchBrackets */ );
                _this._decorations = _this._editor.deltaDecorations(_this._decorations, []);
                _this._lastBracketsData = [];
                _this._lastVersionId = 0;
                _this._updateBracketsSoon.schedule();
            }
        }));
        _this._register(editor.onDidBlurEditorWidget(function() {
            _this._updateBracketsSoon.schedule();
        }));
        _this._register(editor.onDidFocusEditorWidget(function() {
            _this._updateBracketsSoon.schedule();
        }));
        return _this;
    }
    _helpers.createClass(BracketMatchingController, [
        {
            key: "jumpToBracket",
            value: function jumpToBracket() {
                if (!this._editor.hasModel()) return;
                var model = this._editor.getModel();
                var newSelections = this._editor.getSelections().map(function(selection) {
                    var position = selection.getStartPosition();
                    // find matching brackets if position is on a bracket
                    var brackets = model.bracketPairs.matchBracket(position);
                    var newCursorPosition = null;
                    if (brackets) {
                        if (brackets[0].containsPosition(position)) newCursorPosition = brackets[1].getStartPosition();
                        else if (brackets[1].containsPosition(position)) newCursorPosition = brackets[0].getStartPosition();
                    } else {
                        // find the enclosing brackets if the position isn't on a matching bracket
                        var enclosingBrackets = model.bracketPairs.findEnclosingBrackets(position);
                        if (enclosingBrackets) newCursorPosition = enclosingBrackets[0].getStartPosition();
                        else {
                            // no enclosing brackets, try the very first next bracket
                            var nextBracket = model.bracketPairs.findNextBracket(position);
                            if (nextBracket && nextBracket.range) newCursorPosition = nextBracket.range.getStartPosition();
                        }
                    }
                    if (newCursorPosition) return new _selectionJs.Selection(newCursorPosition.lineNumber, newCursorPosition.column, newCursorPosition.lineNumber, newCursorPosition.column);
                    return new _selectionJs.Selection(position.lineNumber, position.column, position.lineNumber, position.column);
                });
                this._editor.setSelections(newSelections);
                this._editor.revealRange(newSelections[0]);
            }
        },
        {
            key: "selectToBracket",
            value: function selectToBracket(selectBrackets) {
                if (!this._editor.hasModel()) return;
                var model = this._editor.getModel();
                var newSelections = [];
                this._editor.getSelections().forEach(function(selection) {
                    var position = selection.getStartPosition();
                    var brackets = model.bracketPairs.matchBracket(position);
                    if (!brackets) {
                        brackets = model.bracketPairs.findEnclosingBrackets(position);
                        if (!brackets) {
                            var nextBracket = model.bracketPairs.findNextBracket(position);
                            if (nextBracket && nextBracket.range) brackets = model.bracketPairs.matchBracket(nextBracket.range.getStartPosition());
                        }
                    }
                    var selectFrom = null;
                    var selectTo = null;
                    if (brackets) {
                        brackets.sort(_rangeJs.Range.compareRangesUsingStarts);
                        var _brackets = _helpers.slicedToArray(brackets, 2), open = _brackets[0], close = _brackets[1];
                        selectFrom = selectBrackets ? open.getStartPosition() : open.getEndPosition();
                        selectTo = selectBrackets ? close.getEndPosition() : close.getStartPosition();
                        if (close.containsPosition(position)) {
                            // select backwards if the cursor was on the closing bracket
                            var tmp = selectFrom;
                            selectFrom = selectTo;
                            selectTo = tmp;
                        }
                    }
                    if (selectFrom && selectTo) newSelections.push(new _selectionJs.Selection(selectFrom.lineNumber, selectFrom.column, selectTo.lineNumber, selectTo.column));
                });
                if (newSelections.length > 0) {
                    this._editor.setSelections(newSelections);
                    this._editor.revealRange(newSelections[0]);
                }
            }
        },
        {
            key: "_updateBrackets",
            value: function _updateBrackets() {
                if (this._matchBrackets === 'never') return;
                this._recomputeBrackets();
                var newDecorations = [], newDecorationsLen = 0;
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this._lastBracketsData[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var bracketData = _step.value;
                        var brackets = bracketData.brackets;
                        if (brackets) {
                            newDecorations[newDecorationsLen++] = {
                                range: brackets[0],
                                options: bracketData.options
                            };
                            newDecorations[newDecorationsLen++] = {
                                range: brackets[1],
                                options: bracketData.options
                            };
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                this._decorations = this._editor.deltaDecorations(this._decorations, newDecorations);
            }
        },
        {
            key: "_recomputeBrackets",
            value: function _recomputeBrackets() {
                if (!this._editor.hasModel() || !this._editor.hasWidgetFocus()) {
                    // no model or no focus => no brackets!
                    this._lastBracketsData = [];
                    this._lastVersionId = 0;
                    return;
                }
                var selections = this._editor.getSelections();
                if (selections.length > 100) {
                    // no bracket matching for high numbers of selections
                    this._lastBracketsData = [];
                    this._lastVersionId = 0;
                    return;
                }
                var model = this._editor.getModel();
                var versionId = model.getVersionId();
                var previousData = [];
                if (this._lastVersionId === versionId) // use the previous data only if the model is at the same version id
                previousData = this._lastBracketsData;
                var positions = [], positionsLen = 0;
                for(var i = 0, len = selections.length; i < len; i++){
                    var selection = selections[i];
                    if (selection.isEmpty()) // will bracket match a cursor only if the selection is collapsed
                    positions[positionsLen++] = selection.getStartPosition();
                }
                // sort positions for `previousData` cache hits
                if (positions.length > 1) positions.sort(_positionJs.Position.compare);
                var newData = [], newDataLen = 0;
                var previousIndex = 0, previousLen = previousData.length;
                for(var i1 = 0, len1 = positions.length; i1 < len1; i1++){
                    var position = positions[i1];
                    while(previousIndex < previousLen && previousData[previousIndex].position.isBefore(position))previousIndex++;
                    if (previousIndex < previousLen && previousData[previousIndex].position.equals(position)) newData[newDataLen++] = previousData[previousIndex];
                    else {
                        var brackets = model.bracketPairs.matchBracket(position);
                        var options = BracketMatchingController._DECORATION_OPTIONS_WITH_OVERVIEW_RULER;
                        if (!brackets && this._matchBrackets === 'always') {
                            brackets = model.bracketPairs.findEnclosingBrackets(position, 20 /* give at most 20ms to compute */ );
                            options = BracketMatchingController._DECORATION_OPTIONS_WITHOUT_OVERVIEW_RULER;
                        }
                        newData[newDataLen++] = new BracketsData(position, brackets, options);
                    }
                }
                this._lastBracketsData = newData;
                this._lastVersionId = versionId;
            }
        }
    ], [
        {
            key: "get",
            value: function get(editor) {
                return editor.getContribution(BracketMatchingController.ID);
            }
        }
    ]);
    return BracketMatchingController;
}(_lifecycleJs.Disposable);
BracketMatchingController.ID = 'editor.contrib.bracketMatchingController';
BracketMatchingController._DECORATION_OPTIONS_WITH_OVERVIEW_RULER = _textModelJs.ModelDecorationOptions.register({
    description: 'bracket-match-overview',
    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
    className: 'bracket-match',
    overviewRuler: {
        color: _themeServiceJs.themeColorFromId(overviewRulerBracketMatchForeground),
        position: _modelJs.OverviewRulerLane.Center
    }
});
BracketMatchingController._DECORATION_OPTIONS_WITHOUT_OVERVIEW_RULER = _textModelJs.ModelDecorationOptions.register({
    description: 'bracket-match-no-overview',
    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
    className: 'bracket-match'
});
_editorExtensionsJs.registerEditorContribution(BracketMatchingController.ID, BracketMatchingController);
_editorExtensionsJs.registerEditorAction(SelectToBracketAction);
_editorExtensionsJs.registerEditorAction(JumpToBracketAction);
_themeServiceJs.registerThemingParticipant(function(theme, collector) {
    var bracketMatchBackground = theme.getColor(_editorColorRegistryJs.editorBracketMatchBackground);
    if (bracketMatchBackground) collector.addRule(".monaco-editor .bracket-match { background-color: ".concat(bracketMatchBackground, "; }"));
    var bracketMatchBorder = theme.getColor(_editorColorRegistryJs.editorBracketMatchBorder);
    if (bracketMatchBorder) collector.addRule(".monaco-editor .bracket-match { border: 1px solid ".concat(bracketMatchBorder, "; }"));
});
// Go to menu
_actionsJs.MenuRegistry.appendMenuItem(_actionsJs.MenuId.MenubarGoMenu, {
    group: '5_infile_nav',
    command: {
        id: 'editor.action.jumpToBracket',
        title: _nlsJs.localize({
            key: 'miGoToBracket',
            comment: [
                '&& denotes a mnemonic'
            ]
        }, "Go to &&Bracket")
    },
    order: 2
});

},{"@swc/helpers":"erO4s","../../../base/common/async.js":"kMhSh","../../../base/common/lifecycle.js":"bcbPy","./bracketMatching.css":"5Of9Z","../../browser/editorExtensions.js":"dFnlo","../../common/core/position.js":"6xP0w","../../common/core/range.js":"VbyL8","../../common/core/selection.js":"hjmnH","../../common/editorContextKeys.js":"2t2PW","../../common/model.js":"dUHFC","../../common/model/textModel.js":"f18vR","../../common/view/editorColorRegistry.js":"3F5El","../../../nls.js":"9djYb","../../../platform/actions/common/actions.js":"1qoxQ","../../../platform/theme/common/colorRegistry.js":"lKtxS","../../../platform/theme/common/themeService.js":"kE7QB","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"5Of9Z":[function() {},{}],"25uGX":[function(require,module,exports) {
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _editorExtensionsJs = require("../../browser/editorExtensions.js");
var _editorContextKeysJs = require("../../common/editorContextKeys.js");
var _moveCaretCommandJs = require("./moveCaretCommand.js");
var _nlsJs = require("../../../nls.js");
var MoveCaretAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(MoveCaretAction, EditorAction);
    var _super = _helpers.createSuper(MoveCaretAction);
    function MoveCaretAction(left, opts) {
        _helpers.classCallCheck(this, MoveCaretAction);
        var _this;
        _this = _super.call(this, opts);
        _this.left = left;
        return _this;
    }
    _helpers.createClass(MoveCaretAction, [
        {
            key: "run",
            value: function run(accessor, editor) {
                if (!editor.hasModel()) return;
                var commands = [];
                var selections = editor.getSelections();
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = selections[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var selection = _step.value;
                        commands.push(new _moveCaretCommandJs.MoveCaretCommand(selection, this.left));
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                editor.pushUndoStop();
                editor.executeCommands(this.id, commands);
                editor.pushUndoStop();
            }
        }
    ]);
    return MoveCaretAction;
}(_editorExtensionsJs.EditorAction);
var MoveCaretLeftAction = /*#__PURE__*/ function(MoveCaretAction) {
    "use strict";
    _helpers.inherits(MoveCaretLeftAction, MoveCaretAction);
    var _super = _helpers.createSuper(MoveCaretLeftAction);
    function MoveCaretLeftAction() {
        _helpers.classCallCheck(this, MoveCaretLeftAction);
        return _super.call(this, true, {
            id: 'editor.action.moveCarretLeftAction',
            label: _nlsJs.localize('caret.moveLeft', "Move Selected Text Left"),
            alias: 'Move Selected Text Left',
            precondition: _editorContextKeysJs.EditorContextKeys.writable
        });
    }
    return MoveCaretLeftAction;
}(MoveCaretAction);
var MoveCaretRightAction = /*#__PURE__*/ function(MoveCaretAction) {
    "use strict";
    _helpers.inherits(MoveCaretRightAction, MoveCaretAction);
    var _super = _helpers.createSuper(MoveCaretRightAction);
    function MoveCaretRightAction() {
        _helpers.classCallCheck(this, MoveCaretRightAction);
        return _super.call(this, false, {
            id: 'editor.action.moveCarretRightAction',
            label: _nlsJs.localize('caret.moveRight', "Move Selected Text Right"),
            alias: 'Move Selected Text Right',
            precondition: _editorContextKeysJs.EditorContextKeys.writable
        });
    }
    return MoveCaretRightAction;
}(MoveCaretAction);
_editorExtensionsJs.registerEditorAction(MoveCaretLeftAction);
_editorExtensionsJs.registerEditorAction(MoveCaretRightAction);

},{"@swc/helpers":"erO4s","../../browser/editorExtensions.js":"dFnlo","../../common/editorContextKeys.js":"2t2PW","./moveCaretCommand.js":"gCIUv","../../../nls.js":"9djYb"}],"gCIUv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MoveCaretCommand", function() {
    return MoveCaretCommand;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _rangeJs = require("../../common/core/range.js");
var _selectionJs = require("../../common/core/selection.js");
var MoveCaretCommand = /*#__PURE__*/ function() {
    "use strict";
    function MoveCaretCommand(selection, isMovingLeft) {
        _helpers.classCallCheck(this, MoveCaretCommand);
        this._selection = selection;
        this._isMovingLeft = isMovingLeft;
    }
    _helpers.createClass(MoveCaretCommand, [
        {
            key: "getEditOperations",
            value: function getEditOperations(model, builder) {
                if (this._selection.startLineNumber !== this._selection.endLineNumber || this._selection.isEmpty()) return;
                var lineNumber = this._selection.startLineNumber;
                var startColumn = this._selection.startColumn;
                var endColumn = this._selection.endColumn;
                if (this._isMovingLeft && startColumn === 1) return;
                if (!this._isMovingLeft && endColumn === model.getLineMaxColumn(lineNumber)) return;
                if (this._isMovingLeft) {
                    var rangeBefore = new _rangeJs.Range(lineNumber, startColumn - 1, lineNumber, startColumn);
                    var charBefore = model.getValueInRange(rangeBefore);
                    builder.addEditOperation(rangeBefore, null);
                    builder.addEditOperation(new _rangeJs.Range(lineNumber, endColumn, lineNumber, endColumn), charBefore);
                } else {
                    var rangeAfter = new _rangeJs.Range(lineNumber, endColumn, lineNumber, endColumn + 1);
                    var charAfter = model.getValueInRange(rangeAfter);
                    builder.addEditOperation(rangeAfter, null);
                    builder.addEditOperation(new _rangeJs.Range(lineNumber, startColumn, lineNumber, startColumn), charAfter);
                }
            }
        },
        {
            key: "computeCursorState",
            value: function computeCursorState(model, helper) {
                if (this._isMovingLeft) return new _selectionJs.Selection(this._selection.startLineNumber, this._selection.startColumn - 1, this._selection.endLineNumber, this._selection.endColumn - 1);
                else return new _selectionJs.Selection(this._selection.startLineNumber, this._selection.startColumn + 1, this._selection.endLineNumber, this._selection.endColumn + 1);
            }
        }
    ]);
    return MoveCaretCommand;
}();

},{"@swc/helpers":"erO4s","../../common/core/range.js":"VbyL8","../../common/core/selection.js":"hjmnH","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"7TyCY":[function(require,module,exports) {
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _editorExtensionsJs = require("../../browser/editorExtensions.js");
var _replaceCommandJs = require("../../common/commands/replaceCommand.js");
var _cursorMoveOperationsJs = require("../../common/controller/cursorMoveOperations.js");
var _rangeJs = require("../../common/core/range.js");
var _editorContextKeysJs = require("../../common/editorContextKeys.js");
var _nlsJs = require("../../../nls.js");
var TransposeLettersAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(TransposeLettersAction, EditorAction);
    var _super = _helpers.createSuper(TransposeLettersAction);
    function TransposeLettersAction() {
        _helpers.classCallCheck(this, TransposeLettersAction);
        return _super.call(this, {
            id: 'editor.action.transposeLetters',
            label: _nlsJs.localize('transposeLetters.label', "Transpose Letters"),
            alias: 'Transpose Letters',
            precondition: _editorContextKeysJs.EditorContextKeys.writable,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.textInputFocus,
                primary: 0,
                mac: {
                    primary: 306 /* KeyT */ 
                },
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    _helpers.createClass(TransposeLettersAction, [
        {
            key: "run",
            value: function run(accessor, editor) {
                if (!editor.hasModel()) return;
                var model = editor.getModel();
                var commands = [];
                var selections = editor.getSelections();
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = selections[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var selection = _step.value;
                        if (!selection.isEmpty()) continue;
                        var lineNumber = selection.startLineNumber;
                        var column = selection.startColumn;
                        var lastColumn = model.getLineMaxColumn(lineNumber);
                        if (lineNumber === 1 && (column === 1 || column === 2 && lastColumn === 2)) continue;
                        // handle special case: when at end of line, transpose left two chars
                        // otherwise, transpose left and right chars
                        var endPosition = column === lastColumn ? selection.getPosition() : _cursorMoveOperationsJs.MoveOperations.rightPosition(model, selection.getPosition().lineNumber, selection.getPosition().column);
                        var middlePosition = _cursorMoveOperationsJs.MoveOperations.leftPosition(model, endPosition);
                        var beginPosition = _cursorMoveOperationsJs.MoveOperations.leftPosition(model, middlePosition);
                        var leftChar = model.getValueInRange(_rangeJs.Range.fromPositions(beginPosition, middlePosition));
                        var rightChar = model.getValueInRange(_rangeJs.Range.fromPositions(middlePosition, endPosition));
                        var replaceRange = _rangeJs.Range.fromPositions(beginPosition, endPosition);
                        commands.push(new _replaceCommandJs.ReplaceCommand(replaceRange, rightChar + leftChar));
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                if (commands.length > 0) {
                    editor.pushUndoStop();
                    editor.executeCommands(this.id, commands);
                    editor.pushUndoStop();
                }
            }
        }
    ]);
    return TransposeLettersAction;
}(_editorExtensionsJs.EditorAction);
_editorExtensionsJs.registerEditorAction(TransposeLettersAction);

},{"@swc/helpers":"erO4s","../../browser/editorExtensions.js":"dFnlo","../../common/commands/replaceCommand.js":"kkstX","../../common/controller/cursorMoveOperations.js":"lTpqs","../../common/core/range.js":"VbyL8","../../common/editorContextKeys.js":"2t2PW","../../../nls.js":"9djYb"}],"dAOTt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CutAction", function() {
    return CutAction;
});
parcelHelpers.export(exports, "CopyAction", function() {
    return CopyAction;
});
parcelHelpers.export(exports, "PasteAction", function() {
    return PasteAction;
});
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
var _browserJs = require("../../../base/browser/browser.js");
var _platformJs = require("../../../base/common/platform.js");
var _textAreaInputJs = require("../../browser/controller/textAreaInput.js");
var _editorExtensionsJs = require("../../browser/editorExtensions.js");
var _codeEditorServiceJs = require("../../browser/services/codeEditorService.js");
var _editorContextKeysJs = require("../../common/editorContextKeys.js");
var _nlsJs = require("../../../nls.js");
var _actionsJs = require("../../../platform/actions/common/actions.js");
var _clipboardServiceJs = require("../../../platform/clipboard/common/clipboardService.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var CLIPBOARD_CONTEXT_MENU_GROUP = '9_cutcopypaste';
var supportsCut = _platformJs.isNative || document.queryCommandSupported('cut');
var supportsCopy = _platformJs.isNative || document.queryCommandSupported('copy');
// Firefox only supports navigator.clipboard.readText() in browser extensions.
// See https://developer.mozilla.org/en-US/docs/Web/API/Clipboard/readText#Browser_compatibility
// When loading over http, navigator.clipboard can be undefined. See https://github.com/microsoft/monaco-editor/issues/2313
var supportsPaste = typeof navigator.clipboard === 'undefined' || _browserJs.isFirefox ? document.queryCommandSupported('paste') : true;
function registerCommand(command) {
    command.register();
    return command;
}
var CutAction = supportsCut ? registerCommand(new _editorExtensionsJs.MultiCommand({
    id: 'editor.action.clipboardCutAction',
    precondition: undefined,
    kbOpts: // Do not bind cut keybindings in the browser,
    // since browsers do that for us and it avoids security prompts
    _platformJs.isNative ? {
        primary: 2102 /* KeyX */ ,
        win: {
            primary: 2102 /* KeyX */ ,
            secondary: [
                1044 /* Delete */ 
            ]
        },
        weight: 100 /* EditorContrib */ 
    } : undefined,
    menuOpts: [
        {
            menuId: _actionsJs.MenuId.MenubarEditMenu,
            group: '2_ccp',
            title: _nlsJs.localize({
                key: 'miCut',
                comment: [
                    '&& denotes a mnemonic'
                ]
            }, "Cu&&t"),
            order: 1
        },
        {
            menuId: _actionsJs.MenuId.EditorContext,
            group: CLIPBOARD_CONTEXT_MENU_GROUP,
            title: _nlsJs.localize('actions.clipboard.cutLabel', "Cut"),
            when: _editorContextKeysJs.EditorContextKeys.writable,
            order: 1
        },
        {
            menuId: _actionsJs.MenuId.CommandPalette,
            group: '',
            title: _nlsJs.localize('actions.clipboard.cutLabel', "Cut"),
            order: 1
        },
        {
            menuId: _actionsJs.MenuId.SimpleEditorContext,
            group: CLIPBOARD_CONTEXT_MENU_GROUP,
            title: _nlsJs.localize('actions.clipboard.cutLabel', "Cut"),
            when: _editorContextKeysJs.EditorContextKeys.writable,
            order: 1
        }
    ]
})) : undefined;
var CopyAction = supportsCopy ? registerCommand(new _editorExtensionsJs.MultiCommand({
    id: 'editor.action.clipboardCopyAction',
    precondition: undefined,
    kbOpts: // Do not bind copy keybindings in the browser,
    // since browsers do that for us and it avoids security prompts
    _platformJs.isNative ? {
        primary: 2081 /* KeyC */ ,
        win: {
            primary: 2081 /* KeyC */ ,
            secondary: [
                2067 /* Insert */ 
            ]
        },
        weight: 100 /* EditorContrib */ 
    } : undefined,
    menuOpts: [
        {
            menuId: _actionsJs.MenuId.MenubarEditMenu,
            group: '2_ccp',
            title: _nlsJs.localize({
                key: 'miCopy',
                comment: [
                    '&& denotes a mnemonic'
                ]
            }, "&&Copy"),
            order: 2
        },
        {
            menuId: _actionsJs.MenuId.EditorContext,
            group: CLIPBOARD_CONTEXT_MENU_GROUP,
            title: _nlsJs.localize('actions.clipboard.copyLabel', "Copy"),
            order: 2
        },
        {
            menuId: _actionsJs.MenuId.CommandPalette,
            group: '',
            title: _nlsJs.localize('actions.clipboard.copyLabel', "Copy"),
            order: 1
        },
        {
            menuId: _actionsJs.MenuId.SimpleEditorContext,
            group: CLIPBOARD_CONTEXT_MENU_GROUP,
            title: _nlsJs.localize('actions.clipboard.copyLabel', "Copy"),
            order: 2
        }
    ]
})) : undefined;
_actionsJs.MenuRegistry.appendMenuItem(_actionsJs.MenuId.MenubarEditMenu, {
    submenu: _actionsJs.MenuId.MenubarCopy,
    title: {
        value: _nlsJs.localize('copy as', "Copy As"),
        original: 'Copy As'
    },
    group: '2_ccp',
    order: 3
});
_actionsJs.MenuRegistry.appendMenuItem(_actionsJs.MenuId.EditorContext, {
    submenu: _actionsJs.MenuId.EditorContextCopy,
    title: {
        value: _nlsJs.localize('copy as', "Copy As"),
        original: 'Copy As'
    },
    group: CLIPBOARD_CONTEXT_MENU_GROUP,
    order: 3
});
var PasteAction = supportsPaste ? registerCommand(new _editorExtensionsJs.MultiCommand({
    id: 'editor.action.clipboardPasteAction',
    precondition: undefined,
    kbOpts: // Do not bind paste keybindings in the browser,
    // since browsers do that for us and it avoids security prompts
    _platformJs.isNative ? {
        primary: 2100 /* KeyV */ ,
        win: {
            primary: 2100 /* KeyV */ ,
            secondary: [
                1043 /* Insert */ 
            ]
        },
        linux: {
            primary: 2100 /* KeyV */ ,
            secondary: [
                1043 /* Insert */ 
            ]
        },
        weight: 100 /* EditorContrib */ 
    } : undefined,
    menuOpts: [
        {
            menuId: _actionsJs.MenuId.MenubarEditMenu,
            group: '2_ccp',
            title: _nlsJs.localize({
                key: 'miPaste',
                comment: [
                    '&& denotes a mnemonic'
                ]
            }, "&&Paste"),
            order: 4
        },
        {
            menuId: _actionsJs.MenuId.EditorContext,
            group: CLIPBOARD_CONTEXT_MENU_GROUP,
            title: _nlsJs.localize('actions.clipboard.pasteLabel', "Paste"),
            when: _editorContextKeysJs.EditorContextKeys.writable,
            order: 4
        },
        {
            menuId: _actionsJs.MenuId.CommandPalette,
            group: '',
            title: _nlsJs.localize('actions.clipboard.pasteLabel', "Paste"),
            order: 1
        },
        {
            menuId: _actionsJs.MenuId.SimpleEditorContext,
            group: CLIPBOARD_CONTEXT_MENU_GROUP,
            title: _nlsJs.localize('actions.clipboard.pasteLabel', "Paste"),
            when: _editorContextKeysJs.EditorContextKeys.writable,
            order: 4
        }
    ]
})) : undefined;
var ExecCommandCopyWithSyntaxHighlightingAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(ExecCommandCopyWithSyntaxHighlightingAction, EditorAction);
    var _super = _helpers.createSuper(ExecCommandCopyWithSyntaxHighlightingAction);
    function ExecCommandCopyWithSyntaxHighlightingAction() {
        _helpers.classCallCheck(this, ExecCommandCopyWithSyntaxHighlightingAction);
        return _super.call(this, {
            id: 'editor.action.clipboardCopyWithSyntaxHighlightingAction',
            label: _nlsJs.localize('actions.clipboard.copyWithSyntaxHighlightingLabel', "Copy With Syntax Highlighting"),
            alias: 'Copy With Syntax Highlighting',
            precondition: undefined,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.textInputFocus,
                primary: 0,
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    _helpers.createClass(ExecCommandCopyWithSyntaxHighlightingAction, [
        {
            key: "run",
            value: function run(accessor, editor) {
                if (!editor.hasModel()) return;
                var emptySelectionClipboard = editor.getOption(32 /* emptySelectionClipboard */ );
                if (!emptySelectionClipboard && editor.getSelection().isEmpty()) return;
                _textAreaInputJs.CopyOptions.forceCopyWithSyntaxHighlighting = true;
                editor.focus();
                document.execCommand('copy');
                _textAreaInputJs.CopyOptions.forceCopyWithSyntaxHighlighting = false;
            }
        }
    ]);
    return ExecCommandCopyWithSyntaxHighlightingAction;
}(_editorExtensionsJs.EditorAction);
function registerExecCommandImpl(target, browserCommand) {
    if (!target) return;
    // 1. handle case when focus is in editor.
    target.addImplementation(10000, 'code-editor', function(accessor, args) {
        // Only if editor text focus (i.e. not if editor has widget focus).
        var focusedEditor = accessor.get(_codeEditorServiceJs.ICodeEditorService).getFocusedCodeEditor();
        if (focusedEditor && focusedEditor.hasTextFocus()) {
            // Do not execute if there is no selection and empty selection clipboard is off
            var emptySelectionClipboard = focusedEditor.getOption(32 /* emptySelectionClipboard */ );
            var selection = focusedEditor.getSelection();
            if (selection && selection.isEmpty() && !emptySelectionClipboard) return true;
            document.execCommand(browserCommand);
            return true;
        }
        return false;
    });
    // 2. (default) handle case when focus is somewhere else.
    target.addImplementation(0, 'generic-dom', function(accessor, args) {
        document.execCommand(browserCommand);
        return true;
    });
}
registerExecCommandImpl(CutAction, 'cut');
registerExecCommandImpl(CopyAction, 'copy');
if (PasteAction) {
    // 1. Paste: handle case when focus is in editor.
    PasteAction.addImplementation(10000, 'code-editor', function(accessor, args) {
        var codeEditorService = accessor.get(_codeEditorServiceJs.ICodeEditorService);
        var clipboardService = accessor.get(_clipboardServiceJs.IClipboardService);
        // Only if editor text focus (i.e. not if editor has widget focus).
        var focusedEditor = codeEditorService.getFocusedCodeEditor();
        if (focusedEditor && focusedEditor.hasTextFocus()) {
            var result = document.execCommand('paste');
            // Use the clipboard service if document.execCommand('paste') was not successful
            if (!result && _platformJs.isWeb) return function() {
                return __awaiter(void 0, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var clipboardText, metadata, pasteOnNewLine, multicursorText, mode;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                _ctx.next = 2;
                                return clipboardService.readText();
                            case 2:
                                clipboardText = _ctx.sent;
                                if (clipboardText !== '') {
                                    metadata = _textAreaInputJs.InMemoryClipboardMetadataManager.INSTANCE.get(clipboardText);
                                    pasteOnNewLine = false;
                                    multicursorText = null;
                                    mode = null;
                                    if (metadata) {
                                        pasteOnNewLine = focusedEditor.getOption(32 /* emptySelectionClipboard */ ) && !!metadata.isFromEmptySelection;
                                        multicursorText = typeof metadata.multicursorText !== 'undefined' ? metadata.multicursorText : null;
                                        mode = metadata.mode;
                                    }
                                    focusedEditor.trigger('keyboard', "paste" /* Paste */ , {
                                        text: clipboardText,
                                        pasteOnNewLine: pasteOnNewLine,
                                        multicursorText: multicursorText,
                                        mode: mode
                                    });
                                }
                            case 4:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee);
                }));
            }();
            return true;
        }
        return false;
    });
    // 2. Paste: (default) handle case when focus is somewhere else.
    PasteAction.addImplementation(0, 'generic-dom', function(accessor, args) {
        document.execCommand('paste');
        return true;
    });
}
if (supportsCopy) _editorExtensionsJs.registerEditorAction(ExecCommandCopyWithSyntaxHighlightingAction);

},{"@swc/helpers":"erO4s","regenerator-runtime":"12Ae8","../../../base/browser/browser.js":"fIqGd","../../../base/common/platform.js":"8pohV","../../browser/controller/textAreaInput.js":"fuoze","../../browser/editorExtensions.js":"dFnlo","../../browser/services/codeEditorService.js":"izkTN","../../common/editorContextKeys.js":"2t2PW","../../../nls.js":"9djYb","../../../platform/actions/common/actions.js":"1qoxQ","../../../platform/clipboard/common/clipboardService.js":"lj8DI","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"k0FoE":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _editorExtensionsJs = require("../../browser/editorExtensions.js");
var _codeActionCommandsJs = require("./codeActionCommands.js");
_editorExtensionsJs.registerEditorContribution(_codeActionCommandsJs.QuickFixController.ID, _codeActionCommandsJs.QuickFixController);
_editorExtensionsJs.registerEditorAction(_codeActionCommandsJs.QuickFixAction);
_editorExtensionsJs.registerEditorAction(_codeActionCommandsJs.RefactorAction);
_editorExtensionsJs.registerEditorAction(_codeActionCommandsJs.SourceAction);
_editorExtensionsJs.registerEditorAction(_codeActionCommandsJs.OrganizeImportsAction);
_editorExtensionsJs.registerEditorAction(_codeActionCommandsJs.AutoFixAction);
_editorExtensionsJs.registerEditorAction(_codeActionCommandsJs.FixAllAction);
_editorExtensionsJs.registerEditorCommand(new _codeActionCommandsJs.CodeActionCommand());

},{"../../browser/editorExtensions.js":"dFnlo","./codeActionCommands.js":"3lL8Q"}],"3lL8Q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "QuickFixController", function() {
    return QuickFixController;
});
parcelHelpers.export(exports, "applyCodeAction", function() {
    return applyCodeAction;
});
parcelHelpers.export(exports, "QuickFixAction", function() {
    return QuickFixAction;
});
parcelHelpers.export(exports, "CodeActionCommand", function() {
    return CodeActionCommand;
});
parcelHelpers.export(exports, "RefactorAction", function() {
    return RefactorAction;
});
parcelHelpers.export(exports, "SourceAction", function() {
    return SourceAction;
});
parcelHelpers.export(exports, "OrganizeImportsAction", function() {
    return OrganizeImportsAction;
});
parcelHelpers.export(exports, "FixAllAction", function() {
    return FixAllAction;
});
parcelHelpers.export(exports, "AutoFixAction", function() {
    return AutoFixAction;
});
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
var _cancellationJs = require("../../../base/common/cancellation.js");
var _lazyJs = require("../../../base/common/lazy.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _stringsJs = require("../../../base/common/strings.js");
var _editorExtensionsJs = require("../../browser/editorExtensions.js");
var _bulkEditServiceJs = require("../../browser/services/bulkEditService.js");
var _editorContextKeysJs = require("../../common/editorContextKeys.js");
var _codeActionJs = require("./codeAction.js");
var _codeActionUiJs = require("./codeActionUi.js");
var _messageControllerJs = require("../message/messageController.js");
var _nlsJs = require("../../../nls.js");
var _commandsJs = require("../../../platform/commands/common/commands.js");
var _contextkeyJs = require("../../../platform/contextkey/common/contextkey.js");
var _instantiationJs = require("../../../platform/instantiation/common/instantiation.js");
var _markersJs = require("../../../platform/markers/common/markers.js");
var _notificationJs = require("../../../platform/notification/common/notification.js");
var _progressJs = require("../../../platform/progress/common/progress.js");
var _telemetryJs = require("../../../platform/telemetry/common/telemetry.js");
var _codeActionModelJs = require("./codeActionModel.js");
var _typesJs = require("./types.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function contextKeyForSupportedActions(kind) {
    return _contextkeyJs.ContextKeyExpr.regex(_codeActionModelJs.SUPPORTED_CODE_ACTIONS.keys()[0], new RegExp('(\\s|^)' + _stringsJs.escapeRegExpCharacters(kind.value) + '\\b'));
}
var argsSchema = {
    type: 'object',
    defaultSnippets: [
        {
            body: {
                kind: ''
            }
        }
    ],
    properties: {
        'kind': {
            type: 'string',
            description: _nlsJs.localize('args.schema.kind', "Kind of the code action to run.")
        },
        'apply': {
            type: 'string',
            description: _nlsJs.localize('args.schema.apply', "Controls when the returned actions are applied."),
            default: "ifSingle" /* IfSingle */ ,
            enum: [
                "first" /* First */ ,
                "ifSingle" /* IfSingle */ ,
                "never" /* Never */ 
            ],
            enumDescriptions: [
                _nlsJs.localize('args.schema.apply.first', "Always apply the first returned code action."),
                _nlsJs.localize('args.schema.apply.ifSingle', "Apply the first returned code action if it is the only one."),
                _nlsJs.localize('args.schema.apply.never', "Do not apply the returned code actions."), 
            ]
        },
        'preferred': {
            type: 'boolean',
            default: false,
            description: _nlsJs.localize('args.schema.preferred', "Controls if only preferred code actions should be returned.")
        }
    }
};
var QuickFixController = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(QuickFixController1, Disposable);
    var _super = _helpers.createSuper(QuickFixController1);
    function QuickFixController1(editor, markerService, contextKeyService, progressService, _instantiationService) {
        _helpers.classCallCheck(this, QuickFixController1);
        var _this;
        _this = _super.call(this);
        _this._instantiationService = _instantiationService;
        _this._editor = editor;
        _this._model = _this._register(new _codeActionModelJs.CodeActionModel(_this._editor, markerService, contextKeyService, progressService));
        _this._register(_this._model.onDidChangeState(function(newState) {
            return _this.update(newState);
        }));
        _this._ui = new _lazyJs.Lazy(function() {
            return _this._register(new _codeActionUiJs.CodeActionUi(editor, QuickFixAction.Id, AutoFixAction.Id, {
                applyCodeAction: function(action, retrigger) {
                    return __awaiter(_helpers.assertThisInitialized(_this), void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                        return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                            while(1)switch(_ctx.prev = _ctx.next){
                                case 0:
                                    _ctx.prev = 0;
                                    _ctx.next = 3;
                                    return this._applyCodeAction(action);
                                case 3:
                                    _ctx.prev = 3;
                                    if (retrigger) this._trigger({
                                        type: 2 /* Auto */ ,
                                        filter: {}
                                    });
                                    return _ctx.finish(3);
                                case 6:
                                case "end":
                                    return _ctx.stop();
                            }
                        }, _callee, this, [
                            [
                                0,
                                ,
                                3,
                                6
                            ]
                        ]);
                    }));
                }
            }, _this._instantiationService));
        });
        return _this;
    }
    _helpers.createClass(QuickFixController1, [
        {
            key: "update",
            value: function update(newState) {
                this._ui.getValue().update(newState);
            }
        },
        {
            key: "showCodeActions",
            value: function showCodeActions(trigger, actions, at) {
                return this._ui.getValue().showCodeActionList(trigger, actions, at, {
                    includeDisabledActions: false
                });
            }
        },
        {
            key: "manualTriggerAtCurrentPosition",
            value: function manualTriggerAtCurrentPosition(notAvailableMessage, filter, autoApply) {
                if (!this._editor.hasModel()) return;
                _messageControllerJs.MessageController.get(this._editor).closeMessage();
                var triggerPosition = this._editor.getPosition();
                this._trigger({
                    type: 1 /* Invoke */ ,
                    filter: filter,
                    autoApply: autoApply,
                    context: {
                        notAvailableMessage: notAvailableMessage,
                        position: triggerPosition
                    }
                });
            }
        },
        {
            key: "_trigger",
            value: function _trigger(trigger) {
                return this._model.trigger(trigger);
            }
        },
        {
            key: "_applyCodeAction",
            value: function _applyCodeAction(action) {
                return this._instantiationService.invokeFunction(applyCodeAction, action, this._editor);
            }
        }
    ], [
        {
            key: "get",
            value: function get(editor) {
                return editor.getContribution(QuickFixController1.ID);
            }
        }
    ]);
    return QuickFixController1;
}(_lifecycleJs.Disposable);
QuickFixController.ID = 'editor.contrib.quickFixController';
QuickFixController = __decorate([
    __param(1, _markersJs.IMarkerService),
    __param(2, _contextkeyJs.IContextKeyService),
    __param(3, _progressJs.IEditorProgressService),
    __param(4, _instantiationJs.IInstantiationService)
], QuickFixController);
function applyCodeAction(accessor, item, editor) {
    return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
        var bulkEditService, commandService, telemetryService, notificationService, _commandService, message;
        return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
            while(1)switch(_ctx.prev = _ctx.next){
                case 0:
                    bulkEditService = accessor.get(_bulkEditServiceJs.IBulkEditService);
                    commandService = accessor.get(_commandsJs.ICommandService);
                    telemetryService = accessor.get(_telemetryJs.ITelemetryService);
                    notificationService = accessor.get(_notificationJs.INotificationService);
                    telemetryService.publicLog2('codeAction.applyCodeAction', {
                        codeActionTitle: item.action.title,
                        codeActionKind: item.action.kind,
                        codeActionIsPreferred: !!item.action.isPreferred
                    });
                    _ctx.next = 7;
                    return item.resolve(_cancellationJs.CancellationToken.None);
                case 7:
                    if (!item.action.edit) {
                        _ctx.next = 10;
                        break;
                    }
                    _ctx.next = 10;
                    return bulkEditService.apply(_bulkEditServiceJs.ResourceEdit.convert(item.action.edit), {
                        editor: editor,
                        label: item.action.title
                    });
                case 10:
                    if (!item.action.command) {
                        _ctx.next = 21;
                        break;
                    }
                    _ctx.prev = 11;
                    ;
                    _ctx.next = 15;
                    return (_commandService = commandService).executeCommand.apply(_commandService, [
                        item.action.command.id
                    ].concat(_helpers.toConsumableArray(item.action.command.arguments || [])));
                case 15:
                    _ctx.next = 21;
                    break;
                case 17:
                    _ctx.prev = 17;
                    _ctx.t0 = _ctx["catch"](11);
                    message = asMessage(_ctx.t0);
                    notificationService.error(typeof message === 'string' ? message : _nlsJs.localize('applyCodeActionFailed', "An unknown error occurred while applying the code action"));
                case 21:
                case "end":
                    return _ctx.stop();
            }
        }, _callee, null, [
            [
                11,
                17
            ]
        ]);
    }));
}
function asMessage(err) {
    if (typeof err === 'string') return err;
    else if (err instanceof Error && typeof err.message === 'string') return err.message;
    else return undefined;
}
function triggerCodeActionsForEditorSelection(editor, notAvailableMessage, filter, autoApply) {
    if (editor.hasModel()) {
        var controller = QuickFixController.get(editor);
        if (controller) controller.manualTriggerAtCurrentPosition(notAvailableMessage, filter, autoApply);
    }
}
var QuickFixAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(QuickFixAction, EditorAction);
    var _super = _helpers.createSuper(QuickFixAction);
    function QuickFixAction() {
        _helpers.classCallCheck(this, QuickFixAction);
        return _super.call(this, {
            id: QuickFixAction.Id,
            label: _nlsJs.localize('quickfix.trigger.label', "Quick Fix..."),
            alias: 'Quick Fix...',
            precondition: _contextkeyJs.ContextKeyExpr.and(_editorContextKeysJs.EditorContextKeys.writable, _editorContextKeysJs.EditorContextKeys.hasCodeActionsProvider),
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: 2132 /* Period */ ,
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    _helpers.createClass(QuickFixAction, [
        {
            key: "run",
            value: function run(_accessor, editor) {
                return triggerCodeActionsForEditorSelection(editor, _nlsJs.localize('editor.action.quickFix.noneMessage', "No code actions available"), undefined, undefined);
            }
        }
    ]);
    return QuickFixAction;
}(_editorExtensionsJs.EditorAction);
QuickFixAction.Id = 'editor.action.quickFix';
var CodeActionCommand = /*#__PURE__*/ function(EditorCommand) {
    "use strict";
    _helpers.inherits(CodeActionCommand, EditorCommand);
    var _super = _helpers.createSuper(CodeActionCommand);
    function CodeActionCommand() {
        _helpers.classCallCheck(this, CodeActionCommand);
        return _super.call(this, {
            id: _codeActionJs.codeActionCommandId,
            precondition: _contextkeyJs.ContextKeyExpr.and(_editorContextKeysJs.EditorContextKeys.writable, _editorContextKeysJs.EditorContextKeys.hasCodeActionsProvider),
            description: {
                description: 'Trigger a code action',
                args: [
                    {
                        name: 'args',
                        schema: argsSchema
                    }
                ]
            }
        });
    }
    _helpers.createClass(CodeActionCommand, [
        {
            key: "runEditorCommand",
            value: function runEditorCommand(_accessor, editor, userArgs) {
                var args = _typesJs.CodeActionCommandArgs.fromUser(userArgs, {
                    kind: _typesJs.CodeActionKind.Empty,
                    apply: "ifSingle" /* IfSingle */ 
                });
                return triggerCodeActionsForEditorSelection(editor, typeof (userArgs === null || userArgs === void 0 ? void 0 : userArgs.kind) === 'string' ? args.preferred ? _nlsJs.localize('editor.action.codeAction.noneMessage.preferred.kind', "No preferred code actions for '{0}' available", userArgs.kind) : _nlsJs.localize('editor.action.codeAction.noneMessage.kind', "No code actions for '{0}' available", userArgs.kind) : args.preferred ? _nlsJs.localize('editor.action.codeAction.noneMessage.preferred', "No preferred code actions available") : _nlsJs.localize('editor.action.codeAction.noneMessage', "No code actions available"), {
                    include: args.kind,
                    includeSourceActions: true,
                    onlyIncludePreferredActions: args.preferred
                }, args.apply);
            }
        }
    ]);
    return CodeActionCommand;
}(_editorExtensionsJs.EditorCommand);
var RefactorAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(RefactorAction, EditorAction);
    var _super = _helpers.createSuper(RefactorAction);
    function RefactorAction() {
        _helpers.classCallCheck(this, RefactorAction);
        return _super.call(this, {
            id: _codeActionJs.refactorCommandId,
            label: _nlsJs.localize('refactor.label', "Refactor..."),
            alias: 'Refactor...',
            precondition: _contextkeyJs.ContextKeyExpr.and(_editorContextKeysJs.EditorContextKeys.writable, _editorContextKeysJs.EditorContextKeys.hasCodeActionsProvider),
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: 3120 /* KeyR */ ,
                mac: {
                    primary: 1328 /* KeyR */ 
                },
                weight: 100 /* EditorContrib */ 
            },
            contextMenuOpts: {
                group: '1_modification',
                order: 2,
                when: _contextkeyJs.ContextKeyExpr.and(_editorContextKeysJs.EditorContextKeys.writable, contextKeyForSupportedActions(_typesJs.CodeActionKind.Refactor))
            },
            description: {
                description: 'Refactor...',
                args: [
                    {
                        name: 'args',
                        schema: argsSchema
                    }
                ]
            }
        });
    }
    _helpers.createClass(RefactorAction, [
        {
            key: "run",
            value: function run(_accessor, editor, userArgs) {
                var args = _typesJs.CodeActionCommandArgs.fromUser(userArgs, {
                    kind: _typesJs.CodeActionKind.Refactor,
                    apply: "never" /* Never */ 
                });
                return triggerCodeActionsForEditorSelection(editor, typeof (userArgs === null || userArgs === void 0 ? void 0 : userArgs.kind) === 'string' ? args.preferred ? _nlsJs.localize('editor.action.refactor.noneMessage.preferred.kind', "No preferred refactorings for '{0}' available", userArgs.kind) : _nlsJs.localize('editor.action.refactor.noneMessage.kind', "No refactorings for '{0}' available", userArgs.kind) : args.preferred ? _nlsJs.localize('editor.action.refactor.noneMessage.preferred', "No preferred refactorings available") : _nlsJs.localize('editor.action.refactor.noneMessage', "No refactorings available"), {
                    include: _typesJs.CodeActionKind.Refactor.contains(args.kind) ? args.kind : _typesJs.CodeActionKind.None,
                    onlyIncludePreferredActions: args.preferred
                }, args.apply);
            }
        }
    ]);
    return RefactorAction;
}(_editorExtensionsJs.EditorAction);
var SourceAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(SourceAction, EditorAction);
    var _super = _helpers.createSuper(SourceAction);
    function SourceAction() {
        _helpers.classCallCheck(this, SourceAction);
        return _super.call(this, {
            id: _codeActionJs.sourceActionCommandId,
            label: _nlsJs.localize('source.label', "Source Action..."),
            alias: 'Source Action...',
            precondition: _contextkeyJs.ContextKeyExpr.and(_editorContextKeysJs.EditorContextKeys.writable, _editorContextKeysJs.EditorContextKeys.hasCodeActionsProvider),
            contextMenuOpts: {
                group: '1_modification',
                order: 2.1,
                when: _contextkeyJs.ContextKeyExpr.and(_editorContextKeysJs.EditorContextKeys.writable, contextKeyForSupportedActions(_typesJs.CodeActionKind.Source))
            },
            description: {
                description: 'Source Action...',
                args: [
                    {
                        name: 'args',
                        schema: argsSchema
                    }
                ]
            }
        });
    }
    _helpers.createClass(SourceAction, [
        {
            key: "run",
            value: function run(_accessor, editor, userArgs) {
                var args = _typesJs.CodeActionCommandArgs.fromUser(userArgs, {
                    kind: _typesJs.CodeActionKind.Source,
                    apply: "never" /* Never */ 
                });
                return triggerCodeActionsForEditorSelection(editor, typeof (userArgs === null || userArgs === void 0 ? void 0 : userArgs.kind) === 'string' ? args.preferred ? _nlsJs.localize('editor.action.source.noneMessage.preferred.kind', "No preferred source actions for '{0}' available", userArgs.kind) : _nlsJs.localize('editor.action.source.noneMessage.kind', "No source actions for '{0}' available", userArgs.kind) : args.preferred ? _nlsJs.localize('editor.action.source.noneMessage.preferred', "No preferred source actions available") : _nlsJs.localize('editor.action.source.noneMessage', "No source actions available"), {
                    include: _typesJs.CodeActionKind.Source.contains(args.kind) ? args.kind : _typesJs.CodeActionKind.None,
                    includeSourceActions: true,
                    onlyIncludePreferredActions: args.preferred
                }, args.apply);
            }
        }
    ]);
    return SourceAction;
}(_editorExtensionsJs.EditorAction);
var OrganizeImportsAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(OrganizeImportsAction, EditorAction);
    var _super = _helpers.createSuper(OrganizeImportsAction);
    function OrganizeImportsAction() {
        _helpers.classCallCheck(this, OrganizeImportsAction);
        return _super.call(this, {
            id: _codeActionJs.organizeImportsCommandId,
            label: _nlsJs.localize('organizeImports.label', "Organize Imports"),
            alias: 'Organize Imports',
            precondition: _contextkeyJs.ContextKeyExpr.and(_editorContextKeysJs.EditorContextKeys.writable, contextKeyForSupportedActions(_typesJs.CodeActionKind.SourceOrganizeImports)),
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: 1581 /* KeyO */ ,
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    _helpers.createClass(OrganizeImportsAction, [
        {
            key: "run",
            value: function run(_accessor, editor) {
                return triggerCodeActionsForEditorSelection(editor, _nlsJs.localize('editor.action.organize.noneMessage', "No organize imports action available"), {
                    include: _typesJs.CodeActionKind.SourceOrganizeImports,
                    includeSourceActions: true
                }, "ifSingle" /* IfSingle */ );
            }
        }
    ]);
    return OrganizeImportsAction;
}(_editorExtensionsJs.EditorAction);
var FixAllAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(FixAllAction, EditorAction);
    var _super = _helpers.createSuper(FixAllAction);
    function FixAllAction() {
        _helpers.classCallCheck(this, FixAllAction);
        return _super.call(this, {
            id: _codeActionJs.fixAllCommandId,
            label: _nlsJs.localize('fixAll.label', "Fix All"),
            alias: 'Fix All',
            precondition: _contextkeyJs.ContextKeyExpr.and(_editorContextKeysJs.EditorContextKeys.writable, contextKeyForSupportedActions(_typesJs.CodeActionKind.SourceFixAll))
        });
    }
    _helpers.createClass(FixAllAction, [
        {
            key: "run",
            value: function run(_accessor, editor) {
                return triggerCodeActionsForEditorSelection(editor, _nlsJs.localize('fixAll.noneMessage', "No fix all action available"), {
                    include: _typesJs.CodeActionKind.SourceFixAll,
                    includeSourceActions: true
                }, "ifSingle" /* IfSingle */ );
            }
        }
    ]);
    return FixAllAction;
}(_editorExtensionsJs.EditorAction);
var AutoFixAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(AutoFixAction, EditorAction);
    var _super = _helpers.createSuper(AutoFixAction);
    function AutoFixAction() {
        _helpers.classCallCheck(this, AutoFixAction);
        return _super.call(this, {
            id: AutoFixAction.Id,
            label: _nlsJs.localize('autoFix.label', "Auto Fix..."),
            alias: 'Auto Fix...',
            precondition: _contextkeyJs.ContextKeyExpr.and(_editorContextKeysJs.EditorContextKeys.writable, contextKeyForSupportedActions(_typesJs.CodeActionKind.QuickFix)),
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: 1620 /* Period */ ,
                mac: {
                    primary: 2644 /* Period */ 
                },
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    _helpers.createClass(AutoFixAction, [
        {
            key: "run",
            value: function run(_accessor, editor) {
                return triggerCodeActionsForEditorSelection(editor, _nlsJs.localize('editor.action.autoFix.noneMessage', "No auto fixes available"), {
                    include: _typesJs.CodeActionKind.QuickFix,
                    onlyIncludePreferredActions: true
                }, "ifSingle" /* IfSingle */ );
            }
        }
    ]);
    return AutoFixAction;
}(_editorExtensionsJs.EditorAction);
AutoFixAction.Id = 'editor.action.autoFix';

},{"@swc/helpers":"erO4s","regenerator-runtime":"12Ae8","../../../base/common/cancellation.js":"1C4LY","../../../base/common/lazy.js":"5er1q","../../../base/common/lifecycle.js":"bcbPy","../../../base/common/strings.js":"jsb6w","../../browser/editorExtensions.js":"dFnlo","../../browser/services/bulkEditService.js":"cjDLy","../../common/editorContextKeys.js":"2t2PW","./codeAction.js":"uBrYv","./codeActionUi.js":"bq1Rc","../message/messageController.js":"2DdU3","../../../nls.js":"9djYb","../../../platform/commands/common/commands.js":"eeuTC","../../../platform/contextkey/common/contextkey.js":"5cjav","../../../platform/instantiation/common/instantiation.js":"9ABZB","../../../platform/markers/common/markers.js":"4CrDH","../../../platform/notification/common/notification.js":"baqho","../../../platform/progress/common/progress.js":"dJdAd","../../../platform/telemetry/common/telemetry.js":"ers5B","./codeActionModel.js":"42GeS","./types.js":"9FHZq","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"5er1q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Lazy", function() {
    return Lazy;
});
var _helpers = require("@swc/helpers");
var Lazy = /*#__PURE__*/ function() {
    "use strict";
    function Lazy(executor) {
        _helpers.classCallCheck(this, Lazy);
        this.executor = executor;
        this._didRun = false;
    }
    _helpers.createClass(Lazy, [
        {
            /**
     * Get the wrapped value.
     *
     * This will force evaluation of the lazy value if it has not been resolved yet. Lazy values are only
     * resolved once. `getValue` will re-throw exceptions that are hit while resolving the value
     */ key: "getValue",
            value: function getValue() {
                if (!this._didRun) try {
                    this._value = this.executor();
                } catch (err) {
                    this._error = err;
                } finally{
                    this._didRun = true;
                }
                if (this._error) throw this._error;
                return this._value;
            }
        },
        {
            key: "rawValue",
            get: /**
     * Get the wrapped value without forcing evaluation.
     */ function get() {
                return this._value;
            }
        }
    ]);
    return Lazy;
}();

},{"@swc/helpers":"erO4s","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"uBrYv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "codeActionCommandId", function() {
    return codeActionCommandId;
});
parcelHelpers.export(exports, "refactorCommandId", function() {
    return refactorCommandId;
});
parcelHelpers.export(exports, "sourceActionCommandId", function() {
    return sourceActionCommandId;
});
parcelHelpers.export(exports, "organizeImportsCommandId", function() {
    return organizeImportsCommandId;
});
parcelHelpers.export(exports, "fixAllCommandId", function() {
    return fixAllCommandId;
});
parcelHelpers.export(exports, "CodeActionItem", function() {
    return CodeActionItem;
});
parcelHelpers.export(exports, "getCodeActions", function() {
    return getCodeActions;
});
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
var _arraysJs = require("../../../base/common/arrays.js");
var _cancellationJs = require("../../../base/common/cancellation.js");
var _errorsJs = require("../../../base/common/errors.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _uriJs = require("../../../base/common/uri.js");
var _editorStateJs = require("../../browser/core/editorState.js");
var _rangeJs = require("../../common/core/range.js");
var _selectionJs = require("../../common/core/selection.js");
var _modesJs = require("../../common/modes.js");
var _modelServiceJs = require("../../common/services/modelService.js");
var _commandsJs = require("../../../platform/commands/common/commands.js");
var _progressJs = require("../../../platform/progress/common/progress.js");
var _typesJs = require("./types.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var codeActionCommandId = 'editor.action.codeAction';
var refactorCommandId = 'editor.action.refactor';
var sourceActionCommandId = 'editor.action.sourceAction';
var organizeImportsCommandId = 'editor.action.organizeImports';
var fixAllCommandId = 'editor.action.fixAll';
var CodeActionItem = /*#__PURE__*/ function() {
    "use strict";
    function CodeActionItem(action, provider) {
        _helpers.classCallCheck(this, CodeActionItem);
        this.action = action;
        this.provider = provider;
    }
    _helpers.createClass(CodeActionItem, [
        {
            key: "resolve",
            value: function resolve(token) {
                var _a;
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var action;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                if (!(((_a = this.provider) === null || _a === void 0 ? void 0 : _a.resolveCodeAction) && !this.action.edit)) {
                                    _ctx.next = 12;
                                    break;
                                }
                                ;
                                _ctx.prev = 2;
                                _ctx.next = 5;
                                return this.provider.resolveCodeAction(this.action, token);
                            case 5:
                                action = _ctx.sent;
                                _ctx.next = 11;
                                break;
                            case 8:
                                _ctx.prev = 8;
                                _ctx.t0 = _ctx["catch"](2);
                                _errorsJs.onUnexpectedExternalError(_ctx.t0);
                            case 11:
                                if (action) this.action.edit = action.edit;
                            case 12:
                                return _ctx.abrupt("return", this);
                            case 13:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this, [
                        [
                            2,
                            8
                        ]
                    ]);
                }));
            }
        }
    ]);
    return CodeActionItem;
}();
var ManagedCodeActionSet = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(ManagedCodeActionSet, Disposable);
    var _super = _helpers.createSuper(ManagedCodeActionSet);
    function ManagedCodeActionSet(actions, documentation, disposables) {
        _helpers.classCallCheck(this, ManagedCodeActionSet);
        var _this;
        _this = _super.call(this);
        _this.documentation = documentation;
        _this._register(disposables);
        _this.allActions = _helpers.toConsumableArray(actions).sort(ManagedCodeActionSet.codeActionsComparator);
        _this.validActions = _this.allActions.filter(function(param) {
            var action = param.action;
            return !action.disabled;
        });
        return _this;
    }
    _helpers.createClass(ManagedCodeActionSet, [
        {
            key: "hasAutoFix",
            get: function get() {
                return this.validActions.some(function(param) {
                    var fix = param.action;
                    return !!fix.kind && _typesJs.CodeActionKind.QuickFix.contains(new _typesJs.CodeActionKind(fix.kind)) && !!fix.isPreferred;
                });
            }
        }
    ], [
        {
            key: "codeActionsComparator",
            value: function codeActionsComparator(param, param1) {
                var a = param.action, b = param1.action;
                if (a.isPreferred && !b.isPreferred) return -1;
                else if (!a.isPreferred && b.isPreferred) return 1;
                if (_arraysJs.isNonEmptyArray(a.diagnostics)) {
                    if (_arraysJs.isNonEmptyArray(b.diagnostics)) return a.diagnostics[0].message.localeCompare(b.diagnostics[0].message);
                    else return -1;
                } else if (_arraysJs.isNonEmptyArray(b.diagnostics)) return 1;
                else return 0; // both have no diagnostics
            }
        }
    ]);
    return ManagedCodeActionSet;
}(_lifecycleJs.Disposable);
var emptyCodeActionsResponse = {
    actions: [],
    documentation: undefined
};
function getCodeActions(model, rangeOrSelection, trigger, progress, token) {
    var _this = this;
    var _a;
    var filter = trigger.filter || {};
    var codeActionContext = {
        only: (_a = filter.include) === null || _a === void 0 ? void 0 : _a.value,
        trigger: trigger.type
    };
    var cts = new _editorStateJs.TextModelCancellationTokenSource(model, token);
    var providers = getCodeActionProviders(model, filter);
    var disposables = new _lifecycleJs.DisposableStore();
    var promises = providers.map(function(provider) {
        return __awaiter(_this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
            var providedCodeActions, filteredActions, documentation;
            return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                while(1)switch(_ctx.prev = _ctx.next){
                    case 0:
                        _ctx.prev = 0;
                        progress.report(provider);
                        _ctx.next = 4;
                        return provider.provideCodeActions(model, rangeOrSelection, codeActionContext, cts.token);
                    case 4:
                        providedCodeActions = _ctx.sent;
                        if (providedCodeActions) disposables.add(providedCodeActions);
                        if (!cts.token.isCancellationRequested) {
                            _ctx.next = 8;
                            break;
                        }
                        return _ctx.abrupt("return", emptyCodeActionsResponse);
                    case 8:
                        filteredActions = ((providedCodeActions === null || providedCodeActions === void 0 ? void 0 : providedCodeActions.actions) || []).filter(function(action) {
                            return action && _typesJs.filtersAction(filter, action);
                        });
                        documentation = getDocumentation(provider, filteredActions, filter.include);
                        return _ctx.abrupt("return", {
                            actions: filteredActions.map(function(action) {
                                return new CodeActionItem(action, provider);
                            }),
                            documentation: documentation
                        });
                    case 13:
                        _ctx.prev = 13;
                        _ctx.t0 = _ctx["catch"](0);
                        if (!_errorsJs.isPromiseCanceledError(_ctx.t0)) {
                            _ctx.next = 17;
                            break;
                        }
                        throw _ctx.t0;
                    case 17:
                        _errorsJs.onUnexpectedExternalError(_ctx.t0);
                        return _ctx.abrupt("return", emptyCodeActionsResponse);
                    case 19:
                    case "end":
                        return _ctx.stop();
                }
            }, _callee, null, [
                [
                    0,
                    13
                ]
            ]);
        }));
    });
    var listener = _modesJs.CodeActionProviderRegistry.onDidChange(function() {
        var newProviders = _modesJs.CodeActionProviderRegistry.all(model);
        if (!_arraysJs.equals(newProviders, providers)) cts.cancel();
    });
    return Promise.all(promises).then(function(actions) {
        var allActions = _arraysJs.flatten(actions.map(function(x) {
            return x.actions;
        }));
        var allDocumentation = _arraysJs.coalesce(actions.map(function(x) {
            return x.documentation;
        }));
        return new ManagedCodeActionSet(allActions, allDocumentation, disposables);
    }).finally(function() {
        listener.dispose();
        cts.dispose();
    });
}
function getCodeActionProviders(model, filter) {
    return _modesJs.CodeActionProviderRegistry.all(model)// Don't include providers that we know will not return code actions of interest
    .filter(function(provider) {
        if (!provider.providedCodeActionKinds) // We don't know what type of actions this provider will return.
        return true;
        return provider.providedCodeActionKinds.some(function(kind) {
            return _typesJs.mayIncludeActionsOfKind(filter, new _typesJs.CodeActionKind(kind));
        });
    });
}
function getDocumentation(provider, providedCodeActions, only) {
    if (!provider.documentation) return undefined;
    var documentation = provider.documentation.map(function(entry) {
        return {
            kind: new _typesJs.CodeActionKind(entry.kind),
            command: entry.command
        };
    });
    if (only) {
        var currentBest;
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = documentation[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var entry2 = _step.value;
                if (entry2.kind.contains(only)) {
                    if (!currentBest) currentBest = entry2;
                    else // Take best match
                    if (currentBest.kind.contains(entry2.kind)) currentBest = entry2;
                }
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
        if (currentBest) return currentBest === null || currentBest === void 0 ? void 0 : currentBest.command;
    }
    var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
    try {
        // Otherwise, check to see if any of the provided actions match.
        for(var _iterator1 = providedCodeActions[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
            var action = _step1.value;
            if (!action.kind) continue;
            var _iteratorNormalCompletion2 = true, _didIteratorError2 = false, _iteratorError2 = undefined;
            try {
                for(var _iterator2 = documentation[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true){
                    var entry1 = _step2.value;
                    if (entry1.kind.contains(new _typesJs.CodeActionKind(action.kind))) return entry1.command;
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally{
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                        _iterator2.return();
                    }
                } finally{
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }
        }
    } catch (err) {
        _didIteratorError1 = true;
        _iteratorError1 = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                _iterator1.return();
            }
        } finally{
            if (_didIteratorError1) {
                throw _iteratorError1;
            }
        }
    }
    return undefined;
}
_commandsJs.CommandsRegistry.registerCommand('_executeCodeActionProvider', function(accessor, resource, rangeOrSelection, kind, itemResolveCount) {
    return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
        var model, validatedRangeOrSelection, include, codeActionSet, resolving, resolveCount, i;
        return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
            while(1)switch(_ctx.prev = _ctx.next){
                case 0:
                    if (resource instanceof _uriJs.URI) {
                        _ctx.next = 2;
                        break;
                    }
                    throw _errorsJs.illegalArgument();
                case 2:
                    model = accessor.get(_modelServiceJs.IModelService).getModel(resource);
                    if (model) {
                        _ctx.next = 5;
                        break;
                    }
                    throw _errorsJs.illegalArgument();
                case 5:
                    validatedRangeOrSelection = _selectionJs.Selection.isISelection(rangeOrSelection) ? _selectionJs.Selection.liftSelection(rangeOrSelection) : _rangeJs.Range.isIRange(rangeOrSelection) ? model.validateRange(rangeOrSelection) : undefined;
                    if (validatedRangeOrSelection) {
                        _ctx.next = 8;
                        break;
                    }
                    throw _errorsJs.illegalArgument();
                case 8:
                    include = typeof kind === 'string' ? new _typesJs.CodeActionKind(kind) : undefined;
                    _ctx.next = 11;
                    return getCodeActions(model, validatedRangeOrSelection, {
                        type: 1 /* Invoke */ ,
                        filter: {
                            includeSourceActions: true,
                            include: include
                        }
                    }, _progressJs.Progress.None, _cancellationJs.CancellationToken.None);
                case 11:
                    codeActionSet = _ctx.sent;
                    resolving = [];
                    resolveCount = Math.min(codeActionSet.validActions.length, typeof itemResolveCount === 'number' ? itemResolveCount : 0);
                    for(i = 0; i < resolveCount; i++)resolving.push(codeActionSet.validActions[i].resolve(_cancellationJs.CancellationToken.None));
                    _ctx.prev = 15;
                    _ctx.next = 18;
                    return Promise.all(resolving);
                case 18:
                    return _ctx.abrupt("return", codeActionSet.validActions.map(function(item) {
                        return item.action;
                    }));
                case 19:
                    _ctx.prev = 19;
                    setTimeout(function() {
                        return codeActionSet.dispose();
                    }, 100);
                    return _ctx.finish(19);
                case 22:
                case "end":
                    return _ctx.stop();
            }
        }, _callee, null, [
            [
                15,
                ,
                19,
                22
            ]
        ]);
    }));
});

},{"@swc/helpers":"erO4s","regenerator-runtime":"12Ae8","../../../base/common/arrays.js":"bZs3E","../../../base/common/cancellation.js":"1C4LY","../../../base/common/errors.js":"afm4i","../../../base/common/lifecycle.js":"bcbPy","../../../base/common/uri.js":"4ZDLf","../../browser/core/editorState.js":"5J2rl","../../common/core/range.js":"VbyL8","../../common/core/selection.js":"hjmnH","../../common/modes.js":"bRbY1","../../common/services/modelService.js":"HyRTJ","../../../platform/commands/common/commands.js":"eeuTC","../../../platform/progress/common/progress.js":"dJdAd","./types.js":"9FHZq","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"9FHZq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CodeActionKind", function() {
    return CodeActionKind;
});
parcelHelpers.export(exports, "mayIncludeActionsOfKind", function() {
    return mayIncludeActionsOfKind;
});
parcelHelpers.export(exports, "filtersAction", function() {
    return filtersAction;
});
parcelHelpers.export(exports, "CodeActionCommandArgs", function() {
    return CodeActionCommandArgs;
});
var _helpers = require("@swc/helpers");
var CodeActionKind = /*#__PURE__*/ function() {
    "use strict";
    function CodeActionKind(value) {
        _helpers.classCallCheck(this, CodeActionKind);
        this.value = value;
    }
    _helpers.createClass(CodeActionKind, [
        {
            key: "equals",
            value: function equals(other) {
                return this.value === other.value;
            }
        },
        {
            key: "contains",
            value: function contains(other) {
                return this.equals(other) || this.value === '' || other.value.startsWith(this.value + CodeActionKind.sep);
            }
        },
        {
            key: "intersects",
            value: function intersects(other) {
                return this.contains(other) || other.contains(this);
            }
        },
        {
            key: "append",
            value: function append(part) {
                return new CodeActionKind(this.value + CodeActionKind.sep + part);
            }
        }
    ]);
    return CodeActionKind;
}();
CodeActionKind.sep = '.';
CodeActionKind.None = new CodeActionKind('@@none@@'); // Special code action that contains nothing
CodeActionKind.Empty = new CodeActionKind('');
CodeActionKind.QuickFix = new CodeActionKind('quickfix');
CodeActionKind.Refactor = new CodeActionKind('refactor');
CodeActionKind.Source = new CodeActionKind('source');
CodeActionKind.SourceOrganizeImports = CodeActionKind.Source.append('organizeImports');
CodeActionKind.SourceFixAll = CodeActionKind.Source.append('fixAll');
function mayIncludeActionsOfKind(filter, providedKind) {
    // A provided kind may be a subset or superset of our filtered kind.
    if (filter.include && !filter.include.intersects(providedKind)) return false;
    if (filter.excludes) {
        if (filter.excludes.some(function(exclude) {
            return excludesAction(providedKind, exclude, filter.include);
        })) return false;
    }
    // Don't return source actions unless they are explicitly requested
    if (!filter.includeSourceActions && CodeActionKind.Source.contains(providedKind)) return false;
    return true;
}
function filtersAction(filter, action) {
    var actionKind = action.kind ? new CodeActionKind(action.kind) : undefined;
    // Filter out actions by kind
    if (filter.include) {
        if (!actionKind || !filter.include.contains(actionKind)) return false;
    }
    if (filter.excludes) {
        if (actionKind && filter.excludes.some(function(exclude) {
            return excludesAction(actionKind, exclude, filter.include);
        })) return false;
    }
    // Don't return source actions unless they are explicitly requested
    if (!filter.includeSourceActions) {
        if (actionKind && CodeActionKind.Source.contains(actionKind)) return false;
    }
    if (filter.onlyIncludePreferredActions) {
        if (!action.isPreferred) return false;
    }
    return true;
}
function excludesAction(providedKind, exclude, include) {
    if (!exclude.contains(providedKind)) return false;
    if (include && exclude.contains(include)) // The include is more specific, don't filter out
    return false;
    return true;
}
var CodeActionCommandArgs = /*#__PURE__*/ function() {
    "use strict";
    function CodeActionCommandArgs(kind, apply, preferred) {
        _helpers.classCallCheck(this, CodeActionCommandArgs);
        this.kind = kind;
        this.apply = apply;
        this.preferred = preferred;
    }
    _helpers.createClass(CodeActionCommandArgs, null, [
        {
            key: "fromUser",
            value: function fromUser(arg, defaults) {
                if (!arg || typeof arg !== 'object') return new CodeActionCommandArgs(defaults.kind, defaults.apply, false);
                return new CodeActionCommandArgs(CodeActionCommandArgs.getKindFromUser(arg, defaults.kind), CodeActionCommandArgs.getApplyFromUser(arg, defaults.apply), CodeActionCommandArgs.getPreferredUser(arg));
            }
        },
        {
            key: "getApplyFromUser",
            value: function getApplyFromUser(arg, defaultAutoApply) {
                switch(typeof arg.apply === 'string' ? arg.apply.toLowerCase() : ''){
                    case 'first':
                        return "first" /* First */ ;
                    case 'never':
                        return "never" /* Never */ ;
                    case 'ifsingle':
                        return "ifSingle" /* IfSingle */ ;
                    default:
                        return defaultAutoApply;
                }
            }
        },
        {
            key: "getKindFromUser",
            value: function getKindFromUser(arg, defaultKind) {
                return typeof arg.kind === 'string' ? new CodeActionKind(arg.kind) : defaultKind;
            }
        },
        {
            key: "getPreferredUser",
            value: function getPreferredUser(arg) {
                return typeof arg.preferred === 'boolean' ? arg.preferred : false;
            }
        }
    ]);
    return CodeActionCommandArgs;
}();

},{"@swc/helpers":"erO4s","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"bq1Rc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CodeActionUi", function() {
    return CodeActionUi;
});
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
var _errorsJs = require("../../../base/common/errors.js");
var _lazyJs = require("../../../base/common/lazy.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _messageControllerJs = require("../message/messageController.js");
var _instantiationJs = require("../../../platform/instantiation/common/instantiation.js");
var _codeActionMenuJs = require("./codeActionMenu.js");
var _lightBulbWidgetJs = require("./lightBulbWidget.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = undefined && undefined.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var __classPrivateFieldGet = undefined && undefined.__classPrivateFieldGet || function(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _CodeActionUi_disposed;
var CodeActionUi = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(CodeActionUi1, Disposable);
    var _super = _helpers.createSuper(CodeActionUi1);
    function CodeActionUi1(_editor, quickFixActionId, preferredFixActionId, delegate, instantiationService) {
        _helpers.classCallCheck(this, CodeActionUi1);
        var _this;
        _this = _super.call(this);
        _this._editor = _editor;
        _this.delegate = delegate;
        _this._activeCodeActions = _this._register(new _lifecycleJs.MutableDisposable());
        _CodeActionUi_disposed.set(_helpers.assertThisInitialized(_this), false);
        _this._codeActionWidget = new _lazyJs.Lazy(function() {
            return _this._register(instantiationService.createInstance(_codeActionMenuJs.CodeActionMenu, _this._editor, {
                onSelectCodeAction: function(action) {
                    return __awaiter(_helpers.assertThisInitialized(_this), void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                        return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                            while(1)switch(_ctx.prev = _ctx.next){
                                case 0:
                                    this.delegate.applyCodeAction(action, /* retrigger */ true);
                                case 1:
                                case "end":
                                    return _ctx.stop();
                            }
                        }, _callee, this);
                    }));
                }
            }));
        });
        _this._lightBulbWidget = new _lazyJs.Lazy(function() {
            var widget = _this._register(instantiationService.createInstance(_lightBulbWidgetJs.LightBulbWidget, _this._editor, quickFixActionId, preferredFixActionId));
            _this._register(widget.onClick(function(e) {
                return _this.showCodeActionList(e.trigger, e.actions, e, {
                    includeDisabledActions: false
                });
            }));
            return widget;
        });
        return _this;
    }
    _helpers.createClass(CodeActionUi1, [
        {
            key: "dispose",
            value: function dispose() {
                __classPrivateFieldSet(this, _CodeActionUi_disposed, true, "f");
                _helpers.get(_helpers.getPrototypeOf(CodeActionUi1.prototype), "dispose", this).call(this);
            }
        },
        {
            key: "update",
            value: function update(newState) {
                var _a, _b, _c;
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var actions, validActionToApply, invalidAction, includeDisabledActions;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                if (!(newState.type !== 1 /* Triggered */ )) {
                                    _ctx.next = 3;
                                    break;
                                }
                                (_a = this._lightBulbWidget.rawValue) === null || _a === void 0 || _a.hide();
                                return _ctx.abrupt("return");
                            case 3:
                                ;
                                _ctx.prev = 4;
                                _ctx.next = 7;
                                return newState.actions;
                            case 7:
                                actions = _ctx.sent;
                                _ctx.next = 14;
                                break;
                            case 10:
                                _ctx.prev = 10;
                                _ctx.t0 = _ctx["catch"](4);
                                _errorsJs.onUnexpectedError(_ctx.t0);
                                return _ctx.abrupt("return");
                            case 14:
                                if (!__classPrivateFieldGet(this, _CodeActionUi_disposed, "f")) {
                                    _ctx.next = 16;
                                    break;
                                }
                                return _ctx.abrupt("return");
                            case 16:
                                this._lightBulbWidget.getValue().update(actions, newState.trigger, newState.position);
                                if (!(newState.trigger.type === 1 /* Invoke */ )) {
                                    _ctx.next = 46;
                                    break;
                                }
                                if (!((_b = newState.trigger.filter) === null || _b === void 0 ? void 0 : _b.include)) {
                                    _ctx.next = 35;
                                    break;
                                }
                                validActionToApply = this.tryGetValidActionToApply(newState.trigger, actions);
                                if (!validActionToApply) {
                                    _ctx.next = 29;
                                    break;
                                }
                                _ctx.prev = 21;
                                this._lightBulbWidget.getValue().hide();
                                _ctx.next = 25;
                                return this.delegate.applyCodeAction(validActionToApply, false);
                            case 25:
                                _ctx.prev = 25;
                                actions.dispose();
                                return _ctx.finish(25);
                            case 28:
                                return _ctx.abrupt("return");
                            case 29:
                                if (!newState.trigger.context) {
                                    _ctx.next = 35;
                                    break;
                                }
                                invalidAction = this.getInvalidActionThatWouldHaveBeenApplied(newState.trigger, actions);
                                if (!(invalidAction && invalidAction.action.disabled)) {
                                    _ctx.next = 35;
                                    break;
                                }
                                _messageControllerJs.MessageController.get(this._editor).showMessage(invalidAction.action.disabled, newState.trigger.context.position);
                                actions.dispose();
                                return _ctx.abrupt("return");
                            case 35:
                                includeDisabledActions = !!((_c = newState.trigger.filter) === null || _c === void 0 ? void 0 : _c.include);
                                if (!newState.trigger.context) {
                                    _ctx.next = 42;
                                    break;
                                }
                                if (!(!actions.allActions.length || !includeDisabledActions && !actions.validActions.length)) {
                                    _ctx.next = 42;
                                    break;
                                }
                                _messageControllerJs.MessageController.get(this._editor).showMessage(newState.trigger.context.notAvailableMessage, newState.trigger.context.position);
                                this._activeCodeActions.value = actions;
                                actions.dispose();
                                return _ctx.abrupt("return");
                            case 42:
                                this._activeCodeActions.value = actions;
                                this._codeActionWidget.getValue().show(newState.trigger, actions, newState.position, {
                                    includeDisabledActions: includeDisabledActions
                                });
                                _ctx.next = 47;
                                break;
                            case 46:
                                // auto magically triggered
                                if (this._codeActionWidget.getValue().isVisible) // TODO: Figure out if we should update the showing menu?
                                actions.dispose();
                                else this._activeCodeActions.value = actions;
                            case 47:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this, [
                        [
                            4,
                            10
                        ],
                        [
                            21,
                            ,
                            25,
                            28
                        ]
                    ]);
                }));
            }
        },
        {
            key: "getInvalidActionThatWouldHaveBeenApplied",
            value: function getInvalidActionThatWouldHaveBeenApplied(trigger, actions) {
                if (!actions.allActions.length) return undefined;
                if (trigger.autoApply === "first" /* First */  && actions.validActions.length === 0 || trigger.autoApply === "ifSingle" /* IfSingle */  && actions.allActions.length === 1) return actions.allActions.find(function(param) {
                    var action = param.action;
                    return action.disabled;
                });
                return undefined;
            }
        },
        {
            key: "tryGetValidActionToApply",
            value: function tryGetValidActionToApply(trigger, actions) {
                if (!actions.validActions.length) return undefined;
                if (trigger.autoApply === "first" /* First */  && actions.validActions.length > 0 || trigger.autoApply === "ifSingle" /* IfSingle */  && actions.validActions.length === 1) return actions.validActions[0];
                return undefined;
            }
        },
        {
            key: "showCodeActionList",
            value: function showCodeActionList(trigger, actions, at, options) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                this._codeActionWidget.getValue().show(trigger, actions, at, options);
                            case 1:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this);
                }));
            }
        }
    ]);
    return CodeActionUi1;
}(_lifecycleJs.Disposable);
_CodeActionUi_disposed = new WeakMap();
CodeActionUi = __decorate([
    __param(4, _instantiationJs.IInstantiationService)
], CodeActionUi);

},{"@swc/helpers":"erO4s","regenerator-runtime":"12Ae8","../../../base/common/errors.js":"afm4i","../../../base/common/lazy.js":"5er1q","../../../base/common/lifecycle.js":"bcbPy","../message/messageController.js":"2DdU3","../../../platform/instantiation/common/instantiation.js":"9ABZB","./codeActionMenu.js":"9leHl","./lightBulbWidget.js":"aHk2Y","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"2DdU3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MessageController", function() {
    return MessageController;
});
var _helpers = require("@swc/helpers");
var _ariaJs = require("../../../base/browser/ui/aria/aria.js");
var _asyncJs = require("../../../base/common/async.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _messageControllerCss = require("./messageController.css");
var _editorExtensionsJs = require("../../browser/editorExtensions.js");
var _rangeJs = require("../../common/core/range.js");
var _nlsJs = require("../../../nls.js");
var _contextkeyJs = require("../../../platform/contextkey/common/contextkey.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var MessageController = /*#__PURE__*/ function() {
    "use strict";
    function MessageController1(editor, contextKeyService) {
        var _this = this;
        _helpers.classCallCheck(this, MessageController1);
        this._messageWidget = new _lifecycleJs.MutableDisposable();
        this._messageListeners = new _lifecycleJs.DisposableStore();
        this._editor = editor;
        this._visible = MessageController1.MESSAGE_VISIBLE.bindTo(contextKeyService);
        this._editorListener = this._editor.onDidAttemptReadOnlyEdit(function() {
            return _this._onDidAttemptReadOnlyEdit();
        });
    }
    _helpers.createClass(MessageController1, [
        {
            key: "dispose",
            value: function dispose() {
                this._editorListener.dispose();
                this._messageListeners.dispose();
                this._messageWidget.dispose();
                this._visible.reset();
            }
        },
        {
            key: "showMessage",
            value: function showMessage(message, position) {
                var _this = this;
                _ariaJs.alert(message);
                this._visible.set(true);
                this._messageWidget.clear();
                this._messageListeners.clear();
                this._messageWidget.value = new MessageWidget(this._editor, position, message);
                // close on blur, cursor, model change, dispose
                this._messageListeners.add(this._editor.onDidBlurEditorText(function() {
                    return _this.closeMessage();
                }));
                this._messageListeners.add(this._editor.onDidChangeCursorPosition(function() {
                    return _this.closeMessage();
                }));
                this._messageListeners.add(this._editor.onDidDispose(function() {
                    return _this.closeMessage();
                }));
                this._messageListeners.add(this._editor.onDidChangeModel(function() {
                    return _this.closeMessage();
                }));
                // 3sec
                this._messageListeners.add(new _asyncJs.TimeoutTimer(function() {
                    return _this.closeMessage();
                }, 3000));
                // close on mouse move
                var bounds;
                this._messageListeners.add(this._editor.onMouseMove(function(e) {
                    // outside the text area
                    if (!e.target.position) return;
                    if (!bounds) // define bounding box around position and first mouse occurance
                    bounds = new _rangeJs.Range(position.lineNumber - 3, 1, e.target.position.lineNumber + 3, 1);
                    else if (!bounds.containsPosition(e.target.position)) // check if position is still in bounds
                    _this.closeMessage();
                }));
            }
        },
        {
            key: "closeMessage",
            value: function closeMessage() {
                this._visible.reset();
                this._messageListeners.clear();
                if (this._messageWidget.value) this._messageListeners.add(MessageWidget.fadeOut(this._messageWidget.value));
            }
        },
        {
            key: "_onDidAttemptReadOnlyEdit",
            value: function _onDidAttemptReadOnlyEdit() {
                if (this._editor.hasModel()) this.showMessage(_nlsJs.localize('editor.readonly', "Cannot edit in read-only editor"), this._editor.getPosition());
            }
        }
    ], [
        {
            key: "get",
            value: function get(editor) {
                return editor.getContribution(MessageController1.ID);
            }
        }
    ]);
    return MessageController1;
}();
MessageController.ID = 'editor.contrib.messageController';
MessageController.MESSAGE_VISIBLE = new _contextkeyJs.RawContextKey('messageVisible', false, _nlsJs.localize('messageVisible', 'Whether the editor is currently showing an inline message'));
MessageController = __decorate([
    __param(1, _contextkeyJs.IContextKeyService)
], MessageController);
var MessageCommand = _editorExtensionsJs.EditorCommand.bindToContribution(MessageController.get);
_editorExtensionsJs.registerEditorCommand(new MessageCommand({
    id: 'leaveEditorMessage',
    precondition: MessageController.MESSAGE_VISIBLE,
    handler: function(c) {
        return c.closeMessage();
    },
    kbOpts: {
        weight: 130,
        primary: 9 /* Escape */ 
    }
}));
var MessageWidget = /*#__PURE__*/ function() {
    "use strict";
    function MessageWidget(editor, param, text) {
        var lineNumber = param.lineNumber, column = param.column;
        _helpers.classCallCheck(this, MessageWidget);
        // Editor.IContentWidget.allowEditorOverflow
        this.allowEditorOverflow = true;
        this.suppressMouseDown = false;
        this._editor = editor;
        this._editor.revealLinesInCenterIfOutsideViewport(lineNumber, lineNumber, 0 /* Smooth */ );
        this._position = {
            lineNumber: lineNumber,
            column: column - 1
        };
        this._domNode = document.createElement('div');
        this._domNode.classList.add('monaco-editor-overlaymessage');
        var anchorTop = document.createElement('div');
        anchorTop.classList.add('anchor', 'top');
        this._domNode.appendChild(anchorTop);
        var message = document.createElement('div');
        message.classList.add('message');
        message.textContent = text;
        this._domNode.appendChild(message);
        var anchorBottom = document.createElement('div');
        anchorBottom.classList.add('anchor', 'below');
        this._domNode.appendChild(anchorBottom);
        this._editor.addContentWidget(this);
        this._domNode.classList.add('fadeIn');
    }
    _helpers.createClass(MessageWidget, [
        {
            key: "dispose",
            value: function dispose() {
                this._editor.removeContentWidget(this);
            }
        },
        {
            key: "getId",
            value: function getId() {
                return 'messageoverlay';
            }
        },
        {
            key: "getDomNode",
            value: function getDomNode() {
                return this._domNode;
            }
        },
        {
            key: "getPosition",
            value: function getPosition() {
                return {
                    position: this._position,
                    preference: [
                        1 /* ABOVE */ ,
                        2 /* BELOW */ 
                    ]
                };
            }
        },
        {
            key: "afterRender",
            value: function afterRender(position) {
                this._domNode.classList.toggle('below', position === 2 /* BELOW */ );
            }
        }
    ], [
        {
            key: "fadeOut",
            value: function fadeOut(messageWidget) {
                var handle;
                var dispose = function() {
                    messageWidget.dispose();
                    clearTimeout(handle);
                    messageWidget.getDomNode().removeEventListener('animationend', dispose);
                };
                handle = setTimeout(dispose, 110);
                messageWidget.getDomNode().addEventListener('animationend', dispose);
                messageWidget.getDomNode().classList.add('fadeOut');
                return {
                    dispose: dispose
                };
            }
        }
    ]);
    return MessageWidget;
}();
_editorExtensionsJs.registerEditorContribution(MessageController.ID, MessageController);

},{"@swc/helpers":"erO4s","../../../base/browser/ui/aria/aria.js":"8SLUe","../../../base/common/async.js":"kMhSh","../../../base/common/lifecycle.js":"bcbPy","./messageController.css":"9I0DY","../../browser/editorExtensions.js":"dFnlo","../../common/core/range.js":"VbyL8","../../../nls.js":"9djYb","../../../platform/contextkey/common/contextkey.js":"5cjav","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"9I0DY":[function() {},{}],"9leHl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CodeActionMenu", function() {
    return CodeActionMenu;
});
parcelHelpers.export(exports, "CodeActionKeybindingResolver", function() {
    return CodeActionKeybindingResolver;
});
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
var _domJs = require("../../../base/browser/dom.js");
var _actionsJs = require("../../../base/common/actions.js");
var _errorsJs = require("../../../base/common/errors.js");
var _lazyJs = require("../../../base/common/lazy.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _positionJs = require("../../common/core/position.js");
var _modesJs = require("../../common/modes.js");
var _codeActionJs = require("./codeAction.js");
var _typesJs = require("./types.js");
var _contextViewJs = require("../../../platform/contextview/browser/contextView.js");
var _keybindingJs = require("../../../platform/keybinding/common/keybinding.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var CodeActionAction = /*#__PURE__*/ function(Action) {
    "use strict";
    _helpers.inherits(CodeActionAction, Action);
    var _super = _helpers.createSuper(CodeActionAction);
    function CodeActionAction(action, callback) {
        _helpers.classCallCheck(this, CodeActionAction);
        var _this;
        _this = _super.call(this, action.command ? action.command.id : action.title, stripNewlines(action.title), undefined, !action.disabled, callback);
        _this.action = action;
        return _this;
    }
    return CodeActionAction;
}(_actionsJs.Action);
function stripNewlines(str) {
    return str.replace(/\r\n|\r|\n/g, ' ');
}
var CodeActionMenu = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(CodeActionMenu1, Disposable);
    var _super = _helpers.createSuper(CodeActionMenu1);
    function CodeActionMenu1(_editor, _delegate, _contextMenuService, keybindingService) {
        _helpers.classCallCheck(this, CodeActionMenu1);
        var _this;
        _this = _super.call(this);
        _this._editor = _editor;
        _this._delegate = _delegate;
        _this._contextMenuService = _contextMenuService;
        _this._visible = false;
        _this._showingActions = _this._register(new _lifecycleJs.MutableDisposable());
        _this._keybindingResolver = new CodeActionKeybindingResolver({
            getKeybindings: function() {
                return keybindingService.getKeybindings();
            }
        });
        return _this;
    }
    _helpers.createClass(CodeActionMenu1, [
        {
            key: "isVisible",
            get: function get() {
                return this._visible;
            }
        },
        {
            key: "show",
            value: function show(trigger, codeActions, at, options) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var _this, actionsToShow, menuActions, anchor, resolver, useShadowDOM;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                _this = this;
                                actionsToShow = options.includeDisabledActions ? codeActions.allActions : codeActions.validActions;
                                if (actionsToShow.length) {
                                    _ctx.next = 5;
                                    break;
                                }
                                this._visible = false;
                                return _ctx.abrupt("return");
                            case 5:
                                if (this._editor.getDomNode()) {
                                    _ctx.next = 8;
                                    break;
                                }
                                // cancel when editor went off-dom
                                this._visible = false;
                                throw _errorsJs.canceled();
                            case 8:
                                this._visible = true;
                                this._showingActions.value = codeActions;
                                menuActions = this.getMenuActions(trigger, actionsToShow, codeActions.documentation);
                                anchor = _positionJs.Position.isIPosition(at) ? this._toCoords(at) : at || {
                                    x: 0,
                                    y: 0
                                };
                                resolver = this._keybindingResolver.getResolver();
                                useShadowDOM = this._editor.getOption(114 /* useShadowDOM */ );
                                this._contextMenuService.showContextMenu({
                                    domForShadowRoot: useShadowDOM ? this._editor.getDomNode() : undefined,
                                    getAnchor: function() {
                                        return anchor;
                                    },
                                    getActions: function() {
                                        return menuActions;
                                    },
                                    onHide: function() {
                                        _this._visible = false;
                                        _this._editor.focus();
                                    },
                                    autoSelectFirstItem: true,
                                    getKeyBinding: function(action) {
                                        return action instanceof CodeActionAction ? resolver(action.action) : undefined;
                                    }
                                });
                            case 15:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this);
                }));
            }
        },
        {
            key: "getMenuActions",
            value: function getMenuActions(trigger, actionsToShow, documentation) {
                var _this = this;
                var _result;
                var _a, _b;
                var toCodeActionAction = function(item) {
                    return new CodeActionAction(item.action, function() {
                        return _this._delegate.onSelectCodeAction(item);
                    });
                };
                var result = actionsToShow.map(toCodeActionAction);
                var allDocumentation = _helpers.toConsumableArray(documentation);
                var model = this._editor.getModel();
                if (model && result.length) {
                    var _allDocumentation;
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator = _modesJs.CodeActionProviderRegistry.all(model)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var provider = _step.value;
                            if (provider._getAdditionalMenuItems) (_allDocumentation = allDocumentation).push.apply(_allDocumentation, _helpers.toConsumableArray(provider._getAdditionalMenuItems({
                                trigger: trigger.type,
                                only: (_b = (_a = trigger.filter) === null || _a === void 0 ? void 0 : _a.include) === null || _b === void 0 ? void 0 : _b.value
                            }, actionsToShow.map(function(item) {
                                return item.action;
                            }))));
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                }
                if (allDocumentation.length) (_result = result).push.apply(_result, [
                    new _actionsJs.Separator()
                ].concat(_helpers.toConsumableArray(allDocumentation.map(function(command) {
                    return toCodeActionAction(new _codeActionJs.CodeActionItem({
                        title: command.title,
                        command: command
                    }, undefined));
                }))));
                return result;
            }
        },
        {
            key: "_toCoords",
            value: function _toCoords(position) {
                if (!this._editor.hasModel()) return {
                    x: 0,
                    y: 0
                };
                this._editor.revealPosition(position, 1 /* Immediate */ );
                this._editor.render();
                // Translate to absolute editor position
                var cursorCoords = this._editor.getScrolledVisiblePosition(position);
                var editorCoords = _domJs.getDomNodePagePosition(this._editor.getDomNode());
                var x = editorCoords.left + cursorCoords.left;
                var y = editorCoords.top + cursorCoords.top + cursorCoords.height;
                return {
                    x: x,
                    y: y
                };
            }
        }
    ]);
    return CodeActionMenu1;
}(_lifecycleJs.Disposable);
CodeActionMenu = __decorate([
    __param(2, _contextViewJs.IContextMenuService),
    __param(3, _keybindingJs.IKeybindingService)
], CodeActionMenu);
var CodeActionKeybindingResolver = /*#__PURE__*/ function() {
    "use strict";
    function CodeActionKeybindingResolver(_keybindingProvider) {
        _helpers.classCallCheck(this, CodeActionKeybindingResolver);
        this._keybindingProvider = _keybindingProvider;
    }
    _helpers.createClass(CodeActionKeybindingResolver, [
        {
            key: "getResolver",
            value: function getResolver() {
                var _this = this;
                // Lazy since we may not actually ever read the value
                var allCodeActionBindings = new _lazyJs.Lazy(function() {
                    return _this._keybindingProvider.getKeybindings().filter(function(item) {
                        return CodeActionKeybindingResolver.codeActionCommands.indexOf(item.command) >= 0;
                    }).filter(function(item) {
                        return item.resolvedKeybinding;
                    }).map(function(item) {
                        // Special case these commands since they come built-in with VS Code and don't use 'commandArgs'
                        var commandArgs = item.commandArgs;
                        if (item.command === _codeActionJs.organizeImportsCommandId) commandArgs = {
                            kind: _typesJs.CodeActionKind.SourceOrganizeImports.value
                        };
                        else if (item.command === _codeActionJs.fixAllCommandId) commandArgs = {
                            kind: _typesJs.CodeActionKind.SourceFixAll.value
                        };
                        return Object.assign({
                            resolvedKeybinding: item.resolvedKeybinding
                        }, _typesJs.CodeActionCommandArgs.fromUser(commandArgs, {
                            kind: _typesJs.CodeActionKind.None,
                            apply: "never" /* Never */ 
                        }));
                    });
                });
                return function(action) {
                    if (action.kind) {
                        var binding = _this.bestKeybindingForCodeAction(action, allCodeActionBindings.getValue());
                        return binding === null || binding === void 0 ? void 0 : binding.resolvedKeybinding;
                    }
                    return undefined;
                };
            }
        },
        {
            key: "bestKeybindingForCodeAction",
            value: function bestKeybindingForCodeAction(action, candidates) {
                if (!action.kind) return undefined;
                var kind = new _typesJs.CodeActionKind(action.kind);
                return candidates.filter(function(candidate) {
                    return candidate.kind.contains(kind);
                }).filter(function(candidate) {
                    if (candidate.preferred) // If the candidate keybinding only applies to preferred actions, the this action must also be preferred
                    return action.isPreferred;
                    return true;
                }).reduceRight(function(currentBest, candidate) {
                    if (!currentBest) return candidate;
                    // Select the more specific binding
                    return currentBest.kind.contains(candidate.kind) ? candidate : currentBest;
                }, undefined);
            }
        }
    ]);
    return CodeActionKeybindingResolver;
}();
CodeActionKeybindingResolver.codeActionCommands = [
    _codeActionJs.refactorCommandId,
    _codeActionJs.codeActionCommandId,
    _codeActionJs.sourceActionCommandId,
    _codeActionJs.organizeImportsCommandId,
    _codeActionJs.fixAllCommandId
];

},{"@swc/helpers":"erO4s","regenerator-runtime":"12Ae8","../../../base/browser/dom.js":"bxmlc","../../../base/common/actions.js":"5c0wW","../../../base/common/errors.js":"afm4i","../../../base/common/lazy.js":"5er1q","../../../base/common/lifecycle.js":"bcbPy","../../common/core/position.js":"6xP0w","../../common/modes.js":"bRbY1","./codeAction.js":"uBrYv","./types.js":"9FHZq","../../../platform/contextview/browser/contextView.js":"kl0FP","../../../platform/keybinding/common/keybinding.js":"5rr15","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"aHk2Y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LightBulbWidget", function() {
    return LightBulbWidget;
});
var _helpers = require("@swc/helpers");
var _domJs = require("../../../base/browser/dom.js");
var _globalMouseMoveMonitorJs = require("../../../base/browser/globalMouseMoveMonitor.js");
var _touchJs = require("../../../base/browser/touch.js");
var _codiconsJs = require("../../../base/common/codicons.js");
var _eventJs = require("../../../base/common/event.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _lightBulbWidgetCss = require("./lightBulbWidget.css");
var _textModelJs = require("../../common/model/textModel.js");
var _nlsJs = require("../../../nls.js");
var _keybindingJs = require("../../../platform/keybinding/common/keybinding.js");
var _colorRegistryJs = require("../../../platform/theme/common/colorRegistry.js");
var _themeServiceJs = require("../../../platform/theme/common/themeService.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var LightBulbState;
(function(LightBulbState1) {
    LightBulbState1.Hidden = {
        type: 0 /* Hidden */ 
    };
    var Showing = function Showing(actions, trigger, editorPosition, widgetPosition) {
        "use strict";
        _helpers.classCallCheck(this, Showing);
        this.actions = actions;
        this.trigger = trigger;
        this.editorPosition = editorPosition;
        this.widgetPosition = widgetPosition;
        this.type = 1 /* Showing */ ;
    };
    LightBulbState1.Showing = Showing;
})(LightBulbState || (LightBulbState = {}));
var LightBulbWidget = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(LightBulbWidget1, Disposable);
    var _super = _helpers.createSuper(LightBulbWidget1);
    function LightBulbWidget1(_editor, _quickFixActionId, _preferredFixActionId, _keybindingService) {
        _helpers.classCallCheck(this, LightBulbWidget1);
        var _this;
        _this = _super.call(this);
        _this._editor = _editor;
        _this._quickFixActionId = _quickFixActionId;
        _this._preferredFixActionId = _preferredFixActionId;
        _this._keybindingService = _keybindingService;
        _this._onClick = _this._register(new _eventJs.Emitter());
        _this.onClick = _this._onClick.event;
        _this._state = LightBulbState.Hidden;
        _this._domNode = document.createElement('div');
        _this._domNode.className = _codiconsJs.Codicon.lightBulb.classNames;
        _this._editor.addContentWidget(_helpers.assertThisInitialized(_this));
        _this._register(_this._editor.onDidChangeModelContent(function(_) {
            // cancel when the line in question has been removed
            var editorModel = _this._editor.getModel();
            if (_this.state.type !== 1 /* Showing */  || !editorModel || _this.state.editorPosition.lineNumber >= editorModel.getLineCount()) _this.hide();
        }));
        _touchJs.Gesture.ignoreTarget(_this._domNode);
        _this._register(_domJs.addStandardDisposableGenericMouseDownListner(_this._domNode, function(e) {
            if (_this.state.type !== 1 /* Showing */ ) return;
            // Make sure that focus / cursor location is not lost when clicking widget icon
            _this._editor.focus();
            e.preventDefault();
            // a bit of extra work to make sure the menu
            // doesn't cover the line-text
            var ref = _domJs.getDomNodePagePosition(_this._domNode), top = ref.top, height = ref.height;
            var lineHeight = _this._editor.getOption(58 /* lineHeight */ );
            var pad = Math.floor(lineHeight / 3);
            if (_this.state.widgetPosition.position !== null && _this.state.widgetPosition.position.lineNumber < _this.state.editorPosition.lineNumber) pad += lineHeight;
            _this._onClick.fire({
                x: e.posx,
                y: top + height + pad,
                actions: _this.state.actions,
                trigger: _this.state.trigger
            });
        }));
        _this._register(_domJs.addDisposableListener(_this._domNode, 'mouseenter', function(e) {
            if ((e.buttons & 1) !== 1) return;
            // mouse enters lightbulb while the primary/left button
            // is being pressed -> hide the lightbulb and block future
            // showings until mouse is released
            _this.hide();
            var monitor = new _globalMouseMoveMonitorJs.GlobalMouseMoveMonitor();
            monitor.startMonitoring(e.target, e.buttons, _globalMouseMoveMonitorJs.standardMouseMoveMerger, function() {}, function() {
                monitor.dispose();
            });
        }));
        _this._register(_this._editor.onDidChangeConfiguration(function(e) {
            // hide when told to do so
            if (e.hasChanged(56 /* lightbulb */ ) && !_this._editor.getOption(56 /* lightbulb */ ).enabled) _this.hide();
        }));
        _this._updateLightBulbTitleAndIcon();
        _this._register(_this._keybindingService.onDidUpdateKeybindings(_this._updateLightBulbTitleAndIcon, _helpers.assertThisInitialized(_this)));
        return _this;
    }
    _helpers.createClass(LightBulbWidget1, [
        {
            key: "dispose",
            value: function dispose() {
                _helpers.get(_helpers.getPrototypeOf(LightBulbWidget1.prototype), "dispose", this).call(this);
                this._editor.removeContentWidget(this);
            }
        },
        {
            key: "getId",
            value: function getId() {
                return 'LightBulbWidget';
            }
        },
        {
            key: "getDomNode",
            value: function getDomNode() {
                return this._domNode;
            }
        },
        {
            key: "getPosition",
            value: function getPosition() {
                return this._state.type === 1 /* Showing */  ? this._state.widgetPosition : null;
            }
        },
        {
            key: "update",
            value: function update(actions, trigger, atPosition) {
                var _this = this;
                if (actions.validActions.length <= 0) return this.hide();
                var options = this._editor.getOptions();
                if (!options.get(56 /* lightbulb */ ).enabled) return this.hide();
                var model = this._editor.getModel();
                if (!model) return this.hide();
                var ref = model.validatePosition(atPosition), lineNumber1 = ref.lineNumber, column = ref.column;
                var tabSize = model.getOptions().tabSize;
                var fontInfo = options.get(43 /* fontInfo */ );
                var lineContent = model.getLineContent(lineNumber1);
                var indent = _textModelJs.TextModel.computeIndentLevel(lineContent, tabSize);
                var lineHasSpace = fontInfo.spaceWidth * indent > 22;
                var isFolded = function(lineNumber) {
                    return lineNumber > 2 && _this._editor.getTopForLineNumber(lineNumber) === _this._editor.getTopForLineNumber(lineNumber - 1);
                };
                var effectiveLineNumber = lineNumber1;
                if (!lineHasSpace) {
                    if (lineNumber1 > 1 && !isFolded(lineNumber1 - 1)) effectiveLineNumber -= 1;
                    else if (!isFolded(lineNumber1 + 1)) effectiveLineNumber += 1;
                    else if (column * fontInfo.spaceWidth < 22) // cannot show lightbulb above/below and showing
                    // it inline would overlay the cursor...
                    return this.hide();
                }
                this.state = new LightBulbState.Showing(actions, trigger, atPosition, {
                    position: {
                        lineNumber: effectiveLineNumber,
                        column: 1
                    },
                    preference: LightBulbWidget1._posPref
                });
                this._editor.layoutContentWidget(this);
            }
        },
        {
            key: "hide",
            value: function hide() {
                this.state = LightBulbState.Hidden;
                this._editor.layoutContentWidget(this);
            }
        },
        {
            key: "state",
            get: function get() {
                return this._state;
            },
            set: function set(value) {
                this._state = value;
                this._updateLightBulbTitleAndIcon();
            }
        },
        {
            key: "_updateLightBulbTitleAndIcon",
            value: function _updateLightBulbTitleAndIcon() {
                var // update icon
                _classList, _classList1;
                if (this.state.type === 1 /* Showing */  && this.state.actions.hasAutoFix) {
                    var // update icon
                    _classList2, _classList3;
                    (_classList2 = this._domNode.classList).remove.apply(_classList2, _helpers.toConsumableArray(_codiconsJs.Codicon.lightBulb.classNamesArray));
                    (_classList3 = this._domNode.classList).add.apply(_classList3, _helpers.toConsumableArray(_codiconsJs.Codicon.lightbulbAutofix.classNamesArray));
                    var preferredKb = this._keybindingService.lookupKeybinding(this._preferredFixActionId);
                    if (preferredKb) {
                        this.title = _nlsJs.localize('preferredcodeActionWithKb', "Show Code Actions. Preferred Quick Fix Available ({0})", preferredKb.getLabel());
                        return;
                    }
                }
                (_classList = this._domNode.classList).remove.apply(_classList, _helpers.toConsumableArray(_codiconsJs.Codicon.lightbulbAutofix.classNamesArray));
                (_classList1 = this._domNode.classList).add.apply(_classList1, _helpers.toConsumableArray(_codiconsJs.Codicon.lightBulb.classNamesArray));
                var kb = this._keybindingService.lookupKeybinding(this._quickFixActionId);
                if (kb) this.title = _nlsJs.localize('codeActionWithKb', "Show Code Actions ({0})", kb.getLabel());
                else this.title = _nlsJs.localize('codeAction', "Show Code Actions");
            }
        },
        {
            key: "title",
            set: function set(value) {
                this._domNode.title = value;
            }
        }
    ]);
    return LightBulbWidget1;
}(_lifecycleJs.Disposable);
LightBulbWidget._posPref = [
    0 /* EXACT */ 
];
LightBulbWidget = __decorate([
    __param(3, _keybindingJs.IKeybindingService)
], LightBulbWidget);
_themeServiceJs.registerThemingParticipant(function(theme, collector) {
    var _a;
    var editorBackgroundColor = (_a = theme.getColor(_colorRegistryJs.editorBackground)) === null || _a === void 0 ? void 0 : _a.transparent(0.7);
    // Lightbulb Icon
    var editorLightBulbForegroundColor = theme.getColor(_colorRegistryJs.editorLightBulbForeground);
    if (editorLightBulbForegroundColor) collector.addRule("\n		.monaco-editor .contentWidgets ".concat(_codiconsJs.Codicon.lightBulb.cssSelector, " {\n			color: ").concat(editorLightBulbForegroundColor, ";\n			background-color: ").concat(editorBackgroundColor, ";\n		}"));
    // Lightbulb Auto Fix Icon
    var editorLightBulbAutoFixForegroundColor = theme.getColor(_colorRegistryJs.editorLightBulbAutoFixForeground);
    if (editorLightBulbAutoFixForegroundColor) collector.addRule("\n		.monaco-editor .contentWidgets ".concat(_codiconsJs.Codicon.lightbulbAutofix.cssSelector, " {\n			color: ").concat(editorLightBulbAutoFixForegroundColor, ";\n			background-color: ").concat(editorBackgroundColor, ";\n		}"));
});

},{"@swc/helpers":"erO4s","../../../base/browser/dom.js":"bxmlc","../../../base/browser/globalMouseMoveMonitor.js":"4aGfi","../../../base/browser/touch.js":"8QLOK","../../../base/common/codicons.js":"j24JC","../../../base/common/event.js":"9IBcK","../../../base/common/lifecycle.js":"bcbPy","./lightBulbWidget.css":"e3Wyg","../../common/model/textModel.js":"f18vR","../../../nls.js":"9djYb","../../../platform/keybinding/common/keybinding.js":"5rr15","../../../platform/theme/common/colorRegistry.js":"lKtxS","../../../platform/theme/common/themeService.js":"kE7QB","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"e3Wyg":[function() {},{}],"42GeS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SUPPORTED_CODE_ACTIONS", function() {
    return SUPPORTED_CODE_ACTIONS;
});
parcelHelpers.export(exports, "CodeActionsState", function() {
    return CodeActionsState;
});
parcelHelpers.export(exports, "CodeActionModel", function() {
    return CodeActionModel;
});
var _helpers = require("@swc/helpers");
var _asyncJs = require("../../../base/common/async.js");
var _errorsJs = require("../../../base/common/errors.js");
var _eventJs = require("../../../base/common/event.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _resourcesJs = require("../../../base/common/resources.js");
var _rangeJs = require("../../common/core/range.js");
var _modesJs = require("../../common/modes.js");
var _contextkeyJs = require("../../../platform/contextkey/common/contextkey.js");
var _progressJs = require("../../../platform/progress/common/progress.js");
var _codeActionJs = require("./codeAction.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __classPrivateFieldGet = undefined && undefined.__classPrivateFieldGet || function(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = undefined && undefined.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var _CodeActionModel_isDisposed;
var SUPPORTED_CODE_ACTIONS = new _contextkeyJs.RawContextKey('supportedCodeAction', '');
var CodeActionOracle = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(CodeActionOracle, Disposable);
    var _super = _helpers.createSuper(CodeActionOracle);
    function CodeActionOracle(_editor, _markerService, _signalChange) {
        var _delay = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 250;
        _helpers.classCallCheck(this, CodeActionOracle);
        var _this;
        _this = _super.call(this);
        _this._editor = _editor;
        _this._markerService = _markerService;
        _this._signalChange = _signalChange;
        _this._delay = _delay;
        _this._autoTriggerTimer = _this._register(new _asyncJs.TimeoutTimer());
        _this._register(_this._markerService.onMarkerChanged(function(e) {
            return _this._onMarkerChanges(e);
        }));
        _this._register(_this._editor.onDidChangeCursorPosition(function() {
            return _this._onCursorChange();
        }));
        return _this;
    }
    _helpers.createClass(CodeActionOracle, [
        {
            key: "trigger",
            value: function trigger1(trigger) {
                var selection = this._getRangeOfSelectionUnlessWhitespaceEnclosed(trigger);
                return this._createEventAndSignalChange(trigger, selection);
            }
        },
        {
            key: "_onMarkerChanges",
            value: function _onMarkerChanges(resources) {
                var _this = this;
                var model = this._editor.getModel();
                if (!model) return;
                if (resources.some(function(resource) {
                    return _resourcesJs.isEqual(resource, model.uri);
                })) this._autoTriggerTimer.cancelAndSet(function() {
                    _this.trigger({
                        type: 2 /* Auto */ 
                    });
                }, this._delay);
            }
        },
        {
            key: "_onCursorChange",
            value: function _onCursorChange() {
                var _this = this;
                this._autoTriggerTimer.cancelAndSet(function() {
                    _this.trigger({
                        type: 2 /* Auto */ 
                    });
                }, this._delay);
            }
        },
        {
            key: "_getRangeOfMarker",
            value: function _getRangeOfMarker(selection) {
                var model = this._editor.getModel();
                if (!model) return undefined;
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this._markerService.read({
                        resource: model.uri
                    })[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var marker = _step.value;
                        var markerRange = model.validateRange(marker);
                        if (_rangeJs.Range.intersectRanges(markerRange, selection)) return _rangeJs.Range.lift(markerRange);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return undefined;
            }
        },
        {
            key: "_getRangeOfSelectionUnlessWhitespaceEnclosed",
            value: function _getRangeOfSelectionUnlessWhitespaceEnclosed(trigger) {
                if (!this._editor.hasModel()) return undefined;
                var model = this._editor.getModel();
                var selection = this._editor.getSelection();
                if (selection.isEmpty() && trigger.type === 2 /* Auto */ ) {
                    var ref = selection.getPosition(), lineNumber = ref.lineNumber, column = ref.column;
                    var line = model.getLineContent(lineNumber);
                    if (line.length === 0) // empty line
                    return undefined;
                    else if (column === 1) {
                        // look only right
                        if (/\s/.test(line[0])) return undefined;
                    } else if (column === model.getLineMaxColumn(lineNumber)) {
                        // look only left
                        if (/\s/.test(line[line.length - 1])) return undefined;
                    } else {
                        // look left and right
                        if (/\s/.test(line[column - 2]) && /\s/.test(line[column - 1])) return undefined;
                    }
                }
                return selection;
            }
        },
        {
            key: "_createEventAndSignalChange",
            value: function _createEventAndSignalChange(trigger, selection) {
                var model = this._editor.getModel();
                if (!selection || !model) {
                    // cancel
                    this._signalChange(undefined);
                    return undefined;
                }
                var markerRange = this._getRangeOfMarker(selection);
                var position = markerRange ? markerRange.getStartPosition() : selection.getStartPosition();
                var e = {
                    trigger: trigger,
                    selection: selection,
                    position: position
                };
                this._signalChange(e);
                return e;
            }
        }
    ]);
    return CodeActionOracle;
}(_lifecycleJs.Disposable);
var CodeActionsState;
(function(CodeActionsState1) {
    CodeActionsState1.Empty = {
        type: 0 /* Empty */ 
    };
    var Triggered = /*#__PURE__*/ function() {
        "use strict";
        function Triggered(trigger, rangeOrSelection, position, _cancellablePromise) {
            _helpers.classCallCheck(this, Triggered);
            this.trigger = trigger;
            this.rangeOrSelection = rangeOrSelection;
            this.position = position;
            this._cancellablePromise = _cancellablePromise;
            this.type = 1 /* Triggered */ ;
            this.actions = _cancellablePromise.catch(function(e) {
                if (_errorsJs.isPromiseCanceledError(e)) return emptyCodeActionSet;
                throw e;
            });
        }
        _helpers.createClass(Triggered, [
            {
                key: "cancel",
                value: function cancel() {
                    this._cancellablePromise.cancel();
                }
            }
        ]);
        return Triggered;
    }();
    CodeActionsState1.Triggered = Triggered;
})(CodeActionsState || (CodeActionsState = {}));
var emptyCodeActionSet = {
    allActions: [],
    validActions: [],
    dispose: function() {},
    documentation: [],
    hasAutoFix: false
};
var CodeActionModel = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(CodeActionModel, Disposable);
    var _super = _helpers.createSuper(CodeActionModel);
    function CodeActionModel(_editor, _markerService, contextKeyService, _progressService) {
        _helpers.classCallCheck(this, CodeActionModel);
        var _this;
        _this = _super.call(this);
        _this._editor = _editor;
        _this._markerService = _markerService;
        _this._progressService = _progressService;
        _this._codeActionOracle = _this._register(new _lifecycleJs.MutableDisposable());
        _this._state = CodeActionsState.Empty;
        _this._onDidChangeState = _this._register(new _eventJs.Emitter());
        _this.onDidChangeState = _this._onDidChangeState.event;
        _CodeActionModel_isDisposed.set(_helpers.assertThisInitialized(_this), false);
        _this._supportedCodeActions = SUPPORTED_CODE_ACTIONS.bindTo(contextKeyService);
        _this._register(_this._editor.onDidChangeModel(function() {
            return _this._update();
        }));
        _this._register(_this._editor.onDidChangeModelLanguage(function() {
            return _this._update();
        }));
        _this._register(_modesJs.CodeActionProviderRegistry.onDidChange(function() {
            return _this._update();
        }));
        _this._update();
        return _this;
    }
    _helpers.createClass(CodeActionModel, [
        {
            key: "dispose",
            value: function dispose() {
                if (__classPrivateFieldGet(this, _CodeActionModel_isDisposed, "f")) return;
                __classPrivateFieldSet(this, _CodeActionModel_isDisposed, true, "f");
                _helpers.get(_helpers.getPrototypeOf(CodeActionModel.prototype), "dispose", this).call(this);
                this.setState(CodeActionsState.Empty, true);
            }
        },
        {
            key: "_update",
            value: function _update() {
                if (__classPrivateFieldGet(this, _CodeActionModel_isDisposed, "f")) return;
                this._codeActionOracle.value = undefined;
                this.setState(CodeActionsState.Empty);
                var model = this._editor.getModel();
                if (model && _modesJs.CodeActionProviderRegistry.has(model) && !this._editor.getOption(80 /* readOnly */ )) {
                    var _this = this;
                    var _supportedActions;
                    var supportedActions = [];
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator = _modesJs.CodeActionProviderRegistry.all(model)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var provider = _step.value;
                            if (Array.isArray(provider.providedCodeActionKinds)) (_supportedActions = supportedActions).push.apply(_supportedActions, _helpers.toConsumableArray(provider.providedCodeActionKinds));
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    this._supportedCodeActions.set(supportedActions.join(' '));
                    this._codeActionOracle.value = new CodeActionOracle(this._editor, this._markerService, function(trigger) {
                        var _a;
                        if (!trigger) {
                            _this.setState(CodeActionsState.Empty);
                            return;
                        }
                        var actions = _asyncJs.createCancelablePromise(function(token) {
                            return _codeActionJs.getCodeActions(model, trigger.selection, trigger.trigger, _progressJs.Progress.None, token);
                        });
                        if (trigger.trigger.type === 1 /* Invoke */ ) (_a = _this._progressService) === null || _a === void 0 || _a.showWhile(actions, 250);
                        _this.setState(new CodeActionsState.Triggered(trigger.trigger, trigger.selection, trigger.position, actions));
                    }, undefined);
                    this._codeActionOracle.value.trigger({
                        type: 2 /* Auto */ 
                    });
                } else this._supportedCodeActions.reset();
            }
        },
        {
            key: "trigger",
            value: function trigger1(trigger) {
                if (this._codeActionOracle.value) this._codeActionOracle.value.trigger(trigger);
            }
        },
        {
            key: "setState",
            value: function setState(newState, skipNotify) {
                if (newState === this._state) return;
                // Cancel old request
                if (this._state.type === 1 /* Triggered */ ) this._state.cancel();
                this._state = newState;
                if (!skipNotify && !__classPrivateFieldGet(this, _CodeActionModel_isDisposed, "f")) this._onDidChangeState.fire(newState);
            }
        }
    ]);
    return CodeActionModel;
}(_lifecycleJs.Disposable);
_CodeActionModel_isDisposed = new WeakMap();

},{"@swc/helpers":"erO4s","../../../base/common/async.js":"kMhSh","../../../base/common/errors.js":"afm4i","../../../base/common/event.js":"9IBcK","../../../base/common/lifecycle.js":"bcbPy","../../../base/common/resources.js":"14HNj","../../common/core/range.js":"VbyL8","../../common/modes.js":"bRbY1","../../../platform/contextkey/common/contextkey.js":"5cjav","../../../platform/progress/common/progress.js":"dJdAd","./codeAction.js":"uBrYv","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"gETuC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CodeLensContribution", function() {
    return CodeLensContribution;
});
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
var _domJs = require("../../../base/browser/dom.js");
var _asyncJs = require("../../../base/common/async.js");
var _errorsJs = require("../../../base/common/errors.js");
var _hashJs = require("../../../base/common/hash.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _editorStateJs = require("../../browser/core/editorState.js");
var _editorExtensionsJs = require("../../browser/editorExtensions.js");
var _editorOptionsJs = require("../../common/config/editorOptions.js");
var _editorContextKeysJs = require("../../common/editorContextKeys.js");
var _modesJs = require("../../common/modes.js");
var _languageFeatureRegistryJs = require("../../common/modes/languageFeatureRegistry.js");
var _codelensJs = require("./codelens.js");
var _codeLensCacheJs = require("./codeLensCache.js");
var _codelensWidgetJs = require("./codelensWidget.js");
var _nlsJs = require("../../../nls.js");
var _commandsJs = require("../../../platform/commands/common/commands.js");
var _notificationJs = require("../../../platform/notification/common/notification.js");
var _quickInputJs = require("../../../platform/quickinput/common/quickInput.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var CodeLensContribution = /*#__PURE__*/ function() {
    "use strict";
    function CodeLensContribution1(_editor, _commandService, _notificationService, _codeLensCache) {
        var _this = this;
        _helpers.classCallCheck(this, CodeLensContribution1);
        this._editor = _editor;
        this._commandService = _commandService;
        this._notificationService = _notificationService;
        this._codeLensCache = _codeLensCache;
        this._disposables = new _lifecycleJs.DisposableStore();
        this._localToDispose = new _lifecycleJs.DisposableStore();
        this._lenses = [];
        this._getCodeLensModelDelays = new _languageFeatureRegistryJs.LanguageFeatureRequestDelays(_modesJs.CodeLensProviderRegistry, 250, 2500);
        this._oldCodeLensModels = new _lifecycleJs.DisposableStore();
        this._resolveCodeLensesDelays = new _languageFeatureRegistryJs.LanguageFeatureRequestDelays(_modesJs.CodeLensProviderRegistry, 250, 2500);
        this._resolveCodeLensesScheduler = new _asyncJs.RunOnceScheduler(function() {
            return _this._resolveCodeLensesInViewport();
        }, this._resolveCodeLensesDelays.min);
        this._disposables.add(this._editor.onDidChangeModel(function() {
            return _this._onModelChange();
        }));
        this._disposables.add(this._editor.onDidChangeModelLanguage(function() {
            return _this._onModelChange();
        }));
        this._disposables.add(this._editor.onDidChangeConfiguration(function(e) {
            if (e.hasChanged(43 /* fontInfo */ ) || e.hasChanged(16 /* codeLensFontSize */ ) || e.hasChanged(15 /* codeLensFontFamily */ )) _this._updateLensStyle();
            if (e.hasChanged(14 /* codeLens */ )) _this._onModelChange();
        }));
        this._disposables.add(_modesJs.CodeLensProviderRegistry.onDidChange(this._onModelChange, this));
        this._onModelChange();
        this._styleClassName = '_' + _hashJs.hash(this._editor.getId()).toString(16);
        this._styleElement = _domJs.createStyleSheet(_domJs.isInShadowDOM(this._editor.getContainerDomNode()) ? this._editor.getContainerDomNode() : undefined);
        this._updateLensStyle();
    }
    _helpers.createClass(CodeLensContribution1, [
        {
            key: "dispose",
            value: function dispose() {
                var _a;
                this._localDispose();
                this._disposables.dispose();
                this._oldCodeLensModels.dispose();
                (_a = this._currentCodeLensModel) === null || _a === void 0 || _a.dispose();
                this._styleElement.remove();
            }
        },
        {
            key: "_getLayoutInfo",
            value: function _getLayoutInfo() {
                var fontSize = this._editor.getOption(16 /* codeLensFontSize */ );
                var codeLensHeight;
                if (!fontSize || fontSize < 5) {
                    fontSize = this._editor.getOption(45 /* fontSize */ ) * .9 | 0;
                    codeLensHeight = this._editor.getOption(58 /* lineHeight */ );
                } else codeLensHeight = fontSize * Math.max(1.3, this._editor.getOption(58 /* lineHeight */ ) / this._editor.getOption(45 /* fontSize */ )) | 0;
                return {
                    codeLensHeight: codeLensHeight,
                    fontSize: fontSize
                };
            }
        },
        {
            key: "_updateLensStyle",
            value: function _updateLensStyle() {
                var _this = this;
                var ref = this._getLayoutInfo(), codeLensHeight = ref.codeLensHeight, fontSize = ref.fontSize;
                var fontFamily = this._editor.getOption(15 /* codeLensFontFamily */ );
                var editorFontInfo = this._editor.getOption(43 /* fontInfo */ );
                var fontFamilyVar = "--codelens-font-family".concat(this._styleClassName);
                var fontFeaturesVar = "--codelens-font-features".concat(this._styleClassName);
                var newStyle = "\n		.monaco-editor .codelens-decoration.".concat(this._styleClassName, " { line-height: ").concat(codeLensHeight, "px; font-size: ").concat(fontSize, "px; padding-right: ").concat(Math.round(fontSize * 0.5), "px; font-feature-settings: var(").concat(fontFeaturesVar, ") }\n		.monaco-editor .codelens-decoration.").concat(this._styleClassName, " span.codicon { line-height: ").concat(codeLensHeight, "px; font-size: ").concat(fontSize, "px; }\n		");
                if (fontFamily) newStyle += ".monaco-editor .codelens-decoration.".concat(this._styleClassName, " { font-family: var(").concat(fontFamilyVar, "), ").concat(_editorOptionsJs.EDITOR_FONT_DEFAULTS.fontFamily, "}");
                this._styleElement.textContent = newStyle;
                this._editor.getContainerDomNode().style.setProperty(fontFamilyVar, fontFamily !== null && fontFamily !== void 0 ? fontFamily : 'inherit');
                this._editor.getContainerDomNode().style.setProperty(fontFeaturesVar, editorFontInfo.fontFeatureSettings);
                //
                this._editor.changeViewZones(function(accessor) {
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator = _this._lenses[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var lens = _step.value;
                            lens.updateHeight(codeLensHeight, accessor);
                        }
                    } catch (err1) {
                        _didIteratorError = true;
                        _iteratorError = err1;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                });
            }
        },
        {
            key: "_localDispose",
            value: function _localDispose() {
                var _a, _b, _c;
                (_a = this._getCodeLensModelPromise) === null || _a === void 0 || _a.cancel();
                this._getCodeLensModelPromise = undefined;
                (_b = this._resolveCodeLensesPromise) === null || _b === void 0 || _b.cancel();
                this._resolveCodeLensesPromise = undefined;
                this._localToDispose.clear();
                this._oldCodeLensModels.clear();
                (_c = this._currentCodeLensModel) === null || _c === void 0 || _c.dispose();
            }
        },
        {
            key: "_onModelChange",
            value: function _onModelChange() {
                var _this4 = this;
                this._localDispose();
                var model = this._editor.getModel();
                if (!model) return;
                if (!this._editor.getOption(14 /* codeLens */ )) return;
                var cachedLenses = this._codeLensCache.get(model);
                if (cachedLenses) this._renderCodeLensSymbols(cachedLenses);
                if (!_modesJs.CodeLensProviderRegistry.has(model)) {
                    var _this1 = this;
                    // no provider -> return but check with
                    // cached lenses. they expire after 30 seconds
                    if (cachedLenses) this._localToDispose.add(_asyncJs.disposableTimeout(function() {
                        var cachedLensesNow = _this1._codeLensCache.get(model);
                        if (cachedLenses === cachedLensesNow) {
                            _this1._codeLensCache.delete(model);
                            _this1._onModelChange();
                        }
                    }, 30000));
                    return;
                }
                var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                try {
                    for(var _iterator = _modesJs.CodeLensProviderRegistry.all(model)[Symbol.iterator](), _step; !(_iteratorNormalCompletion1 = (_step = _iterator.next()).done); _iteratorNormalCompletion1 = true){
                        var provider = _step.value;
                        if (typeof provider.onDidChange === 'function') {
                            var registration = provider.onDidChange(function() {
                                return scheduler.schedule();
                            });
                            this._localToDispose.add(registration);
                        }
                    }
                } catch (err1) {
                    _didIteratorError1 = true;
                    _iteratorError1 = err1;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion1 && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError1) {
                            throw _iteratorError1;
                        }
                    }
                }
                var scheduler = new _asyncJs.RunOnceScheduler(function() {
                    var _this2 = _this4;
                    var _a;
                    var t1 = Date.now();
                    (_a = _this4._getCodeLensModelPromise) === null || _a === void 0 || _a.cancel();
                    _this4._getCodeLensModelPromise = _asyncJs.createCancelablePromise(function(token) {
                        return _codelensJs.getCodeLensModel(model, token);
                    });
                    _this4._getCodeLensModelPromise.then(function(result) {
                        if (_this2._currentCodeLensModel) _this2._oldCodeLensModels.add(_this2._currentCodeLensModel);
                        _this2._currentCodeLensModel = result;
                        // cache model to reduce flicker
                        _this2._codeLensCache.put(model, result);
                        // update moving average
                        var newDelay = _this2._getCodeLensModelDelays.update(model, Date.now() - t1);
                        scheduler.delay = newDelay;
                        // render lenses
                        _this2._renderCodeLensSymbols(result);
                        // dom.scheduleAtNextAnimationFrame(() => this._resolveCodeLensesInViewport());
                        _this2._resolveCodeLensesInViewportSoon();
                    }, _errorsJs.onUnexpectedError);
                }, this._getCodeLensModelDelays.get(model));
                this._localToDispose.add(scheduler);
                this._localToDispose.add(_lifecycleJs.toDisposable(function() {
                    return _this4._resolveCodeLensesScheduler.cancel();
                }));
                this._localToDispose.add(this._editor.onDidChangeModelContent(function() {
                    var _this3 = _this4;
                    _this4._editor.changeDecorations(function(decorationsAccessor) {
                        var _this = _this3;
                        _this3._editor.changeViewZones(function(viewZonesAccessor) {
                            var _this5 = _this;
                            var toDispose = [];
                            var lastLensLineNumber = -1;
                            _this._lenses.forEach(function(lens) {
                                if (!lens.isValid() || lastLensLineNumber === lens.getLineNumber()) // invalid -> lens collapsed, attach range doesn't exist anymore
                                // line_number -> lenses should never be on the same line
                                toDispose.push(lens);
                                else {
                                    lens.update(viewZonesAccessor);
                                    lastLensLineNumber = lens.getLineNumber();
                                }
                            });
                            var helper = new _codelensWidgetJs.CodeLensHelper();
                            toDispose.forEach(function(l) {
                                l.dispose(helper, viewZonesAccessor);
                                _this5._lenses.splice(_this5._lenses.indexOf(l), 1);
                            });
                            helper.commit(decorationsAccessor);
                        });
                    });
                    // Ask for all references again
                    scheduler.schedule();
                }));
                this._localToDispose.add(this._editor.onDidFocusEditorWidget(function() {
                    scheduler.schedule();
                }));
                this._localToDispose.add(this._editor.onDidScrollChange(function(e) {
                    if (e.scrollTopChanged && _this4._lenses.length > 0) _this4._resolveCodeLensesInViewportSoon();
                }));
                this._localToDispose.add(this._editor.onDidLayoutChange(function() {
                    _this4._resolveCodeLensesInViewportSoon();
                }));
                this._localToDispose.add(_lifecycleJs.toDisposable(function() {
                    if (_this4._editor.getModel()) {
                        var _this = _this4;
                        var scrollState = _editorStateJs.StableEditorScrollState.capture(_this4._editor);
                        _this4._editor.changeDecorations(function(decorationsAccessor) {
                            var _this6 = _this;
                            _this._editor.changeViewZones(function(viewZonesAccessor) {
                                _this6._disposeAllLenses(decorationsAccessor, viewZonesAccessor);
                            });
                        });
                        scrollState.restore(_this4._editor);
                    } else // No accessors available
                    _this4._disposeAllLenses(undefined, undefined);
                }));
                this._localToDispose.add(this._editor.onMouseDown(function(e) {
                    if (e.target.type !== 9 /* CONTENT_WIDGET */ ) return;
                    var target = e.target.element;
                    if ((target === null || target === void 0 ? void 0 : target.tagName) === 'SPAN') target = target.parentElement;
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    if ((target === null || target === void 0 ? void 0 : target.tagName) === 'A') try {
                        for(var _iterator = _this4._lenses[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var lens = _step.value;
                            var command = lens.getCommand(target);
                            if (command) {
                                var _this = _this4;
                                var __commandService;
                                (__commandService = _this4._commandService).executeCommand.apply(__commandService, [
                                    command.id
                                ].concat(_helpers.toConsumableArray(command.arguments || []))).catch(function(err) {
                                    return _this._notificationService.error(err);
                                });
                                break;
                            }
                        }
                    } catch (err1) {
                        _didIteratorError = true;
                        _iteratorError = err1;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                }));
                scheduler.schedule();
            }
        },
        {
            key: "_disposeAllLenses",
            value: function _disposeAllLenses(decChangeAccessor, viewZoneChangeAccessor) {
                var helper = new _codelensWidgetJs.CodeLensHelper();
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this._lenses[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var lens = _step.value;
                        lens.dispose(helper, viewZoneChangeAccessor);
                    }
                } catch (err1) {
                    _didIteratorError = true;
                    _iteratorError = err1;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                if (decChangeAccessor) helper.commit(decChangeAccessor);
                this._lenses.length = 0;
            }
        },
        {
            key: "_renderCodeLensSymbols",
            value: function _renderCodeLensSymbols(symbols) {
                var _this9 = this;
                if (!this._editor.hasModel()) return;
                var maxLineNumber = this._editor.getModel().getLineCount();
                var groups = [];
                var lastGroup;
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = symbols.lenses[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var symbol = _step.value;
                        var line = symbol.symbol.range.startLineNumber;
                        if (line < 1 || line > maxLineNumber) continue;
                        else if (lastGroup && lastGroup[lastGroup.length - 1].symbol.range.startLineNumber === line) // on same line as previous
                        lastGroup.push(symbol);
                        else {
                            // on later line as previous
                            lastGroup = [
                                symbol
                            ];
                            groups.push(lastGroup);
                        }
                    }
                } catch (err1) {
                    _didIteratorError = true;
                    _iteratorError = err1;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                var scrollState = _editorStateJs.StableEditorScrollState.capture(this._editor);
                var layoutInfo = this._getLayoutInfo();
                this._editor.changeDecorations(function(decorationsAccessor) {
                    var _this7 = _this9;
                    _this9._editor.changeViewZones(function(viewZoneAccessor) {
                        var helper = new _codelensWidgetJs.CodeLensHelper();
                        var codeLensIndex = 0;
                        var groupsIndex = 0;
                        while(groupsIndex < groups.length && codeLensIndex < _this7._lenses.length){
                            var symbolsLineNumber = groups[groupsIndex][0].symbol.range.startLineNumber;
                            var codeLensLineNumber = _this7._lenses[codeLensIndex].getLineNumber();
                            if (codeLensLineNumber < symbolsLineNumber) {
                                _this7._lenses[codeLensIndex].dispose(helper, viewZoneAccessor);
                                _this7._lenses.splice(codeLensIndex, 1);
                            } else if (codeLensLineNumber === symbolsLineNumber) {
                                _this7._lenses[codeLensIndex].updateCodeLensSymbols(groups[groupsIndex], helper);
                                groupsIndex++;
                                codeLensIndex++;
                            } else {
                                var _this = _this7;
                                _this7._lenses.splice(codeLensIndex, 0, new _codelensWidgetJs.CodeLensWidget(groups[groupsIndex], _this7._editor, _this7._styleClassName, helper, viewZoneAccessor, layoutInfo.codeLensHeight, function() {
                                    return _this._resolveCodeLensesInViewportSoon();
                                }));
                                codeLensIndex++;
                                groupsIndex++;
                            }
                        }
                        // Delete extra code lenses
                        while(codeLensIndex < _this7._lenses.length){
                            _this7._lenses[codeLensIndex].dispose(helper, viewZoneAccessor);
                            _this7._lenses.splice(codeLensIndex, 1);
                        }
                        // Create extra symbols
                        while(groupsIndex < groups.length){
                            var _this8 = _this7;
                            _this7._lenses.push(new _codelensWidgetJs.CodeLensWidget(groups[groupsIndex], _this7._editor, _this7._styleClassName, helper, viewZoneAccessor, layoutInfo.codeLensHeight, function() {
                                return _this8._resolveCodeLensesInViewportSoon();
                            }));
                            groupsIndex++;
                        }
                        helper.commit(decorationsAccessor);
                    });
                });
                scrollState.restore(this._editor);
            }
        },
        {
            key: "_resolveCodeLensesInViewportSoon",
            value: function _resolveCodeLensesInViewportSoon() {
                var model = this._editor.getModel();
                if (model) this._resolveCodeLensesScheduler.schedule();
            }
        },
        {
            key: "_resolveCodeLensesInViewport",
            value: function _resolveCodeLensesInViewport() {
                var _this = this;
                var _a;
                (_a = this._resolveCodeLensesPromise) === null || _a === void 0 || _a.cancel();
                this._resolveCodeLensesPromise = undefined;
                var model = this._editor.getModel();
                if (!model) return;
                var toResolve = [];
                var lenses = [];
                this._lenses.forEach(function(lens) {
                    var request = lens.computeIfNecessary(model);
                    if (request) {
                        toResolve.push(request);
                        lenses.push(lens);
                    }
                });
                if (toResolve.length === 0) return;
                var t1 = Date.now();
                var resolvePromise = _asyncJs.createCancelablePromise(function(token) {
                    var promises1 = toResolve.map(function(request1, i1) {
                        var resolvedSymbols = new Array(request1.length);
                        var promises = request1.map(function(request, i) {
                            if (!request.symbol.command && typeof request.provider.resolveCodeLens === 'function') return Promise.resolve(request.provider.resolveCodeLens(model, request.symbol, token)).then(function(symbol) {
                                resolvedSymbols[i] = symbol;
                            }, _errorsJs.onUnexpectedExternalError);
                            else {
                                resolvedSymbols[i] = request.symbol;
                                return Promise.resolve(undefined);
                            }
                        });
                        return Promise.all(promises).then(function() {
                            if (!token.isCancellationRequested && !lenses[i1].isDisposed()) lenses[i1].updateCommands(resolvedSymbols);
                        });
                    });
                    return Promise.all(promises1);
                });
                this._resolveCodeLensesPromise = resolvePromise;
                this._resolveCodeLensesPromise.then(function() {
                    // update moving average
                    var newDelay = _this._resolveCodeLensesDelays.update(model, Date.now() - t1);
                    _this._resolveCodeLensesScheduler.delay = newDelay;
                    if (_this._currentCodeLensModel) _this._codeLensCache.put(model, _this._currentCodeLensModel);
                    _this._oldCodeLensModels.clear(); // dispose old models once we have updated the UI with the current model
                    if (resolvePromise === _this._resolveCodeLensesPromise) _this._resolveCodeLensesPromise = undefined;
                }, function(err) {
                    _errorsJs.onUnexpectedError(err); // can also be cancellation!
                    if (resolvePromise === _this._resolveCodeLensesPromise) _this._resolveCodeLensesPromise = undefined;
                });
            }
        },
        {
            key: "getLenses",
            value: function getLenses() {
                return this._lenses;
            }
        }
    ]);
    return CodeLensContribution1;
}();
CodeLensContribution.ID = 'css.editor.codeLens';
CodeLensContribution = __decorate([
    __param(1, _commandsJs.ICommandService),
    __param(2, _notificationJs.INotificationService),
    __param(3, _codeLensCacheJs.ICodeLensCache)
], CodeLensContribution);
_editorExtensionsJs.registerEditorContribution(CodeLensContribution.ID, CodeLensContribution);
_editorExtensionsJs.registerEditorAction(/*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(ShowLensesInCurrentLine, EditorAction);
    var _super = _helpers.createSuper(ShowLensesInCurrentLine);
    function ShowLensesInCurrentLine() {
        _helpers.classCallCheck(this, ShowLensesInCurrentLine);
        return _super.call(this, {
            id: 'codelens.showLensesInCurrentLine',
            precondition: _editorContextKeysJs.EditorContextKeys.hasCodeLensProvider,
            label: _nlsJs.localize('showLensOnLine', "Show CodeLens Commands For Current Line"),
            alias: 'Show CodeLens Commands For Current Line'
        });
    }
    _helpers.createClass(ShowLensesInCurrentLine, [
        {
            key: "run",
            value: function run(accessor, editor) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var quickInputService, commandService, notificationService, lineNumber, codelensController, items, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, lens, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator1, _step1, item, command, item1, _commandService;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                if (editor.hasModel()) {
                                    _ctx.next = 2;
                                    break;
                                }
                                return _ctx.abrupt("return");
                            case 2:
                                quickInputService = accessor.get(_quickInputJs.IQuickInputService);
                                commandService = accessor.get(_commandsJs.ICommandService);
                                notificationService = accessor.get(_notificationJs.INotificationService);
                                lineNumber = editor.getSelection().positionLineNumber;
                                codelensController = editor.getContribution(CodeLensContribution.ID);
                                items = [];
                                _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                                _ctx.prev = 9;
                                _iterator = codelensController.getLenses()[Symbol.iterator]();
                            case 11:
                                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                                    _ctx.next = 34;
                                    break;
                                }
                                lens = _step.value;
                                _iteratorNormalCompletion2 = true, _didIteratorError2 = false, _iteratorError2 = undefined;
                                if (!(lens.getLineNumber() === lineNumber)) {
                                    _ctx.next = 31;
                                    break;
                                }
                                _ctx.prev = 15;
                                for(_iterator1 = lens.getItems()[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion2 = true){
                                    item = _step1.value;
                                    command = item.symbol.command;
                                    if (command) items.push({
                                        label: command.title,
                                        command: command
                                    });
                                }
                                _ctx.next = 23;
                                break;
                            case 19:
                                _ctx.prev = 19;
                                _ctx.t0 = _ctx["catch"](15);
                                _didIteratorError2 = true;
                                _iteratorError2 = _ctx.t0;
                            case 23:
                                _ctx.prev = 23;
                                _ctx.prev = 24;
                                if (!_iteratorNormalCompletion2 && _iterator1.return != null) {
                                    _iterator1.return();
                                }
                            case 26:
                                _ctx.prev = 26;
                                if (!_didIteratorError2) {
                                    _ctx.next = 29;
                                    break;
                                }
                                throw _iteratorError2;
                            case 29:
                                return _ctx.finish(26);
                            case 30:
                                return _ctx.finish(23);
                            case 31:
                                _iteratorNormalCompletion = true;
                                _ctx.next = 11;
                                break;
                            case 34:
                                _ctx.next = 40;
                                break;
                            case 36:
                                _ctx.prev = 36;
                                _ctx.t1 = _ctx["catch"](9);
                                _didIteratorError = true;
                                _iteratorError = _ctx.t1;
                            case 40:
                                _ctx.prev = 40;
                                _ctx.prev = 41;
                                if (!_iteratorNormalCompletion && _iterator.return != null) {
                                    _iterator.return();
                                }
                            case 43:
                                _ctx.prev = 43;
                                if (!_didIteratorError) {
                                    _ctx.next = 46;
                                    break;
                                }
                                throw _iteratorError;
                            case 46:
                                return _ctx.finish(43);
                            case 47:
                                return _ctx.finish(40);
                            case 48:
                                if (!(items.length === 0)) {
                                    _ctx.next = 50;
                                    break;
                                }
                                return _ctx.abrupt("return");
                            case 50:
                                _ctx.next = 52;
                                return quickInputService.pick(items, {
                                    canPickMany: false
                                });
                            case 52:
                                item1 = _ctx.sent;
                                if (item1) {
                                    _ctx.next = 55;
                                    break;
                                }
                                return _ctx.abrupt("return");
                            case 55:
                                _ctx.prev = 55;
                                ;
                                _ctx.next = 59;
                                return (_commandService = commandService).executeCommand.apply(_commandService, [
                                    item1.command.id
                                ].concat(_helpers.toConsumableArray(item1.command.arguments || [])));
                            case 59:
                                _ctx.next = 64;
                                break;
                            case 61:
                                _ctx.prev = 61;
                                _ctx.t2 = _ctx["catch"](55);
                                notificationService.error(_ctx.t2);
                            case 64:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, null, [
                        [
                            9,
                            36,
                            40,
                            48
                        ],
                        [
                            15,
                            19,
                            23,
                            31
                        ],
                        [
                            24,
                            ,
                            26,
                            30
                        ],
                        [
                            41,
                            ,
                            43,
                            47
                        ],
                        [
                            55,
                            61
                        ]
                    ]);
                }));
            }
        }
    ]);
    return ShowLensesInCurrentLine;
}(_editorExtensionsJs.EditorAction));

},{"@swc/helpers":"erO4s","regenerator-runtime":"12Ae8","../../../base/browser/dom.js":"bxmlc","../../../base/common/async.js":"kMhSh","../../../base/common/errors.js":"afm4i","../../../base/common/hash.js":"dfKxN","../../../base/common/lifecycle.js":"bcbPy","../../browser/core/editorState.js":"5J2rl","../../browser/editorExtensions.js":"dFnlo","../../common/config/editorOptions.js":"jb70u","../../common/editorContextKeys.js":"2t2PW","../../common/modes.js":"bRbY1","../../common/modes/languageFeatureRegistry.js":"dTCAG","./codelens.js":"5Rfsj","./codeLensCache.js":"iH2vH","./codelensWidget.js":"8OnHy","../../../nls.js":"9djYb","../../../platform/commands/common/commands.js":"eeuTC","../../../platform/notification/common/notification.js":"baqho","../../../platform/quickinput/common/quickInput.js":"2k9Ij","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"5Rfsj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CodeLensModel", function() {
    return CodeLensModel;
});
parcelHelpers.export(exports, "getCodeLensModel", function() {
    return getCodeLensModel;
});
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
var _cancellationJs = require("../../../base/common/cancellation.js");
var _errorsJs = require("../../../base/common/errors.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _typesJs = require("../../../base/common/types.js");
var _uriJs = require("../../../base/common/uri.js");
var _modesJs = require("../../common/modes.js");
var _modelServiceJs = require("../../common/services/modelService.js");
var _commandsJs = require("../../../platform/commands/common/commands.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var CodeLensModel = /*#__PURE__*/ function() {
    "use strict";
    function CodeLensModel() {
        _helpers.classCallCheck(this, CodeLensModel);
        this.lenses = [];
        this._disposables = new _lifecycleJs.DisposableStore();
    }
    _helpers.createClass(CodeLensModel, [
        {
            key: "dispose",
            value: function dispose() {
                this._disposables.dispose();
            }
        },
        {
            key: "add",
            value: function add(list, provider) {
                this._disposables.add(list);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = list.lenses[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var symbol = _step.value;
                        this.lenses.push({
                            symbol: symbol,
                            provider: provider
                        });
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        }
    ]);
    return CodeLensModel;
}();
function getCodeLensModel(model, token) {
    return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee1() {
        var _this, provider1, providerRanks, result, promises;
        return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx1) {
            while(1)switch(_ctx1.prev = _ctx1.next){
                case 0:
                    _this = this;
                    provider1 = _modesJs.CodeLensProviderRegistry.ordered(model);
                    providerRanks = new Map();
                    result = new CodeLensModel();
                    promises = provider1.map(function(provider, i) {
                        return __awaiter(_this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                            var list;
                            return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                                while(1)switch(_ctx.prev = _ctx.next){
                                    case 0:
                                        providerRanks.set(provider, i);
                                        _ctx.prev = 1;
                                        _ctx.next = 4;
                                        return Promise.resolve(provider.provideCodeLenses(model, token));
                                    case 4:
                                        list = _ctx.sent;
                                        if (list) result.add(list, provider);
                                        _ctx.next = 11;
                                        break;
                                    case 8:
                                        _ctx.prev = 8;
                                        _ctx.t0 = _ctx["catch"](1);
                                        _errorsJs.onUnexpectedExternalError(_ctx.t0);
                                    case 11:
                                    case "end":
                                        return _ctx.stop();
                                }
                            }, _callee, null, [
                                [
                                    1,
                                    8
                                ]
                            ]);
                        }));
                    });
                    _ctx1.next = 7;
                    return Promise.all(promises);
                case 7:
                    result.lenses = result.lenses.sort(function(a, b) {
                        // sort by lineNumber, provider-rank, and column
                        if (a.symbol.range.startLineNumber < b.symbol.range.startLineNumber) return -1;
                        else if (a.symbol.range.startLineNumber > b.symbol.range.startLineNumber) return 1;
                        else if (providerRanks.get(a.provider) < providerRanks.get(b.provider)) return -1;
                        else if (providerRanks.get(a.provider) > providerRanks.get(b.provider)) return 1;
                        else if (a.symbol.range.startColumn < b.symbol.range.startColumn) return -1;
                        else if (a.symbol.range.startColumn > b.symbol.range.startColumn) return 1;
                        else return 0;
                    });
                    return _ctx1.abrupt("return", result);
                case 9:
                case "end":
                    return _ctx1.stop();
            }
        }, _callee1, this);
    }));
}
_commandsJs.CommandsRegistry.registerCommand('_executeCodeLensProvider', function(accessor) {
    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
        args[_key - 1] = arguments[_key];
    }
    var _args = _helpers.slicedToArray(args, 2), uri = _args[0], itemResolveCount = _args[1];
    _typesJs.assertType(_uriJs.URI.isUri(uri));
    _typesJs.assertType(typeof itemResolveCount === 'number' || !itemResolveCount);
    var model = accessor.get(_modelServiceJs.IModelService).getModel(uri);
    if (!model) throw _errorsJs.illegalArgument();
    var result = [];
    var disposables = new _lifecycleJs.DisposableStore();
    return getCodeLensModel(model, _cancellationJs.CancellationToken.None).then(function(value) {
        disposables.add(value);
        var resolve = [];
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            var _loop = function(_iterator, _step) {
                var item = _step.value;
                if (itemResolveCount === undefined || itemResolveCount === null || Boolean(item.symbol.command)) result.push(item.symbol);
                else if (itemResolveCount-- > 0 && item.provider.resolveCodeLens) resolve.push(Promise.resolve(item.provider.resolveCodeLens(model, item.symbol, _cancellationJs.CancellationToken.None)).then(function(symbol) {
                    return result.push(symbol || item.symbol);
                }));
            };
            for(var _iterator = value.lenses[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop(_iterator, _step);
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
        return Promise.all(resolve);
    }).then(function() {
        return result;
    }).finally(function() {
        // make sure to return results, then (on next tick)
        // dispose the results
        setTimeout(function() {
            return disposables.dispose();
        }, 100);
    });
});

},{"@swc/helpers":"erO4s","regenerator-runtime":"12Ae8","../../../base/common/cancellation.js":"1C4LY","../../../base/common/errors.js":"afm4i","../../../base/common/lifecycle.js":"bcbPy","../../../base/common/types.js":"lF7Cj","../../../base/common/uri.js":"4ZDLf","../../common/modes.js":"bRbY1","../../common/services/modelService.js":"HyRTJ","../../../platform/commands/common/commands.js":"eeuTC","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"iH2vH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ICodeLensCache", function() {
    return ICodeLensCache;
});
parcelHelpers.export(exports, "CodeLensCache", function() {
    return CodeLensCache;
});
var _helpers = require("@swc/helpers");
var _asyncJs = require("../../../base/common/async.js");
var _functionalJs = require("../../../base/common/functional.js");
var _mapJs = require("../../../base/common/map.js");
var _rangeJs = require("../../common/core/range.js");
var _codelensJs = require("./codelens.js");
var _extensionsJs = require("../../../platform/instantiation/common/extensions.js");
var _instantiationJs = require("../../../platform/instantiation/common/instantiation.js");
var _storageJs = require("../../../platform/storage/common/storage.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var ICodeLensCache = _instantiationJs.createDecorator('ICodeLensCache');
var CacheItem = function CacheItem(lineCount, data) {
    "use strict";
    _helpers.classCallCheck(this, CacheItem);
    this.lineCount = lineCount;
    this.data = data;
};
var CodeLensCache = /*#__PURE__*/ function() {
    "use strict";
    function CodeLensCache1(storageService) {
        var _this = this;
        _helpers.classCallCheck(this, CodeLensCache1);
        this._fakeProvider = new /*#__PURE__*/ (function() {
            function _class() {
                _helpers.classCallCheck(this, _class);
            }
            _helpers.createClass(_class, [
                {
                    key: "provideCodeLenses",
                    value: function provideCodeLenses() {
                        throw new Error('not supported');
                    }
                }
            ]);
            return _class;
        }());
        this._cache = new _mapJs.LRUCache(20, 0.75);
        // remove old data
        var oldkey = 'codelens/cache';
        _asyncJs.runWhenIdle(function() {
            return storageService.remove(oldkey, 1 /* WORKSPACE */ );
        });
        // restore lens data on start
        var key = 'codelens/cache2';
        var raw = storageService.get(key, 1 /* WORKSPACE */ , '{}');
        this._deserialize(raw);
        // store lens data on shutdown
        _functionalJs.once(storageService.onWillSaveState)(function(e) {
            if (e.reason === _storageJs.WillSaveStateReason.SHUTDOWN) storageService.store(key, _this._serialize(), 1 /* WORKSPACE */ , 1 /* MACHINE */ );
        });
    }
    _helpers.createClass(CodeLensCache1, [
        {
            key: "put",
            value: function put(model, data) {
                // create a copy of the model that is without command-ids
                // but with comand-labels
                var copyItems = data.lenses.map(function(item) {
                    var _a;
                    return {
                        range: item.symbol.range,
                        command: item.symbol.command && {
                            id: '',
                            title: (_a = item.symbol.command) === null || _a === void 0 ? void 0 : _a.title
                        }
                    };
                });
                var copyModel = new _codelensJs.CodeLensModel();
                copyModel.add({
                    lenses: copyItems,
                    dispose: function() {}
                }, this._fakeProvider);
                var item1 = new CacheItem(model.getLineCount(), copyModel);
                this._cache.set(model.uri.toString(), item1);
            }
        },
        {
            key: "get",
            value: function get(model) {
                var item = this._cache.get(model.uri.toString());
                return item && item.lineCount === model.getLineCount() ? item.data : undefined;
            }
        },
        {
            key: "delete",
            value: function _delete(model) {
                this._cache.delete(model.uri.toString());
            }
        },
        {
            // --- persistence
            key: "_serialize",
            value: function _serialize() {
                var data = Object.create(null);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this._cache[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var _value = _helpers.slicedToArray(_step.value, 2), key = _value[0], value = _value[1];
                        var lines = new Set();
                        var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                        try {
                            for(var _iterator1 = value.data.lenses[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                                var d = _step1.value;
                                lines.add(d.symbol.range.startLineNumber);
                            }
                        } catch (err) {
                            _didIteratorError1 = true;
                            _iteratorError1 = err;
                        } finally{
                            try {
                                if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                                    _iterator1.return();
                                }
                            } finally{
                                if (_didIteratorError1) {
                                    throw _iteratorError1;
                                }
                            }
                        }
                        data[key] = {
                            lineCount: value.lineCount,
                            lines: _helpers.toConsumableArray(lines.values())
                        };
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return JSON.stringify(data);
            }
        },
        {
            key: "_deserialize",
            value: function _deserialize(raw) {
                try {
                    var data = JSON.parse(raw);
                    for(var key in data){
                        var element = data[key];
                        var lenses = [];
                        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                        try {
                            for(var _iterator = element.lines[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                                var line = _step.value;
                                lenses.push({
                                    range: new _rangeJs.Range(line, 1, line, 11)
                                });
                            }
                        } catch (err) {
                            _didIteratorError = true;
                            _iteratorError = err;
                        } finally{
                            try {
                                if (!_iteratorNormalCompletion && _iterator.return != null) {
                                    _iterator.return();
                                }
                            } finally{
                                if (_didIteratorError) {
                                    throw _iteratorError;
                                }
                            }
                        }
                        var model = new _codelensJs.CodeLensModel();
                        model.add({
                            lenses: lenses,
                            dispose: function() {}
                        }, this._fakeProvider);
                        this._cache.set(key, new CacheItem(element.lineCount, model));
                    }
                } catch (_a) {
                // ignore...
                }
            }
        }
    ]);
    return CodeLensCache1;
}();
CodeLensCache = __decorate([
    __param(0, _storageJs.IStorageService)
], CodeLensCache);
_extensionsJs.registerSingleton(ICodeLensCache, CodeLensCache);

},{"@swc/helpers":"erO4s","../../../base/common/async.js":"kMhSh","../../../base/common/functional.js":"hZEZA","../../../base/common/map.js":"4OXsW","../../common/core/range.js":"VbyL8","./codelens.js":"5Rfsj","../../../platform/instantiation/common/extensions.js":"6Iedq","../../../platform/instantiation/common/instantiation.js":"9ABZB","../../../platform/storage/common/storage.js":"1m95n","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"8OnHy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CodeLensHelper", function() {
    return CodeLensHelper;
});
parcelHelpers.export(exports, "CodeLensWidget", function() {
    return CodeLensWidget;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _domJs = require("../../../base/browser/dom.js");
var _iconLabelsJs = require("../../../base/browser/ui/iconLabel/iconLabels.js");
var _codelensWidgetCss = require("./codelensWidget.css");
var _rangeJs = require("../../common/core/range.js");
var _textModelJs = require("../../common/model/textModel.js");
var CodeLensViewZone = /*#__PURE__*/ function() {
    "use strict";
    function CodeLensViewZone(afterLineNumber, heightInPx, onHeight) {
        _helpers.classCallCheck(this, CodeLensViewZone);
        this.afterLineNumber = afterLineNumber;
        this.heightInPx = heightInPx;
        this._onHeight = onHeight;
        this.suppressMouseDown = true;
        this.domNode = document.createElement('div');
    }
    _helpers.createClass(CodeLensViewZone, [
        {
            key: "onComputedHeight",
            value: function onComputedHeight(height) {
                if (this._lastHeight === undefined) this._lastHeight = height;
                else if (this._lastHeight !== height) {
                    this._lastHeight = height;
                    this._onHeight();
                }
            }
        },
        {
            key: "isVisible",
            value: function isVisible() {
                return this._lastHeight !== 0 && this.domNode.hasAttribute('monaco-visible-view-zone');
            }
        }
    ]);
    return CodeLensViewZone;
}();
var CodeLensContentWidget = /*#__PURE__*/ function() {
    "use strict";
    function CodeLensContentWidget(editor, className, line) {
        _helpers.classCallCheck(this, CodeLensContentWidget);
        // Editor.IContentWidget.allowEditorOverflow
        this.allowEditorOverflow = false;
        this.suppressMouseDown = true;
        this._commands = new Map();
        this._isEmpty = true;
        this._editor = editor;
        this._id = "codelens.widget-".concat(CodeLensContentWidget._idPool++);
        this.updatePosition(line);
        this._domNode = document.createElement('span');
        this._domNode.className = "codelens-decoration ".concat(className);
    }
    _helpers.createClass(CodeLensContentWidget, [
        {
            key: "withCommands",
            value: function withCommands(lenses, animate) {
                this._commands.clear();
                var children = [];
                var hasSymbol = false;
                for(var i = 0; i < lenses.length; i++){
                    var lens = lenses[i];
                    if (!lens) continue;
                    hasSymbol = true;
                    if (lens.command) {
                        var _dom;
                        var title = _iconLabelsJs.renderLabelWithIcons(lens.command.title.trim());
                        if (lens.command.id) {
                            var _dom1;
                            children.push((_dom1 = _domJs).$.apply(_dom1, [
                                'a',
                                {
                                    id: String(i),
                                    title: lens.command.tooltip
                                }
                            ].concat(_helpers.toConsumableArray(title))));
                            this._commands.set(String(i), lens.command);
                        } else children.push((_dom = _domJs).$.apply(_dom, [
                            'span',
                            {
                                title: lens.command.tooltip
                            }
                        ].concat(_helpers.toConsumableArray(title))));
                        if (i + 1 < lenses.length) children.push(_domJs.$('span', undefined, '\u00a0|\u00a0'));
                    }
                }
                if (!hasSymbol) // symbols but no commands
                _domJs.reset(this._domNode, _domJs.$('span', undefined, 'no commands'));
                else {
                    var // symbols and commands
                    _dom2;
                    (_dom2 = _domJs).reset.apply(_dom2, [
                        this._domNode
                    ].concat(_helpers.toConsumableArray(children)));
                    if (this._isEmpty && animate) this._domNode.classList.add('fadein');
                    this._isEmpty = false;
                }
            }
        },
        {
            key: "getCommand",
            value: function getCommand(link) {
                return link.parentElement === this._domNode ? this._commands.get(link.id) : undefined;
            }
        },
        {
            key: "getId",
            value: function getId() {
                return this._id;
            }
        },
        {
            key: "getDomNode",
            value: function getDomNode() {
                return this._domNode;
            }
        },
        {
            key: "updatePosition",
            value: function updatePosition(line) {
                var column = this._editor.getModel().getLineFirstNonWhitespaceColumn(line);
                this._widgetPosition = {
                    position: {
                        lineNumber: line,
                        column: column
                    },
                    preference: [
                        1 /* ABOVE */ 
                    ]
                };
            }
        },
        {
            key: "getPosition",
            value: function getPosition() {
                return this._widgetPosition || null;
            }
        }
    ]);
    return CodeLensContentWidget;
}();
CodeLensContentWidget._idPool = 0;
var CodeLensHelper = /*#__PURE__*/ function() {
    "use strict";
    function CodeLensHelper() {
        _helpers.classCallCheck(this, CodeLensHelper);
        this._removeDecorations = [];
        this._addDecorations = [];
        this._addDecorationsCallbacks = [];
    }
    _helpers.createClass(CodeLensHelper, [
        {
            key: "addDecoration",
            value: function addDecoration(decoration, callback) {
                this._addDecorations.push(decoration);
                this._addDecorationsCallbacks.push(callback);
            }
        },
        {
            key: "removeDecoration",
            value: function removeDecoration(decorationId) {
                this._removeDecorations.push(decorationId);
            }
        },
        {
            key: "commit",
            value: function commit(changeAccessor) {
                var resultingDecorations = changeAccessor.deltaDecorations(this._removeDecorations, this._addDecorations);
                for(var i = 0, len = resultingDecorations.length; i < len; i++)this._addDecorationsCallbacks[i](resultingDecorations[i]);
            }
        }
    ]);
    return CodeLensHelper;
}();
var CodeLensWidget = /*#__PURE__*/ function() {
    "use strict";
    function CodeLensWidget(data, editor, className, helper, viewZoneChangeAccessor, heightInPx, updateCallback) {
        var _this = this;
        _helpers.classCallCheck(this, CodeLensWidget);
        this._isDisposed = false;
        this._editor = editor;
        this._className = className;
        this._data = data;
        // create combined range, track all ranges with decorations,
        // check if there is already something to render
        this._decorationIds = [];
        var range;
        var lenses = [];
        this._data.forEach(function(codeLensData, i) {
            var _this1 = _this;
            if (codeLensData.symbol.command) lenses.push(codeLensData.symbol);
            helper.addDecoration({
                range: codeLensData.symbol.range,
                options: _textModelJs.ModelDecorationOptions.EMPTY
            }, function(id) {
                return _this1._decorationIds[i] = id;
            });
            // the range contains all lenses on this line
            if (!range) range = _rangeJs.Range.lift(codeLensData.symbol.range);
            else range = _rangeJs.Range.plusRange(range, codeLensData.symbol.range);
        });
        this._viewZone = new CodeLensViewZone(range.startLineNumber - 1, heightInPx, updateCallback);
        this._viewZoneId = viewZoneChangeAccessor.addZone(this._viewZone);
        if (lenses.length > 0) {
            this._createContentWidgetIfNecessary();
            this._contentWidget.withCommands(lenses, false);
        }
    }
    _helpers.createClass(CodeLensWidget, [
        {
            key: "_createContentWidgetIfNecessary",
            value: function _createContentWidgetIfNecessary() {
                if (!this._contentWidget) {
                    this._contentWidget = new CodeLensContentWidget(this._editor, this._className, this._viewZone.afterLineNumber + 1);
                    this._editor.addContentWidget(this._contentWidget);
                } else this._editor.layoutContentWidget(this._contentWidget);
            }
        },
        {
            key: "dispose",
            value: function dispose(helper, viewZoneChangeAccessor) {
                this._decorationIds.forEach(helper.removeDecoration, helper);
                this._decorationIds = [];
                if (viewZoneChangeAccessor) viewZoneChangeAccessor.removeZone(this._viewZoneId);
                if (this._contentWidget) {
                    this._editor.removeContentWidget(this._contentWidget);
                    this._contentWidget = undefined;
                }
                this._isDisposed = true;
            }
        },
        {
            key: "isDisposed",
            value: function isDisposed() {
                return this._isDisposed;
            }
        },
        {
            key: "isValid",
            value: function isValid() {
                var _this = this;
                return this._decorationIds.some(function(id, i) {
                    var range = _this._editor.getModel().getDecorationRange(id);
                    var symbol = _this._data[i].symbol;
                    return !!(range && _rangeJs.Range.isEmpty(symbol.range) === range.isEmpty());
                });
            }
        },
        {
            key: "updateCodeLensSymbols",
            value: function updateCodeLensSymbols(data, helper) {
                var _this = this;
                this._decorationIds.forEach(helper.removeDecoration, helper);
                this._decorationIds = [];
                this._data = data;
                this._data.forEach(function(codeLensData, i) {
                    var _this2 = _this;
                    helper.addDecoration({
                        range: codeLensData.symbol.range,
                        options: _textModelJs.ModelDecorationOptions.EMPTY
                    }, function(id) {
                        return _this2._decorationIds[i] = id;
                    });
                });
            }
        },
        {
            key: "updateHeight",
            value: function updateHeight(height, viewZoneChangeAccessor) {
                this._viewZone.heightInPx = height;
                viewZoneChangeAccessor.layoutZone(this._viewZoneId);
                if (this._contentWidget) this._editor.layoutContentWidget(this._contentWidget);
            }
        },
        {
            key: "computeIfNecessary",
            value: function computeIfNecessary(model) {
                if (!this._viewZone.isVisible()) return null;
                // Read editor current state
                for(var i = 0; i < this._decorationIds.length; i++){
                    var range = model.getDecorationRange(this._decorationIds[i]);
                    if (range) this._data[i].symbol.range = range;
                }
                return this._data;
            }
        },
        {
            key: "updateCommands",
            value: function updateCommands(symbols) {
                this._createContentWidgetIfNecessary();
                this._contentWidget.withCommands(symbols, true);
                for(var i = 0; i < this._data.length; i++){
                    var resolved = symbols[i];
                    if (resolved) {
                        var symbol = this._data[i].symbol;
                        symbol.command = resolved.command || symbol.command;
                    }
                }
            }
        },
        {
            key: "getCommand",
            value: function getCommand(link) {
                var _a;
                return (_a = this._contentWidget) === null || _a === void 0 ? void 0 : _a.getCommand(link);
            }
        },
        {
            key: "getLineNumber",
            value: function getLineNumber() {
                var range = this._editor.getModel().getDecorationRange(this._decorationIds[0]);
                if (range) return range.startLineNumber;
                return -1;
            }
        },
        {
            key: "update",
            value: function update(viewZoneChangeAccessor) {
                if (this.isValid()) {
                    var range = this._editor.getModel().getDecorationRange(this._decorationIds[0]);
                    if (range) {
                        this._viewZone.afterLineNumber = range.startLineNumber - 1;
                        viewZoneChangeAccessor.layoutZone(this._viewZoneId);
                        if (this._contentWidget) {
                            this._contentWidget.updatePosition(range.startLineNumber);
                            this._editor.layoutContentWidget(this._contentWidget);
                        }
                    }
                }
            }
        },
        {
            key: "getItems",
            value: function getItems() {
                return this._data;
            }
        }
    ]);
    return CodeLensWidget;
}();

},{"@swc/helpers":"erO4s","../../../base/browser/dom.js":"bxmlc","../../../base/browser/ui/iconLabel/iconLabels.js":"ez2lK","./codelensWidget.css":"eps2F","../../common/core/range.js":"VbyL8","../../common/model/textModel.js":"f18vR","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"eps2F":[function() {},{}],"fwHSt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ColorContribution", function() {
    return ColorContribution;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ // import color detector contribution
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _editorExtensionsJs = require("../../browser/editorExtensions.js");
var _rangeJs = require("../../common/core/range.js");
var _colorDetectorJs = require("./colorDetector.js");
var _hoverJs = require("../hover/hover.js");
var ColorContribution = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(ColorContribution, Disposable);
    var _super = _helpers.createSuper(ColorContribution);
    function ColorContribution(_editor) {
        _helpers.classCallCheck(this, ColorContribution);
        var _this;
        _this = _super.call(this);
        _this._editor = _editor;
        _this._register(_editor.onMouseDown(function(e) {
            return _this.onMouseDown(e);
        }));
        return _this;
    }
    _helpers.createClass(ColorContribution, [
        {
            key: "dispose",
            value: function dispose() {
                _helpers.get(_helpers.getPrototypeOf(ColorContribution.prototype), "dispose", this).call(this);
            }
        },
        {
            key: "onMouseDown",
            value: function onMouseDown(mouseEvent) {
                var _a;
                var targetType = mouseEvent.target.type;
                if (targetType !== 6 /* CONTENT_TEXT */ ) return;
                var hoverOnColorDecorator = _helpers.toConsumableArray(((_a = mouseEvent.target.element) === null || _a === void 0 ? void 0 : _a.classList.values()) || []).find(function(className) {
                    return className.startsWith('ced-colorBox');
                });
                if (!hoverOnColorDecorator) return;
                if (!mouseEvent.target.range) return;
                var hoverController = this._editor.getContribution(_hoverJs.ModesHoverController.ID);
                if (!hoverController.isColorPickerVisible()) {
                    var range = new _rangeJs.Range(mouseEvent.target.range.startLineNumber, mouseEvent.target.range.startColumn + 1, mouseEvent.target.range.endLineNumber, mouseEvent.target.range.endColumn + 1);
                    hoverController.showContentHover(range, 0 /* Delayed */ , false);
                }
            }
        }
    ]);
    return ColorContribution;
}(_lifecycleJs.Disposable);
ColorContribution.ID = 'editor.contrib.colorContribution'; // ms
_editorExtensionsJs.registerEditorContribution(ColorContribution.ID, ColorContribution);

},{"@swc/helpers":"erO4s","../../../base/common/lifecycle.js":"bcbPy","../../browser/editorExtensions.js":"dFnlo","../../common/core/range.js":"VbyL8","./colorDetector.js":"3Jhf9","../hover/hover.js":"3r6GV","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"3Jhf9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ColorDetector", function() {
    return ColorDetector;
});
var _helpers = require("@swc/helpers");
var _asyncJs = require("../../../base/common/async.js");
var _colorJs = require("../../../base/common/color.js");
var _errorsJs = require("../../../base/common/errors.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _stringsJs = require("../../../base/common/strings.js");
var _editorDomJs = require("../../browser/editorDom.js");
var _editorExtensionsJs = require("../../browser/editorExtensions.js");
var _rangeJs = require("../../common/core/range.js");
var _textModelJs = require("../../common/model/textModel.js");
var _modesJs = require("../../common/modes.js");
var _colorJs1 = require("./color.js");
var _configurationJs = require("../../../platform/configuration/common/configuration.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var MAX_DECORATORS = 500;
var ColorDetector = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(ColorDetector1, Disposable);
    var _super = _helpers.createSuper(ColorDetector1);
    function ColorDetector1(_editor, _configurationService) {
        _helpers.classCallCheck(this, ColorDetector1);
        var _this;
        _this = _super.call(this);
        _this._editor = _editor;
        _this._configurationService = _configurationService;
        _this._localToDispose = _this._register(new _lifecycleJs.DisposableStore());
        _this._decorationsIds = [];
        _this._colorDatas = new Map();
        _this._colorDecoratorIds = new Set();
        _this._ruleFactory = new _editorDomJs.DynamicCssRules(_this._editor);
        _this._colorDecorationClassRefs = _this._register(new _lifecycleJs.DisposableStore());
        _this._register(_editor.onDidChangeModel(function() {
            _this._isEnabled = _this.isEnabled();
            _this.onModelChanged();
        }));
        _this._register(_editor.onDidChangeModelLanguage(function() {
            return _this.onModelChanged();
        }));
        _this._register(_modesJs.ColorProviderRegistry.onDidChange(function() {
            return _this.onModelChanged();
        }));
        _this._register(_editor.onDidChangeConfiguration(function() {
            var prevIsEnabled = _this._isEnabled;
            _this._isEnabled = _this.isEnabled();
            if (prevIsEnabled !== _this._isEnabled) {
                if (_this._isEnabled) _this.onModelChanged();
                else _this.removeAllDecorations();
            }
        }));
        _this._timeoutTimer = null;
        _this._computePromise = null;
        _this._isEnabled = _this.isEnabled();
        _this.onModelChanged();
        return _this;
    }
    _helpers.createClass(ColorDetector1, [
        {
            key: "isEnabled",
            value: function isEnabled() {
                var model = this._editor.getModel();
                if (!model) return false;
                var languageId = model.getLanguageId();
                // handle deprecated settings. [languageId].colorDecorators.enable
                var deprecatedConfig = this._configurationService.getValue(languageId);
                if (deprecatedConfig && typeof deprecatedConfig === 'object') {
                    var colorDecorators = deprecatedConfig['colorDecorators']; // deprecatedConfig.valueOf('.colorDecorators.enable');
                    if (colorDecorators && colorDecorators['enable'] !== undefined && !colorDecorators['enable']) return colorDecorators['enable'];
                }
                return this._editor.getOption(17 /* colorDecorators */ );
            }
        },
        {
            key: "dispose",
            value: function dispose() {
                this.stop();
                this.removeAllDecorations();
                _helpers.get(_helpers.getPrototypeOf(ColorDetector1.prototype), "dispose", this).call(this);
            }
        },
        {
            key: "onModelChanged",
            value: function onModelChanged() {
                var _this = this;
                this.stop();
                if (!this._isEnabled) return;
                var model = this._editor.getModel();
                if (!model || !_modesJs.ColorProviderRegistry.has(model)) return;
                this._localToDispose.add(this._editor.onDidChangeModelContent(function() {
                    if (!_this._timeoutTimer) {
                        var _this1 = _this;
                        _this._timeoutTimer = new _asyncJs.TimeoutTimer();
                        _this._timeoutTimer.cancelAndSet(function() {
                            _this1._timeoutTimer = null;
                            _this1.beginCompute();
                        }, ColorDetector1.RECOMPUTE_TIME);
                    }
                }));
                this.beginCompute();
            }
        },
        {
            key: "beginCompute",
            value: function beginCompute() {
                var _this = this;
                this._computePromise = _asyncJs.createCancelablePromise(function(token) {
                    var model = _this._editor.getModel();
                    if (!model) return Promise.resolve([]);
                    return _colorJs1.getColors(model, token);
                });
                this._computePromise.then(function(colorInfos) {
                    _this.updateDecorations(colorInfos);
                    _this.updateColorDecorators(colorInfos);
                    _this._computePromise = null;
                }, _errorsJs.onUnexpectedError);
            }
        },
        {
            key: "stop",
            value: function stop() {
                if (this._timeoutTimer) {
                    this._timeoutTimer.cancel();
                    this._timeoutTimer = null;
                }
                if (this._computePromise) {
                    this._computePromise.cancel();
                    this._computePromise = null;
                }
                this._localToDispose.clear();
            }
        },
        {
            key: "updateDecorations",
            value: function updateDecorations(colorDatas) {
                var _this = this;
                var decorations = colorDatas.map(function(c) {
                    return {
                        range: {
                            startLineNumber: c.colorInfo.range.startLineNumber,
                            startColumn: c.colorInfo.range.startColumn,
                            endLineNumber: c.colorInfo.range.endLineNumber,
                            endColumn: c.colorInfo.range.endColumn
                        },
                        options: _textModelJs.ModelDecorationOptions.EMPTY
                    };
                });
                this._decorationsIds = this._editor.deltaDecorations(this._decorationsIds, decorations);
                this._colorDatas = new Map();
                this._decorationsIds.forEach(function(id, i) {
                    return _this._colorDatas.set(id, colorDatas[i]);
                });
            }
        },
        {
            key: "updateColorDecorators",
            value: function updateColorDecorators(colorData) {
                this._colorDecorationClassRefs.clear();
                var decorations = [];
                for(var i = 0; i < colorData.length && decorations.length < MAX_DECORATORS; i++){
                    var _color = colorData[i].colorInfo.color, red = _color.red, green = _color.green, blue = _color.blue, alpha = _color.alpha;
                    var rgba = new _colorJs.RGBA(Math.round(red * 255), Math.round(green * 255), Math.round(blue * 255), alpha);
                    var color = "rgba(".concat(rgba.r, ", ").concat(rgba.g, ", ").concat(rgba.b, ", ").concat(rgba.a, ")");
                    var ref = this._colorDecorationClassRefs.add(this._ruleFactory.createClassNameRef({
                        backgroundColor: color
                    }));
                    decorations.push({
                        range: {
                            startLineNumber: colorData[i].colorInfo.range.startLineNumber,
                            startColumn: colorData[i].colorInfo.range.startColumn,
                            endLineNumber: colorData[i].colorInfo.range.endLineNumber,
                            endColumn: colorData[i].colorInfo.range.endColumn
                        },
                        options: {
                            description: 'colorDetector',
                            before: {
                                content: _stringsJs.noBreakWhitespace,
                                inlineClassName: "".concat(ref.className, " colorpicker-color-decoration"),
                                inlineClassNameAffectsLetterSpacing: true
                            }
                        }
                    });
                }
                this._colorDecoratorIds = new Set(this._editor.deltaDecorations(_helpers.toConsumableArray(this._colorDecoratorIds), decorations));
            }
        },
        {
            key: "removeAllDecorations",
            value: function removeAllDecorations() {
                this._decorationsIds = this._editor.deltaDecorations(this._decorationsIds, []);
                this._colorDecoratorIds = new Set(this._editor.deltaDecorations(_helpers.toConsumableArray(this._colorDecoratorIds), []));
                this._colorDecorationClassRefs.clear();
            }
        },
        {
            key: "getColorData",
            value: function getColorData(position) {
                var _this = this;
                var model = this._editor.getModel();
                if (!model) return null;
                var decorations = model.getDecorationsInRange(_rangeJs.Range.fromPositions(position, position)).filter(function(d) {
                    return _this._colorDatas.has(d.id);
                });
                if (decorations.length === 0) return null;
                return this._colorDatas.get(decorations[0].id);
            }
        },
        {
            key: "isColorDecorationId",
            value: function isColorDecorationId(decorationId) {
                return this._colorDecoratorIds.has(decorationId);
            }
        }
    ], [
        {
            key: "get",
            value: function get(editor) {
                return editor.getContribution(this.ID);
            }
        }
    ]);
    return ColorDetector1;
}(_lifecycleJs.Disposable);
ColorDetector.ID = 'editor.contrib.colorDetector';
ColorDetector.RECOMPUTE_TIME = 1000; // ms
ColorDetector = __decorate([
    __param(1, _configurationJs.IConfigurationService)
], ColorDetector);
_editorExtensionsJs.registerEditorContribution(ColorDetector.ID, ColorDetector);

},{"@swc/helpers":"erO4s","../../../base/common/async.js":"kMhSh","../../../base/common/color.js":"2jKDp","../../../base/common/errors.js":"afm4i","../../../base/common/lifecycle.js":"bcbPy","../../../base/common/strings.js":"jsb6w","../../browser/editorDom.js":"e0iOe","../../browser/editorExtensions.js":"dFnlo","../../common/core/range.js":"VbyL8","../../common/model/textModel.js":"f18vR","../../common/modes.js":"bRbY1","./color.js":"ojNlZ","../../../platform/configuration/common/configuration.js":"9wFfb","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"ojNlZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getColors", function() {
    return getColors;
});
parcelHelpers.export(exports, "getColorPresentations", function() {
    return getColorPresentations;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _cancellationJs = require("../../../base/common/cancellation.js");
var _errorsJs = require("../../../base/common/errors.js");
var _uriJs = require("../../../base/common/uri.js");
var _rangeJs = require("../../common/core/range.js");
var _modesJs = require("../../common/modes.js");
var _modelServiceJs = require("../../common/services/modelService.js");
var _commandsJs = require("../../../platform/commands/common/commands.js");
function getColors(model, token) {
    var colors = [];
    var providers = _modesJs.ColorProviderRegistry.ordered(model).reverse();
    var promises = providers.map(function(provider) {
        return Promise.resolve(provider.provideDocumentColors(model, token)).then(function(result) {
            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
            if (Array.isArray(result)) try {
                for(var _iterator = result[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                    var colorInfo = _step.value;
                    colors.push({
                        colorInfo: colorInfo,
                        provider: provider
                    });
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally{
                try {
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                    }
                } finally{
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        });
    });
    return Promise.all(promises).then(function() {
        return colors;
    });
}
function getColorPresentations(model, colorInfo, provider, token) {
    return Promise.resolve(provider.provideColorPresentations(model, colorInfo, token));
}
_commandsJs.CommandsRegistry.registerCommand('_executeDocumentColorProvider', function(accessor) {
    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
        args[_key - 1] = arguments[_key];
    }
    var _args = _helpers.slicedToArray(args, 1), resource = _args[0];
    if (!(resource instanceof _uriJs.URI)) throw _errorsJs.illegalArgument();
    var model = accessor.get(_modelServiceJs.IModelService).getModel(resource);
    if (!model) throw _errorsJs.illegalArgument();
    var rawCIs = [];
    var providers = _modesJs.ColorProviderRegistry.ordered(model).reverse();
    var promises = providers.map(function(provider) {
        return Promise.resolve(provider.provideDocumentColors(model, _cancellationJs.CancellationToken.None)).then(function(result) {
            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
            if (Array.isArray(result)) try {
                for(var _iterator = result[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                    var ci = _step.value;
                    rawCIs.push({
                        range: ci.range,
                        color: [
                            ci.color.red,
                            ci.color.green,
                            ci.color.blue,
                            ci.color.alpha
                        ]
                    });
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally{
                try {
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                    }
                } finally{
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        });
    });
    return Promise.all(promises).then(function() {
        return rawCIs;
    });
});
_commandsJs.CommandsRegistry.registerCommand('_executeColorPresentationProvider', function(accessor) {
    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
        args[_key - 1] = arguments[_key];
    }
    var _args = _helpers.slicedToArray(args, 2), color = _args[0], context = _args[1];
    var uri = context.uri, range = context.range;
    if (!(uri instanceof _uriJs.URI) || !Array.isArray(color) || color.length !== 4 || !_rangeJs.Range.isIRange(range)) throw _errorsJs.illegalArgument();
    var _color = _helpers.slicedToArray(color, 4), red = _color[0], green = _color[1], blue = _color[2], alpha = _color[3];
    var model = accessor.get(_modelServiceJs.IModelService).getModel(uri);
    if (!model) throw _errorsJs.illegalArgument();
    var colorInfo = {
        range: range,
        color: {
            red: red,
            green: green,
            blue: blue,
            alpha: alpha
        }
    };
    var presentations = [];
    var providers = _modesJs.ColorProviderRegistry.ordered(model).reverse();
    var promises = providers.map(function(provider) {
        return Promise.resolve(provider.provideColorPresentations(model, colorInfo, _cancellationJs.CancellationToken.None)).then(function(result) {
            var _presentations;
            if (Array.isArray(result)) (_presentations = presentations).push.apply(_presentations, _helpers.toConsumableArray(result));
        });
    });
    return Promise.all(promises).then(function() {
        return presentations;
    });
});

},{"@swc/helpers":"erO4s","../../../base/common/cancellation.js":"1C4LY","../../../base/common/errors.js":"afm4i","../../../base/common/uri.js":"4ZDLf","../../common/core/range.js":"VbyL8","../../common/modes.js":"bRbY1","../../common/services/modelService.js":"HyRTJ","../../../platform/commands/common/commands.js":"eeuTC","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"3r6GV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ModesHoverController", function() {
    return ModesHoverController;
});
var _helpers = require("@swc/helpers");
var _keyCodesJs = require("../../../base/common/keyCodes.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _editorExtensionsJs = require("../../browser/editorExtensions.js");
var _rangeJs = require("../../common/core/range.js");
var _editorContextKeysJs = require("../../common/editorContextKeys.js");
var _modeServiceJs = require("../../common/services/modeService.js");
var _goToDefinitionAtPositionJs = require("../gotoSymbol/link/goToDefinitionAtPosition.js");
var _modesContentHoverJs = require("./modesContentHover.js");
var _modesGlyphHoverJs = require("./modesGlyphHover.js");
var _nlsJs = require("../../../nls.js");
var _contextkeyJs = require("../../../platform/contextkey/common/contextkey.js");
var _instantiationJs = require("../../../platform/instantiation/common/instantiation.js");
var _openerJs = require("../../../platform/opener/common/opener.js");
var _colorRegistryJs = require("../../../platform/theme/common/colorRegistry.js");
var _themeServiceJs = require("../../../platform/theme/common/themeService.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var ModesHoverController = /*#__PURE__*/ function() {
    "use strict";
    function ModesHoverController1(_editor, _instantiationService, _openerService, _modeService, _contextKeyService) {
        var _this = this;
        _helpers.classCallCheck(this, ModesHoverController1);
        this._editor = _editor;
        this._instantiationService = _instantiationService;
        this._openerService = _openerService;
        this._modeService = _modeService;
        this._toUnhook = new _lifecycleJs.DisposableStore();
        this._isMouseDown = false;
        this._hoverClicked = false;
        this._contentWidget = null;
        this._glyphWidget = null;
        this._hookEvents();
        this._didChangeConfigurationHandler = this._editor.onDidChangeConfiguration(function(e) {
            if (e.hasChanged(52 /* hover */ )) {
                _this._unhookEvents();
                _this._hookEvents();
            }
        });
        this._hoverVisibleKey = _editorContextKeysJs.EditorContextKeys.hoverVisible.bindTo(_contextKeyService);
    }
    _helpers.createClass(ModesHoverController1, [
        {
            key: "_hookEvents",
            value: function _hookEvents() {
                var _this = this;
                var hideWidgetsEventHandler = function() {
                    return _this._hideWidgets();
                };
                var hoverOpts = this._editor.getOption(52 /* hover */ );
                this._isHoverEnabled = hoverOpts.enabled;
                this._isHoverSticky = hoverOpts.sticky;
                if (this._isHoverEnabled) {
                    var _this1 = this;
                    this._toUnhook.add(this._editor.onMouseDown(function(e) {
                        return _this1._onEditorMouseDown(e);
                    }));
                    this._toUnhook.add(this._editor.onMouseUp(function(e) {
                        return _this1._onEditorMouseUp(e);
                    }));
                    this._toUnhook.add(this._editor.onMouseMove(function(e) {
                        return _this1._onEditorMouseMove(e);
                    }));
                    this._toUnhook.add(this._editor.onKeyDown(function(e) {
                        return _this1._onKeyDown(e);
                    }));
                    this._toUnhook.add(this._editor.onDidChangeModelDecorations(function() {
                        return _this1._onModelDecorationsChanged();
                    }));
                } else {
                    var _this2 = this;
                    this._toUnhook.add(this._editor.onMouseMove(function(e) {
                        return _this2._onEditorMouseMove(e);
                    }));
                    this._toUnhook.add(this._editor.onKeyDown(function(e) {
                        return _this2._onKeyDown(e);
                    }));
                }
                this._toUnhook.add(this._editor.onMouseLeave(hideWidgetsEventHandler));
                this._toUnhook.add(this._editor.onDidChangeModel(hideWidgetsEventHandler));
                this._toUnhook.add(this._editor.onDidScrollChange(function(e) {
                    return _this._onEditorScrollChanged(e);
                }));
            }
        },
        {
            key: "_unhookEvents",
            value: function _unhookEvents() {
                this._toUnhook.clear();
            }
        },
        {
            key: "_onModelDecorationsChanged",
            value: function _onModelDecorationsChanged() {
                var _a, _b;
                (_a = this._contentWidget) === null || _a === void 0 || _a.onModelDecorationsChanged();
                (_b = this._glyphWidget) === null || _b === void 0 || _b.onModelDecorationsChanged();
            }
        },
        {
            key: "_onEditorScrollChanged",
            value: function _onEditorScrollChanged(e) {
                if (e.scrollTopChanged || e.scrollLeftChanged) this._hideWidgets();
            }
        },
        {
            key: "_onEditorMouseDown",
            value: function _onEditorMouseDown(mouseEvent) {
                this._isMouseDown = true;
                var targetType = mouseEvent.target.type;
                if (targetType === 9 /* CONTENT_WIDGET */  && mouseEvent.target.detail === _modesContentHoverJs.ModesContentHoverWidget.ID) {
                    this._hoverClicked = true;
                    // mouse down on top of content hover widget
                    return;
                }
                if (targetType === 12 /* OVERLAY_WIDGET */  && mouseEvent.target.detail === _modesGlyphHoverJs.ModesGlyphHoverWidget.ID) // mouse down on top of overlay hover widget
                return;
                if (targetType !== 12 /* OVERLAY_WIDGET */  && mouseEvent.target.detail !== _modesGlyphHoverJs.ModesGlyphHoverWidget.ID) this._hoverClicked = false;
                this._hideWidgets();
            }
        },
        {
            key: "_onEditorMouseUp",
            value: function _onEditorMouseUp(mouseEvent) {
                this._isMouseDown = false;
            }
        },
        {
            key: "_onEditorMouseMove",
            value: function _onEditorMouseMove(mouseEvent) {
                var _a, _b, _c, _d, _e;
                var targetType = mouseEvent.target.type;
                if (this._isMouseDown && this._hoverClicked) return;
                if (this._isHoverSticky && targetType === 9 /* CONTENT_WIDGET */  && mouseEvent.target.detail === _modesContentHoverJs.ModesContentHoverWidget.ID) // mouse moved on top of content hover widget
                return;
                if (this._isHoverSticky && !((_b = (_a = mouseEvent.event.browserEvent.view) === null || _a === void 0 ? void 0 : _a.getSelection()) === null || _b === void 0 ? void 0 : _b.isCollapsed)) // selected text within content hover widget
                return;
                if (!this._isHoverSticky && targetType === 9 /* CONTENT_WIDGET */  && mouseEvent.target.detail === _modesContentHoverJs.ModesContentHoverWidget.ID && ((_c = this._contentWidget) === null || _c === void 0 ? void 0 : _c.isColorPickerVisible())) // though the hover is not sticky, the color picker needs to.
                return;
                if (this._isHoverSticky && targetType === 12 /* OVERLAY_WIDGET */  && mouseEvent.target.detail === _modesGlyphHoverJs.ModesGlyphHoverWidget.ID) // mouse moved on top of overlay hover widget
                return;
                if (!this._isHoverEnabled) {
                    this._hideWidgets();
                    return;
                }
                var contentWidget = this._getOrCreateContentWidget();
                if (contentWidget.maybeShowAt(mouseEvent)) {
                    (_d = this._glyphWidget) === null || _d === void 0 || _d.hide();
                    return;
                }
                if (targetType === 2 /* GUTTER_GLYPH_MARGIN */  && mouseEvent.target.position) {
                    (_e = this._contentWidget) === null || _e === void 0 || _e.hide();
                    if (!this._glyphWidget) this._glyphWidget = new _modesGlyphHoverJs.ModesGlyphHoverWidget(this._editor, this._modeService, this._openerService);
                    this._glyphWidget.startShowingAt(mouseEvent.target.position.lineNumber);
                    return;
                }
                this._hideWidgets();
            }
        },
        {
            key: "_onKeyDown",
            value: function _onKeyDown(e) {
                if (e.keyCode !== 5 /* Ctrl */  && e.keyCode !== 6 /* Alt */  && e.keyCode !== 57 /* Meta */  && e.keyCode !== 4 /* Shift */ ) // Do not hide hover when a modifier key is pressed
                this._hideWidgets();
            }
        },
        {
            key: "_hideWidgets",
            value: function _hideWidgets() {
                var _a, _b, _c;
                if (this._isMouseDown && this._hoverClicked && ((_a = this._contentWidget) === null || _a === void 0 ? void 0 : _a.isColorPickerVisible())) return;
                this._hoverClicked = false;
                (_b = this._glyphWidget) === null || _b === void 0 || _b.hide();
                (_c = this._contentWidget) === null || _c === void 0 || _c.hide();
            }
        },
        {
            key: "_getOrCreateContentWidget",
            value: function _getOrCreateContentWidget() {
                if (!this._contentWidget) this._contentWidget = this._instantiationService.createInstance(_modesContentHoverJs.ModesContentHoverWidget, this._editor, this._hoverVisibleKey);
                return this._contentWidget;
            }
        },
        {
            key: "isColorPickerVisible",
            value: function isColorPickerVisible() {
                var _a;
                return ((_a = this._contentWidget) === null || _a === void 0 ? void 0 : _a.isColorPickerVisible()) || false;
            }
        },
        {
            key: "showContentHover",
            value: function showContentHover(range, mode, focus) {
                this._getOrCreateContentWidget().startShowingAtRange(range, mode, focus);
            }
        },
        {
            key: "dispose",
            value: function dispose() {
                var _a, _b;
                this._unhookEvents();
                this._toUnhook.dispose();
                this._didChangeConfigurationHandler.dispose();
                (_a = this._glyphWidget) === null || _a === void 0 || _a.dispose();
                (_b = this._contentWidget) === null || _b === void 0 || _b.dispose();
            }
        }
    ], [
        {
            key: "get",
            value: function get(editor) {
                return editor.getContribution(ModesHoverController1.ID);
            }
        }
    ]);
    return ModesHoverController1;
}();
ModesHoverController.ID = 'editor.contrib.hover';
ModesHoverController = __decorate([
    __param(1, _instantiationJs.IInstantiationService),
    __param(2, _openerJs.IOpenerService),
    __param(3, _modeServiceJs.IModeService),
    __param(4, _contextkeyJs.IContextKeyService)
], ModesHoverController);
var ShowHoverAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(ShowHoverAction, EditorAction);
    var _super = _helpers.createSuper(ShowHoverAction);
    function ShowHoverAction() {
        _helpers.classCallCheck(this, ShowHoverAction);
        return _super.call(this, {
            id: 'editor.action.showHover',
            label: _nlsJs.localize({
                key: 'showHover',
                comment: [
                    'Label for action that will trigger the showing of a hover in the editor.',
                    'This allows for users to show the hover without using the mouse.'
                ]
            }, "Show Hover"),
            alias: 'Show Hover',
            precondition: undefined,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: _keyCodesJs.KeyChord(2089 /* KeyK */ , 2087 /* KeyI */ ),
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    _helpers.createClass(ShowHoverAction, [
        {
            key: "run",
            value: function run(accessor, editor) {
                if (!editor.hasModel()) return;
                var controller = ModesHoverController.get(editor);
                if (!controller) return;
                var position = editor.getPosition();
                var range = new _rangeJs.Range(position.lineNumber, position.column, position.lineNumber, position.column);
                var focus = editor.getOption(2 /* accessibilitySupport */ ) === 2 /* Enabled */ ;
                controller.showContentHover(range, 1 /* Immediate */ , focus);
            }
        }
    ]);
    return ShowHoverAction;
}(_editorExtensionsJs.EditorAction);
var ShowDefinitionPreviewHoverAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(ShowDefinitionPreviewHoverAction, EditorAction);
    var _super = _helpers.createSuper(ShowDefinitionPreviewHoverAction);
    function ShowDefinitionPreviewHoverAction() {
        _helpers.classCallCheck(this, ShowDefinitionPreviewHoverAction);
        return _super.call(this, {
            id: 'editor.action.showDefinitionPreviewHover',
            label: _nlsJs.localize({
                key: 'showDefinitionPreviewHover',
                comment: [
                    'Label for action that will trigger the showing of definition preview hover in the editor.',
                    'This allows for users to show the definition preview hover without using the mouse.'
                ]
            }, "Show Definition Preview Hover"),
            alias: 'Show Definition Preview Hover',
            precondition: undefined
        });
    }
    _helpers.createClass(ShowDefinitionPreviewHoverAction, [
        {
            key: "run",
            value: function run(accessor, editor) {
                var controller = ModesHoverController.get(editor);
                if (!controller) return;
                var position = editor.getPosition();
                if (!position) return;
                var range = new _rangeJs.Range(position.lineNumber, position.column, position.lineNumber, position.column);
                var goto = _goToDefinitionAtPositionJs.GotoDefinitionAtPositionEditorContribution.get(editor);
                var promise = goto.startFindDefinitionFromCursor(position);
                promise.then(function() {
                    controller.showContentHover(range, 1 /* Immediate */ , true);
                });
            }
        }
    ]);
    return ShowDefinitionPreviewHoverAction;
}(_editorExtensionsJs.EditorAction);
_editorExtensionsJs.registerEditorContribution(ModesHoverController.ID, ModesHoverController);
_editorExtensionsJs.registerEditorAction(ShowHoverAction);
_editorExtensionsJs.registerEditorAction(ShowDefinitionPreviewHoverAction);
// theming
_themeServiceJs.registerThemingParticipant(function(theme, collector) {
    var editorHoverHighlightColor = theme.getColor(_colorRegistryJs.editorHoverHighlight);
    if (editorHoverHighlightColor) collector.addRule(".monaco-editor .hoverHighlight { background-color: ".concat(editorHoverHighlightColor, "; }"));
    var hoverBackground = theme.getColor(_colorRegistryJs.editorHoverBackground);
    if (hoverBackground) collector.addRule(".monaco-editor .monaco-hover { background-color: ".concat(hoverBackground, "; }"));
    var hoverBorder = theme.getColor(_colorRegistryJs.editorHoverBorder);
    if (hoverBorder) {
        collector.addRule(".monaco-editor .monaco-hover { border: 1px solid ".concat(hoverBorder, "; }"));
        collector.addRule(".monaco-editor .monaco-hover .hover-row:not(:first-child):not(:empty) { border-top: 1px solid ".concat(hoverBorder.transparent(0.5), "; }"));
        collector.addRule(".monaco-editor .monaco-hover hr { border-top: 1px solid ".concat(hoverBorder.transparent(0.5), "; }"));
        collector.addRule(".monaco-editor .monaco-hover hr { border-bottom: 0px solid ".concat(hoverBorder.transparent(0.5), "; }"));
    }
    var link = theme.getColor(_colorRegistryJs.textLinkForeground);
    if (link) collector.addRule(".monaco-editor .monaco-hover a { color: ".concat(link, "; }"));
    var linkHover = theme.getColor(_colorRegistryJs.textLinkActiveForeground);
    if (linkHover) collector.addRule(".monaco-editor .monaco-hover a:hover { color: ".concat(linkHover, "; }"));
    var hoverForeground = theme.getColor(_colorRegistryJs.editorHoverForeground);
    if (hoverForeground) collector.addRule(".monaco-editor .monaco-hover { color: ".concat(hoverForeground, "; }"));
    var actionsBackground = theme.getColor(_colorRegistryJs.editorHoverStatusBarBackground);
    if (actionsBackground) collector.addRule(".monaco-editor .monaco-hover .hover-row .actions { background-color: ".concat(actionsBackground, "; }"));
    var codeBackground = theme.getColor(_colorRegistryJs.textCodeBlockBackground);
    if (codeBackground) collector.addRule(".monaco-editor .monaco-hover code { background-color: ".concat(codeBackground, "; }"));
});

},{"@swc/helpers":"erO4s","../../../base/common/keyCodes.js":"4hRDv","../../../base/common/lifecycle.js":"bcbPy","../../browser/editorExtensions.js":"dFnlo","../../common/core/range.js":"VbyL8","../../common/editorContextKeys.js":"2t2PW","../../common/services/modeService.js":"dNIX6","../gotoSymbol/link/goToDefinitionAtPosition.js":"9tsTR","./modesContentHover.js":"7znBu","./modesGlyphHover.js":"6Tcgw","../../../nls.js":"9djYb","../../../platform/contextkey/common/contextkey.js":"5cjav","../../../platform/instantiation/common/instantiation.js":"9ABZB","../../../platform/opener/common/opener.js":"nEUGw","../../../platform/theme/common/colorRegistry.js":"lKtxS","../../../platform/theme/common/themeService.js":"kE7QB","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"9tsTR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GotoDefinitionAtPositionEditorContribution", function() {
    return GotoDefinitionAtPositionEditorContribution;
});
var _helpers = require("@swc/helpers");
var _asyncJs = require("../../../../base/common/async.js");
var _errorsJs = require("../../../../base/common/errors.js");
var _htmlContentJs = require("../../../../base/common/htmlContent.js");
var _lifecycleJs = require("../../../../base/common/lifecycle.js");
var _typesJs = require("../../../../base/common/types.js");
var _goToDefinitionAtPositionCss = require("./goToDefinitionAtPosition.css");
var _editorStateJs = require("../../../browser/core/editorState.js");
var _editorExtensionsJs = require("../../../browser/editorExtensions.js");
var _positionJs = require("../../../common/core/position.js");
var _rangeJs = require("../../../common/core/range.js");
var _modesJs = require("../../../common/modes.js");
var _modeServiceJs = require("../../../common/services/modeService.js");
var _resolverServiceJs = require("../../../common/services/resolverService.js");
var _clickLinkGestureJs = require("./clickLinkGesture.js");
var _peekViewJs = require("../../peekView/peekView.js");
var _nlsJs = require("../../../../nls.js");
var _contextkeyJs = require("../../../../platform/contextkey/common/contextkey.js");
var _colorRegistryJs = require("../../../../platform/theme/common/colorRegistry.js");
var _themeServiceJs = require("../../../../platform/theme/common/themeService.js");
var _goToCommandsJs = require("../goToCommands.js");
var _goToSymbolJs = require("../goToSymbol.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var GotoDefinitionAtPositionEditorContribution = /*#__PURE__*/ function() {
    "use strict";
    function GotoDefinitionAtPositionEditorContribution1(editor, textModelResolverService, modeService) {
        var _this = this;
        _helpers.classCallCheck(this, GotoDefinitionAtPositionEditorContribution1);
        this.textModelResolverService = textModelResolverService;
        this.modeService = modeService;
        this.toUnhook = new _lifecycleJs.DisposableStore();
        this.toUnhookForKeyboard = new _lifecycleJs.DisposableStore();
        this.linkDecorations = [];
        this.currentWordAtPosition = null;
        this.previousPromise = null;
        this.editor = editor;
        var linkGesture = new _clickLinkGestureJs.ClickLinkGesture(editor);
        this.toUnhook.add(linkGesture);
        this.toUnhook.add(linkGesture.onMouseMoveOrRelevantKeyDown(function(param) {
            var _param = _helpers.slicedToArray(param, 2), mouseEvent = _param[0], keyboardEvent = _param[1];
            _this.startFindDefinitionFromMouse(mouseEvent, _typesJs.withNullAsUndefined(keyboardEvent));
        }));
        this.toUnhook.add(linkGesture.onExecute(function(mouseEvent) {
            var _this1 = _this;
            if (_this.isEnabled(mouseEvent)) _this.gotoDefinition(mouseEvent.target.position, mouseEvent.hasSideBySideModifier).then(function() {
                _this1.removeLinkDecorations();
            }, function(error) {
                _this1.removeLinkDecorations();
                _errorsJs.onUnexpectedError(error);
            });
        }));
        this.toUnhook.add(linkGesture.onCancel(function() {
            _this.removeLinkDecorations();
            _this.currentWordAtPosition = null;
        }));
    }
    _helpers.createClass(GotoDefinitionAtPositionEditorContribution1, [
        {
            key: "startFindDefinitionFromCursor",
            value: function startFindDefinitionFromCursor(position) {
                var _this = this;
                // For issue: https://github.com/microsoft/vscode/issues/46257
                // equivalent to mouse move with meta/ctrl key
                // First find the definition and add decorations
                // to the editor to be shown with the content hover widget
                return this.startFindDefinition(position).then(function() {
                    var _this2 = _this;
                    // Add listeners for editor cursor move and key down events
                    // Dismiss the "extended" editor decorations when the user hides
                    // the hover widget. There is no event for the widget itself so these
                    // serve as a best effort. After removing the link decorations, the hover
                    // widget is clean and will only show declarations per next request.
                    _this.toUnhookForKeyboard.add(_this.editor.onDidChangeCursorPosition(function() {
                        _this2.currentWordAtPosition = null;
                        _this2.removeLinkDecorations();
                        _this2.toUnhookForKeyboard.clear();
                    }));
                    _this.toUnhookForKeyboard.add(_this.editor.onKeyDown(function(e) {
                        if (e) {
                            _this2.currentWordAtPosition = null;
                            _this2.removeLinkDecorations();
                            _this2.toUnhookForKeyboard.clear();
                        }
                    }));
                });
            }
        },
        {
            key: "startFindDefinitionFromMouse",
            value: function startFindDefinitionFromMouse(mouseEvent, withKey) {
                // check if we are active and on a content widget
                if (mouseEvent.target.type === 9 /* CONTENT_WIDGET */  && this.linkDecorations.length > 0) return;
                if (!this.editor.hasModel() || !this.isEnabled(mouseEvent, withKey)) {
                    this.currentWordAtPosition = null;
                    this.removeLinkDecorations();
                    return;
                }
                var position = mouseEvent.target.position;
                this.startFindDefinition(position);
            }
        },
        {
            key: "startFindDefinition",
            value: function startFindDefinition(position) {
                var _this = this;
                var _a;
                // Dispose listeners for updating decorations when using keyboard to show definition hover
                this.toUnhookForKeyboard.clear();
                // Find word at mouse position
                var word = position ? (_a = this.editor.getModel()) === null || _a === void 0 ? void 0 : _a.getWordAtPosition(position) : null;
                if (!word) {
                    this.currentWordAtPosition = null;
                    this.removeLinkDecorations();
                    return Promise.resolve(0);
                }
                // Return early if word at position is still the same
                if (this.currentWordAtPosition && this.currentWordAtPosition.startColumn === word.startColumn && this.currentWordAtPosition.endColumn === word.endColumn && this.currentWordAtPosition.word === word.word) return Promise.resolve(0);
                this.currentWordAtPosition = word;
                // Find definition and decorate word if found
                var state = new _editorStateJs.EditorState(this.editor, 15 /* Scroll */ );
                if (this.previousPromise) {
                    this.previousPromise.cancel();
                    this.previousPromise = null;
                }
                this.previousPromise = _asyncJs.createCancelablePromise(function(token) {
                    return _this.findDefinition(position, token);
                });
                return this.previousPromise.then(function(results) {
                    if (!results || !results.length || !state.validate(_this.editor)) {
                        _this.removeLinkDecorations();
                        return;
                    }
                    // Multiple results
                    if (results.length > 1) _this.addDecoration(new _rangeJs.Range(position.lineNumber, word.startColumn, position.lineNumber, word.endColumn), new _htmlContentJs.MarkdownString().appendText(_nlsJs.localize('multipleResults', "Click to show {0} definitions.", results.length)));
                    else {
                        var _this3 = _this;
                        var result = results[0];
                        if (!result.uri) return;
                        _this.textModelResolverService.createModelReference(result.uri).then(function(ref) {
                            if (!ref.object || !ref.object.textEditorModel) {
                                ref.dispose();
                                return;
                            }
                            var textEditorModel = ref.object.textEditorModel;
                            var startLineNumber = result.range.startLineNumber;
                            if (startLineNumber < 1 || startLineNumber > textEditorModel.getLineCount()) {
                                // invalid range
                                ref.dispose();
                                return;
                            }
                            var previewValue = _this3.getPreviewValue(textEditorModel, startLineNumber, result);
                            var wordRange;
                            if (result.originSelectionRange) wordRange = _rangeJs.Range.lift(result.originSelectionRange);
                            else wordRange = new _rangeJs.Range(position.lineNumber, word.startColumn, position.lineNumber, word.endColumn);
                            var languageId = _this3.modeService.getModeIdByFilepathOrFirstLine(textEditorModel.uri);
                            _this3.addDecoration(wordRange, new _htmlContentJs.MarkdownString().appendCodeblock(languageId ? languageId : '', previewValue));
                            ref.dispose();
                        });
                    }
                }).then(undefined, _errorsJs.onUnexpectedError);
            }
        },
        {
            key: "getPreviewValue",
            value: function getPreviewValue(textEditorModel, startLineNumber, result) {
                var rangeToUse = result.targetSelectionRange ? result.range : this.getPreviewRangeBasedOnBrackets(textEditorModel, startLineNumber);
                var numberOfLinesInRange = rangeToUse.endLineNumber - rangeToUse.startLineNumber;
                if (numberOfLinesInRange >= GotoDefinitionAtPositionEditorContribution1.MAX_SOURCE_PREVIEW_LINES) rangeToUse = this.getPreviewRangeBasedOnIndentation(textEditorModel, startLineNumber);
                var previewValue = this.stripIndentationFromPreviewRange(textEditorModel, startLineNumber, rangeToUse);
                return previewValue;
            }
        },
        {
            key: "stripIndentationFromPreviewRange",
            value: function stripIndentationFromPreviewRange(textEditorModel, startLineNumber, previewRange) {
                var startIndent = textEditorModel.getLineFirstNonWhitespaceColumn(startLineNumber);
                var minIndent = startIndent;
                for(var endLineNumber = startLineNumber + 1; endLineNumber < previewRange.endLineNumber; endLineNumber++){
                    var endIndent = textEditorModel.getLineFirstNonWhitespaceColumn(endLineNumber);
                    minIndent = Math.min(minIndent, endIndent);
                }
                var previewValue = textEditorModel.getValueInRange(previewRange).replace(new RegExp("^\\s{".concat(minIndent - 1, "}"), 'gm'), '').trim();
                return previewValue;
            }
        },
        {
            key: "getPreviewRangeBasedOnIndentation",
            value: function getPreviewRangeBasedOnIndentation(textEditorModel, startLineNumber) {
                var startIndent = textEditorModel.getLineFirstNonWhitespaceColumn(startLineNumber);
                var maxLineNumber = Math.min(textEditorModel.getLineCount(), startLineNumber + GotoDefinitionAtPositionEditorContribution1.MAX_SOURCE_PREVIEW_LINES);
                var endLineNumber = startLineNumber + 1;
                for(; endLineNumber < maxLineNumber; endLineNumber++){
                    var endIndent = textEditorModel.getLineFirstNonWhitespaceColumn(endLineNumber);
                    if (startIndent === endIndent) break;
                }
                return new _rangeJs.Range(startLineNumber, 1, endLineNumber + 1, 1);
            }
        },
        {
            key: "getPreviewRangeBasedOnBrackets",
            value: function getPreviewRangeBasedOnBrackets(textEditorModel, startLineNumber) {
                var maxLineNumber = Math.min(textEditorModel.getLineCount(), startLineNumber + GotoDefinitionAtPositionEditorContribution1.MAX_SOURCE_PREVIEW_LINES);
                var brackets = [];
                var ignoreFirstEmpty = true;
                var currentBracket = textEditorModel.bracketPairs.findNextBracket(new _positionJs.Position(startLineNumber, 1));
                while(currentBracket !== null){
                    if (brackets.length === 0) brackets.push(currentBracket);
                    else {
                        var lastBracket = brackets[brackets.length - 1];
                        if (lastBracket.open[0] === currentBracket.open[0] && lastBracket.isOpen && !currentBracket.isOpen) brackets.pop();
                        else brackets.push(currentBracket);
                        if (brackets.length === 0) {
                            if (ignoreFirstEmpty) ignoreFirstEmpty = false;
                            else return new _rangeJs.Range(startLineNumber, 1, currentBracket.range.endLineNumber + 1, 1);
                        }
                    }
                    var maxColumn = textEditorModel.getLineMaxColumn(startLineNumber);
                    var nextLineNumber = currentBracket.range.endLineNumber;
                    var nextColumn = currentBracket.range.endColumn;
                    if (maxColumn === currentBracket.range.endColumn) {
                        nextLineNumber++;
                        nextColumn = 1;
                    }
                    if (nextLineNumber > maxLineNumber) return new _rangeJs.Range(startLineNumber, 1, maxLineNumber + 1, 1);
                    currentBracket = textEditorModel.bracketPairs.findNextBracket(new _positionJs.Position(nextLineNumber, nextColumn));
                }
                return new _rangeJs.Range(startLineNumber, 1, maxLineNumber + 1, 1);
            }
        },
        {
            key: "addDecoration",
            value: function addDecoration(range, hoverMessage) {
                var newDecorations = {
                    range: range,
                    options: {
                        description: 'goto-definition-link',
                        inlineClassName: 'goto-definition-link',
                        hoverMessage: hoverMessage
                    }
                };
                this.linkDecorations = this.editor.deltaDecorations(this.linkDecorations, [
                    newDecorations
                ]);
            }
        },
        {
            key: "removeLinkDecorations",
            value: function removeLinkDecorations() {
                if (this.linkDecorations.length > 0) this.linkDecorations = this.editor.deltaDecorations(this.linkDecorations, []);
            }
        },
        {
            key: "isEnabled",
            value: function isEnabled(mouseEvent, withKey) {
                return this.editor.hasModel() && mouseEvent.isNoneOrSingleMouseDown && mouseEvent.target.type === 6 /* CONTENT_TEXT */  && (mouseEvent.hasTriggerModifier || (withKey ? withKey.keyCodeIsTriggerKey : false)) && _modesJs.DefinitionProviderRegistry.has(this.editor.getModel());
            }
        },
        {
            key: "findDefinition",
            value: function findDefinition(position, token) {
                var model = this.editor.getModel();
                if (!model) return Promise.resolve(null);
                return _goToSymbolJs.getDefinitionsAtPosition(model, position, token);
            }
        },
        {
            key: "gotoDefinition",
            value: function gotoDefinition(position, openToSide) {
                var _this = this;
                this.editor.setPosition(position);
                return this.editor.invokeWithinContext(function(accessor) {
                    var canPeek = !openToSide && _this.editor.getOption(77 /* definitionLinkOpensInPeek */ ) && !_this.isInPeekEditor(accessor);
                    var action = new _goToCommandsJs.DefinitionAction({
                        openToSide: openToSide,
                        openInPeek: canPeek,
                        muteMessage: true
                    }, {
                        alias: '',
                        label: '',
                        id: '',
                        precondition: undefined
                    });
                    return action.run(accessor, _this.editor);
                });
            }
        },
        {
            key: "isInPeekEditor",
            value: function isInPeekEditor(accessor) {
                var contextKeyService = accessor.get(_contextkeyJs.IContextKeyService);
                return _peekViewJs.PeekContext.inPeekEditor.getValue(contextKeyService);
            }
        },
        {
            key: "dispose",
            value: function dispose() {
                this.toUnhook.dispose();
            }
        }
    ], [
        {
            key: "get",
            value: function get(editor) {
                return editor.getContribution(GotoDefinitionAtPositionEditorContribution1.ID);
            }
        }
    ]);
    return GotoDefinitionAtPositionEditorContribution1;
}();
GotoDefinitionAtPositionEditorContribution.ID = 'editor.contrib.gotodefinitionatposition';
GotoDefinitionAtPositionEditorContribution.MAX_SOURCE_PREVIEW_LINES = 8;
GotoDefinitionAtPositionEditorContribution = __decorate([
    __param(1, _resolverServiceJs.ITextModelService),
    __param(2, _modeServiceJs.IModeService)
], GotoDefinitionAtPositionEditorContribution);
_editorExtensionsJs.registerEditorContribution(GotoDefinitionAtPositionEditorContribution.ID, GotoDefinitionAtPositionEditorContribution);
_themeServiceJs.registerThemingParticipant(function(theme, collector) {
    var activeLinkForeground = theme.getColor(_colorRegistryJs.editorActiveLinkForeground);
    if (activeLinkForeground) collector.addRule(".monaco-editor .goto-definition-link { color: ".concat(activeLinkForeground, " !important; }"));
});

},{"@swc/helpers":"erO4s","../../../../base/common/async.js":"kMhSh","../../../../base/common/errors.js":"afm4i","../../../../base/common/htmlContent.js":"i3TMB","../../../../base/common/lifecycle.js":"bcbPy","../../../../base/common/types.js":"lF7Cj","./goToDefinitionAtPosition.css":"kPAgC","../../../browser/core/editorState.js":"5J2rl","../../../browser/editorExtensions.js":"dFnlo","../../../common/core/position.js":"6xP0w","../../../common/core/range.js":"VbyL8","../../../common/modes.js":"bRbY1","../../../common/services/modeService.js":"dNIX6","../../../common/services/resolverService.js":"944WH","./clickLinkGesture.js":"bX2yk","../../peekView/peekView.js":"j4XyJ","../../../../nls.js":"9djYb","../../../../platform/contextkey/common/contextkey.js":"5cjav","../../../../platform/theme/common/colorRegistry.js":"lKtxS","../../../../platform/theme/common/themeService.js":"kE7QB","../goToCommands.js":"h1pW2","../goToSymbol.js":"i2LAo","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"kPAgC":[function() {},{}],"bX2yk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ClickLinkMouseEvent", function() {
    return ClickLinkMouseEvent;
});
parcelHelpers.export(exports, "ClickLinkKeyboardEvent", function() {
    return ClickLinkKeyboardEvent;
});
parcelHelpers.export(exports, "ClickLinkOptions", function() {
    return ClickLinkOptions;
});
parcelHelpers.export(exports, "ClickLinkGesture", function() {
    return ClickLinkGesture;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _eventJs = require("../../../../base/common/event.js");
var _lifecycleJs = require("../../../../base/common/lifecycle.js");
var _platformJs = require("../../../../base/common/platform.js");
function hasModifier(e, modifier) {
    return !!e[modifier];
}
var ClickLinkMouseEvent = function ClickLinkMouseEvent(source, opts) {
    "use strict";
    _helpers.classCallCheck(this, ClickLinkMouseEvent);
    this.target = source.target;
    this.hasTriggerModifier = hasModifier(source.event, opts.triggerModifier);
    this.hasSideBySideModifier = hasModifier(source.event, opts.triggerSideBySideModifier);
    this.isNoneOrSingleMouseDown = source.event.detail <= 1;
};
var ClickLinkKeyboardEvent = function ClickLinkKeyboardEvent(source, opts) {
    "use strict";
    _helpers.classCallCheck(this, ClickLinkKeyboardEvent);
    this.keyCodeIsTriggerKey = source.keyCode === opts.triggerKey;
    this.keyCodeIsSideBySideKey = source.keyCode === opts.triggerSideBySideKey;
    this.hasTriggerModifier = hasModifier(source, opts.triggerModifier);
};
var ClickLinkOptions = /*#__PURE__*/ function() {
    "use strict";
    function ClickLinkOptions(triggerKey, triggerModifier, triggerSideBySideKey, triggerSideBySideModifier) {
        _helpers.classCallCheck(this, ClickLinkOptions);
        this.triggerKey = triggerKey;
        this.triggerModifier = triggerModifier;
        this.triggerSideBySideKey = triggerSideBySideKey;
        this.triggerSideBySideModifier = triggerSideBySideModifier;
    }
    _helpers.createClass(ClickLinkOptions, [
        {
            key: "equals",
            value: function equals(other) {
                return this.triggerKey === other.triggerKey && this.triggerModifier === other.triggerModifier && this.triggerSideBySideKey === other.triggerSideBySideKey && this.triggerSideBySideModifier === other.triggerSideBySideModifier;
            }
        }
    ]);
    return ClickLinkOptions;
}();
function createOptions(multiCursorModifier) {
    if (multiCursorModifier === 'altKey') {
        if (_platformJs.isMacintosh) return new ClickLinkOptions(57 /* Meta */ , 'metaKey', 6 /* Alt */ , 'altKey');
        return new ClickLinkOptions(5 /* Ctrl */ , 'ctrlKey', 6 /* Alt */ , 'altKey');
    }
    if (_platformJs.isMacintosh) return new ClickLinkOptions(6 /* Alt */ , 'altKey', 57 /* Meta */ , 'metaKey');
    return new ClickLinkOptions(6 /* Alt */ , 'altKey', 5 /* Ctrl */ , 'ctrlKey');
}
var ClickLinkGesture = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(ClickLinkGesture, Disposable);
    var _super = _helpers.createSuper(ClickLinkGesture);
    function ClickLinkGesture(editor) {
        _helpers.classCallCheck(this, ClickLinkGesture);
        var _this;
        _this = _super.call(this);
        _this._onMouseMoveOrRelevantKeyDown = _this._register(new _eventJs.Emitter());
        _this.onMouseMoveOrRelevantKeyDown = _this._onMouseMoveOrRelevantKeyDown.event;
        _this._onExecute = _this._register(new _eventJs.Emitter());
        _this.onExecute = _this._onExecute.event;
        _this._onCancel = _this._register(new _eventJs.Emitter());
        _this.onCancel = _this._onCancel.event;
        _this._editor = editor;
        _this._opts = createOptions(_this._editor.getOption(69 /* multiCursorModifier */ ));
        _this._lastMouseMoveEvent = null;
        _this._hasTriggerKeyOnMouseDown = false;
        _this._lineNumberOnMouseDown = 0;
        _this._register(_this._editor.onDidChangeConfiguration(function(e) {
            if (e.hasChanged(69 /* multiCursorModifier */ )) {
                var newOpts = createOptions(_this._editor.getOption(69 /* multiCursorModifier */ ));
                if (_this._opts.equals(newOpts)) return;
                _this._opts = newOpts;
                _this._lastMouseMoveEvent = null;
                _this._hasTriggerKeyOnMouseDown = false;
                _this._lineNumberOnMouseDown = 0;
                _this._onCancel.fire();
            }
        }));
        _this._register(_this._editor.onMouseMove(function(e) {
            return _this._onEditorMouseMove(new ClickLinkMouseEvent(e, _this._opts));
        }));
        _this._register(_this._editor.onMouseDown(function(e) {
            return _this._onEditorMouseDown(new ClickLinkMouseEvent(e, _this._opts));
        }));
        _this._register(_this._editor.onMouseUp(function(e) {
            return _this._onEditorMouseUp(new ClickLinkMouseEvent(e, _this._opts));
        }));
        _this._register(_this._editor.onKeyDown(function(e) {
            return _this._onEditorKeyDown(new ClickLinkKeyboardEvent(e, _this._opts));
        }));
        _this._register(_this._editor.onKeyUp(function(e) {
            return _this._onEditorKeyUp(new ClickLinkKeyboardEvent(e, _this._opts));
        }));
        _this._register(_this._editor.onMouseDrag(function() {
            return _this._resetHandler();
        }));
        _this._register(_this._editor.onDidChangeCursorSelection(function(e) {
            return _this._onDidChangeCursorSelection(e);
        }));
        _this._register(_this._editor.onDidChangeModel(function(e) {
            return _this._resetHandler();
        }));
        _this._register(_this._editor.onDidChangeModelContent(function() {
            return _this._resetHandler();
        }));
        _this._register(_this._editor.onDidScrollChange(function(e) {
            if (e.scrollTopChanged || e.scrollLeftChanged) _this._resetHandler();
        }));
        return _this;
    }
    _helpers.createClass(ClickLinkGesture, [
        {
            key: "_onDidChangeCursorSelection",
            value: function _onDidChangeCursorSelection(e) {
                if (e.selection && e.selection.startColumn !== e.selection.endColumn) this._resetHandler(); // immediately stop this feature if the user starts to select (https://github.com/microsoft/vscode/issues/7827)
            }
        },
        {
            key: "_onEditorMouseMove",
            value: function _onEditorMouseMove(mouseEvent) {
                this._lastMouseMoveEvent = mouseEvent;
                this._onMouseMoveOrRelevantKeyDown.fire([
                    mouseEvent,
                    null
                ]);
            }
        },
        {
            key: "_onEditorMouseDown",
            value: function _onEditorMouseDown(mouseEvent) {
                // We need to record if we had the trigger key on mouse down because someone might select something in the editor
                // holding the mouse down and then while mouse is down start to press Ctrl/Cmd to start a copy operation and then
                // release the mouse button without wanting to do the navigation.
                // With this flag we prevent goto definition if the mouse was down before the trigger key was pressed.
                this._hasTriggerKeyOnMouseDown = mouseEvent.hasTriggerModifier;
                this._lineNumberOnMouseDown = mouseEvent.target.position ? mouseEvent.target.position.lineNumber : 0;
            }
        },
        {
            key: "_onEditorMouseUp",
            value: function _onEditorMouseUp(mouseEvent) {
                var currentLineNumber = mouseEvent.target.position ? mouseEvent.target.position.lineNumber : 0;
                if (this._hasTriggerKeyOnMouseDown && this._lineNumberOnMouseDown && this._lineNumberOnMouseDown === currentLineNumber) this._onExecute.fire(mouseEvent);
            }
        },
        {
            key: "_onEditorKeyDown",
            value: function _onEditorKeyDown(e) {
                if (this._lastMouseMoveEvent && (e.keyCodeIsTriggerKey // User just pressed Ctrl/Cmd (normal goto definition)
                 || e.keyCodeIsSideBySideKey && e.hasTriggerModifier // User pressed Ctrl/Cmd+Alt (goto definition to the side)
                )) this._onMouseMoveOrRelevantKeyDown.fire([
                    this._lastMouseMoveEvent,
                    e
                ]);
                else if (e.hasTriggerModifier) this._onCancel.fire(); // remove decorations if user holds another key with ctrl/cmd to prevent accident goto declaration
            }
        },
        {
            key: "_onEditorKeyUp",
            value: function _onEditorKeyUp(e) {
                if (e.keyCodeIsTriggerKey) this._onCancel.fire();
            }
        },
        {
            key: "_resetHandler",
            value: function _resetHandler() {
                this._lastMouseMoveEvent = null;
                this._hasTriggerKeyOnMouseDown = false;
                this._onCancel.fire();
            }
        }
    ]);
    return ClickLinkGesture;
}(_lifecycleJs.Disposable);

},{"@swc/helpers":"erO4s","../../../../base/common/event.js":"9IBcK","../../../../base/common/lifecycle.js":"bcbPy","../../../../base/common/platform.js":"8pohV","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"j4XyJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "IPeekViewService", function() {
    return IPeekViewService;
});
parcelHelpers.export(exports, "PeekContext", function() {
    return PeekContext;
});
parcelHelpers.export(exports, "getOuterEditor", function() {
    return getOuterEditor;
});
parcelHelpers.export(exports, "PeekViewWidget", function() {
    return PeekViewWidget;
});
parcelHelpers.export(exports, "peekViewTitleBackground", function() {
    return peekViewTitleBackground;
});
parcelHelpers.export(exports, "peekViewTitleForeground", function() {
    return peekViewTitleForeground;
});
parcelHelpers.export(exports, "peekViewTitleInfoForeground", function() {
    return peekViewTitleInfoForeground;
});
parcelHelpers.export(exports, "peekViewBorder", function() {
    return peekViewBorder;
});
parcelHelpers.export(exports, "peekViewResultsBackground", function() {
    return peekViewResultsBackground;
});
parcelHelpers.export(exports, "peekViewResultsMatchForeground", function() {
    return peekViewResultsMatchForeground;
});
parcelHelpers.export(exports, "peekViewResultsFileForeground", function() {
    return peekViewResultsFileForeground;
});
parcelHelpers.export(exports, "peekViewResultsSelectionBackground", function() {
    return peekViewResultsSelectionBackground;
});
parcelHelpers.export(exports, "peekViewResultsSelectionForeground", function() {
    return peekViewResultsSelectionForeground;
});
parcelHelpers.export(exports, "peekViewEditorBackground", function() {
    return peekViewEditorBackground;
});
parcelHelpers.export(exports, "peekViewEditorGutterBackground", function() {
    return peekViewEditorGutterBackground;
});
parcelHelpers.export(exports, "peekViewResultsMatchHighlight", function() {
    return peekViewResultsMatchHighlight;
});
parcelHelpers.export(exports, "peekViewEditorMatchHighlight", function() {
    return peekViewEditorMatchHighlight;
});
parcelHelpers.export(exports, "peekViewEditorMatchHighlightBorder", function() {
    return peekViewEditorMatchHighlightBorder;
});
var _helpers = require("@swc/helpers");
var _domJs = require("../../../base/browser/dom.js");
var _actionbarJs = require("../../../base/browser/ui/actionbar/actionbar.js");
var _actionsJs = require("../../../base/common/actions.js");
var _codiconsJs = require("../../../base/common/codicons.js");
var _colorJs = require("../../../base/common/color.js");
var _eventJs = require("../../../base/common/event.js");
var _objectsJs = require("../../../base/common/objects.js");
var _peekViewWidgetCss = require("./media/peekViewWidget.css");
var _editorExtensionsJs = require("../../browser/editorExtensions.js");
var _codeEditorServiceJs = require("../../browser/services/codeEditorService.js");
var _embeddedCodeEditorWidgetJs = require("../../browser/widget/embeddedCodeEditorWidget.js");
var _zoneWidgetJs = require("../zoneWidget/zoneWidget.js");
var _nlsJs = require("../../../nls.js");
var _menuEntryActionViewItemJs = require("../../../platform/actions/browser/menuEntryActionViewItem.js");
var _contextkeyJs = require("../../../platform/contextkey/common/contextkey.js");
var _extensionsJs = require("../../../platform/instantiation/common/extensions.js");
var _instantiationJs = require("../../../platform/instantiation/common/instantiation.js");
var _colorRegistryJs = require("../../../platform/theme/common/colorRegistry.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var IPeekViewService = _instantiationJs.createDecorator('IPeekViewService');
_extensionsJs.registerSingleton(IPeekViewService, /*#__PURE__*/ function() {
    "use strict";
    function _class() {
        _helpers.classCallCheck(this, _class);
        this._widgets = new Map();
    }
    _helpers.createClass(_class, [
        {
            key: "addExclusiveWidget",
            value: function addExclusiveWidget(editor, widget) {
                var _this = this;
                var existing = this._widgets.get(editor);
                if (existing) {
                    existing.listener.dispose();
                    existing.widget.dispose();
                }
                var remove = function() {
                    var data = _this._widgets.get(editor);
                    if (data && data.widget === widget) {
                        data.listener.dispose();
                        _this._widgets.delete(editor);
                    }
                };
                this._widgets.set(editor, {
                    widget: widget,
                    listener: widget.onDidClose(remove)
                });
            }
        }
    ]);
    return _class;
}());
var PeekContext;
(function(PeekContext1) {
    PeekContext1.inPeekEditor = new _contextkeyJs.RawContextKey('inReferenceSearchEditor', true, _nlsJs.localize('inReferenceSearchEditor', "Whether the current code editor is embedded inside peek"));
    PeekContext1.notInPeekEditor = PeekContext1.inPeekEditor.toNegated();
})(PeekContext || (PeekContext = {}));
var PeekContextController = /*#__PURE__*/ function() {
    "use strict";
    function PeekContextController1(editor, contextKeyService) {
        _helpers.classCallCheck(this, PeekContextController1);
        if (editor instanceof _embeddedCodeEditorWidgetJs.EmbeddedCodeEditorWidget) PeekContext.inPeekEditor.bindTo(contextKeyService);
    }
    _helpers.createClass(PeekContextController1, [
        {
            key: "dispose",
            value: function dispose() {}
        }
    ]);
    return PeekContextController1;
}();
PeekContextController.ID = 'editor.contrib.referenceController';
PeekContextController = __decorate([
    __param(1, _contextkeyJs.IContextKeyService)
], PeekContextController);
_editorExtensionsJs.registerEditorContribution(PeekContextController.ID, PeekContextController);
function getOuterEditor(accessor) {
    var editor = accessor.get(_codeEditorServiceJs.ICodeEditorService).getFocusedCodeEditor();
    if (editor instanceof _embeddedCodeEditorWidgetJs.EmbeddedCodeEditorWidget) return editor.getParentEditor();
    return editor;
}
var defaultOptions = {
    headerBackgroundColor: _colorJs.Color.white,
    primaryHeadingColor: _colorJs.Color.fromHex('#333333'),
    secondaryHeadingColor: _colorJs.Color.fromHex('#6c6c6cb3')
};
var PeekViewWidget = /*#__PURE__*/ function(ZoneWidget) {
    "use strict";
    _helpers.inherits(PeekViewWidget1, ZoneWidget);
    var _super = _helpers.createSuper(PeekViewWidget1);
    function PeekViewWidget1(editor, options, instantiationService) {
        _helpers.classCallCheck(this, PeekViewWidget1);
        var _this;
        _this = _super.call(this, editor, options);
        _this.instantiationService = instantiationService;
        _this._onDidClose = new _eventJs.Emitter();
        _this.onDidClose = _this._onDidClose.event;
        _objectsJs.mixin(_this.options, defaultOptions, false);
        return _this;
    }
    _helpers.createClass(PeekViewWidget1, [
        {
            key: "dispose",
            value: function dispose() {
                if (!this.disposed) {
                    this.disposed = true; // prevent consumers who dispose on onDidClose from looping
                    _helpers.get(_helpers.getPrototypeOf(PeekViewWidget1.prototype), "dispose", this).call(this);
                    this._onDidClose.fire(this);
                }
            }
        },
        {
            key: "style",
            value: function style(styles) {
                var options = this.options;
                if (styles.headerBackgroundColor) options.headerBackgroundColor = styles.headerBackgroundColor;
                if (styles.primaryHeadingColor) options.primaryHeadingColor = styles.primaryHeadingColor;
                if (styles.secondaryHeadingColor) options.secondaryHeadingColor = styles.secondaryHeadingColor;
                _helpers.get(_helpers.getPrototypeOf(PeekViewWidget1.prototype), "style", this).call(this, styles);
            }
        },
        {
            key: "_applyStyles",
            value: function _applyStyles() {
                _helpers.get(_helpers.getPrototypeOf(PeekViewWidget1.prototype), "_applyStyles", this).call(this);
                var options = this.options;
                if (this._headElement && options.headerBackgroundColor) this._headElement.style.backgroundColor = options.headerBackgroundColor.toString();
                if (this._primaryHeading && options.primaryHeadingColor) this._primaryHeading.style.color = options.primaryHeadingColor.toString();
                if (this._secondaryHeading && options.secondaryHeadingColor) this._secondaryHeading.style.color = options.secondaryHeadingColor.toString();
                if (this._bodyElement && options.frameColor) this._bodyElement.style.borderColor = options.frameColor.toString();
            }
        },
        {
            key: "_fillContainer",
            value: function _fillContainer(container) {
                this.setCssClass('peekview-widget');
                this._headElement = _domJs.$('.head');
                this._bodyElement = _domJs.$('.body');
                this._fillHead(this._headElement);
                this._fillBody(this._bodyElement);
                container.appendChild(this._headElement);
                container.appendChild(this._bodyElement);
            }
        },
        {
            key: "_fillHead",
            value: function _fillHead(container, noCloseAction) {
                var _this = this;
                var titleElement = _domJs.$('.peekview-title');
                if (this.options.supportOnTitleClick) {
                    var _this1 = this;
                    titleElement.classList.add('clickable');
                    _domJs.addStandardDisposableListener(titleElement, 'click', function(event) {
                        return _this1._onTitleClick(event);
                    });
                }
                _domJs.append(this._headElement, titleElement);
                this._fillTitleIcon(titleElement);
                this._primaryHeading = _domJs.$('span.filename');
                this._secondaryHeading = _domJs.$('span.dirname');
                this._metaHeading = _domJs.$('span.meta');
                _domJs.append(titleElement, this._primaryHeading, this._secondaryHeading, this._metaHeading);
                var actionsContainer = _domJs.$('.peekview-actions');
                _domJs.append(this._headElement, actionsContainer);
                var actionBarOptions = this._getActionBarOptions();
                this._actionbarWidget = new _actionbarJs.ActionBar(actionsContainer, actionBarOptions);
                this._disposables.add(this._actionbarWidget);
                if (!noCloseAction) this._actionbarWidget.push(new _actionsJs.Action('peekview.close', _nlsJs.localize('label.close', "Close"), _codiconsJs.Codicon.close.classNames, true, function() {
                    _this.dispose();
                    return Promise.resolve();
                }), {
                    label: false,
                    icon: true
                });
            }
        },
        {
            key: "_fillTitleIcon",
            value: function _fillTitleIcon(container) {}
        },
        {
            key: "_getActionBarOptions",
            value: function _getActionBarOptions() {
                return {
                    actionViewItemProvider: _menuEntryActionViewItemJs.createActionViewItem.bind(undefined, this.instantiationService),
                    orientation: 0 /* HORIZONTAL */ 
                };
            }
        },
        {
            key: "_onTitleClick",
            value: function _onTitleClick(event) {
            // implement me if supportOnTitleClick option is set
            }
        },
        {
            key: "setTitle",
            value: function setTitle(primaryHeading, secondaryHeading) {
                if (this._primaryHeading && this._secondaryHeading) {
                    this._primaryHeading.innerText = primaryHeading;
                    this._primaryHeading.setAttribute('title', primaryHeading);
                    if (secondaryHeading) this._secondaryHeading.innerText = secondaryHeading;
                    else _domJs.clearNode(this._secondaryHeading);
                }
            }
        },
        {
            key: "setMetaTitle",
            value: function setMetaTitle(value) {
                if (this._metaHeading) {
                    if (value) {
                        this._metaHeading.innerText = value;
                        _domJs.show(this._metaHeading);
                    } else _domJs.hide(this._metaHeading);
                }
            }
        },
        {
            key: "_doLayout",
            value: function _doLayout(heightInPixel, widthInPixel) {
                if (!this._isShowing && heightInPixel < 0) {
                    // Looks like the view zone got folded away!
                    this.dispose();
                    return;
                }
                var headHeight = Math.ceil(this.editor.getOption(58 /* lineHeight */ ) * 1.2);
                var bodyHeight = Math.round(heightInPixel - (headHeight + 2 /* the border-top/bottom width*/ ));
                this._doLayoutHead(headHeight, widthInPixel);
                this._doLayoutBody(bodyHeight, widthInPixel);
            }
        },
        {
            key: "_doLayoutHead",
            value: function _doLayoutHead(heightInPixel, widthInPixel) {
                if (this._headElement) {
                    this._headElement.style.height = "".concat(heightInPixel, "px");
                    this._headElement.style.lineHeight = this._headElement.style.height;
                }
            }
        },
        {
            key: "_doLayoutBody",
            value: function _doLayoutBody(heightInPixel, widthInPixel) {
                if (this._bodyElement) this._bodyElement.style.height = "".concat(heightInPixel, "px");
            }
        }
    ]);
    return PeekViewWidget1;
}(_zoneWidgetJs.ZoneWidget);
PeekViewWidget = __decorate([
    __param(2, _instantiationJs.IInstantiationService)
], PeekViewWidget);
var peekViewTitleBackground = _colorRegistryJs.registerColor('peekViewTitle.background', {
    dark: _colorRegistryJs.transparent(_colorRegistryJs.editorInfoForeground, .1),
    light: _colorRegistryJs.transparent(_colorRegistryJs.editorInfoForeground, .1),
    hc: null
}, _nlsJs.localize('peekViewTitleBackground', 'Background color of the peek view title area.'));
var peekViewTitleForeground = _colorRegistryJs.registerColor('peekViewTitleLabel.foreground', {
    dark: _colorJs.Color.white,
    light: _colorJs.Color.black,
    hc: _colorJs.Color.white
}, _nlsJs.localize('peekViewTitleForeground', 'Color of the peek view title.'));
var peekViewTitleInfoForeground = _colorRegistryJs.registerColor('peekViewTitleDescription.foreground', {
    dark: '#ccccccb3',
    light: '#616161',
    hc: '#FFFFFF99'
}, _nlsJs.localize('peekViewTitleInfoForeground', 'Color of the peek view title info.'));
var peekViewBorder = _colorRegistryJs.registerColor('peekView.border', {
    dark: _colorRegistryJs.editorInfoForeground,
    light: _colorRegistryJs.editorInfoForeground,
    hc: _colorRegistryJs.contrastBorder
}, _nlsJs.localize('peekViewBorder', 'Color of the peek view borders and arrow.'));
var peekViewResultsBackground = _colorRegistryJs.registerColor('peekViewResult.background', {
    dark: '#252526',
    light: '#F3F3F3',
    hc: _colorJs.Color.black
}, _nlsJs.localize('peekViewResultsBackground', 'Background color of the peek view result list.'));
var peekViewResultsMatchForeground = _colorRegistryJs.registerColor('peekViewResult.lineForeground', {
    dark: '#bbbbbb',
    light: '#646465',
    hc: _colorJs.Color.white
}, _nlsJs.localize('peekViewResultsMatchForeground', 'Foreground color for line nodes in the peek view result list.'));
var peekViewResultsFileForeground = _colorRegistryJs.registerColor('peekViewResult.fileForeground', {
    dark: _colorJs.Color.white,
    light: '#1E1E1E',
    hc: _colorJs.Color.white
}, _nlsJs.localize('peekViewResultsFileForeground', 'Foreground color for file nodes in the peek view result list.'));
var peekViewResultsSelectionBackground = _colorRegistryJs.registerColor('peekViewResult.selectionBackground', {
    dark: '#3399ff33',
    light: '#3399ff33',
    hc: null
}, _nlsJs.localize('peekViewResultsSelectionBackground', 'Background color of the selected entry in the peek view result list.'));
var peekViewResultsSelectionForeground = _colorRegistryJs.registerColor('peekViewResult.selectionForeground', {
    dark: _colorJs.Color.white,
    light: '#6C6C6C',
    hc: _colorJs.Color.white
}, _nlsJs.localize('peekViewResultsSelectionForeground', 'Foreground color of the selected entry in the peek view result list.'));
var peekViewEditorBackground = _colorRegistryJs.registerColor('peekViewEditor.background', {
    dark: '#001F33',
    light: '#F2F8FC',
    hc: _colorJs.Color.black
}, _nlsJs.localize('peekViewEditorBackground', 'Background color of the peek view editor.'));
var peekViewEditorGutterBackground = _colorRegistryJs.registerColor('peekViewEditorGutter.background', {
    dark: peekViewEditorBackground,
    light: peekViewEditorBackground,
    hc: peekViewEditorBackground
}, _nlsJs.localize('peekViewEditorGutterBackground', 'Background color of the gutter in the peek view editor.'));
var peekViewResultsMatchHighlight = _colorRegistryJs.registerColor('peekViewResult.matchHighlightBackground', {
    dark: '#ea5c004d',
    light: '#ea5c004d',
    hc: null
}, _nlsJs.localize('peekViewResultsMatchHighlight', 'Match highlight color in the peek view result list.'));
var peekViewEditorMatchHighlight = _colorRegistryJs.registerColor('peekViewEditor.matchHighlightBackground', {
    dark: '#ff8f0099',
    light: '#f5d802de',
    hc: null
}, _nlsJs.localize('peekViewEditorMatchHighlight', 'Match highlight color in the peek view editor.'));
var peekViewEditorMatchHighlightBorder = _colorRegistryJs.registerColor('peekViewEditor.matchHighlightBorder', {
    dark: null,
    light: null,
    hc: _colorRegistryJs.activeContrastBorder
}, _nlsJs.localize('peekViewEditorMatchHighlightBorder', 'Match highlight border in the peek view editor.'));

},{"@swc/helpers":"erO4s","../../../base/browser/dom.js":"bxmlc","../../../base/browser/ui/actionbar/actionbar.js":"1SkD3","../../../base/common/actions.js":"5c0wW","../../../base/common/codicons.js":"j24JC","../../../base/common/color.js":"2jKDp","../../../base/common/event.js":"9IBcK","../../../base/common/objects.js":"bKKoD","./media/peekViewWidget.css":"htOxF","../../browser/editorExtensions.js":"dFnlo","../../browser/services/codeEditorService.js":"izkTN","../../browser/widget/embeddedCodeEditorWidget.js":"e432u","../zoneWidget/zoneWidget.js":"d5ooM","../../../nls.js":"9djYb","../../../platform/actions/browser/menuEntryActionViewItem.js":"jm3Jq","../../../platform/contextkey/common/contextkey.js":"5cjav","../../../platform/instantiation/common/extensions.js":"6Iedq","../../../platform/instantiation/common/instantiation.js":"9ABZB","../../../platform/theme/common/colorRegistry.js":"lKtxS","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"htOxF":[function() {},{}],"e432u":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EmbeddedCodeEditorWidget", function() {
    return EmbeddedCodeEditorWidget;
});
var _helpers = require("@swc/helpers");
var _objectsJs = require("../../../base/common/objects.js");
var _codeEditorServiceJs = require("../services/codeEditorService.js");
var _codeEditorWidgetJs = require("./codeEditorWidget.js");
var _commandsJs = require("../../../platform/commands/common/commands.js");
var _contextkeyJs = require("../../../platform/contextkey/common/contextkey.js");
var _instantiationJs = require("../../../platform/instantiation/common/instantiation.js");
var _notificationJs = require("../../../platform/notification/common/notification.js");
var _themeServiceJs = require("../../../platform/theme/common/themeService.js");
var _accessibilityJs = require("../../../platform/accessibility/common/accessibility.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var EmbeddedCodeEditorWidget = /*#__PURE__*/ function(CodeEditorWidget) {
    "use strict";
    _helpers.inherits(EmbeddedCodeEditorWidget1, CodeEditorWidget);
    var _super = _helpers.createSuper(EmbeddedCodeEditorWidget1);
    function EmbeddedCodeEditorWidget1(domElement, options, parentEditor, instantiationService, codeEditorService, commandService, contextKeyService, themeService, notificationService, accessibilityService) {
        _helpers.classCallCheck(this, EmbeddedCodeEditorWidget1);
        var _this;
        _this = _super.call(this, domElement, Object.assign(Object.assign({}, parentEditor.getRawOptions()), {
            overflowWidgetsDomNode: parentEditor.getOverflowWidgetsDomNode()
        }), {}, instantiationService, codeEditorService, commandService, contextKeyService, themeService, notificationService, accessibilityService);
        _this._parentEditor = parentEditor;
        _this._overwriteOptions = options;
        // Overwrite parent's options
        _helpers.get((_helpers.assertThisInitialized(_this), _helpers.getPrototypeOf(EmbeddedCodeEditorWidget1.prototype)), "updateOptions", _this).call(_this, _this._overwriteOptions);
        _this._register(parentEditor.onDidChangeConfiguration(function(e) {
            return _this._onParentConfigurationChanged(e);
        }));
        return _this;
    }
    _helpers.createClass(EmbeddedCodeEditorWidget1, [
        {
            key: "getParentEditor",
            value: function getParentEditor() {
                return this._parentEditor;
            }
        },
        {
            key: "_onParentConfigurationChanged",
            value: function _onParentConfigurationChanged(e) {
                _helpers.get(_helpers.getPrototypeOf(EmbeddedCodeEditorWidget1.prototype), "updateOptions", this).call(this, this._parentEditor.getRawOptions());
                _helpers.get(_helpers.getPrototypeOf(EmbeddedCodeEditorWidget1.prototype), "updateOptions", this).call(this, this._overwriteOptions);
            }
        },
        {
            key: "updateOptions",
            value: function updateOptions(newOptions) {
                _objectsJs.mixin(this._overwriteOptions, newOptions, true);
                _helpers.get(_helpers.getPrototypeOf(EmbeddedCodeEditorWidget1.prototype), "updateOptions", this).call(this, this._overwriteOptions);
            }
        }
    ]);
    return EmbeddedCodeEditorWidget1;
}(_codeEditorWidgetJs.CodeEditorWidget);
EmbeddedCodeEditorWidget = __decorate([
    __param(3, _instantiationJs.IInstantiationService),
    __param(4, _codeEditorServiceJs.ICodeEditorService),
    __param(5, _commandsJs.ICommandService),
    __param(6, _contextkeyJs.IContextKeyService),
    __param(7, _themeServiceJs.IThemeService),
    __param(8, _notificationJs.INotificationService),
    __param(9, _accessibilityJs.IAccessibilityService)
], EmbeddedCodeEditorWidget);

},{"@swc/helpers":"erO4s","../../../base/common/objects.js":"bKKoD","../services/codeEditorService.js":"izkTN","./codeEditorWidget.js":"lVDO3","../../../platform/commands/common/commands.js":"eeuTC","../../../platform/contextkey/common/contextkey.js":"5cjav","../../../platform/instantiation/common/instantiation.js":"9ABZB","../../../platform/notification/common/notification.js":"baqho","../../../platform/theme/common/themeService.js":"kE7QB","../../../platform/accessibility/common/accessibility.js":"26z4P","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"d5ooM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ViewZoneDelegate", function() {
    return ViewZoneDelegate;
});
parcelHelpers.export(exports, "OverlayWidgetDelegate", function() {
    return OverlayWidgetDelegate;
});
parcelHelpers.export(exports, "ZoneWidget", function() {
    return ZoneWidget;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _domJs = require("../../../base/browser/dom.js");
var _sashJs = require("../../../base/browser/ui/sash/sash.js");
var _colorJs = require("../../../base/common/color.js");
var _idGeneratorJs = require("../../../base/common/idGenerator.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _objectsJs = require("../../../base/common/objects.js");
var _zoneWidgetCss = require("./zoneWidget.css");
var _rangeJs = require("../../common/core/range.js");
var _textModelJs = require("../../common/model/textModel.js");
var defaultColor = new _colorJs.Color(new _colorJs.RGBA(0, 122, 204));
var defaultOptions = {
    showArrow: true,
    showFrame: true,
    className: '',
    frameColor: defaultColor,
    arrowColor: defaultColor,
    keepEditorSelection: false
};
var WIDGET_ID = 'vs.editor.contrib.zoneWidget';
var ViewZoneDelegate = /*#__PURE__*/ function() {
    "use strict";
    function ViewZoneDelegate(domNode, afterLineNumber, afterColumn, heightInLines, onDomNodeTop, onComputedHeight) {
        _helpers.classCallCheck(this, ViewZoneDelegate);
        this.id = ''; // A valid zone id should be greater than 0
        this.domNode = domNode;
        this.afterLineNumber = afterLineNumber;
        this.afterColumn = afterColumn;
        this.heightInLines = heightInLines;
        this._onDomNodeTop = onDomNodeTop;
        this._onComputedHeight = onComputedHeight;
    }
    _helpers.createClass(ViewZoneDelegate, [
        {
            key: "onDomNodeTop",
            value: function onDomNodeTop(top) {
                this._onDomNodeTop(top);
            }
        },
        {
            key: "onComputedHeight",
            value: function onComputedHeight(height) {
                this._onComputedHeight(height);
            }
        }
    ]);
    return ViewZoneDelegate;
}();
var OverlayWidgetDelegate = /*#__PURE__*/ function() {
    "use strict";
    function OverlayWidgetDelegate(id, domNode) {
        _helpers.classCallCheck(this, OverlayWidgetDelegate);
        this._id = id;
        this._domNode = domNode;
    }
    _helpers.createClass(OverlayWidgetDelegate, [
        {
            key: "getId",
            value: function getId() {
                return this._id;
            }
        },
        {
            key: "getDomNode",
            value: function getDomNode() {
                return this._domNode;
            }
        },
        {
            key: "getPosition",
            value: function getPosition() {
                return null;
            }
        }
    ]);
    return OverlayWidgetDelegate;
}();
var Arrow = /*#__PURE__*/ function() {
    "use strict";
    function Arrow(_editor) {
        _helpers.classCallCheck(this, Arrow);
        this._editor = _editor;
        this._ruleName = Arrow._IdGenerator.nextId();
        this._decorations = [];
        this._color = null;
        this._height = -1;
    }
    _helpers.createClass(Arrow, [
        {
            key: "dispose",
            value: function dispose() {
                this.hide();
                _domJs.removeCSSRulesContainingSelector(this._ruleName);
            }
        },
        {
            key: "color",
            set: function set(value) {
                if (this._color !== value) {
                    this._color = value;
                    this._updateStyle();
                }
            }
        },
        {
            key: "height",
            set: function set(value) {
                if (this._height !== value) {
                    this._height = value;
                    this._updateStyle();
                }
            }
        },
        {
            key: "_updateStyle",
            value: function _updateStyle() {
                _domJs.removeCSSRulesContainingSelector(this._ruleName);
                _domJs.createCSSRule(".monaco-editor ".concat(this._ruleName), "border-style: solid; border-color: transparent; border-bottom-color: ".concat(this._color, "; border-width: ").concat(this._height, "px; bottom: -").concat(this._height, "px; margin-left: -").concat(this._height, "px; "));
            }
        },
        {
            key: "show",
            value: function show(where) {
                if (where.column === 1) // the arrow isn't pretty at column 1 and we need to push it out a little
                where = {
                    lineNumber: where.lineNumber,
                    column: 2
                };
                this._decorations = this._editor.deltaDecorations(this._decorations, [
                    {
                        range: _rangeJs.Range.fromPositions(where),
                        options: {
                            description: 'zone-widget-arrow',
                            className: this._ruleName,
                            stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ 
                        }
                    }
                ]);
            }
        },
        {
            key: "hide",
            value: function hide() {
                this._editor.deltaDecorations(this._decorations, []);
            }
        }
    ]);
    return Arrow;
}();
Arrow._IdGenerator = new _idGeneratorJs.IdGenerator('.arrow-decoration-');
var ZoneWidget = /*#__PURE__*/ function() {
    "use strict";
    function ZoneWidget(editor) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var _this = this;
        _helpers.classCallCheck(this, ZoneWidget);
        this._arrow = null;
        this._overlayWidget = null;
        this._resizeSash = null;
        this._positionMarkerId = [];
        this._viewZone = null;
        this._disposables = new _lifecycleJs.DisposableStore();
        this.container = null;
        this._isShowing = false;
        this.editor = editor;
        this.options = _objectsJs.deepClone(options);
        _objectsJs.mixin(this.options, defaultOptions, false);
        this.domNode = document.createElement('div');
        if (!this.options.isAccessible) {
            this.domNode.setAttribute('aria-hidden', 'true');
            this.domNode.setAttribute('role', 'presentation');
        }
        this._disposables.add(this.editor.onDidLayoutChange(function(info) {
            var width = _this._getWidth(info);
            _this.domNode.style.width = width + 'px';
            _this.domNode.style.left = _this._getLeft(info) + 'px';
            _this._onWidth(width);
        }));
    }
    _helpers.createClass(ZoneWidget, [
        {
            key: "dispose",
            value: function dispose() {
                var _this = this;
                if (this._overlayWidget) {
                    this.editor.removeOverlayWidget(this._overlayWidget);
                    this._overlayWidget = null;
                }
                if (this._viewZone) this.editor.changeViewZones(function(accessor) {
                    if (_this._viewZone) accessor.removeZone(_this._viewZone.id);
                    _this._viewZone = null;
                });
                this.editor.deltaDecorations(this._positionMarkerId, []);
                this._positionMarkerId = [];
                this._disposables.dispose();
            }
        },
        {
            key: "create",
            value: function create() {
                this.domNode.classList.add('zone-widget');
                if (this.options.className) this.domNode.classList.add(this.options.className);
                this.container = document.createElement('div');
                this.container.classList.add('zone-widget-container');
                this.domNode.appendChild(this.container);
                if (this.options.showArrow) {
                    this._arrow = new Arrow(this.editor);
                    this._disposables.add(this._arrow);
                }
                this._fillContainer(this.container);
                this._initSash();
                this._applyStyles();
            }
        },
        {
            key: "style",
            value: function style(styles) {
                if (styles.frameColor) this.options.frameColor = styles.frameColor;
                if (styles.arrowColor) this.options.arrowColor = styles.arrowColor;
                this._applyStyles();
            }
        },
        {
            key: "_applyStyles",
            value: function _applyStyles() {
                if (this.container && this.options.frameColor) {
                    var frameColor = this.options.frameColor.toString();
                    this.container.style.borderTopColor = frameColor;
                    this.container.style.borderBottomColor = frameColor;
                }
                if (this._arrow && this.options.arrowColor) {
                    var arrowColor = this.options.arrowColor.toString();
                    this._arrow.color = arrowColor;
                }
            }
        },
        {
            key: "_getWidth",
            value: function _getWidth(info) {
                return info.width - info.minimap.minimapWidth - info.verticalScrollbarWidth;
            }
        },
        {
            key: "_getLeft",
            value: function _getLeft(info) {
                // If minimap is to the left, we move beyond it
                if (info.minimap.minimapWidth > 0 && info.minimap.minimapLeft === 0) return info.minimap.minimapWidth;
                return 0;
            }
        },
        {
            key: "_onViewZoneTop",
            value: function _onViewZoneTop(top) {
                this.domNode.style.top = top + 'px';
            }
        },
        {
            key: "_onViewZoneHeight",
            value: function _onViewZoneHeight(height) {
                this.domNode.style.height = "".concat(height, "px");
                if (this.container) {
                    var containerHeight = height - this._decoratingElementsHeight();
                    this.container.style.height = "".concat(containerHeight, "px");
                    var layoutInfo = this.editor.getLayoutInfo();
                    this._doLayout(containerHeight, this._getWidth(layoutInfo));
                }
                if (this._resizeSash) this._resizeSash.layout();
            }
        },
        {
            key: "position",
            get: function get() {
                var __positionMarkerId = _helpers.slicedToArray(this._positionMarkerId, 1), id = __positionMarkerId[0];
                if (!id) return undefined;
                var model = this.editor.getModel();
                if (!model) return undefined;
                var range = model.getDecorationRange(id);
                if (!range) return undefined;
                return range.getStartPosition();
            }
        },
        {
            key: "show",
            value: function show(rangeOrPos, heightInLines) {
                var range = _rangeJs.Range.isIRange(rangeOrPos) ? _rangeJs.Range.lift(rangeOrPos) : _rangeJs.Range.fromPositions(rangeOrPos);
                this._isShowing = true;
                this._showImpl(range, heightInLines);
                this._isShowing = false;
                this._positionMarkerId = this.editor.deltaDecorations(this._positionMarkerId, [
                    {
                        range: range,
                        options: _textModelJs.ModelDecorationOptions.EMPTY
                    }
                ]);
            }
        },
        {
            key: "hide",
            value: function hide() {
                if (this._viewZone) {
                    var _this = this;
                    this.editor.changeViewZones(function(accessor) {
                        if (_this._viewZone) accessor.removeZone(_this._viewZone.id);
                    });
                    this._viewZone = null;
                }
                if (this._overlayWidget) {
                    this.editor.removeOverlayWidget(this._overlayWidget);
                    this._overlayWidget = null;
                }
                if (this._arrow) this._arrow.hide();
            }
        },
        {
            key: "_decoratingElementsHeight",
            value: function _decoratingElementsHeight() {
                var lineHeight = this.editor.getOption(58 /* lineHeight */ );
                var result = 0;
                if (this.options.showArrow) {
                    var arrowHeight = Math.round(lineHeight / 3);
                    result += 2 * arrowHeight;
                }
                if (this.options.showFrame) {
                    var frameThickness = Math.round(lineHeight / 9);
                    result += 2 * frameThickness;
                }
                return result;
            }
        },
        {
            key: "_showImpl",
            value: function _showImpl(where, heightInLines) {
                var _this = this;
                var position = where.getStartPosition();
                var layoutInfo = this.editor.getLayoutInfo();
                var width = this._getWidth(layoutInfo);
                this.domNode.style.width = "".concat(width, "px");
                this.domNode.style.left = this._getLeft(layoutInfo) + 'px';
                // Render the widget as zone (rendering) and widget (lifecycle)
                var viewZoneDomNode = document.createElement('div');
                viewZoneDomNode.style.overflow = 'hidden';
                var lineHeight = this.editor.getOption(58 /* lineHeight */ );
                // adjust heightInLines to viewport
                var maxHeightInLines = Math.max(12, this.editor.getLayoutInfo().height / lineHeight * 0.8);
                heightInLines = Math.min(heightInLines, maxHeightInLines);
                var arrowHeight = 0;
                var frameThickness = 0;
                // Render the arrow one 1/3 of an editor line height
                if (this._arrow && this.options.showArrow) {
                    arrowHeight = Math.round(lineHeight / 3);
                    this._arrow.height = arrowHeight;
                    this._arrow.show(position);
                }
                // Render the frame as 1/9 of an editor line height
                if (this.options.showFrame) frameThickness = Math.round(lineHeight / 9);
                // insert zone widget
                this.editor.changeViewZones(function(accessor) {
                    var _this1 = _this;
                    if (_this._viewZone) accessor.removeZone(_this._viewZone.id);
                    if (_this._overlayWidget) {
                        _this.editor.removeOverlayWidget(_this._overlayWidget);
                        _this._overlayWidget = null;
                    }
                    _this.domNode.style.top = '-1000px';
                    _this._viewZone = new ViewZoneDelegate(viewZoneDomNode, position.lineNumber, position.column, heightInLines, function(top) {
                        return _this1._onViewZoneTop(top);
                    }, function(height) {
                        return _this1._onViewZoneHeight(height);
                    });
                    _this._viewZone.id = accessor.addZone(_this._viewZone);
                    _this._overlayWidget = new OverlayWidgetDelegate(WIDGET_ID + _this._viewZone.id, _this.domNode);
                    _this.editor.addOverlayWidget(_this._overlayWidget);
                });
                if (this.container && this.options.showFrame) {
                    var width1 = this.options.frameWidth ? this.options.frameWidth : frameThickness;
                    this.container.style.borderTopWidth = width1 + 'px';
                    this.container.style.borderBottomWidth = width1 + 'px';
                }
                var containerHeight = heightInLines * lineHeight - this._decoratingElementsHeight();
                if (this.container) {
                    this.container.style.top = arrowHeight + 'px';
                    this.container.style.height = containerHeight + 'px';
                    this.container.style.overflow = 'hidden';
                }
                this._doLayout(containerHeight, width);
                if (!this.options.keepEditorSelection) this.editor.setSelection(where);
                var model = this.editor.getModel();
                if (model) {
                    var revealLine = where.endLineNumber + 1;
                    if (revealLine <= model.getLineCount()) // reveal line below the zone widget
                    this.revealLine(revealLine, false);
                    else // reveal last line atop
                    this.revealLine(model.getLineCount(), true);
                }
            }
        },
        {
            key: "revealLine",
            value: function revealLine(lineNumber, isLastLine) {
                if (isLastLine) this.editor.revealLineInCenter(lineNumber, 0 /* Smooth */ );
                else this.editor.revealLine(lineNumber, 0 /* Smooth */ );
            }
        },
        {
            key: "setCssClass",
            value: function setCssClass(className, classToReplace) {
                if (!this.container) return;
                if (classToReplace) this.container.classList.remove(classToReplace);
                this.container.classList.add(className);
            }
        },
        {
            key: "_onWidth",
            value: function _onWidth(widthInPixel) {
            // implement in subclass
            }
        },
        {
            key: "_doLayout",
            value: function _doLayout(heightInPixel, widthInPixel) {
            // implement in subclass
            }
        },
        {
            key: "_relayout",
            value: function _relayout(newHeightInLines) {
                var _this = this;
                if (this._viewZone && this._viewZone.heightInLines !== newHeightInLines) this.editor.changeViewZones(function(accessor) {
                    if (_this._viewZone) {
                        _this._viewZone.heightInLines = newHeightInLines;
                        accessor.layoutZone(_this._viewZone.id);
                    }
                });
            }
        },
        {
            // --- sash
            key: "_initSash",
            value: function _initSash() {
                var _this = this;
                if (this._resizeSash) return;
                this._resizeSash = this._disposables.add(new _sashJs.Sash(this.domNode, this, {
                    orientation: 1 /* HORIZONTAL */ 
                }));
                if (!this.options.isResizeable) this._resizeSash.state = 0 /* Disabled */ ;
                var data;
                this._disposables.add(this._resizeSash.onDidStart(function(e) {
                    if (_this._viewZone) data = {
                        startY: e.startY,
                        heightInLines: _this._viewZone.heightInLines
                    };
                }));
                this._disposables.add(this._resizeSash.onDidEnd(function() {
                    data = undefined;
                }));
                this._disposables.add(this._resizeSash.onDidChange(function(evt) {
                    if (data) {
                        var lineDelta = (evt.currentY - data.startY) / _this.editor.getOption(58 /* lineHeight */ );
                        var roundedLineDelta = lineDelta < 0 ? Math.ceil(lineDelta) : Math.floor(lineDelta);
                        var newHeightInLines = data.heightInLines + roundedLineDelta;
                        if (newHeightInLines > 5 && newHeightInLines < 35) _this._relayout(newHeightInLines);
                    }
                }));
            }
        },
        {
            key: "getHorizontalSashLeft",
            value: function getHorizontalSashLeft() {
                return 0;
            }
        },
        {
            key: "getHorizontalSashTop",
            value: function getHorizontalSashTop() {
                return (this.domNode.style.height === null ? 0 : parseInt(this.domNode.style.height)) - this._decoratingElementsHeight() / 2;
            }
        },
        {
            key: "getHorizontalSashWidth",
            value: function getHorizontalSashWidth() {
                var layoutInfo = this.editor.getLayoutInfo();
                return layoutInfo.width - layoutInfo.minimap.minimapWidth;
            }
        }
    ]);
    return ZoneWidget;
}();

},{"@swc/helpers":"erO4s","../../../base/browser/dom.js":"bxmlc","../../../base/browser/ui/sash/sash.js":"bWRNP","../../../base/common/color.js":"2jKDp","../../../base/common/idGenerator.js":"cIG4F","../../../base/common/lifecycle.js":"bcbPy","../../../base/common/objects.js":"bKKoD","./zoneWidget.css":"ibYIO","../../common/core/range.js":"VbyL8","../../common/model/textModel.js":"f18vR","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"ibYIO":[function() {},{}],"jm3Jq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createAndFillInActionBarActions", function() {
    return createAndFillInActionBarActions;
});
parcelHelpers.export(exports, "MenuEntryActionViewItem", function() {
    return MenuEntryActionViewItem;
});
parcelHelpers.export(exports, "SubmenuEntryActionViewItem", function() {
    return SubmenuEntryActionViewItem;
});
/**
 * Creates action view items for menu actions or submenu actions.
 */ parcelHelpers.export(exports, "createActionViewItem", function() {
    return createActionViewItem;
});
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
var _domJs = require("../../../base/browser/dom.js");
var _keyboardEventJs = require("../../../base/browser/keyboardEvent.js");
var _actionViewItemsJs = require("../../../base/browser/ui/actionbar/actionViewItems.js");
var _dropdownActionViewItemJs = require("../../../base/browser/ui/dropdown/dropdownActionViewItem.js");
var _actionsJs = require("../../../base/common/actions.js");
var _keybindingLabelsJs = require("../../../base/common/keybindingLabels.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _platformJs = require("../../../base/common/platform.js");
var _menuEntryActionViewItemCss = require("./menuEntryActionViewItem.css");
var _nlsJs = require("../../../nls.js");
var _actionsJs1 = require("../common/actions.js");
var _contextkeyJs = require("../../contextkey/common/contextkey.js");
var _contextViewJs = require("../../contextview/browser/contextView.js");
var _instantiationJs = require("../../instantiation/common/instantiation.js");
var _keybindingJs = require("../../keybinding/common/keybinding.js");
var _notificationJs = require("../../notification/common/notification.js");
var _storageJs = require("../../storage/common/storage.js");
var _themeServiceJs = require("../../theme/common/themeService.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function createAndFillInActionBarActions(menu, options, target, primaryGroup, primaryMaxCount, shouldInlineSubmenu, useSeparatorsInPrimaryActions) {
    var groups = menu.getActions(options);
    var isPrimaryAction = typeof primaryGroup === 'string' ? function(actionGroup) {
        return actionGroup === primaryGroup;
    } : primaryGroup;
    // Action bars handle alternative actions on their own so the alternative actions should be ignored
    fillInActions(groups, target, false, isPrimaryAction, primaryMaxCount, shouldInlineSubmenu, useSeparatorsInPrimaryActions);
    return asDisposable(groups);
}
function asDisposable(groups) {
    var disposables = new _lifecycleJs.DisposableStore();
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined, _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
    try {
        for(var _iterator = groups[Symbol.iterator](), _step; !(_iteratorNormalCompletion1 = (_step = _iterator.next()).done); _iteratorNormalCompletion1 = true){
            var _value = _helpers.slicedToArray(_step.value, 2), actions = _value[1];
            try {
                for(var _iterator1 = actions[Symbol.iterator](), _step1; !(_iteratorNormalCompletion = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion = true){
                    var action = _step1.value;
                    disposables.add(action);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally{
                try {
                    if (!_iteratorNormalCompletion && _iterator1.return != null) {
                        _iterator1.return();
                    }
                } finally{
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
    } catch (err) {
        _didIteratorError1 = true;
        _iteratorError1 = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion1 && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError1) {
                throw _iteratorError1;
            }
        }
    }
    return disposables;
}
function fillInActions(groups, target, useAlternativeActions) {
    var isPrimaryAction = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : function(actionGroup) {
        return actionGroup === 'navigation';
    }, primaryMaxCount = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : Number.MAX_SAFE_INTEGER, shouldInlineSubmenu = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : function() {
        return false;
    }, useSeparatorsInPrimaryActions = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : false;
    var primaryBucket;
    var secondaryBucket;
    if (Array.isArray(target)) {
        primaryBucket = target;
        secondaryBucket = target;
    } else {
        primaryBucket = target.primary;
        secondaryBucket = target.secondary;
    }
    var submenuInfo = new Set();
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = groups[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var _value = _helpers.slicedToArray(_step.value, 2), group = _value[0], actions = _value[1];
            var _$target = void 0;
            if (isPrimaryAction(group)) {
                _$target = primaryBucket;
                if (_$target.length > 0 && useSeparatorsInPrimaryActions) _$target.push(new _actionsJs.Separator());
            } else {
                _$target = secondaryBucket;
                if (_$target.length > 0) _$target.push(new _actionsJs.Separator());
            }
            var _iteratorNormalCompletion2 = true, _didIteratorError2 = false, _iteratorError2 = undefined;
            try {
                for(var _iterator2 = actions[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true){
                    var action = _step2.value;
                    if (useAlternativeActions) action = action instanceof _actionsJs1.MenuItemAction && action.alt ? action.alt : action;
                    var newLen = _$target.push(action);
                    // keep submenu info for later inlining
                    if (action instanceof _actionsJs.SubmenuAction) submenuInfo.add({
                        group: group,
                        action: action,
                        index: newLen - 1
                    });
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally{
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                        _iterator2.return();
                    }
                } finally{
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    var _iteratorNormalCompletion3 = true, _didIteratorError3 = false, _iteratorError3 = undefined;
    try {
        // ask the outside if submenu should be inlined or not. only ask when
        // there would be enough space
        for(var _iterator3 = submenuInfo[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true){
            var _value1 = _step3.value, group1 = _value1.group, action1 = _value1.action, index = _value1.index;
            var _target;
            var _$target1 = isPrimaryAction(group1) ? primaryBucket : secondaryBucket;
            // inlining submenus with length 0 or 1 is easy,
            // larger submenus need to be checked with the overall limit
            var submenuActions = action1.actions;
            if ((submenuActions.length <= 1 || _$target1.length + submenuActions.length - 2 <= primaryMaxCount) && shouldInlineSubmenu(action1, group1, _$target1.length)) (_target = _$target1).splice.apply(_target, [
                index,
                1
            ].concat(_helpers.toConsumableArray(submenuActions)));
        }
    } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
                _iterator3.return();
            }
        } finally{
            if (_didIteratorError3) {
                throw _iteratorError3;
            }
        }
    }
    // overflow items from the primary group into the secondary bucket
    if (primaryBucket !== secondaryBucket && primaryBucket.length > primaryMaxCount) {
        var _secondaryBucket;
        var overflow = primaryBucket.splice(primaryMaxCount, primaryBucket.length - primaryMaxCount);
        (_secondaryBucket = secondaryBucket).unshift.apply(_secondaryBucket, _helpers.toConsumableArray(overflow).concat([
            new _actionsJs.Separator()
        ]));
    }
}
var MenuEntryActionViewItem = /*#__PURE__*/ function(ActionViewItem) {
    "use strict";
    _helpers.inherits(MenuEntryActionViewItem1, ActionViewItem);
    var _super = _helpers.createSuper(MenuEntryActionViewItem1);
    function MenuEntryActionViewItem1(_action, options, _keybindingService, _notificationService, _contextKeyService) {
        _helpers.classCallCheck(this, MenuEntryActionViewItem1);
        var _this;
        _this = _super.call(this, undefined, _action, {
            icon: !!(_action.class || _action.item.icon),
            label: !_action.class && !_action.item.icon,
            draggable: options === null || options === void 0 ? void 0 : options.draggable
        });
        _this._keybindingService = _keybindingService;
        _this._notificationService = _notificationService;
        _this._contextKeyService = _contextKeyService;
        _this._wantsAltCommand = false;
        _this._itemClassDispose = _this._register(new _lifecycleJs.MutableDisposable());
        _this._altKey = _domJs.ModifierKeyEmitter.getInstance();
        return _this;
    }
    _helpers.createClass(MenuEntryActionViewItem1, [
        {
            key: "_menuItemAction",
            get: function get() {
                return this._action;
            }
        },
        {
            key: "_commandAction",
            get: function get() {
                return this._wantsAltCommand && this._menuItemAction.alt || this._menuItemAction;
            }
        },
        {
            key: "onClick",
            value: function onClick(event) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                event.preventDefault();
                                event.stopPropagation();
                                _ctx.prev = 2;
                                _ctx.next = 5;
                                return this.actionRunner.run(this._commandAction, this._context);
                            case 5:
                                _ctx.next = 10;
                                break;
                            case 7:
                                _ctx.prev = 7;
                                _ctx.t0 = _ctx["catch"](2);
                                this._notificationService.error(_ctx.t0);
                            case 10:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this, [
                        [
                            2,
                            7
                        ]
                    ]);
                }));
            }
        },
        {
            key: "render",
            value: function render(container) {
                var _this = this;
                _helpers.get(_helpers.getPrototypeOf(MenuEntryActionViewItem1.prototype), "render", this).call(this, container);
                container.classList.add('menu-entry');
                this._updateItemClass(this._menuItemAction.item);
                var mouseOver = false;
                var alternativeKeyDown = this._altKey.keyStatus.altKey || (_platformJs.isWindows || _platformJs.isLinux) && this._altKey.keyStatus.shiftKey;
                var updateAltState = function() {
                    var wantsAltCommand = mouseOver && alternativeKeyDown;
                    if (wantsAltCommand !== _this._wantsAltCommand) {
                        _this._wantsAltCommand = wantsAltCommand;
                        _this.updateLabel();
                        _this.updateTooltip();
                        _this.updateClass();
                    }
                };
                if (this._menuItemAction.alt) this._register(this._altKey.event(function(value) {
                    alternativeKeyDown = value.altKey || (_platformJs.isWindows || _platformJs.isLinux) && value.shiftKey;
                    updateAltState();
                }));
                this._register(_domJs.addDisposableListener(container, 'mouseleave', function(_) {
                    mouseOver = false;
                    updateAltState();
                }));
                this._register(_domJs.addDisposableListener(container, 'mouseenter', function(_) {
                    mouseOver = true;
                    updateAltState();
                }));
            }
        },
        {
            key: "updateLabel",
            value: function updateLabel() {
                if (this.options.label && this.label) this.label.textContent = this._commandAction.label;
            }
        },
        {
            key: "updateTooltip",
            value: function updateTooltip() {
                if (this.label) {
                    var keybinding = this._keybindingService.lookupKeybinding(this._commandAction.id, this._contextKeyService);
                    var keybindingLabel = keybinding && keybinding.getLabel();
                    var tooltip = this._commandAction.tooltip || this._commandAction.label;
                    var title = keybindingLabel ? _nlsJs.localize('titleAndKb', "{0} ({1})", tooltip, keybindingLabel) : tooltip;
                    if (!this._wantsAltCommand && this._menuItemAction.alt) {
                        var altTooltip = this._menuItemAction.alt.tooltip || this._menuItemAction.alt.label;
                        var altKeybinding = this._keybindingService.lookupKeybinding(this._menuItemAction.alt.id, this._contextKeyService);
                        var altKeybindingLabel = altKeybinding && altKeybinding.getLabel();
                        var altTitleSection = altKeybindingLabel ? _nlsJs.localize('titleAndKb', "{0} ({1})", altTooltip, altKeybindingLabel) : altTooltip;
                        title += "\n[".concat(_keybindingLabelsJs.UILabelProvider.modifierLabels[_platformJs.OS].altKey, "] ").concat(altTitleSection);
                    }
                    this.label.title = title;
                }
            }
        },
        {
            key: "updateClass",
            value: function updateClass() {
                if (this.options.icon) {
                    if (this._commandAction !== this._menuItemAction) {
                        if (this._menuItemAction.alt) this._updateItemClass(this._menuItemAction.alt.item);
                    } else if (this._menuItemAction.alt) this._updateItemClass(this._menuItemAction.item);
                }
            }
        },
        {
            key: "_updateItemClass",
            value: function _updateItemClass(item) {
                var _a;
                this._itemClassDispose.value = undefined;
                var ref = this, element = ref.element, label = ref.label;
                if (!element || !label) return;
                var icon = this._commandAction.checked && ((_a = item.toggled) === null || _a === void 0 ? void 0 : _a.icon) ? item.toggled.icon : item.icon;
                if (!icon) return;
                if (_themeServiceJs.ThemeIcon.isThemeIcon(icon)) {
                    var _classList1;
                    // theme icons
                    var iconClasses = _themeServiceJs.ThemeIcon.asClassNameArray(icon);
                    (_classList1 = label.classList).add.apply(_classList1, _helpers.toConsumableArray(iconClasses));
                    this._itemClassDispose.value = _lifecycleJs.toDisposable(function() {
                        var _classList;
                        (_classList = label.classList).remove.apply(_classList, _helpers.toConsumableArray(iconClasses));
                    });
                } else {
                    // icon path/url
                    if (icon.light) label.style.setProperty('--menu-entry-icon-light', _domJs.asCSSUrl(icon.light));
                    if (icon.dark) label.style.setProperty('--menu-entry-icon-dark', _domJs.asCSSUrl(icon.dark));
                    label.classList.add('icon');
                    this._itemClassDispose.value = _lifecycleJs.toDisposable(function() {
                        label.classList.remove('icon');
                        label.style.removeProperty('--menu-entry-icon-light');
                        label.style.removeProperty('--menu-entry-icon-dark');
                    });
                }
            }
        }
    ]);
    return MenuEntryActionViewItem1;
}(_actionViewItemsJs.ActionViewItem);
MenuEntryActionViewItem = __decorate([
    __param(2, _keybindingJs.IKeybindingService),
    __param(3, _notificationJs.INotificationService),
    __param(4, _contextkeyJs.IContextKeyService)
], MenuEntryActionViewItem);
var SubmenuEntryActionViewItem = /*#__PURE__*/ function(DropdownMenuActionViewItem) {
    "use strict";
    _helpers.inherits(SubmenuEntryActionViewItem1, DropdownMenuActionViewItem);
    var _super = _helpers.createSuper(SubmenuEntryActionViewItem1);
    function SubmenuEntryActionViewItem1(action, options, contextMenuService) {
        _helpers.classCallCheck(this, SubmenuEntryActionViewItem1);
        var _a, _b;
        var dropdownOptions = Object.assign({}, options !== null && options !== void 0 ? options : Object.create(null), {
            menuAsChild: (_a = options === null || options === void 0 ? void 0 : options.menuAsChild) !== null && _a !== void 0 ? _a : false,
            classNames: (_b = options === null || options === void 0 ? void 0 : options.classNames) !== null && _b !== void 0 ? _b : _themeServiceJs.ThemeIcon.isThemeIcon(action.item.icon) ? _themeServiceJs.ThemeIcon.asClassName(action.item.icon) : undefined
        });
        return _super.call(this, action, {
            getActions: function() {
                return action.actions;
            }
        }, contextMenuService, dropdownOptions);
    }
    _helpers.createClass(SubmenuEntryActionViewItem1, [
        {
            key: "render",
            value: function render(container) {
                _helpers.get(_helpers.getPrototypeOf(SubmenuEntryActionViewItem1.prototype), "render", this).call(this, container);
                if (this.element) {
                    container.classList.add('menu-entry');
                    var icon = this._action.item.icon;
                    if (icon && !_themeServiceJs.ThemeIcon.isThemeIcon(icon)) {
                        this.element.classList.add('icon');
                        if (icon.light) this.element.style.setProperty('--menu-entry-icon-light', _domJs.asCSSUrl(icon.light));
                        if (icon.dark) this.element.style.setProperty('--menu-entry-icon-dark', _domJs.asCSSUrl(icon.dark));
                    }
                }
            }
        }
    ]);
    return SubmenuEntryActionViewItem1;
}(_dropdownActionViewItemJs.DropdownMenuActionViewItem);
SubmenuEntryActionViewItem = __decorate([
    __param(2, _contextViewJs.IContextMenuService)
], SubmenuEntryActionViewItem);
var DropdownWithDefaultActionViewItem = /*#__PURE__*/ function(BaseActionViewItem) {
    "use strict";
    _helpers.inherits(DropdownWithDefaultActionViewItem1, BaseActionViewItem);
    var _super1 = _helpers.createSuper(DropdownWithDefaultActionViewItem1);
    function DropdownWithDefaultActionViewItem1(submenuAction, options, _keybindingService, _notificationService, _contextMenuService, _menuService, _instaService, _storageService) {
        _helpers.classCallCheck(this, DropdownWithDefaultActionViewItem1);
        var _this;
        var _a, _b, _c;
        _this = _super1.call(this, null, submenuAction);
        _this._keybindingService = _keybindingService;
        _this._notificationService = _notificationService;
        _this._contextMenuService = _contextMenuService;
        _this._menuService = _menuService;
        _this._instaService = _instaService;
        _this._storageService = _storageService;
        _this._container = null;
        _this._storageKey = "".concat(submenuAction.item.submenu._debugName, "_lastActionId");
        // determine default action
        var defaultAction;
        var defaultActionId = _storageService.get(_this._storageKey, 1 /* WORKSPACE */ );
        if (defaultActionId) defaultAction = submenuAction.actions.find(function(a) {
            return defaultActionId === a.id;
        });
        if (!defaultAction) defaultAction = submenuAction.actions[0];
        _this._defaultAction = _this._instaService.createInstance(MenuEntryActionViewItem, defaultAction, undefined);
        var dropdownOptions = Object.assign({}, options !== null && options !== void 0 ? options : Object.create(null), {
            menuAsChild: (_a = options === null || options === void 0 ? void 0 : options.menuAsChild) !== null && _a !== void 0 ? _a : true,
            classNames: (_b = options === null || options === void 0 ? void 0 : options.classNames) !== null && _b !== void 0 ? _b : [
                'codicon',
                'codicon-chevron-down'
            ],
            actionRunner: (_c = options === null || options === void 0 ? void 0 : options.actionRunner) !== null && _c !== void 0 ? _c : new _actionsJs.ActionRunner()
        });
        _this._dropdown = new _dropdownActionViewItemJs.DropdownMenuActionViewItem(submenuAction, submenuAction.actions, _this._contextMenuService, dropdownOptions);
        _this._dropdown.actionRunner.onDidRun(function(e) {
            if (e.action instanceof _actionsJs1.MenuItemAction) _this.update(e.action);
        });
        return _this;
    }
    _helpers.createClass(DropdownWithDefaultActionViewItem1, [
        {
            key: "update",
            value: function update(lastAction) {
                this._storageService.store(this._storageKey, lastAction.id, 1 /* WORKSPACE */ , 0 /* USER */ );
                this._defaultAction.dispose();
                this._defaultAction = this._instaService.createInstance(MenuEntryActionViewItem, lastAction, undefined);
                this._defaultAction.actionRunner = new /*#__PURE__*/ (function(ActionRunner) {
                    _helpers.inherits(_class, ActionRunner);
                    var _super = _helpers.createSuper(_class);
                    function _class() {
                        _helpers.classCallCheck(this, _class);
                        return _super.apply(this, arguments);
                    }
                    _helpers.createClass(_class, [
                        {
                            key: "runAction",
                            value: function runAction(action, context) {
                                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                                        while(1)switch(_ctx.prev = _ctx.next){
                                            case 0:
                                                _ctx.next = 2;
                                                return action.run(undefined);
                                            case 2:
                                            case "end":
                                                return _ctx.stop();
                                        }
                                    }, _callee);
                                }));
                            }
                        }
                    ]);
                    return _class;
                }(_actionsJs.ActionRunner))();
                if (this._container) this._defaultAction.render(_domJs.prepend(this._container, _domJs.$('.action-container')));
            }
        },
        {
            key: "setActionContext",
            value: function setActionContext(newContext) {
                _helpers.get(_helpers.getPrototypeOf(DropdownWithDefaultActionViewItem1.prototype), "setActionContext", this).call(this, newContext);
                this._defaultAction.setActionContext(newContext);
                this._dropdown.setActionContext(newContext);
            }
        },
        {
            key: "render",
            value: function render(container) {
                var _this = this;
                this._container = container;
                _helpers.get(_helpers.getPrototypeOf(DropdownWithDefaultActionViewItem1.prototype), "render", this).call(this, this._container);
                this._container.classList.add('monaco-dropdown-with-default');
                var primaryContainer = _domJs.$('.action-container');
                this._defaultAction.render(_domJs.append(this._container, primaryContainer));
                this._register(_domJs.addDisposableListener(primaryContainer, _domJs.EventType.KEY_DOWN, function(e) {
                    var event = new _keyboardEventJs.StandardKeyboardEvent(e);
                    if (event.equals(17 /* RightArrow */ )) {
                        _this._defaultAction.element.tabIndex = -1;
                        _this._dropdown.focus();
                        event.stopPropagation();
                    }
                }));
                var dropdownContainer = _domJs.$('.dropdown-action-container');
                this._dropdown.render(_domJs.append(this._container, dropdownContainer));
                this._register(_domJs.addDisposableListener(dropdownContainer, _domJs.EventType.KEY_DOWN, function(e) {
                    var _a;
                    var event = new _keyboardEventJs.StandardKeyboardEvent(e);
                    if (event.equals(15 /* LeftArrow */ )) {
                        _this._defaultAction.element.tabIndex = 0;
                        _this._dropdown.setFocusable(false);
                        (_a = _this._defaultAction.element) === null || _a === void 0 || _a.focus();
                        event.stopPropagation();
                    }
                }));
            }
        },
        {
            key: "focus",
            value: function focus(fromRight) {
                if (fromRight) this._dropdown.focus();
                else {
                    this._defaultAction.element.tabIndex = 0;
                    this._defaultAction.element.focus();
                }
            }
        },
        {
            key: "blur",
            value: function blur() {
                this._defaultAction.element.tabIndex = -1;
                this._dropdown.blur();
                this._container.blur();
            }
        },
        {
            key: "setFocusable",
            value: function setFocusable(focusable) {
                if (focusable) this._defaultAction.element.tabIndex = 0;
                else {
                    this._defaultAction.element.tabIndex = -1;
                    this._dropdown.setFocusable(false);
                }
            }
        },
        {
            key: "dispose",
            value: function dispose() {
                this._defaultAction.dispose();
                this._dropdown.dispose();
                _helpers.get(_helpers.getPrototypeOf(DropdownWithDefaultActionViewItem1.prototype), "dispose", this).call(this);
            }
        }
    ]);
    return DropdownWithDefaultActionViewItem1;
}(_actionViewItemsJs.BaseActionViewItem);
DropdownWithDefaultActionViewItem = __decorate([
    __param(2, _keybindingJs.IKeybindingService),
    __param(3, _notificationJs.INotificationService),
    __param(4, _contextViewJs.IContextMenuService),
    __param(5, _actionsJs1.IMenuService),
    __param(6, _instantiationJs.IInstantiationService),
    __param(7, _storageJs.IStorageService)
], DropdownWithDefaultActionViewItem);
function createActionViewItem(instaService, action, options) {
    if (action instanceof _actionsJs1.MenuItemAction) return instaService.createInstance(MenuEntryActionViewItem, action, undefined);
    else if (action instanceof _actionsJs1.SubmenuItemAction) {
        if (action.item.rememberDefaultAction) return instaService.createInstance(DropdownWithDefaultActionViewItem, action, options);
        else return instaService.createInstance(SubmenuEntryActionViewItem, action, options);
    } else return undefined;
}

},{"@swc/helpers":"erO4s","regenerator-runtime":"12Ae8","../../../base/browser/dom.js":"bxmlc","../../../base/browser/keyboardEvent.js":"fMCNR","../../../base/browser/ui/actionbar/actionViewItems.js":"lixq5","../../../base/browser/ui/dropdown/dropdownActionViewItem.js":"lCfWq","../../../base/common/actions.js":"5c0wW","../../../base/common/keybindingLabels.js":"9xn9i","../../../base/common/lifecycle.js":"bcbPy","../../../base/common/platform.js":"8pohV","./menuEntryActionViewItem.css":"gi6Kj","../../../nls.js":"9djYb","../common/actions.js":"1qoxQ","../../contextkey/common/contextkey.js":"5cjav","../../contextview/browser/contextView.js":"kl0FP","../../instantiation/common/instantiation.js":"9ABZB","../../keybinding/common/keybinding.js":"5rr15","../../notification/common/notification.js":"baqho","../../storage/common/storage.js":"1m95n","../../theme/common/themeService.js":"kE7QB","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"lCfWq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DropdownMenuActionViewItem", function() {
    return DropdownMenuActionViewItem;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _domJs = require("../../dom.js");
var _actionViewItemsJs = require("../actionbar/actionViewItems.js");
var _dropdownJs = require("./dropdown.js");
var _eventJs = require("../../../common/event.js");
var _dropdownCss = require("./dropdown.css");
var DropdownMenuActionViewItem = /*#__PURE__*/ function(BaseActionViewItem) {
    "use strict";
    _helpers.inherits(DropdownMenuActionViewItem, BaseActionViewItem);
    var _super = _helpers.createSuper(DropdownMenuActionViewItem);
    function DropdownMenuActionViewItem(action, menuActionsOrProvider, contextMenuProvider) {
        var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : Object.create(null);
        _helpers.classCallCheck(this, DropdownMenuActionViewItem);
        var _this;
        _this = _super.call(this, null, action, options);
        _this.actionItem = null;
        _this._onDidChangeVisibility = _this._register(new _eventJs.Emitter());
        _this.menuActionsOrProvider = menuActionsOrProvider;
        _this.contextMenuProvider = contextMenuProvider;
        _this.options = options;
        if (_this.options.actionRunner) _this.actionRunner = _this.options.actionRunner;
        return _this;
    }
    _helpers.createClass(DropdownMenuActionViewItem, [
        {
            key: "render",
            value: function render(container) {
                var _this = this;
                this.actionItem = container;
                var labelRenderer = function(el) {
                    var _classList;
                    _this.element = _domJs.append(el, _domJs.$('a.action-label'));
                    var classNames = [];
                    if (typeof _this.options.classNames === 'string') classNames = _this.options.classNames.split(/\s+/g).filter(function(s) {
                        return !!s;
                    });
                    else if (_this.options.classNames) classNames = _this.options.classNames;
                    // todo@aeschli: remove codicon, should come through `this.options.classNames`
                    if (!classNames.find(function(c) {
                        return c === 'icon';
                    })) classNames.push('codicon');
                    (_classList = _this.element.classList).add.apply(_classList, _helpers.toConsumableArray(classNames));
                    _this.element.setAttribute('role', 'button');
                    _this.element.setAttribute('aria-haspopup', 'true');
                    _this.element.setAttribute('aria-expanded', 'false');
                    _this.element.title = _this._action.label || '';
                    return null;
                };
                var isActionsArray = Array.isArray(this.menuActionsOrProvider);
                var options = {
                    contextMenuProvider: this.contextMenuProvider,
                    labelRenderer: labelRenderer,
                    menuAsChild: this.options.menuAsChild,
                    actions: isActionsArray ? this.menuActionsOrProvider : undefined,
                    actionProvider: isActionsArray ? undefined : this.menuActionsOrProvider
                };
                this.dropdownMenu = this._register(new _dropdownJs.DropdownMenu(container, options));
                this._register(this.dropdownMenu.onDidChangeVisibility(function(visible) {
                    var _a;
                    (_a = _this.element) === null || _a === void 0 || _a.setAttribute('aria-expanded', "".concat(visible));
                    _this._onDidChangeVisibility.fire(visible);
                }));
                this.dropdownMenu.menuOptions = {
                    actionViewItemProvider: this.options.actionViewItemProvider,
                    actionRunner: this.actionRunner,
                    getKeyBinding: this.options.keybindingProvider,
                    context: this._context
                };
                if (this.options.anchorAlignmentProvider) {
                    var that = this;
                    this.dropdownMenu.menuOptions = Object.assign(Object.assign({}, this.dropdownMenu.menuOptions), {
                        get anchorAlignment () {
                            return that.options.anchorAlignmentProvider();
                        }
                    });
                }
                this.updateEnabled();
            }
        },
        {
            key: "setActionContext",
            value: function setActionContext(newContext) {
                _helpers.get(_helpers.getPrototypeOf(DropdownMenuActionViewItem.prototype), "setActionContext", this).call(this, newContext);
                if (this.dropdownMenu) {
                    if (this.dropdownMenu.menuOptions) this.dropdownMenu.menuOptions.context = newContext;
                    else this.dropdownMenu.menuOptions = {
                        context: newContext
                    };
                }
            }
        },
        {
            key: "updateEnabled",
            value: function updateEnabled() {
                var _a, _b;
                var disabled = !this.getAction().enabled;
                (_a = this.actionItem) === null || _a === void 0 || _a.classList.toggle('disabled', disabled);
                (_b = this.element) === null || _b === void 0 || _b.classList.toggle('disabled', disabled);
            }
        }
    ]);
    return DropdownMenuActionViewItem;
}(_actionViewItemsJs.BaseActionViewItem);

},{"@swc/helpers":"erO4s","../../dom.js":"bxmlc","../actionbar/actionViewItems.js":"lixq5","./dropdown.js":"iJHDS","../../../common/event.js":"9IBcK","./dropdown.css":"kU8RT","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"iJHDS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BaseDropdown", function() {
    return BaseDropdown;
});
parcelHelpers.export(exports, "DropdownMenu", function() {
    return DropdownMenu;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _domJs = require("../../dom.js");
var _keyboardEventJs = require("../../keyboardEvent.js");
var _touchJs = require("../../touch.js");
var _actionsJs = require("../../../common/actions.js");
var _eventJs = require("../../../common/event.js");
var _dropdownCss = require("./dropdown.css");
var BaseDropdown = /*#__PURE__*/ function(ActionRunner) {
    "use strict";
    _helpers.inherits(BaseDropdown, ActionRunner);
    var _super = _helpers.createSuper(BaseDropdown);
    function BaseDropdown(container1, options) {
        _helpers.classCallCheck(this, BaseDropdown);
        var _this;
        _this = _super.call(this);
        _this._onDidChangeVisibility = _this._register(new _eventJs.Emitter());
        _this.onDidChangeVisibility = _this._onDidChangeVisibility.event;
        _this._element = _domJs.append(container1, _domJs.$('.monaco-dropdown'));
        _this._label = _domJs.append(_this._element, _domJs.$('.dropdown-label'));
        var labelRenderer = options.labelRenderer;
        if (!labelRenderer) labelRenderer = function(container) {
            container.textContent = options.label || '';
            return null;
        };
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = [
                _domJs.EventType.CLICK,
                _domJs.EventType.MOUSE_DOWN,
                _touchJs.EventType.Tap
            ][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var event = _step.value;
                _this._register(_domJs.addDisposableListener(_this.element, event, function(e) {
                    return _domJs.EventHelper.stop(e, true);
                })); // prevent default click behaviour to trigger
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
        var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
        try {
            for(var _iterator1 = [
                _domJs.EventType.MOUSE_DOWN,
                _touchJs.EventType.Tap
            ][Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                var event1 = _step1.value;
                _this._register(_domJs.addDisposableListener(_this._label, event1, function(e) {
                    if (e instanceof MouseEvent && e.detail > 1) return; // prevent multiple clicks to open multiple context menus (https://github.com/microsoft/vscode/issues/41363)
                    if (_this.visible) _this.hide();
                    else _this.show();
                }));
            }
        } catch (err) {
            _didIteratorError1 = true;
            _iteratorError1 = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                    _iterator1.return();
                }
            } finally{
                if (_didIteratorError1) {
                    throw _iteratorError1;
                }
            }
        }
        _this._register(_domJs.addDisposableListener(_this._label, _domJs.EventType.KEY_UP, function(e) {
            var event = new _keyboardEventJs.StandardKeyboardEvent(e);
            if (event.equals(3 /* Enter */ ) || event.equals(10 /* Space */ )) {
                _domJs.EventHelper.stop(e, true); // https://github.com/microsoft/vscode/issues/57997
                if (_this.visible) _this.hide();
                else _this.show();
            }
        }));
        var cleanupFn = labelRenderer(_this._label);
        if (cleanupFn) _this._register(cleanupFn);
        _this._register(_touchJs.Gesture.addTarget(_this._label));
        return _this;
    }
    _helpers.createClass(BaseDropdown, [
        {
            key: "element",
            get: function get() {
                return this._element;
            }
        },
        {
            key: "show",
            value: function show() {
                if (!this.visible) {
                    this.visible = true;
                    this._onDidChangeVisibility.fire(true);
                }
            }
        },
        {
            key: "hide",
            value: function hide() {
                if (this.visible) {
                    this.visible = false;
                    this._onDidChangeVisibility.fire(false);
                }
            }
        },
        {
            key: "dispose",
            value: function dispose() {
                _helpers.get(_helpers.getPrototypeOf(BaseDropdown.prototype), "dispose", this).call(this);
                this.hide();
                if (this.boxContainer) {
                    this.boxContainer.remove();
                    this.boxContainer = undefined;
                }
                if (this.contents) {
                    this.contents.remove();
                    this.contents = undefined;
                }
                if (this._label) {
                    this._label.remove();
                    this._label = undefined;
                }
            }
        }
    ]);
    return BaseDropdown;
}(_actionsJs.ActionRunner);
var DropdownMenu = /*#__PURE__*/ function(BaseDropdown) {
    "use strict";
    _helpers.inherits(DropdownMenu, BaseDropdown);
    var _super = _helpers.createSuper(DropdownMenu);
    function DropdownMenu(container, options) {
        _helpers.classCallCheck(this, DropdownMenu);
        var _this;
        _this = _super.call(this, container, options);
        _this._actions = [];
        _this._contextMenuProvider = options.contextMenuProvider;
        _this.actions = options.actions || [];
        _this.actionProvider = options.actionProvider;
        _this.menuClassName = options.menuClassName || '';
        _this.menuAsChild = !!options.menuAsChild;
        return _this;
    }
    _helpers.createClass(DropdownMenu, [
        {
            key: "menuOptions",
            get: function get() {
                return this._menuOptions;
            },
            set: function set(options) {
                this._menuOptions = options;
            }
        },
        {
            key: "actions",
            get: function get() {
                if (this.actionProvider) return this.actionProvider.getActions();
                return this._actions;
            },
            set: function set(actions) {
                this._actions = actions;
            }
        },
        {
            key: "show",
            value: function show() {
                var _this = this;
                _helpers.get(_helpers.getPrototypeOf(DropdownMenu.prototype), "show", this).call(this);
                this.element.classList.add('active');
                this._contextMenuProvider.showContextMenu({
                    getAnchor: function() {
                        return _this.element;
                    },
                    getActions: function() {
                        return _this.actions;
                    },
                    getActionsContext: function() {
                        return _this.menuOptions ? _this.menuOptions.context : null;
                    },
                    getActionViewItem: function(action) {
                        return _this.menuOptions && _this.menuOptions.actionViewItemProvider ? _this.menuOptions.actionViewItemProvider(action) : undefined;
                    },
                    getKeyBinding: function(action) {
                        return _this.menuOptions && _this.menuOptions.getKeyBinding ? _this.menuOptions.getKeyBinding(action) : undefined;
                    },
                    getMenuClassName: function() {
                        return _this.menuClassName;
                    },
                    onHide: function() {
                        return _this.onHide();
                    },
                    actionRunner: this.menuOptions ? this.menuOptions.actionRunner : undefined,
                    anchorAlignment: this.menuOptions ? this.menuOptions.anchorAlignment : 0 /* LEFT */ ,
                    domForShadowRoot: this.menuAsChild ? this.element : undefined
                });
            }
        },
        {
            key: "hide",
            value: function hide() {
                _helpers.get(_helpers.getPrototypeOf(DropdownMenu.prototype), "hide", this).call(this);
            }
        },
        {
            key: "onHide",
            value: function onHide() {
                this.hide();
                this.element.classList.remove('active');
            }
        }
    ]);
    return DropdownMenu;
}(BaseDropdown);

},{"@swc/helpers":"erO4s","../../dom.js":"bxmlc","../../keyboardEvent.js":"fMCNR","../../touch.js":"8QLOK","../../../common/actions.js":"5c0wW","../../../common/event.js":"9IBcK","./dropdown.css":"kU8RT","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"kU8RT":[function() {},{}],"kU8RT":[function() {},{}],"gi6Kj":[function() {},{}],"h1pW2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DefinitionAction", function() {
    return DefinitionAction;
});
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
var _browserJs = require("../../../base/browser/browser.js");
var _ariaJs = require("../../../base/browser/ui/aria/aria.js");
var _asyncJs = require("../../../base/common/async.js");
var _keyCodesJs = require("../../../base/common/keyCodes.js");
var _platformJs = require("../../../base/common/platform.js");
var _typesJs = require("../../../base/common/types.js");
var _uriJs = require("../../../base/common/uri.js");
var _editorStateJs = require("../../browser/core/editorState.js");
var _editorBrowserJs = require("../../browser/editorBrowser.js");
var _editorExtensionsJs = require("../../browser/editorExtensions.js");
var _codeEditorServiceJs = require("../../browser/services/codeEditorService.js");
var _embeddedCodeEditorWidgetJs = require("../../browser/widget/embeddedCodeEditorWidget.js");
var _positionJs = require("../../common/core/position.js");
var _rangeJs = require("../../common/core/range.js");
var _editorContextKeysJs = require("../../common/editorContextKeys.js");
var _modesJs = require("../../common/modes.js");
var _referencesControllerJs = require("./peek/referencesController.js");
var _referencesModelJs = require("./referencesModel.js");
var _symbolNavigationJs = require("./symbolNavigation.js");
var _messageControllerJs = require("../message/messageController.js");
var _peekViewJs = require("../peekView/peekView.js");
var _nlsJs = require("../../../nls.js");
var _actionsJs = require("../../../platform/actions/common/actions.js");
var _commandsJs = require("../../../platform/commands/common/commands.js");
var _contextkeyJs = require("../../../platform/contextkey/common/contextkey.js");
var _instantiationJs = require("../../../platform/instantiation/common/instantiation.js");
var _notificationJs = require("../../../platform/notification/common/notification.js");
var _progressJs = require("../../../platform/progress/common/progress.js");
var _goToSymbolJs = require("./goToSymbol.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var _a, _b, _c, _d, _e, _f, _g, _h;
_actionsJs.MenuRegistry.appendMenuItem(_actionsJs.MenuId.EditorContext, {
    submenu: _actionsJs.MenuId.EditorContextPeek,
    title: _nlsJs.localize('peek.submenu', "Peek"),
    group: 'navigation',
    order: 100
});
var _goToActionIds = new Set();
function registerGoToAction(ctor) {
    var result = new ctor();
    _editorExtensionsJs.registerInstantiatedEditorAction(result);
    _goToActionIds.add(result.id);
    return result;
}
var SymbolNavigationAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(SymbolNavigationAction, EditorAction);
    var _super = _helpers.createSuper(SymbolNavigationAction);
    function SymbolNavigationAction(configuration, opts) {
        _helpers.classCallCheck(this, SymbolNavigationAction);
        var _this;
        _this = _super.call(this, opts);
        _this._configuration = configuration;
        return _this;
    }
    _helpers.createClass(SymbolNavigationAction, [
        {
            key: "run",
            value: function run(accessor, editor) {
                var _this = this;
                if (!editor.hasModel()) return Promise.resolve(undefined);
                var notificationService = accessor.get(_notificationJs.INotificationService);
                var editorService = accessor.get(_codeEditorServiceJs.ICodeEditorService);
                var progressService = accessor.get(_progressJs.IEditorProgressService);
                var symbolNavService = accessor.get(_symbolNavigationJs.ISymbolNavigationService);
                var model = editor.getModel();
                var pos = editor.getPosition();
                var cts = new _editorStateJs.EditorStateCancellationTokenSource(editor, 5 /* Position */ );
                var promise = _asyncJs.raceCancellation(this._getLocationModel(model, pos, cts.token), cts.token).then(function(references) {
                    return __awaiter(_this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                        var altAction, altActionId, referenceCount, info;
                        return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                            while(1)switch(_ctx.prev = _ctx.next){
                                case 0:
                                    if (!(!references || cts.token.isCancellationRequested)) {
                                        _ctx.next = 2;
                                        break;
                                    }
                                    return _ctx.abrupt("return");
                                case 2:
                                    _ariaJs.alert(references.ariaMessage);
                                    ;
                                    if (references.referenceAt(model.uri, pos)) {
                                        altActionId = this._getAlternativeCommand(editor);
                                        if (altActionId !== this.id && _goToActionIds.has(altActionId)) altAction = editor.getAction(altActionId);
                                    }
                                    referenceCount = references.references.length;
                                    if (!(referenceCount === 0)) {
                                        _ctx.next = 10;
                                        break;
                                    }
                                    // no result -> show message
                                    if (!this._configuration.muteMessage) {
                                        info = model.getWordAtPosition(pos);
                                        _messageControllerJs.MessageController.get(editor).showMessage(this._getNoResultFoundMessage(info), pos);
                                    }
                                    _ctx.next = 15;
                                    break;
                                case 10:
                                    if (!(referenceCount === 1 && altAction)) {
                                        _ctx.next = 14;
                                        break;
                                    }
                                    // already at the only result, run alternative
                                    altAction.run();
                                    _ctx.next = 15;
                                    break;
                                case 14:
                                    return _ctx.abrupt("return", this._onResult(editorService, symbolNavService, editor, references));
                                case 15:
                                case "end":
                                    return _ctx.stop();
                            }
                        }, _callee, this);
                    }));
                }, function(err) {
                    // report an error
                    notificationService.error(err);
                }).finally(function() {
                    cts.dispose();
                });
                progressService.showWhile(promise, 250);
                return promise;
            }
        },
        {
            key: "_onResult",
            value: function _onResult(editorService, symbolNavService, editor, model) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var gotoLocation, next, peek, targetEditor;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                gotoLocation = this._getGoToPreference(editor);
                                if (!(!(editor instanceof _embeddedCodeEditorWidgetJs.EmbeddedCodeEditorWidget) && (this._configuration.openInPeek || gotoLocation === 'peek' && model.references.length > 1))) {
                                    _ctx.next = 5;
                                    break;
                                }
                                this._openInPeek(editor, model);
                                _ctx.next = 12;
                                break;
                            case 5:
                                next = model.firstReference();
                                peek = model.references.length > 1 && gotoLocation === 'gotoAndPeek';
                                _ctx.next = 9;
                                return this._openReference(editor, editorService, next, this._configuration.openToSide, !peek);
                            case 9:
                                targetEditor = _ctx.sent;
                                if (peek && targetEditor) this._openInPeek(targetEditor, model);
                                else model.dispose();
                                // keep remaining locations around when using
                                // 'goto'-mode
                                if (gotoLocation === 'goto') symbolNavService.put(next);
                            case 12:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this);
                }));
            }
        },
        {
            key: "_openReference",
            value: function _openReference(editor, editorService, reference, sideBySide, highlight) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var range, targetEditor, modelNow, ids;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                range = undefined;
                                if (_modesJs.isLocationLink(reference)) range = reference.targetSelectionRange;
                                if (!range) range = reference.range;
                                if (range) {
                                    _ctx.next = 5;
                                    break;
                                }
                                return _ctx.abrupt("return", undefined);
                            case 5:
                                _ctx.next = 7;
                                return editorService.openCodeEditor({
                                    resource: reference.uri,
                                    options: {
                                        selection: _rangeJs.Range.collapseToStart(range),
                                        selectionRevealType: 3 /* NearTopIfOutsideViewport */ 
                                    }
                                }, editor, sideBySide);
                            case 7:
                                targetEditor = _ctx.sent;
                                if (targetEditor) {
                                    _ctx.next = 10;
                                    break;
                                }
                                return _ctx.abrupt("return", undefined);
                            case 10:
                                if (highlight) {
                                    modelNow = targetEditor.getModel();
                                    ids = targetEditor.deltaDecorations([], [
                                        {
                                            range: range,
                                            options: {
                                                description: 'symbol-navigate-action-highlight',
                                                className: 'symbolHighlight'
                                            }
                                        }
                                    ]);
                                    setTimeout(function() {
                                        if (targetEditor.getModel() === modelNow) targetEditor.deltaDecorations(ids, []);
                                    }, 350);
                                }
                                return _ctx.abrupt("return", targetEditor);
                            case 12:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee);
                }));
            }
        },
        {
            key: "_openInPeek",
            value: function _openInPeek(target, model) {
                var controller = _referencesControllerJs.ReferencesController.get(target);
                if (controller && target.hasModel()) controller.toggleWidget(target.getSelection(), _asyncJs.createCancelablePromise(function(_) {
                    return Promise.resolve(model);
                }), this._configuration.openInPeek);
                else model.dispose();
            }
        }
    ]);
    return SymbolNavigationAction;
}(_editorExtensionsJs.EditorAction);
var DefinitionAction = /*#__PURE__*/ function(SymbolNavigationAction) {
    "use strict";
    _helpers.inherits(DefinitionAction, SymbolNavigationAction);
    var _super = _helpers.createSuper(DefinitionAction);
    function DefinitionAction() {
        _helpers.classCallCheck(this, DefinitionAction);
        return _super.apply(this, arguments);
    }
    _helpers.createClass(DefinitionAction, [
        {
            key: "_getLocationModel",
            value: function _getLocationModel(model, position, token) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                _ctx.t0 = _referencesModelJs.ReferencesModel;
                                _ctx.next = 3;
                                return _goToSymbolJs.getDefinitionsAtPosition(model, position, token);
                            case 3:
                                _ctx.t1 = _ctx.sent;
                                _ctx.t2 = _nlsJs.localize('def.title', 'Definitions');
                                return _ctx.abrupt("return", new _ctx.t0(_ctx.t1, _ctx.t2));
                            case 6:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee);
                }));
            }
        },
        {
            key: "_getNoResultFoundMessage",
            value: function _getNoResultFoundMessage(info) {
                return info && info.word ? _nlsJs.localize('noResultWord', "No definition found for '{0}'", info.word) : _nlsJs.localize('generic.noResults', "No definition found");
            }
        },
        {
            key: "_getAlternativeCommand",
            value: function _getAlternativeCommand(editor) {
                return editor.getOption(50 /* gotoLocation */ ).alternativeDefinitionCommand;
            }
        },
        {
            key: "_getGoToPreference",
            value: function _getGoToPreference(editor) {
                return editor.getOption(50 /* gotoLocation */ ).multipleDefinitions;
            }
        }
    ]);
    return DefinitionAction;
}(SymbolNavigationAction);
var goToDefinitionKb = _platformJs.isWeb && !_browserJs.isStandalone ? 2118 /* F12 */  : 70 /* F12 */ ;
registerGoToAction((_a = /*#__PURE__*/ function(DefinitionAction) {
    "use strict";
    _helpers.inherits(GoToDefinitionAction, DefinitionAction);
    var _super = _helpers.createSuper(GoToDefinitionAction);
    function GoToDefinitionAction() {
        _helpers.classCallCheck(this, GoToDefinitionAction);
        var _this = _super.call(this, {
            openToSide: false,
            openInPeek: false,
            muteMessage: false
        }, {
            id: GoToDefinitionAction.id,
            label: _nlsJs.localize('actions.goToDecl.label', "Go to Definition"),
            alias: 'Go to Definition',
            precondition: _contextkeyJs.ContextKeyExpr.and(_editorContextKeysJs.EditorContextKeys.hasDefinitionProvider, _editorContextKeysJs.EditorContextKeys.isInWalkThroughSnippet.toNegated()),
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: goToDefinitionKb,
                weight: 100 /* EditorContrib */ 
            },
            contextMenuOpts: {
                group: 'navigation',
                order: 1.1
            }
        });
        _commandsJs.CommandsRegistry.registerCommandAlias('editor.action.goToDeclaration', GoToDefinitionAction.id);
        return _this;
    }
    return GoToDefinitionAction;
}(DefinitionAction), _a.id = 'editor.action.revealDefinition', _a));
registerGoToAction((_b = /*#__PURE__*/ function(DefinitionAction) {
    "use strict";
    _helpers.inherits(OpenDefinitionToSideAction, DefinitionAction);
    var _super = _helpers.createSuper(OpenDefinitionToSideAction);
    function OpenDefinitionToSideAction() {
        _helpers.classCallCheck(this, OpenDefinitionToSideAction);
        var _this = _super.call(this, {
            openToSide: true,
            openInPeek: false,
            muteMessage: false
        }, {
            id: OpenDefinitionToSideAction.id,
            label: _nlsJs.localize('actions.goToDeclToSide.label', "Open Definition to the Side"),
            alias: 'Open Definition to the Side',
            precondition: _contextkeyJs.ContextKeyExpr.and(_editorContextKeysJs.EditorContextKeys.hasDefinitionProvider, _editorContextKeysJs.EditorContextKeys.isInWalkThroughSnippet.toNegated()),
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: _keyCodesJs.KeyChord(2089 /* KeyK */ , goToDefinitionKb),
                weight: 100 /* EditorContrib */ 
            }
        });
        _commandsJs.CommandsRegistry.registerCommandAlias('editor.action.openDeclarationToTheSide', OpenDefinitionToSideAction.id);
        return _this;
    }
    return OpenDefinitionToSideAction;
}(DefinitionAction), _b.id = 'editor.action.revealDefinitionAside', _b));
registerGoToAction((_c = /*#__PURE__*/ function(DefinitionAction) {
    "use strict";
    _helpers.inherits(PeekDefinitionAction, DefinitionAction);
    var _super = _helpers.createSuper(PeekDefinitionAction);
    function PeekDefinitionAction() {
        _helpers.classCallCheck(this, PeekDefinitionAction);
        var _this = _super.call(this, {
            openToSide: false,
            openInPeek: true,
            muteMessage: false
        }, {
            id: PeekDefinitionAction.id,
            label: _nlsJs.localize('actions.previewDecl.label', "Peek Definition"),
            alias: 'Peek Definition',
            precondition: _contextkeyJs.ContextKeyExpr.and(_editorContextKeysJs.EditorContextKeys.hasDefinitionProvider, _peekViewJs.PeekContext.notInPeekEditor, _editorContextKeysJs.EditorContextKeys.isInWalkThroughSnippet.toNegated()),
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: 582 /* F12 */ ,
                linux: {
                    primary: 3140 /* F10 */ 
                },
                weight: 100 /* EditorContrib */ 
            },
            contextMenuOpts: {
                menuId: _actionsJs.MenuId.EditorContextPeek,
                group: 'peek',
                order: 2
            }
        });
        _commandsJs.CommandsRegistry.registerCommandAlias('editor.action.previewDeclaration', PeekDefinitionAction.id);
        return _this;
    }
    return PeekDefinitionAction;
}(DefinitionAction), _c.id = 'editor.action.peekDefinition', _c));
//#endregion
//#region --- DECLARATION
var DeclarationAction = /*#__PURE__*/ function(SymbolNavigationAction) {
    "use strict";
    _helpers.inherits(DeclarationAction, SymbolNavigationAction);
    var _super = _helpers.createSuper(DeclarationAction);
    function DeclarationAction() {
        _helpers.classCallCheck(this, DeclarationAction);
        return _super.apply(this, arguments);
    }
    _helpers.createClass(DeclarationAction, [
        {
            key: "_getLocationModel",
            value: function _getLocationModel(model, position, token) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                _ctx.t0 = _referencesModelJs.ReferencesModel;
                                _ctx.next = 3;
                                return _goToSymbolJs.getDeclarationsAtPosition(model, position, token);
                            case 3:
                                _ctx.t1 = _ctx.sent;
                                _ctx.t2 = _nlsJs.localize('decl.title', 'Declarations');
                                return _ctx.abrupt("return", new _ctx.t0(_ctx.t1, _ctx.t2));
                            case 6:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee);
                }));
            }
        },
        {
            key: "_getNoResultFoundMessage",
            value: function _getNoResultFoundMessage(info) {
                return info && info.word ? _nlsJs.localize('decl.noResultWord', "No declaration found for '{0}'", info.word) : _nlsJs.localize('decl.generic.noResults', "No declaration found");
            }
        },
        {
            key: "_getAlternativeCommand",
            value: function _getAlternativeCommand(editor) {
                return editor.getOption(50 /* gotoLocation */ ).alternativeDeclarationCommand;
            }
        },
        {
            key: "_getGoToPreference",
            value: function _getGoToPreference(editor) {
                return editor.getOption(50 /* gotoLocation */ ).multipleDeclarations;
            }
        }
    ]);
    return DeclarationAction;
}(SymbolNavigationAction);
registerGoToAction((_d = /*#__PURE__*/ function(DeclarationAction) {
    "use strict";
    _helpers.inherits(GoToDeclarationAction, DeclarationAction);
    var _super = _helpers.createSuper(GoToDeclarationAction);
    function GoToDeclarationAction() {
        _helpers.classCallCheck(this, GoToDeclarationAction);
        return _super.call(this, {
            openToSide: false,
            openInPeek: false,
            muteMessage: false
        }, {
            id: GoToDeclarationAction.id,
            label: _nlsJs.localize('actions.goToDeclaration.label', "Go to Declaration"),
            alias: 'Go to Declaration',
            precondition: _contextkeyJs.ContextKeyExpr.and(_editorContextKeysJs.EditorContextKeys.hasDeclarationProvider, _editorContextKeysJs.EditorContextKeys.isInWalkThroughSnippet.toNegated()),
            contextMenuOpts: {
                group: 'navigation',
                order: 1.3
            }
        });
    }
    _helpers.createClass(GoToDeclarationAction, [
        {
            key: "_getNoResultFoundMessage",
            value: function _getNoResultFoundMessage(info) {
                return info && info.word ? _nlsJs.localize('decl.noResultWord', "No declaration found for '{0}'", info.word) : _nlsJs.localize('decl.generic.noResults', "No declaration found");
            }
        }
    ]);
    return GoToDeclarationAction;
}(DeclarationAction), _d.id = 'editor.action.revealDeclaration', _d));
registerGoToAction(/*#__PURE__*/ function(DeclarationAction) {
    "use strict";
    _helpers.inherits(PeekDeclarationAction, DeclarationAction);
    var _super = _helpers.createSuper(PeekDeclarationAction);
    function PeekDeclarationAction() {
        _helpers.classCallCheck(this, PeekDeclarationAction);
        return _super.call(this, {
            openToSide: false,
            openInPeek: true,
            muteMessage: false
        }, {
            id: 'editor.action.peekDeclaration',
            label: _nlsJs.localize('actions.peekDecl.label', "Peek Declaration"),
            alias: 'Peek Declaration',
            precondition: _contextkeyJs.ContextKeyExpr.and(_editorContextKeysJs.EditorContextKeys.hasDeclarationProvider, _peekViewJs.PeekContext.notInPeekEditor, _editorContextKeysJs.EditorContextKeys.isInWalkThroughSnippet.toNegated()),
            contextMenuOpts: {
                menuId: _actionsJs.MenuId.EditorContextPeek,
                group: 'peek',
                order: 3
            }
        });
    }
    return PeekDeclarationAction;
}(DeclarationAction));
//#endregion
//#region --- TYPE DEFINITION
var TypeDefinitionAction = /*#__PURE__*/ function(SymbolNavigationAction) {
    "use strict";
    _helpers.inherits(TypeDefinitionAction, SymbolNavigationAction);
    var _super = _helpers.createSuper(TypeDefinitionAction);
    function TypeDefinitionAction() {
        _helpers.classCallCheck(this, TypeDefinitionAction);
        return _super.apply(this, arguments);
    }
    _helpers.createClass(TypeDefinitionAction, [
        {
            key: "_getLocationModel",
            value: function _getLocationModel(model, position, token) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                _ctx.t0 = _referencesModelJs.ReferencesModel;
                                _ctx.next = 3;
                                return _goToSymbolJs.getTypeDefinitionsAtPosition(model, position, token);
                            case 3:
                                _ctx.t1 = _ctx.sent;
                                _ctx.t2 = _nlsJs.localize('typedef.title', 'Type Definitions');
                                return _ctx.abrupt("return", new _ctx.t0(_ctx.t1, _ctx.t2));
                            case 6:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee);
                }));
            }
        },
        {
            key: "_getNoResultFoundMessage",
            value: function _getNoResultFoundMessage(info) {
                return info && info.word ? _nlsJs.localize('goToTypeDefinition.noResultWord', "No type definition found for '{0}'", info.word) : _nlsJs.localize('goToTypeDefinition.generic.noResults', "No type definition found");
            }
        },
        {
            key: "_getAlternativeCommand",
            value: function _getAlternativeCommand(editor) {
                return editor.getOption(50 /* gotoLocation */ ).alternativeTypeDefinitionCommand;
            }
        },
        {
            key: "_getGoToPreference",
            value: function _getGoToPreference(editor) {
                return editor.getOption(50 /* gotoLocation */ ).multipleTypeDefinitions;
            }
        }
    ]);
    return TypeDefinitionAction;
}(SymbolNavigationAction);
registerGoToAction((_e = /*#__PURE__*/ function(TypeDefinitionAction) {
    "use strict";
    _helpers.inherits(GoToTypeDefinitionAction, TypeDefinitionAction);
    var _super = _helpers.createSuper(GoToTypeDefinitionAction);
    function GoToTypeDefinitionAction() {
        _helpers.classCallCheck(this, GoToTypeDefinitionAction);
        return _super.call(this, {
            openToSide: false,
            openInPeek: false,
            muteMessage: false
        }, {
            id: GoToTypeDefinitionAction.ID,
            label: _nlsJs.localize('actions.goToTypeDefinition.label', "Go to Type Definition"),
            alias: 'Go to Type Definition',
            precondition: _contextkeyJs.ContextKeyExpr.and(_editorContextKeysJs.EditorContextKeys.hasTypeDefinitionProvider, _editorContextKeysJs.EditorContextKeys.isInWalkThroughSnippet.toNegated()),
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: 0,
                weight: 100 /* EditorContrib */ 
            },
            contextMenuOpts: {
                group: 'navigation',
                order: 1.4
            }
        });
    }
    return GoToTypeDefinitionAction;
}(TypeDefinitionAction), _e.ID = 'editor.action.goToTypeDefinition', _e));
registerGoToAction((_f = /*#__PURE__*/ function(TypeDefinitionAction) {
    "use strict";
    _helpers.inherits(PeekTypeDefinitionAction, TypeDefinitionAction);
    var _super = _helpers.createSuper(PeekTypeDefinitionAction);
    function PeekTypeDefinitionAction() {
        _helpers.classCallCheck(this, PeekTypeDefinitionAction);
        return _super.call(this, {
            openToSide: false,
            openInPeek: true,
            muteMessage: false
        }, {
            id: PeekTypeDefinitionAction.ID,
            label: _nlsJs.localize('actions.peekTypeDefinition.label', "Peek Type Definition"),
            alias: 'Peek Type Definition',
            precondition: _contextkeyJs.ContextKeyExpr.and(_editorContextKeysJs.EditorContextKeys.hasTypeDefinitionProvider, _peekViewJs.PeekContext.notInPeekEditor, _editorContextKeysJs.EditorContextKeys.isInWalkThroughSnippet.toNegated()),
            contextMenuOpts: {
                menuId: _actionsJs.MenuId.EditorContextPeek,
                group: 'peek',
                order: 4
            }
        });
    }
    return PeekTypeDefinitionAction;
}(TypeDefinitionAction), _f.ID = 'editor.action.peekTypeDefinition', _f));
//#endregion
//#region --- IMPLEMENTATION
var ImplementationAction = /*#__PURE__*/ function(SymbolNavigationAction) {
    "use strict";
    _helpers.inherits(ImplementationAction, SymbolNavigationAction);
    var _super = _helpers.createSuper(ImplementationAction);
    function ImplementationAction() {
        _helpers.classCallCheck(this, ImplementationAction);
        return _super.apply(this, arguments);
    }
    _helpers.createClass(ImplementationAction, [
        {
            key: "_getLocationModel",
            value: function _getLocationModel(model, position, token) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                _ctx.t0 = _referencesModelJs.ReferencesModel;
                                _ctx.next = 3;
                                return _goToSymbolJs.getImplementationsAtPosition(model, position, token);
                            case 3:
                                _ctx.t1 = _ctx.sent;
                                _ctx.t2 = _nlsJs.localize('impl.title', 'Implementations');
                                return _ctx.abrupt("return", new _ctx.t0(_ctx.t1, _ctx.t2));
                            case 6:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee);
                }));
            }
        },
        {
            key: "_getNoResultFoundMessage",
            value: function _getNoResultFoundMessage(info) {
                return info && info.word ? _nlsJs.localize('goToImplementation.noResultWord', "No implementation found for '{0}'", info.word) : _nlsJs.localize('goToImplementation.generic.noResults', "No implementation found");
            }
        },
        {
            key: "_getAlternativeCommand",
            value: function _getAlternativeCommand(editor) {
                return editor.getOption(50 /* gotoLocation */ ).alternativeImplementationCommand;
            }
        },
        {
            key: "_getGoToPreference",
            value: function _getGoToPreference(editor) {
                return editor.getOption(50 /* gotoLocation */ ).multipleImplementations;
            }
        }
    ]);
    return ImplementationAction;
}(SymbolNavigationAction);
registerGoToAction((_g = /*#__PURE__*/ function(ImplementationAction) {
    "use strict";
    _helpers.inherits(GoToImplementationAction, ImplementationAction);
    var _super = _helpers.createSuper(GoToImplementationAction);
    function GoToImplementationAction() {
        _helpers.classCallCheck(this, GoToImplementationAction);
        return _super.call(this, {
            openToSide: false,
            openInPeek: false,
            muteMessage: false
        }, {
            id: GoToImplementationAction.ID,
            label: _nlsJs.localize('actions.goToImplementation.label', "Go to Implementations"),
            alias: 'Go to Implementations',
            precondition: _contextkeyJs.ContextKeyExpr.and(_editorContextKeysJs.EditorContextKeys.hasImplementationProvider, _editorContextKeysJs.EditorContextKeys.isInWalkThroughSnippet.toNegated()),
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: 2118 /* F12 */ ,
                weight: 100 /* EditorContrib */ 
            },
            contextMenuOpts: {
                group: 'navigation',
                order: 1.45
            }
        });
    }
    return GoToImplementationAction;
}(ImplementationAction), _g.ID = 'editor.action.goToImplementation', _g));
registerGoToAction((_h = /*#__PURE__*/ function(ImplementationAction) {
    "use strict";
    _helpers.inherits(PeekImplementationAction, ImplementationAction);
    var _super = _helpers.createSuper(PeekImplementationAction);
    function PeekImplementationAction() {
        _helpers.classCallCheck(this, PeekImplementationAction);
        return _super.call(this, {
            openToSide: false,
            openInPeek: true,
            muteMessage: false
        }, {
            id: PeekImplementationAction.ID,
            label: _nlsJs.localize('actions.peekImplementation.label', "Peek Implementations"),
            alias: 'Peek Implementations',
            precondition: _contextkeyJs.ContextKeyExpr.and(_editorContextKeysJs.EditorContextKeys.hasImplementationProvider, _peekViewJs.PeekContext.notInPeekEditor, _editorContextKeysJs.EditorContextKeys.isInWalkThroughSnippet.toNegated()),
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: 3142 /* F12 */ ,
                weight: 100 /* EditorContrib */ 
            },
            contextMenuOpts: {
                menuId: _actionsJs.MenuId.EditorContextPeek,
                group: 'peek',
                order: 5
            }
        });
    }
    return PeekImplementationAction;
}(ImplementationAction), _h.ID = 'editor.action.peekImplementation', _h));
//#endregion
//#region --- REFERENCES
var ReferencesAction = /*#__PURE__*/ function(SymbolNavigationAction) {
    "use strict";
    _helpers.inherits(ReferencesAction, SymbolNavigationAction);
    var _super = _helpers.createSuper(ReferencesAction);
    function ReferencesAction() {
        _helpers.classCallCheck(this, ReferencesAction);
        return _super.apply(this, arguments);
    }
    _helpers.createClass(ReferencesAction, [
        {
            key: "_getNoResultFoundMessage",
            value: function _getNoResultFoundMessage(info) {
                return info ? _nlsJs.localize('references.no', "No references found for '{0}'", info.word) : _nlsJs.localize('references.noGeneric', "No references found");
            }
        },
        {
            key: "_getAlternativeCommand",
            value: function _getAlternativeCommand(editor) {
                return editor.getOption(50 /* gotoLocation */ ).alternativeReferenceCommand;
            }
        },
        {
            key: "_getGoToPreference",
            value: function _getGoToPreference(editor) {
                return editor.getOption(50 /* gotoLocation */ ).multipleReferences;
            }
        }
    ]);
    return ReferencesAction;
}(SymbolNavigationAction);
registerGoToAction(/*#__PURE__*/ function(ReferencesAction) {
    "use strict";
    _helpers.inherits(GoToReferencesAction, ReferencesAction);
    var _super = _helpers.createSuper(GoToReferencesAction);
    function GoToReferencesAction() {
        _helpers.classCallCheck(this, GoToReferencesAction);
        return _super.call(this, {
            openToSide: false,
            openInPeek: false,
            muteMessage: false
        }, {
            id: 'editor.action.goToReferences',
            label: _nlsJs.localize('goToReferences.label', "Go to References"),
            alias: 'Go to References',
            precondition: _contextkeyJs.ContextKeyExpr.and(_editorContextKeysJs.EditorContextKeys.hasReferenceProvider, _peekViewJs.PeekContext.notInPeekEditor, _editorContextKeysJs.EditorContextKeys.isInWalkThroughSnippet.toNegated()),
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: 1094 /* F12 */ ,
                weight: 100 /* EditorContrib */ 
            },
            contextMenuOpts: {
                group: 'navigation',
                order: 1.45
            }
        });
    }
    _helpers.createClass(GoToReferencesAction, [
        {
            key: "_getLocationModel",
            value: function _getLocationModel(model, position, token) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                _ctx.t0 = _referencesModelJs.ReferencesModel;
                                _ctx.next = 3;
                                return _goToSymbolJs.getReferencesAtPosition(model, position, true, token);
                            case 3:
                                _ctx.t1 = _ctx.sent;
                                _ctx.t2 = _nlsJs.localize('ref.title', 'References');
                                return _ctx.abrupt("return", new _ctx.t0(_ctx.t1, _ctx.t2));
                            case 6:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee);
                }));
            }
        }
    ]);
    return GoToReferencesAction;
}(ReferencesAction));
registerGoToAction(/*#__PURE__*/ function(ReferencesAction) {
    "use strict";
    _helpers.inherits(PeekReferencesAction, ReferencesAction);
    var _super = _helpers.createSuper(PeekReferencesAction);
    function PeekReferencesAction() {
        _helpers.classCallCheck(this, PeekReferencesAction);
        return _super.call(this, {
            openToSide: false,
            openInPeek: true,
            muteMessage: false
        }, {
            id: 'editor.action.referenceSearch.trigger',
            label: _nlsJs.localize('references.action.label', "Peek References"),
            alias: 'Peek References',
            precondition: _contextkeyJs.ContextKeyExpr.and(_editorContextKeysJs.EditorContextKeys.hasReferenceProvider, _peekViewJs.PeekContext.notInPeekEditor, _editorContextKeysJs.EditorContextKeys.isInWalkThroughSnippet.toNegated()),
            contextMenuOpts: {
                menuId: _actionsJs.MenuId.EditorContextPeek,
                group: 'peek',
                order: 6
            }
        });
    }
    _helpers.createClass(PeekReferencesAction, [
        {
            key: "_getLocationModel",
            value: function _getLocationModel(model, position, token) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                _ctx.t0 = _referencesModelJs.ReferencesModel;
                                _ctx.next = 3;
                                return _goToSymbolJs.getReferencesAtPosition(model, position, false, token);
                            case 3:
                                _ctx.t1 = _ctx.sent;
                                _ctx.t2 = _nlsJs.localize('ref.title', 'References');
                                return _ctx.abrupt("return", new _ctx.t0(_ctx.t1, _ctx.t2));
                            case 6:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee);
                }));
            }
        }
    ]);
    return PeekReferencesAction;
}(ReferencesAction));
//#endregion
//#region --- GENERIC goto symbols command
var GenericGoToLocationAction = /*#__PURE__*/ function(SymbolNavigationAction) {
    "use strict";
    _helpers.inherits(GenericGoToLocationAction, SymbolNavigationAction);
    var _super = _helpers.createSuper(GenericGoToLocationAction);
    function GenericGoToLocationAction(config, _references, _gotoMultipleBehaviour) {
        _helpers.classCallCheck(this, GenericGoToLocationAction);
        var _this;
        _this = _super.call(this, config, {
            id: 'editor.action.goToLocation',
            label: _nlsJs.localize('label.generic', "Go to Any Symbol"),
            alias: 'Go to Any Symbol',
            precondition: _contextkeyJs.ContextKeyExpr.and(_peekViewJs.PeekContext.notInPeekEditor, _editorContextKeysJs.EditorContextKeys.isInWalkThroughSnippet.toNegated())
        });
        _this._references = _references;
        _this._gotoMultipleBehaviour = _gotoMultipleBehaviour;
        return _this;
    }
    _helpers.createClass(GenericGoToLocationAction, [
        {
            key: "_getLocationModel",
            value: function _getLocationModel(_model, _position, _token) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                return _ctx.abrupt("return", new _referencesModelJs.ReferencesModel(this._references, _nlsJs.localize('generic.title', 'Locations')));
                            case 1:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this);
                }));
            }
        },
        {
            key: "_getNoResultFoundMessage",
            value: function _getNoResultFoundMessage(info) {
                return info && _nlsJs.localize('generic.noResult', "No results for '{0}'", info.word) || '';
            }
        },
        {
            key: "_getGoToPreference",
            value: function _getGoToPreference(editor) {
                var _a1;
                return (_a1 = this._gotoMultipleBehaviour) !== null && _a1 !== void 0 ? _a1 : editor.getOption(50 /* gotoLocation */ ).multipleReferences;
            }
        },
        {
            key: "_getAlternativeCommand",
            value: function _getAlternativeCommand() {
                return '';
            }
        }
    ]);
    return GenericGoToLocationAction;
}(SymbolNavigationAction);
_commandsJs.CommandsRegistry.registerCommand({
    id: 'editor.action.goToLocations',
    description: {
        description: 'Go to locations from a position in a file',
        args: [
            {
                name: 'uri',
                description: 'The text document in which to start',
                constraint: _uriJs.URI
            },
            {
                name: 'position',
                description: 'The position at which to start',
                constraint: _positionJs.Position.isIPosition
            },
            {
                name: 'locations',
                description: 'An array of locations.',
                constraint: Array
            },
            {
                name: 'multiple',
                description: 'Define what to do when having multiple results, either `peek`, `gotoAndPeek`, or `goto'
            },
            {
                name: 'noResultsMessage',
                description: 'Human readable message that shows when locations is empty.'
            }, 
        ]
    },
    handler: function(accessor1, resource, position, references, multiple, noResultsMessage, openInPeek) {
        return __awaiter(void 0, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
            var editorService, editor;
            return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                while(1)switch(_ctx.prev = _ctx.next){
                    case 0:
                        _typesJs.assertType(_uriJs.URI.isUri(resource));
                        _typesJs.assertType(_positionJs.Position.isIPosition(position));
                        _typesJs.assertType(Array.isArray(references));
                        _typesJs.assertType(typeof multiple === 'undefined' || typeof multiple === 'string');
                        _typesJs.assertType(typeof openInPeek === 'undefined' || typeof openInPeek === 'boolean');
                        editorService = accessor1.get(_codeEditorServiceJs.ICodeEditorService);
                        _ctx.next = 8;
                        return editorService.openCodeEditor({
                            resource: resource
                        }, editorService.getFocusedCodeEditor());
                    case 8:
                        editor = _ctx.sent;
                        if (!_editorBrowserJs.isCodeEditor(editor)) {
                            _ctx.next = 13;
                            break;
                        }
                        editor.setPosition(position);
                        editor.revealPositionInCenterIfOutsideViewport(position, 0 /* Smooth */ );
                        return _ctx.abrupt("return", editor.invokeWithinContext(function(accessor) {
                            var command = new /*#__PURE__*/ (function(GenericGoToLocationAction) {
                                "use strict";
                                _helpers.inherits(_class, GenericGoToLocationAction);
                                var _super = _helpers.createSuper(_class);
                                function _class() {
                                    _helpers.classCallCheck(this, _class);
                                    return _super.apply(this, arguments);
                                }
                                _helpers.createClass(_class, [
                                    {
                                        key: "_getNoResultFoundMessage",
                                        value: function _getNoResultFoundMessage(info) {
                                            return noResultsMessage || _helpers.get(_helpers.getPrototypeOf(_class.prototype), "_getNoResultFoundMessage", this).call(this, info);
                                        }
                                    }
                                ]);
                                return _class;
                            }(GenericGoToLocationAction))({
                                muteMessage: !Boolean(noResultsMessage),
                                openInPeek: Boolean(openInPeek),
                                openToSide: false
                            }, references, multiple);
                            accessor.get(_instantiationJs.IInstantiationService).invokeFunction(command.run.bind(command), editor);
                        }));
                    case 13:
                    case "end":
                        return _ctx.stop();
                }
            }, _callee);
        }));
    }
});
_commandsJs.CommandsRegistry.registerCommand({
    id: 'editor.action.peekLocations',
    description: {
        description: 'Peek locations from a position in a file',
        args: [
            {
                name: 'uri',
                description: 'The text document in which to start',
                constraint: _uriJs.URI
            },
            {
                name: 'position',
                description: 'The position at which to start',
                constraint: _positionJs.Position.isIPosition
            },
            {
                name: 'locations',
                description: 'An array of locations.',
                constraint: Array
            },
            {
                name: 'multiple',
                description: 'Define what to do when having multiple results, either `peek`, `gotoAndPeek`, or `goto'
            }, 
        ]
    },
    handler: function(accessor, resource, position, references, multiple) {
        return __awaiter(void 0, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
            return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                while(1)switch(_ctx.prev = _ctx.next){
                    case 0:
                        accessor.get(_commandsJs.ICommandService).executeCommand('editor.action.goToLocations', resource, position, references, multiple, undefined, true);
                    case 1:
                    case "end":
                        return _ctx.stop();
                }
            }, _callee);
        }));
    }
});
//#endregion
//#region --- REFERENCE search special commands
_commandsJs.CommandsRegistry.registerCommand({
    id: 'editor.action.findReferences',
    handler: function(accessor, resource, position) {
        _typesJs.assertType(_uriJs.URI.isUri(resource));
        _typesJs.assertType(_positionJs.Position.isIPosition(position));
        var codeEditorService = accessor.get(_codeEditorServiceJs.ICodeEditorService);
        return codeEditorService.openCodeEditor({
            resource: resource
        }, codeEditorService.getFocusedCodeEditor()).then(function(control) {
            if (!_editorBrowserJs.isCodeEditor(control) || !control.hasModel()) return undefined;
            var controller = _referencesControllerJs.ReferencesController.get(control);
            if (!controller) return undefined;
            var references1 = _asyncJs.createCancelablePromise(function(token) {
                return _goToSymbolJs.getReferencesAtPosition(control.getModel(), _positionJs.Position.lift(position), false, token).then(function(references) {
                    return new _referencesModelJs.ReferencesModel(references, _nlsJs.localize('ref.title', 'References'));
                });
            });
            var range = new _rangeJs.Range(position.lineNumber, position.column, position.lineNumber, position.column);
            return Promise.resolve(controller.toggleWidget(range, references1, false));
        });
    }
});
// use NEW command
_commandsJs.CommandsRegistry.registerCommandAlias('editor.action.showReferences', 'editor.action.peekLocations');
//#endregion
// -- unconditionally register goto-action
_actionsJs.MenuRegistry.appendMenuItems([
    {
        id: _actionsJs.MenuId.MenubarGoMenu,
        item: {
            command: {
                id: 'editor.action.revealDefinition',
                title: _nlsJs.localize({
                    key: 'miGotoDefinition',
                    comment: [
                        '&& denotes a mnemonic'
                    ]
                }, "Go to &&Definition")
            },
            group: '4_symbol_nav',
            order: 2
        }
    },
    {
        id: _actionsJs.MenuId.MenubarGoMenu,
        item: {
            command: {
                id: 'editor.action.revealDeclaration',
                title: _nlsJs.localize({
                    key: 'miGotoDeclaration',
                    comment: [
                        '&& denotes a mnemonic'
                    ]
                }, "Go to &&Declaration")
            },
            group: '4_symbol_nav',
            order: 3
        }
    },
    {
        id: _actionsJs.MenuId.MenubarGoMenu,
        item: {
            command: {
                id: 'editor.action.goToTypeDefinition',
                title: _nlsJs.localize({
                    key: 'miGotoTypeDefinition',
                    comment: [
                        '&& denotes a mnemonic'
                    ]
                }, "Go to &&Type Definition")
            },
            group: '4_symbol_nav',
            order: 3
        }
    },
    {
        id: _actionsJs.MenuId.MenubarGoMenu,
        item: {
            command: {
                id: 'editor.action.goToImplementation',
                title: _nlsJs.localize({
                    key: 'miGotoImplementation',
                    comment: [
                        '&& denotes a mnemonic'
                    ]
                }, "Go to &&Implementations")
            },
            group: '4_symbol_nav',
            order: 4
        }
    },
    {
        id: _actionsJs.MenuId.MenubarGoMenu,
        item: {
            command: {
                id: 'editor.action.goToReferences',
                title: _nlsJs.localize({
                    key: 'miGotoReference',
                    comment: [
                        '&& denotes a mnemonic'
                    ]
                }, "Go to &&References")
            },
            group: '4_symbol_nav',
            order: 5
        }
    }, 
]);

},{"@swc/helpers":"erO4s","regenerator-runtime":"12Ae8","../../../base/browser/browser.js":"fIqGd","../../../base/browser/ui/aria/aria.js":"8SLUe","../../../base/common/async.js":"kMhSh","../../../base/common/keyCodes.js":"4hRDv","../../../base/common/platform.js":"8pohV","../../../base/common/types.js":"lF7Cj","../../../base/common/uri.js":"4ZDLf","../../browser/core/editorState.js":"5J2rl","../../browser/editorBrowser.js":"4mNuz","../../browser/editorExtensions.js":"dFnlo","../../browser/services/codeEditorService.js":"izkTN","../../browser/widget/embeddedCodeEditorWidget.js":"e432u","../../common/core/position.js":"6xP0w","../../common/core/range.js":"VbyL8","../../common/editorContextKeys.js":"2t2PW","../../common/modes.js":"bRbY1","./peek/referencesController.js":"kj3BP","./referencesModel.js":"jPNVT","./symbolNavigation.js":"dffu0","../message/messageController.js":"2DdU3","../peekView/peekView.js":"j4XyJ","../../../nls.js":"9djYb","../../../platform/actions/common/actions.js":"1qoxQ","../../../platform/commands/common/commands.js":"eeuTC","../../../platform/contextkey/common/contextkey.js":"5cjav","../../../platform/instantiation/common/instantiation.js":"9ABZB","../../../platform/notification/common/notification.js":"baqho","../../../platform/progress/common/progress.js":"dJdAd","./goToSymbol.js":"i2LAo","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"kj3BP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ctxReferenceSearchVisible", function() {
    return ctxReferenceSearchVisible;
});
parcelHelpers.export(exports, "ReferencesController", function() {
    return ReferencesController;
});
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
var _asyncJs = require("../../../../base/common/async.js");
var _errorsJs = require("../../../../base/common/errors.js");
var _keyCodesJs = require("../../../../base/common/keyCodes.js");
var _lifecycleJs = require("../../../../base/common/lifecycle.js");
var _codeEditorServiceJs = require("../../../browser/services/codeEditorService.js");
var _positionJs = require("../../../common/core/position.js");
var _rangeJs = require("../../../common/core/range.js");
var _peekViewJs = require("../../peekView/peekView.js");
var _nlsJs = require("../../../../nls.js");
var _commandsJs = require("../../../../platform/commands/common/commands.js");
var _configurationJs = require("../../../../platform/configuration/common/configuration.js");
var _contextkeyJs = require("../../../../platform/contextkey/common/contextkey.js");
var _instantiationJs = require("../../../../platform/instantiation/common/instantiation.js");
var _keybindingsRegistryJs = require("../../../../platform/keybinding/common/keybindingsRegistry.js");
var _listServiceJs = require("../../../../platform/list/browser/listService.js");
var _notificationJs = require("../../../../platform/notification/common/notification.js");
var _storageJs = require("../../../../platform/storage/common/storage.js");
var _referencesModelJs = require("../referencesModel.js");
var _referencesWidgetJs = require("./referencesWidget.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var ctxReferenceSearchVisible = new _contextkeyJs.RawContextKey('referenceSearchVisible', false, _nlsJs.localize('referenceSearchVisible', "Whether reference peek is visible, like 'Peek References' or 'Peek Definition'"));
var ReferencesController = /*#__PURE__*/ function() {
    "use strict";
    function ReferencesController1(_defaultTreeKeyboardSupport, _editor, contextKeyService, _editorService, _notificationService, _instantiationService, _storageService, _configurationService) {
        _helpers.classCallCheck(this, ReferencesController1);
        this._defaultTreeKeyboardSupport = _defaultTreeKeyboardSupport;
        this._editor = _editor;
        this._editorService = _editorService;
        this._notificationService = _notificationService;
        this._instantiationService = _instantiationService;
        this._storageService = _storageService;
        this._configurationService = _configurationService;
        this._disposables = new _lifecycleJs.DisposableStore();
        this._requestIdPool = 0;
        this._ignoreModelChangeEvent = false;
        this._referenceSearchVisible = ctxReferenceSearchVisible.bindTo(contextKeyService);
    }
    _helpers.createClass(ReferencesController1, [
        {
            key: "dispose",
            value: function dispose() {
                var _a, _b;
                this._referenceSearchVisible.reset();
                this._disposables.dispose();
                (_a = this._widget) === null || _a === void 0 || _a.dispose();
                (_b = this._model) === null || _b === void 0 || _b.dispose();
                this._widget = undefined;
                this._model = undefined;
            }
        },
        {
            key: "toggleWidget",
            value: function toggleWidget(range, modelPromise, peekMode) {
                var _this2 = this;
                // close current widget and return early is position didn't change
                var widgetPosition;
                if (this._widget) widgetPosition = this._widget.position;
                this.closeWidget();
                if (!!widgetPosition && range.containsPosition(widgetPosition)) return;
                this._peekMode = peekMode;
                this._referenceSearchVisible.set(true);
                // close the widget on model/mode changes
                this._disposables.add(this._editor.onDidChangeModelLanguage(function() {
                    _this2.closeWidget();
                }));
                this._disposables.add(this._editor.onDidChangeModel(function() {
                    if (!_this2._ignoreModelChangeEvent) _this2.closeWidget();
                }));
                var storageKey = 'peekViewLayout';
                var data = _referencesWidgetJs.LayoutData.fromJSON(this._storageService.get(storageKey, 0 /* GLOBAL */ , '{}'));
                this._widget = this._instantiationService.createInstance(_referencesWidgetJs.ReferenceWidget, this._editor, this._defaultTreeKeyboardSupport, data);
                this._widget.setTitle(_nlsJs.localize('labelLoading', "Loading..."));
                this._widget.show(range);
                this._disposables.add(this._widget.onDidClose(function() {
                    modelPromise.cancel();
                    if (_this2._widget) {
                        _this2._storageService.store(storageKey, JSON.stringify(_this2._widget.layoutData), 0 /* GLOBAL */ , 1 /* MACHINE */ );
                        _this2._widget = undefined;
                    }
                    _this2.closeWidget();
                }));
                this._disposables.add(this._widget.onDidSelectReference(function(event) {
                    var element = event.element, kind = event.kind;
                    if (!element) return;
                    switch(kind){
                        case 'open':
                            if (event.source !== 'editor' || !_this2._configurationService.getValue('editor.stablePeek')) // when stable peek is configured we don't close
                            // the peek window on selecting the editor
                            _this2.openReference(element, false, false);
                            break;
                        case 'side':
                            _this2.openReference(element, true, false);
                            break;
                        case 'goto':
                            if (peekMode) _this2._gotoReference(element);
                            else _this2.openReference(element, false, true);
                            break;
                    }
                }));
                var requestId = ++this._requestIdPool;
                modelPromise.then(function(model) {
                    var _this1 = _this2;
                    var _a;
                    // still current request? widget still open?
                    if (requestId !== _this2._requestIdPool || !_this2._widget) {
                        model.dispose();
                        return undefined;
                    }
                    (_a = _this2._model) === null || _a === void 0 || _a.dispose();
                    _this2._model = model;
                    // show widget
                    return _this2._widget.setModel(_this2._model).then(function() {
                        if (_this1._widget && _this1._model && _this1._editor.hasModel()) {
                            var _this = _this1;
                            // set title
                            if (!_this1._model.isEmpty) _this1._widget.setMetaTitle(_nlsJs.localize('metaTitle.N', "{0} ({1})", _this1._model.title, _this1._model.references.length));
                            else _this1._widget.setMetaTitle('');
                            // set 'best' selection
                            var uri = _this1._editor.getModel().uri;
                            var pos = new _positionJs.Position(range.startLineNumber, range.startColumn);
                            var selection = _this1._model.nearestReference(uri, pos);
                            if (selection) return _this1._widget.setSelection(selection).then(function() {
                                if (_this._widget && _this._editor.getOption(76 /* peekWidgetDefaultFocus */ ) === 'editor') _this._widget.focusOnPreviewEditor();
                            });
                        }
                        return undefined;
                    });
                }, function(error) {
                    _this2._notificationService.error(error);
                });
            }
        },
        {
            key: "changeFocusBetweenPreviewAndReferences",
            value: function changeFocusBetweenPreviewAndReferences() {
                if (!this._widget) // can be called while still resolving...
                return;
                if (this._widget.isPreviewEditorFocused()) this._widget.focusOnReferenceTree();
                else this._widget.focusOnPreviewEditor();
            }
        },
        {
            key: "goToNextOrPreviousReference",
            value: function goToNextOrPreviousReference(fwd) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var currentPosition, source, target, editorFocus, previewEditorFocus;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                if (!(!this._editor.hasModel() || !this._model || !this._widget)) {
                                    _ctx.next = 2;
                                    break;
                                }
                                return _ctx.abrupt("return");
                            case 2:
                                currentPosition = this._widget.position;
                                if (currentPosition) {
                                    _ctx.next = 5;
                                    break;
                                }
                                return _ctx.abrupt("return");
                            case 5:
                                source = this._model.nearestReference(this._editor.getModel().uri, currentPosition);
                                if (source) {
                                    _ctx.next = 8;
                                    break;
                                }
                                return _ctx.abrupt("return");
                            case 8:
                                target = this._model.nextOrPreviousReference(source, fwd);
                                editorFocus = this._editor.hasTextFocus();
                                previewEditorFocus = this._widget.isPreviewEditorFocused();
                                _ctx.next = 13;
                                return this._widget.setSelection(target);
                            case 13:
                                _ctx.next = 15;
                                return this._gotoReference(target);
                            case 15:
                                if (editorFocus) this._editor.focus();
                                else if (this._widget && previewEditorFocus) this._widget.focusOnPreviewEditor();
                            case 16:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this);
                }));
            }
        },
        {
            key: "revealReference",
            value: function revealReference(reference) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                if (!(!this._editor.hasModel() || !this._model || !this._widget)) {
                                    _ctx.next = 2;
                                    break;
                                }
                                return _ctx.abrupt("return");
                            case 2:
                                _ctx.next = 4;
                                return this._widget.revealReference(reference);
                            case 4:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this);
                }));
            }
        },
        {
            key: "closeWidget",
            value: function closeWidget() {
                var focusEditor = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
                var _a, _b;
                (_a = this._widget) === null || _a === void 0 || _a.dispose();
                (_b = this._model) === null || _b === void 0 || _b.dispose();
                this._referenceSearchVisible.reset();
                this._disposables.clear();
                this._widget = undefined;
                this._model = undefined;
                if (focusEditor) this._editor.focus();
                this._requestIdPool += 1; // Cancel pending requests
            }
        },
        {
            key: "_gotoReference",
            value: function _gotoReference(ref) {
                var _this = this;
                if (this._widget) this._widget.hide();
                this._ignoreModelChangeEvent = true;
                var range = _rangeJs.Range.lift(ref.range).collapseToStart();
                return this._editorService.openCodeEditor({
                    resource: ref.uri,
                    options: {
                        selection: range
                    }
                }, this._editor).then(function(openedEditor) {
                    var _a;
                    _this._ignoreModelChangeEvent = false;
                    if (!openedEditor || !_this._widget) {
                        // something went wrong...
                        _this.closeWidget();
                        return;
                    }
                    if (_this._editor === openedEditor) {
                        //
                        _this._widget.show(range);
                        _this._widget.focusOnReferenceTree();
                    } else {
                        // we opened a different editor instance which means a different controller instance.
                        // therefore we stop with this controller and continue with the other
                        var other = ReferencesController1.get(openedEditor);
                        var model = _this._model.clone();
                        _this.closeWidget();
                        openedEditor.focus();
                        other.toggleWidget(range, _asyncJs.createCancelablePromise(function(_) {
                            return Promise.resolve(model);
                        }), (_a = _this._peekMode) !== null && _a !== void 0 ? _a : false);
                    }
                }, function(err) {
                    _this._ignoreModelChangeEvent = false;
                    _errorsJs.onUnexpectedError(err);
                });
            }
        },
        {
            key: "openReference",
            value: function openReference(ref, sideBySide, pinned) {
                // clear stage
                if (!sideBySide) this.closeWidget();
                var uri = ref.uri, range = ref.range;
                this._editorService.openCodeEditor({
                    resource: uri,
                    options: {
                        selection: range,
                        pinned: pinned
                    }
                }, this._editor, sideBySide);
            }
        }
    ], [
        {
            key: "get",
            value: function get(editor) {
                return editor.getContribution(ReferencesController1.ID);
            }
        }
    ]);
    return ReferencesController1;
}();
ReferencesController.ID = 'editor.contrib.referencesController';
ReferencesController = __decorate([
    __param(2, _contextkeyJs.IContextKeyService),
    __param(3, _codeEditorServiceJs.ICodeEditorService),
    __param(4, _notificationJs.INotificationService),
    __param(5, _instantiationJs.IInstantiationService),
    __param(6, _storageJs.IStorageService),
    __param(7, _configurationJs.IConfigurationService)
], ReferencesController);
function withController(accessor, fn) {
    var outerEditor = _peekViewJs.getOuterEditor(accessor);
    if (!outerEditor) return;
    var controller = ReferencesController.get(outerEditor);
    if (controller) fn(controller);
}
_keybindingsRegistryJs.KeybindingsRegistry.registerCommandAndKeybindingRule({
    id: 'togglePeekWidgetFocus',
    weight: 100 /* EditorContrib */ ,
    primary: _keyCodesJs.KeyChord(2089 /* KeyK */ , 60 /* F2 */ ),
    when: _contextkeyJs.ContextKeyExpr.or(ctxReferenceSearchVisible, _peekViewJs.PeekContext.inPeekEditor),
    handler: function(accessor) {
        withController(accessor, function(controller) {
            controller.changeFocusBetweenPreviewAndReferences();
        });
    }
});
_keybindingsRegistryJs.KeybindingsRegistry.registerCommandAndKeybindingRule({
    id: 'goToNextReference',
    weight: 90,
    primary: 62 /* F4 */ ,
    secondary: [
        70 /* F12 */ 
    ],
    when: _contextkeyJs.ContextKeyExpr.or(ctxReferenceSearchVisible, _peekViewJs.PeekContext.inPeekEditor),
    handler: function(accessor) {
        withController(accessor, function(controller) {
            controller.goToNextOrPreviousReference(true);
        });
    }
});
_keybindingsRegistryJs.KeybindingsRegistry.registerCommandAndKeybindingRule({
    id: 'goToPreviousReference',
    weight: 90,
    primary: 1086 /* F4 */ ,
    secondary: [
        1094 /* F12 */ 
    ],
    when: _contextkeyJs.ContextKeyExpr.or(ctxReferenceSearchVisible, _peekViewJs.PeekContext.inPeekEditor),
    handler: function(accessor) {
        withController(accessor, function(controller) {
            controller.goToNextOrPreviousReference(false);
        });
    }
});
// commands that aren't needed anymore because there is now ContextKeyExpr.OR
_commandsJs.CommandsRegistry.registerCommandAlias('goToNextReferenceFromEmbeddedEditor', 'goToNextReference');
_commandsJs.CommandsRegistry.registerCommandAlias('goToPreviousReferenceFromEmbeddedEditor', 'goToPreviousReference');
// close
_commandsJs.CommandsRegistry.registerCommandAlias('closeReferenceSearchEditor', 'closeReferenceSearch');
_commandsJs.CommandsRegistry.registerCommand('closeReferenceSearch', function(accessor) {
    return withController(accessor, function(controller) {
        return controller.closeWidget();
    });
});
_keybindingsRegistryJs.KeybindingsRegistry.registerKeybindingRule({
    id: 'closeReferenceSearch',
    weight: -1,
    primary: 9 /* Escape */ ,
    secondary: [
        1033 /* Escape */ 
    ],
    when: _contextkeyJs.ContextKeyExpr.and(_peekViewJs.PeekContext.inPeekEditor, _contextkeyJs.ContextKeyExpr.not('config.editor.stablePeek'))
});
_keybindingsRegistryJs.KeybindingsRegistry.registerKeybindingRule({
    id: 'closeReferenceSearch',
    weight: 250,
    primary: 9 /* Escape */ ,
    secondary: [
        1033 /* Escape */ 
    ],
    when: _contextkeyJs.ContextKeyExpr.and(ctxReferenceSearchVisible, _contextkeyJs.ContextKeyExpr.not('config.editor.stablePeek'))
});
_keybindingsRegistryJs.KeybindingsRegistry.registerCommandAndKeybindingRule({
    id: 'revealReference',
    weight: 200 /* WorkbenchContrib */ ,
    primary: 3 /* Enter */ ,
    mac: {
        primary: 3 /* Enter */ ,
        secondary: [
            2066 /* DownArrow */ 
        ]
    },
    when: _contextkeyJs.ContextKeyExpr.and(ctxReferenceSearchVisible, _listServiceJs.WorkbenchListFocusContextKey),
    handler: function(accessor) {
        var _a;
        var listService = accessor.get(_listServiceJs.IListService);
        var focus = (_a = listService.lastFocusedList) === null || _a === void 0 ? void 0 : _a.getFocus();
        if (Array.isArray(focus) && focus[0] instanceof _referencesModelJs.OneReference) withController(accessor, function(controller) {
            return controller.revealReference(focus[0]);
        });
    }
});
_keybindingsRegistryJs.KeybindingsRegistry.registerCommandAndKeybindingRule({
    id: 'openReferenceToSide',
    weight: 100 /* EditorContrib */ ,
    primary: 2051 /* Enter */ ,
    mac: {
        primary: 259 /* Enter */ 
    },
    when: _contextkeyJs.ContextKeyExpr.and(ctxReferenceSearchVisible, _listServiceJs.WorkbenchListFocusContextKey),
    handler: function(accessor) {
        var _a;
        var listService = accessor.get(_listServiceJs.IListService);
        var focus = (_a = listService.lastFocusedList) === null || _a === void 0 ? void 0 : _a.getFocus();
        if (Array.isArray(focus) && focus[0] instanceof _referencesModelJs.OneReference) withController(accessor, function(controller) {
            return controller.openReference(focus[0], true, true);
        });
    }
});
_commandsJs.CommandsRegistry.registerCommand('openReference', function(accessor) {
    var _a;
    var listService = accessor.get(_listServiceJs.IListService);
    var focus = (_a = listService.lastFocusedList) === null || _a === void 0 ? void 0 : _a.getFocus();
    if (Array.isArray(focus) && focus[0] instanceof _referencesModelJs.OneReference) withController(accessor, function(controller) {
        return controller.openReference(focus[0], false, true);
    });
});

},{"@swc/helpers":"erO4s","regenerator-runtime":"12Ae8","../../../../base/common/async.js":"kMhSh","../../../../base/common/errors.js":"afm4i","../../../../base/common/keyCodes.js":"4hRDv","../../../../base/common/lifecycle.js":"bcbPy","../../../browser/services/codeEditorService.js":"izkTN","../../../common/core/position.js":"6xP0w","../../../common/core/range.js":"VbyL8","../../peekView/peekView.js":"j4XyJ","../../../../nls.js":"9djYb","../../../../platform/commands/common/commands.js":"eeuTC","../../../../platform/configuration/common/configuration.js":"9wFfb","../../../../platform/contextkey/common/contextkey.js":"5cjav","../../../../platform/instantiation/common/instantiation.js":"9ABZB","../../../../platform/keybinding/common/keybindingsRegistry.js":"5cRx5","../../../../platform/list/browser/listService.js":"ddOlp","../../../../platform/notification/common/notification.js":"baqho","../../../../platform/storage/common/storage.js":"1m95n","../referencesModel.js":"jPNVT","./referencesWidget.js":"bbAc3","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"jPNVT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "OneReference", function() {
    return OneReference;
});
parcelHelpers.export(exports, "FilePreview", function() {
    return FilePreview;
});
parcelHelpers.export(exports, "FileReferences", function() {
    return FileReferences;
});
parcelHelpers.export(exports, "ReferencesModel", function() {
    return ReferencesModel;
});
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
var _errorsJs = require("../../../base/common/errors.js");
var _eventJs = require("../../../base/common/event.js");
var _idGeneratorJs = require("../../../base/common/idGenerator.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _mapJs = require("../../../base/common/map.js");
var _resourcesJs = require("../../../base/common/resources.js");
var _stringsJs = require("../../../base/common/strings.js");
var _rangeJs = require("../../common/core/range.js");
var _nlsJs = require("../../../nls.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var OneReference = /*#__PURE__*/ function() {
    "use strict";
    function OneReference(isProviderFirst, parent, link, _rangeCallback) {
        _helpers.classCallCheck(this, OneReference);
        this.isProviderFirst = isProviderFirst;
        this.parent = parent;
        this.link = link;
        this._rangeCallback = _rangeCallback;
        this.id = _idGeneratorJs.defaultGenerator.nextId();
    }
    _helpers.createClass(OneReference, [
        {
            key: "uri",
            get: function get() {
                return this.link.uri;
            }
        },
        {
            key: "range",
            get: function get() {
                var _a, _b;
                return (_b = (_a = this._range) !== null && _a !== void 0 ? _a : this.link.targetSelectionRange) !== null && _b !== void 0 ? _b : this.link.range;
            },
            set: function set(value) {
                this._range = value;
                this._rangeCallback(this);
            }
        },
        {
            key: "ariaMessage",
            get: function get() {
                var _a;
                var preview = (_a = this.parent.getPreview(this)) === null || _a === void 0 ? void 0 : _a.preview(this.range);
                if (!preview) return _nlsJs.localize('aria.oneReference', "symbol in {0} on line {1} at column {2}", _resourcesJs.basename(this.uri), this.range.startLineNumber, this.range.startColumn);
                else return _nlsJs.localize({
                    key: 'aria.oneReference.preview',
                    comment: [
                        'Placeholders are: 0: filename, 1:line number, 2: column number, 3: preview snippet of source code'
                    ]
                }, "symbol in {0} on line {1} at column {2}, {3}", _resourcesJs.basename(this.uri), this.range.startLineNumber, this.range.startColumn, preview.value);
            }
        }
    ]);
    return OneReference;
}();
var FilePreview = /*#__PURE__*/ function() {
    "use strict";
    function FilePreview(_modelReference) {
        _helpers.classCallCheck(this, FilePreview);
        this._modelReference = _modelReference;
    }
    _helpers.createClass(FilePreview, [
        {
            key: "dispose",
            value: function dispose() {
                this._modelReference.dispose();
            }
        },
        {
            key: "preview",
            value: function preview(range) {
                var n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 8;
                var model = this._modelReference.object.textEditorModel;
                if (!model) return undefined;
                var startLineNumber = range.startLineNumber, startColumn = range.startColumn, endLineNumber = range.endLineNumber, endColumn = range.endColumn;
                var word = model.getWordUntilPosition({
                    lineNumber: startLineNumber,
                    column: startColumn - n
                });
                var beforeRange = new _rangeJs.Range(startLineNumber, word.startColumn, startLineNumber, startColumn);
                var afterRange = new _rangeJs.Range(endLineNumber, endColumn, endLineNumber, 1073741824 /* MAX_SAFE_SMALL_INTEGER */ );
                var before = model.getValueInRange(beforeRange).replace(/^\s+/, '');
                var inside = model.getValueInRange(range);
                var after = model.getValueInRange(afterRange).replace(/\s+$/, '');
                return {
                    value: before + inside + after,
                    highlight: {
                        start: before.length,
                        end: before.length + inside.length
                    }
                };
            }
        }
    ]);
    return FilePreview;
}();
var FileReferences = /*#__PURE__*/ function() {
    "use strict";
    function FileReferences(parent, uri) {
        _helpers.classCallCheck(this, FileReferences);
        this.parent = parent;
        this.uri = uri;
        this.children = [];
        this._previews = new _mapJs.ResourceMap();
    }
    _helpers.createClass(FileReferences, [
        {
            key: "dispose",
            value: function dispose() {
                _lifecycleJs.dispose(this._previews.values());
                this._previews.clear();
            }
        },
        {
            key: "getPreview",
            value: function getPreview(child) {
                return this._previews.get(child.uri);
            }
        },
        {
            key: "ariaMessage",
            get: function get() {
                var len = this.children.length;
                if (len === 1) return _nlsJs.localize('aria.fileReferences.1', "1 symbol in {0}, full path {1}", _resourcesJs.basename(this.uri), this.uri.fsPath);
                else return _nlsJs.localize('aria.fileReferences.N', "{0} symbols in {1}, full path {2}", len, _resourcesJs.basename(this.uri), this.uri.fsPath);
            }
        },
        {
            key: "resolve",
            value: function resolve(textModelResolverService) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, child, ref;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                if (!(this._previews.size !== 0)) {
                                    _ctx.next = 2;
                                    break;
                                }
                                return _ctx.abrupt("return", this);
                            case 2:
                                _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                                _ctx.prev = 3;
                                _iterator = this.children[Symbol.iterator]();
                            case 5:
                                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                                    _ctx.next = 22;
                                    break;
                                }
                                child = _step.value;
                                if (!this._previews.has(child.uri)) {
                                    _ctx.next = 9;
                                    break;
                                }
                                return _ctx.abrupt("continue", 19);
                            case 9:
                                _ctx.prev = 9;
                                _ctx.next = 12;
                                return textModelResolverService.createModelReference(child.uri);
                            case 12:
                                ref = _ctx.sent;
                                this._previews.set(child.uri, new FilePreview(ref));
                                _ctx.next = 19;
                                break;
                            case 16:
                                _ctx.prev = 16;
                                _ctx.t0 = _ctx["catch"](9);
                                _errorsJs.onUnexpectedError(_ctx.t0);
                            case 19:
                                _iteratorNormalCompletion = true;
                                _ctx.next = 5;
                                break;
                            case 22:
                                _ctx.next = 28;
                                break;
                            case 24:
                                _ctx.prev = 24;
                                _ctx.t1 = _ctx["catch"](3);
                                _didIteratorError = true;
                                _iteratorError = _ctx.t1;
                            case 28:
                                _ctx.prev = 28;
                                _ctx.prev = 29;
                                if (!_iteratorNormalCompletion && _iterator.return != null) {
                                    _iterator.return();
                                }
                            case 31:
                                _ctx.prev = 31;
                                if (!_didIteratorError) {
                                    _ctx.next = 34;
                                    break;
                                }
                                throw _iteratorError;
                            case 34:
                                return _ctx.finish(31);
                            case 35:
                                return _ctx.finish(28);
                            case 36:
                                return _ctx.abrupt("return", this);
                            case 37:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this, [
                        [
                            3,
                            24,
                            28,
                            36
                        ],
                        [
                            9,
                            16
                        ],
                        [
                            29,
                            ,
                            31,
                            35
                        ]
                    ]);
                }));
            }
        }
    ]);
    return FileReferences;
}();
var ReferencesModel = /*#__PURE__*/ function() {
    "use strict";
    function ReferencesModel(links, title) {
        _helpers.classCallCheck(this, ReferencesModel);
        this.groups = [];
        this.references = [];
        this._onDidChangeReferenceRange = new _eventJs.Emitter();
        this.onDidChangeReferenceRange = this._onDidChangeReferenceRange.event;
        this._links = links;
        this._title = title;
        // grouping and sorting
        var _links = _helpers.slicedToArray(links, 1), providersFirst = _links[0];
        links.sort(ReferencesModel._compareReferences);
        var current;
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = links[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var link = _step.value;
                if (!current || !_resourcesJs.extUri.isEqual(current.uri, link.uri, true)) {
                    // new group
                    current = new FileReferences(this, link.uri);
                    this.groups.push(current);
                }
                // append, check for equality first!
                if (current.children.length === 0 || ReferencesModel._compareReferences(link, current.children[current.children.length - 1]) !== 0) {
                    var _this = this;
                    var oneRef = new OneReference(providersFirst === link, current, link, function(ref) {
                        return _this._onDidChangeReferenceRange.fire(ref);
                    });
                    this.references.push(oneRef);
                    current.children.push(oneRef);
                }
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
    }
    _helpers.createClass(ReferencesModel, [
        {
            key: "dispose",
            value: function dispose() {
                _lifecycleJs.dispose(this.groups);
                this._onDidChangeReferenceRange.dispose();
                this.groups.length = 0;
            }
        },
        {
            key: "clone",
            value: function clone() {
                return new ReferencesModel(this._links, this._title);
            }
        },
        {
            key: "title",
            get: function get() {
                return this._title;
            }
        },
        {
            key: "isEmpty",
            get: function get() {
                return this.groups.length === 0;
            }
        },
        {
            key: "ariaMessage",
            get: function get() {
                if (this.isEmpty) return _nlsJs.localize('aria.result.0', "No results found");
                else if (this.references.length === 1) return _nlsJs.localize('aria.result.1', "Found 1 symbol in {0}", this.references[0].uri.fsPath);
                else if (this.groups.length === 1) return _nlsJs.localize('aria.result.n1', "Found {0} symbols in {1}", this.references.length, this.groups[0].uri.fsPath);
                else return _nlsJs.localize('aria.result.nm', "Found {0} symbols in {1} files", this.references.length, this.groups.length);
            }
        },
        {
            key: "nextOrPreviousReference",
            value: function nextOrPreviousReference(reference, next) {
                var parent = reference.parent;
                var idx = parent.children.indexOf(reference);
                var childCount = parent.children.length;
                var groupCount = parent.parent.groups.length;
                if (groupCount === 1 || next && idx + 1 < childCount || !next && idx > 0) {
                    // cycling within one file
                    if (next) idx = (idx + 1) % childCount;
                    else idx = (idx + childCount - 1) % childCount;
                    return parent.children[idx];
                }
                idx = parent.parent.groups.indexOf(parent);
                if (next) {
                    idx = (idx + 1) % groupCount;
                    return parent.parent.groups[idx].children[0];
                } else {
                    idx = (idx + groupCount - 1) % groupCount;
                    return parent.parent.groups[idx].children[parent.parent.groups[idx].children.length - 1];
                }
            }
        },
        {
            key: "nearestReference",
            value: function nearestReference(resource, position) {
                var nearest = this.references.map(function(ref, idx) {
                    return {
                        idx: idx,
                        prefixLen: _stringsJs.commonPrefixLength(ref.uri.toString(), resource.toString()),
                        offsetDist: Math.abs(ref.range.startLineNumber - position.lineNumber) * 100 + Math.abs(ref.range.startColumn - position.column)
                    };
                }).sort(function(a, b) {
                    if (a.prefixLen > b.prefixLen) return -1;
                    else if (a.prefixLen < b.prefixLen) return 1;
                    else if (a.offsetDist < b.offsetDist) return -1;
                    else if (a.offsetDist > b.offsetDist) return 1;
                    else return 0;
                })[0];
                if (nearest) return this.references[nearest.idx];
                return undefined;
            }
        },
        {
            key: "referenceAt",
            value: function referenceAt(resource, position) {
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.references[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var ref = _step.value;
                        if (ref.uri.toString() === resource.toString()) {
                            if (_rangeJs.Range.containsPosition(ref.range, position)) return ref;
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return undefined;
            }
        },
        {
            key: "firstReference",
            value: function firstReference() {
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.references[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var ref = _step.value;
                        if (ref.isProviderFirst) return ref;
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return this.references[0];
            }
        }
    ], [
        {
            key: "_compareReferences",
            value: function _compareReferences(a, b) {
                return _resourcesJs.extUri.compare(a.uri, b.uri) || _rangeJs.Range.compareRangesUsingStarts(a.range, b.range);
            }
        }
    ]);
    return ReferencesModel;
}();

},{"@swc/helpers":"erO4s","regenerator-runtime":"12Ae8","../../../base/common/errors.js":"afm4i","../../../base/common/event.js":"9IBcK","../../../base/common/idGenerator.js":"cIG4F","../../../base/common/lifecycle.js":"bcbPy","../../../base/common/map.js":"4OXsW","../../../base/common/resources.js":"14HNj","../../../base/common/strings.js":"jsb6w","../../common/core/range.js":"VbyL8","../../../nls.js":"9djYb","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"bbAc3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LayoutData", function() {
    return LayoutData;
});
parcelHelpers.export(exports, "ReferenceWidget", function() {
    return ReferenceWidget;
});
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
var _domJs = require("../../../../base/browser/dom.js");
var _splitviewJs = require("../../../../base/browser/ui/splitview/splitview.js");
var _colorJs = require("../../../../base/common/color.js");
var _eventJs = require("../../../../base/common/event.js");
var _lifecycleJs = require("../../../../base/common/lifecycle.js");
var _networkJs = require("../../../../base/common/network.js");
var _resourcesJs = require("../../../../base/common/resources.js");
var _referencesWidgetCss = require("./referencesWidget.css");
var _embeddedCodeEditorWidgetJs = require("../../../browser/widget/embeddedCodeEditorWidget.js");
var _rangeJs = require("../../../common/core/range.js");
var _textModelJs = require("../../../common/model/textModel.js");
var _languageConfigurationRegistryJs = require("../../../common/modes/languageConfigurationRegistry.js");
var _modeServiceJs = require("../../../common/services/modeService.js");
var _resolverServiceJs = require("../../../common/services/resolverService.js");
var _referencesTreeJs = require("./referencesTree.js");
var _peekViewJs = require("../../peekView/peekView.js");
var _nlsJs = require("../../../../nls.js");
var _instantiationJs = require("../../../../platform/instantiation/common/instantiation.js");
var _keybindingJs = require("../../../../platform/keybinding/common/keybinding.js");
var _labelJs = require("../../../../platform/label/common/label.js");
var _listServiceJs = require("../../../../platform/list/browser/listService.js");
var _themeServiceJs = require("../../../../platform/theme/common/themeService.js");
var _undoRedoJs = require("../../../../platform/undoRedo/common/undoRedo.js");
var _referencesModelJs = require("../referencesModel.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var DecorationsManager = /*#__PURE__*/ function() {
    "use strict";
    function DecorationsManager(_editor, _model) {
        var _this = this;
        _helpers.classCallCheck(this, DecorationsManager);
        this._editor = _editor;
        this._model = _model;
        this._decorations = new Map();
        this._decorationIgnoreSet = new Set();
        this._callOnDispose = new _lifecycleJs.DisposableStore();
        this._callOnModelChange = new _lifecycleJs.DisposableStore();
        this._callOnDispose.add(this._editor.onDidChangeModel(function() {
            return _this._onModelChanged();
        }));
        this._onModelChanged();
    }
    _helpers.createClass(DecorationsManager, [
        {
            key: "dispose",
            value: function dispose() {
                this._callOnModelChange.dispose();
                this._callOnDispose.dispose();
                this.removeDecorations();
            }
        },
        {
            key: "_onModelChanged",
            value: function _onModelChanged() {
                this._callOnModelChange.clear();
                var model = this._editor.getModel();
                if (!model) return;
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this._model.references[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var ref = _step.value;
                        if (ref.uri.toString() === model.uri.toString()) {
                            this._addDecorations(ref.parent);
                            return;
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        },
        {
            key: "_addDecorations",
            value: function _addDecorations(reference) {
                var _this = this;
                if (!this._editor.hasModel()) return;
                this._callOnModelChange.add(this._editor.getModel().onDidChangeDecorations(function() {
                    return _this._onDecorationChanged();
                }));
                var newDecorations = [];
                var newDecorationsActualIndex = [];
                for(var i = 0, len = reference.children.length; i < len; i++){
                    var oneReference = reference.children[i];
                    if (this._decorationIgnoreSet.has(oneReference.id)) continue;
                    if (oneReference.uri.toString() !== this._editor.getModel().uri.toString()) continue;
                    newDecorations.push({
                        range: oneReference.range,
                        options: DecorationsManager.DecorationOptions
                    });
                    newDecorationsActualIndex.push(i);
                }
                var decorations = this._editor.deltaDecorations([], newDecorations);
                for(var i1 = 0; i1 < decorations.length; i1++)this._decorations.set(decorations[i1], reference.children[newDecorationsActualIndex[i1]]);
            }
        },
        {
            key: "_onDecorationChanged",
            value: function _onDecorationChanged() {
                var toRemove = [];
                var model = this._editor.getModel();
                if (!model) return;
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this._decorations[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var _value = _helpers.slicedToArray(_step.value, 2), decorationId = _value[0], reference = _value[1];
                        var newRange = model.getDecorationRange(decorationId);
                        if (!newRange) continue;
                        var ignore = false;
                        if (_rangeJs.Range.equalsRange(newRange, reference.range)) continue;
                        if (_rangeJs.Range.spansMultipleLines(newRange)) ignore = true;
                        else {
                            var lineLength = reference.range.endColumn - reference.range.startColumn;
                            var newLineLength = newRange.endColumn - newRange.startColumn;
                            if (lineLength !== newLineLength) ignore = true;
                        }
                        if (ignore) {
                            this._decorationIgnoreSet.add(reference.id);
                            toRemove.push(decorationId);
                        } else reference.range = newRange;
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                for(var i = 0, len = toRemove.length; i < len; i++)this._decorations.delete(toRemove[i]);
                this._editor.deltaDecorations(toRemove, []);
            }
        },
        {
            key: "removeDecorations",
            value: function removeDecorations() {
                this._editor.deltaDecorations(_helpers.toConsumableArray(this._decorations.keys()), []);
                this._decorations.clear();
            }
        }
    ]);
    return DecorationsManager;
}();
DecorationsManager.DecorationOptions = _textModelJs.ModelDecorationOptions.register({
    description: 'reference-decoration',
    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
    className: 'reference-decoration'
});
var LayoutData = /*#__PURE__*/ function() {
    "use strict";
    function LayoutData() {
        _helpers.classCallCheck(this, LayoutData);
        this.ratio = 0.7;
        this.heightInLines = 18;
    }
    _helpers.createClass(LayoutData, null, [
        {
            key: "fromJSON",
            value: function fromJSON(raw) {
                var ratio;
                var heightInLines;
                try {
                    var data = JSON.parse(raw);
                    ratio = data.ratio;
                    heightInLines = data.heightInLines;
                } catch (_a) {
                //
                }
                return {
                    ratio: ratio || 0.7,
                    heightInLines: heightInLines || 18
                };
            }
        }
    ]);
    return LayoutData;
}();
var ReferencesTree = /*#__PURE__*/ function(WorkbenchAsyncDataTree) {
    "use strict";
    _helpers.inherits(ReferencesTree, WorkbenchAsyncDataTree);
    var _super = _helpers.createSuper(ReferencesTree);
    function ReferencesTree() {
        _helpers.classCallCheck(this, ReferencesTree);
        return _super.apply(this, arguments);
    }
    return ReferencesTree;
}(_listServiceJs.WorkbenchAsyncDataTree);
/**
 * ZoneWidget that is shown inside the editor
 */ var ReferenceWidget = /*#__PURE__*/ function(_PeekViewWidget) {
    "use strict";
    _helpers.inherits(ReferenceWidget1, _PeekViewWidget);
    var _super = _helpers.createSuper(ReferenceWidget1);
    function ReferenceWidget1(editor, _defaultTreeKeyboardSupport, layoutData, themeService, _textModelResolverService, _instantiationService, _peekViewService, _uriLabel, _undoRedoService, _keybindingService, _modeService, _languageConfigurationService) {
        _helpers.classCallCheck(this, ReferenceWidget1);
        var _this;
        _this = _super.call(this, editor, {
            showFrame: false,
            showArrow: true,
            isResizeable: true,
            isAccessible: true,
            supportOnTitleClick: true
        }, _instantiationService);
        _this._defaultTreeKeyboardSupport = _defaultTreeKeyboardSupport;
        _this.layoutData = layoutData;
        _this._textModelResolverService = _textModelResolverService;
        _this._instantiationService = _instantiationService;
        _this._peekViewService = _peekViewService;
        _this._uriLabel = _uriLabel;
        _this._undoRedoService = _undoRedoService;
        _this._keybindingService = _keybindingService;
        _this._modeService = _modeService;
        _this._languageConfigurationService = _languageConfigurationService;
        _this._disposeOnNewModel = new _lifecycleJs.DisposableStore();
        _this._callOnDispose = new _lifecycleJs.DisposableStore();
        _this._onDidSelectReference = new _eventJs.Emitter();
        _this.onDidSelectReference = _this._onDidSelectReference.event;
        _this._dim = new _domJs.Dimension(0, 0);
        _this._applyTheme(themeService.getColorTheme());
        _this._callOnDispose.add(themeService.onDidColorThemeChange(_this._applyTheme.bind(_helpers.assertThisInitialized(_this))));
        _this._peekViewService.addExclusiveWidget(editor, _helpers.assertThisInitialized(_this));
        _this.create();
        return _this;
    }
    _helpers.createClass(ReferenceWidget1, [
        {
            key: "dispose",
            value: function dispose() {
                this.setModel(undefined);
                this._callOnDispose.dispose();
                this._disposeOnNewModel.dispose();
                _lifecycleJs.dispose(this._preview);
                _lifecycleJs.dispose(this._previewNotAvailableMessage);
                _lifecycleJs.dispose(this._tree);
                _lifecycleJs.dispose(this._previewModelReference);
                this._splitView.dispose();
                _helpers.get(_helpers.getPrototypeOf(ReferenceWidget1.prototype), "dispose", this).call(this);
            }
        },
        {
            key: "_applyTheme",
            value: function _applyTheme(theme) {
                var borderColor = theme.getColor(_peekViewJs.peekViewBorder) || _colorJs.Color.transparent;
                this.style({
                    arrowColor: borderColor,
                    frameColor: borderColor,
                    headerBackgroundColor: theme.getColor(_peekViewJs.peekViewTitleBackground) || _colorJs.Color.transparent,
                    primaryHeadingColor: theme.getColor(_peekViewJs.peekViewTitleForeground),
                    secondaryHeadingColor: theme.getColor(_peekViewJs.peekViewTitleInfoForeground)
                });
            }
        },
        {
            key: "show",
            value: function show(where) {
                this.editor.revealRangeInCenterIfOutsideViewport(where, 0 /* Smooth */ );
                _helpers.get(_helpers.getPrototypeOf(ReferenceWidget1.prototype), "show", this).call(this, where, this.layoutData.heightInLines || 18);
            }
        },
        {
            key: "focusOnReferenceTree",
            value: function focusOnReferenceTree() {
                this._tree.domFocus();
            }
        },
        {
            key: "focusOnPreviewEditor",
            value: function focusOnPreviewEditor() {
                this._preview.focus();
            }
        },
        {
            key: "isPreviewEditorFocused",
            value: function isPreviewEditorFocused() {
                return this._preview.hasTextFocus();
            }
        },
        {
            key: "_onTitleClick",
            value: function _onTitleClick(e) {
                if (this._preview && this._preview.getModel()) this._onDidSelectReference.fire({
                    element: this._getFocusedReference(),
                    kind: e.ctrlKey || e.metaKey || e.altKey ? 'side' : 'open',
                    source: 'title'
                });
            }
        },
        {
            key: "_fillBody",
            value: function _fillBody(containerElement) {
                var _this = this;
                this.setCssClass('reference-zone-widget');
                // message pane
                this._messageContainer = _domJs.append(containerElement, _domJs.$('div.messages'));
                _domJs.hide(this._messageContainer);
                this._splitView = new _splitviewJs.SplitView(containerElement, {
                    orientation: 1 /* HORIZONTAL */ 
                });
                // editor
                this._previewContainer = _domJs.append(containerElement, _domJs.$('div.preview.inline'));
                var options = {
                    scrollBeyondLastLine: false,
                    scrollbar: {
                        verticalScrollbarSize: 14,
                        horizontal: 'auto',
                        useShadows: true,
                        verticalHasArrows: false,
                        horizontalHasArrows: false,
                        alwaysConsumeMouseWheel: false
                    },
                    overviewRulerLanes: 2,
                    fixedOverflowWidgets: true,
                    minimap: {
                        enabled: false
                    }
                };
                this._preview = this._instantiationService.createInstance(_embeddedCodeEditorWidgetJs.EmbeddedCodeEditorWidget, this._previewContainer, options, this.editor);
                _domJs.hide(this._previewContainer);
                this._previewNotAvailableMessage = new _textModelJs.TextModel(_nlsJs.localize('missingPreviewMessage', "no preview available"), _textModelJs.TextModel.DEFAULT_CREATION_OPTIONS, null, null, this._undoRedoService, this._modeService, this._languageConfigurationService);
                // tree
                this._treeContainer = _domJs.append(containerElement, _domJs.$('div.ref-tree.inline'));
                var treeOptions = {
                    keyboardSupport: this._defaultTreeKeyboardSupport,
                    accessibilityProvider: new _referencesTreeJs.AccessibilityProvider(),
                    keyboardNavigationLabelProvider: this._instantiationService.createInstance(_referencesTreeJs.StringRepresentationProvider),
                    identityProvider: new _referencesTreeJs.IdentityProvider(),
                    openOnSingleClick: true,
                    selectionNavigation: true,
                    overrideStyles: {
                        listBackground: _peekViewJs.peekViewResultsBackground
                    }
                };
                if (this._defaultTreeKeyboardSupport) // the tree will consume `Escape` and prevent the widget from closing
                this._callOnDispose.add(_domJs.addStandardDisposableListener(this._treeContainer, 'keydown', function(e) {
                    if (e.equals(9 /* Escape */ )) {
                        _this._keybindingService.dispatchEvent(e, e.target);
                        e.stopPropagation();
                    }
                }, true));
                this._tree = this._instantiationService.createInstance(ReferencesTree, 'ReferencesWidget', this._treeContainer, new _referencesTreeJs.Delegate(), [
                    this._instantiationService.createInstance(_referencesTreeJs.FileReferencesRenderer),
                    this._instantiationService.createInstance(_referencesTreeJs.OneReferenceRenderer), 
                ], this._instantiationService.createInstance(_referencesTreeJs.DataSource), treeOptions);
                // split stuff
                this._splitView.addView({
                    onDidChange: _eventJs.Event.None,
                    element: this._previewContainer,
                    minimumSize: 200,
                    maximumSize: Number.MAX_VALUE,
                    layout: function(width) {
                        _this._preview.layout({
                            height: _this._dim.height,
                            width: width
                        });
                    }
                }, _splitviewJs.Sizing.Distribute);
                this._splitView.addView({
                    onDidChange: _eventJs.Event.None,
                    element: this._treeContainer,
                    minimumSize: 100,
                    maximumSize: Number.MAX_VALUE,
                    layout: function(width) {
                        _this._treeContainer.style.height = "".concat(_this._dim.height, "px");
                        _this._treeContainer.style.width = "".concat(width, "px");
                        _this._tree.layout(_this._dim.height, width);
                    }
                }, _splitviewJs.Sizing.Distribute);
                this._disposables.add(this._splitView.onDidSashChange(function() {
                    if (_this._dim.width) _this.layoutData.ratio = _this._splitView.getViewSize(0) / _this._dim.width;
                }, undefined));
                // listen on selection and focus
                var onEvent = function(element, kind) {
                    if (element instanceof _referencesModelJs.OneReference) {
                        if (kind === 'show') _this._revealReference(element, false);
                        _this._onDidSelectReference.fire({
                            element: element,
                            kind: kind,
                            source: 'tree'
                        });
                    }
                };
                this._tree.onDidOpen(function(e) {
                    if (e.sideBySide) onEvent(e.element, 'side');
                    else if (e.editorOptions.pinned) onEvent(e.element, 'goto');
                    else onEvent(e.element, 'show');
                });
                _domJs.hide(this._treeContainer);
            }
        },
        {
            key: "_onWidth",
            value: function _onWidth(width) {
                if (this._dim) this._doLayoutBody(this._dim.height, width);
            }
        },
        {
            key: "_doLayoutBody",
            value: function _doLayoutBody(heightInPixel, widthInPixel) {
                _helpers.get(_helpers.getPrototypeOf(ReferenceWidget1.prototype), "_doLayoutBody", this).call(this, heightInPixel, widthInPixel);
                this._dim = new _domJs.Dimension(widthInPixel, heightInPixel);
                this.layoutData.heightInLines = this._viewZone ? this._viewZone.heightInLines : this.layoutData.heightInLines;
                this._splitView.layout(widthInPixel);
                this._splitView.resizeView(0, widthInPixel * this.layoutData.ratio);
            }
        },
        {
            key: "setSelection",
            value: function setSelection(selection) {
                var _this = this;
                return this._revealReference(selection, true).then(function() {
                    if (!_this._model) // disposed
                    return;
                    // show in tree
                    _this._tree.setSelection([
                        selection
                    ]);
                    _this._tree.setFocus([
                        selection
                    ]);
                });
            }
        },
        {
            key: "setModel",
            value: function setModel(newModel) {
                // clean up
                this._disposeOnNewModel.clear();
                this._model = newModel;
                if (this._model) return this._onNewModel();
                return Promise.resolve();
            }
        },
        {
            key: "_onNewModel",
            value: function _onNewModel() {
                var _this = this;
                if (!this._model) return Promise.resolve(undefined);
                if (this._model.isEmpty) {
                    this.setTitle('');
                    this._messageContainer.innerText = _nlsJs.localize('noResults', "No results");
                    _domJs.show(this._messageContainer);
                    return Promise.resolve(undefined);
                }
                _domJs.hide(this._messageContainer);
                this._decorationsManager = new DecorationsManager(this._preview, this._model);
                this._disposeOnNewModel.add(this._decorationsManager);
                // listen on model changes
                this._disposeOnNewModel.add(this._model.onDidChangeReferenceRange(function(reference) {
                    return _this._tree.rerender(reference);
                }));
                // listen on editor
                this._disposeOnNewModel.add(this._preview.onMouseDown(function(e) {
                    var event = e.event, target = e.target;
                    if (event.detail !== 2) return;
                    var element = _this._getFocusedReference();
                    if (!element) return;
                    _this._onDidSelectReference.fire({
                        element: {
                            uri: element.uri,
                            range: target.range
                        },
                        kind: event.ctrlKey || event.metaKey || event.altKey ? 'side' : 'open',
                        source: 'editor'
                    });
                }));
                // make sure things are rendered
                this.container.classList.add('results-loaded');
                _domJs.show(this._treeContainer);
                _domJs.show(this._previewContainer);
                this._splitView.layout(this._dim.width);
                this.focusOnReferenceTree();
                // pick input and a reference to begin with
                return this._tree.setInput(this._model.groups.length === 1 ? this._model.groups[0] : this._model);
            }
        },
        {
            key: "_getFocusedReference",
            value: function _getFocusedReference() {
                var ref = _helpers.slicedToArray(this._tree.getFocus(), 1), element = ref[0];
                if (element instanceof _referencesModelJs.OneReference) return element;
                else if (element instanceof _referencesModelJs.FileReferences) {
                    if (element.children.length > 0) return element.children[0];
                }
                return undefined;
            }
        },
        {
            key: "revealReference",
            value: function revealReference(reference) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                _ctx.next = 2;
                                return this._revealReference(reference, false);
                            case 2:
                                this._onDidSelectReference.fire({
                                    element: reference,
                                    kind: 'goto',
                                    source: 'tree'
                                });
                            case 3:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this);
                }));
            }
        },
        {
            key: "_revealReference",
            value: function _revealReference(reference, revealParent) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var promise, ref, model, scrollType, sel;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                if (!(this._revealedReference === reference)) {
                                    _ctx.next = 2;
                                    break;
                                }
                                return _ctx.abrupt("return");
                            case 2:
                                this._revealedReference = reference;
                                // Update widget header
                                if (reference.uri.scheme !== _networkJs.Schemas.inMemory) this.setTitle(_resourcesJs.basenameOrAuthority(reference.uri), this._uriLabel.getUriLabel(_resourcesJs.dirname(reference.uri)));
                                else this.setTitle(_nlsJs.localize('peekView.alternateTitle', "References"));
                                promise = this._textModelResolverService.createModelReference(reference.uri);
                                if (!(this._tree.getInput() === reference.parent)) {
                                    _ctx.next = 9;
                                    break;
                                }
                                this._tree.reveal(reference);
                                _ctx.next = 13;
                                break;
                            case 9:
                                if (revealParent) this._tree.reveal(reference.parent);
                                _ctx.next = 12;
                                return this._tree.expand(reference.parent);
                            case 12:
                                this._tree.reveal(reference);
                            case 13:
                                _ctx.next = 15;
                                return promise;
                            case 15:
                                ref = _ctx.sent;
                                if (this._model) {
                                    _ctx.next = 19;
                                    break;
                                }
                                // disposed
                                ref.dispose();
                                return _ctx.abrupt("return");
                            case 19:
                                _lifecycleJs.dispose(this._previewModelReference);
                                model = ref.object;
                                if (model) {
                                    scrollType = this._preview.getModel() === model.textEditorModel ? 0 /* Smooth */  : 1 /* Immediate */ ;
                                    sel = _rangeJs.Range.lift(reference.range).collapseToStart();
                                    this._previewModelReference = ref;
                                    this._preview.setModel(model.textEditorModel);
                                    this._preview.setSelection(sel);
                                    this._preview.revealRangeInCenter(sel, scrollType);
                                } else {
                                    this._preview.setModel(this._previewNotAvailableMessage);
                                    ref.dispose();
                                }
                            case 22:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this);
                }));
            }
        }
    ]);
    return ReferenceWidget1;
}(_peekViewJs.PeekViewWidget);
ReferenceWidget = __decorate([
    __param(3, _themeServiceJs.IThemeService),
    __param(4, _resolverServiceJs.ITextModelService),
    __param(5, _instantiationJs.IInstantiationService),
    __param(6, _peekViewJs.IPeekViewService),
    __param(7, _labelJs.ILabelService),
    __param(8, _undoRedoJs.IUndoRedoService),
    __param(9, _keybindingJs.IKeybindingService),
    __param(10, _modeServiceJs.IModeService),
    __param(11, _languageConfigurationRegistryJs.ILanguageConfigurationService)
], ReferenceWidget);

},{"@swc/helpers":"erO4s","regenerator-runtime":"12Ae8","../../../../base/browser/dom.js":"bxmlc","../../../../base/browser/ui/splitview/splitview.js":"3bA6E","../../../../base/common/color.js":"2jKDp","../../../../base/common/event.js":"9IBcK","../../../../base/common/lifecycle.js":"bcbPy","../../../../base/common/network.js":"4fXI6","../../../../base/common/resources.js":"14HNj","./referencesWidget.css":"eMO5T","../../../browser/widget/embeddedCodeEditorWidget.js":"e432u","../../../common/core/range.js":"VbyL8","../../../common/model/textModel.js":"f18vR","../../../common/modes/languageConfigurationRegistry.js":"fdCRx","../../../common/services/modeService.js":"dNIX6","../../../common/services/resolverService.js":"944WH","./referencesTree.js":"5zr8L","../../peekView/peekView.js":"j4XyJ","../../../../nls.js":"9djYb","../../../../platform/instantiation/common/instantiation.js":"9ABZB","../../../../platform/keybinding/common/keybinding.js":"5rr15","../../../../platform/label/common/label.js":"3WfP2","../../../../platform/list/browser/listService.js":"ddOlp","../../../../platform/theme/common/themeService.js":"kE7QB","../../../../platform/undoRedo/common/undoRedo.js":"gWP2t","../referencesModel.js":"jPNVT","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"eMO5T":[function() {},{}],"5zr8L":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DataSource", function() {
    return DataSource;
});
parcelHelpers.export(exports, "Delegate", function() {
    return Delegate;
});
parcelHelpers.export(exports, "StringRepresentationProvider", function() {
    return StringRepresentationProvider;
});
parcelHelpers.export(exports, "IdentityProvider", function() {
    return IdentityProvider;
});
parcelHelpers.export(exports, "FileReferencesRenderer", function() {
    return FileReferencesRenderer;
});
parcelHelpers.export(exports, "OneReferenceRenderer", function() {
    return OneReferenceRenderer;
});
parcelHelpers.export(exports, "AccessibilityProvider", function() {
    return AccessibilityProvider;
});
var _helpers = require("@swc/helpers");
var _domJs = require("../../../../base/browser/dom.js");
var _countBadgeJs = require("../../../../base/browser/ui/countBadge/countBadge.js");
var _highlightedLabelJs = require("../../../../base/browser/ui/highlightedlabel/highlightedLabel.js");
var _iconLabelJs = require("../../../../base/browser/ui/iconLabel/iconLabel.js");
var _filtersJs = require("../../../../base/common/filters.js");
var _labelsJs = require("../../../../base/common/labels.js");
var _lifecycleJs = require("../../../../base/common/lifecycle.js");
var _resourcesJs = require("../../../../base/common/resources.js");
var _resolverServiceJs = require("../../../common/services/resolverService.js");
var _nlsJs = require("../../../../nls.js");
var _instantiationJs = require("../../../../platform/instantiation/common/instantiation.js");
var _keybindingJs = require("../../../../platform/keybinding/common/keybinding.js");
var _labelJs = require("../../../../platform/label/common/label.js");
var _stylerJs = require("../../../../platform/theme/common/styler.js");
var _themeServiceJs = require("../../../../platform/theme/common/themeService.js");
var _referencesModelJs = require("../referencesModel.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var DataSource = /*#__PURE__*/ function() {
    "use strict";
    function DataSource1(_resolverService) {
        _helpers.classCallCheck(this, DataSource1);
        this._resolverService = _resolverService;
    }
    _helpers.createClass(DataSource1, [
        {
            key: "hasChildren",
            value: function hasChildren(element) {
                if (element instanceof _referencesModelJs.ReferencesModel) return true;
                if (element instanceof _referencesModelJs.FileReferences) return true;
                return false;
            }
        },
        {
            key: "getChildren",
            value: function getChildren(element) {
                if (element instanceof _referencesModelJs.ReferencesModel) return element.groups;
                if (element instanceof _referencesModelJs.FileReferences) return element.resolve(this._resolverService).then(function(val) {
                    // if (element.failure) {
                    // 	// refresh the element on failure so that
                    // 	// we can update its rendering
                    // 	return tree.refresh(element).then(() => val.children);
                    // }
                    return val.children;
                });
                throw new Error('bad tree');
            }
        }
    ]);
    return DataSource1;
}();
DataSource = __decorate([
    __param(0, _resolverServiceJs.ITextModelService)
], DataSource);
var Delegate = /*#__PURE__*/ function() {
    "use strict";
    function Delegate() {
        _helpers.classCallCheck(this, Delegate);
    }
    _helpers.createClass(Delegate, [
        {
            key: "getHeight",
            value: function getHeight() {
                return 23;
            }
        },
        {
            key: "getTemplateId",
            value: function getTemplateId(element) {
                if (element instanceof _referencesModelJs.FileReferences) return FileReferencesRenderer.id;
                else return OneReferenceRenderer.id;
            }
        }
    ]);
    return Delegate;
}();
var StringRepresentationProvider = /*#__PURE__*/ function() {
    "use strict";
    function StringRepresentationProvider1(_keybindingService) {
        _helpers.classCallCheck(this, StringRepresentationProvider1);
        this._keybindingService = _keybindingService;
    }
    _helpers.createClass(StringRepresentationProvider1, [
        {
            key: "getKeyboardNavigationLabel",
            value: function getKeyboardNavigationLabel(element) {
                var _a;
                if (element instanceof _referencesModelJs.OneReference) {
                    var parts = (_a = element.parent.getPreview(element)) === null || _a === void 0 ? void 0 : _a.preview(element.range);
                    if (parts) return parts.value;
                }
                // FileReferences or unresolved OneReference
                return _resourcesJs.basename(element.uri);
            }
        }
    ]);
    return StringRepresentationProvider1;
}();
StringRepresentationProvider = __decorate([
    __param(0, _keybindingJs.IKeybindingService)
], StringRepresentationProvider);
var IdentityProvider = /*#__PURE__*/ function() {
    "use strict";
    function IdentityProvider() {
        _helpers.classCallCheck(this, IdentityProvider);
    }
    _helpers.createClass(IdentityProvider, [
        {
            key: "getId",
            value: function getId(element) {
                return element instanceof _referencesModelJs.OneReference ? element.id : element.uri;
            }
        }
    ]);
    return IdentityProvider;
}();
//#region render: File
var FileReferencesTemplate = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(FileReferencesTemplate1, Disposable);
    var _super = _helpers.createSuper(FileReferencesTemplate1);
    function FileReferencesTemplate1(container, _uriLabel, themeService) {
        _helpers.classCallCheck(this, FileReferencesTemplate1);
        var _this;
        _this = _super.call(this);
        _this._uriLabel = _uriLabel;
        var parent = document.createElement('div');
        parent.classList.add('reference-file');
        _this.file = _this._register(new _iconLabelJs.IconLabel(parent, {
            supportHighlights: true
        }));
        _this.badge = new _countBadgeJs.CountBadge(_domJs.append(parent, _domJs.$('.count')));
        _this._register(_stylerJs.attachBadgeStyler(_this.badge, themeService));
        container.appendChild(parent);
        return _this;
    }
    _helpers.createClass(FileReferencesTemplate1, [
        {
            key: "set",
            value: function set(element, matches) {
                var parent = _resourcesJs.dirname(element.uri);
                this.file.setLabel(_labelsJs.getBaseLabel(element.uri), this._uriLabel.getUriLabel(parent, {
                    relative: true
                }), {
                    title: this._uriLabel.getUriLabel(element.uri),
                    matches: matches
                });
                var len = element.children.length;
                this.badge.setCount(len);
                if (len > 1) this.badge.setTitleFormat(_nlsJs.localize('referencesCount', "{0} references", len));
                else this.badge.setTitleFormat(_nlsJs.localize('referenceCount', "{0} reference", len));
            }
        }
    ]);
    return FileReferencesTemplate1;
}(_lifecycleJs.Disposable);
FileReferencesTemplate = __decorate([
    __param(1, _labelJs.ILabelService),
    __param(2, _themeServiceJs.IThemeService)
], FileReferencesTemplate);
var FileReferencesRenderer = /*#__PURE__*/ function() {
    "use strict";
    function FileReferencesRenderer1(_instantiationService) {
        _helpers.classCallCheck(this, FileReferencesRenderer1);
        this._instantiationService = _instantiationService;
        this.templateId = FileReferencesRenderer1.id;
    }
    _helpers.createClass(FileReferencesRenderer1, [
        {
            key: "renderTemplate",
            value: function renderTemplate(container) {
                return this._instantiationService.createInstance(FileReferencesTemplate, container);
            }
        },
        {
            key: "renderElement",
            value: function renderElement(node, index, template) {
                template.set(node.element, _filtersJs.createMatches(node.filterData));
            }
        },
        {
            key: "disposeTemplate",
            value: function disposeTemplate(templateData) {
                templateData.dispose();
            }
        }
    ]);
    return FileReferencesRenderer1;
}();
FileReferencesRenderer.id = 'FileReferencesRenderer';
FileReferencesRenderer = __decorate([
    __param(0, _instantiationJs.IInstantiationService)
], FileReferencesRenderer);
//#endregion
//#region render: Reference
var OneReferenceTemplate = /*#__PURE__*/ function() {
    "use strict";
    function OneReferenceTemplate(container) {
        _helpers.classCallCheck(this, OneReferenceTemplate);
        this.label = new _highlightedLabelJs.HighlightedLabel(container);
    }
    _helpers.createClass(OneReferenceTemplate, [
        {
            key: "set",
            value: function set(element, score) {
                var _a;
                var preview = (_a = element.parent.getPreview(element)) === null || _a === void 0 ? void 0 : _a.preview(element.range);
                if (!preview || !preview.value) // this means we FAILED to resolve the document or the value is the empty string
                this.label.set("".concat(_resourcesJs.basename(element.uri), ":").concat(element.range.startLineNumber + 1, ":").concat(element.range.startColumn + 1));
                else {
                    // render search match as highlight unless
                    // we have score, then render the score
                    var value = preview.value, highlight = preview.highlight;
                    if (score && !_filtersJs.FuzzyScore.isDefault(score)) {
                        this.label.element.classList.toggle('referenceMatch', false);
                        this.label.set(value, _filtersJs.createMatches(score));
                    } else {
                        this.label.element.classList.toggle('referenceMatch', true);
                        this.label.set(value, [
                            highlight
                        ]);
                    }
                }
            }
        }
    ]);
    return OneReferenceTemplate;
}();
var OneReferenceRenderer = /*#__PURE__*/ function() {
    "use strict";
    function OneReferenceRenderer() {
        _helpers.classCallCheck(this, OneReferenceRenderer);
        this.templateId = OneReferenceRenderer.id;
    }
    _helpers.createClass(OneReferenceRenderer, [
        {
            key: "renderTemplate",
            value: function renderTemplate(container) {
                return new OneReferenceTemplate(container);
            }
        },
        {
            key: "renderElement",
            value: function renderElement(node, index, templateData) {
                templateData.set(node.element, node.filterData);
            }
        },
        {
            key: "disposeTemplate",
            value: function disposeTemplate() {}
        }
    ]);
    return OneReferenceRenderer;
}();
OneReferenceRenderer.id = 'OneReferenceRenderer';
var AccessibilityProvider = /*#__PURE__*/ function() {
    "use strict";
    function AccessibilityProvider() {
        _helpers.classCallCheck(this, AccessibilityProvider);
    }
    _helpers.createClass(AccessibilityProvider, [
        {
            key: "getWidgetAriaLabel",
            value: function getWidgetAriaLabel() {
                return _nlsJs.localize('treeAriaLabel', "References");
            }
        },
        {
            key: "getAriaLabel",
            value: function getAriaLabel(element) {
                return element.ariaMessage;
            }
        }
    ]);
    return AccessibilityProvider;
}();

},{"@swc/helpers":"erO4s","../../../../base/browser/dom.js":"bxmlc","../../../../base/browser/ui/countBadge/countBadge.js":"bM7xC","../../../../base/browser/ui/highlightedlabel/highlightedLabel.js":"8yfsD","../../../../base/browser/ui/iconLabel/iconLabel.js":"bkzBN","../../../../base/common/filters.js":"m7Exq","../../../../base/common/labels.js":"kDPEJ","../../../../base/common/lifecycle.js":"bcbPy","../../../../base/common/resources.js":"14HNj","../../../common/services/resolverService.js":"944WH","../../../../nls.js":"9djYb","../../../../platform/instantiation/common/instantiation.js":"9ABZB","../../../../platform/keybinding/common/keybinding.js":"5rr15","../../../../platform/label/common/label.js":"3WfP2","../../../../platform/theme/common/styler.js":"lssom","../../../../platform/theme/common/themeService.js":"kE7QB","../referencesModel.js":"jPNVT","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"kDPEJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getBaseLabel", function() {
    return getBaseLabel;
});
parcelHelpers.export(exports, "normalizeDriveLetter", function() {
    return normalizeDriveLetter;
});
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _extpathJs = require("./extpath.js");
var _networkJs = require("./network.js");
var _platformJs = require("./platform.js");
var _resourcesJs = require("./resources.js");
var _uriJs = require("./uri.js");
function getBaseLabel(resource) {
    if (!resource) return undefined;
    if (typeof resource === 'string') resource = _uriJs.URI.file(resource);
    var base = _resourcesJs.basename(resource) || (resource.scheme === _networkJs.Schemas.file ? resource.fsPath : resource.path /* can be empty string if '/' is passed in */ );
    // convert c: => C:
    if (_platformJs.isWindows && _extpathJs.isRootOrDriveLetter(base)) return normalizeDriveLetter(base);
    return base;
}
function normalizeDriveLetter(path, continueAsWindows) {
    if (_extpathJs.hasDriveLetter(path, continueAsWindows)) return path.charAt(0).toUpperCase() + path.slice(1);
    return path;
}
var normalizedUserHomeCached = Object.create(null);

},{"./extpath.js":"giyx0","./network.js":"4fXI6","./platform.js":"8pohV","./resources.js":"14HNj","./uri.js":"4ZDLf","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"dffu0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ctxHasSymbols", function() {
    return ctxHasSymbols;
});
parcelHelpers.export(exports, "ISymbolNavigationService", function() {
    return ISymbolNavigationService;
});
var _helpers = require("@swc/helpers");
var _eventJs = require("../../../base/common/event.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _resourcesJs = require("../../../base/common/resources.js");
var _editorExtensionsJs = require("../../browser/editorExtensions.js");
var _codeEditorServiceJs = require("../../browser/services/codeEditorService.js");
var _rangeJs = require("../../common/core/range.js");
var _nlsJs = require("../../../nls.js");
var _contextkeyJs = require("../../../platform/contextkey/common/contextkey.js");
var _extensionsJs = require("../../../platform/instantiation/common/extensions.js");
var _instantiationJs = require("../../../platform/instantiation/common/instantiation.js");
var _keybindingJs = require("../../../platform/keybinding/common/keybinding.js");
var _keybindingsRegistryJs = require("../../../platform/keybinding/common/keybindingsRegistry.js");
var _notificationJs = require("../../../platform/notification/common/notification.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var ctxHasSymbols = new _contextkeyJs.RawContextKey('hasSymbols', false, _nlsJs.localize('hasSymbols', "Whether there are symbol locations that can be navigated via keyboard-only."));
var ISymbolNavigationService = _instantiationJs.createDecorator('ISymbolNavigationService');
var SymbolNavigationService = /*#__PURE__*/ function() {
    "use strict";
    function SymbolNavigationService1(contextKeyService, _editorService, _notificationService, _keybindingService) {
        _helpers.classCallCheck(this, SymbolNavigationService1);
        this._editorService = _editorService;
        this._notificationService = _notificationService;
        this._keybindingService = _keybindingService;
        this._currentModel = undefined;
        this._currentIdx = -1;
        this._ignoreEditorChange = false;
        this._ctxHasSymbols = ctxHasSymbols.bindTo(contextKeyService);
    }
    _helpers.createClass(SymbolNavigationService1, [
        {
            key: "reset",
            value: function reset() {
                var _a, _b;
                this._ctxHasSymbols.reset();
                (_a = this._currentState) === null || _a === void 0 || _a.dispose();
                (_b = this._currentMessage) === null || _b === void 0 || _b.dispose();
                this._currentModel = undefined;
                this._currentIdx = -1;
            }
        },
        {
            key: "put",
            value: function put(anchor) {
                var _this = this;
                var refModel = anchor.parent.parent;
                if (refModel.references.length <= 1) {
                    this.reset();
                    return;
                }
                this._currentModel = refModel;
                this._currentIdx = refModel.references.indexOf(anchor);
                this._ctxHasSymbols.set(true);
                this._showMessage();
                var editorState = new EditorState(this._editorService);
                var listener = editorState.onDidChange(function(_) {
                    if (_this._ignoreEditorChange) return;
                    var editor = _this._editorService.getActiveCodeEditor();
                    if (!editor) return;
                    var model = editor.getModel();
                    var position = editor.getPosition();
                    if (!model || !position) return;
                    var seenUri = false;
                    var seenPosition = false;
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator = refModel.references[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var reference = _step.value;
                            if (_resourcesJs.isEqual(reference.uri, model.uri)) {
                                seenUri = true;
                                seenPosition = seenPosition || _rangeJs.Range.containsPosition(reference.range, position);
                            } else if (seenUri) break;
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    if (!seenUri || !seenPosition) _this.reset();
                });
                this._currentState = _lifecycleJs.combinedDisposable(editorState, listener);
            }
        },
        {
            key: "revealNext",
            value: function revealNext(source) {
                var _this = this;
                if (!this._currentModel) return Promise.resolve();
                // get next result and advance
                this._currentIdx += 1;
                this._currentIdx %= this._currentModel.references.length;
                var reference = this._currentModel.references[this._currentIdx];
                // status
                this._showMessage();
                // open editor, ignore events while that happens
                this._ignoreEditorChange = true;
                return this._editorService.openCodeEditor({
                    resource: reference.uri,
                    options: {
                        selection: _rangeJs.Range.collapseToStart(reference.range),
                        selectionRevealType: 3 /* NearTopIfOutsideViewport */ 
                    }
                }, source).finally(function() {
                    _this._ignoreEditorChange = false;
                });
            }
        },
        {
            key: "_showMessage",
            value: function _showMessage() {
                var _a;
                (_a = this._currentMessage) === null || _a === void 0 || _a.dispose();
                var kb = this._keybindingService.lookupKeybinding('editor.gotoNextSymbolFromResult');
                var message = kb ? _nlsJs.localize('location.kb', "Symbol {0} of {1}, {2} for next", this._currentIdx + 1, this._currentModel.references.length, kb.getLabel()) : _nlsJs.localize('location', "Symbol {0} of {1}", this._currentIdx + 1, this._currentModel.references.length);
                this._currentMessage = this._notificationService.status(message);
            }
        }
    ]);
    return SymbolNavigationService1;
}();
SymbolNavigationService = __decorate([
    __param(0, _contextkeyJs.IContextKeyService),
    __param(1, _codeEditorServiceJs.ICodeEditorService),
    __param(2, _notificationJs.INotificationService),
    __param(3, _keybindingJs.IKeybindingService)
], SymbolNavigationService);
_extensionsJs.registerSingleton(ISymbolNavigationService, SymbolNavigationService, true);
_editorExtensionsJs.registerEditorCommand(new /*#__PURE__*/ (function(EditorCommand) {
    "use strict";
    _helpers.inherits(_class, EditorCommand);
    var _super = _helpers.createSuper(_class);
    function _class() {
        _helpers.classCallCheck(this, _class);
        return _super.call(this, {
            id: 'editor.gotoNextSymbolFromResult',
            precondition: ctxHasSymbols,
            kbOpts: {
                weight: 100 /* EditorContrib */ ,
                primary: 70 /* F12 */ 
            }
        });
    }
    _helpers.createClass(_class, [
        {
            key: "runEditorCommand",
            value: function runEditorCommand(accessor, editor) {
                return accessor.get(ISymbolNavigationService).revealNext(editor);
            }
        }
    ]);
    return _class;
}(_editorExtensionsJs.EditorCommand)));
_keybindingsRegistryJs.KeybindingsRegistry.registerCommandAndKeybindingRule({
    id: 'editor.gotoNextSymbolFromResult.cancel',
    weight: 100 /* EditorContrib */ ,
    when: ctxHasSymbols,
    primary: 9 /* Escape */ ,
    handler: function(accessor) {
        accessor.get(ISymbolNavigationService).reset();
    }
});
//
var EditorState = /*#__PURE__*/ function() {
    "use strict";
    function EditorState1(editorService) {
        _helpers.classCallCheck(this, EditorState1);
        this._listener = new Map();
        this._disposables = new _lifecycleJs.DisposableStore();
        this._onDidChange = new _eventJs.Emitter();
        this.onDidChange = this._onDidChange.event;
        this._disposables.add(editorService.onCodeEditorRemove(this._onDidRemoveEditor, this));
        this._disposables.add(editorService.onCodeEditorAdd(this._onDidAddEditor, this));
        editorService.listCodeEditors().forEach(this._onDidAddEditor, this);
    }
    _helpers.createClass(EditorState1, [
        {
            key: "dispose",
            value: function dispose() {
                this._disposables.dispose();
                this._onDidChange.dispose();
                _lifecycleJs.dispose(this._listener.values());
            }
        },
        {
            key: "_onDidAddEditor",
            value: function _onDidAddEditor(editor) {
                var _this = this;
                this._listener.set(editor, _lifecycleJs.combinedDisposable(editor.onDidChangeCursorPosition(function(_) {
                    return _this._onDidChange.fire({
                        editor: editor
                    });
                }), editor.onDidChangeModelContent(function(_) {
                    return _this._onDidChange.fire({
                        editor: editor
                    });
                })));
            }
        },
        {
            key: "_onDidRemoveEditor",
            value: function _onDidRemoveEditor(editor) {
                var _a;
                (_a = this._listener.get(editor)) === null || _a === void 0 || _a.dispose();
                this._listener.delete(editor);
            }
        }
    ]);
    return EditorState1;
}();
EditorState = __decorate([
    __param(0, _codeEditorServiceJs.ICodeEditorService)
], EditorState);

},{"@swc/helpers":"erO4s","../../../base/common/event.js":"9IBcK","../../../base/common/lifecycle.js":"bcbPy","../../../base/common/resources.js":"14HNj","../../browser/editorExtensions.js":"dFnlo","../../browser/services/codeEditorService.js":"izkTN","../../common/core/range.js":"VbyL8","../../../nls.js":"9djYb","../../../platform/contextkey/common/contextkey.js":"5cjav","../../../platform/instantiation/common/extensions.js":"6Iedq","../../../platform/instantiation/common/instantiation.js":"9ABZB","../../../platform/keybinding/common/keybinding.js":"5rr15","../../../platform/keybinding/common/keybindingsRegistry.js":"5cRx5","../../../platform/notification/common/notification.js":"baqho","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"i2LAo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getDefinitionsAtPosition", function() {
    return getDefinitionsAtPosition;
});
parcelHelpers.export(exports, "getDeclarationsAtPosition", function() {
    return getDeclarationsAtPosition;
});
parcelHelpers.export(exports, "getImplementationsAtPosition", function() {
    return getImplementationsAtPosition;
});
parcelHelpers.export(exports, "getTypeDefinitionsAtPosition", function() {
    return getTypeDefinitionsAtPosition;
});
parcelHelpers.export(exports, "getReferencesAtPosition", function() {
    return getReferencesAtPosition;
});
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
var _cancellationJs = require("../../../base/common/cancellation.js");
var _errorsJs = require("../../../base/common/errors.js");
var _editorExtensionsJs = require("../../browser/editorExtensions.js");
var _modesJs = require("../../common/modes.js");
var _referencesModelJs = require("./referencesModel.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function getLocationLinks(model, position, registry, provide) {
    var provider1 = registry.ordered(model);
    // get results
    var promises = provider1.map(function(provider) {
        return Promise.resolve(provide(provider, model, position)).then(undefined, function(err) {
            _errorsJs.onUnexpectedExternalError(err);
            return undefined;
        });
    });
    return Promise.all(promises).then(function(values) {
        var result = [];
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var value = _step.value;
                var _result;
                if (Array.isArray(value)) (_result = result).push.apply(_result, _helpers.toConsumableArray(value));
                else if (value) result.push(value);
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
        return result;
    });
}
function getDefinitionsAtPosition(model1, position1, token) {
    return getLocationLinks(model1, position1, _modesJs.DefinitionProviderRegistry, function(provider, model, position) {
        return provider.provideDefinition(model, position, token);
    });
}
function getDeclarationsAtPosition(model2, position2, token) {
    return getLocationLinks(model2, position2, _modesJs.DeclarationProviderRegistry, function(provider, model, position) {
        return provider.provideDeclaration(model, position, token);
    });
}
function getImplementationsAtPosition(model3, position3, token) {
    return getLocationLinks(model3, position3, _modesJs.ImplementationProviderRegistry, function(provider, model, position) {
        return provider.provideImplementation(model, position, token);
    });
}
function getTypeDefinitionsAtPosition(model4, position4, token) {
    return getLocationLinks(model4, position4, _modesJs.TypeDefinitionProviderRegistry, function(provider, model, position) {
        return provider.provideTypeDefinition(model, position, token);
    });
}
function getReferencesAtPosition(model5, position5, compact, token) {
    var _this = this;
    return getLocationLinks(model5, position5, _modesJs.ReferenceProviderRegistry, function(provider, model, position) {
        return __awaiter(_this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
            var result, resultWithoutDeclaration;
            return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                while(1)switch(_ctx.prev = _ctx.next){
                    case 0:
                        _ctx.next = 2;
                        return provider.provideReferences(model, position, {
                            includeDeclaration: true
                        }, token);
                    case 2:
                        result = _ctx.sent;
                        if (!(!compact || !result || result.length !== 2)) {
                            _ctx.next = 5;
                            break;
                        }
                        return _ctx.abrupt("return", result);
                    case 5:
                        _ctx.next = 7;
                        return provider.provideReferences(model, position, {
                            includeDeclaration: false
                        }, token);
                    case 7:
                        resultWithoutDeclaration = _ctx.sent;
                        if (!(resultWithoutDeclaration && resultWithoutDeclaration.length === 1)) {
                            _ctx.next = 10;
                            break;
                        }
                        return _ctx.abrupt("return", resultWithoutDeclaration);
                    case 10:
                        return _ctx.abrupt("return", result);
                    case 11:
                    case "end":
                        return _ctx.stop();
                }
            }, _callee);
        }));
    });
}
// -- API commands ----
function _sortedAndDeduped(callback) {
    return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
        var rawLinks, model, modelLinks;
        return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
            while(1)switch(_ctx.prev = _ctx.next){
                case 0:
                    _ctx.next = 2;
                    return callback();
                case 2:
                    rawLinks = _ctx.sent;
                    model = new _referencesModelJs.ReferencesModel(rawLinks, '');
                    modelLinks = model.references.map(function(ref) {
                        return ref.link;
                    });
                    model.dispose();
                    return _ctx.abrupt("return", modelLinks);
                case 7:
                case "end":
                    return _ctx.stop();
            }
        }, _callee);
    }));
}
_editorExtensionsJs.registerModelAndPositionCommand('_executeDefinitionProvider', function(model, position) {
    return _sortedAndDeduped(function() {
        return getDefinitionsAtPosition(model, position, _cancellationJs.CancellationToken.None);
    });
});
_editorExtensionsJs.registerModelAndPositionCommand('_executeDeclarationProvider', function(model, position) {
    return _sortedAndDeduped(function() {
        return getDeclarationsAtPosition(model, position, _cancellationJs.CancellationToken.None);
    });
});
_editorExtensionsJs.registerModelAndPositionCommand('_executeImplementationProvider', function(model, position) {
    return _sortedAndDeduped(function() {
        return getImplementationsAtPosition(model, position, _cancellationJs.CancellationToken.None);
    });
});
_editorExtensionsJs.registerModelAndPositionCommand('_executeTypeDefinitionProvider', function(model, position) {
    return _sortedAndDeduped(function() {
        return getTypeDefinitionsAtPosition(model, position, _cancellationJs.CancellationToken.None);
    });
});
_editorExtensionsJs.registerModelAndPositionCommand('_executeReferenceProvider', function(model, position) {
    return _sortedAndDeduped(function() {
        return getReferencesAtPosition(model, position, false, _cancellationJs.CancellationToken.None);
    });
});

},{"@swc/helpers":"erO4s","regenerator-runtime":"12Ae8","../../../base/common/cancellation.js":"1C4LY","../../../base/common/errors.js":"afm4i","../../browser/editorExtensions.js":"dFnlo","../../common/modes.js":"bRbY1","./referencesModel.js":"jPNVT","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"7znBu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ModesContentHoverWidget", function() {
    return ModesContentHoverWidget;
});
var _helpers = require("@swc/helpers");
var _domJs = require("../../../base/browser/dom.js");
var _hoverWidgetJs = require("../../../base/browser/ui/hover/hoverWidget.js");
var _widgetJs = require("../../../base/browser/ui/widget.js");
var _arraysJs = require("../../../base/common/arrays.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _positionJs = require("../../common/core/position.js");
var _rangeJs = require("../../common/core/range.js");
var _textModelJs = require("../../common/model/textModel.js");
var _modesJs = require("../../common/modes.js");
var _colorHoverParticipantJs = require("./colorHoverParticipant.js");
var _hoverOperationJs = require("./hoverOperation.js");
var _hoverTypesJs = require("./hoverTypes.js");
var _markdownHoverParticipantJs = require("./markdownHoverParticipant.js");
var _markerHoverParticipantJs = require("./markerHoverParticipant.js");
var _inlineCompletionsHoverParticipantJs = require("../inlineCompletions/inlineCompletionsHoverParticipant.js");
var _contextkeyJs = require("../../../platform/contextkey/common/contextkey.js");
var _instantiationJs = require("../../../platform/instantiation/common/instantiation.js");
var _keybindingJs = require("../../../platform/keybinding/common/keybinding.js");
var _suggestJs = require("../suggest/suggest.js");
var _unicodeHighlighterJs = require("../unicodeHighlighter/unicodeHighlighter.js");
var _asyncJs = require("../../../base/common/async.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var $ = _domJs.$;
var EditorHoverStatusBar = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(EditorHoverStatusBar1, Disposable);
    var _super = _helpers.createSuper(EditorHoverStatusBar1);
    function EditorHoverStatusBar1(_keybindingService) {
        _helpers.classCallCheck(this, EditorHoverStatusBar1);
        var _this;
        _this = _super.call(this);
        _this._keybindingService = _keybindingService;
        _this._hasContent = false;
        _this.hoverElement = $('div.hover-row.status-bar');
        _this.actionsElement = _domJs.append(_this.hoverElement, $('div.actions'));
        return _this;
    }
    _helpers.createClass(EditorHoverStatusBar1, [
        {
            key: "hasContent",
            get: function get() {
                return this._hasContent;
            }
        },
        {
            key: "addAction",
            value: function addAction(actionOptions) {
                var keybinding = this._keybindingService.lookupKeybinding(actionOptions.commandId);
                var keybindingLabel = keybinding ? keybinding.getLabel() : null;
                this._hasContent = true;
                return this._register(_hoverWidgetJs.HoverAction.render(this.actionsElement, actionOptions, keybindingLabel));
            }
        },
        {
            key: "append",
            value: function append(element) {
                var result = _domJs.append(this.actionsElement, element);
                this._hasContent = true;
                return result;
            }
        }
    ]);
    return EditorHoverStatusBar1;
}(_lifecycleJs.Disposable);
EditorHoverStatusBar = __decorate([
    __param(0, _keybindingJs.IKeybindingService)
], EditorHoverStatusBar);
var ModesContentComputer = /*#__PURE__*/ function() {
    "use strict";
    function ModesContentComputer(editor, _participants) {
        _helpers.classCallCheck(this, ModesContentComputer);
        this._participants = _participants;
        this._editor = editor;
        this._result = [];
        this._anchor = null;
    }
    _helpers.createClass(ModesContentComputer, [
        {
            key: "setAnchor",
            value: function setAnchor(anchor) {
                this._anchor = anchor;
                this._result = [];
            }
        },
        {
            key: "clearResult",
            value: function clearResult() {
                this._result = [];
            }
        },
        {
            key: "computeAsync",
            value: function computeAsync(token) {
                var _this = this;
                var anchor = this._anchor;
                if (!this._editor.hasModel() || !anchor) return _asyncJs.AsyncIterableObject.EMPTY;
                var lineDecorations = ModesContentComputer._getLineDecorations(this._editor, anchor);
                return _asyncJs.AsyncIterableObject.merge(this._participants.map(function(participant) {
                    return _this._computeAsync(participant, lineDecorations, anchor, token);
                }));
            }
        },
        {
            key: "_computeAsync",
            value: function _computeAsync(participant, lineDecorations, anchor, token) {
                if (!participant.computeAsync) return _asyncJs.AsyncIterableObject.EMPTY;
                return participant.computeAsync(anchor, lineDecorations, token);
            }
        },
        {
            key: "computeSync",
            value: function computeSync() {
                if (!this._editor.hasModel() || !this._anchor) return [];
                var lineDecorations = ModesContentComputer._getLineDecorations(this._editor, this._anchor);
                var result = [];
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this._participants[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var participant = _step.value;
                        result = result.concat(participant.computeSync(this._anchor, lineDecorations));
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return _arraysJs.coalesce(result);
            }
        },
        {
            key: "onResult",
            value: function onResult(result, isFromSynchronousComputation) {
                // Always put synchronous messages before asynchronous ones
                if (isFromSynchronousComputation) this._result = result.concat(this._result);
                else this._result = this._result.concat(result);
            }
        },
        {
            key: "getResult",
            value: function getResult() {
                return this._result.slice(0);
            }
        },
        {
            key: "getResultWithLoadingMessage",
            value: function getResultWithLoadingMessage() {
                if (this._anchor) {
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator = this._participants[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var participant = _step.value;
                            if (participant.createLoadingMessage) {
                                var loadingMessage = participant.createLoadingMessage(this._anchor);
                                if (loadingMessage) return this._result.slice(0).concat([
                                    loadingMessage
                                ]);
                            }
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                }
                return this._result.slice(0);
            }
        }
    ], [
        {
            key: "_getLineDecorations",
            value: function _getLineDecorations(editor, anchor) {
                if (anchor.type !== 1 /* Range */ ) return [];
                var model = editor.getModel();
                var lineNumber = anchor.range.startLineNumber;
                var maxColumn = model.getLineMaxColumn(lineNumber);
                return editor.getLineDecorations(lineNumber).filter(function(d) {
                    if (d.options.isWholeLine) return true;
                    var startColumn = d.range.startLineNumber === lineNumber ? d.range.startColumn : 1;
                    var endColumn = d.range.endLineNumber === lineNumber ? d.range.endColumn : maxColumn;
                    if (d.options.showIfCollapsed) {
                        // Relax check around `showIfCollapsed` decorations to also include +/- 1 character
                        if (startColumn > anchor.range.startColumn + 1 || anchor.range.endColumn - 1 > endColumn) return false;
                    } else {
                        if (startColumn > anchor.range.startColumn || anchor.range.endColumn > endColumn) return false;
                    }
                    return true;
                });
            }
        }
    ]);
    return ModesContentComputer;
}();
var ModesContentHoverWidget = /*#__PURE__*/ function(Widget) {
    "use strict";
    _helpers.inherits(ModesContentHoverWidget1, Widget);
    var _super = _helpers.createSuper(ModesContentHoverWidget1);
    function ModesContentHoverWidget1(editor, _hoverVisibleKey, instantiationService, _keybindingService, _contextKeyService) {
        _helpers.classCallCheck(this, ModesContentHoverWidget1);
        var _this;
        _this = _super.call(this);
        _this._hoverVisibleKey = _hoverVisibleKey;
        _this._keybindingService = _keybindingService;
        _this._contextKeyService = _contextKeyService;
        // IContentWidget.allowEditorOverflow
        _this.allowEditorOverflow = true;
        _this._participants = [
            instantiationService.createInstance(_colorHoverParticipantJs.ColorHoverParticipant, editor, _helpers.assertThisInitialized(_this)),
            instantiationService.createInstance(_markdownHoverParticipantJs.MarkdownHoverParticipant, editor, _helpers.assertThisInitialized(_this)),
            instantiationService.createInstance(_inlineCompletionsHoverParticipantJs.InlineCompletionsHoverParticipant, editor, _helpers.assertThisInitialized(_this)),
            instantiationService.createInstance(_unicodeHighlighterJs.UnicodeHighlighterHoverParticipant, editor, _helpers.assertThisInitialized(_this)),
            instantiationService.createInstance(_markerHoverParticipantJs.MarkerHoverParticipant, editor, _helpers.assertThisInitialized(_this)), 
        ];
        _this._editor = editor;
        _this._isVisible = false;
        _this._stoleFocus = false;
        _this._renderDisposable = null;
        _this._hover = _this._register(new _hoverWidgetJs.HoverWidget());
        _this._hover.containerDomNode.classList.toggle('hidden', !_this._isVisible);
        _this.onkeydown(_this._hover.containerDomNode, function(e) {
            if (e.equals(9 /* Escape */ )) _this.hide();
        });
        _this._register(_this._editor.onDidChangeConfiguration(function(e) {
            if (e.hasChanged(43 /* fontInfo */ )) _this._updateFont();
        }));
        _this._editor.onDidLayoutChange(function() {
            return _this.layout();
        });
        _this.layout();
        _this._editor.addContentWidget(_helpers.assertThisInitialized(_this));
        _this._showAtPosition = null;
        _this._showAtRange = null;
        _this._stoleFocus = false;
        _this._messages = [];
        _this._messagesAreComplete = false;
        _this._lastAnchor = null;
        _this._computer = new ModesContentComputer(_this._editor, _this._participants);
        _this._highlightDecorations = [];
        _this._isChangingDecorations = false;
        _this._shouldFocus = false;
        _this._colorPicker = null;
        _this._preferAbove = _this._editor.getOption(52 /* hover */ ).above;
        _this._hoverOperation = new _hoverOperationJs.HoverOperation(_this._computer, function(result) {
            return _this._withResult(result, true);
        }, null, function(result) {
            return _this._withResult(result, false);
        }, _this._editor.getOption(52 /* hover */ ).delay);
        _this._register(_domJs.addStandardDisposableListener(_this.getDomNode(), _domJs.EventType.FOCUS, function() {
            if (_this._colorPicker) _this.getDomNode().classList.add('colorpicker-hover');
        }));
        _this._register(_domJs.addStandardDisposableListener(_this.getDomNode(), _domJs.EventType.BLUR, function() {
            _this.getDomNode().classList.remove('colorpicker-hover');
        }));
        _this._register(editor.onDidChangeConfiguration(function() {
            _this._hoverOperation.setHoverTime(_this._editor.getOption(52 /* hover */ ).delay);
            _this._preferAbove = _this._editor.getOption(52 /* hover */ ).above;
        }));
        _this._register(_modesJs.TokenizationRegistry.onDidChange(function() {
            if (_this._isVisible && _this._lastAnchor && _this._messages.length > 0) {
                _this._hover.contentsDomNode.textContent = '';
                _this._renderMessages(_this._lastAnchor, _this._messages);
            }
        }));
        return _this;
    }
    _helpers.createClass(ModesContentHoverWidget1, [
        {
            key: "dispose",
            value: function dispose() {
                this._hoverOperation.cancel();
                this._editor.removeContentWidget(this);
                _helpers.get(_helpers.getPrototypeOf(ModesContentHoverWidget1.prototype), "dispose", this).call(this);
            }
        },
        {
            key: "getId",
            value: function getId() {
                return ModesContentHoverWidget1.ID;
            }
        },
        {
            key: "getDomNode",
            value: function getDomNode() {
                return this._hover.containerDomNode;
            }
        },
        {
            key: "_shouldShowAt",
            value: function _shouldShowAt(mouseEvent) {
                var targetType = mouseEvent.target.type;
                if (targetType === 6 /* CONTENT_TEXT */ ) return true;
                if (targetType === 7 /* CONTENT_EMPTY */ ) {
                    var epsilon = this._editor.getOption(43 /* fontInfo */ ).typicalHalfwidthCharacterWidth / 2;
                    var data = mouseEvent.target.detail;
                    if (data && !data.isAfterLines && typeof data.horizontalDistanceToText === 'number' && data.horizontalDistanceToText < epsilon) // Let hover kick in even when the mouse is technically in the empty area after a line, given the distance is small enough
                    return true;
                }
                return false;
            }
        },
        {
            key: "maybeShowAt",
            value: function maybeShowAt(mouseEvent) {
                var _a;
                var anchorCandidates = [];
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this._participants[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var participant = _step.value;
                        if (typeof participant.suggestHoverAnchor === 'function') {
                            var anchor = participant.suggestHoverAnchor(mouseEvent);
                            if (anchor) anchorCandidates.push(anchor);
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                if (this._shouldShowAt(mouseEvent) && mouseEvent.target.range) {
                    // TODO@rebornix. This should be removed if we move Color Picker out of Hover component.
                    // Check if mouse is hovering on color decorator
                    var hoverOnColorDecorator = _helpers.toConsumableArray(((_a = mouseEvent.target.element) === null || _a === void 0 ? void 0 : _a.classList.values()) || []).find(function(className) {
                        return className.startsWith('ced-colorBox');
                    }) && mouseEvent.target.range.endColumn - mouseEvent.target.range.startColumn === 1;
                    var showAtRange = hoverOnColorDecorator // shift the mouse focus by one as color decorator is a `before` decoration of next character.
                     ? new _rangeJs.Range(mouseEvent.target.range.startLineNumber, mouseEvent.target.range.startColumn + 1, mouseEvent.target.range.endLineNumber, mouseEvent.target.range.endColumn + 1) : mouseEvent.target.range;
                    anchorCandidates.push(new _hoverTypesJs.HoverRangeAnchor(0, showAtRange));
                }
                if (anchorCandidates.length === 0) return false;
                anchorCandidates.sort(function(a, b) {
                    return b.priority - a.priority;
                });
                this._startShowingAt(anchorCandidates[0], 0 /* Delayed */ , false);
                return true;
            }
        },
        {
            key: "_showAt",
            value: function _showAt(position, range, focus) {
                // Position has changed
                this._showAtPosition = position;
                this._showAtRange = range;
                this._hoverVisibleKey.set(true);
                this._isVisible = true;
                this._hover.containerDomNode.classList.toggle('hidden', !this._isVisible);
                this._editor.layoutContentWidget(this);
                // Simply force a synchronous render on the editor
                // such that the widget does not really render with left = '0px'
                this._editor.render();
                this._stoleFocus = focus;
                if (focus) this._hover.containerDomNode.focus();
            }
        },
        {
            key: "getPosition",
            value: function getPosition() {
                if (this._isVisible) {
                    var preferAbove = this._preferAbove;
                    if (!preferAbove && this._contextKeyService.getContextKeyValue(_suggestJs.Context.Visible.key)) // Prefer rendering above if the suggest widget is visible
                    preferAbove = true;
                    return {
                        position: this._showAtPosition,
                        range: this._showAtRange,
                        preference: preferAbove ? [
                            1 /* ABOVE */ ,
                            2 /* BELOW */ , 
                        ] : [
                            2 /* BELOW */ ,
                            1 /* ABOVE */ , 
                        ]
                    };
                }
                return null;
            }
        },
        {
            key: "_updateFont",
            value: function _updateFont() {
                var _this = this;
                var codeClasses = Array.prototype.slice.call(this._hover.contentsDomNode.getElementsByClassName('code'));
                codeClasses.forEach(function(node) {
                    return _this._editor.applyFontInfo(node);
                });
            }
        },
        {
            key: "_updateContents",
            value: function _updateContents(node) {
                this._hover.contentsDomNode.textContent = '';
                this._hover.contentsDomNode.appendChild(node);
                this._updateFont();
                this._editor.layoutContentWidget(this);
                this._hover.onContentsChanged();
            }
        },
        {
            key: "layout",
            value: function layout() {
                var height = Math.max(this._editor.getLayoutInfo().height / 4, 250);
                var ref = this._editor.getOption(43 /* fontInfo */ ), fontSize = ref.fontSize, lineHeight = ref.lineHeight;
                this._hover.contentsDomNode.style.fontSize = "".concat(fontSize, "px");
                this._hover.contentsDomNode.style.lineHeight = "".concat(lineHeight / fontSize);
                this._hover.contentsDomNode.style.maxHeight = "".concat(height, "px");
                this._hover.contentsDomNode.style.maxWidth = "".concat(Math.max(this._editor.getLayoutInfo().width * 0.66, 500), "px");
            }
        },
        {
            key: "onModelDecorationsChanged",
            value: function onModelDecorationsChanged() {
                if (this._isChangingDecorations) return;
                if (this._isVisible) {
                    // The decorations have changed and the hover is visible,
                    // we need to recompute the displayed text
                    this._hoverOperation.cancel();
                    this._computer.clearResult();
                    if (!this._colorPicker) this._hoverOperation.start(0 /* Delayed */ );
                }
            }
        },
        {
            key: "startShowingAtRange",
            value: function startShowingAtRange(range, mode, focus) {
                this._startShowingAt(new _hoverTypesJs.HoverRangeAnchor(0, range), mode, focus);
            }
        },
        {
            key: "_startShowingAt",
            value: function _startShowingAt(anchor, mode, focus) {
                if (this._lastAnchor && this._lastAnchor.equals(anchor)) // We have to show the widget at the exact same range as before, so no work is needed
                return;
                this._hoverOperation.cancel();
                if (this._isVisible) {
                    // The range might have changed, but the hover is visible
                    // Instead of hiding it completely, filter out messages that are still in the new range and
                    // kick off a new computation
                    if (!this._showAtPosition || !this._lastAnchor || !anchor.canAdoptVisibleHover(this._lastAnchor, this._showAtPosition)) this.hide();
                    else {
                        var filteredMessages = this._messages.filter(function(m) {
                            return m.isValidForHoverAnchor(anchor);
                        });
                        if (filteredMessages.length === 0) this.hide();
                        else if (filteredMessages.length === this._messages.length && this._messagesAreComplete) // no change
                        return;
                        else this._renderMessages(anchor, filteredMessages);
                    }
                }
                this._lastAnchor = anchor;
                this._computer.setAnchor(anchor);
                this._shouldFocus = focus;
                this._hoverOperation.start(mode);
            }
        },
        {
            key: "hide",
            value: function hide() {
                this._lastAnchor = null;
                this._hoverOperation.cancel();
                if (this._isVisible) {
                    var _this = this;
                    setTimeout(function() {
                        // Give commands a chance to see the key
                        if (!_this._isVisible) _this._hoverVisibleKey.set(false);
                    }, 0);
                    this._isVisible = false;
                    this._hover.containerDomNode.classList.toggle('hidden', !this._isVisible);
                    this._editor.layoutContentWidget(this);
                    if (this._stoleFocus) this._editor.focus();
                }
                this._isChangingDecorations = true;
                this._highlightDecorations = this._editor.deltaDecorations(this._highlightDecorations, []);
                this._isChangingDecorations = false;
                if (this._renderDisposable) {
                    this._renderDisposable.dispose();
                    this._renderDisposable = null;
                }
                this._colorPicker = null;
            }
        },
        {
            key: "isColorPickerVisible",
            value: function isColorPickerVisible() {
                return !!this._colorPicker;
            }
        },
        {
            key: "setColorPicker",
            value: function setColorPicker(widget) {
                this._colorPicker = widget;
            }
        },
        {
            key: "onContentsChanged",
            value: function onContentsChanged() {
                this._hover.onContentsChanged();
            }
        },
        {
            key: "_withResult",
            value: function _withResult(result, complete) {
                this._messages = result;
                this._messagesAreComplete = complete;
                if (this._lastAnchor && this._messages.length > 0) this._renderMessages(this._lastAnchor, this._messages);
                else if (complete) this.hide();
            }
        },
        {
            key: "_renderMessages",
            value: function _renderMessages(anchor, messages) {
                if (this._renderDisposable) {
                    this._renderDisposable.dispose();
                    this._renderDisposable = null;
                }
                this._colorPicker = null; // TODO: TypeScript thinks this is always null
                // update column from which to show
                var renderColumn = 1073741824 /* MAX_SAFE_SMALL_INTEGER */ ;
                var highlightRange = messages[0].range;
                var forceShowAtRange = null;
                var fragment = document.createDocumentFragment();
                var disposables = new _lifecycleJs.DisposableStore();
                var hoverParts = new Map();
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = messages[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var msg = _step.value;
                        renderColumn = Math.min(renderColumn, msg.range.startColumn);
                        highlightRange = _rangeJs.Range.plusRange(highlightRange, msg.range);
                        if (msg.forceShowAtRange) forceShowAtRange = msg.range;
                        if (!hoverParts.has(msg.owner)) hoverParts.set(msg.owner, []);
                        var dest = hoverParts.get(msg.owner);
                        dest.push(msg);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                var statusBar = disposables.add(new EditorHoverStatusBar(this._keybindingService));
                var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                try {
                    for(var _iterator1 = this._participants[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                        var participant = _step1.value;
                        if (hoverParts.has(participant)) {
                            var participantHoverParts = hoverParts.get(participant);
                            disposables.add(participant.renderHoverParts(participantHoverParts, fragment, statusBar));
                        }
                    }
                } catch (err) {
                    _didIteratorError1 = true;
                    _iteratorError1 = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                            _iterator1.return();
                        }
                    } finally{
                        if (_didIteratorError1) {
                            throw _iteratorError1;
                        }
                    }
                }
                if (statusBar.hasContent) fragment.appendChild(statusBar.hoverElement);
                this._renderDisposable = disposables;
                // show
                if (fragment.hasChildNodes()) {
                    if (forceShowAtRange) this._showAt(forceShowAtRange.getStartPosition(), forceShowAtRange, this._shouldFocus);
                    else this._showAt(new _positionJs.Position(anchor.range.startLineNumber, renderColumn), highlightRange, this._shouldFocus);
                    this._updateContents(fragment);
                }
                if (this._colorPicker) this._colorPicker.layout();
                this._isChangingDecorations = true;
                this._highlightDecorations = this._editor.deltaDecorations(this._highlightDecorations, highlightRange ? [
                    {
                        range: highlightRange,
                        options: ModesContentHoverWidget1._DECORATION_OPTIONS
                    }
                ] : []);
                this._isChangingDecorations = false;
            }
        }
    ]);
    return ModesContentHoverWidget1;
}(_widgetJs.Widget);
ModesContentHoverWidget.ID = 'editor.contrib.modesContentHoverWidget';
ModesContentHoverWidget._DECORATION_OPTIONS = _textModelJs.ModelDecorationOptions.register({
    description: 'content-hover-highlight',
    className: 'hoverHighlight'
});
ModesContentHoverWidget = __decorate([
    __param(2, _instantiationJs.IInstantiationService),
    __param(3, _keybindingJs.IKeybindingService),
    __param(4, _contextkeyJs.IContextKeyService)
], ModesContentHoverWidget);

},{"@swc/helpers":"erO4s","../../../base/browser/dom.js":"bxmlc","../../../base/browser/ui/hover/hoverWidget.js":"5vfHP","../../../base/browser/ui/widget.js":"2HEtf","../../../base/common/arrays.js":"bZs3E","../../../base/common/lifecycle.js":"bcbPy","../../common/core/position.js":"6xP0w","../../common/core/range.js":"VbyL8","../../common/model/textModel.js":"f18vR","../../common/modes.js":"bRbY1","./colorHoverParticipant.js":"8mWql","./hoverOperation.js":"6dDxJ","./hoverTypes.js":"3k1AC","./markdownHoverParticipant.js":"3IqyG","./markerHoverParticipant.js":"lJmC0","../inlineCompletions/inlineCompletionsHoverParticipant.js":"eqxGz","../../../platform/contextkey/common/contextkey.js":"5cjav","../../../platform/instantiation/common/instantiation.js":"9ABZB","../../../platform/keybinding/common/keybinding.js":"5rr15","../suggest/suggest.js":"31aA1","../unicodeHighlighter/unicodeHighlighter.js":"elscl","../../../base/common/async.js":"kMhSh","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"5vfHP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HoverWidget", function() {
    return HoverWidget;
});
parcelHelpers.export(exports, "HoverAction", function() {
    return HoverAction;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _domJs = require("../../dom.js");
var _scrollableElementJs = require("../scrollbar/scrollableElement.js");
var _lifecycleJs = require("../../../common/lifecycle.js");
var _hoverCss = require("./hover.css");
var $ = _domJs.$;
var HoverWidget = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(HoverWidget, Disposable);
    var _super = _helpers.createSuper(HoverWidget);
    function HoverWidget() {
        _helpers.classCallCheck(this, HoverWidget);
        var _this;
        _this = _super.call(this);
        _this.containerDomNode = document.createElement('div');
        _this.containerDomNode.className = 'monaco-hover';
        _this.containerDomNode.tabIndex = 0;
        _this.containerDomNode.setAttribute('role', 'tooltip');
        _this.contentsDomNode = document.createElement('div');
        _this.contentsDomNode.className = 'monaco-hover-content';
        _this._scrollbar = _this._register(new _scrollableElementJs.DomScrollableElement(_this.contentsDomNode, {
            consumeMouseWheelIfScrollbarIsNeeded: true
        }));
        _this.containerDomNode.appendChild(_this._scrollbar.getDomNode());
        return _this;
    }
    _helpers.createClass(HoverWidget, [
        {
            key: "onContentsChanged",
            value: function onContentsChanged() {
                this._scrollbar.scanDomNode();
            }
        }
    ]);
    return HoverWidget;
}(_lifecycleJs.Disposable);
var HoverAction = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(HoverAction, Disposable);
    var _super = _helpers.createSuper(HoverAction);
    function HoverAction(parent, actionOptions, keybindingLabel) {
        _helpers.classCallCheck(this, HoverAction);
        var _this;
        _this = _super.call(this);
        _this.actionContainer = _domJs.append(parent, $('div.action-container'));
        _this.action = _domJs.append(_this.actionContainer, $('a.action'));
        _this.action.setAttribute('role', 'button');
        if (actionOptions.iconClass) _domJs.append(_this.action, $("span.icon.".concat(actionOptions.iconClass)));
        var label = _domJs.append(_this.action, $('span'));
        label.textContent = keybindingLabel ? "".concat(actionOptions.label, " (").concat(keybindingLabel, ")") : actionOptions.label;
        _this._register(_domJs.addDisposableListener(_this.actionContainer, _domJs.EventType.MOUSE_DOWN, function(e) {
            e.stopPropagation();
            e.preventDefault();
            actionOptions.run(_this.actionContainer);
        }));
        _this.setEnabled(true);
        return _this;
    }
    _helpers.createClass(HoverAction, [
        {
            key: "setEnabled",
            value: function setEnabled(enabled) {
                if (enabled) {
                    this.actionContainer.classList.remove('disabled');
                    this.actionContainer.removeAttribute('aria-disabled');
                } else {
                    this.actionContainer.classList.add('disabled');
                    this.actionContainer.setAttribute('aria-disabled', 'true');
                }
            }
        }
    ], [
        {
            key: "render",
            value: function render(parent, actionOptions, keybindingLabel) {
                return new HoverAction(parent, actionOptions, keybindingLabel);
            }
        }
    ]);
    return HoverAction;
}(_lifecycleJs.Disposable);

},{"@swc/helpers":"erO4s","../../dom.js":"bxmlc","../scrollbar/scrollableElement.js":"gBkC9","../../../common/lifecycle.js":"bcbPy","./hover.css":"aBDF5","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"aBDF5":[function() {},{}],"8mWql":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ColorHover", function() {
    return ColorHover;
});
parcelHelpers.export(exports, "ColorHoverParticipant", function() {
    return ColorHoverParticipant;
});
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
var _asyncJs = require("../../../base/common/async.js");
var _cancellationJs = require("../../../base/common/cancellation.js");
var _colorJs = require("../../../base/common/color.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _rangeJs = require("../../common/core/range.js");
var _colorJs1 = require("../colorPicker/color.js");
var _colorDetectorJs = require("../colorPicker/colorDetector.js");
var _colorPickerModelJs = require("../colorPicker/colorPickerModel.js");
var _colorPickerWidgetJs = require("../colorPicker/colorPickerWidget.js");
var _themeServiceJs = require("../../../platform/theme/common/themeService.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var ColorHover = /*#__PURE__*/ function() {
    "use strict";
    function ColorHover(owner, range, model, provider) {
        _helpers.classCallCheck(this, ColorHover);
        this.owner = owner;
        this.range = range;
        this.model = model;
        this.provider = provider;
        /**
         * Force the hover to always be rendered at this specific range,
         * even in the case of multiple hover parts.
         */ this.forceShowAtRange = true;
    }
    _helpers.createClass(ColorHover, [
        {
            key: "isValidForHoverAnchor",
            value: function isValidForHoverAnchor(anchor) {
                return anchor.type === 1 /* Range */  && this.range.startColumn <= anchor.range.startColumn && this.range.endColumn >= anchor.range.endColumn;
            }
        }
    ]);
    return ColorHover;
}();
var ColorHoverParticipant = /*#__PURE__*/ function() {
    "use strict";
    function ColorHoverParticipant1(_editor, _hover, _themeService) {
        _helpers.classCallCheck(this, ColorHoverParticipant1);
        this._editor = _editor;
        this._hover = _hover;
        this._themeService = _themeService;
    }
    _helpers.createClass(ColorHoverParticipant1, [
        {
            key: "computeSync",
            value: function computeSync(anchor, lineDecorations) {
                return [];
            }
        },
        {
            key: "computeAsync",
            value: function computeAsync(anchor, lineDecorations, token) {
                return _asyncJs.AsyncIterableObject.fromPromise(this._computeAsync(anchor, lineDecorations, token));
            }
        },
        {
            key: "_computeAsync",
            value: function _computeAsync(anchor, lineDecorations, token) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var colorDetector, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, d, colorData, colorHover;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                if (this._editor.hasModel()) {
                                    _ctx.next = 2;
                                    break;
                                }
                                return _ctx.abrupt("return", []);
                            case 2:
                                colorDetector = _colorDetectorJs.ColorDetector.get(this._editor);
                                _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                                _ctx.prev = 4;
                                _iterator = lineDecorations[Symbol.iterator]();
                            case 6:
                                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                                    _ctx.next = 19;
                                    break;
                                }
                                d = _step.value;
                                if (colorDetector.isColorDecorationId(d.id)) {
                                    _ctx.next = 10;
                                    break;
                                }
                                return _ctx.abrupt("continue", 16);
                            case 10:
                                colorData = colorDetector.getColorData(d.range.getStartPosition());
                                if (!colorData) {
                                    _ctx.next = 16;
                                    break;
                                }
                                _ctx.next = 14;
                                return this._createColorHover(this._editor.getModel(), colorData.colorInfo, colorData.provider);
                            case 14:
                                colorHover = _ctx.sent;
                                return _ctx.abrupt("return", [
                                    colorHover
                                ]);
                            case 16:
                                _iteratorNormalCompletion = true;
                                _ctx.next = 6;
                                break;
                            case 19:
                                _ctx.next = 25;
                                break;
                            case 21:
                                _ctx.prev = 21;
                                _ctx.t0 = _ctx["catch"](4);
                                _didIteratorError = true;
                                _iteratorError = _ctx.t0;
                            case 25:
                                _ctx.prev = 25;
                                _ctx.prev = 26;
                                if (!_iteratorNormalCompletion && _iterator.return != null) {
                                    _iterator.return();
                                }
                            case 28:
                                _ctx.prev = 28;
                                if (!_didIteratorError) {
                                    _ctx.next = 31;
                                    break;
                                }
                                throw _iteratorError;
                            case 31:
                                return _ctx.finish(28);
                            case 32:
                                return _ctx.finish(25);
                            case 33:
                                return _ctx.abrupt("return", []);
                            case 34:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this, [
                        [
                            4,
                            21,
                            25,
                            33
                        ],
                        [
                            26,
                            ,
                            28,
                            32
                        ]
                    ]);
                }));
            }
        },
        {
            key: "_createColorHover",
            value: function _createColorHover(editorModel, colorInfo, provider) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var originalText, _color, red, green, blue, alpha, rgba, color, colorPresentations, model;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                originalText = editorModel.getValueInRange(colorInfo.range);
                                _color = colorInfo.color, red = _color.red, green = _color.green, blue = _color.blue, alpha = _color.alpha;
                                rgba = new _colorJs.RGBA(Math.round(red * 255), Math.round(green * 255), Math.round(blue * 255), alpha);
                                color = new _colorJs.Color(rgba);
                                _ctx.next = 6;
                                return _colorJs1.getColorPresentations(editorModel, colorInfo, provider, _cancellationJs.CancellationToken.None);
                            case 6:
                                colorPresentations = _ctx.sent;
                                model = new _colorPickerModelJs.ColorPickerModel(color, [], 0);
                                model.colorPresentations = colorPresentations || [];
                                model.guessColorPresentation(color, originalText);
                                return _ctx.abrupt("return", new ColorHover(this, _rangeJs.Range.lift(colorInfo.range), model, provider));
                            case 11:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this);
                }));
            }
        },
        {
            key: "renderHoverParts",
            value: function renderHoverParts(hoverParts, fragment, statusBar) {
                var _this = this;
                if (hoverParts.length === 0 || !this._editor.hasModel()) return _lifecycleJs.Disposable.None;
                var disposables = new _lifecycleJs.DisposableStore();
                var colorHover = hoverParts[0];
                var editorModel = this._editor.getModel();
                var model = colorHover.model;
                var widget = disposables.add(new _colorPickerWidgetJs.ColorPickerWidget(fragment, model, this._editor.getOption(128 /* pixelRatio */ ), this._themeService));
                var range = new _rangeJs.Range(colorHover.range.startLineNumber, colorHover.range.startColumn, colorHover.range.endLineNumber, colorHover.range.endColumn);
                var updateEditorModel = function() {
                    var textEdits;
                    var newRange;
                    if (model.presentation.textEdit) {
                        textEdits = [
                            model.presentation.textEdit
                        ];
                        newRange = new _rangeJs.Range(model.presentation.textEdit.range.startLineNumber, model.presentation.textEdit.range.startColumn, model.presentation.textEdit.range.endLineNumber, model.presentation.textEdit.range.endColumn);
                        var trackedRange = _this._editor.getModel()._setTrackedRange(null, newRange, 3 /* GrowsOnlyWhenTypingAfter */ );
                        _this._editor.pushUndoStop();
                        _this._editor.executeEdits('colorpicker', textEdits);
                        newRange = _this._editor.getModel()._getTrackedRange(trackedRange) || newRange;
                    } else {
                        textEdits = [
                            {
                                identifier: null,
                                range: range,
                                text: model.presentation.label,
                                forceMoveMarkers: false
                            }
                        ];
                        newRange = range.setEndPosition(range.endLineNumber, range.startColumn + model.presentation.label.length);
                        _this._editor.pushUndoStop();
                        _this._editor.executeEdits('colorpicker', textEdits);
                    }
                    if (model.presentation.additionalTextEdits) {
                        textEdits = _helpers.toConsumableArray(model.presentation.additionalTextEdits);
                        _this._editor.executeEdits('colorpicker', textEdits);
                        _this._hover.hide();
                    }
                    _this._editor.pushUndoStop();
                    range = newRange;
                };
                var updateColorPresentations = function(color) {
                    return _colorJs1.getColorPresentations(editorModel, {
                        range: range,
                        color: {
                            red: color.rgba.r / 255,
                            green: color.rgba.g / 255,
                            blue: color.rgba.b / 255,
                            alpha: color.rgba.a
                        }
                    }, colorHover.provider, _cancellationJs.CancellationToken.None).then(function(colorPresentations) {
                        model.colorPresentations = colorPresentations || [];
                    });
                };
                disposables.add(model.onColorFlushed(function(color) {
                    updateColorPresentations(color).then(updateEditorModel);
                }));
                disposables.add(model.onDidChangeColor(updateColorPresentations));
                this._hover.setColorPicker(widget);
                return disposables;
            }
        }
    ]);
    return ColorHoverParticipant1;
}();
ColorHoverParticipant = __decorate([
    __param(2, _themeServiceJs.IThemeService)
], ColorHoverParticipant);

},{"@swc/helpers":"erO4s","regenerator-runtime":"12Ae8","../../../base/common/async.js":"kMhSh","../../../base/common/cancellation.js":"1C4LY","../../../base/common/color.js":"2jKDp","../../../base/common/lifecycle.js":"bcbPy","../../common/core/range.js":"VbyL8","../colorPicker/color.js":"ojNlZ","../colorPicker/colorDetector.js":"3Jhf9","../colorPicker/colorPickerModel.js":"kBSCy","../colorPicker/colorPickerWidget.js":"5m040","../../../platform/theme/common/themeService.js":"kE7QB","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"kBSCy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ColorPickerModel", function() {
    return ColorPickerModel;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _eventJs = require("../../../base/common/event.js");
var ColorPickerModel = /*#__PURE__*/ function() {
    "use strict";
    function ColorPickerModel(color, availableColorPresentations, presentationIndex) {
        _helpers.classCallCheck(this, ColorPickerModel);
        this.presentationIndex = presentationIndex;
        this._onColorFlushed = new _eventJs.Emitter();
        this.onColorFlushed = this._onColorFlushed.event;
        this._onDidChangeColor = new _eventJs.Emitter();
        this.onDidChangeColor = this._onDidChangeColor.event;
        this._onDidChangePresentation = new _eventJs.Emitter();
        this.onDidChangePresentation = this._onDidChangePresentation.event;
        this.originalColor = color;
        this._color = color;
        this._colorPresentations = availableColorPresentations;
    }
    _helpers.createClass(ColorPickerModel, [
        {
            key: "color",
            get: function get() {
                return this._color;
            },
            set: function set(color) {
                if (this._color.equals(color)) return;
                this._color = color;
                this._onDidChangeColor.fire(color);
            }
        },
        {
            key: "presentation",
            get: function get() {
                return this.colorPresentations[this.presentationIndex];
            }
        },
        {
            key: "colorPresentations",
            get: function get() {
                return this._colorPresentations;
            },
            set: function set(colorPresentations) {
                this._colorPresentations = colorPresentations;
                if (this.presentationIndex > colorPresentations.length - 1) this.presentationIndex = 0;
                this._onDidChangePresentation.fire(this.presentation);
            }
        },
        {
            key: "selectNextColorPresentation",
            value: function selectNextColorPresentation() {
                this.presentationIndex = (this.presentationIndex + 1) % this.colorPresentations.length;
                this.flushColor();
                this._onDidChangePresentation.fire(this.presentation);
            }
        },
        {
            key: "guessColorPresentation",
            value: function guessColorPresentation(color, originalText) {
                for(var i = 0; i < this.colorPresentations.length; i++)if (originalText.toLowerCase() === this.colorPresentations[i].label) {
                    this.presentationIndex = i;
                    this._onDidChangePresentation.fire(this.presentation);
                    break;
                }
            }
        },
        {
            key: "flushColor",
            value: function flushColor() {
                this._onColorFlushed.fire(this._color);
            }
        }
    ]);
    return ColorPickerModel;
}();

},{"@swc/helpers":"erO4s","../../../base/common/event.js":"9IBcK","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"5m040":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ColorPickerHeader", function() {
    return ColorPickerHeader;
});
parcelHelpers.export(exports, "ColorPickerBody", function() {
    return ColorPickerBody;
});
parcelHelpers.export(exports, "ColorPickerWidget", function() {
    return ColorPickerWidget;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _browserJs = require("../../../base/browser/browser.js");
var _domJs = require("../../../base/browser/dom.js");
var _globalMouseMoveMonitorJs = require("../../../base/browser/globalMouseMoveMonitor.js");
var _widgetJs = require("../../../base/browser/ui/widget.js");
var _colorJs = require("../../../base/common/color.js");
var _eventJs = require("../../../base/common/event.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _colorPickerCss = require("./colorPicker.css");
var _nlsJs = require("../../../nls.js");
var _colorRegistryJs = require("../../../platform/theme/common/colorRegistry.js");
var _themeServiceJs = require("../../../platform/theme/common/themeService.js");
var $ = _domJs.$;
var ColorPickerHeader = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(ColorPickerHeader, Disposable);
    var _super = _helpers.createSuper(ColorPickerHeader);
    function ColorPickerHeader(container, model, themeService) {
        _helpers.classCallCheck(this, ColorPickerHeader);
        var _this;
        _this = _super.call(this);
        _this.model = model;
        _this.domNode = $('.colorpicker-header');
        _domJs.append(container, _this.domNode);
        _this.pickedColorNode = _domJs.append(_this.domNode, $('.picked-color'));
        var tooltip = _nlsJs.localize('clickToToggleColorOptions', "Click to toggle color options (rgb/hsl/hex)");
        _this.pickedColorNode.setAttribute('title', tooltip);
        var colorBox = _domJs.append(_this.domNode, $('.original-color'));
        colorBox.style.backgroundColor = _colorJs.Color.Format.CSS.format(_this.model.originalColor) || '';
        _this.backgroundColor = themeService.getColorTheme().getColor(_colorRegistryJs.editorHoverBackground) || _colorJs.Color.white;
        _this._register(_themeServiceJs.registerThemingParticipant(function(theme, collector) {
            _this.backgroundColor = theme.getColor(_colorRegistryJs.editorHoverBackground) || _colorJs.Color.white;
        }));
        _this._register(_domJs.addDisposableListener(_this.pickedColorNode, _domJs.EventType.CLICK, function() {
            return _this.model.selectNextColorPresentation();
        }));
        _this._register(_domJs.addDisposableListener(colorBox, _domJs.EventType.CLICK, function() {
            _this.model.color = _this.model.originalColor;
            _this.model.flushColor();
        }));
        _this._register(model.onDidChangeColor(_this.onDidChangeColor, _helpers.assertThisInitialized(_this)));
        _this._register(model.onDidChangePresentation(_this.onDidChangePresentation, _helpers.assertThisInitialized(_this)));
        _this.pickedColorNode.style.backgroundColor = _colorJs.Color.Format.CSS.format(model.color) || '';
        _this.pickedColorNode.classList.toggle('light', model.color.rgba.a < 0.5 ? _this.backgroundColor.isLighter() : model.color.isLighter());
        _this.onDidChangeColor(_this.model.color);
        return _this;
    }
    _helpers.createClass(ColorPickerHeader, [
        {
            key: "onDidChangeColor",
            value: function onDidChangeColor(color) {
                this.pickedColorNode.style.backgroundColor = _colorJs.Color.Format.CSS.format(color) || '';
                this.pickedColorNode.classList.toggle('light', color.rgba.a < 0.5 ? this.backgroundColor.isLighter() : color.isLighter());
                this.onDidChangePresentation();
            }
        },
        {
            key: "onDidChangePresentation",
            value: function onDidChangePresentation() {
                this.pickedColorNode.textContent = this.model.presentation ? this.model.presentation.label : '';
                this.pickedColorNode.prepend($('.codicon.codicon-color-mode'));
            }
        }
    ]);
    return ColorPickerHeader;
}(_lifecycleJs.Disposable);
var ColorPickerBody = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(ColorPickerBody, Disposable);
    var _super = _helpers.createSuper(ColorPickerBody);
    function ColorPickerBody(container, model, pixelRatio) {
        _helpers.classCallCheck(this, ColorPickerBody);
        var _this;
        _this = _super.call(this);
        _this.model = model;
        _this.pixelRatio = pixelRatio;
        _this.domNode = $('.colorpicker-body');
        _domJs.append(container, _this.domNode);
        _this.saturationBox = new SaturationBox(_this.domNode, _this.model, _this.pixelRatio);
        _this._register(_this.saturationBox);
        _this._register(_this.saturationBox.onDidChange(_this.onDidSaturationValueChange, _helpers.assertThisInitialized(_this)));
        _this._register(_this.saturationBox.onColorFlushed(_this.flushColor, _helpers.assertThisInitialized(_this)));
        _this.opacityStrip = new OpacityStrip(_this.domNode, _this.model);
        _this._register(_this.opacityStrip);
        _this._register(_this.opacityStrip.onDidChange(_this.onDidOpacityChange, _helpers.assertThisInitialized(_this)));
        _this._register(_this.opacityStrip.onColorFlushed(_this.flushColor, _helpers.assertThisInitialized(_this)));
        _this.hueStrip = new HueStrip(_this.domNode, _this.model);
        _this._register(_this.hueStrip);
        _this._register(_this.hueStrip.onDidChange(_this.onDidHueChange, _helpers.assertThisInitialized(_this)));
        _this._register(_this.hueStrip.onColorFlushed(_this.flushColor, _helpers.assertThisInitialized(_this)));
        return _this;
    }
    _helpers.createClass(ColorPickerBody, [
        {
            key: "flushColor",
            value: function flushColor() {
                this.model.flushColor();
            }
        },
        {
            key: "onDidSaturationValueChange",
            value: function onDidSaturationValueChange(param) {
                var s = param.s, v = param.v;
                var hsva = this.model.color.hsva;
                this.model.color = new _colorJs.Color(new _colorJs.HSVA(hsva.h, s, v, hsva.a));
            }
        },
        {
            key: "onDidOpacityChange",
            value: function onDidOpacityChange(a) {
                var hsva = this.model.color.hsva;
                this.model.color = new _colorJs.Color(new _colorJs.HSVA(hsva.h, hsva.s, hsva.v, a));
            }
        },
        {
            key: "onDidHueChange",
            value: function onDidHueChange(value) {
                var hsva = this.model.color.hsva;
                var h = (1 - value) * 360;
                this.model.color = new _colorJs.Color(new _colorJs.HSVA(h === 360 ? 0 : h, hsva.s, hsva.v, hsva.a));
            }
        },
        {
            key: "layout",
            value: function layout() {
                this.saturationBox.layout();
                this.opacityStrip.layout();
                this.hueStrip.layout();
            }
        }
    ]);
    return ColorPickerBody;
}(_lifecycleJs.Disposable);
var SaturationBox = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(SaturationBox, Disposable);
    var _super = _helpers.createSuper(SaturationBox);
    function SaturationBox(container, model, pixelRatio) {
        _helpers.classCallCheck(this, SaturationBox);
        var _this;
        _this = _super.call(this);
        _this.model = model;
        _this.pixelRatio = pixelRatio;
        _this._onDidChange = new _eventJs.Emitter();
        _this.onDidChange = _this._onDidChange.event;
        _this._onColorFlushed = new _eventJs.Emitter();
        _this.onColorFlushed = _this._onColorFlushed.event;
        _this.domNode = $('.saturation-wrap');
        _domJs.append(container, _this.domNode);
        // Create canvas, draw selected color
        _this.canvas = document.createElement('canvas');
        _this.canvas.className = 'saturation-box';
        _domJs.append(_this.domNode, _this.canvas);
        // Add selection circle
        _this.selection = $('.saturation-selection');
        _domJs.append(_this.domNode, _this.selection);
        _this.layout();
        _this._register(_domJs.addDisposableGenericMouseDownListner(_this.domNode, function(e) {
            return _this.onMouseDown(e);
        }));
        _this._register(_this.model.onDidChangeColor(_this.onDidChangeColor, _helpers.assertThisInitialized(_this)));
        _this.monitor = null;
        return _this;
    }
    _helpers.createClass(SaturationBox, [
        {
            key: "onMouseDown",
            value: function onMouseDown(e) {
                var _this = this;
                this.monitor = this._register(new _globalMouseMoveMonitorJs.GlobalMouseMoveMonitor());
                var origin = _domJs.getDomNodePagePosition(this.domNode);
                if (e.target !== this.selection) this.onDidChangePosition(e.offsetX, e.offsetY);
                this.monitor.startMonitoring(e.target, e.buttons, _globalMouseMoveMonitorJs.standardMouseMoveMerger, function(event) {
                    return _this.onDidChangePosition(event.posx - origin.left, event.posy - origin.top);
                }, function() {
                    return null;
                });
                var mouseUpListener = _domJs.addDisposableGenericMouseUpListner(document, function() {
                    _this._onColorFlushed.fire();
                    mouseUpListener.dispose();
                    if (_this.monitor) {
                        _this.monitor.stopMonitoring(true);
                        _this.monitor = null;
                    }
                }, true);
            }
        },
        {
            key: "onDidChangePosition",
            value: function onDidChangePosition(left, top) {
                var s = Math.max(0, Math.min(1, left / this.width));
                var v = Math.max(0, Math.min(1, 1 - top / this.height));
                this.paintSelection(s, v);
                this._onDidChange.fire({
                    s: s,
                    v: v
                });
            }
        },
        {
            key: "layout",
            value: function layout() {
                this.width = this.domNode.offsetWidth;
                this.height = this.domNode.offsetHeight;
                this.canvas.width = this.width * this.pixelRatio;
                this.canvas.height = this.height * this.pixelRatio;
                this.paint();
                var hsva = this.model.color.hsva;
                this.paintSelection(hsva.s, hsva.v);
            }
        },
        {
            key: "paint",
            value: function paint() {
                var hsva = this.model.color.hsva;
                var saturatedColor = new _colorJs.Color(new _colorJs.HSVA(hsva.h, 1, 1, 1));
                var ctx = this.canvas.getContext('2d');
                var whiteGradient = ctx.createLinearGradient(0, 0, this.canvas.width, 0);
                whiteGradient.addColorStop(0, 'rgba(255, 255, 255, 1)');
                whiteGradient.addColorStop(0.5, 'rgba(255, 255, 255, 0.5)');
                whiteGradient.addColorStop(1, 'rgba(255, 255, 255, 0)');
                var blackGradient = ctx.createLinearGradient(0, 0, 0, this.canvas.height);
                blackGradient.addColorStop(0, 'rgba(0, 0, 0, 0)');
                blackGradient.addColorStop(1, 'rgba(0, 0, 0, 1)');
                ctx.rect(0, 0, this.canvas.width, this.canvas.height);
                ctx.fillStyle = _colorJs.Color.Format.CSS.format(saturatedColor);
                ctx.fill();
                ctx.fillStyle = whiteGradient;
                ctx.fill();
                ctx.fillStyle = blackGradient;
                ctx.fill();
            }
        },
        {
            key: "paintSelection",
            value: function paintSelection(s, v) {
                this.selection.style.left = "".concat(s * this.width, "px");
                this.selection.style.top = "".concat(this.height - v * this.height, "px");
            }
        },
        {
            key: "onDidChangeColor",
            value: function onDidChangeColor() {
                if (this.monitor && this.monitor.isMonitoring()) return;
                this.paint();
            }
        }
    ]);
    return SaturationBox;
}(_lifecycleJs.Disposable);
var Strip = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(Strip, Disposable);
    var _super = _helpers.createSuper(Strip);
    function Strip(container, model) {
        _helpers.classCallCheck(this, Strip);
        var _this;
        _this = _super.call(this);
        _this.model = model;
        _this._onDidChange = new _eventJs.Emitter();
        _this.onDidChange = _this._onDidChange.event;
        _this._onColorFlushed = new _eventJs.Emitter();
        _this.onColorFlushed = _this._onColorFlushed.event;
        _this.domNode = _domJs.append(container, $('.strip'));
        _this.overlay = _domJs.append(_this.domNode, $('.overlay'));
        _this.slider = _domJs.append(_this.domNode, $('.slider'));
        _this.slider.style.top = "0px";
        _this._register(_domJs.addDisposableGenericMouseDownListner(_this.domNode, function(e) {
            return _this.onMouseDown(e);
        }));
        _this.layout();
        return _this;
    }
    _helpers.createClass(Strip, [
        {
            key: "layout",
            value: function layout() {
                this.height = this.domNode.offsetHeight - this.slider.offsetHeight;
                var value = this.getValue(this.model.color);
                this.updateSliderPosition(value);
            }
        },
        {
            key: "onMouseDown",
            value: function onMouseDown(e) {
                var _this = this;
                var monitor = this._register(new _globalMouseMoveMonitorJs.GlobalMouseMoveMonitor());
                var origin = _domJs.getDomNodePagePosition(this.domNode);
                this.domNode.classList.add('grabbing');
                if (e.target !== this.slider) this.onDidChangeTop(e.offsetY);
                monitor.startMonitoring(e.target, e.buttons, _globalMouseMoveMonitorJs.standardMouseMoveMerger, function(event) {
                    return _this.onDidChangeTop(event.posy - origin.top);
                }, function() {
                    return null;
                });
                var mouseUpListener = _domJs.addDisposableGenericMouseUpListner(document, function() {
                    _this._onColorFlushed.fire();
                    mouseUpListener.dispose();
                    monitor.stopMonitoring(true);
                    _this.domNode.classList.remove('grabbing');
                }, true);
            }
        },
        {
            key: "onDidChangeTop",
            value: function onDidChangeTop(top) {
                var value = Math.max(0, Math.min(1, 1 - top / this.height));
                this.updateSliderPosition(value);
                this._onDidChange.fire(value);
            }
        },
        {
            key: "updateSliderPosition",
            value: function updateSliderPosition(value) {
                this.slider.style.top = "".concat((1 - value) * this.height, "px");
            }
        }
    ]);
    return Strip;
}(_lifecycleJs.Disposable);
var OpacityStrip = /*#__PURE__*/ function(Strip) {
    "use strict";
    _helpers.inherits(OpacityStrip, Strip);
    var _super = _helpers.createSuper(OpacityStrip);
    function OpacityStrip(container, model) {
        _helpers.classCallCheck(this, OpacityStrip);
        var _this;
        _this = _super.call(this, container, model);
        _this.domNode.classList.add('opacity-strip');
        _this._register(model.onDidChangeColor(_this.onDidChangeColor, _helpers.assertThisInitialized(_this)));
        _this.onDidChangeColor(_this.model.color);
        return _this;
    }
    _helpers.createClass(OpacityStrip, [
        {
            key: "onDidChangeColor",
            value: function onDidChangeColor(color) {
                var _rgba = color.rgba, r = _rgba.r, g = _rgba.g, b = _rgba.b;
                var opaque = new _colorJs.Color(new _colorJs.RGBA(r, g, b, 1));
                var transparent = new _colorJs.Color(new _colorJs.RGBA(r, g, b, 0));
                this.overlay.style.background = "linear-gradient(to bottom, ".concat(opaque, " 0%, ").concat(transparent, " 100%)");
            }
        },
        {
            key: "getValue",
            value: function getValue(color) {
                return color.hsva.a;
            }
        }
    ]);
    return OpacityStrip;
}(Strip);
var HueStrip = /*#__PURE__*/ function(Strip) {
    "use strict";
    _helpers.inherits(HueStrip, Strip);
    var _super = _helpers.createSuper(HueStrip);
    function HueStrip(container, model) {
        _helpers.classCallCheck(this, HueStrip);
        var _this;
        _this = _super.call(this, container, model);
        _this.domNode.classList.add('hue-strip');
        return _this;
    }
    _helpers.createClass(HueStrip, [
        {
            key: "getValue",
            value: function getValue(color) {
                return 1 - color.hsva.h / 360;
            }
        }
    ]);
    return HueStrip;
}(Strip);
var ColorPickerWidget = /*#__PURE__*/ function(Widget) {
    "use strict";
    _helpers.inherits(ColorPickerWidget, Widget);
    var _super = _helpers.createSuper(ColorPickerWidget);
    function ColorPickerWidget(container, model, pixelRatio, themeService) {
        _helpers.classCallCheck(this, ColorPickerWidget);
        var _this;
        _this = _super.call(this);
        _this.model = model;
        _this.pixelRatio = pixelRatio;
        _this._register(_browserJs.onDidChangeZoomLevel(function() {
            return _this.layout();
        }));
        var element = $('.colorpicker-widget');
        container.appendChild(element);
        var header = new ColorPickerHeader(element, _this.model, themeService);
        _this.body = new ColorPickerBody(element, _this.model, _this.pixelRatio);
        _this._register(header);
        _this._register(_this.body);
        return _this;
    }
    _helpers.createClass(ColorPickerWidget, [
        {
            key: "layout",
            value: function layout() {
                this.body.layout();
            }
        }
    ]);
    return ColorPickerWidget;
}(_widgetJs.Widget);

},{"@swc/helpers":"erO4s","../../../base/browser/browser.js":"fIqGd","../../../base/browser/dom.js":"bxmlc","../../../base/browser/globalMouseMoveMonitor.js":"4aGfi","../../../base/browser/ui/widget.js":"2HEtf","../../../base/common/color.js":"2jKDp","../../../base/common/event.js":"9IBcK","../../../base/common/lifecycle.js":"bcbPy","./colorPicker.css":"14pvs","../../../nls.js":"9djYb","../../../platform/theme/common/colorRegistry.js":"lKtxS","../../../platform/theme/common/themeService.js":"kE7QB","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"14pvs":[function() {},{}],"6dDxJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HoverOperation", function() {
    return HoverOperation;
});
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
var _asyncJs = require("../../../base/common/async.js");
var _errorsJs = require("../../../base/common/errors.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = undefined && undefined.__asyncValues || function(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v1) {
        Promise.resolve(v1).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
};
var HoverOperation = /*#__PURE__*/ function() {
    "use strict";
    function HoverOperation(computer, success, error, progress, hoverTime) {
        var _this = this;
        _helpers.classCallCheck(this, HoverOperation);
        this._computer = computer;
        this._state = 0 /* IDLE */ ;
        this._hoverTime = hoverTime;
        this._firstWaitScheduler = new _asyncJs.RunOnceScheduler(function() {
            return _this._triggerAsyncComputation();
        }, 0);
        this._secondWaitScheduler = new _asyncJs.RunOnceScheduler(function() {
            return _this._triggerSyncComputation();
        }, 0);
        this._loadingMessageScheduler = new _asyncJs.RunOnceScheduler(function() {
            return _this._showLoadingMessage();
        }, 0);
        this._asyncIterable = null;
        this._asyncIterableDone = false;
        this._completeCallback = success;
        this._errorCallback = error;
        this._progressCallback = progress;
    }
    _helpers.createClass(HoverOperation, [
        {
            key: "setHoverTime",
            value: function setHoverTime(hoverTime) {
                this._hoverTime = hoverTime;
            }
        },
        {
            key: "_firstWaitTime",
            value: function _firstWaitTime() {
                return this._hoverTime / 2;
            }
        },
        {
            key: "_secondWaitTime",
            value: function _secondWaitTime() {
                return this._hoverTime / 2;
            }
        },
        {
            key: "_loadingMessageTime",
            value: function _loadingMessageTime() {
                return 3 * this._hoverTime;
            }
        },
        {
            key: "_triggerAsyncComputation",
            value: function _triggerAsyncComputation() {
                this._state = 2 /* SECOND_WAIT */ ;
                this._secondWaitScheduler.schedule(this._secondWaitTime());
                if (this._computer.computeAsync) {
                    var _this = this;
                    this._asyncIterableDone = false;
                    this._asyncIterable = _asyncJs.createCancelableAsyncIterable(function(token) {
                        return _this._computer.computeAsync(token);
                    });
                    (function() {
                        return __awaiter(_this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                            var e_1, _a, _b, _c, item;
                            return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                                while(1)switch(_ctx.prev = _ctx.next){
                                    case 0:
                                        ;
                                        _ctx.prev = 1;
                                        _ctx.prev = 2;
                                        _b = __asyncValues(this._asyncIterable);
                                    case 4:
                                        _ctx.next = 6;
                                        return _b.next();
                                    case 6:
                                        _c = _ctx.sent;
                                        if (!(0, !_c.done)) {
                                            _ctx.next = 11;
                                            break;
                                        }
                                        {
                                            item = _c.value;
                                            if (item) {
                                                this._computer.onResult([
                                                    item
                                                ], false);
                                                this._onProgress();
                                            }
                                        }
                                    case 9:
                                        _ctx.next = 4;
                                        break;
                                    case 11:
                                        _ctx.next = 16;
                                        break;
                                    case 13:
                                        _ctx.prev = 13;
                                        _ctx.t0 = _ctx["catch"](2);
                                        e_1 = {
                                            error: _ctx.t0
                                        };
                                    case 16:
                                        _ctx.prev = 16;
                                        _ctx.prev = 17;
                                        if (!(_c && !_c.done && (_a = _b.return))) {
                                            _ctx.next = 21;
                                            break;
                                        }
                                        _ctx.next = 21;
                                        return _a.call(_b);
                                    case 21:
                                        _ctx.prev = 21;
                                        if (!e_1) {
                                            _ctx.next = 24;
                                            break;
                                        }
                                        throw e_1.error;
                                    case 24:
                                        return _ctx.finish(21);
                                    case 25:
                                        return _ctx.finish(16);
                                    case 26:
                                        this._asyncIterableDone = true;
                                        this._withAsyncResult();
                                        _ctx.next = 33;
                                        break;
                                    case 30:
                                        _ctx.prev = 30;
                                        _ctx.t1 = _ctx["catch"](1);
                                        this._onError(_ctx.t1);
                                    case 33:
                                    case "end":
                                        return _ctx.stop();
                                }
                            }, _callee, this, [
                                [
                                    1,
                                    30
                                ],
                                [
                                    2,
                                    13,
                                    16,
                                    26
                                ],
                                [
                                    17,
                                    ,
                                    21,
                                    25
                                ]
                            ]);
                        }));
                    })();
                } else this._asyncIterableDone = true;
            }
        },
        {
            key: "_triggerSyncComputation",
            value: function _triggerSyncComputation() {
                if (this._computer.computeSync) this._computer.onResult(this._computer.computeSync(), true);
                if (this._asyncIterableDone) {
                    this._state = 0 /* IDLE */ ;
                    this._onComplete();
                } else {
                    this._state = 3 /* WAITING_FOR_ASYNC_COMPUTATION */ ;
                    this._onProgress();
                }
            }
        },
        {
            key: "_showLoadingMessage",
            value: function _showLoadingMessage() {
                if (this._state === 3 /* WAITING_FOR_ASYNC_COMPUTATION */ ) {
                    this._state = 4 /* WAITING_FOR_ASYNC_COMPUTATION_SHOWING_LOADING */ ;
                    this._onProgress();
                }
            }
        },
        {
            key: "_withAsyncResult",
            value: function _withAsyncResult() {
                if (this._state === 3 /* WAITING_FOR_ASYNC_COMPUTATION */  || this._state === 4 /* WAITING_FOR_ASYNC_COMPUTATION_SHOWING_LOADING */ ) {
                    this._state = 0 /* IDLE */ ;
                    this._onComplete();
                }
            }
        },
        {
            key: "_onComplete",
            value: function _onComplete() {
                this._completeCallback(this._computer.getResult());
            }
        },
        {
            key: "_onError",
            value: function _onError(error) {
                if (this._errorCallback) this._errorCallback(error);
                else _errorsJs.onUnexpectedError(error);
            }
        },
        {
            key: "_onProgress",
            value: function _onProgress() {
                if (this._state === 4 /* WAITING_FOR_ASYNC_COMPUTATION_SHOWING_LOADING */ ) this._progressCallback(this._computer.getResultWithLoadingMessage());
                else this._progressCallback(this._computer.getResult());
            }
        },
        {
            key: "start",
            value: function start(mode) {
                if (mode === 0 /* Delayed */ ) {
                    if (this._state === 0 /* IDLE */ ) {
                        this._state = 1 /* FIRST_WAIT */ ;
                        this._firstWaitScheduler.schedule(this._firstWaitTime());
                        this._loadingMessageScheduler.schedule(this._loadingMessageTime());
                    }
                } else switch(this._state){
                    case 0 /* IDLE */ :
                        this._triggerAsyncComputation();
                        this._secondWaitScheduler.cancel();
                        this._triggerSyncComputation();
                        break;
                    case 2 /* SECOND_WAIT */ :
                        this._secondWaitScheduler.cancel();
                        this._triggerSyncComputation();
                        break;
                }
            }
        },
        {
            key: "cancel",
            value: function cancel() {
                this._firstWaitScheduler.cancel();
                this._secondWaitScheduler.cancel();
                this._loadingMessageScheduler.cancel();
                if (this._asyncIterable) {
                    this._asyncIterable.cancel();
                    this._asyncIterable = null;
                }
                this._state = 0 /* IDLE */ ;
            }
        }
    ]);
    return HoverOperation;
}();

},{"@swc/helpers":"erO4s","regenerator-runtime":"12Ae8","../../../base/common/async.js":"kMhSh","../../../base/common/errors.js":"afm4i","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"3k1AC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HoverRangeAnchor", function() {
    return HoverRangeAnchor;
});
parcelHelpers.export(exports, "HoverForeignElementAnchor", function() {
    return HoverForeignElementAnchor;
});
var _helpers = require("@swc/helpers");
var HoverRangeAnchor = /*#__PURE__*/ function() {
    "use strict";
    function HoverRangeAnchor(priority, range) {
        _helpers.classCallCheck(this, HoverRangeAnchor);
        this.priority = priority;
        this.range = range;
        this.type = 1 /* Range */ ;
    }
    _helpers.createClass(HoverRangeAnchor, [
        {
            key: "equals",
            value: function equals(other) {
                return other.type === 1 /* Range */  && this.range.equalsRange(other.range);
            }
        },
        {
            key: "canAdoptVisibleHover",
            value: function canAdoptVisibleHover(lastAnchor, showAtPosition) {
                return lastAnchor.type === 1 /* Range */  && showAtPosition.lineNumber === this.range.startLineNumber;
            }
        }
    ]);
    return HoverRangeAnchor;
}();
var HoverForeignElementAnchor = /*#__PURE__*/ function() {
    "use strict";
    function HoverForeignElementAnchor(priority, owner, range) {
        _helpers.classCallCheck(this, HoverForeignElementAnchor);
        this.priority = priority;
        this.owner = owner;
        this.range = range;
        this.type = 2 /* ForeignElement */ ;
    }
    _helpers.createClass(HoverForeignElementAnchor, [
        {
            key: "equals",
            value: function equals(other) {
                return other.type === 2 /* ForeignElement */  && this.owner === other.owner;
            }
        },
        {
            key: "canAdoptVisibleHover",
            value: function canAdoptVisibleHover(lastAnchor, showAtPosition) {
                return lastAnchor.type === 2 /* ForeignElement */  && this.owner === lastAnchor.owner;
            }
        }
    ]);
    return HoverForeignElementAnchor;
}();

},{"@swc/helpers":"erO4s","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"3IqyG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MarkdownHover", function() {
    return MarkdownHover;
});
parcelHelpers.export(exports, "MarkdownHoverParticipant", function() {
    return MarkdownHoverParticipant;
});
parcelHelpers.export(exports, "renderMarkdownHovers", function() {
    return renderMarkdownHovers;
});
var _helpers = require("@swc/helpers");
var _domJs = require("../../../base/browser/dom.js");
var _arraysJs = require("../../../base/common/arrays.js");
var _asyncJs = require("../../../base/common/async.js");
var _htmlContentJs = require("../../../base/common/htmlContent.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _markdownRendererJs = require("../../browser/core/markdownRenderer.js");
var _positionJs = require("../../common/core/position.js");
var _rangeJs = require("../../common/core/range.js");
var _modesJs = require("../../common/modes.js");
var _modeServiceJs = require("../../common/services/modeService.js");
var _getHoverJs = require("./getHover.js");
var _nlsJs = require("../../../nls.js");
var _configurationJs = require("../../../platform/configuration/common/configuration.js");
var _openerJs = require("../../../platform/opener/common/opener.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var $ = _domJs.$;
var MarkdownHover = /*#__PURE__*/ function() {
    "use strict";
    function MarkdownHover(owner, range, contents, ordinal) {
        _helpers.classCallCheck(this, MarkdownHover);
        this.owner = owner;
        this.range = range;
        this.contents = contents;
        this.ordinal = ordinal;
    }
    _helpers.createClass(MarkdownHover, [
        {
            key: "isValidForHoverAnchor",
            value: function isValidForHoverAnchor(anchor) {
                return anchor.type === 1 /* Range */  && this.range.startColumn <= anchor.range.startColumn && this.range.endColumn >= anchor.range.endColumn;
            }
        }
    ]);
    return MarkdownHover;
}();
var MarkdownHoverParticipant = /*#__PURE__*/ function() {
    "use strict";
    function MarkdownHoverParticipant1(_editor, _hover, _modeService, _openerService, _configurationService) {
        _helpers.classCallCheck(this, MarkdownHoverParticipant1);
        this._editor = _editor;
        this._hover = _hover;
        this._modeService = _modeService;
        this._openerService = _openerService;
        this._configurationService = _configurationService;
    }
    _helpers.createClass(MarkdownHoverParticipant1, [
        {
            key: "createLoadingMessage",
            value: function createLoadingMessage(anchor) {
                return new MarkdownHover(this, anchor.range, [
                    new _htmlContentJs.MarkdownString().appendText(_nlsJs.localize('modesContentHover.loading', "Loading..."))
                ], 2000);
            }
        },
        {
            key: "computeSync",
            value: function computeSync(anchor, lineDecorations) {
                if (!this._editor.hasModel() || anchor.type !== 1 /* Range */ ) return [];
                var model = this._editor.getModel();
                var lineNumber = anchor.range.startLineNumber;
                var maxColumn = model.getLineMaxColumn(lineNumber);
                var result = [];
                var index = 1000;
                var lineLength = model.getLineLength(lineNumber);
                var languageId = model.getLanguageIdAtPosition(anchor.range.startLineNumber, anchor.range.startColumn);
                var maxTokenizationLineLength = this._configurationService.getValue('editor.maxTokenizationLineLength', {
                    overrideIdentifier: languageId
                });
                if (typeof maxTokenizationLineLength === 'number' && lineLength >= maxTokenizationLineLength) result.push(new MarkdownHover(this, anchor.range, [
                    {
                        value: _nlsJs.localize('too many characters', "Tokenization is skipped for long lines for performance reasons. This can be configured via `editor.maxTokenizationLineLength`.")
                    }
                ], index++));
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = lineDecorations[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var d = _step.value;
                        var startColumn = d.range.startLineNumber === lineNumber ? d.range.startColumn : 1;
                        var endColumn = d.range.endLineNumber === lineNumber ? d.range.endColumn : maxColumn;
                        var hoverMessage = d.options.hoverMessage;
                        if (!hoverMessage || _htmlContentJs.isEmptyMarkdownString(hoverMessage)) continue;
                        var range = new _rangeJs.Range(anchor.range.startLineNumber, startColumn, anchor.range.startLineNumber, endColumn);
                        result.push(new MarkdownHover(this, range, _arraysJs.asArray(hoverMessage), index++));
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return result;
            }
        },
        {
            key: "computeAsync",
            value: function computeAsync(anchor, lineDecorations, token) {
                var _this = this;
                if (!this._editor.hasModel() || anchor.type !== 1 /* Range */ ) return _asyncJs.AsyncIterableObject.EMPTY;
                var model = this._editor.getModel();
                if (!_modesJs.HoverProviderRegistry.has(model)) return _asyncJs.AsyncIterableObject.EMPTY;
                var position = new _positionJs.Position(anchor.range.startLineNumber, anchor.range.startColumn);
                return _getHoverJs.getHover(model, position, token).filter(function(item) {
                    return !_htmlContentJs.isEmptyMarkdownString(item.hover.contents);
                }).map(function(item) {
                    var rng = item.hover.range ? _rangeJs.Range.lift(item.hover.range) : anchor.range;
                    return new MarkdownHover(_this, rng, item.hover.contents, item.ordinal);
                });
            }
        },
        {
            key: "renderHoverParts",
            value: function renderHoverParts(hoverParts, fragment, statusBar) {
                return renderMarkdownHovers(hoverParts, fragment, this._editor, this._hover, this._modeService, this._openerService);
            }
        }
    ]);
    return MarkdownHoverParticipant1;
}();
MarkdownHoverParticipant = __decorate([
    __param(2, _modeServiceJs.IModeService),
    __param(3, _openerJs.IOpenerService),
    __param(4, _configurationJs.IConfigurationService)
], MarkdownHoverParticipant);
function renderMarkdownHovers(hoverParts, fragment, editor, hover, modeService, openerService) {
    // Sort hover parts to keep them stable since they might come in async, out-of-order
    hoverParts.sort(function(a, b) {
        return a.ordinal - b.ordinal;
    });
    var disposables = new _lifecycleJs.DisposableStore();
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined, _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
    try {
        for(var _iterator = hoverParts[Symbol.iterator](), _step; !(_iteratorNormalCompletion1 = (_step = _iterator.next()).done); _iteratorNormalCompletion1 = true){
            var hoverPart = _step.value;
            try {
                for(var _iterator1 = hoverPart.contents[Symbol.iterator](), _step1; !(_iteratorNormalCompletion = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion = true){
                    var contents = _step1.value;
                    if (_htmlContentJs.isEmptyMarkdownString(contents)) continue;
                    var markdownHoverElement = $('div.hover-row.markdown-hover');
                    var hoverContentsElement = _domJs.append(markdownHoverElement, $('div.hover-contents'));
                    var renderer = disposables.add(new _markdownRendererJs.MarkdownRenderer({
                        editor: editor
                    }, modeService, openerService));
                    disposables.add(renderer.onDidRenderAsync(function() {
                        hoverContentsElement.className = 'hover-contents code-hover-contents';
                        hover.onContentsChanged();
                    }));
                    var renderedContents = disposables.add(renderer.render(contents));
                    hoverContentsElement.appendChild(renderedContents.element);
                    fragment.appendChild(markdownHoverElement);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally{
                try {
                    if (!_iteratorNormalCompletion && _iterator1.return != null) {
                        _iterator1.return();
                    }
                } finally{
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
    } catch (err) {
        _didIteratorError1 = true;
        _iteratorError1 = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion1 && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError1) {
                throw _iteratorError1;
            }
        }
    }
    return disposables;
}

},{"@swc/helpers":"erO4s","../../../base/browser/dom.js":"bxmlc","../../../base/common/arrays.js":"bZs3E","../../../base/common/async.js":"kMhSh","../../../base/common/htmlContent.js":"i3TMB","../../../base/common/lifecycle.js":"bcbPy","../../browser/core/markdownRenderer.js":"7tjMJ","../../common/core/position.js":"6xP0w","../../common/core/range.js":"VbyL8","../../common/modes.js":"bRbY1","../../common/services/modeService.js":"dNIX6","./getHover.js":"8yNMp","../../../nls.js":"9djYb","../../../platform/configuration/common/configuration.js":"9wFfb","../../../platform/opener/common/opener.js":"nEUGw","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"7tjMJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MarkdownRenderer", function() {
    return MarkdownRenderer;
});
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
var _markdownRendererJs = require("../../../base/browser/markdownRenderer.js");
var _openerJs = require("../../../platform/opener/common/opener.js");
var _modeServiceJs = require("../../common/services/modeService.js");
var _errorsJs = require("../../../base/common/errors.js");
var _textToHtmlTokenizerJs = require("../../common/modes/textToHtmlTokenizer.js");
var _eventJs = require("../../../base/common/event.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _modesJs = require("../../common/modes.js");
var _configurationJs = require("../config/configuration.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var _a;
/**
 * Markdown renderer that can render codeblocks with the editor mechanics. This
 * renderer should always be preferred.
 */ var MarkdownRenderer = /*#__PURE__*/ function() {
    "use strict";
    function MarkdownRenderer1(_options, _modeService, _openerService) {
        _helpers.classCallCheck(this, MarkdownRenderer1);
        this._options = _options;
        this._modeService = _modeService;
        this._openerService = _openerService;
        this._onDidRenderAsync = new _eventJs.Emitter();
        this.onDidRenderAsync = this._onDidRenderAsync.event;
    }
    _helpers.createClass(MarkdownRenderer1, [
        {
            key: "dispose",
            value: function dispose() {
                this._onDidRenderAsync.dispose();
            }
        },
        {
            key: "render",
            value: function render(markdown, options, markedOptions) {
                if (!markdown) {
                    var element = document.createElement('span');
                    return {
                        element: element,
                        dispose: function() {}
                    };
                }
                var disposables = new _lifecycleJs.DisposableStore();
                var rendered = disposables.add(_markdownRendererJs.renderMarkdown(markdown, Object.assign(Object.assign({}, this._getRenderOptions(markdown, disposables)), options), markedOptions));
                return {
                    element: rendered.element,
                    dispose: function() {
                        return disposables.dispose();
                    }
                };
            }
        },
        {
            key: "_getRenderOptions",
            value: function _getRenderOptions(markdown, disposeables) {
                var _this = this;
                return {
                    baseUrl: this._options.baseUrl,
                    codeBlockRenderer: function(languageAlias, value) {
                        return __awaiter(_this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                            var _a1, _b, _c, _d, languageId, tokenization, element, fontInfo;
                            return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                                while(1)switch(_ctx.prev = _ctx.next){
                                    case 0:
                                        ;
                                        ;
                                        if (languageAlias) languageId = this._modeService.getModeIdForLanguageName(languageAlias);
                                        else if (this._options.editor) languageId = (_a1 = this._options.editor.getModel()) === null || _a1 === void 0 ? void 0 : _a1.getLanguageId();
                                        if (!languageId) languageId = 'plaintext';
                                        this._modeService.triggerMode(languageId);
                                        _ctx.next = 7;
                                        return _modesJs.TokenizationRegistry.getPromise(languageId);
                                    case 7:
                                        _ctx.t1 = _b = _ctx.sent;
                                        _ctx.t0 = _ctx.t1 !== null;
                                        if (!_ctx.t0) {
                                            _ctx.next = 11;
                                            break;
                                        }
                                        _ctx.t0 = _b !== void 0;
                                    case 11:
                                        if (!_ctx.t0) {
                                            _ctx.next = 15;
                                            break;
                                        }
                                        _ctx.t2 = _b;
                                        _ctx.next = 16;
                                        break;
                                    case 15:
                                        _ctx.t2 = undefined;
                                    case 16:
                                        tokenization = _ctx.t2;
                                        element = document.createElement('span');
                                        element.innerHTML = (_d = (_c = MarkdownRenderer1._ttpTokenizer) === null || _c === void 0 ? void 0 : _c.createHTML(value, this._modeService.languageIdCodec, tokenization)) !== null && _d !== void 0 ? _d : _textToHtmlTokenizerJs.tokenizeToString(value, this._modeService.languageIdCodec, tokenization);
                                        // use "good" font
                                        if (this._options.editor) {
                                            fontInfo = this._options.editor.getOption(43 /* fontInfo */ );
                                            _configurationJs.Configuration.applyFontInfoSlow(element, fontInfo);
                                        } else if (this._options.codeBlockFontFamily) element.style.fontFamily = this._options.codeBlockFontFamily;
                                        return _ctx.abrupt("return", element);
                                    case 21:
                                    case "end":
                                        return _ctx.stop();
                                }
                            }, _callee, this);
                        }));
                    },
                    asyncRenderCallback: function() {
                        return _this._onDidRenderAsync.fire();
                    },
                    actionHandler: {
                        callback: function(content) {
                            return _this._openerService.open(content, {
                                fromUserGesture: true,
                                allowContributedOpeners: true,
                                allowCommands: markdown.isTrusted
                            }).catch(_errorsJs.onUnexpectedError);
                        },
                        disposables: disposeables
                    }
                };
            }
        }
    ]);
    return MarkdownRenderer1;
}();
MarkdownRenderer._ttpTokenizer = (_a = window.trustedTypes) === null || _a === void 0 ? void 0 : _a.createPolicy('tokenizeToString', {
    createHTML: function(value, languageIdCodec, tokenizer) {
        return _textToHtmlTokenizerJs.tokenizeToString(value, languageIdCodec, tokenizer);
    }
});
MarkdownRenderer = __decorate([
    __param(1, _modeServiceJs.IModeService),
    __param(2, _openerJs.IOpenerService)
], MarkdownRenderer);

},{"@swc/helpers":"erO4s","regenerator-runtime":"12Ae8","../../../base/browser/markdownRenderer.js":"abElF","../../../platform/opener/common/opener.js":"nEUGw","../../common/services/modeService.js":"dNIX6","../../../base/common/errors.js":"afm4i","../../common/modes/textToHtmlTokenizer.js":"2Ao6V","../../../base/common/event.js":"9IBcK","../../../base/common/lifecycle.js":"bcbPy","../../common/modes.js":"bRbY1","../config/configuration.js":"hCKA4","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"abElF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Low-level way create a html element from a markdown string.
 *
 * **Note** that for most cases you should be using [`MarkdownRenderer`](./src/vs/editor/browser/core/markdownRenderer.ts)
 * which comes with support for pretty code block rendering and which uses the default way of handling links.
 */ parcelHelpers.export(exports, "renderMarkdown", function() {
    return renderMarkdown;
});
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _domJs = require("./dom.js");
var _dompurifyJs = require("./dompurify/dompurify.js");
var _eventJs = require("./event.js");
var _formattedTextRendererJs = require("./formattedTextRenderer.js");
var _mouseEventJs = require("./mouseEvent.js");
var _iconLabelsJs = require("./ui/iconLabel/iconLabels.js");
var _asyncJs = require("../common/async.js");
var _cancellationJs = require("../common/cancellation.js");
var _errorsJs = require("../common/errors.js");
var _eventJs1 = require("../common/event.js");
var _htmlContentJs = require("../common/htmlContent.js");
var _iconLabelsJs1 = require("../common/iconLabels.js");
var _idGeneratorJs = require("../common/idGenerator.js");
var _lifecycleJs = require("../common/lifecycle.js");
var _markedJs = require("../common/marked/marked.js");
var _marshallingJs = require("../common/marshalling.js");
var _networkJs = require("../common/network.js");
var _objectsJs = require("../common/objects.js");
var _resourcesJs = require("../common/resources.js");
var _stringsJs = require("../common/strings.js");
var _uriJs = require("../common/uri.js");
function renderMarkdown(markdown) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, markedOptions = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var _a1;
    var disposables = new _lifecycleJs.DisposableStore();
    var isDisposed = false;
    var cts = disposables.add(new _cancellationJs.CancellationTokenSource());
    var element = _formattedTextRendererJs.createElement(options);
    var _uriMassage = function _uriMassage(part) {
        var data;
        try {
            data = _marshallingJs.parse(decodeURIComponent(part));
        } catch (e) {
        // ignore
        }
        if (!data) return part;
        data = _objectsJs.cloneAndChange(data, function(value) {
            if (markdown.uris && markdown.uris[value]) return _uriJs.URI.revive(markdown.uris[value]);
            else return undefined;
        });
        return encodeURIComponent(JSON.stringify(data));
    };
    var _href = function _href(href, isDomUri) {
        var data = markdown.uris && markdown.uris[href];
        var uri = _uriJs.URI.revive(data);
        if (isDomUri) {
            if (href.startsWith(_networkJs.Schemas.data + ':')) return href;
            if (!uri) uri = _uriJs.URI.parse(href);
            // this URI will end up as "src"-attribute of a dom node
            // and because of that special rewriting needs to be done
            // so that the URI uses a protocol that's understood by
            // browsers (like http or https)
            return _networkJs.FileAccess.asBrowserUri(uri).toString(true);
        }
        if (!uri) return href;
        if (_uriJs.URI.parse(href).toString() === uri.toString()) return href; // no transformation performed
        if (uri.query) uri = uri.with({
            query: _uriMassage(uri.query)
        });
        return uri.toString();
    };
    // signal to code-block render that the
    // element has been created
    var signalInnerHTML;
    var withInnerHTML = new Promise(function(c) {
        return signalInnerHTML = c;
    });
    var renderer = new _markedJs.Renderer();
    renderer.image = function(href, title, text) {
        var dimensions = [];
        var attributes = [];
        if (href) {
            var ref;
            ref = _htmlContentJs.parseHrefAndDimensions(href), href = ref.href, dimensions = ref.dimensions, ref;
            attributes.push('src="'.concat(href, '"'));
        }
        if (text) attributes.push('alt="'.concat(text, '"'));
        if (title) attributes.push('title="'.concat(title, '"'));
        if (dimensions.length) attributes = attributes.concat(dimensions);
        return '<img ' + attributes.join(' ') + '>';
    };
    renderer.link = function(href, title, text) {
        // Remove markdown escapes. Workaround for https://github.com/chjj/marked/issues/829
        if (href === text) text = _htmlContentJs.removeMarkdownEscapes(text);
        href = _href(href, false);
        if (options.baseUrl) {
            var hasScheme = /^\w[\w\d+.-]*:/.test(href);
            if (!hasScheme) href = _resourcesJs.resolvePath(options.baseUrl, href).toString();
        }
        title = _htmlContentJs.removeMarkdownEscapes(title);
        href = _htmlContentJs.removeMarkdownEscapes(href);
        if (!href || href.match(/^data:|javascript:/i) || href.match(/^command:/i) && !markdown.isTrusted || href.match(/^command:(\/\/\/)?_workbench\.downloadResource/i)) // drop the link
        return text;
        else {
            // HTML Encode href
            href = href.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#39;');
            return '<a href="#" data-href="'.concat(href, '" title="').concat(title || href, '">').concat(text, "</a>");
        }
    };
    renderer.paragraph = function(text) {
        return "<p>".concat(text, "</p>");
    };
    if (options.codeBlockRenderer) renderer.code = function(code, lang) {
        var value = options.codeBlockRenderer(lang, code);
        // when code-block rendering is async we return sync
        // but update the node with the real result later.
        var id = _idGeneratorJs.defaultGenerator.nextId();
        _asyncJs.raceCancellation(Promise.all([
            value,
            withInnerHTML
        ]), cts.token).then(function(values) {
            var _a;
            if (!isDisposed && values) {
                var span = element.querySelector('div[data-code="'.concat(id, '"]'));
                if (span) _domJs.reset(span, values[0]);
                (_a = options.asyncRenderCallback) === null || _a === void 0 || _a.call(options);
            }
        }).catch(function() {
        // ignore
        });
        return '<div class="code" data-code="'.concat(id, '">').concat(_stringsJs.escape(code), "</div>");
    };
    if (options.actionHandler) {
        var onClick = options.actionHandler.disposables.add(new _eventJs.DomEmitter(element, 'click'));
        var onAuxClick = options.actionHandler.disposables.add(new _eventJs.DomEmitter(element, 'auxclick'));
        options.actionHandler.disposables.add(_eventJs1.Event.any(onClick.event, onAuxClick.event)(function(e) {
            var mouseEvent = new _mouseEventJs.StandardMouseEvent(e);
            if (!mouseEvent.leftButton && !mouseEvent.middleButton) return;
            var target = mouseEvent.target;
            if (target.tagName !== 'A') {
                target = target.parentElement;
                if (!target || target.tagName !== 'A') return;
            }
            try {
                var href = target.dataset['href'];
                if (href) options.actionHandler.callback(href, mouseEvent);
            } catch (err) {
                _errorsJs.onUnexpectedError(err);
            } finally{
                mouseEvent.preventDefault();
            }
        }));
    }
    if (!markdown.supportHtml) {
        // TODO: Can we deprecated this in favor of 'supportHtml'?
        // Use our own sanitizer so that we can let through only spans.
        // Otherwise, we'd be letting all html be rendered.
        // If we want to allow markdown permitted tags, then we can delete sanitizer and sanitize.
        // We always pass the output through dompurify after this so that we don't rely on
        // marked for sanitization.
        markedOptions.sanitizer = function(html) {
            var match = markdown.isTrusted ? html.match(/^(<span[^>]+>)|(<\/\s*span>)$/) : undefined;
            return match ? html : '';
        };
        markedOptions.sanitize = true;
        markedOptions.silent = true;
    }
    markedOptions.renderer = renderer;
    // values that are too long will freeze the UI
    var value1 = (_a1 = markdown.value) !== null && _a1 !== void 0 ? _a1 : '';
    if (value1.length > 100000) value1 = "".concat(value1.substr(0, 100000), "\u2026");
    // escape theme icons
    if (markdown.supportThemeIcons) value1 = _iconLabelsJs1.markdownEscapeEscapedIcons(value1);
    var renderedMarkdown = _markedJs.parse(value1, markedOptions);
    // Rewrite theme icons
    if (markdown.supportThemeIcons) {
        var elements = _iconLabelsJs.renderLabelWithIcons(renderedMarkdown);
        renderedMarkdown = elements.map(function(e) {
            return typeof e === 'string' ? e : e.outerHTML;
        }).join('');
    }
    var htmlParser = new DOMParser();
    var markdownHtmlDoc = htmlParser.parseFromString(sanitizeRenderedMarkdown(markdown, renderedMarkdown), 'text/html');
    markdownHtmlDoc.body.querySelectorAll('img').forEach(function(img) {
        if (img.src) {
            var href = _href(img.src, true);
            try {
                var hrefAsUri = _uriJs.URI.parse(href);
                if (options.baseUrl && hrefAsUri.scheme === _networkJs.Schemas.file) href = _resourcesJs.resolvePath(options.baseUrl, href).toString();
            } catch (err) {}
            img.src = href;
        }
    });
    element.innerHTML = sanitizeRenderedMarkdown(markdown, markdownHtmlDoc.body.innerHTML);
    // signal that async code blocks can be now be inserted
    signalInnerHTML();
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    // signal size changes for image tags
    if (options.asyncRenderCallback) try {
        var _loop = function(_iterator, _step) {
            var img = _step.value;
            var listener = disposables.add(_domJs.addDisposableListener(img, 'load', function() {
                listener.dispose();
                options.asyncRenderCallback();
            }));
        };
        for(var _iterator = element.getElementsByTagName('img')[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop(_iterator, _step);
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    return {
        element: element,
        dispose: function() {
            isDisposed = true;
            cts.cancel();
            disposables.dispose();
        }
    };
}
function sanitizeRenderedMarkdown(options, renderedMarkdown) {
    var ref = getSanitizerOptions(options), config = ref.config, allowedSchemes = ref.allowedSchemes;
    _dompurifyJs.addHook('uponSanitizeAttribute', function(element, e) {
        if (e.attrName === 'style' || e.attrName === 'class') {
            if (element.tagName === 'SPAN') {
                if (e.attrName === 'style') {
                    e.keepAttr = /^(color\:#[0-9a-fA-F]+;)?(background-color\:#[0-9a-fA-F]+;)?$/.test(e.attrValue);
                    return;
                } else if (e.attrName === 'class') {
                    e.keepAttr = /^codicon codicon-[a-z\-]+( codicon-modifier-[a-z\-]+)?$/.test(e.attrValue);
                    return;
                }
            }
            e.keepAttr = false;
            return;
        }
    });
    // build an anchor to map URLs to
    var anchor = document.createElement('a');
    // https://github.com/cure53/DOMPurify/blob/main/demos/hooks-scheme-allowlist.html
    _dompurifyJs.addHook('afterSanitizeAttributes', function(node) {
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            // check all href/src attributes for validity
            for(var _iterator = [
                'href',
                'src'
            ][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var attr = _step.value;
                if (node.hasAttribute(attr)) {
                    anchor.href = node.getAttribute(attr);
                    if (!allowedSchemes.includes(anchor.protocol.replace(/:$/, ''))) node.removeAttribute(attr);
                }
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
    });
    try {
        return _dompurifyJs.sanitize(renderedMarkdown, Object.assign(Object.assign({}, config), {
            RETURN_TRUSTED_TYPE: true
        }));
    } finally{
        _dompurifyJs.removeHook('uponSanitizeAttribute');
        _dompurifyJs.removeHook('afterSanitizeAttributes');
    }
}
function getSanitizerOptions(options) {
    var allowedSchemes = [
        _networkJs.Schemas.http,
        _networkJs.Schemas.https,
        _networkJs.Schemas.mailto,
        _networkJs.Schemas.data,
        _networkJs.Schemas.file,
        _networkJs.Schemas.vscodeFileResource,
        _networkJs.Schemas.vscodeRemote,
        _networkJs.Schemas.vscodeRemoteResource, 
    ];
    if (options.isTrusted) allowedSchemes.push(_networkJs.Schemas.command);
    return {
        config: {
            // allowedTags should included everything that markdown renders to.
            // Since we have our own sanitize function for marked, it's possible we missed some tag so let dompurify make sure.
            // HTML tags that can result from markdown are from reading https://spec.commonmark.org/0.29/
            // HTML table tags that can result from markdown are from https://github.github.com/gfm/#tables-extension-
            ALLOWED_TAGS: [
                'ul',
                'li',
                'p',
                'b',
                'i',
                'code',
                'blockquote',
                'ol',
                'h1',
                'h2',
                'h3',
                'h4',
                'h5',
                'h6',
                'hr',
                'em',
                'pre',
                'table',
                'thead',
                'tbody',
                'tr',
                'th',
                'td',
                'div',
                'del',
                'a',
                'strong',
                'br',
                'img',
                'span'
            ],
            ALLOWED_ATTR: [
                'href',
                'data-href',
                'target',
                'title',
                'src',
                'alt',
                'class',
                'style',
                'data-code',
                'width',
                'height',
                'align'
            ],
            ALLOW_UNKNOWN_PROTOCOLS: true
        },
        allowedSchemes: allowedSchemes
    };
}

},{"./dom.js":"bxmlc","./dompurify/dompurify.js":"1J3VD","./event.js":"eSUjm","./formattedTextRenderer.js":"7xqRg","./mouseEvent.js":"f11kk","./ui/iconLabel/iconLabels.js":"ez2lK","../common/async.js":"kMhSh","../common/cancellation.js":"1C4LY","../common/errors.js":"afm4i","../common/event.js":"9IBcK","../common/htmlContent.js":"i3TMB","../common/iconLabels.js":"i39TM","../common/idGenerator.js":"cIG4F","../common/lifecycle.js":"bcbPy","../common/marked/marked.js":"aXkAR","../common/marshalling.js":"5hKZM","../common/network.js":"4fXI6","../common/objects.js":"bKKoD","../common/resources.js":"14HNj","../common/strings.js":"jsb6w","../common/uri.js":"4ZDLf","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"1J3VD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "version", function() {
    return version;
});
parcelHelpers.export(exports, "isSupported", function() {
    return isSupported;
});
parcelHelpers.export(exports, "sanitize", function() {
    return sanitize;
});
parcelHelpers.export(exports, "setConfig", function() {
    return setConfig;
});
parcelHelpers.export(exports, "clearConfig", function() {
    return clearConfig;
});
parcelHelpers.export(exports, "isValidAttribute", function() {
    return isValidAttribute;
});
parcelHelpers.export(exports, "addHook", function() {
    return addHook;
});
parcelHelpers.export(exports, "removeHook", function() {
    return removeHook;
});
parcelHelpers.export(exports, "removeHooks", function() {
    return removeHooks;
});
parcelHelpers.export(exports, "removeAllHooks", function() {
    return removeAllHooks;
});
var _helpers = require("@swc/helpers");
/*! @license DOMPurify 2.3.1 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/2.3.1/LICENSE */ function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
        for(var i = 0, arr2 = Array(arr.length); i < arr.length; i++)arr2[i] = arr[i];
        return arr2;
    } else return Array.from(arr);
}
var hasOwnProperty = Object.hasOwnProperty, setPrototypeOf = Object.setPrototypeOf, isFrozen = Object.isFrozen, getPrototypeOf = Object.getPrototypeOf, getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var freeze = Object.freeze, seal = Object.seal, create = Object.create; // eslint-disable-line import/no-mutable-exports
var _ref = typeof Reflect !== 'undefined' && Reflect, apply = _ref.apply, construct = _ref.construct;
if (!apply) apply = function apply(fun, thisValue, args) {
    return fun.apply(thisValue, args);
};
if (!freeze) freeze = function freeze(x) {
    return x;
};
if (!seal) seal = function seal(x) {
    return x;
};
if (!construct) construct = function construct(Func, args) {
    return new (Function.prototype.bind.apply(Func, [
        null
    ].concat(_toConsumableArray(args))))();
};
var arrayForEach = unapply(Array.prototype.forEach);
var arrayPop = unapply(Array.prototype.pop);
var arrayPush = unapply(Array.prototype.push);
var stringToLowerCase = unapply(String.prototype.toLowerCase);
var stringMatch = unapply(String.prototype.match);
var stringReplace = unapply(String.prototype.replace);
var stringIndexOf = unapply(String.prototype.indexOf);
var stringTrim = unapply(String.prototype.trim);
var regExpTest = unapply(RegExp.prototype.test);
var typeErrorCreate = unconstruct(TypeError);
function unapply(func) {
    return function(thisArg) {
        for(var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
        return apply(func, thisArg, args);
    };
}
function unconstruct(func) {
    return function() {
        for(var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++)args[_key2] = arguments[_key2];
        return construct(func, args);
    };
}
/* Add properties to a lookup table */ function addToSet(set, array) {
    if (setPrototypeOf) // Make 'in' and truthy checks like Boolean(set.constructor)
    // independent of any properties defined on Object.prototype.
    // Prevent prototype setters from intercepting set as a this value.
    setPrototypeOf(set, null);
    var l = array.length;
    while(l--){
        var element = array[l];
        if (typeof element === 'string') {
            var lcElement = stringToLowerCase(element);
            if (lcElement !== element) {
                // Config presets (e.g. tags.js, attrs.js) are immutable.
                if (!isFrozen(array)) array[l] = lcElement;
                element = lcElement;
            }
        }
        set[element] = true;
    }
    return set;
}
/* Shallow clone an object */ function clone(object) {
    var newObject = create(null);
    var property = void 0;
    for(property in object)if (apply(hasOwnProperty, object, [
        property
    ])) newObject[property] = object[property];
    return newObject;
}
/* IE10 doesn't support __lookupGetter__ so lets'
 * simulate it. It also automatically checks
 * if the prop is function or getter and behaves
 * accordingly. */ function lookupGetter(object, prop) {
    while(object !== null){
        var desc = getOwnPropertyDescriptor(object, prop);
        if (desc) {
            if (desc.get) return unapply(desc.get);
            if (typeof desc.value === 'function') return unapply(desc.value);
        }
        object = getPrototypeOf(object);
    }
    function fallbackValue(element) {
        console.warn('fallback value for', element);
        return null;
    }
    return fallbackValue;
}
var html = freeze([
    'a',
    'abbr',
    'acronym',
    'address',
    'area',
    'article',
    'aside',
    'audio',
    'b',
    'bdi',
    'bdo',
    'big',
    'blink',
    'blockquote',
    'body',
    'br',
    'button',
    'canvas',
    'caption',
    'center',
    'cite',
    'code',
    'col',
    'colgroup',
    'content',
    'data',
    'datalist',
    'dd',
    'decorator',
    'del',
    'details',
    'dfn',
    'dialog',
    'dir',
    'div',
    'dl',
    'dt',
    'element',
    'em',
    'fieldset',
    'figcaption',
    'figure',
    'font',
    'footer',
    'form',
    'h1',
    'h2',
    'h3',
    'h4',
    'h5',
    'h6',
    'head',
    'header',
    'hgroup',
    'hr',
    'html',
    'i',
    'img',
    'input',
    'ins',
    'kbd',
    'label',
    'legend',
    'li',
    'main',
    'map',
    'mark',
    'marquee',
    'menu',
    'menuitem',
    'meter',
    'nav',
    'nobr',
    'ol',
    'optgroup',
    'option',
    'output',
    'p',
    'picture',
    'pre',
    'progress',
    'q',
    'rp',
    'rt',
    'ruby',
    's',
    'samp',
    'section',
    'select',
    'shadow',
    'small',
    'source',
    'spacer',
    'span',
    'strike',
    'strong',
    'style',
    'sub',
    'summary',
    'sup',
    'table',
    'tbody',
    'td',
    'template',
    'textarea',
    'tfoot',
    'th',
    'thead',
    'time',
    'tr',
    'track',
    'tt',
    'u',
    'ul',
    'var',
    'video',
    'wbr'
]);
// SVG
var svg = freeze([
    'svg',
    'a',
    'altglyph',
    'altglyphdef',
    'altglyphitem',
    'animatecolor',
    'animatemotion',
    'animatetransform',
    'circle',
    'clippath',
    'defs',
    'desc',
    'ellipse',
    'filter',
    'font',
    'g',
    'glyph',
    'glyphref',
    'hkern',
    'image',
    'line',
    'lineargradient',
    'marker',
    'mask',
    'metadata',
    'mpath',
    'path',
    'pattern',
    'polygon',
    'polyline',
    'radialgradient',
    'rect',
    'stop',
    'style',
    'switch',
    'symbol',
    'text',
    'textpath',
    'title',
    'tref',
    'tspan',
    'view',
    'vkern'
]);
var svgFilters = freeze([
    'feBlend',
    'feColorMatrix',
    'feComponentTransfer',
    'feComposite',
    'feConvolveMatrix',
    'feDiffuseLighting',
    'feDisplacementMap',
    'feDistantLight',
    'feFlood',
    'feFuncA',
    'feFuncB',
    'feFuncG',
    'feFuncR',
    'feGaussianBlur',
    'feMerge',
    'feMergeNode',
    'feMorphology',
    'feOffset',
    'fePointLight',
    'feSpecularLighting',
    'feSpotLight',
    'feTile',
    'feTurbulence'
]);
// List of SVG elements that are disallowed by default.
// We still need to know them so that we can do namespace
// checks properly in case one wants to add them to
// allow-list.
var svgDisallowed = freeze([
    'animate',
    'color-profile',
    'cursor',
    'discard',
    'fedropshadow',
    'feimage',
    'font-face',
    'font-face-format',
    'font-face-name',
    'font-face-src',
    'font-face-uri',
    'foreignobject',
    'hatch',
    'hatchpath',
    'mesh',
    'meshgradient',
    'meshpatch',
    'meshrow',
    'missing-glyph',
    'script',
    'set',
    'solidcolor',
    'unknown',
    'use'
]);
var mathMl = freeze([
    'math',
    'menclose',
    'merror',
    'mfenced',
    'mfrac',
    'mglyph',
    'mi',
    'mlabeledtr',
    'mmultiscripts',
    'mn',
    'mo',
    'mover',
    'mpadded',
    'mphantom',
    'mroot',
    'mrow',
    'ms',
    'mspace',
    'msqrt',
    'mstyle',
    'msub',
    'msup',
    'msubsup',
    'mtable',
    'mtd',
    'mtext',
    'mtr',
    'munder',
    'munderover'
]);
// Similarly to SVG, we want to know all MathML elements,
// even those that we disallow by default.
var mathMlDisallowed = freeze([
    'maction',
    'maligngroup',
    'malignmark',
    'mlongdiv',
    'mscarries',
    'mscarry',
    'msgroup',
    'mstack',
    'msline',
    'msrow',
    'semantics',
    'annotation',
    'annotation-xml',
    'mprescripts',
    'none'
]);
var text = freeze([
    '#text'
]);
var html$1 = freeze([
    'accept',
    'action',
    'align',
    'alt',
    'autocapitalize',
    'autocomplete',
    'autopictureinpicture',
    'autoplay',
    'background',
    'bgcolor',
    'border',
    'capture',
    'cellpadding',
    'cellspacing',
    'checked',
    'cite',
    'class',
    'clear',
    'color',
    'cols',
    'colspan',
    'controls',
    'controlslist',
    'coords',
    'crossorigin',
    'datetime',
    'decoding',
    'default',
    'dir',
    'disabled',
    'disablepictureinpicture',
    'disableremoteplayback',
    'download',
    'draggable',
    'enctype',
    'enterkeyhint',
    'face',
    'for',
    'headers',
    'height',
    'hidden',
    'high',
    'href',
    'hreflang',
    'id',
    'inputmode',
    'integrity',
    'ismap',
    'kind',
    'label',
    'lang',
    'list',
    'loading',
    'loop',
    'low',
    'max',
    'maxlength',
    'media',
    'method',
    'min',
    'minlength',
    'multiple',
    'muted',
    'name',
    'noshade',
    'novalidate',
    'nowrap',
    'open',
    'optimum',
    'pattern',
    'placeholder',
    'playsinline',
    'poster',
    'preload',
    'pubdate',
    'radiogroup',
    'readonly',
    'rel',
    'required',
    'rev',
    'reversed',
    'role',
    'rows',
    'rowspan',
    'spellcheck',
    'scope',
    'selected',
    'shape',
    'size',
    'sizes',
    'span',
    'srclang',
    'start',
    'src',
    'srcset',
    'step',
    'style',
    'summary',
    'tabindex',
    'title',
    'translate',
    'type',
    'usemap',
    'valign',
    'value',
    'width',
    'xmlns',
    'slot'
]);
var svg$1 = freeze([
    'accent-height',
    'accumulate',
    'additive',
    'alignment-baseline',
    'ascent',
    'attributename',
    'attributetype',
    'azimuth',
    'basefrequency',
    'baseline-shift',
    'begin',
    'bias',
    'by',
    'class',
    'clip',
    'clippathunits',
    'clip-path',
    'clip-rule',
    'color',
    'color-interpolation',
    'color-interpolation-filters',
    'color-profile',
    'color-rendering',
    'cx',
    'cy',
    'd',
    'dx',
    'dy',
    'diffuseconstant',
    'direction',
    'display',
    'divisor',
    'dur',
    'edgemode',
    'elevation',
    'end',
    'fill',
    'fill-opacity',
    'fill-rule',
    'filter',
    'filterunits',
    'flood-color',
    'flood-opacity',
    'font-family',
    'font-size',
    'font-size-adjust',
    'font-stretch',
    'font-style',
    'font-variant',
    'font-weight',
    'fx',
    'fy',
    'g1',
    'g2',
    'glyph-name',
    'glyphref',
    'gradientunits',
    'gradienttransform',
    'height',
    'href',
    'id',
    'image-rendering',
    'in',
    'in2',
    'k',
    'k1',
    'k2',
    'k3',
    'k4',
    'kerning',
    'keypoints',
    'keysplines',
    'keytimes',
    'lang',
    'lengthadjust',
    'letter-spacing',
    'kernelmatrix',
    'kernelunitlength',
    'lighting-color',
    'local',
    'marker-end',
    'marker-mid',
    'marker-start',
    'markerheight',
    'markerunits',
    'markerwidth',
    'maskcontentunits',
    'maskunits',
    'max',
    'mask',
    'media',
    'method',
    'mode',
    'min',
    'name',
    'numoctaves',
    'offset',
    'operator',
    'opacity',
    'order',
    'orient',
    'orientation',
    'origin',
    'overflow',
    'paint-order',
    'path',
    'pathlength',
    'patterncontentunits',
    'patterntransform',
    'patternunits',
    'points',
    'preservealpha',
    'preserveaspectratio',
    'primitiveunits',
    'r',
    'rx',
    'ry',
    'radius',
    'refx',
    'refy',
    'repeatcount',
    'repeatdur',
    'restart',
    'result',
    'rotate',
    'scale',
    'seed',
    'shape-rendering',
    'specularconstant',
    'specularexponent',
    'spreadmethod',
    'startoffset',
    'stddeviation',
    'stitchtiles',
    'stop-color',
    'stop-opacity',
    'stroke-dasharray',
    'stroke-dashoffset',
    'stroke-linecap',
    'stroke-linejoin',
    'stroke-miterlimit',
    'stroke-opacity',
    'stroke',
    'stroke-width',
    'style',
    'surfacescale',
    'systemlanguage',
    'tabindex',
    'targetx',
    'targety',
    'transform',
    'text-anchor',
    'text-decoration',
    'text-rendering',
    'textlength',
    'type',
    'u1',
    'u2',
    'unicode',
    'values',
    'viewbox',
    'visibility',
    'version',
    'vert-adv-y',
    'vert-origin-x',
    'vert-origin-y',
    'width',
    'word-spacing',
    'wrap',
    'writing-mode',
    'xchannelselector',
    'ychannelselector',
    'x',
    'x1',
    'x2',
    'xmlns',
    'y',
    'y1',
    'y2',
    'z',
    'zoomandpan'
]);
var mathMl$1 = freeze([
    'accent',
    'accentunder',
    'align',
    'bevelled',
    'close',
    'columnsalign',
    'columnlines',
    'columnspan',
    'denomalign',
    'depth',
    'dir',
    'display',
    'displaystyle',
    'encoding',
    'fence',
    'frame',
    'height',
    'href',
    'id',
    'largeop',
    'length',
    'linethickness',
    'lspace',
    'lquote',
    'mathbackground',
    'mathcolor',
    'mathsize',
    'mathvariant',
    'maxsize',
    'minsize',
    'movablelimits',
    'notation',
    'numalign',
    'open',
    'rowalign',
    'rowlines',
    'rowspacing',
    'rowspan',
    'rspace',
    'rquote',
    'scriptlevel',
    'scriptminsize',
    'scriptsizemultiplier',
    'selection',
    'separator',
    'separators',
    'stretchy',
    'subscriptshift',
    'supscriptshift',
    'symmetric',
    'voffset',
    'width',
    'xmlns'
]);
var xml = freeze([
    'xlink:href',
    'xml:id',
    'xlink:title',
    'xml:space',
    'xmlns:xlink'
]);
// eslint-disable-next-line unicorn/better-regex
var MUSTACHE_EXPR = seal(/\{\{[\s\S]*|[\s\S]*\}\}/gm); // Specify template detection regex for SAFE_FOR_TEMPLATES mode
var ERB_EXPR = seal(/<%[\s\S]*|[\s\S]*%>/gm);
var DATA_ATTR = seal(/^data-[\-\w.\u00B7-\uFFFF]/); // eslint-disable-line no-useless-escape
var ARIA_ATTR = seal(/^aria-[\-\w]+$/); // eslint-disable-line no-useless-escape
var IS_ALLOWED_URI = seal(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i // eslint-disable-line no-useless-escape
);
var IS_SCRIPT_OR_DATA = seal(/^(?:\w+script|data):/i);
var ATTR_WHITESPACE = seal(/[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g // eslint-disable-line no-control-regex
);
var _typeof = typeof Symbol === "function" && _helpers.typeOf(Symbol.iterator) === "symbol" ? function _typeof(obj) {
    return typeof obj === "undefined" ? "undefined" : _helpers.typeOf(obj);
} : function(obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _helpers.typeOf(obj);
};
function _toConsumableArray$1(arr) {
    if (Array.isArray(arr)) {
        for(var i = 0, arr2 = Array(arr.length); i < arr.length; i++)arr2[i] = arr[i];
        return arr2;
    } else return Array.from(arr);
}
var getGlobal = function getGlobal() {
    return typeof window === 'undefined' ? null : window;
};
/**
 * Creates a no-op policy for internal use only.
 * Don't export this function outside this module!
 * @param {?TrustedTypePolicyFactory} trustedTypes The policy factory.
 * @param {Document} document The document object (to determine policy name suffix)
 * @return {?TrustedTypePolicy} The policy created (or null, if Trusted Types
 * are not supported).
 */ var _createTrustedTypesPolicy = function _createTrustedTypesPolicy(trustedTypes, document) {
    if ((typeof trustedTypes === 'undefined' ? 'undefined' : _typeof(trustedTypes)) !== 'object' || typeof trustedTypes.createPolicy !== 'function') return null;
    // Allow the callers to control the unique policy name
    // by adding a data-tt-policy-suffix to the script element with the DOMPurify.
    // Policy creation with duplicate names throws in Trusted Types.
    var suffix = null;
    var ATTR_NAME = 'data-tt-policy-suffix';
    if (document.currentScript && document.currentScript.hasAttribute(ATTR_NAME)) suffix = document.currentScript.getAttribute(ATTR_NAME);
    var policyName = 'dompurify' + (suffix ? '#' + suffix : '');
    try {
        return trustedTypes.createPolicy(policyName, {
            createHTML: function createHTML(html$$1) {
                return html$$1;
            }
        });
    } catch (_) {
        // Policy creation failed (most likely another DOMPurify script has
        // already run). Skip creating the policy, as this will only cause errors
        // if TT are enforced.
        console.warn('TrustedTypes policy ' + policyName + ' could not be created.');
        return null;
    }
};
function createDOMPurify() {
    var window = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getGlobal();
    var DOMPurify = function DOMPurify(root) {
        return createDOMPurify(root);
    };
    /**
   * Version label, exposed for easier checks
   * if DOMPurify is up to date or not
   */ DOMPurify.version = '2.3.1';
    /**
   * Array of elements that DOMPurify removed during sanitation.
   * Empty if nothing was removed.
   */ DOMPurify.removed = [];
    if (!window || !window.document || window.document.nodeType !== 9) {
        // Not running in a browser, provide a factory function
        // so that you can pass your own Window
        DOMPurify.isSupported = false;
        return DOMPurify;
    }
    var originalDocument = window.document;
    var document = window.document;
    var DocumentFragment = window.DocumentFragment, HTMLTemplateElement = window.HTMLTemplateElement, Node = window.Node, Element = window.Element, NodeFilter = window.NodeFilter, _window$NamedNodeMap = window.NamedNodeMap, NamedNodeMap = _window$NamedNodeMap === undefined ? window.NamedNodeMap || window.MozNamedAttrMap : _window$NamedNodeMap, Text = window.Text, Comment = window.Comment, DOMParser = window.DOMParser, trustedTypes = window.trustedTypes;
    var ElementPrototype = Element.prototype;
    var cloneNode = lookupGetter(ElementPrototype, 'cloneNode');
    var getNextSibling = lookupGetter(ElementPrototype, 'nextSibling');
    var getChildNodes = lookupGetter(ElementPrototype, 'childNodes');
    var getParentNode = lookupGetter(ElementPrototype, 'parentNode');
    // As per issue #47, the web-components registry is inherited by a
    // new document created via createHTMLDocument. As per the spec
    // (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)
    // a new empty registry is used when creating a template contents owner
    // document, so we use that as our parent document to ensure nothing
    // is inherited.
    if (typeof HTMLTemplateElement === 'function') {
        var template = document.createElement('template');
        if (template.content && template.content.ownerDocument) document = template.content.ownerDocument;
    }
    var trustedTypesPolicy = _createTrustedTypesPolicy(trustedTypes, originalDocument);
    var emptyHTML = trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML('') : '';
    var _document = document, implementation = _document.implementation, createNodeIterator = _document.createNodeIterator, createDocumentFragment = _document.createDocumentFragment, getElementsByTagName = _document.getElementsByTagName;
    var importNode = originalDocument.importNode;
    var documentMode = {};
    try {
        documentMode = clone(document).documentMode ? document.documentMode : {};
    } catch (_) {}
    var hooks = {};
    /**
   * Expose whether this browser supports running the full DOMPurify.
   */ DOMPurify.isSupported = typeof getParentNode === 'function' && implementation && typeof implementation.createHTMLDocument !== 'undefined' && documentMode !== 9;
    var MUSTACHE_EXPR$$1 = MUSTACHE_EXPR, ERB_EXPR$$1 = ERB_EXPR, DATA_ATTR$$1 = DATA_ATTR, ARIA_ATTR$$1 = ARIA_ATTR, IS_SCRIPT_OR_DATA$$1 = IS_SCRIPT_OR_DATA, ATTR_WHITESPACE$$1 = ATTR_WHITESPACE;
    var IS_ALLOWED_URI$$1 = IS_ALLOWED_URI;
    /**
   * We consider the elements and attributes below to be safe. Ideally
   * don't add any new ones but feel free to remove unwanted ones.
   */ /* allowed element names */ var ALLOWED_TAGS = null;
    var DEFAULT_ALLOWED_TAGS = addToSet({}, [].concat(_toConsumableArray$1(html), _toConsumableArray$1(svg), _toConsumableArray$1(svgFilters), _toConsumableArray$1(mathMl), _toConsumableArray$1(text)));
    /* Allowed attribute names */ var ALLOWED_ATTR = null;
    var DEFAULT_ALLOWED_ATTR = addToSet({}, [].concat(_toConsumableArray$1(html$1), _toConsumableArray$1(svg$1), _toConsumableArray$1(mathMl$1), _toConsumableArray$1(xml)));
    /* Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) */ var FORBID_TAGS = null;
    /* Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) */ var FORBID_ATTR = null;
    /* Decide if ARIA attributes are okay */ var ALLOW_ARIA_ATTR = true;
    /* Decide if custom data attributes are okay */ var ALLOW_DATA_ATTR = true;
    /* Decide if unknown protocols are okay */ var ALLOW_UNKNOWN_PROTOCOLS = false;
    /* Output should be safe for common template engines.
   * This means, DOMPurify removes data attributes, mustaches and ERB
   */ var SAFE_FOR_TEMPLATES = false;
    /* Decide if document with <html>... should be returned */ var WHOLE_DOCUMENT = false;
    /* Track whether config is already set on this instance of DOMPurify. */ var SET_CONFIG = false;
    /* Decide if all elements (e.g. style, script) must be children of
   * document.body. By default, browsers might move them to document.head */ var FORCE_BODY = false;
    /* Decide if a DOM `HTMLBodyElement` should be returned, instead of a html
   * string (or a TrustedHTML object if Trusted Types are supported).
   * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead
   */ var RETURN_DOM = false;
    /* Decide if a DOM `DocumentFragment` should be returned, instead of a html
   * string  (or a TrustedHTML object if Trusted Types are supported) */ var RETURN_DOM_FRAGMENT = false;
    /* If `RETURN_DOM` or `RETURN_DOM_FRAGMENT` is enabled, decide if the returned DOM
   * `Node` is imported into the current `Document`. If this flag is not enabled the
   * `Node` will belong (its ownerDocument) to a fresh `HTMLDocument`, created by
   * DOMPurify.
   *
   * This defaults to `true` starting DOMPurify 2.2.0. Note that setting it to `false`
   * might cause XSS from attacks hidden in closed shadowroots in case the browser
   * supports Declarative Shadow: DOM https://web.dev/declarative-shadow-dom/
   */ var RETURN_DOM_IMPORT = true;
    /* Try to return a Trusted Type object instead of a string, return a string in
   * case Trusted Types are not supported  */ var RETURN_TRUSTED_TYPE = false;
    /* Output should be free from DOM clobbering attacks? */ var SANITIZE_DOM = true;
    /* Keep element content when removing element? */ var KEEP_CONTENT = true;
    /* If a `Node` is passed to sanitize(), then performs sanitization in-place instead
   * of importing it into a new Document and returning a sanitized copy */ var IN_PLACE = false;
    /* Allow usage of profiles like html, svg and mathMl */ var USE_PROFILES = {};
    /* Tags to ignore content of when KEEP_CONTENT is true */ var FORBID_CONTENTS = null;
    var DEFAULT_FORBID_CONTENTS = addToSet({}, [
        'annotation-xml',
        'audio',
        'colgroup',
        'desc',
        'foreignobject',
        'head',
        'iframe',
        'math',
        'mi',
        'mn',
        'mo',
        'ms',
        'mtext',
        'noembed',
        'noframes',
        'noscript',
        'plaintext',
        'script',
        'style',
        'svg',
        'template',
        'thead',
        'title',
        'video',
        'xmp'
    ]);
    /* Tags that are safe for data: URIs */ var DATA_URI_TAGS = null;
    var DEFAULT_DATA_URI_TAGS = addToSet({}, [
        'audio',
        'video',
        'img',
        'source',
        'image',
        'track'
    ]);
    /* Attributes safe for values like "javascript:" */ var URI_SAFE_ATTRIBUTES = null;
    var DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, [
        'alt',
        'class',
        'for',
        'id',
        'label',
        'name',
        'pattern',
        'placeholder',
        'role',
        'summary',
        'title',
        'value',
        'style',
        'xmlns'
    ]);
    var MATHML_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
    var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
    var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
    /* Document namespace */ var NAMESPACE = HTML_NAMESPACE;
    var IS_EMPTY_INPUT = false;
    /* Keep a reference to config to pass to hooks */ var CONFIG = null;
    /* Ideally, do not touch anything below this line */ /* ______________________________________________ */ var formElement = document.createElement('form');
    /**
   * _parseConfig
   *
   * @param  {Object} cfg optional config literal
   */ // eslint-disable-next-line complexity
    var _parseConfig = function _parseConfig(cfg) {
        if (CONFIG && CONFIG === cfg) return;
        /* Shield configuration object from tampering */ if (!cfg || (typeof cfg === 'undefined' ? 'undefined' : _typeof(cfg)) !== 'object') cfg = {};
        /* Shield configuration object from prototype pollution */ cfg = clone(cfg);
        /* Set configuration parameters */ ALLOWED_TAGS = 'ALLOWED_TAGS' in cfg ? addToSet({}, cfg.ALLOWED_TAGS) : DEFAULT_ALLOWED_TAGS;
        ALLOWED_ATTR = 'ALLOWED_ATTR' in cfg ? addToSet({}, cfg.ALLOWED_ATTR) : DEFAULT_ALLOWED_ATTR;
        URI_SAFE_ATTRIBUTES = 'ADD_URI_SAFE_ATTR' in cfg ? addToSet(clone(DEFAULT_URI_SAFE_ATTRIBUTES), cfg.ADD_URI_SAFE_ATTR) : DEFAULT_URI_SAFE_ATTRIBUTES;
        DATA_URI_TAGS = 'ADD_DATA_URI_TAGS' in cfg ? addToSet(clone(DEFAULT_DATA_URI_TAGS), cfg.ADD_DATA_URI_TAGS) : DEFAULT_DATA_URI_TAGS;
        FORBID_CONTENTS = 'FORBID_CONTENTS' in cfg ? addToSet({}, cfg.FORBID_CONTENTS) : DEFAULT_FORBID_CONTENTS;
        FORBID_TAGS = 'FORBID_TAGS' in cfg ? addToSet({}, cfg.FORBID_TAGS) : {};
        FORBID_ATTR = 'FORBID_ATTR' in cfg ? addToSet({}, cfg.FORBID_ATTR) : {};
        USE_PROFILES = 'USE_PROFILES' in cfg ? cfg.USE_PROFILES : false;
        ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false; // Default true
        ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false; // Default true
        ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false; // Default false
        SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false; // Default false
        WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false; // Default false
        RETURN_DOM = cfg.RETURN_DOM || false; // Default false
        RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false; // Default false
        RETURN_DOM_IMPORT = cfg.RETURN_DOM_IMPORT !== false; // Default true
        RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false; // Default false
        FORCE_BODY = cfg.FORCE_BODY || false; // Default false
        SANITIZE_DOM = cfg.SANITIZE_DOM !== false; // Default true
        KEEP_CONTENT = cfg.KEEP_CONTENT !== false; // Default true
        IN_PLACE = cfg.IN_PLACE || false; // Default false
        IS_ALLOWED_URI$$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI$$1;
        NAMESPACE = cfg.NAMESPACE || HTML_NAMESPACE;
        if (SAFE_FOR_TEMPLATES) ALLOW_DATA_ATTR = false;
        if (RETURN_DOM_FRAGMENT) RETURN_DOM = true;
        /* Parse profile info */ if (USE_PROFILES) {
            ALLOWED_TAGS = addToSet({}, [].concat(_toConsumableArray$1(text)));
            ALLOWED_ATTR = [];
            if (USE_PROFILES.html === true) {
                addToSet(ALLOWED_TAGS, html);
                addToSet(ALLOWED_ATTR, html$1);
            }
            if (USE_PROFILES.svg === true) {
                addToSet(ALLOWED_TAGS, svg);
                addToSet(ALLOWED_ATTR, svg$1);
                addToSet(ALLOWED_ATTR, xml);
            }
            if (USE_PROFILES.svgFilters === true) {
                addToSet(ALLOWED_TAGS, svgFilters);
                addToSet(ALLOWED_ATTR, svg$1);
                addToSet(ALLOWED_ATTR, xml);
            }
            if (USE_PROFILES.mathMl === true) {
                addToSet(ALLOWED_TAGS, mathMl);
                addToSet(ALLOWED_ATTR, mathMl$1);
                addToSet(ALLOWED_ATTR, xml);
            }
        }
        /* Merge configuration parameters */ if (cfg.ADD_TAGS) {
            if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) ALLOWED_TAGS = clone(ALLOWED_TAGS);
            addToSet(ALLOWED_TAGS, cfg.ADD_TAGS);
        }
        if (cfg.ADD_ATTR) {
            if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) ALLOWED_ATTR = clone(ALLOWED_ATTR);
            addToSet(ALLOWED_ATTR, cfg.ADD_ATTR);
        }
        if (cfg.ADD_URI_SAFE_ATTR) addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR);
        if (cfg.FORBID_CONTENTS) {
            if (FORBID_CONTENTS === DEFAULT_FORBID_CONTENTS) FORBID_CONTENTS = clone(FORBID_CONTENTS);
            addToSet(FORBID_CONTENTS, cfg.FORBID_CONTENTS);
        }
        /* Add #text in case KEEP_CONTENT is set to true */ if (KEEP_CONTENT) ALLOWED_TAGS['#text'] = true;
        /* Add html, head and body to ALLOWED_TAGS in case WHOLE_DOCUMENT is true */ if (WHOLE_DOCUMENT) addToSet(ALLOWED_TAGS, [
            'html',
            'head',
            'body'
        ]);
        /* Add tbody to ALLOWED_TAGS in case tables are permitted, see #286, #365 */ if (ALLOWED_TAGS.table) {
            addToSet(ALLOWED_TAGS, [
                'tbody'
            ]);
            delete FORBID_TAGS.tbody;
        }
        // Prevent further manipulation of configuration.
        // Not available in IE8, Safari 5, etc.
        if (freeze) freeze(cfg);
        CONFIG = cfg;
    };
    var MATHML_TEXT_INTEGRATION_POINTS = addToSet({}, [
        'mi',
        'mo',
        'mn',
        'ms',
        'mtext'
    ]);
    var HTML_INTEGRATION_POINTS = addToSet({}, [
        'foreignobject',
        'desc',
        'title',
        'annotation-xml'
    ]);
    /* Keep track of all possible SVG and MathML tags
   * so that we can perform the namespace checks
   * correctly. */ var ALL_SVG_TAGS = addToSet({}, svg);
    addToSet(ALL_SVG_TAGS, svgFilters);
    addToSet(ALL_SVG_TAGS, svgDisallowed);
    var ALL_MATHML_TAGS = addToSet({}, mathMl);
    addToSet(ALL_MATHML_TAGS, mathMlDisallowed);
    /**
   *
   *
   * @param  {Element} element a DOM element whose namespace is being checked
   * @returns {boolean} Return false if the element has a
   *  namespace that a spec-compliant parser would never
   *  return. Return true otherwise.
   */ var _checkValidNamespace = function _checkValidNamespace(element) {
        var parent = getParentNode(element);
        // In JSDOM, if we're inside shadow DOM, then parentNode
        // can be null. We just simulate parent in this case.
        if (!parent || !parent.tagName) parent = {
            namespaceURI: HTML_NAMESPACE,
            tagName: 'template'
        };
        var tagName = stringToLowerCase(element.tagName);
        var parentTagName = stringToLowerCase(parent.tagName);
        if (element.namespaceURI === SVG_NAMESPACE) {
            // The only way to switch from HTML namespace to SVG
            // is via <svg>. If it happens via any other tag, then
            // it should be killed.
            if (parent.namespaceURI === HTML_NAMESPACE) return tagName === 'svg';
            // The only way to switch from MathML to SVG is via
            // svg if parent is either <annotation-xml> or MathML
            // text integration points.
            if (parent.namespaceURI === MATHML_NAMESPACE) return tagName === 'svg' && (parentTagName === 'annotation-xml' || MATHML_TEXT_INTEGRATION_POINTS[parentTagName]);
            // We only allow elements that are defined in SVG
            // spec. All others are disallowed in SVG namespace.
            return Boolean(ALL_SVG_TAGS[tagName]);
        }
        if (element.namespaceURI === MATHML_NAMESPACE) {
            // The only way to switch from HTML namespace to MathML
            // is via <math>. If it happens via any other tag, then
            // it should be killed.
            if (parent.namespaceURI === HTML_NAMESPACE) return tagName === 'math';
            // The only way to switch from SVG to MathML is via
            // <math> and HTML integration points
            if (parent.namespaceURI === SVG_NAMESPACE) return tagName === 'math' && HTML_INTEGRATION_POINTS[parentTagName];
            // We only allow elements that are defined in MathML
            // spec. All others are disallowed in MathML namespace.
            return Boolean(ALL_MATHML_TAGS[tagName]);
        }
        if (element.namespaceURI === HTML_NAMESPACE) {
            // The only way to switch from SVG to HTML is via
            // HTML integration points, and from MathML to HTML
            // is via MathML text integration points
            if (parent.namespaceURI === SVG_NAMESPACE && !HTML_INTEGRATION_POINTS[parentTagName]) return false;
            if (parent.namespaceURI === MATHML_NAMESPACE && !MATHML_TEXT_INTEGRATION_POINTS[parentTagName]) return false;
            // Certain elements are allowed in both SVG and HTML
            // namespace. We need to specify them explicitly
            // so that they don't get erronously deleted from
            // HTML namespace.
            var commonSvgAndHTMLElements = addToSet({}, [
                'title',
                'style',
                'font',
                'a',
                'script'
            ]);
            // We disallow tags that are specific for MathML
            // or SVG and should never appear in HTML namespace
            return !ALL_MATHML_TAGS[tagName] && (commonSvgAndHTMLElements[tagName] || !ALL_SVG_TAGS[tagName]);
        }
        // The code should never reach this place (this means
        // that the element somehow got namespace that is not
        // HTML, SVG or MathML). Return false just in case.
        return false;
    };
    /**
   * _forceRemove
   *
   * @param  {Node} node a DOM node
   */ var _forceRemove = function _forceRemove(node) {
        arrayPush(DOMPurify.removed, {
            element: node
        });
        try {
            // eslint-disable-next-line unicorn/prefer-dom-node-remove
            node.parentNode.removeChild(node);
        } catch (_) {
            try {
                node.outerHTML = emptyHTML;
            } catch (_) {
                node.remove();
            }
        }
    };
    /**
   * _removeAttribute
   *
   * @param  {String} name an Attribute name
   * @param  {Node} node a DOM node
   */ var _removeAttribute = function _removeAttribute(name, node) {
        try {
            arrayPush(DOMPurify.removed, {
                attribute: node.getAttributeNode(name),
                from: node
            });
        } catch (_) {
            arrayPush(DOMPurify.removed, {
                attribute: null,
                from: node
            });
        }
        node.removeAttribute(name);
        // We void attribute values for unremovable "is"" attributes
        if (name === 'is' && !ALLOWED_ATTR[name]) {
            if (RETURN_DOM || RETURN_DOM_FRAGMENT) try {
                _forceRemove(node);
            } catch (_) {}
            else try {
                node.setAttribute(name, '');
            } catch (_1) {}
        }
    };
    /**
   * _initDocument
   *
   * @param  {String} dirty a string of dirty markup
   * @return {Document} a DOM, filled with the dirty markup
   */ var _initDocument = function _initDocument(dirty) {
        /* Create a HTML document */ var doc = void 0;
        var leadingWhitespace = void 0;
        if (FORCE_BODY) dirty = '<remove></remove>' + dirty;
        else {
            /* If FORCE_BODY isn't used, leading whitespace needs to be preserved manually */ var matches = stringMatch(dirty, /^[\r\n\t ]+/);
            leadingWhitespace = matches && matches[0];
        }
        var dirtyPayload = trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;
        /*
     * Use the DOMParser API by default, fallback later if needs be
     * DOMParser not work for svg when has multiple root element.
     */ if (NAMESPACE === HTML_NAMESPACE) try {
            doc = new DOMParser().parseFromString(dirtyPayload, 'text/html');
        } catch (_) {}
        /* Use createHTMLDocument in case DOMParser is not available */ if (!doc || !doc.documentElement) {
            doc = implementation.createDocument(NAMESPACE, 'template', null);
            try {
                doc.documentElement.innerHTML = IS_EMPTY_INPUT ? '' : dirtyPayload;
            } catch (_) {
            // Syntax error if dirtyPayload is invalid xml
            }
        }
        var body = doc.body || doc.documentElement;
        if (dirty && leadingWhitespace) body.insertBefore(document.createTextNode(leadingWhitespace), body.childNodes[0] || null);
        /* Work on whole document or just its body */ if (NAMESPACE === HTML_NAMESPACE) return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? 'html' : 'body')[0];
        return WHOLE_DOCUMENT ? doc.documentElement : body;
    };
    /**
   * _createIterator
   *
   * @param  {Document} root document/fragment to create iterator for
   * @return {Iterator} iterator instance
   */ var _createIterator = function _createIterator(root) {
        return createNodeIterator.call(root.ownerDocument || root, root, NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT, null, false);
    };
    /**
   * _isClobbered
   *
   * @param  {Node} elm element to check for clobbering attacks
   * @return {Boolean} true if clobbered, false if safe
   */ var _isClobbered = function _isClobbered(elm) {
        if (elm instanceof Text || elm instanceof Comment) return false;
        if (typeof elm.nodeName !== 'string' || typeof elm.textContent !== 'string' || typeof elm.removeChild !== 'function' || !(elm.attributes instanceof NamedNodeMap) || typeof elm.removeAttribute !== 'function' || typeof elm.setAttribute !== 'function' || typeof elm.namespaceURI !== 'string' || typeof elm.insertBefore !== 'function') return true;
        return false;
    };
    /**
   * _isNode
   *
   * @param  {Node} obj object to check whether it's a DOM node
   * @return {Boolean} true is object is a DOM node
   */ var _isNode = function _isNode(object) {
        return (typeof Node === 'undefined' ? 'undefined' : _typeof(Node)) === 'object' ? object instanceof Node : object && (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string';
    };
    /**
   * _executeHook
   * Execute user configurable hooks
   *
   * @param  {String} entryPoint  Name of the hook's entry point
   * @param  {Node} currentNode node to work on with the hook
   * @param  {Object} data additional hook parameters
   */ var _executeHook = function _executeHook(entryPoint, currentNode, data) {
        if (!hooks[entryPoint]) return;
        arrayForEach(hooks[entryPoint], function(hook) {
            hook.call(DOMPurify, currentNode, data, CONFIG);
        });
    };
    /**
   * _sanitizeElements
   *
   * @protect nodeName
   * @protect textContent
   * @protect removeChild
   *
   * @param   {Node} currentNode to check for permission to exist
   * @return  {Boolean} true if node was killed, false if left alive
   */ var _sanitizeElements = function _sanitizeElements(currentNode) {
        var content = void 0;
        /* Execute a hook if present */ _executeHook('beforeSanitizeElements', currentNode, null);
        /* Check if element is clobbered or can clobber */ if (_isClobbered(currentNode)) {
            _forceRemove(currentNode);
            return true;
        }
        /* Check if tagname contains Unicode */ if (stringMatch(currentNode.nodeName, /[\u0080-\uFFFF]/)) {
            _forceRemove(currentNode);
            return true;
        }
        /* Now let's check the element's type and name */ var tagName = stringToLowerCase(currentNode.nodeName);
        /* Execute a hook if present */ _executeHook('uponSanitizeElement', currentNode, {
            tagName: tagName,
            allowedTags: ALLOWED_TAGS
        });
        /* Detect mXSS attempts abusing namespace confusion */ if (!_isNode(currentNode.firstElementChild) && (!_isNode(currentNode.content) || !_isNode(currentNode.content.firstElementChild)) && regExpTest(/<[/\w]/g, currentNode.innerHTML) && regExpTest(/<[/\w]/g, currentNode.textContent)) {
            _forceRemove(currentNode);
            return true;
        }
        /* Mitigate a problem with templates inside select */ if (tagName === 'select' && regExpTest(/<template/i, currentNode.innerHTML)) {
            _forceRemove(currentNode);
            return true;
        }
        /* Remove element if anything forbids its presence */ if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {
            /* Keep content except for bad-listed elements */ if (KEEP_CONTENT && !FORBID_CONTENTS[tagName]) {
                var parentNode = getParentNode(currentNode) || currentNode.parentNode;
                var childNodes = getChildNodes(currentNode) || currentNode.childNodes;
                if (childNodes && parentNode) {
                    var childCount = childNodes.length;
                    for(var i = childCount - 1; i >= 0; --i)parentNode.insertBefore(cloneNode(childNodes[i], true), getNextSibling(currentNode));
                }
            }
            _forceRemove(currentNode);
            return true;
        }
        /* Check whether element has a valid namespace */ if (currentNode instanceof Element && !_checkValidNamespace(currentNode)) {
            _forceRemove(currentNode);
            return true;
        }
        if ((tagName === 'noscript' || tagName === 'noembed') && regExpTest(/<\/no(script|embed)/i, currentNode.innerHTML)) {
            _forceRemove(currentNode);
            return true;
        }
        /* Sanitize element content to be template-safe */ if (SAFE_FOR_TEMPLATES && currentNode.nodeType === 3) {
            /* Get the element's text content */ content = currentNode.textContent;
            content = stringReplace(content, MUSTACHE_EXPR$$1, ' ');
            content = stringReplace(content, ERB_EXPR$$1, ' ');
            if (currentNode.textContent !== content) {
                arrayPush(DOMPurify.removed, {
                    element: currentNode.cloneNode()
                });
                currentNode.textContent = content;
            }
        }
        /* Execute a hook if present */ _executeHook('afterSanitizeElements', currentNode, null);
        return false;
    };
    /**
   * _isValidAttribute
   *
   * @param  {string} lcTag Lowercase tag name of containing element.
   * @param  {string} lcName Lowercase attribute name.
   * @param  {string} value Attribute value.
   * @return {Boolean} Returns true if `value` is valid, otherwise false.
   */ // eslint-disable-next-line complexity
    var _isValidAttribute = function _isValidAttribute(lcTag, lcName, value) {
        /* Make sure attribute cannot clobber */ if (SANITIZE_DOM && (lcName === 'id' || lcName === 'name') && (value in document || value in formElement)) return false;
        /* Allow valid data-* attributes: At least one character after "-"
        (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)
        XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)
        We don't need to check the value; it's always URI safe. */ if (ALLOW_DATA_ATTR && !FORBID_ATTR[lcName] && regExpTest(DATA_ATTR$$1, lcName)) ;
        else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR$$1, lcName)) ;
        else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) return false;
        else if (URI_SAFE_ATTRIBUTES[lcName]) ;
        else if (regExpTest(IS_ALLOWED_URI$$1, stringReplace(value, ATTR_WHITESPACE$$1, ''))) ;
        else if ((lcName === 'src' || lcName === 'xlink:href' || lcName === 'href') && lcTag !== 'script' && stringIndexOf(value, 'data:') === 0 && DATA_URI_TAGS[lcTag]) ;
        else if (ALLOW_UNKNOWN_PROTOCOLS && !regExpTest(IS_SCRIPT_OR_DATA$$1, stringReplace(value, ATTR_WHITESPACE$$1, ''))) ;
        else if (!value) ;
        else return false;
        return true;
    };
    /**
   * _sanitizeAttributes
   *
   * @protect attributes
   * @protect nodeName
   * @protect removeAttribute
   * @protect setAttribute
   *
   * @param  {Node} currentNode to sanitize
   */ var _sanitizeAttributes = function _sanitizeAttributes(currentNode) {
        var attr = void 0;
        var value = void 0;
        var lcName = void 0;
        var l = void 0;
        /* Execute a hook if present */ _executeHook('beforeSanitizeAttributes', currentNode, null);
        var attributes = currentNode.attributes;
        /* Check if we have attributes; if not we might have a text node */ if (!attributes) return;
        var hookEvent = {
            attrName: '',
            attrValue: '',
            keepAttr: true,
            allowedAttributes: ALLOWED_ATTR
        };
        l = attributes.length;
        /* Go backwards over all attributes; safely remove bad ones */ while(l--){
            attr = attributes[l];
            var _attr = attr, name = _attr.name, namespaceURI = _attr.namespaceURI;
            value = stringTrim(attr.value);
            lcName = stringToLowerCase(name);
            /* Execute a hook if present */ hookEvent.attrName = lcName;
            hookEvent.attrValue = value;
            hookEvent.keepAttr = true;
            hookEvent.forceKeepAttr = undefined; // Allows developers to see this is a property they can set
            _executeHook('uponSanitizeAttribute', currentNode, hookEvent);
            value = hookEvent.attrValue;
            /* Did the hooks approve of the attribute? */ if (hookEvent.forceKeepAttr) continue;
            /* Remove attribute */ _removeAttribute(name, currentNode);
            /* Did the hooks approve of the attribute? */ if (!hookEvent.keepAttr) continue;
            /* Work around a security issue in jQuery 3.0 */ if (regExpTest(/\/>/i, value)) {
                _removeAttribute(name, currentNode);
                continue;
            }
            /* Sanitize attribute content to be template-safe */ if (SAFE_FOR_TEMPLATES) {
                value = stringReplace(value, MUSTACHE_EXPR$$1, ' ');
                value = stringReplace(value, ERB_EXPR$$1, ' ');
            }
            /* Is `value` valid for this attribute? */ var lcTag = currentNode.nodeName.toLowerCase();
            if (!_isValidAttribute(lcTag, lcName, value)) continue;
            /* Handle invalid data-* attribute set by try-catching it */ try {
                if (namespaceURI) currentNode.setAttributeNS(namespaceURI, name, value);
                else /* Fallback to setAttribute() for browser-unrecognized namespaces e.g. "x-schema". */ currentNode.setAttribute(name, value);
                arrayPop(DOMPurify.removed);
            } catch (_) {}
        }
        /* Execute a hook if present */ _executeHook('afterSanitizeAttributes', currentNode, null);
    };
    /**
   * _sanitizeShadowDOM
   *
   * @param  {DocumentFragment} fragment to iterate over recursively
   */ var _sanitizeShadowDOM1 = function _sanitizeShadowDOM(fragment) {
        var shadowNode = void 0;
        var shadowIterator = _createIterator(fragment);
        /* Execute a hook if present */ _executeHook('beforeSanitizeShadowDOM', fragment, null);
        while(shadowNode = shadowIterator.nextNode()){
            /* Execute a hook if present */ _executeHook('uponSanitizeShadowNode', shadowNode, null);
            /* Sanitize tags and elements */ if (_sanitizeElements(shadowNode)) continue;
            /* Deep shadow DOM detected */ if (shadowNode.content instanceof DocumentFragment) _sanitizeShadowDOM(shadowNode.content);
            /* Check attributes, sanitize if necessary */ _sanitizeAttributes(shadowNode);
        }
        /* Execute a hook if present */ _executeHook('afterSanitizeShadowDOM', fragment, null);
    };
    /**
   * Sanitize
   * Public method providing core sanitation functionality
   *
   * @param {String|Node} dirty string or DOM node
   * @param {Object} configuration object
   */ // eslint-disable-next-line complexity
    DOMPurify.sanitize = function(dirty, cfg) {
        var body = void 0;
        var importedNode = void 0;
        var currentNode = void 0;
        var oldNode = void 0;
        var returnNode = void 0;
        /* Make sure we have a string to sanitize.
      DO NOT return early, as this will return the wrong type if
      the user has requested a DOM object rather than a string */ IS_EMPTY_INPUT = !dirty;
        if (IS_EMPTY_INPUT) dirty = '<!-->';
        /* Stringify, in case dirty is an object */ if (typeof dirty !== 'string' && !_isNode(dirty)) {
            // eslint-disable-next-line no-negated-condition
            if (typeof dirty.toString !== 'function') throw typeErrorCreate('toString is not a function');
            else {
                dirty = dirty.toString();
                if (typeof dirty !== 'string') throw typeErrorCreate('dirty is not a string, aborting');
            }
        }
        /* Check we can run. Otherwise fall back or ignore */ if (!DOMPurify.isSupported) {
            if (_typeof(window.toStaticHTML) === 'object' || typeof window.toStaticHTML === 'function') {
                if (typeof dirty === 'string') return window.toStaticHTML(dirty);
                if (_isNode(dirty)) return window.toStaticHTML(dirty.outerHTML);
            }
            return dirty;
        }
        /* Assign config vars */ if (!SET_CONFIG) _parseConfig(cfg);
        /* Clean up removed elements */ DOMPurify.removed = [];
        /* Check if dirty is correctly typed for IN_PLACE */ if (typeof dirty === 'string') IN_PLACE = false;
        if (IN_PLACE) ;
        else if (dirty instanceof Node) {
            /* If dirty is a DOM element, append to an empty document to avoid
         elements being stripped by the parser */ body = _initDocument('<!---->');
            importedNode = body.ownerDocument.importNode(dirty, true);
            if (importedNode.nodeType === 1 && importedNode.nodeName === 'BODY') /* Node is already a body, use as is */ body = importedNode;
            else if (importedNode.nodeName === 'HTML') body = importedNode;
            else // eslint-disable-next-line unicorn/prefer-dom-node-append
            body.appendChild(importedNode);
        } else {
            /* Exit directly if we have nothing to do */ if (!RETURN_DOM && !SAFE_FOR_TEMPLATES && !WHOLE_DOCUMENT && // eslint-disable-next-line unicorn/prefer-includes
            dirty.indexOf('<') === -1) return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(dirty) : dirty;
            /* Initialize the document to work on */ body = _initDocument(dirty);
            /* Check we have a DOM node from the data */ if (!body) return RETURN_DOM ? null : emptyHTML;
        }
        /* Remove first element node (ours) if FORCE_BODY is set */ if (body && FORCE_BODY) _forceRemove(body.firstChild);
        /* Get node iterator */ var nodeIterator = _createIterator(IN_PLACE ? dirty : body);
        /* Now start iterating over the created document */ while(currentNode = nodeIterator.nextNode()){
            /* Fix IE's strange behavior with manipulated textNodes #89 */ if (currentNode.nodeType === 3 && currentNode === oldNode) continue;
            /* Sanitize tags and elements */ if (_sanitizeElements(currentNode)) continue;
            /* Shadow DOM detected, sanitize it */ if (currentNode.content instanceof DocumentFragment) _sanitizeShadowDOM1(currentNode.content);
            /* Check attributes, sanitize if necessary */ _sanitizeAttributes(currentNode);
            oldNode = currentNode;
        }
        oldNode = null;
        /* If we sanitized `dirty` in-place, return it. */ if (IN_PLACE) return dirty;
        /* Return sanitized string or DOM */ if (RETURN_DOM) {
            if (RETURN_DOM_FRAGMENT) {
                returnNode = createDocumentFragment.call(body.ownerDocument);
                while(body.firstChild)// eslint-disable-next-line unicorn/prefer-dom-node-append
                returnNode.appendChild(body.firstChild);
            } else returnNode = body;
            if (RETURN_DOM_IMPORT) /*
          AdoptNode() is not used because internal state is not reset
          (e.g. the past names map of a HTMLFormElement), this is safe
          in theory but we would rather not risk another attack vector.
          The state that is cloned by importNode() is explicitly defined
          by the specs.
        */ returnNode = importNode.call(originalDocument, returnNode, true);
            return returnNode;
        }
        var serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;
        /* Sanitize final string template-safe */ if (SAFE_FOR_TEMPLATES) {
            serializedHTML = stringReplace(serializedHTML, MUSTACHE_EXPR$$1, ' ');
            serializedHTML = stringReplace(serializedHTML, ERB_EXPR$$1, ' ');
        }
        return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(serializedHTML) : serializedHTML;
    };
    /**
   * Public method to set the configuration once
   * setConfig
   *
   * @param {Object} cfg configuration object
   */ DOMPurify.setConfig = function(cfg) {
        _parseConfig(cfg);
        SET_CONFIG = true;
    };
    /**
   * Public method to remove the configuration
   * clearConfig
   *
   */ DOMPurify.clearConfig = function() {
        CONFIG = null;
        SET_CONFIG = false;
    };
    /**
   * Public method to check if an attribute value is valid.
   * Uses last set config, if any. Otherwise, uses config defaults.
   * isValidAttribute
   *
   * @param  {string} tag Tag name of containing element.
   * @param  {string} attr Attribute name.
   * @param  {string} value Attribute value.
   * @return {Boolean} Returns true if `value` is valid. Otherwise, returns false.
   */ DOMPurify.isValidAttribute = function(tag, attr, value) {
        /* Initialize shared config vars if necessary. */ if (!CONFIG) _parseConfig({});
        var lcTag = stringToLowerCase(tag);
        var lcName = stringToLowerCase(attr);
        return _isValidAttribute(lcTag, lcName, value);
    };
    /**
   * AddHook
   * Public method to add DOMPurify hooks
   *
   * @param {String} entryPoint entry point for the hook to add
   * @param {Function} hookFunction function to execute
   */ DOMPurify.addHook = function(entryPoint, hookFunction) {
        if (typeof hookFunction !== 'function') return;
        hooks[entryPoint] = hooks[entryPoint] || [];
        arrayPush(hooks[entryPoint], hookFunction);
    };
    /**
   * RemoveHook
   * Public method to remove a DOMPurify hook at a given entryPoint
   * (pops it from the stack of hooks if more are present)
   *
   * @param {String} entryPoint entry point for the hook to remove
   */ DOMPurify.removeHook = function(entryPoint) {
        if (hooks[entryPoint]) arrayPop(hooks[entryPoint]);
    };
    /**
   * RemoveHooks
   * Public method to remove all DOMPurify hooks at a given entryPoint
   *
   * @param  {String} entryPoint entry point for the hooks to remove
   */ DOMPurify.removeHooks = function(entryPoint) {
        if (hooks[entryPoint]) hooks[entryPoint] = [];
    };
    /**
   * RemoveAllHooks
   * Public method to remove all DOMPurify hooks
   *
   */ DOMPurify.removeAllHooks = function() {
        hooks = {};
    };
    return DOMPurify;
}
var purify = createDOMPurify();
// ESM-comment-begin
// define(function () { return purify; });
// ESM-comment-end
// ESM-uncomment-begin
exports.default = purify;
var version = purify.version;
var isSupported = purify.isSupported;
var sanitize = purify.sanitize;
var setConfig = purify.setConfig;
var clearConfig = purify.clearConfig;
var isValidAttribute = purify.isValidAttribute;
var addHook = purify.addHook;
var removeHook = purify.removeHook;
var removeHooks = purify.removeHooks;
var removeAllHooks = purify.removeAllHooks; // ESM-uncomment-end

},{"@swc/helpers":"erO4s","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"aXkAR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "marked", function() {
    return marked;
});
parcelHelpers.export(exports, "Parser", function() {
    return Parser;
});
parcelHelpers.export(exports, "parser", function() {
    return parser;
});
parcelHelpers.export(exports, "Renderer", function() {
    return Renderer;
});
parcelHelpers.export(exports, "TextRenderer", function() {
    return TextRenderer;
});
parcelHelpers.export(exports, "Lexer", function() {
    return Lexer;
});
parcelHelpers.export(exports, "lexer", function() {
    return lexer;
});
parcelHelpers.export(exports, "Tokenizer", function() {
    return Tokenizer;
});
parcelHelpers.export(exports, "Slugger", function() {
    return Slugger;
});
parcelHelpers.export(exports, "parse", function() {
    return parse;
});
/**
 * marked - a markdown parser
 * Copyright (c) 2011-2021, Christopher Jeffrey. (MIT Licensed)
 * https://github.com/markedjs/marked
 */ /**
 * DO NOT EDIT THIS FILE
 * The code in this file is generated from files in ./src/
 */ // ESM-uncomment-begin
var __marked_exports;
(function() {
    function define(factory) {
        __marked_exports = factory();
    }
    define.amd = true;
    // ESM-uncomment-end
    (function(global, factory) {
        module.exports = factory();
    })(this, function() {
        'use strict';
        function _defineProperties(target, props) {
            for(var i = 0; i < props.length; i++){
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        function _createClass(Constructor, protoProps, staticProps) {
            if (protoProps) _defineProperties(Constructor.prototype, protoProps);
            if (staticProps) _defineProperties(Constructor, staticProps);
            return Constructor;
        }
        function _unsupportedIterableToArray(o, minLen) {
            if (!o) return;
            if (typeof o === "string") return _arrayLikeToArray(o, minLen);
            var n = Object.prototype.toString.call(o).slice(8, -1);
            if (n === "Object" && o.constructor) n = o.constructor.name;
            if (n === "Map" || n === "Set") return Array.from(o);
            if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
        }
        function _arrayLikeToArray(arr, len) {
            if (len == null || len > arr.length) len = arr.length;
            for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
            return arr2;
        }
        function _createForOfIteratorHelperLoose(o, allowArrayLike) {
            var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
            if (it) return (it = it.call(o)).next.bind(it);
            if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
                if (it) o = it;
                var i = 0;
                return function() {
                    if (i >= o.length) return {
                        done: true
                    };
                    return {
                        done: false,
                        value: o[i++]
                    };
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var defaults$5 = {
            exports: {}
        };
        function getDefaults$1() {
            return {
                baseUrl: null,
                breaks: false,
                extensions: null,
                gfm: true,
                headerIds: true,
                headerPrefix: '',
                highlight: null,
                langPrefix: 'language-',
                mangle: true,
                pedantic: false,
                renderer: null,
                sanitize: false,
                sanitizer: null,
                silent: false,
                smartLists: false,
                smartypants: false,
                tokenizer: null,
                walkTokens: null,
                xhtml: false
            };
        }
        function changeDefaults$1(newDefaults) {
            defaults$5.exports.defaults = newDefaults;
        }
        defaults$5.exports = {
            defaults: getDefaults$1(),
            getDefaults: getDefaults$1,
            changeDefaults: changeDefaults$1
        };
        /**
   * Helpers
   */ var escapeTest = /[&<>"']/;
        var escapeReplace = /[&<>"']/g;
        var escapeTestNoEncode = /[<>"']|&(?!#?\w+;)/;
        var escapeReplaceNoEncode = /[<>"']|&(?!#?\w+;)/g;
        var escapeReplacements = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;'
        };
        var getEscapeReplacement = function getEscapeReplacement(ch) {
            return escapeReplacements[ch];
        };
        function escape$2(html, encode) {
            if (encode) {
                if (escapeTest.test(html)) return html.replace(escapeReplace, getEscapeReplacement);
            } else {
                if (escapeTestNoEncode.test(html)) return html.replace(escapeReplaceNoEncode, getEscapeReplacement);
            }
            return html;
        }
        var unescapeTest = /&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/ig;
        function unescape$1(html) {
            // explicitly match decimal, hex, and named HTML entities
            return html.replace(unescapeTest, function(_, n) {
                n = n.toLowerCase();
                if (n === 'colon') return ':';
                if (n.charAt(0) === '#') return n.charAt(1) === 'x' ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));
                return '';
            });
        }
        var caret = /(^|[^\[])\^/g;
        function edit$1(regex, opt) {
            regex = regex.source || regex;
            opt = opt || '';
            var obj = {
                replace: function replace(name, val) {
                    val = val.source || val;
                    val = val.replace(caret, '$1');
                    regex = regex.replace(name, val);
                    return obj;
                },
                getRegex: function getRegex() {
                    return new RegExp(regex, opt);
                }
            };
            return obj;
        }
        var nonWordAndColonTest = /[^\w:]/g;
        var originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;
        function cleanUrl$1(sanitize, base, href) {
            if (sanitize) {
                var prot;
                try {
                    prot = decodeURIComponent(unescape$1(href)).replace(nonWordAndColonTest, '').toLowerCase();
                } catch (e) {
                    return null;
                }
                if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) return null;
            }
            if (base && !originIndependentUrl.test(href)) href = resolveUrl(base, href);
            try {
                href = encodeURI(href).replace(/%25/g, '%');
            } catch (e) {
                return null;
            }
            return href;
        }
        var baseUrls = {};
        var justDomain = /^[^:]+:\/*[^/]*$/;
        var protocol = /^([^:]+:)[\s\S]*$/;
        var domain = /^([^:]+:\/*[^/]*)[\s\S]*$/;
        function resolveUrl(base, href) {
            if (!baseUrls[' ' + base]) {
                // we can ignore everything in base after the last slash of its path component,
                // but we might need to add _that_
                // https://tools.ietf.org/html/rfc3986#section-3
                if (justDomain.test(base)) baseUrls[' ' + base] = base + '/';
                else baseUrls[' ' + base] = rtrim$1(base, '/', true);
            }
            base = baseUrls[' ' + base];
            var relativeBase = base.indexOf(':') === -1;
            if (href.substring(0, 2) === '//') {
                if (relativeBase) return href;
                return base.replace(protocol, '$1') + href;
            } else if (href.charAt(0) === '/') {
                if (relativeBase) return href;
                return base.replace(domain, '$1') + href;
            } else return base + href;
        }
        var noopTest$1 = {
            exec: function noopTest() {}
        };
        function merge$2(obj) {
            var i = 1, target, key;
            for(; i < arguments.length; i++){
                target = arguments[i];
                for(key in target)if (Object.prototype.hasOwnProperty.call(target, key)) obj[key] = target[key];
            }
            return obj;
        }
        function splitCells$1(tableRow, count) {
            // ensure that every cell-delimiting pipe has a space
            // before it to distinguish it from an escaped pipe
            var row = tableRow.replace(/\|/g, function(match, offset, str) {
                var escaped = false, curr = offset;
                while(--curr >= 0 && str[curr] === '\\')escaped = !escaped;
                if (escaped) // odd number of slashes means | is escaped
                // so we leave it alone
                return '|';
                else // add space before unescaped |
                return ' |';
            }), cells = row.split(/ \|/);
            var i = 0; // First/last cell in a row cannot be empty if it has no leading/trailing pipe
            if (!cells[0].trim()) cells.shift();
            if (!cells[cells.length - 1].trim()) cells.pop();
            if (cells.length > count) cells.splice(count);
            else while(cells.length < count)cells.push('');
            for(; i < cells.length; i++)// leading or trailing whitespace is ignored per the gfm spec
            cells[i] = cells[i].trim().replace(/\\\|/g, '|');
            return cells;
        } // Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').
        // /c*$/ is vulnerable to REDOS.
        // invert: Remove suffix of non-c chars instead. Default falsey.
        function rtrim$1(str, c, invert) {
            var l = str.length;
            if (l === 0) return '';
             // Length of suffix matching the invert condition.
            var suffLen = 0; // Step left until we fail to match the invert condition.
            while(suffLen < l){
                var currChar = str.charAt(l - suffLen - 1);
                if (currChar === c && !invert) suffLen++;
                else if (currChar !== c && invert) suffLen++;
                else break;
            }
            return str.substr(0, l - suffLen);
        }
        function findClosingBracket$1(str, b) {
            if (str.indexOf(b[1]) === -1) return -1;
            var l = str.length;
            var level = 0, i = 0;
            for(; i < l; i++){
                if (str[i] === '\\') i++;
                else if (str[i] === b[0]) level++;
                else if (str[i] === b[1]) {
                    level--;
                    if (level < 0) return i;
                }
            }
            return -1;
        }
        function checkSanitizeDeprecation$1(opt) {
            if (opt && opt.sanitize && !opt.silent) console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');
        } // copied from https://stackoverflow.com/a/5450113/806777
        function repeatString$1(pattern, count) {
            if (count < 1) return '';
            var result = '';
            while(count > 1){
                if (count & 1) result += pattern;
                count >>= 1;
                pattern += pattern;
            }
            return result + pattern;
        }
        var helpers = {
            escape: escape$2,
            unescape: unescape$1,
            edit: edit$1,
            cleanUrl: cleanUrl$1,
            resolveUrl: resolveUrl,
            noopTest: noopTest$1,
            merge: merge$2,
            splitCells: splitCells$1,
            rtrim: rtrim$1,
            findClosingBracket: findClosingBracket$1,
            checkSanitizeDeprecation: checkSanitizeDeprecation$1,
            repeatString: repeatString$1
        };
        var defaults$4 = defaults$5.exports.defaults;
        var rtrim = helpers.rtrim, splitCells = helpers.splitCells, _escape = helpers.escape, findClosingBracket = helpers.findClosingBracket;
        function outputLink(cap, link, raw, lexer1) {
            var href = link.href;
            var title = link.title ? _escape(link.title) : null;
            var text = cap[1].replace(/\\([\[\]])/g, '$1');
            if (cap[0].charAt(0) !== '!') {
                lexer1.state.inLink = true;
                var token = {
                    type: 'link',
                    raw: raw,
                    href: href,
                    title: title,
                    text: text,
                    tokens: lexer1.inlineTokens(text, [])
                };
                lexer1.state.inLink = false;
                return token;
            } else return {
                type: 'image',
                raw: raw,
                href: href,
                title: title,
                text: _escape(text)
            };
        }
        function indentCodeCompensation(raw, text) {
            var matchIndentToCode = raw.match(/^(\s+)(?:```)/);
            if (matchIndentToCode === null) return text;
            var indentToCode = matchIndentToCode[1];
            return text.split('\n').map(function(node) {
                var matchIndentInNode = node.match(/^\s+/);
                if (matchIndentInNode === null) return node;
                var indentInNode = matchIndentInNode[0];
                if (indentInNode.length >= indentToCode.length) return node.slice(indentToCode.length);
                return node;
            }).join('\n');
        }
        /**
   * Tokenizer
   */ var Tokenizer_1 = /*#__PURE__*/ function() {
            function Tokenizer2(options) {
                this.options = options || defaults$4;
            }
            var _proto = Tokenizer2.prototype;
            _proto.space = function space(src) {
                var cap = this.rules.block.newline.exec(src);
                if (cap) {
                    if (cap[0].length > 1) return {
                        type: 'space',
                        raw: cap[0]
                    };
                    return {
                        raw: '\n'
                    };
                }
            };
            _proto.code = function code(src) {
                var cap = this.rules.block.code.exec(src);
                if (cap) {
                    var text = cap[0].replace(/^ {1,4}/gm, '');
                    return {
                        type: 'code',
                        raw: cap[0],
                        codeBlockStyle: 'indented',
                        text: !this.options.pedantic ? rtrim(text, '\n') : text
                    };
                }
            };
            _proto.fences = function fences(src) {
                var cap = this.rules.block.fences.exec(src);
                if (cap) {
                    var raw = cap[0];
                    var text = indentCodeCompensation(raw, cap[3] || '');
                    return {
                        type: 'code',
                        raw: raw,
                        lang: cap[2] ? cap[2].trim() : cap[2],
                        text: text
                    };
                }
            };
            _proto.heading = function heading(src) {
                var cap = this.rules.block.heading.exec(src);
                if (cap) {
                    var text = cap[2].trim(); // remove trailing #s
                    if (/#$/.test(text)) {
                        var trimmed = rtrim(text, '#');
                        if (this.options.pedantic) text = trimmed.trim();
                        else if (!trimmed || / $/.test(trimmed)) // CommonMark requires space before trailing #s
                        text = trimmed.trim();
                    }
                    var token = {
                        type: 'heading',
                        raw: cap[0],
                        depth: cap[1].length,
                        text: text,
                        tokens: []
                    };
                    this.lexer.inline(token.text, token.tokens);
                    return token;
                }
            };
            _proto.hr = function hr(src) {
                var cap = this.rules.block.hr.exec(src);
                if (cap) return {
                    type: 'hr',
                    raw: cap[0]
                };
            };
            _proto.blockquote = function blockquote(src) {
                var cap = this.rules.block.blockquote.exec(src);
                if (cap) {
                    var text = cap[0].replace(/^ *> ?/gm, '');
                    return {
                        type: 'blockquote',
                        raw: cap[0],
                        tokens: this.lexer.blockTokens(text, []),
                        text: text
                    };
                }
            };
            _proto.list = function list(src) {
                var cap = this.rules.block.list.exec(src);
                if (cap) {
                    var raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine, line, lines, itemContents;
                    var bull = cap[1].trim();
                    var isordered = bull.length > 1;
                    var list = {
                        type: 'list',
                        raw: '',
                        ordered: isordered,
                        start: isordered ? +bull.slice(0, -1) : '',
                        loose: false,
                        items: []
                    };
                    bull = isordered ? "\\d{1,9}\\" + bull.slice(-1) : "\\" + bull;
                    if (this.options.pedantic) bull = isordered ? bull : '[*+-]';
                     // Get next list item
                    var itemRegex = new RegExp("^( {0,3}" + bull + ")((?: [^\\n]*| *)(?:\\n[^\\n]*)*(?:\\n|$))"); // Get each top-level item
                    while(src){
                        if (this.rules.block.hr.test(src)) break;
                        if (!(cap = itemRegex.exec(src))) break;
                        lines = cap[2].split('\n');
                        if (this.options.pedantic) {
                            indent = 2;
                            itemContents = lines[0].trimLeft();
                        } else {
                            indent = cap[2].search(/[^ ]/); // Find first non-space char
                            indent = cap[1].length + (indent > 4 ? 1 : indent); // intented code blocks after 4 spaces; indent is always 1
                            itemContents = lines[0].slice(indent - cap[1].length);
                        }
                        blankLine = false;
                        raw = cap[0];
                        if (!lines[0] && /^ *$/.test(lines[1])) {
                            // items begin with at most one blank line
                            raw = cap[1] + lines.slice(0, 2).join('\n') + '\n';
                            list.loose = true;
                            lines = [];
                        }
                        var nextBulletRegex = new RegExp("^ {0," + Math.min(3, indent - 1) + "}(?:[*+-]|\\d{1,9}[.)])");
                        for(i = 1; i < lines.length; i++){
                            line = lines[i];
                            if (this.options.pedantic) // Re-align to follow commonmark nesting rules
                            line = line.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');
                             // End list item if found start of new bullet
                            if (nextBulletRegex.test(line)) {
                                raw = cap[1] + lines.slice(0, i).join('\n') + '\n';
                                break;
                            } // Until we encounter a blank line, item contents do not need indentation
                            if (!blankLine) {
                                if (!line.trim()) // Check if current line is empty
                                blankLine = true;
                                 // Dedent if possible
                                if (line.search(/[^ ]/) >= indent) itemContents += '\n' + line.slice(indent);
                                else itemContents += '\n' + line;
                                continue;
                            } // Dedent this line
                            if (line.search(/[^ ]/) >= indent || !line.trim()) {
                                itemContents += '\n' + line.slice(indent);
                                continue;
                            } else {
                                // Line was not properly indented; end of this item
                                raw = cap[1] + lines.slice(0, i).join('\n') + '\n';
                                break;
                            }
                        }
                        if (!list.loose) {
                            // If the previous item ended with a blank line, the list is loose
                            if (endsWithBlankLine) list.loose = true;
                            else if (/\n *\n *$/.test(raw)) endsWithBlankLine = true;
                        } // Check for task list items
                        if (this.options.gfm) {
                            istask = /^\[[ xX]\] /.exec(itemContents);
                            if (istask) {
                                ischecked = istask[0] !== '[ ] ';
                                itemContents = itemContents.replace(/^\[[ xX]\] +/, '');
                            }
                        }
                        list.items.push({
                            type: 'list_item',
                            raw: raw,
                            task: !!istask,
                            checked: ischecked,
                            loose: false,
                            text: itemContents
                        });
                        list.raw += raw;
                        src = src.slice(raw.length);
                    } // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic
                    list.items[list.items.length - 1].raw = raw.trimRight();
                    list.items[list.items.length - 1].text = itemContents.trimRight();
                    list.raw = list.raw.trimRight();
                    var l = list.items.length; // Item child tokens handled here at end because we needed to have the final item to trim it first
                    for(i = 0; i < l; i++){
                        this.lexer.state.top = false;
                        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);
                        if (list.items[i].tokens.some(function(t) {
                            return t.type === 'space';
                        })) {
                            list.loose = true;
                            list.items[i].loose = true;
                        }
                    }
                    return list;
                }
            };
            _proto.html = function html(src) {
                var cap = this.rules.block.html.exec(src);
                if (cap) {
                    var token = {
                        type: 'html',
                        raw: cap[0],
                        pre: !this.options.sanitizer && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),
                        text: cap[0]
                    };
                    if (this.options.sanitize) {
                        token.type = 'paragraph';
                        token.text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : _escape(cap[0]);
                        token.tokens = [];
                        this.lexer.inline(token.text, token.tokens);
                    }
                    return token;
                }
            };
            _proto.def = function def(src) {
                var cap = this.rules.block.def.exec(src);
                if (cap) {
                    if (cap[3]) cap[3] = cap[3].substring(1, cap[3].length - 1);
                    var tag = cap[1].toLowerCase().replace(/\s+/g, ' ');
                    return {
                        type: 'def',
                        tag: tag,
                        raw: cap[0],
                        href: cap[2],
                        title: cap[3]
                    };
                }
            };
            _proto.table = function table(src) {
                var cap = this.rules.block.table.exec(src);
                if (cap) {
                    var item = {
                        type: 'table',
                        header: splitCells(cap[1]).map(function(c) {
                            return {
                                text: c
                            };
                        }),
                        align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
                        rows: cap[3] ? cap[3].replace(/\n$/, '').split('\n') : []
                    };
                    if (item.header.length === item.align.length) {
                        item.raw = cap[0];
                        var l = item.align.length;
                        var i, j, k, row;
                        for(i = 0; i < l; i++){
                            if (/^ *-+: *$/.test(item.align[i])) item.align[i] = 'right';
                            else if (/^ *:-+: *$/.test(item.align[i])) item.align[i] = 'center';
                            else if (/^ *:-+ *$/.test(item.align[i])) item.align[i] = 'left';
                            else item.align[i] = null;
                        }
                        l = item.rows.length;
                        for(i = 0; i < l; i++)item.rows[i] = splitCells(item.rows[i], item.header.length).map(function(c) {
                            return {
                                text: c
                            };
                        });
                         // parse child tokens inside headers and cells
                        // header child tokens
                        l = item.header.length;
                        for(j = 0; j < l; j++){
                            item.header[j].tokens = [];
                            this.lexer.inlineTokens(item.header[j].text, item.header[j].tokens);
                        } // cell child tokens
                        l = item.rows.length;
                        for(j = 0; j < l; j++){
                            row = item.rows[j];
                            for(k = 0; k < row.length; k++){
                                row[k].tokens = [];
                                this.lexer.inlineTokens(row[k].text, row[k].tokens);
                            }
                        }
                        return item;
                    }
                }
            };
            _proto.lheading = function lheading(src) {
                var cap = this.rules.block.lheading.exec(src);
                if (cap) {
                    var token = {
                        type: 'heading',
                        raw: cap[0],
                        depth: cap[2].charAt(0) === '=' ? 1 : 2,
                        text: cap[1],
                        tokens: []
                    };
                    this.lexer.inline(token.text, token.tokens);
                    return token;
                }
            };
            _proto.paragraph = function paragraph(src) {
                var cap = this.rules.block.paragraph.exec(src);
                if (cap) {
                    var token = {
                        type: 'paragraph',
                        raw: cap[0],
                        text: cap[1].charAt(cap[1].length - 1) === '\n' ? cap[1].slice(0, -1) : cap[1],
                        tokens: []
                    };
                    this.lexer.inline(token.text, token.tokens);
                    return token;
                }
            };
            _proto.text = function text(src) {
                var cap = this.rules.block.text.exec(src);
                if (cap) {
                    var token = {
                        type: 'text',
                        raw: cap[0],
                        text: cap[0],
                        tokens: []
                    };
                    this.lexer.inline(token.text, token.tokens);
                    return token;
                }
            };
            _proto.escape = function escape(src) {
                var cap = this.rules.inline.escape.exec(src);
                if (cap) return {
                    type: 'escape',
                    raw: cap[0],
                    text: _escape(cap[1])
                };
            };
            _proto.tag = function tag(src) {
                var cap = this.rules.inline.tag.exec(src);
                if (cap) {
                    if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) this.lexer.state.inLink = true;
                    else if (this.lexer.state.inLink && /^<\/a>/i.test(cap[0])) this.lexer.state.inLink = false;
                    if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\s|>)/i.test(cap[0])) this.lexer.state.inRawBlock = true;
                    else if (this.lexer.state.inRawBlock && /^<\/(pre|code|kbd|script)(\s|>)/i.test(cap[0])) this.lexer.state.inRawBlock = false;
                    return {
                        type: this.options.sanitize ? 'text' : 'html',
                        raw: cap[0],
                        inLink: this.lexer.state.inLink,
                        inRawBlock: this.lexer.state.inRawBlock,
                        text: this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : _escape(cap[0]) : cap[0]
                    };
                }
            };
            _proto.link = function link(src) {
                var cap = this.rules.inline.link.exec(src);
                if (cap) {
                    var trimmedUrl = cap[2].trim();
                    if (!this.options.pedantic && /^</.test(trimmedUrl)) {
                        // commonmark requires matching angle brackets
                        if (!/>$/.test(trimmedUrl)) return;
                         // ending angle bracket cannot be escaped
                        var rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\');
                        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) return;
                    } else {
                        // find closing parenthesis
                        var lastParenIndex = findClosingBracket(cap[2], '()');
                        if (lastParenIndex > -1) {
                            var start = cap[0].indexOf('!') === 0 ? 5 : 4;
                            var linkLen = start + cap[1].length + lastParenIndex;
                            cap[2] = cap[2].substring(0, lastParenIndex);
                            cap[0] = cap[0].substring(0, linkLen).trim();
                            cap[3] = '';
                        }
                    }
                    var href = cap[2];
                    var title = '';
                    if (this.options.pedantic) {
                        // split pedantic href and title
                        var link = /^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(href);
                        if (link) {
                            href = link[1];
                            title = link[3];
                        }
                    } else title = cap[3] ? cap[3].slice(1, -1) : '';
                    href = href.trim();
                    if (/^</.test(href)) {
                        if (this.options.pedantic && !/>$/.test(trimmedUrl)) // pedantic allows starting angle bracket without ending angle bracket
                        href = href.slice(1);
                        else href = href.slice(1, -1);
                    }
                    return outputLink(cap, {
                        href: href ? href.replace(this.rules.inline._escapes, '$1') : href,
                        title: title ? title.replace(this.rules.inline._escapes, '$1') : title
                    }, cap[0], this.lexer);
                }
            };
            _proto.reflink = function reflink(src, links) {
                var cap;
                if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {
                    var link = (cap[2] || cap[1]).replace(/\s+/g, ' ');
                    link = links[link.toLowerCase()];
                    if (!link || !link.href) {
                        var text = cap[0].charAt(0);
                        return {
                            type: 'text',
                            raw: text,
                            text: text
                        };
                    }
                    return outputLink(cap, link, cap[0], this.lexer);
                }
            };
            _proto.emStrong = function emStrong(src, maskedSrc, prevChar) {
                if (prevChar === void 0) prevChar = '';
                var match = this.rules.inline.emStrong.lDelim.exec(src);
                if (!match) return; // _ can't be between two alphanumerics. \p{L}\p{N} includes non-english alphabet/numbers as well
                if (match[3] && prevChar.match(/(?:[0-9A-Za-z\xAA\xB2\xB3\xB5\xB9\xBA\xBC-\xBE\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u0660-\u0669\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07C0-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u0904-\u0939\u093D\u0950\u0958-\u0961\u0966-\u096F\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09E6-\u09F1\u09F4-\u09F9\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A66-\u0A6F\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AE6-\u0AEF\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B66-\u0B6F\u0B71-\u0B77\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0BE6-\u0BF2\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C66-\u0C6F\u0C78-\u0C7E\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CE6-\u0CEF\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D58-\u0D61\u0D66-\u0D78\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DE6-\u0DEF\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F20-\u0F33\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F-\u1049\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u1090-\u1099\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1369-\u137C\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A16\u1A20-\u1A54\u1A80-\u1A89\u1A90-\u1A99\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B50-\u1B59\u1B83-\u1BA0\u1BAE-\u1BE5\u1C00-\u1C23\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2070\u2071\u2074-\u2079\u207F-\u2089\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2150-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2CFD\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u3192-\u3195\u31A0-\u31BF\u31F0-\u31FF\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA830-\uA835\uA840-\uA873\uA882-\uA8B3\uA8D0-\uA8D9\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA900-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF-\uA9D9\uA9E0-\uA9E4\uA9E6-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA50-\uAA59\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD07-\uDD33\uDD40-\uDD78\uDD8A\uDD8B\uDE80-\uDE9C\uDEA0-\uDED0\uDEE1-\uDEFB\uDF00-\uDF23\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC58-\uDC76\uDC79-\uDC9E\uDCA7-\uDCAF\uDCE0-\uDCF2\uDCF4\uDCF5\uDCFB-\uDD1B\uDD20-\uDD39\uDD80-\uDDB7\uDDBC-\uDDCF\uDDD2-\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE40-\uDE48\uDE60-\uDE7E\uDE80-\uDE9F\uDEC0-\uDEC7\uDEC9-\uDEE4\uDEEB-\uDEEF\uDF00-\uDF35\uDF40-\uDF55\uDF58-\uDF72\uDF78-\uDF91\uDFA9-\uDFAF]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDCFA-\uDD23\uDD30-\uDD39\uDE60-\uDE7E\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF27\uDF30-\uDF45\uDF51-\uDF54\uDFB0-\uDFCB\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC52-\uDC6F\uDC83-\uDCAF\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD03-\uDD26\uDD36-\uDD3F\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDD0-\uDDDA\uDDDC\uDDE1-\uDDF4\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDEF0-\uDEF9\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC50-\uDC59\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE50-\uDE59\uDE80-\uDEAA\uDEB8\uDEC0-\uDEC9\uDF00-\uDF1A\uDF30-\uDF3B]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCF2\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDD50-\uDD59\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC50-\uDC6C\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD50-\uDD59\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDDA0-\uDDA9\uDEE0-\uDEF2\uDFB0\uDFC0-\uDFD4]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF50-\uDF59\uDF5B-\uDF61\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE96\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82C[\uDC00-\uDD1E\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD834[\uDEE0-\uDEF3\uDF60-\uDF78]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD40-\uDD49\uDD4E\uDEC0-\uDEEB\uDEF0-\uDEF9]|\uD83A[\uDC00-\uDCC4\uDCC7-\uDCCF\uDD00-\uDD43\uDD4B\uDD50-\uDD59]|\uD83B[\uDC71-\uDCAB\uDCAD-\uDCAF\uDCB1-\uDCB4\uDD01-\uDD2D\uDD2F-\uDD3D\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD83C[\uDD00-\uDD0C]|\uD83E[\uDFF0-\uDFF9]|\uD869[\uDC00-\uDEDD\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A])/)) return;
                var nextChar = match[1] || match[2] || '';
                if (!nextChar || nextChar && (prevChar === '' || this.rules.inline.punctuation.exec(prevChar))) {
                    var lLength = match[0].length - 1;
                    var rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;
                    var endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;
                    endReg.lastIndex = 0; // Clip maskedSrc to same section of string as src (move to lexer?)
                    maskedSrc = maskedSrc.slice(-1 * src.length + lLength);
                    while((match = endReg.exec(maskedSrc)) != null){
                        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];
                        if (!rDelim) continue; // skip single * in __abc*abc__
                        rLength = rDelim.length;
                        if (match[3] || match[4]) {
                            // found another Left Delim
                            delimTotal += rLength;
                            continue;
                        } else if (match[5] || match[6]) // either Left or Right Delim
                        {
                            if (lLength % 3 && !((lLength + rLength) % 3)) {
                                midDelimTotal += rLength;
                                continue; // CommonMark Emphasis Rules 9-10
                            }
                        }
                        delimTotal -= rLength;
                        if (delimTotal > 0) continue; // Haven't found enough closing delimiters
                        // Remove extra characters. *a*** -> *a*
                        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal); // Create `em` if smallest delimiter has odd char count. *a***
                        if (Math.min(lLength, rLength) % 2) {
                            var _text = src.slice(1, lLength + match.index + rLength);
                            return {
                                type: 'em',
                                raw: src.slice(0, lLength + match.index + rLength + 1),
                                text: _text,
                                tokens: this.lexer.inlineTokens(_text, [])
                            };
                        } // Create 'strong' if smallest delimiter has even char count. **a***
                        var text = src.slice(2, lLength + match.index + rLength - 1);
                        return {
                            type: 'strong',
                            raw: src.slice(0, lLength + match.index + rLength + 1),
                            text: text,
                            tokens: this.lexer.inlineTokens(text, [])
                        };
                    }
                }
            };
            _proto.codespan = function codespan(src) {
                var cap = this.rules.inline.code.exec(src);
                if (cap) {
                    var text = cap[2].replace(/\n/g, ' ');
                    var hasNonSpaceChars = /[^ ]/.test(text);
                    var hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);
                    if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) text = text.substring(1, text.length - 1);
                    text = _escape(text, true);
                    return {
                        type: 'codespan',
                        raw: cap[0],
                        text: text
                    };
                }
            };
            _proto.br = function br(src) {
                var cap = this.rules.inline.br.exec(src);
                if (cap) return {
                    type: 'br',
                    raw: cap[0]
                };
            };
            _proto.del = function del(src) {
                var cap = this.rules.inline.del.exec(src);
                if (cap) return {
                    type: 'del',
                    raw: cap[0],
                    text: cap[2],
                    tokens: this.lexer.inlineTokens(cap[2], [])
                };
            };
            _proto.autolink = function autolink(src, mangle) {
                var cap = this.rules.inline.autolink.exec(src);
                if (cap) {
                    var text, href;
                    if (cap[2] === '@') {
                        text = _escape(this.options.mangle ? mangle(cap[1]) : cap[1]);
                        href = 'mailto:' + text;
                    } else {
                        text = _escape(cap[1]);
                        href = text;
                    }
                    return {
                        type: 'link',
                        raw: cap[0],
                        text: text,
                        href: href,
                        tokens: [
                            {
                                type: 'text',
                                raw: text,
                                text: text
                            }
                        ]
                    };
                }
            };
            _proto.url = function url(src, mangle) {
                var cap;
                if (cap = this.rules.inline.url.exec(src)) {
                    var text, href;
                    if (cap[2] === '@') {
                        text = _escape(this.options.mangle ? mangle(cap[0]) : cap[0]);
                        href = 'mailto:' + text;
                    } else {
                        // do extended autolink path validation
                        var prevCapZero;
                        do {
                            prevCapZero = cap[0];
                            cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];
                        }while (prevCapZero !== cap[0])
                        text = _escape(cap[0]);
                        if (cap[1] === 'www.') href = 'http://' + text;
                        else href = text;
                    }
                    return {
                        type: 'link',
                        raw: cap[0],
                        text: text,
                        href: href,
                        tokens: [
                            {
                                type: 'text',
                                raw: text,
                                text: text
                            }
                        ]
                    };
                }
            };
            _proto.inlineText = function inlineText(src, smartypants) {
                var cap = this.rules.inline.text.exec(src);
                if (cap) {
                    var text;
                    if (this.lexer.state.inRawBlock) text = this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : _escape(cap[0]) : cap[0];
                    else text = _escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);
                    return {
                        type: 'text',
                        raw: cap[0],
                        text: text
                    };
                }
            };
            return Tokenizer2;
        }();
        var noopTest = helpers.noopTest, edit = helpers.edit, merge$1 = helpers.merge;
        /**
   * Block-Level Grammar
   */ var block$1 = {
            newline: /^(?: *(?:\n|$))+/,
            code: /^( {4}[^\n]+(?:\n(?: *(?:\n|$))*)?)+/,
            fences: /^ {0,3}(`{3,}(?=[^`\n]*\n)|~{3,})([^\n]*)\n(?:|([\s\S]*?)\n)(?: {0,3}\1[~`]* *(?=\n|$)|$)/,
            hr: /^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\* *){3,})(?:\n+|$)/,
            heading: /^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/,
            blockquote: /^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,
            list: /^( {0,3}bull)( [^\n]+?)?(?:\n|$)/,
            html: "^ {0,3}(?:<(script|pre|style|textarea)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)|comment[^\\n]*(\\n+|$)|<\\?[\\s\\S]*?(?:\\?>\\n*|$)|<![A-Z][\\s\\S]*?(?:>\\n*|$)|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:(?:\\n *)+\\n|$)|<(?!script|pre|style|textarea)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$)|</(?!script|pre|style|textarea)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$))",
            def: /^ {0,3}\[(label)\]: *\n? *<?([^\s>]+)>?(?:(?: +\n? *| *\n *)(title))? *(?:\n+|$)/,
            table: noopTest,
            lheading: /^([^\n]+)\n {0,3}(=+|-+) *(?:\n+|$)/,
            // regex template, placeholders will be replaced according to different paragraph
            // interruption rules of commonmark and the original markdown spec:
            _paragraph: /^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html| +\n)[^\n]+)*)/,
            text: /^[^\n]+/
        };
        block$1._label = /(?!\s*\])(?:\\[\[\]]|[^\[\]])+/;
        block$1._title = /(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/;
        block$1.def = edit(block$1.def).replace('label', block$1._label).replace('title', block$1._title).getRegex();
        block$1.bullet = /(?:[*+-]|\d{1,9}[.)])/;
        block$1.listItemStart = edit(/^( *)(bull) */).replace('bull', block$1.bullet).getRegex();
        block$1.list = edit(block$1.list).replace(/bull/g, block$1.bullet).replace('hr', '\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))').replace('def', '\\n+(?=' + block$1.def.source + ')').getRegex();
        block$1._tag = "address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul";
        block$1._comment = /<!--(?!-?>)[\s\S]*?(?:-->|$)/;
        block$1.html = edit(block$1.html, 'i').replace('comment', block$1._comment).replace('tag', block$1._tag).replace('attribute', / +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex();
        block$1.paragraph = edit(block$1._paragraph).replace('hr', block$1.hr).replace('heading', ' {0,3}#{1,6} ').replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs
        .replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt
        .replace('html', '</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', block$1._tag) // pars can be interrupted by type (6) html blocks
        .getRegex();
        block$1.blockquote = edit(block$1.blockquote).replace('paragraph', block$1.paragraph).getRegex();
        /**
   * Normal Block Grammar
   */ block$1.normal = merge$1({}, block$1);
        /**
   * GFM Block Grammar
   */ block$1.gfm = merge$1({}, block$1.normal, {
            table: "^ *([^\\n ].*\\|.*)\\n {0,3}(?:\\| *)?(:?-+:? *(?:\\| *:?-+:? *)*)\\|?(?:\\n((?:(?! *\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)" // Cells
        });
        block$1.gfm.table = edit(block$1.gfm.table).replace('hr', block$1.hr).replace('heading', ' {0,3}#{1,6} ').replace('blockquote', ' {0,3}>').replace('code', ' {4}[^\\n]').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt
        .replace('html', '</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', block$1._tag) // tables can be interrupted by type (6) html blocks
        .getRegex();
        /**
   * Pedantic grammar (original John Gruber's loose markdown specification)
   */ block$1.pedantic = merge$1({}, block$1.normal, {
            html: edit("^ *(?:comment *(?:\\n|\\s*$)|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)|<tag(?:\"[^\"]*\"|'[^']*'|\\s[^'\"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))").replace('comment', block$1._comment).replace(/tag/g, "(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b").getRegex(),
            def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,
            heading: /^(#{1,6})(.*)(?:\n+|$)/,
            fences: noopTest,
            // fences not supported
            paragraph: edit(block$1.normal._paragraph).replace('hr', block$1.hr).replace('heading', ' *#{1,6} *[^\n]').replace('lheading', block$1.lheading).replace('blockquote', ' {0,3}>').replace('|fences', '').replace('|list', '').replace('|html', '').getRegex()
        });
        /**
   * Inline-Level Grammar
   */ var inline$1 = {
            escape: /^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,
            autolink: /^<(scheme:[^\s\x00-\x1f<>]*|email)>/,
            url: noopTest,
            tag: "^comment|^</[a-zA-Z][\\w:-]*\\s*>|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>|^<\\?[\\s\\S]*?\\?>|^<![a-zA-Z]+\\s[\\s\\S]*?>|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>",
            // CDATA section
            link: /^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/,
            reflink: /^!?\[(label)\]\[(?!\s*\])((?:\\[\[\]]?|[^\[\]\\])+)\]/,
            nolink: /^!?\[(?!\s*\])((?:\[[^\[\]]*\]|\\[\[\]]|[^\[\]])*)\](?:\[\])?/,
            reflinkSearch: 'reflink|nolink(?!\\()',
            emStrong: {
                lDelim: /^(?:\*+(?:([punct_])|[^\s*]))|^_+(?:([punct*])|([^\s_]))/,
                //        (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.
                //        () Skip other delimiter (1) #***                   (2) a***#, a***                   (3) #***a, ***a                 (4) ***#              (5) #***#                 (6) a***a
                rDelimAst: /\_\_[^_*]*?\*[^_*]*?\_\_|[punct_](\*+)(?=[\s]|$)|[^punct*_\s](\*+)(?=[punct_\s]|$)|[punct_\s](\*+)(?=[^punct*_\s])|[\s](\*+)(?=[punct_])|[punct_](\*+)(?=[punct_])|[^punct*_\s](\*+)(?=[^punct*_\s])/,
                rDelimUnd: /\*\*[^_*]*?\_[^_*]*?\*\*|[punct*](\_+)(?=[\s]|$)|[^punct*_\s](\_+)(?=[punct*\s]|$)|[punct*\s](\_+)(?=[^punct*_\s])|[\s](\_+)(?=[punct*])|[punct*](\_+)(?=[punct*])/ // ^- Not allowed for _
            },
            code: /^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,
            br: /^( {2,}|\\)\n(?!\s*$)/,
            del: noopTest,
            text: /^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/,
            punctuation: /^([\spunctuation])/
        }; // list of punctuation marks from CommonMark spec
        // without * and _ to handle the different emphasis markers * and _
        inline$1._punctuation = '!"#$%&\'()+\\-.,/:;<=>?@\\[\\]`^{|}~';
        inline$1.punctuation = edit(inline$1.punctuation).replace(/punctuation/g, inline$1._punctuation).getRegex(); // sequences em should skip over [title](link), `code`, <html>
        inline$1.blockSkip = /\[[^\]]*?\]\([^\)]*?\)|`[^`]*?`|<[^>]*?>/g;
        inline$1.escapedEmSt = /\\\*|\\_/g;
        inline$1._comment = edit(block$1._comment).replace('(?:-->|$)', '-->').getRegex();
        inline$1.emStrong.lDelim = edit(inline$1.emStrong.lDelim).replace(/punct/g, inline$1._punctuation).getRegex();
        inline$1.emStrong.rDelimAst = edit(inline$1.emStrong.rDelimAst, 'g').replace(/punct/g, inline$1._punctuation).getRegex();
        inline$1.emStrong.rDelimUnd = edit(inline$1.emStrong.rDelimUnd, 'g').replace(/punct/g, inline$1._punctuation).getRegex();
        inline$1._escapes = /\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/g;
        inline$1._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;
        inline$1._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;
        inline$1.autolink = edit(inline$1.autolink).replace('scheme', inline$1._scheme).replace('email', inline$1._email).getRegex();
        inline$1._attribute = /\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/;
        inline$1.tag = edit(inline$1.tag).replace('comment', inline$1._comment).replace('attribute', inline$1._attribute).getRegex();
        inline$1._label = /(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/;
        inline$1._href = /<(?:\\.|[^\n<>\\])+>|[^\s\x00-\x1f]*/;
        inline$1._title = /"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/;
        inline$1.link = edit(inline$1.link).replace('label', inline$1._label).replace('href', inline$1._href).replace('title', inline$1._title).getRegex();
        inline$1.reflink = edit(inline$1.reflink).replace('label', inline$1._label).getRegex();
        inline$1.reflinkSearch = edit(inline$1.reflinkSearch, 'g').replace('reflink', inline$1.reflink).replace('nolink', inline$1.nolink).getRegex();
        /**
   * Normal Inline Grammar
   */ inline$1.normal = merge$1({}, inline$1);
        /**
   * Pedantic Inline Grammar
   */ inline$1.pedantic = merge$1({}, inline$1.normal, {
            strong: {
                start: /^__|\*\*/,
                middle: /^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,
                endAst: /\*\*(?!\*)/g,
                endUnd: /__(?!_)/g
            },
            em: {
                start: /^_|\*/,
                middle: /^()\*(?=\S)([\s\S]*?\S)\*(?!\*)|^_(?=\S)([\s\S]*?\S)_(?!_)/,
                endAst: /\*(?!\*)/g,
                endUnd: /_(?!_)/g
            },
            link: edit(/^!?\[(label)\]\((.*?)\)/).replace('label', inline$1._label).getRegex(),
            reflink: edit(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace('label', inline$1._label).getRegex()
        });
        /**
   * GFM Inline Grammar
   */ inline$1.gfm = merge$1({}, inline$1.normal, {
            escape: edit(inline$1.escape).replace('])', '~|])').getRegex(),
            _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,
            url: /^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,
            _backpedal: /(?:[^?!.,:;*_~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,
            del: /^(~~?)(?=[^\s~])([\s\S]*?[^\s~])\1(?=[^~]|$)/,
            text: /^([`~]+|[^`~])(?:(?= {2,}\n)|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)))/
        });
        inline$1.gfm.url = edit(inline$1.gfm.url, 'i').replace('email', inline$1.gfm._extended_email).getRegex();
        /**
   * GFM + Line Breaks Inline Grammar
   */ inline$1.breaks = merge$1({}, inline$1.gfm, {
            br: edit(inline$1.br).replace('{2,}', '*').getRegex(),
            text: edit(inline$1.gfm.text).replace('\\b_', '\\b_| {2,}\\n').replace(/\{2,\}/g, '*').getRegex()
        });
        var rules1 = {
            block: block$1,
            inline: inline$1
        };
        var Tokenizer$1 = Tokenizer_1;
        var defaults$3 = defaults$5.exports.defaults;
        var block = rules1.block, inline = rules1.inline;
        var repeatString = helpers.repeatString;
        /**
   * smartypants text replacement
   */ function smartypants1(text) {
            return text // em-dashes
            .replace(/---/g, "\u2014") // en-dashes
            .replace(/--/g, "\u2013") // opening singles
            .replace(/(^|[-\u2014/(\[{"\s])'/g, "$1\u2018") // closing singles & apostrophes
            .replace(/'/g, "\u2019") // opening doubles
            .replace(/(^|[-\u2014/(\[{\u2018\s])"/g, "$1\u201C") // closing doubles
            .replace(/"/g, "\u201D") // ellipses
            .replace(/\.{3}/g, "\u2026");
        }
        /**
   * mangle email addresses
   */ function mangle1(text) {
            var out = '', i, ch;
            var l = text.length;
            for(i = 0; i < l; i++){
                ch = text.charCodeAt(i);
                if (Math.random() > 0.5) ch = 'x' + ch.toString(16);
                out += '&#' + ch + ';';
            }
            return out;
        }
        /**
   * Block Lexer
   */ var Lexer_1 = /*#__PURE__*/ function() {
            function Lexer2(options) {
                this.tokens = [];
                this.tokens.links = Object.create(null);
                this.options = options || defaults$3;
                this.options.tokenizer = this.options.tokenizer || new Tokenizer$1();
                this.tokenizer = this.options.tokenizer;
                this.tokenizer.options = this.options;
                this.tokenizer.lexer = this;
                this.inlineQueue = [];
                this.state = {
                    inLink: false,
                    inRawBlock: false,
                    top: true
                };
                var rules = {
                    block: block.normal,
                    inline: inline.normal
                };
                if (this.options.pedantic) {
                    rules.block = block.pedantic;
                    rules.inline = inline.pedantic;
                } else if (this.options.gfm) {
                    rules.block = block.gfm;
                    if (this.options.breaks) rules.inline = inline.breaks;
                    else rules.inline = inline.gfm;
                }
                this.tokenizer.rules = rules;
            }
            /**
     * Expose Rules
     */ /**
     * Static Lex Method
     */ Lexer2.lex = function lex(src, options) {
                var lexer2 = new Lexer2(options);
                return lexer2.lex(src);
            } /**
     * Static Lex Inline Method
     */ ;
            Lexer2.lexInline = function lexInline(src, options) {
                var lexer3 = new Lexer2(options);
                return lexer3.inlineTokens(src);
            } /**
     * Preprocessing
     */ ;
            var _proto = Lexer2.prototype;
            _proto.lex = function lex(src) {
                src = src.replace(/\r\n|\r/g, '\n').replace(/\t/g, '    ');
                this.blockTokens(src, this.tokens);
                var next;
                while(next = this.inlineQueue.shift())this.inlineTokens(next.src, next.tokens);
                return this.tokens;
            } /**
     * Lexing
     */ ;
            _proto.blockTokens = function blockTokens(src, tokens) {
                var _this = this;
                if (tokens === void 0) tokens = [];
                if (this.options.pedantic) src = src.replace(/^ +$/gm, '');
                var token, lastToken, cutSrc, lastParagraphClipped;
                while(src){
                    if (this.options.extensions && this.options.extensions.block && this.options.extensions.block.some(function(extTokenizer) {
                        if (token = extTokenizer.call({
                            lexer: _this
                        }, src, tokens)) {
                            src = src.substring(token.raw.length);
                            tokens.push(token);
                            return true;
                        }
                        return false;
                    })) continue;
                     // newline
                    if (token = this.tokenizer.space(src)) {
                        src = src.substring(token.raw.length);
                        if (token.type) tokens.push(token);
                        continue;
                    } // code
                    if (token = this.tokenizer.code(src)) {
                        src = src.substring(token.raw.length);
                        lastToken = tokens[tokens.length - 1]; // An indented code block cannot interrupt a paragraph.
                        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {
                            lastToken.raw += '\n' + token.raw;
                            lastToken.text += '\n' + token.text;
                            this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
                        } else tokens.push(token);
                        continue;
                    } // fences
                    if (token = this.tokenizer.fences(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    } // heading
                    if (token = this.tokenizer.heading(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    } // hr
                    if (token = this.tokenizer.hr(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    } // blockquote
                    if (token = this.tokenizer.blockquote(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    } // list
                    if (token = this.tokenizer.list(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    } // html
                    if (token = this.tokenizer.html(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    } // def
                    if (token = this.tokenizer.def(src)) {
                        src = src.substring(token.raw.length);
                        lastToken = tokens[tokens.length - 1];
                        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {
                            lastToken.raw += '\n' + token.raw;
                            lastToken.text += '\n' + token.raw;
                            this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
                        } else if (!this.tokens.links[token.tag]) this.tokens.links[token.tag] = {
                            href: token.href,
                            title: token.title
                        };
                        continue;
                    } // table (gfm)
                    if (token = this.tokenizer.table(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    } // lheading
                    if (token = this.tokenizer.lheading(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    } // top-level paragraph
                    // prevent paragraph consuming extensions by clipping 'src' to extension start
                    cutSrc = src;
                    if (this.options.extensions && this.options.extensions.startBlock) (function() {
                        var startIndex = Infinity;
                        var tempSrc = src.slice(1);
                        var tempStart = void 0;
                        _this.options.extensions.startBlock.forEach(function(getStartIndex) {
                            tempStart = getStartIndex.call({
                                lexer: this
                            }, tempSrc);
                            if (typeof tempStart === 'number' && tempStart >= 0) startIndex = Math.min(startIndex, tempStart);
                        });
                        if (startIndex < Infinity && startIndex >= 0) cutSrc = src.substring(0, startIndex + 1);
                    })();
                    if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {
                        lastToken = tokens[tokens.length - 1];
                        if (lastParagraphClipped && lastToken.type === 'paragraph') {
                            lastToken.raw += '\n' + token.raw;
                            lastToken.text += '\n' + token.text;
                            this.inlineQueue.pop();
                            this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
                        } else tokens.push(token);
                        lastParagraphClipped = cutSrc.length !== src.length;
                        src = src.substring(token.raw.length);
                        continue;
                    } // text
                    if (token = this.tokenizer.text(src)) {
                        src = src.substring(token.raw.length);
                        lastToken = tokens[tokens.length - 1];
                        if (lastToken && lastToken.type === 'text') {
                            lastToken.raw += '\n' + token.raw;
                            lastToken.text += '\n' + token.text;
                            this.inlineQueue.pop();
                            this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
                        } else tokens.push(token);
                        continue;
                    }
                    if (src) {
                        var errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);
                        if (this.options.silent) {
                            console.error(errMsg);
                            break;
                        } else throw new Error(errMsg);
                    }
                }
                this.state.top = true;
                return tokens;
            };
            _proto.inline = function inline(src, tokens) {
                this.inlineQueue.push({
                    src: src,
                    tokens: tokens
                });
            } /**
     * Lexing/Compiling
     */ ;
            _proto.inlineTokens = function inlineTokens(src, tokens) {
                var _this2 = this;
                if (tokens === void 0) tokens = [];
                var token, lastToken, cutSrc; // String with links masked to avoid interference with em and strong
                var maskedSrc = src;
                var match;
                var keepPrevChar, prevChar; // Mask out reflinks
                if (this.tokens.links) {
                    var links = Object.keys(this.tokens.links);
                    if (links.length > 0) {
                        while((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null)if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);
                    }
                } // Mask out other blocks
                while((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null)maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);
                 // Mask out escaped em & strong delimiters
                while((match = this.tokenizer.rules.inline.escapedEmSt.exec(maskedSrc)) != null)maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);
                while(src){
                    if (!keepPrevChar) prevChar = '';
                    keepPrevChar = false; // extensions
                    if (this.options.extensions && this.options.extensions.inline && this.options.extensions.inline.some(function(extTokenizer) {
                        if (token = extTokenizer.call({
                            lexer: _this2
                        }, src, tokens)) {
                            src = src.substring(token.raw.length);
                            tokens.push(token);
                            return true;
                        }
                        return false;
                    })) continue;
                     // escape
                    if (token = this.tokenizer.escape(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    } // tag
                    if (token = this.tokenizer.tag(src)) {
                        src = src.substring(token.raw.length);
                        lastToken = tokens[tokens.length - 1];
                        if (lastToken && token.type === 'text' && lastToken.type === 'text') {
                            lastToken.raw += token.raw;
                            lastToken.text += token.text;
                        } else tokens.push(token);
                        continue;
                    } // link
                    if (token = this.tokenizer.link(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    } // reflink, nolink
                    if (token = this.tokenizer.reflink(src, this.tokens.links)) {
                        src = src.substring(token.raw.length);
                        lastToken = tokens[tokens.length - 1];
                        if (lastToken && token.type === 'text' && lastToken.type === 'text') {
                            lastToken.raw += token.raw;
                            lastToken.text += token.text;
                        } else tokens.push(token);
                        continue;
                    } // em & strong
                    if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    } // code
                    if (token = this.tokenizer.codespan(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    } // br
                    if (token = this.tokenizer.br(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    } // del (gfm)
                    if (token = this.tokenizer.del(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    } // autolink
                    if (token = this.tokenizer.autolink(src, mangle1)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    } // url (gfm)
                    if (!this.state.inLink && (token = this.tokenizer.url(src, mangle1))) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    } // text
                    // prevent inlineText consuming extensions by clipping 'src' to extension start
                    cutSrc = src;
                    if (this.options.extensions && this.options.extensions.startInline) (function() {
                        var startIndex = Infinity;
                        var tempSrc = src.slice(1);
                        var tempStart = void 0;
                        _this2.options.extensions.startInline.forEach(function(getStartIndex) {
                            tempStart = getStartIndex.call({
                                lexer: this
                            }, tempSrc);
                            if (typeof tempStart === 'number' && tempStart >= 0) startIndex = Math.min(startIndex, tempStart);
                        });
                        if (startIndex < Infinity && startIndex >= 0) cutSrc = src.substring(0, startIndex + 1);
                    })();
                    if (token = this.tokenizer.inlineText(cutSrc, smartypants1)) {
                        src = src.substring(token.raw.length);
                        if (token.raw.slice(-1) !== '_') // Track prevChar before string of ____ started
                        prevChar = token.raw.slice(-1);
                        keepPrevChar = true;
                        lastToken = tokens[tokens.length - 1];
                        if (lastToken && lastToken.type === 'text') {
                            lastToken.raw += token.raw;
                            lastToken.text += token.text;
                        } else tokens.push(token);
                        continue;
                    }
                    if (src) {
                        var errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);
                        if (this.options.silent) {
                            console.error(errMsg);
                            break;
                        } else throw new Error(errMsg);
                    }
                }
                return tokens;
            };
            _createClass(Lexer2, null, [
                {
                    key: "rules",
                    get: function get() {
                        return {
                            block: block,
                            inline: inline
                        };
                    }
                }
            ]);
            return Lexer2;
        }();
        var defaults$2 = defaults$5.exports.defaults;
        var cleanUrl = helpers.cleanUrl, escape$1 = helpers.escape;
        /**
   * Renderer
   */ var Renderer_1 = /*#__PURE__*/ function() {
            function Renderer2(options) {
                this.options = options || defaults$2;
            }
            var _proto = Renderer2.prototype;
            _proto.code = function code(_code, infostring, escaped) {
                var lang = (infostring || '').match(/\S*/)[0];
                if (this.options.highlight) {
                    var out = this.options.highlight(_code, lang);
                    if (out != null && out !== _code) {
                        escaped = true;
                        _code = out;
                    }
                }
                _code = _code.replace(/\n$/, '') + '\n';
                if (!lang) return '<pre><code>' + (escaped ? _code : escape$1(_code, true)) + '</code></pre>\n';
                return '<pre><code class="' + this.options.langPrefix + escape$1(lang, true) + '">' + (escaped ? _code : escape$1(_code, true)) + '</code></pre>\n';
            };
            _proto.blockquote = function blockquote(quote) {
                return '<blockquote>\n' + quote + '</blockquote>\n';
            };
            _proto.html = function html(_html) {
                return _html;
            };
            _proto.heading = function heading(text, level, raw, slugger) {
                if (this.options.headerIds) return '<h' + level + ' id="' + this.options.headerPrefix + slugger.slug(raw) + '">' + text + '</h' + level + '>\n';
                 // ignore IDs
                return '<h' + level + '>' + text + '</h' + level + '>\n';
            };
            _proto.hr = function hr() {
                return this.options.xhtml ? '<hr/>\n' : '<hr>\n';
            };
            _proto.list = function list(body, ordered, start) {
                var type = ordered ? 'ol' : 'ul', startatt = ordered && start !== 1 ? ' start="' + start + '"' : '';
                return '<' + type + startatt + '>\n' + body + '</' + type + '>\n';
            };
            _proto.listitem = function listitem(text) {
                return '<li>' + text + '</li>\n';
            };
            _proto.checkbox = function checkbox(checked) {
                return '<input ' + (checked ? 'checked="" ' : '') + 'disabled="" type="checkbox"' + (this.options.xhtml ? ' /' : '') + '> ';
            };
            _proto.paragraph = function paragraph(text) {
                return '<p>' + text + '</p>\n';
            };
            _proto.table = function table(header, body) {
                if (body) body = '<tbody>' + body + '</tbody>';
                return "<table>\n<thead>\n" + header + '</thead>\n' + body + '</table>\n';
            };
            _proto.tablerow = function tablerow(content) {
                return '<tr>\n' + content + '</tr>\n';
            };
            _proto.tablecell = function tablecell(content, flags) {
                var type = flags.header ? 'th' : 'td';
                var tag = flags.align ? '<' + type + ' align="' + flags.align + '">' : '<' + type + '>';
                return tag + content + '</' + type + '>\n';
            } // span level renderer
            ;
            _proto.strong = function strong(text) {
                return '<strong>' + text + '</strong>';
            };
            _proto.em = function em(text) {
                return '<em>' + text + '</em>';
            };
            _proto.codespan = function codespan(text) {
                return '<code>' + text + '</code>';
            };
            _proto.br = function br() {
                return this.options.xhtml ? '<br/>' : '<br>';
            };
            _proto.del = function del(text) {
                return '<del>' + text + '</del>';
            };
            _proto.link = function link(href, title, text) {
                href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);
                if (href === null) return text;
                var out = '<a href="' + escape$1(href) + '"';
                if (title) out += ' title="' + title + '"';
                out += '>' + text + '</a>';
                return out;
            };
            _proto.image = function image(href, title, text) {
                href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);
                if (href === null) return text;
                var out = '<img src="' + href + '" alt="' + text + '"';
                if (title) out += ' title="' + title + '"';
                out += this.options.xhtml ? '/>' : '>';
                return out;
            };
            _proto.text = function text(_text) {
                return _text;
            };
            return Renderer2;
        }();
        /**
   * TextRenderer
   * returns only the textual part of the token
   */ var TextRenderer_1 = /*#__PURE__*/ function() {
            function TextRenderer2() {}
            var _proto = TextRenderer2.prototype;
            // no need for block level renderers
            _proto.strong = function strong(text) {
                return text;
            };
            _proto.em = function em(text) {
                return text;
            };
            _proto.codespan = function codespan(text) {
                return text;
            };
            _proto.del = function del(text) {
                return text;
            };
            _proto.html = function html(text) {
                return text;
            };
            _proto.text = function text(_text) {
                return _text;
            };
            _proto.link = function link(href, title, text) {
                return '' + text;
            };
            _proto.image = function image(href, title, text) {
                return '' + text;
            };
            _proto.br = function br() {
                return '';
            };
            return TextRenderer2;
        }();
        /**
   * Slugger generates header id
   */ var Slugger_1 = /*#__PURE__*/ function() {
            function Slugger2() {
                this.seen = {};
            }
            var _proto = Slugger2.prototype;
            _proto.serialize = function serialize(value) {
                return value.toLowerCase().trim() // remove html tags
                .replace(/<[!\/a-z].*?>/ig, '') // remove unwanted chars
                .replace(/[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,./:;<=>?@[\]^`{|}~]/g, '').replace(/\s/g, '-');
            } /**
     * Finds the next safe (unique) slug to use
     */ ;
            _proto.getNextSafeSlug = function getNextSafeSlug(originalSlug, isDryRun) {
                var slug = originalSlug;
                var occurenceAccumulator = 0;
                if (this.seen.hasOwnProperty(slug)) {
                    occurenceAccumulator = this.seen[originalSlug];
                    do {
                        occurenceAccumulator++;
                        slug = originalSlug + '-' + occurenceAccumulator;
                    }while (this.seen.hasOwnProperty(slug))
                }
                if (!isDryRun) {
                    this.seen[originalSlug] = occurenceAccumulator;
                    this.seen[slug] = 0;
                }
                return slug;
            } /**
     * Convert string to unique id
     * @param {object} options
     * @param {boolean} options.dryrun Generates the next unique slug without updating the internal accumulator.
     */ ;
            _proto.slug = function slug(value, options) {
                if (options === void 0) options = {};
                var slug = this.serialize(value);
                return this.getNextSafeSlug(slug, options.dryrun);
            };
            return Slugger2;
        }();
        var Renderer$1 = Renderer_1;
        var TextRenderer$1 = TextRenderer_1;
        var Slugger$1 = Slugger_1;
        var defaults$1 = defaults$5.exports.defaults;
        var unescape = helpers.unescape;
        /**
   * Parsing & Compiling
   */ var Parser_1 = /*#__PURE__*/ function() {
            function Parser2(options) {
                this.options = options || defaults$1;
                this.options.renderer = this.options.renderer || new Renderer$1();
                this.renderer = this.options.renderer;
                this.renderer.options = this.options;
                this.textRenderer = new TextRenderer$1();
                this.slugger = new Slugger$1();
            }
            /**
     * Static Parse Method
     */ Parser2.parse = function parse(tokens, options) {
                var parser1 = new Parser2(options);
                return parser1.parse(tokens);
            } /**
     * Static Parse Inline Method
     */ ;
            Parser2.parseInline = function parseInline(tokens, options) {
                var parser2 = new Parser2(options);
                return parser2.parseInline(tokens);
            } /**
     * Parse Loop
     */ ;
            var _proto = Parser2.prototype;
            _proto.parse = function parse(tokens, top) {
                if (top === void 0) top = true;
                var out = '', i, j, k, l2, l3, row, cell, header, body, token, ordered, start, loose, itemBody, item, checked, task, checkbox, ret;
                var l = tokens.length;
                for(i = 0; i < l; i++){
                    token = tokens[i]; // Run any renderer extensions
                    if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {
                        ret = this.options.extensions.renderers[token.type].call({
                            parser: this
                        }, token);
                        if (ret !== false || ![
                            'space',
                            'hr',
                            'heading',
                            'code',
                            'table',
                            'blockquote',
                            'list',
                            'html',
                            'paragraph',
                            'text'
                        ].includes(token.type)) {
                            out += ret || '';
                            continue;
                        }
                    }
                    switch(token.type){
                        case 'space':
                            continue;
                        case 'hr':
                            out += this.renderer.hr();
                            continue;
                        case 'heading':
                            out += this.renderer.heading(this.parseInline(token.tokens), token.depth, unescape(this.parseInline(token.tokens, this.textRenderer)), this.slugger);
                            continue;
                        case 'code':
                            out += this.renderer.code(token.text, token.lang, token.escaped);
                            continue;
                        case 'table':
                            header = ''; // header
                            cell = '';
                            l2 = token.header.length;
                            for(j = 0; j < l2; j++)cell += this.renderer.tablecell(this.parseInline(token.header[j].tokens), {
                                header: true,
                                align: token.align[j]
                            });
                            header += this.renderer.tablerow(cell);
                            body = '';
                            l2 = token.rows.length;
                            for(j = 0; j < l2; j++){
                                row = token.rows[j];
                                cell = '';
                                l3 = row.length;
                                for(k = 0; k < l3; k++)cell += this.renderer.tablecell(this.parseInline(row[k].tokens), {
                                    header: false,
                                    align: token.align[k]
                                });
                                body += this.renderer.tablerow(cell);
                            }
                            out += this.renderer.table(header, body);
                            continue;
                        case 'blockquote':
                            body = this.parse(token.tokens);
                            out += this.renderer.blockquote(body);
                            continue;
                        case 'list':
                            ordered = token.ordered;
                            start = token.start;
                            loose = token.loose;
                            l2 = token.items.length;
                            body = '';
                            for(j = 0; j < l2; j++){
                                item = token.items[j];
                                checked = item.checked;
                                task = item.task;
                                itemBody = '';
                                if (item.task) {
                                    checkbox = this.renderer.checkbox(checked);
                                    if (loose) {
                                        if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {
                                            item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;
                                            if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;
                                        } else item.tokens.unshift({
                                            type: 'text',
                                            text: checkbox
                                        });
                                    } else itemBody += checkbox;
                                }
                                itemBody += this.parse(item.tokens, loose);
                                body += this.renderer.listitem(itemBody, task, checked);
                            }
                            out += this.renderer.list(body, ordered, start);
                            continue;
                        case 'html':
                            // TODO parse inline content if parameter markdown=1
                            out += this.renderer.html(token.text);
                            continue;
                        case 'paragraph':
                            out += this.renderer.paragraph(this.parseInline(token.tokens));
                            continue;
                        case 'text':
                            body = token.tokens ? this.parseInline(token.tokens) : token.text;
                            while(i + 1 < l && tokens[i + 1].type === 'text'){
                                token = tokens[++i];
                                body += '\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);
                            }
                            out += top ? this.renderer.paragraph(body) : body;
                            continue;
                        default:
                            var errMsg = 'Token with "' + token.type + '" type was not found.';
                            if (this.options.silent) {
                                console.error(errMsg);
                                return;
                            } else throw new Error(errMsg);
                    }
                }
                return out;
            } /**
     * Parse Inline Tokens
     */ ;
            _proto.parseInline = function parseInline(tokens, renderer) {
                renderer = renderer || this.renderer;
                var out = '', i, token, ret;
                var l = tokens.length;
                for(i = 0; i < l; i++){
                    token = tokens[i]; // Run any renderer extensions
                    if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {
                        ret = this.options.extensions.renderers[token.type].call({
                            parser: this
                        }, token);
                        if (ret !== false || ![
                            'escape',
                            'html',
                            'link',
                            'image',
                            'strong',
                            'em',
                            'codespan',
                            'br',
                            'del',
                            'text'
                        ].includes(token.type)) {
                            out += ret || '';
                            continue;
                        }
                    }
                    switch(token.type){
                        case 'escape':
                            out += renderer.text(token.text);
                            break;
                        case 'html':
                            out += renderer.html(token.text);
                            break;
                        case 'link':
                            out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));
                            break;
                        case 'image':
                            out += renderer.image(token.href, token.title, token.text);
                            break;
                        case 'strong':
                            out += renderer.strong(this.parseInline(token.tokens, renderer));
                            break;
                        case 'em':
                            out += renderer.em(this.parseInline(token.tokens, renderer));
                            break;
                        case 'codespan':
                            out += renderer.codespan(token.text);
                            break;
                        case 'br':
                            out += renderer.br();
                            break;
                        case 'del':
                            out += renderer.del(this.parseInline(token.tokens, renderer));
                            break;
                        case 'text':
                            out += renderer.text(token.text);
                            break;
                        default:
                            var errMsg = 'Token with "' + token.type + '" type was not found.';
                            if (this.options.silent) {
                                console.error(errMsg);
                                return;
                            } else throw new Error(errMsg);
                    }
                }
                return out;
            };
            return Parser2;
        }();
        var Lexer1 = Lexer_1;
        var Parser1 = Parser_1;
        var Tokenizer1 = Tokenizer_1;
        var Renderer1 = Renderer_1;
        var TextRenderer1 = TextRenderer_1;
        var Slugger1 = Slugger_1;
        var merge = helpers.merge, checkSanitizeDeprecation = helpers.checkSanitizeDeprecation, escape = helpers.escape;
        var getDefaults = defaults$5.exports.getDefaults, changeDefaults = defaults$5.exports.changeDefaults, defaults = defaults$5.exports.defaults;
        /**
   * Marked
   */ function marked1(src, opt, callback) {
            // throw error in case of non string input
            if (typeof src === 'undefined' || src === null) throw new Error('marked(): input parameter is undefined or null');
            if (typeof src !== 'string') throw new Error('marked(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected');
            if (typeof opt === 'function') {
                callback = opt;
                opt = null;
            }
            opt = merge({}, marked1.defaults, opt || {});
            checkSanitizeDeprecation(opt);
            if (callback) {
                var highlight = opt.highlight;
                var tokens;
                try {
                    tokens = Lexer1.lex(src, opt);
                } catch (e1) {
                    return callback(e1);
                }
                var done = function done(err) {
                    var out;
                    if (!err) try {
                        if (opt.walkTokens) marked1.walkTokens(tokens, opt.walkTokens);
                        out = Parser1.parse(tokens, opt);
                    } catch (e) {
                        err = e;
                    }
                    opt.highlight = highlight;
                    return err ? callback(err) : callback(null, out);
                };
                if (!highlight || highlight.length < 3) return done();
                delete opt.highlight;
                if (!tokens.length) return done();
                var pending = 0;
                marked1.walkTokens(tokens, function(token) {
                    if (token.type === 'code') {
                        pending++;
                        setTimeout(function() {
                            highlight(token.text, token.lang, function(err, code) {
                                if (err) return done(err);
                                if (code != null && code !== token.text) {
                                    token.text = code;
                                    token.escaped = true;
                                }
                                pending--;
                                if (pending === 0) done();
                            });
                        }, 0);
                    }
                });
                if (pending === 0) done();
                return;
            }
            try {
                var _tokens = Lexer1.lex(src, opt);
                if (opt.walkTokens) marked1.walkTokens(_tokens, opt.walkTokens);
                return Parser1.parse(_tokens, opt);
            } catch (e) {
                e.message += '\nPlease report this to https://github.com/markedjs/marked.';
                if (opt.silent) return '<p>An error occurred:</p><pre>' + escape(e.message + '', true) + '</pre>';
                throw e;
            }
        }
        /**
   * Options
   */ marked1.options = marked1.setOptions = function(opt) {
            merge(marked1.defaults, opt);
            changeDefaults(marked1.defaults);
            return marked1;
        };
        marked1.getDefaults = getDefaults;
        marked1.defaults = defaults;
        /**
   * Use Extension
   */ marked1.use = function() {
            var _this = this;
            for(var _len = arguments.length, args1 = new Array(_len), _key = 0; _key < _len; _key++)args1[_key] = arguments[_key];
            var opts = merge.apply(void 0, [
                {}
            ].concat(args1));
            var extensions = marked1.defaults.extensions || {
                renderers: {},
                childTokens: {}
            };
            var hasExtensions;
            args1.forEach(function(pack) {
                // ==-- Parse "addon" extensions --== //
                if (pack.extensions) {
                    hasExtensions = true;
                    pack.extensions.forEach(function(ext) {
                        if (!ext.name) throw new Error('extension name required');
                        if (ext.renderer) {
                            // Renderer extensions
                            var prevRenderer = extensions.renderers ? extensions.renderers[ext.name] : null;
                            if (prevRenderer) // Replace extension with func to run new extension but fall back if false
                            extensions.renderers[ext.name] = function() {
                                for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++)args[_key2] = arguments[_key2];
                                var ret = ext.renderer.apply(this, args);
                                if (ret === false) ret = prevRenderer.apply(this, args);
                                return ret;
                            };
                            else extensions.renderers[ext.name] = ext.renderer;
                        }
                        if (ext.tokenizer) {
                            // Tokenizer Extensions
                            if (!ext.level || ext.level !== 'block' && ext.level !== 'inline') throw new Error("extension level must be 'block' or 'inline'");
                            if (extensions[ext.level]) extensions[ext.level].unshift(ext.tokenizer);
                            else extensions[ext.level] = [
                                ext.tokenizer
                            ];
                            if (ext.start) {
                                // Function to check for start of token
                                if (ext.level === 'block') {
                                    if (extensions.startBlock) extensions.startBlock.push(ext.start);
                                    else extensions.startBlock = [
                                        ext.start
                                    ];
                                } else if (ext.level === 'inline') {
                                    if (extensions.startInline) extensions.startInline.push(ext.start);
                                    else extensions.startInline = [
                                        ext.start
                                    ];
                                }
                            }
                        }
                        if (ext.childTokens) // Child tokens to be visited by walkTokens
                        extensions.childTokens[ext.name] = ext.childTokens;
                    });
                } // ==-- Parse "overwrite" extensions --== //
                if (pack.renderer) (function() {
                    var renderer = marked1.defaults.renderer || new Renderer1();
                    var _loop = function _loop(prop) {
                        var prevRenderer = renderer[prop]; // Replace renderer with func to run extension, but fall back if false
                        renderer[prop] = function() {
                            for(var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++)args[_key3] = arguments[_key3];
                            var ret = pack.renderer[prop].apply(renderer, args);
                            if (ret === false) ret = prevRenderer.apply(renderer, args);
                            return ret;
                        };
                    };
                    for(var prop1 in pack.renderer)_loop(prop1);
                    opts.renderer = renderer;
                })();
                if (pack.tokenizer) (function() {
                    var tokenizer = marked1.defaults.tokenizer || new Tokenizer1();
                    var _loop2 = function _loop2(prop) {
                        var prevTokenizer = tokenizer[prop]; // Replace tokenizer with func to run extension, but fall back if false
                        tokenizer[prop] = function() {
                            for(var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++)args[_key4] = arguments[_key4];
                            var ret = pack.tokenizer[prop].apply(tokenizer, args);
                            if (ret === false) ret = prevTokenizer.apply(tokenizer, args);
                            return ret;
                        };
                    };
                    for(var prop2 in pack.tokenizer)_loop2(prop2);
                    opts.tokenizer = tokenizer;
                })();
                 // ==-- Parse WalkTokens extensions --== //
                if (pack.walkTokens) {
                    var walkTokens = marked1.defaults.walkTokens;
                    opts.walkTokens = function(token) {
                        pack.walkTokens.call(_this, token);
                        if (walkTokens) walkTokens(token);
                    };
                }
                if (hasExtensions) opts.extensions = extensions;
                marked1.setOptions(opts);
            });
        };
        /**
   * Run callback for every token
   */ marked1.walkTokens = function(tokens, callback) {
            var _loop3 = function _loop3() {
                var token = _step.value;
                callback(token);
                switch(token.type){
                    case 'table':
                        for(var _iterator2 = _createForOfIteratorHelperLoose(token.header), _step2; !(_step2 = _iterator2()).done;){
                            var cell = _step2.value;
                            marked1.walkTokens(cell.tokens, callback);
                        }
                        for(var _iterator3 = _createForOfIteratorHelperLoose(token.rows), _step3; !(_step3 = _iterator3()).done;){
                            var row = _step3.value;
                            for(var _iterator4 = _createForOfIteratorHelperLoose(row), _step4; !(_step4 = _iterator4()).done;){
                                var _cell = _step4.value;
                                marked1.walkTokens(_cell.tokens, callback);
                            }
                        }
                        break;
                    case 'list':
                        marked1.walkTokens(token.items, callback);
                        break;
                    default:
                        if (marked1.defaults.extensions && marked1.defaults.extensions.childTokens && marked1.defaults.extensions.childTokens[token.type]) // Walk any extensions
                        marked1.defaults.extensions.childTokens[token.type].forEach(function(childTokens) {
                            marked1.walkTokens(token[childTokens], callback);
                        });
                        else if (token.tokens) marked1.walkTokens(token.tokens, callback);
                }
            };
            for(var _iterator = _createForOfIteratorHelperLoose(tokens), _step; !(_step = _iterator()).done;)_loop3();
        };
        /**
   * Parse Inline
   */ marked1.parseInline = function(src, opt) {
            // throw error in case of non string input
            if (typeof src === 'undefined' || src === null) throw new Error('marked.parseInline(): input parameter is undefined or null');
            if (typeof src !== 'string') throw new Error('marked.parseInline(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected');
            opt = merge({}, marked1.defaults, opt || {});
            checkSanitizeDeprecation(opt);
            try {
                var tokens = Lexer1.lexInline(src, opt);
                if (opt.walkTokens) marked1.walkTokens(tokens, opt.walkTokens);
                return Parser1.parseInline(tokens, opt);
            } catch (e) {
                e.message += '\nPlease report this to https://github.com/markedjs/marked.';
                if (opt.silent) return '<p>An error occurred:</p><pre>' + escape(e.message + '', true) + '</pre>';
                throw e;
            }
        };
        /**
   * Expose
   */ marked1.Parser = Parser1;
        marked1.parser = Parser1.parse;
        marked1.Renderer = Renderer1;
        marked1.TextRenderer = TextRenderer1;
        marked1.Lexer = Lexer1;
        marked1.lexer = Lexer1.lex;
        marked1.Tokenizer = Tokenizer1;
        marked1.Slugger = Slugger1;
        marked1.parse = marked1;
        var marked_1 = marked1;
        return marked_1;
    });
// ESM-uncomment-begin
})();
var marked = __marked_exports || exports;
var Parser = (__marked_exports || exports).Parser;
var parser = (__marked_exports || exports).parser;
var Renderer = (__marked_exports || exports).Renderer;
var TextRenderer = (__marked_exports || exports).TextRenderer;
var Lexer = (__marked_exports || exports).Lexer;
var lexer = (__marked_exports || exports).lexer;
var Tokenizer = (__marked_exports || exports).Tokenizer;
var Slugger = (__marked_exports || exports).Slugger;
var parse = (__marked_exports || exports).parse; // ESM-uncomment-end

},{"@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"8yNMp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HoverProviderResult", function() {
    return HoverProviderResult;
});
parcelHelpers.export(exports, "getHover", function() {
    return getHover;
});
parcelHelpers.export(exports, "getHoverPromise", function() {
    return getHoverPromise;
});
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
var _asyncJs = require("../../../base/common/async.js");
var _cancellationJs = require("../../../base/common/cancellation.js");
var _errorsJs = require("../../../base/common/errors.js");
var _editorExtensionsJs = require("../../browser/editorExtensions.js");
var _modesJs = require("../../common/modes.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var HoverProviderResult = function HoverProviderResult(provider, hover, ordinal) {
    "use strict";
    _helpers.classCallCheck(this, HoverProviderResult);
    this.provider = provider;
    this.hover = hover;
    this.ordinal = ordinal;
};
function executeProvider(provider, ordinal, model, position, token) {
    return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
        var result;
        return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
            while(1)switch(_ctx.prev = _ctx.next){
                case 0:
                    _ctx.prev = 0;
                    _ctx.next = 3;
                    return Promise.resolve(provider.provideHover(model, position, token));
                case 3:
                    result = _ctx.sent;
                    if (!(result && isValid(result))) {
                        _ctx.next = 6;
                        break;
                    }
                    return _ctx.abrupt("return", new HoverProviderResult(provider, result, ordinal));
                case 6:
                    _ctx.next = 11;
                    break;
                case 8:
                    _ctx.prev = 8;
                    _ctx.t0 = _ctx["catch"](0);
                    _errorsJs.onUnexpectedExternalError(_ctx.t0);
                case 11:
                    return _ctx.abrupt("return", undefined);
                case 12:
                case "end":
                    return _ctx.stop();
            }
        }, _callee, null, [
            [
                0,
                8
            ]
        ]);
    }));
}
function getHover(model, position, token) {
    var providers = _modesJs.HoverProviderRegistry.ordered(model);
    var promises = providers.map(function(provider, index) {
        return executeProvider(provider, index, model, position, token);
    });
    return _asyncJs.AsyncIterableObject.fromPromises(promises).coalesce();
}
function getHoverPromise(model, position, token) {
    return getHover(model, position, token).map(function(item) {
        return item.hover;
    }).toPromise();
}
_editorExtensionsJs.registerModelAndPositionCommand('_executeHoverProvider', function(model, position) {
    return getHoverPromise(model, position, _cancellationJs.CancellationToken.None);
});
function isValid(result) {
    var hasRange = typeof result.range !== 'undefined';
    var hasHtmlContent = typeof result.contents !== 'undefined' && result.contents && result.contents.length > 0;
    return hasRange && hasHtmlContent;
}

},{"@swc/helpers":"erO4s","regenerator-runtime":"12Ae8","../../../base/common/async.js":"kMhSh","../../../base/common/cancellation.js":"1C4LY","../../../base/common/errors.js":"afm4i","../../browser/editorExtensions.js":"dFnlo","../../common/modes.js":"bRbY1","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"lJmC0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MarkerHover", function() {
    return MarkerHover;
});
parcelHelpers.export(exports, "MarkerHoverParticipant", function() {
    return MarkerHoverParticipant;
});
var _helpers = require("@swc/helpers");
var _domJs = require("../../../base/browser/dom.js");
var _arraysJs = require("../../../base/common/arrays.js");
var _asyncJs = require("../../../base/common/async.js");
var _errorsJs = require("../../../base/common/errors.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _resourcesJs = require("../../../base/common/resources.js");
var _rangeJs = require("../../common/core/range.js");
var _markersDecorationServiceJs = require("../../common/services/markersDecorationService.js");
var _codeActionJs = require("../codeAction/codeAction.js");
var _codeActionCommandsJs = require("../codeAction/codeActionCommands.js");
var _typesJs = require("../codeAction/types.js");
var _gotoErrorJs = require("../gotoError/gotoError.js");
var _nlsJs = require("../../../nls.js");
var _markersJs = require("../../../platform/markers/common/markers.js");
var _openerJs = require("../../../platform/opener/common/opener.js");
var _progressJs = require("../../../platform/progress/common/progress.js");
var _colorRegistryJs = require("../../../platform/theme/common/colorRegistry.js");
var _themeServiceJs = require("../../../platform/theme/common/themeService.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var $ = _domJs.$;
var MarkerHover = /*#__PURE__*/ function() {
    "use strict";
    function MarkerHover(owner, range, marker) {
        _helpers.classCallCheck(this, MarkerHover);
        this.owner = owner;
        this.range = range;
        this.marker = marker;
    }
    _helpers.createClass(MarkerHover, [
        {
            key: "isValidForHoverAnchor",
            value: function isValidForHoverAnchor(anchor) {
                return anchor.type === 1 /* Range */  && this.range.startColumn <= anchor.range.startColumn && this.range.endColumn >= anchor.range.endColumn;
            }
        }
    ]);
    return MarkerHover;
}();
var markerCodeActionTrigger = {
    type: 1 /* Invoke */ ,
    filter: {
        include: _typesJs.CodeActionKind.QuickFix
    }
};
var MarkerHoverParticipant = /*#__PURE__*/ function() {
    "use strict";
    function MarkerHoverParticipant1(_editor, _hover, _markerDecorationsService, _openerService) {
        _helpers.classCallCheck(this, MarkerHoverParticipant1);
        this._editor = _editor;
        this._hover = _hover;
        this._markerDecorationsService = _markerDecorationsService;
        this._openerService = _openerService;
        this.recentMarkerCodeActionsInfo = undefined;
    }
    _helpers.createClass(MarkerHoverParticipant1, [
        {
            key: "computeSync",
            value: function computeSync(anchor, lineDecorations) {
                if (!this._editor.hasModel() || anchor.type !== 1 /* Range */ ) return [];
                var model = this._editor.getModel();
                var lineNumber = anchor.range.startLineNumber;
                var maxColumn = model.getLineMaxColumn(lineNumber);
                var result = [];
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = lineDecorations[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var d = _step.value;
                        var startColumn = d.range.startLineNumber === lineNumber ? d.range.startColumn : 1;
                        var endColumn = d.range.endLineNumber === lineNumber ? d.range.endColumn : maxColumn;
                        var marker = this._markerDecorationsService.getMarker(model.uri, d);
                        if (!marker) continue;
                        var range = new _rangeJs.Range(anchor.range.startLineNumber, startColumn, anchor.range.startLineNumber, endColumn);
                        result.push(new MarkerHover(this, range, marker));
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return result;
            }
        },
        {
            key: "renderHoverParts",
            value: function renderHoverParts(hoverParts, fragment, statusBar) {
                var _this = this;
                if (!hoverParts.length) return _lifecycleJs.Disposable.None;
                var disposables = new _lifecycleJs.DisposableStore();
                hoverParts.forEach(function(msg) {
                    return fragment.appendChild(_this.renderMarkerHover(msg, disposables));
                });
                var markerHoverForStatusbar = hoverParts.length === 1 ? hoverParts[0] : hoverParts.sort(function(a, b) {
                    return _markersJs.MarkerSeverity.compare(a.marker.severity, b.marker.severity);
                })[0];
                this.renderMarkerStatusbar(markerHoverForStatusbar, statusBar, disposables);
                return disposables;
            }
        },
        {
            key: "renderMarkerHover",
            value: function renderMarkerHover(markerHover, disposables) {
                var hoverElement = $('div.hover-row');
                var markerElement = _domJs.append(hoverElement, $('div.marker.hover-contents'));
                var _marker = markerHover.marker, source = _marker.source, message1 = _marker.message, code = _marker.code, relatedInformation = _marker.relatedInformation;
                this._editor.applyFontInfo(markerElement);
                var messageElement1 = _domJs.append(markerElement, $('span'));
                messageElement1.style.whiteSpace = 'pre-wrap';
                messageElement1.innerText = message1;
                if (source || code) {
                    // Code has link
                    if (code && typeof code !== 'string') {
                        var _this = this;
                        var sourceAndCodeElement = $('span');
                        if (source) {
                            var sourceElement = _domJs.append(sourceAndCodeElement, $('span'));
                            sourceElement.innerText = source;
                        }
                        var codeLink = _domJs.append(sourceAndCodeElement, $('a.code-link'));
                        codeLink.setAttribute('href', code.target.toString());
                        disposables.add(_domJs.addDisposableListener(codeLink, 'click', function(e) {
                            _this._openerService.open(code.target, {
                                allowCommands: true
                            });
                            e.preventDefault();
                            e.stopPropagation();
                        }));
                        var codeElement = _domJs.append(codeLink, $('span'));
                        codeElement.innerText = code.value;
                        var detailsElement = _domJs.append(markerElement, sourceAndCodeElement);
                        detailsElement.style.opacity = '0.6';
                        detailsElement.style.paddingLeft = '6px';
                    } else {
                        var detailsElement1 = _domJs.append(markerElement, $('span'));
                        detailsElement1.style.opacity = '0.6';
                        detailsElement1.style.paddingLeft = '6px';
                        detailsElement1.innerText = source && code ? "".concat(source, "(").concat(code, ")") : source ? source : "(".concat(code, ")");
                    }
                }
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                if (_arraysJs.isNonEmptyArray(relatedInformation)) try {
                    var _this1 = this, _loop = function(_iterator, _step) {
                        var _value = _step.value, message = _value.message, resource = _value.resource, startLineNumber = _value.startLineNumber, startColumn = _value.startColumn;
                        var _this = _this1;
                        var relatedInfoContainer = _domJs.append(markerElement, $('div'));
                        relatedInfoContainer.style.marginTop = '8px';
                        var a = _domJs.append(relatedInfoContainer, $('a'));
                        a.innerText = "".concat(_resourcesJs.basename(resource), "(").concat(startLineNumber, ", ").concat(startColumn, "): ");
                        a.style.cursor = 'pointer';
                        disposables.add(_domJs.addDisposableListener(a, 'click', function(e) {
                            e.stopPropagation();
                            e.preventDefault();
                            if (_this._openerService) _this._openerService.open(resource, {
                                fromUserGesture: true,
                                editorOptions: {
                                    selection: {
                                        startLineNumber: startLineNumber,
                                        startColumn: startColumn
                                    }
                                }
                            }).catch(_errorsJs.onUnexpectedError);
                        }));
                        var messageElement = _domJs.append(relatedInfoContainer, $('span'));
                        messageElement.innerText = message;
                        _this1._editor.applyFontInfo(messageElement);
                    };
                    for(var _iterator = relatedInformation[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop(_iterator, _step);
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return hoverElement;
            }
        },
        {
            key: "renderMarkerStatusbar",
            value: function renderMarkerStatusbar(markerHover, statusBar, disposables) {
                var _this3 = this;
                if (markerHover.marker.severity === _markersJs.MarkerSeverity.Error || markerHover.marker.severity === _markersJs.MarkerSeverity.Warning || markerHover.marker.severity === _markersJs.MarkerSeverity.Info) statusBar.addAction({
                    label: _nlsJs.localize('view problem', "View Problem"),
                    commandId: _gotoErrorJs.NextMarkerAction.ID,
                    run: function() {
                        _this3._hover.hide();
                        _gotoErrorJs.MarkerController.get(_this3._editor).showAtMarker(markerHover.marker);
                        _this3._editor.focus();
                    }
                });
                if (!this._editor.getOption(80 /* readOnly */ )) {
                    var _this2 = this;
                    var quickfixPlaceholderElement = statusBar.append($('div'));
                    if (this.recentMarkerCodeActionsInfo) {
                        if (_markersJs.IMarkerData.makeKey(this.recentMarkerCodeActionsInfo.marker) === _markersJs.IMarkerData.makeKey(markerHover.marker)) {
                            if (!this.recentMarkerCodeActionsInfo.hasCodeActions) quickfixPlaceholderElement.textContent = _nlsJs.localize('noQuickFixes', "No quick fixes available");
                        } else this.recentMarkerCodeActionsInfo = undefined;
                    }
                    var updatePlaceholderDisposable = this.recentMarkerCodeActionsInfo && !this.recentMarkerCodeActionsInfo.hasCodeActions ? _lifecycleJs.Disposable.None : disposables.add(_asyncJs.disposableTimeout(function() {
                        return quickfixPlaceholderElement.textContent = _nlsJs.localize('checkingForQuickFixes', "Checking for quick fixes...");
                    }, 200));
                    if (!quickfixPlaceholderElement.textContent) // Have some content in here to avoid flickering
                    quickfixPlaceholderElement.textContent = String.fromCharCode(0xA0); // &nbsp;
                    var codeActionsPromise = this.getCodeActions(markerHover.marker);
                    disposables.add(_lifecycleJs.toDisposable(function() {
                        return codeActionsPromise.cancel();
                    }));
                    codeActionsPromise.then(function(actions) {
                        var _this = _this2;
                        updatePlaceholderDisposable.dispose();
                        _this2.recentMarkerCodeActionsInfo = {
                            marker: markerHover.marker,
                            hasCodeActions: actions.validActions.length > 0
                        };
                        if (!_this2.recentMarkerCodeActionsInfo.hasCodeActions) {
                            actions.dispose();
                            quickfixPlaceholderElement.textContent = _nlsJs.localize('noQuickFixes', "No quick fixes available");
                            return;
                        }
                        quickfixPlaceholderElement.style.display = 'none';
                        var showing = false;
                        disposables.add(_lifecycleJs.toDisposable(function() {
                            if (!showing) actions.dispose();
                        }));
                        statusBar.addAction({
                            label: _nlsJs.localize('quick fixes', "Quick Fix..."),
                            commandId: _codeActionCommandsJs.QuickFixAction.Id,
                            run: function(target) {
                                showing = true;
                                var controller = _codeActionCommandsJs.QuickFixController.get(_this._editor);
                                var elementPosition = _domJs.getDomNodePagePosition(target);
                                // Hide the hover pre-emptively, otherwise the editor can close the code actions
                                // context menu as well when using keyboard navigation
                                _this._hover.hide();
                                controller.showCodeActions(markerCodeActionTrigger, actions, {
                                    x: elementPosition.left + 6,
                                    y: elementPosition.top + elementPosition.height + 6
                                });
                            }
                        });
                    }, _errorsJs.onUnexpectedError);
                }
            }
        },
        {
            key: "getCodeActions",
            value: function getCodeActions(marker) {
                var _this = this;
                return _asyncJs.createCancelablePromise(function(cancellationToken) {
                    return _codeActionJs.getCodeActions(_this._editor.getModel(), new _rangeJs.Range(marker.startLineNumber, marker.startColumn, marker.endLineNumber, marker.endColumn), markerCodeActionTrigger, _progressJs.Progress.None, cancellationToken);
                });
            }
        }
    ]);
    return MarkerHoverParticipant1;
}();
MarkerHoverParticipant = __decorate([
    __param(2, _markersDecorationServiceJs.IMarkerDecorationsService),
    __param(3, _openerJs.IOpenerService)
], MarkerHoverParticipant);
_themeServiceJs.registerThemingParticipant(function(theme, collector) {
    var linkFg = theme.getColor(_colorRegistryJs.textLinkForeground);
    if (linkFg) collector.addRule(".monaco-hover .hover-contents a.code-link span { color: ".concat(linkFg, "; }"));
    var activeLinkFg = theme.getColor(_colorRegistryJs.textLinkActiveForeground);
    if (activeLinkFg) collector.addRule(".monaco-hover .hover-contents a.code-link span:hover { color: ".concat(activeLinkFg, "; }"));
});

},{"@swc/helpers":"erO4s","../../../base/browser/dom.js":"bxmlc","../../../base/common/arrays.js":"bZs3E","../../../base/common/async.js":"kMhSh","../../../base/common/errors.js":"afm4i","../../../base/common/lifecycle.js":"bcbPy","../../../base/common/resources.js":"14HNj","../../common/core/range.js":"VbyL8","../../common/services/markersDecorationService.js":"jbemX","../codeAction/codeAction.js":"uBrYv","../codeAction/codeActionCommands.js":"3lL8Q","../codeAction/types.js":"9FHZq","../gotoError/gotoError.js":"kfzPn","../../../nls.js":"9djYb","../../../platform/markers/common/markers.js":"4CrDH","../../../platform/opener/common/opener.js":"nEUGw","../../../platform/progress/common/progress.js":"dJdAd","../../../platform/theme/common/colorRegistry.js":"lKtxS","../../../platform/theme/common/themeService.js":"kE7QB","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"kfzPn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MarkerController", function() {
    return MarkerController;
});
parcelHelpers.export(exports, "NextMarkerAction", function() {
    return NextMarkerAction;
});
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
var _codiconsJs = require("../../../base/common/codicons.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _editorExtensionsJs = require("../../browser/editorExtensions.js");
var _codeEditorServiceJs = require("../../browser/services/codeEditorService.js");
var _positionJs = require("../../common/core/position.js");
var _rangeJs = require("../../common/core/range.js");
var _editorContextKeysJs = require("../../common/editorContextKeys.js");
var _markerNavigationServiceJs = require("./markerNavigationService.js");
var _nlsJs = require("../../../nls.js");
var _actionsJs = require("../../../platform/actions/common/actions.js");
var _contextkeyJs = require("../../../platform/contextkey/common/contextkey.js");
var _instantiationJs = require("../../../platform/instantiation/common/instantiation.js");
var _iconRegistryJs = require("../../../platform/theme/common/iconRegistry.js");
var _gotoErrorWidgetJs = require("./gotoErrorWidget.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var MarkerController = /*#__PURE__*/ function() {
    "use strict";
    function MarkerController1(editor, _markerNavigationService, _contextKeyService, _editorService, _instantiationService) {
        _helpers.classCallCheck(this, MarkerController1);
        this._markerNavigationService = _markerNavigationService;
        this._contextKeyService = _contextKeyService;
        this._editorService = _editorService;
        this._instantiationService = _instantiationService;
        this._sessionDispoables = new _lifecycleJs.DisposableStore();
        this._editor = editor;
        this._widgetVisible = CONTEXT_MARKERS_NAVIGATION_VISIBLE.bindTo(this._contextKeyService);
    }
    _helpers.createClass(MarkerController1, [
        {
            key: "dispose",
            value: function dispose() {
                this._cleanUp();
                this._sessionDispoables.dispose();
            }
        },
        {
            key: "_cleanUp",
            value: function _cleanUp() {
                this._widgetVisible.reset();
                this._sessionDispoables.clear();
                this._widget = undefined;
                this._model = undefined;
            }
        },
        {
            key: "_getOrCreateModel",
            value: function _getOrCreateModel(uri) {
                var _this = this;
                if (this._model && this._model.matches(uri)) return this._model;
                var reusePosition = false;
                if (this._model) {
                    reusePosition = true;
                    this._cleanUp();
                }
                this._model = this._markerNavigationService.getMarkerList(uri);
                if (reusePosition) this._model.move(true, this._editor.getModel(), this._editor.getPosition());
                this._widget = this._instantiationService.createInstance(_gotoErrorWidgetJs.MarkerNavigationWidget, this._editor);
                this._widget.onDidClose(function() {
                    return _this.close();
                }, this, this._sessionDispoables);
                this._widgetVisible.set(true);
                this._sessionDispoables.add(this._model);
                this._sessionDispoables.add(this._widget);
                // follow cursor
                this._sessionDispoables.add(this._editor.onDidChangeCursorPosition(function(e) {
                    var _a, _b, _c;
                    if (!((_a = _this._model) === null || _a === void 0 ? void 0 : _a.selected) || !_rangeJs.Range.containsPosition((_b = _this._model) === null || _b === void 0 ? void 0 : _b.selected.marker, e.position)) (_c = _this._model) === null || _c === void 0 || _c.resetIndex();
                }));
                // update markers
                this._sessionDispoables.add(this._model.onDidChange(function() {
                    if (!_this._widget || !_this._widget.position || !_this._model) return;
                    var info = _this._model.find(_this._editor.getModel().uri, _this._widget.position);
                    if (info) _this._widget.updateMarker(info.marker);
                    else _this._widget.showStale();
                }));
                // open related
                this._sessionDispoables.add(this._widget.onDidSelectRelatedInformation(function(related) {
                    _this._editorService.openCodeEditor({
                        resource: related.resource,
                        options: {
                            pinned: true,
                            revealIfOpened: true,
                            selection: _rangeJs.Range.lift(related).collapseToStart()
                        }
                    }, _this._editor);
                    _this.close(false);
                }));
                this._sessionDispoables.add(this._editor.onDidChangeModel(function() {
                    return _this._cleanUp();
                }));
                return this._model;
            }
        },
        {
            key: "close",
            value: function close() {
                var focusEditor = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
                this._cleanUp();
                if (focusEditor) this._editor.focus();
            }
        },
        {
            key: "showAtMarker",
            value: function showAtMarker(marker) {
                if (this._editor.hasModel()) {
                    var model = this._getOrCreateModel(this._editor.getModel().uri);
                    model.resetIndex();
                    model.move(true, this._editor.getModel(), new _positionJs.Position(marker.startLineNumber, marker.startColumn));
                    if (model.selected) this._widget.showAtMarker(model.selected.marker, model.selected.index, model.selected.total);
                }
            }
        },
        {
            key: "nagivate",
            value: function nagivate(next, multiFile) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var model, otherEditor;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                if (!this._editor.hasModel()) {
                                    _ctx.next = 14;
                                    break;
                                }
                                model = this._getOrCreateModel(multiFile ? undefined : this._editor.getModel().uri);
                                model.move(next, this._editor.getModel(), this._editor.getPosition());
                                if (model.selected) {
                                    _ctx.next = 5;
                                    break;
                                }
                                return _ctx.abrupt("return");
                            case 5:
                                if (!(model.selected.marker.resource.toString() !== this._editor.getModel().uri.toString())) {
                                    _ctx.next = 13;
                                    break;
                                }
                                // show in different editor
                                this._cleanUp();
                                _ctx.next = 9;
                                return this._editorService.openCodeEditor({
                                    resource: model.selected.marker.resource,
                                    options: {
                                        pinned: false,
                                        revealIfOpened: true,
                                        selectionRevealType: 2 /* NearTop */ ,
                                        selection: model.selected.marker
                                    }
                                }, this._editor);
                            case 9:
                                otherEditor = _ctx.sent;
                                if (otherEditor) {
                                    MarkerController1.get(otherEditor).close();
                                    MarkerController1.get(otherEditor).nagivate(next, multiFile);
                                }
                                _ctx.next = 14;
                                break;
                            case 13:
                                // show in this editor
                                this._widget.showAtMarker(model.selected.marker, model.selected.index, model.selected.total);
                            case 14:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this);
                }));
            }
        }
    ], [
        {
            key: "get",
            value: function get(editor) {
                return editor.getContribution(MarkerController1.ID);
            }
        }
    ]);
    return MarkerController1;
}();
MarkerController.ID = 'editor.contrib.markerController';
MarkerController = __decorate([
    __param(1, _markerNavigationServiceJs.IMarkerNavigationService),
    __param(2, _contextkeyJs.IContextKeyService),
    __param(3, _codeEditorServiceJs.ICodeEditorService),
    __param(4, _instantiationJs.IInstantiationService)
], MarkerController);
var MarkerNavigationAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(MarkerNavigationAction, EditorAction);
    var _super = _helpers.createSuper(MarkerNavigationAction);
    function MarkerNavigationAction(_next, _multiFile, opts) {
        _helpers.classCallCheck(this, MarkerNavigationAction);
        var _this;
        _this = _super.call(this, opts);
        _this._next = _next;
        _this._multiFile = _multiFile;
        return _this;
    }
    _helpers.createClass(MarkerNavigationAction, [
        {
            key: "run",
            value: function run(_accessor, editor) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                if (editor.hasModel()) MarkerController.get(editor).nagivate(this._next, this._multiFile);
                            case 1:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this);
                }));
            }
        }
    ]);
    return MarkerNavigationAction;
}(_editorExtensionsJs.EditorAction);
var NextMarkerAction = /*#__PURE__*/ function(MarkerNavigationAction) {
    "use strict";
    _helpers.inherits(NextMarkerAction, MarkerNavigationAction);
    var _super = _helpers.createSuper(NextMarkerAction);
    function NextMarkerAction() {
        _helpers.classCallCheck(this, NextMarkerAction);
        return _super.call(this, true, false, {
            id: NextMarkerAction.ID,
            label: NextMarkerAction.LABEL,
            alias: 'Go to Next Problem (Error, Warning, Info)',
            precondition: undefined,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.focus,
                primary: 578 /* F8 */ ,
                weight: 100 /* EditorContrib */ 
            },
            menuOpts: {
                menuId: _gotoErrorWidgetJs.MarkerNavigationWidget.TitleMenu,
                title: NextMarkerAction.LABEL,
                icon: _iconRegistryJs.registerIcon('marker-navigation-next', _codiconsJs.Codicon.arrowDown, _nlsJs.localize('nextMarkerIcon', 'Icon for goto next marker.')),
                group: 'navigation',
                order: 1
            }
        });
    }
    return NextMarkerAction;
}(MarkerNavigationAction);
NextMarkerAction.ID = 'editor.action.marker.next';
NextMarkerAction.LABEL = _nlsJs.localize('markerAction.next.label', "Go to Next Problem (Error, Warning, Info)");
var PrevMarkerAction = /*#__PURE__*/ function(MarkerNavigationAction) {
    "use strict";
    _helpers.inherits(PrevMarkerAction, MarkerNavigationAction);
    var _super = _helpers.createSuper(PrevMarkerAction);
    function PrevMarkerAction() {
        _helpers.classCallCheck(this, PrevMarkerAction);
        return _super.call(this, false, false, {
            id: PrevMarkerAction.ID,
            label: PrevMarkerAction.LABEL,
            alias: 'Go to Previous Problem (Error, Warning, Info)',
            precondition: undefined,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.focus,
                primary: 1602 /* F8 */ ,
                weight: 100 /* EditorContrib */ 
            },
            menuOpts: {
                menuId: _gotoErrorWidgetJs.MarkerNavigationWidget.TitleMenu,
                title: NextMarkerAction.LABEL,
                icon: _iconRegistryJs.registerIcon('marker-navigation-previous', _codiconsJs.Codicon.arrowUp, _nlsJs.localize('previousMarkerIcon', 'Icon for goto previous marker.')),
                group: 'navigation',
                order: 2
            }
        });
    }
    return PrevMarkerAction;
}(MarkerNavigationAction);
PrevMarkerAction.ID = 'editor.action.marker.prev';
PrevMarkerAction.LABEL = _nlsJs.localize('markerAction.previous.label', "Go to Previous Problem (Error, Warning, Info)");
var NextMarkerInFilesAction = /*#__PURE__*/ function(MarkerNavigationAction) {
    "use strict";
    _helpers.inherits(NextMarkerInFilesAction, MarkerNavigationAction);
    var _super = _helpers.createSuper(NextMarkerInFilesAction);
    function NextMarkerInFilesAction() {
        _helpers.classCallCheck(this, NextMarkerInFilesAction);
        return _super.call(this, true, true, {
            id: 'editor.action.marker.nextInFiles',
            label: _nlsJs.localize('markerAction.nextInFiles.label', "Go to Next Problem in Files (Error, Warning, Info)"),
            alias: 'Go to Next Problem in Files (Error, Warning, Info)',
            precondition: undefined,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.focus,
                primary: 66 /* F8 */ ,
                weight: 100 /* EditorContrib */ 
            },
            menuOpts: {
                menuId: _actionsJs.MenuId.MenubarGoMenu,
                title: _nlsJs.localize({
                    key: 'miGotoNextProblem',
                    comment: [
                        '&& denotes a mnemonic'
                    ]
                }, "Next &&Problem"),
                group: '6_problem_nav',
                order: 1
            }
        });
    }
    return NextMarkerInFilesAction;
}(MarkerNavigationAction);
var PrevMarkerInFilesAction = /*#__PURE__*/ function(MarkerNavigationAction) {
    "use strict";
    _helpers.inherits(PrevMarkerInFilesAction, MarkerNavigationAction);
    var _super = _helpers.createSuper(PrevMarkerInFilesAction);
    function PrevMarkerInFilesAction() {
        _helpers.classCallCheck(this, PrevMarkerInFilesAction);
        return _super.call(this, false, true, {
            id: 'editor.action.marker.prevInFiles',
            label: _nlsJs.localize('markerAction.previousInFiles.label', "Go to Previous Problem in Files (Error, Warning, Info)"),
            alias: 'Go to Previous Problem in Files (Error, Warning, Info)',
            precondition: undefined,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.focus,
                primary: 1090 /* F8 */ ,
                weight: 100 /* EditorContrib */ 
            },
            menuOpts: {
                menuId: _actionsJs.MenuId.MenubarGoMenu,
                title: _nlsJs.localize({
                    key: 'miGotoPreviousProblem',
                    comment: [
                        '&& denotes a mnemonic'
                    ]
                }, "Previous &&Problem"),
                group: '6_problem_nav',
                order: 2
            }
        });
    }
    return PrevMarkerInFilesAction;
}(MarkerNavigationAction);
_editorExtensionsJs.registerEditorContribution(MarkerController.ID, MarkerController);
_editorExtensionsJs.registerEditorAction(NextMarkerAction);
_editorExtensionsJs.registerEditorAction(PrevMarkerAction);
_editorExtensionsJs.registerEditorAction(NextMarkerInFilesAction);
_editorExtensionsJs.registerEditorAction(PrevMarkerInFilesAction);
var CONTEXT_MARKERS_NAVIGATION_VISIBLE = new _contextkeyJs.RawContextKey('markersNavigationVisible', false);
var MarkerCommand = _editorExtensionsJs.EditorCommand.bindToContribution(MarkerController.get);
_editorExtensionsJs.registerEditorCommand(new MarkerCommand({
    id: 'closeMarkersNavigation',
    precondition: CONTEXT_MARKERS_NAVIGATION_VISIBLE,
    handler: function(x) {
        return x.close();
    },
    kbOpts: {
        weight: 150,
        kbExpr: _editorContextKeysJs.EditorContextKeys.focus,
        primary: 9 /* Escape */ ,
        secondary: [
            1033 /* Escape */ 
        ]
    }
}));

},{"@swc/helpers":"erO4s","regenerator-runtime":"12Ae8","../../../base/common/codicons.js":"j24JC","../../../base/common/lifecycle.js":"bcbPy","../../browser/editorExtensions.js":"dFnlo","../../browser/services/codeEditorService.js":"izkTN","../../common/core/position.js":"6xP0w","../../common/core/range.js":"VbyL8","../../common/editorContextKeys.js":"2t2PW","./markerNavigationService.js":"96Tki","../../../nls.js":"9djYb","../../../platform/actions/common/actions.js":"1qoxQ","../../../platform/contextkey/common/contextkey.js":"5cjav","../../../platform/instantiation/common/instantiation.js":"9ABZB","../../../platform/theme/common/iconRegistry.js":"evGtc","./gotoErrorWidget.js":"fG8uq","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"96Tki":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MarkerCoordinate", function() {
    return MarkerCoordinate;
});
parcelHelpers.export(exports, "MarkerList", function() {
    return MarkerList;
});
parcelHelpers.export(exports, "IMarkerNavigationService", function() {
    return IMarkerNavigationService;
});
var _helpers = require("@swc/helpers");
var _arraysJs = require("../../../base/common/arrays.js");
var _eventJs = require("../../../base/common/event.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _linkedListJs = require("../../../base/common/linkedList.js");
var _stringsJs = require("../../../base/common/strings.js");
var _uriJs = require("../../../base/common/uri.js");
var _rangeJs = require("../../common/core/range.js");
var _extensionsJs = require("../../../platform/instantiation/common/extensions.js");
var _instantiationJs = require("../../../platform/instantiation/common/instantiation.js");
var _markersJs = require("../../../platform/markers/common/markers.js");
var _configurationJs = require("../../../platform/configuration/common/configuration.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var MarkerCoordinate = function MarkerCoordinate(marker, index, total) {
    "use strict";
    _helpers.classCallCheck(this, MarkerCoordinate);
    this.marker = marker;
    this.index = index;
    this.total = total;
};
var MarkerList = /*#__PURE__*/ function() {
    "use strict";
    function MarkerList1(resourceFilter, _markerService, _configService) {
        var _this = this;
        _helpers.classCallCheck(this, MarkerList1);
        this._markerService = _markerService;
        this._configService = _configService;
        this._onDidChange = new _eventJs.Emitter();
        this.onDidChange = this._onDidChange.event;
        this._dispoables = new _lifecycleJs.DisposableStore();
        this._markers = [];
        this._nextIdx = -1;
        if (_uriJs.URI.isUri(resourceFilter)) this._resourceFilter = function(uri) {
            return uri.toString() === resourceFilter.toString();
        };
        else if (resourceFilter) this._resourceFilter = resourceFilter;
        var compareOrder = this._configService.getValue('problems.sortOrder');
        var compareMarker = function(a, b) {
            var res = _stringsJs.compare(a.resource.toString(), b.resource.toString());
            if (compareOrder === 'position') res = _rangeJs.Range.compareRangesUsingStarts(a, b) || _markersJs.MarkerSeverity.compare(a.severity, b.severity);
            else res = _markersJs.MarkerSeverity.compare(a.severity, b.severity) || _rangeJs.Range.compareRangesUsingStarts(a, b);
            return res;
        };
        var updateMarker = function() {
            var _this1 = _this;
            _this._markers = _this._markerService.read({
                resource: _uriJs.URI.isUri(resourceFilter) ? resourceFilter : undefined,
                severities: _markersJs.MarkerSeverity.Error | _markersJs.MarkerSeverity.Warning | _markersJs.MarkerSeverity.Info
            });
            if (typeof resourceFilter === 'function') _this._markers = _this._markers.filter(function(m) {
                return _this1._resourceFilter(m.resource);
            });
            _this._markers.sort(compareMarker);
        };
        updateMarker();
        this._dispoables.add(_markerService.onMarkerChanged(function(uris) {
            var _this2 = _this;
            if (!_this._resourceFilter || uris.some(function(uri) {
                return _this2._resourceFilter(uri);
            })) {
                updateMarker();
                _this._nextIdx = -1;
                _this._onDidChange.fire();
            }
        }));
    }
    _helpers.createClass(MarkerList1, [
        {
            key: "dispose",
            value: function dispose() {
                this._dispoables.dispose();
                this._onDidChange.dispose();
            }
        },
        {
            key: "matches",
            value: function matches(uri) {
                if (!this._resourceFilter && !uri) return true;
                if (!this._resourceFilter || !uri) return false;
                return this._resourceFilter(uri);
            }
        },
        {
            key: "selected",
            get: function get() {
                var marker = this._markers[this._nextIdx];
                return marker && new MarkerCoordinate(marker, this._nextIdx + 1, this._markers.length);
            }
        },
        {
            key: "_initIdx",
            value: function _initIdx(model, position, fwd) {
                var found = false;
                var idx = this._markers.findIndex(function(marker) {
                    return marker.resource.toString() === model.uri.toString();
                });
                if (idx < 0) {
                    idx = _arraysJs.binarySearch(this._markers, {
                        resource: model.uri
                    }, function(a, b) {
                        return _stringsJs.compare(a.resource.toString(), b.resource.toString());
                    });
                    if (idx < 0) idx = ~idx;
                }
                for(var i = idx; i < this._markers.length; i++){
                    var range = _rangeJs.Range.lift(this._markers[i]);
                    if (range.isEmpty()) {
                        var word = model.getWordAtPosition(range.getStartPosition());
                        if (word) range = new _rangeJs.Range(range.startLineNumber, word.startColumn, range.startLineNumber, word.endColumn);
                    }
                    if (position && (range.containsPosition(position) || position.isBeforeOrEqual(range.getStartPosition()))) {
                        this._nextIdx = i;
                        found = true;
                        break;
                    }
                    if (this._markers[i].resource.toString() !== model.uri.toString()) break;
                }
                if (!found) // after the last change
                this._nextIdx = fwd ? 0 : this._markers.length - 1;
                if (this._nextIdx < 0) this._nextIdx = this._markers.length - 1;
            }
        },
        {
            key: "resetIndex",
            value: function resetIndex() {
                this._nextIdx = -1;
            }
        },
        {
            key: "move",
            value: function move(fwd, model, position) {
                if (this._markers.length === 0) return false;
                var oldIdx = this._nextIdx;
                if (this._nextIdx === -1) this._initIdx(model, position, fwd);
                else if (fwd) this._nextIdx = (this._nextIdx + 1) % this._markers.length;
                else if (!fwd) this._nextIdx = (this._nextIdx - 1 + this._markers.length) % this._markers.length;
                if (oldIdx !== this._nextIdx) return true;
                return false;
            }
        },
        {
            key: "find",
            value: function find(uri, position) {
                var idx = this._markers.findIndex(function(marker) {
                    return marker.resource.toString() === uri.toString();
                });
                if (idx < 0) return undefined;
                for(; idx < this._markers.length; idx++){
                    if (_rangeJs.Range.containsPosition(this._markers[idx], position)) return new MarkerCoordinate(this._markers[idx], idx + 1, this._markers.length);
                }
                return undefined;
            }
        }
    ]);
    return MarkerList1;
}();
MarkerList = __decorate([
    __param(1, _markersJs.IMarkerService),
    __param(2, _configurationJs.IConfigurationService)
], MarkerList);
var IMarkerNavigationService = _instantiationJs.createDecorator('IMarkerNavigationService');
var MarkerNavigationService = /*#__PURE__*/ function() {
    "use strict";
    function MarkerNavigationService1(_markerService, _configService) {
        _helpers.classCallCheck(this, MarkerNavigationService1);
        this._markerService = _markerService;
        this._configService = _configService;
        this._provider = new _linkedListJs.LinkedList();
    }
    _helpers.createClass(MarkerNavigationService1, [
        {
            key: "getMarkerList",
            value: function getMarkerList(resource) {
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this._provider[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var provider = _step.value;
                        var result = provider.getMarkerList(resource);
                        if (result) return result;
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                // default
                return new MarkerList(resource, this._markerService, this._configService);
            }
        }
    ]);
    return MarkerNavigationService1;
}();
MarkerNavigationService = __decorate([
    __param(0, _markersJs.IMarkerService),
    __param(1, _configurationJs.IConfigurationService)
], MarkerNavigationService);
_extensionsJs.registerSingleton(IMarkerNavigationService, MarkerNavigationService, true);

},{"@swc/helpers":"erO4s","../../../base/common/arrays.js":"bZs3E","../../../base/common/event.js":"9IBcK","../../../base/common/lifecycle.js":"bcbPy","../../../base/common/linkedList.js":"lvqqV","../../../base/common/strings.js":"jsb6w","../../../base/common/uri.js":"4ZDLf","../../common/core/range.js":"VbyL8","../../../platform/instantiation/common/extensions.js":"6Iedq","../../../platform/instantiation/common/instantiation.js":"9ABZB","../../../platform/markers/common/markers.js":"4CrDH","../../../platform/configuration/common/configuration.js":"9wFfb","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"fG8uq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MarkerNavigationWidget", function() {
    return MarkerNavigationWidget;
});
parcelHelpers.export(exports, "editorMarkerNavigationError", function() {
    return editorMarkerNavigationError;
});
parcelHelpers.export(exports, "editorMarkerNavigationErrorHeader", function() {
    return editorMarkerNavigationErrorHeader;
});
parcelHelpers.export(exports, "editorMarkerNavigationWarning", function() {
    return editorMarkerNavigationWarning;
});
parcelHelpers.export(exports, "editorMarkerNavigationWarningHeader", function() {
    return editorMarkerNavigationWarningHeader;
});
parcelHelpers.export(exports, "editorMarkerNavigationInfo", function() {
    return editorMarkerNavigationInfo;
});
parcelHelpers.export(exports, "editorMarkerNavigationInfoHeader", function() {
    return editorMarkerNavigationInfoHeader;
});
parcelHelpers.export(exports, "editorMarkerNavigationBackground", function() {
    return editorMarkerNavigationBackground;
});
var _helpers = require("@swc/helpers");
var _domJs = require("../../../base/browser/dom.js");
var _scrollableElementJs = require("../../../base/browser/ui/scrollbar/scrollableElement.js");
var _arraysJs = require("../../../base/common/arrays.js");
var _colorJs = require("../../../base/common/color.js");
var _eventJs = require("../../../base/common/event.js");
var _labelsJs = require("../../../base/common/labels.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _resourcesJs = require("../../../base/common/resources.js");
var _stringsJs = require("../../../base/common/strings.js");
var _gotoErrorWidgetCss = require("./media/gotoErrorWidget.css");
var _rangeJs = require("../../common/core/range.js");
var _peekViewJs = require("../peekView/peekView.js");
var _nlsJs = require("../../../nls.js");
var _menuEntryActionViewItemJs = require("../../../platform/actions/browser/menuEntryActionViewItem.js");
var _actionsJs = require("../../../platform/actions/common/actions.js");
var _contextkeyJs = require("../../../platform/contextkey/common/contextkey.js");
var _instantiationJs = require("../../../platform/instantiation/common/instantiation.js");
var _labelJs = require("../../../platform/label/common/label.js");
var _markersJs = require("../../../platform/markers/common/markers.js");
var _openerJs = require("../../../platform/opener/common/opener.js");
var _severityIconJs = require("../../../platform/severityIcon/common/severityIcon.js");
var _colorRegistryJs = require("../../../platform/theme/common/colorRegistry.js");
var _themeServiceJs = require("../../../platform/theme/common/themeService.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var MessageWidget = /*#__PURE__*/ function() {
    "use strict";
    function MessageWidget(parent, editor, onRelatedInformation, _openerService, _labelService) {
        var _this = this;
        _helpers.classCallCheck(this, MessageWidget);
        this._openerService = _openerService;
        this._labelService = _labelService;
        this._lines = 0;
        this._longestLineLength = 0;
        this._relatedDiagnostics = new WeakMap();
        this._disposables = new _lifecycleJs.DisposableStore();
        this._editor = editor;
        var domNode = document.createElement('div');
        domNode.className = 'descriptioncontainer';
        this._messageBlock = document.createElement('div');
        this._messageBlock.classList.add('message');
        this._messageBlock.setAttribute('aria-live', 'assertive');
        this._messageBlock.setAttribute('role', 'alert');
        domNode.appendChild(this._messageBlock);
        this._relatedBlock = document.createElement('div');
        domNode.appendChild(this._relatedBlock);
        this._disposables.add(_domJs.addStandardDisposableListener(this._relatedBlock, 'click', function(event) {
            event.preventDefault();
            var related = _this._relatedDiagnostics.get(event.target);
            if (related) onRelatedInformation(related);
        }));
        this._scrollable = new _scrollableElementJs.ScrollableElement(domNode, {
            horizontal: 1 /* Auto */ ,
            vertical: 1 /* Auto */ ,
            useShadows: false,
            horizontalScrollbarSize: 6,
            verticalScrollbarSize: 6
        });
        parent.appendChild(this._scrollable.getDomNode());
        this._disposables.add(this._scrollable.onScroll(function(e) {
            domNode.style.left = "-".concat(e.scrollLeft, "px");
            domNode.style.top = "-".concat(e.scrollTop, "px");
        }));
        this._disposables.add(this._scrollable);
    }
    _helpers.createClass(MessageWidget, [
        {
            key: "dispose",
            value: function dispose() {
                _lifecycleJs.dispose(this._disposables);
            }
        },
        {
            key: "update",
            value: function update(marker) {
                var source = marker.source, message = marker.message, relatedInformation = marker.relatedInformation, code = marker.code;
                var sourceAndCodeLength = ((source === null || source === void 0 ? void 0 : source.length) || 0) + 2;
                if (code) {
                    if (typeof code === 'string') sourceAndCodeLength += code.length;
                    else sourceAndCodeLength += code.value.length;
                }
                var lines = _stringsJs.splitLines(message);
                this._lines = lines.length;
                this._longestLineLength = 0;
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = lines[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var line = _step.value;
                        this._longestLineLength = Math.max(line.length + sourceAndCodeLength, this._longestLineLength);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                _domJs.clearNode(this._messageBlock);
                this._messageBlock.setAttribute('aria-label', this.getAriaLabel(marker));
                this._editor.applyFontInfo(this._messageBlock);
                var lastLineElement = this._messageBlock;
                var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                try {
                    for(var _iterator1 = lines[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                        var line1 = _step1.value;
                        lastLineElement = document.createElement('div');
                        lastLineElement.innerText = line1;
                        if (line1 === '') lastLineElement.style.height = this._messageBlock.style.lineHeight;
                        this._messageBlock.appendChild(lastLineElement);
                    }
                } catch (err) {
                    _didIteratorError1 = true;
                    _iteratorError1 = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                            _iterator1.return();
                        }
                    } finally{
                        if (_didIteratorError1) {
                            throw _iteratorError1;
                        }
                    }
                }
                if (source || code) {
                    var detailsElement = document.createElement('span');
                    detailsElement.classList.add('details');
                    lastLineElement.appendChild(detailsElement);
                    if (source) {
                        var sourceElement = document.createElement('span');
                        sourceElement.innerText = source;
                        sourceElement.classList.add('source');
                        detailsElement.appendChild(sourceElement);
                    }
                    if (code) {
                        if (typeof code === 'string') {
                            var codeElement = document.createElement('span');
                            codeElement.innerText = "(".concat(code, ")");
                            codeElement.classList.add('code');
                            detailsElement.appendChild(codeElement);
                        } else {
                            var _this = this;
                            this._codeLink = _domJs.$('a.code-link');
                            this._codeLink.setAttribute('href', "".concat(code.target.toString()));
                            this._codeLink.onclick = function(e) {
                                _this._openerService.open(code.target, {
                                    allowCommands: true
                                });
                                e.preventDefault();
                                e.stopPropagation();
                            };
                            var codeElement1 = _domJs.append(this._codeLink, _domJs.$('span'));
                            codeElement1.innerText = code.value;
                            detailsElement.appendChild(this._codeLink);
                        }
                    }
                }
                _domJs.clearNode(this._relatedBlock);
                this._editor.applyFontInfo(this._relatedBlock);
                if (_arraysJs.isNonEmptyArray(relatedInformation)) {
                    var relatedInformationNode = this._relatedBlock.appendChild(document.createElement('div'));
                    relatedInformationNode.style.paddingTop = "".concat(Math.floor(this._editor.getOption(58 /* lineHeight */ ) * 0.66), "px");
                    this._lines += 1;
                    var _iteratorNormalCompletion2 = true, _didIteratorError2 = false, _iteratorError2 = undefined;
                    try {
                        for(var _iterator2 = relatedInformation[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true){
                            var related = _step2.value;
                            var container = document.createElement('div');
                            var relatedResource = document.createElement('a');
                            relatedResource.classList.add('filename');
                            relatedResource.innerText = "".concat(_labelsJs.getBaseLabel(related.resource), "(").concat(related.startLineNumber, ", ").concat(related.startColumn, "): ");
                            relatedResource.title = this._labelService.getUriLabel(related.resource);
                            this._relatedDiagnostics.set(relatedResource, related);
                            var relatedMessage = document.createElement('span');
                            relatedMessage.innerText = related.message;
                            container.appendChild(relatedResource);
                            container.appendChild(relatedMessage);
                            this._lines += 1;
                            relatedInformationNode.appendChild(container);
                        }
                    } catch (err) {
                        _didIteratorError2 = true;
                        _iteratorError2 = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                                _iterator2.return();
                            }
                        } finally{
                            if (_didIteratorError2) {
                                throw _iteratorError2;
                            }
                        }
                    }
                }
                var fontInfo = this._editor.getOption(43 /* fontInfo */ );
                var scrollWidth = Math.ceil(fontInfo.typicalFullwidthCharacterWidth * this._longestLineLength * 0.75);
                var scrollHeight = fontInfo.lineHeight * this._lines;
                this._scrollable.setScrollDimensions({
                    scrollWidth: scrollWidth,
                    scrollHeight: scrollHeight
                });
            }
        },
        {
            key: "layout",
            value: function layout(height, width) {
                this._scrollable.getDomNode().style.height = "".concat(height, "px");
                this._scrollable.getDomNode().style.width = "".concat(width, "px");
                this._scrollable.setScrollDimensions({
                    width: width,
                    height: height
                });
            }
        },
        {
            key: "getHeightInLines",
            value: function getHeightInLines() {
                return Math.min(17, this._lines);
            }
        },
        {
            key: "getAriaLabel",
            value: function getAriaLabel(marker) {
                var severityLabel = '';
                switch(marker.severity){
                    case _markersJs.MarkerSeverity.Error:
                        severityLabel = _nlsJs.localize('Error', "Error");
                        break;
                    case _markersJs.MarkerSeverity.Warning:
                        severityLabel = _nlsJs.localize('Warning', "Warning");
                        break;
                    case _markersJs.MarkerSeverity.Info:
                        severityLabel = _nlsJs.localize('Info', "Info");
                        break;
                    case _markersJs.MarkerSeverity.Hint:
                        severityLabel = _nlsJs.localize('Hint', "Hint");
                        break;
                }
                var ariaLabel = _nlsJs.localize('marker aria', "{0} at {1}. ", severityLabel, marker.startLineNumber + ':' + marker.startColumn);
                var model = this._editor.getModel();
                if (model && marker.startLineNumber <= model.getLineCount() && marker.startLineNumber >= 1) {
                    var lineContent = model.getLineContent(marker.startLineNumber);
                    ariaLabel = "".concat(lineContent, ", ").concat(ariaLabel);
                }
                return ariaLabel;
            }
        }
    ]);
    return MessageWidget;
}();
var MarkerNavigationWidget = /*#__PURE__*/ function(PeekViewWidget) {
    "use strict";
    _helpers.inherits(MarkerNavigationWidget1, PeekViewWidget);
    var _super = _helpers.createSuper(MarkerNavigationWidget1);
    function MarkerNavigationWidget1(editor, _themeService, _openerService, _menuService, instantiationService, _contextKeyService, _labelService) {
        _helpers.classCallCheck(this, MarkerNavigationWidget1);
        var _this;
        _this = _super.call(this, editor, {
            showArrow: true,
            showFrame: true,
            isAccessible: true,
            frameWidth: 1
        }, instantiationService);
        _this._themeService = _themeService;
        _this._openerService = _openerService;
        _this._menuService = _menuService;
        _this._contextKeyService = _contextKeyService;
        _this._labelService = _labelService;
        _this._callOnDispose = new _lifecycleJs.DisposableStore();
        _this._onDidSelectRelatedInformation = new _eventJs.Emitter();
        _this.onDidSelectRelatedInformation = _this._onDidSelectRelatedInformation.event;
        _this._severity = _markersJs.MarkerSeverity.Warning;
        _this._backgroundColor = _colorJs.Color.white;
        _this._applyTheme(_themeService.getColorTheme());
        _this._callOnDispose.add(_themeService.onDidColorThemeChange(_this._applyTheme.bind(_helpers.assertThisInitialized(_this))));
        _this.create();
        return _this;
    }
    _helpers.createClass(MarkerNavigationWidget1, [
        {
            key: "_applyTheme",
            value: function _applyTheme(theme) {
                this._backgroundColor = theme.getColor(editorMarkerNavigationBackground);
                var colorId = editorMarkerNavigationError;
                var headerBackground = editorMarkerNavigationErrorHeader;
                if (this._severity === _markersJs.MarkerSeverity.Warning) {
                    colorId = editorMarkerNavigationWarning;
                    headerBackground = editorMarkerNavigationWarningHeader;
                } else if (this._severity === _markersJs.MarkerSeverity.Info) {
                    colorId = editorMarkerNavigationInfo;
                    headerBackground = editorMarkerNavigationInfoHeader;
                }
                var frameColor = theme.getColor(colorId);
                var headerBg = theme.getColor(headerBackground);
                this.style({
                    arrowColor: frameColor,
                    frameColor: frameColor,
                    headerBackgroundColor: headerBg,
                    primaryHeadingColor: theme.getColor(_peekViewJs.peekViewTitleForeground),
                    secondaryHeadingColor: theme.getColor(_peekViewJs.peekViewTitleInfoForeground)
                }); // style() will trigger _applyStyles
            }
        },
        {
            key: "_applyStyles",
            value: function _applyStyles() {
                if (this._parentContainer) this._parentContainer.style.backgroundColor = this._backgroundColor ? this._backgroundColor.toString() : '';
                _helpers.get(_helpers.getPrototypeOf(MarkerNavigationWidget1.prototype), "_applyStyles", this).call(this);
            }
        },
        {
            key: "dispose",
            value: function dispose() {
                this._callOnDispose.dispose();
                _helpers.get(_helpers.getPrototypeOf(MarkerNavigationWidget1.prototype), "dispose", this).call(this);
            }
        },
        {
            key: "_fillHead",
            value: function _fillHead(container) {
                var _this = this;
                _helpers.get(_helpers.getPrototypeOf(MarkerNavigationWidget1.prototype), "_fillHead", this).call(this, container);
                this._disposables.add(this._actionbarWidget.actionRunner.onBeforeRun(function(e) {
                    return _this.editor.focus();
                }));
                var actions = [];
                var menu = this._menuService.createMenu(MarkerNavigationWidget1.TitleMenu, this._contextKeyService);
                _menuEntryActionViewItemJs.createAndFillInActionBarActions(menu, undefined, actions);
                this._actionbarWidget.push(actions, {
                    label: false,
                    icon: true,
                    index: 0
                });
                menu.dispose();
            }
        },
        {
            key: "_fillTitleIcon",
            value: function _fillTitleIcon(container) {
                this._icon = _domJs.append(container, _domJs.$(''));
            }
        },
        {
            key: "_fillBody",
            value: function _fillBody(container) {
                var _this = this;
                this._parentContainer = container;
                container.classList.add('marker-widget');
                this._parentContainer.tabIndex = 0;
                this._parentContainer.setAttribute('role', 'tooltip');
                this._container = document.createElement('div');
                container.appendChild(this._container);
                this._message = new MessageWidget(this._container, this.editor, function(related) {
                    return _this._onDidSelectRelatedInformation.fire(related);
                }, this._openerService, this._labelService);
                this._disposables.add(this._message);
            }
        },
        {
            key: "show",
            value: function show() {
                throw new Error('call showAtMarker');
            }
        },
        {
            key: "showAtMarker",
            value: function showAtMarker(marker, markerIdx, markerCount) {
                // update:
                // * title
                // * message
                this._container.classList.remove('stale');
                this._message.update(marker);
                // update frame color (only applied on 'show')
                this._severity = marker.severity;
                this._applyTheme(this._themeService.getColorTheme());
                // show
                var range = _rangeJs.Range.lift(marker);
                var editorPosition = this.editor.getPosition();
                var position = editorPosition && range.containsPosition(editorPosition) ? editorPosition : range.getStartPosition();
                _helpers.get(_helpers.getPrototypeOf(MarkerNavigationWidget1.prototype), "show", this).call(this, position, this.computeRequiredHeight());
                var model = this.editor.getModel();
                if (model) {
                    var detail = markerCount > 1 ? _nlsJs.localize('problems', "{0} of {1} problems", markerIdx, markerCount) : _nlsJs.localize('change', "{0} of {1} problem", markerIdx, markerCount);
                    this.setTitle(_resourcesJs.basename(model.uri), detail);
                }
                this._icon.className = "codicon ".concat(_severityIconJs.SeverityIcon.className(_markersJs.MarkerSeverity.toSeverity(this._severity)));
                this.editor.revealPositionNearTop(position, 0 /* Smooth */ );
                this.editor.focus();
            }
        },
        {
            key: "updateMarker",
            value: function updateMarker(marker) {
                this._container.classList.remove('stale');
                this._message.update(marker);
            }
        },
        {
            key: "showStale",
            value: function showStale() {
                this._container.classList.add('stale');
                this._relayout();
            }
        },
        {
            key: "_doLayoutBody",
            value: function _doLayoutBody(heightInPixel, widthInPixel) {
                _helpers.get(_helpers.getPrototypeOf(MarkerNavigationWidget1.prototype), "_doLayoutBody", this).call(this, heightInPixel, widthInPixel);
                this._heightInPixel = heightInPixel;
                this._message.layout(heightInPixel, widthInPixel);
                this._container.style.height = "".concat(heightInPixel, "px");
            }
        },
        {
            key: "_onWidth",
            value: function _onWidth(widthInPixel) {
                this._message.layout(this._heightInPixel, widthInPixel);
            }
        },
        {
            key: "_relayout",
            value: function _relayout() {
                _helpers.get(_helpers.getPrototypeOf(MarkerNavigationWidget1.prototype), "_relayout", this).call(this, this.computeRequiredHeight());
            }
        },
        {
            key: "computeRequiredHeight",
            value: function computeRequiredHeight() {
                return 3 + this._message.getHeightInLines();
            }
        }
    ]);
    return MarkerNavigationWidget1;
}(_peekViewJs.PeekViewWidget);
MarkerNavigationWidget.TitleMenu = new _actionsJs.MenuId('gotoErrorTitleMenu');
MarkerNavigationWidget = __decorate([
    __param(1, _themeServiceJs.IThemeService),
    __param(2, _openerJs.IOpenerService),
    __param(3, _actionsJs.IMenuService),
    __param(4, _instantiationJs.IInstantiationService),
    __param(5, _contextkeyJs.IContextKeyService),
    __param(6, _labelJs.ILabelService)
], MarkerNavigationWidget);
// theming
var errorDefault = _colorRegistryJs.oneOf(_colorRegistryJs.editorErrorForeground, _colorRegistryJs.editorErrorBorder);
var warningDefault = _colorRegistryJs.oneOf(_colorRegistryJs.editorWarningForeground, _colorRegistryJs.editorWarningBorder);
var infoDefault = _colorRegistryJs.oneOf(_colorRegistryJs.editorInfoForeground, _colorRegistryJs.editorInfoBorder);
var editorMarkerNavigationError = _colorRegistryJs.registerColor('editorMarkerNavigationError.background', {
    dark: errorDefault,
    light: errorDefault,
    hc: _colorRegistryJs.contrastBorder
}, _nlsJs.localize('editorMarkerNavigationError', 'Editor marker navigation widget error color.'));
var editorMarkerNavigationErrorHeader = _colorRegistryJs.registerColor('editorMarkerNavigationError.headerBackground', {
    dark: _colorRegistryJs.transparent(editorMarkerNavigationError, .1),
    light: _colorRegistryJs.transparent(editorMarkerNavigationError, .1),
    hc: null
}, _nlsJs.localize('editorMarkerNavigationErrorHeaderBackground', 'Editor marker navigation widget error heading background.'));
var editorMarkerNavigationWarning = _colorRegistryJs.registerColor('editorMarkerNavigationWarning.background', {
    dark: warningDefault,
    light: warningDefault,
    hc: _colorRegistryJs.contrastBorder
}, _nlsJs.localize('editorMarkerNavigationWarning', 'Editor marker navigation widget warning color.'));
var editorMarkerNavigationWarningHeader = _colorRegistryJs.registerColor('editorMarkerNavigationWarning.headerBackground', {
    dark: _colorRegistryJs.transparent(editorMarkerNavigationWarning, .1),
    light: _colorRegistryJs.transparent(editorMarkerNavigationWarning, .1),
    hc: '#0C141F'
}, _nlsJs.localize('editorMarkerNavigationWarningBackground', 'Editor marker navigation widget warning heading background.'));
var editorMarkerNavigationInfo = _colorRegistryJs.registerColor('editorMarkerNavigationInfo.background', {
    dark: infoDefault,
    light: infoDefault,
    hc: _colorRegistryJs.contrastBorder
}, _nlsJs.localize('editorMarkerNavigationInfo', 'Editor marker navigation widget info color.'));
var editorMarkerNavigationInfoHeader = _colorRegistryJs.registerColor('editorMarkerNavigationInfo.headerBackground', {
    dark: _colorRegistryJs.transparent(editorMarkerNavigationInfo, .1),
    light: _colorRegistryJs.transparent(editorMarkerNavigationInfo, .1),
    hc: null
}, _nlsJs.localize('editorMarkerNavigationInfoHeaderBackground', 'Editor marker navigation widget info heading background.'));
var editorMarkerNavigationBackground = _colorRegistryJs.registerColor('editorMarkerNavigation.background', {
    dark: _colorRegistryJs.editorBackground,
    light: _colorRegistryJs.editorBackground,
    hc: _colorRegistryJs.editorBackground
}, _nlsJs.localize('editorMarkerNavigationBackground', 'Editor marker navigation widget background.'));

},{"@swc/helpers":"erO4s","../../../base/browser/dom.js":"bxmlc","../../../base/browser/ui/scrollbar/scrollableElement.js":"gBkC9","../../../base/common/arrays.js":"bZs3E","../../../base/common/color.js":"2jKDp","../../../base/common/event.js":"9IBcK","../../../base/common/labels.js":"kDPEJ","../../../base/common/lifecycle.js":"bcbPy","../../../base/common/resources.js":"14HNj","../../../base/common/strings.js":"jsb6w","./media/gotoErrorWidget.css":"2oyWd","../../common/core/range.js":"VbyL8","../peekView/peekView.js":"j4XyJ","../../../nls.js":"9djYb","../../../platform/actions/browser/menuEntryActionViewItem.js":"jm3Jq","../../../platform/actions/common/actions.js":"1qoxQ","../../../platform/contextkey/common/contextkey.js":"5cjav","../../../platform/instantiation/common/instantiation.js":"9ABZB","../../../platform/label/common/label.js":"3WfP2","../../../platform/markers/common/markers.js":"4CrDH","../../../platform/opener/common/opener.js":"nEUGw","../../../platform/severityIcon/common/severityIcon.js":"errvw","../../../platform/theme/common/colorRegistry.js":"lKtxS","../../../platform/theme/common/themeService.js":"kE7QB","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"2oyWd":[function() {},{}],"errvw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SeverityIcon", function() {
    return SeverityIcon;
});
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _codiconsJs = require("../../../base/common/codicons.js");
var _severityJs = require("../../../base/common/severity.js");
var _severityJsDefault = parcelHelpers.interopDefault(_severityJs);
var _colorRegistryJs = require("../../theme/common/colorRegistry.js");
var _themeServiceJs = require("../../theme/common/themeService.js");
var SeverityIcon;
(function(SeverityIcon1) {
    function className(severity) {
        switch(severity){
            case _severityJsDefault.default.Ignore:
                return 'severity-ignore ' + _codiconsJs.Codicon.info.classNames;
            case _severityJsDefault.default.Info:
                return _codiconsJs.Codicon.info.classNames;
            case _severityJsDefault.default.Warning:
                return _codiconsJs.Codicon.warning.classNames;
            case _severityJsDefault.default.Error:
                return _codiconsJs.Codicon.error.classNames;
            default:
                return '';
        }
    }
    SeverityIcon1.className = className;
})(SeverityIcon || (SeverityIcon = {}));
_themeServiceJs.registerThemingParticipant(function(theme, collector) {
    var errorIconForeground = theme.getColor(_colorRegistryJs.problemsErrorIconForeground);
    if (errorIconForeground) {
        var errorCodiconSelector = _codiconsJs.Codicon.error.cssSelector;
        collector.addRule("\n			.monaco-editor .zone-widget ".concat(errorCodiconSelector, ",\n			.markers-panel .marker-icon").concat(errorCodiconSelector, ",\n			.text-search-provider-messages .providerMessage ").concat(errorCodiconSelector, ",\n			.extensions-viewlet > .extensions ").concat(errorCodiconSelector, " {\n				color: ").concat(errorIconForeground, ";\n			}\n		"));
    }
    var warningIconForeground = theme.getColor(_colorRegistryJs.problemsWarningIconForeground);
    if (warningIconForeground) {
        var warningCodiconSelector = _codiconsJs.Codicon.warning.cssSelector;
        collector.addRule("\n			.monaco-editor .zone-widget ".concat(warningCodiconSelector, ",\n			.markers-panel .marker-icon").concat(warningCodiconSelector, ",\n			.extensions-viewlet > .extensions ").concat(warningCodiconSelector, ",\n			.extension-editor ").concat(warningCodiconSelector, ",\n			.text-search-provider-messages .providerMessage ").concat(warningCodiconSelector, ",\n			.preferences-editor ").concat(warningCodiconSelector, " {\n				color: ").concat(warningIconForeground, ";\n			}\n		"));
    }
    var infoIconForeground = theme.getColor(_colorRegistryJs.problemsInfoIconForeground);
    if (infoIconForeground) {
        var infoCodiconSelector = _codiconsJs.Codicon.info.cssSelector;
        collector.addRule("\n			.monaco-editor .zone-widget ".concat(infoCodiconSelector, ",\n			.markers-panel .marker-icon").concat(infoCodiconSelector, ",\n			.extensions-viewlet > .extensions ").concat(infoCodiconSelector, ",\n			.text-search-provider-messages .providerMessage ").concat(infoCodiconSelector, ",\n			.extension-editor ").concat(infoCodiconSelector, " {\n				color: ").concat(infoIconForeground, ";\n			}\n		"));
    }
});

},{"../../../base/common/codicons.js":"j24JC","../../../base/common/severity.js":"a9BBX","../../theme/common/colorRegistry.js":"lKtxS","../../theme/common/themeService.js":"kE7QB","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"eqxGz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "InlineCompletionsHover", function() {
    return InlineCompletionsHover;
});
parcelHelpers.export(exports, "InlineCompletionsHoverParticipant", function() {
    return InlineCompletionsHoverParticipant;
});
var _helpers = require("@swc/helpers");
var _domJs = require("../../../base/browser/dom.js");
var _htmlContentJs = require("../../../base/common/htmlContent.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _markdownRendererJs = require("../../browser/core/markdownRenderer.js");
var _rangeJs = require("../../common/core/range.js");
var _modeServiceJs = require("../../common/services/modeService.js");
var _hoverTypesJs = require("../hover/hoverTypes.js");
var _ghostTextControllerJs = require("./ghostTextController.js");
var _nlsJs = require("../../../nls.js");
var _accessibilityJs = require("../../../platform/accessibility/common/accessibility.js");
var _actionsJs = require("../../../platform/actions/common/actions.js");
var _commandsJs = require("../../../platform/commands/common/commands.js");
var _contextkeyJs = require("../../../platform/contextkey/common/contextkey.js");
var _openerJs = require("../../../platform/opener/common/opener.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var InlineCompletionsHover = /*#__PURE__*/ function() {
    "use strict";
    function InlineCompletionsHover(owner, range, controller) {
        _helpers.classCallCheck(this, InlineCompletionsHover);
        this.owner = owner;
        this.range = range;
        this.controller = controller;
    }
    _helpers.createClass(InlineCompletionsHover, [
        {
            key: "isValidForHoverAnchor",
            value: function isValidForHoverAnchor(anchor) {
                return anchor.type === 1 /* Range */  && this.range.startColumn <= anchor.range.startColumn && this.range.endColumn >= anchor.range.endColumn;
            }
        },
        {
            key: "hasMultipleSuggestions",
            value: function hasMultipleSuggestions() {
                return this.controller.hasMultipleInlineCompletions();
            }
        }
    ]);
    return InlineCompletionsHover;
}();
var InlineCompletionsHoverParticipant = /*#__PURE__*/ function() {
    "use strict";
    function InlineCompletionsHoverParticipant1(_editor, _hover, _commandService, _menuService, _contextKeyService, _modeService, _openerService, accessibilityService) {
        _helpers.classCallCheck(this, InlineCompletionsHoverParticipant1);
        this._editor = _editor;
        this._hover = _hover;
        this._commandService = _commandService;
        this._menuService = _menuService;
        this._contextKeyService = _contextKeyService;
        this._modeService = _modeService;
        this._openerService = _openerService;
        this.accessibilityService = accessibilityService;
    }
    _helpers.createClass(InlineCompletionsHoverParticipant1, [
        {
            key: "suggestHoverAnchor",
            value: function suggestHoverAnchor(mouseEvent) {
                var controller = _ghostTextControllerJs.GhostTextController.get(this._editor);
                if (!controller) return null;
                if (mouseEvent.target.type === 8 /* CONTENT_VIEW_ZONE */ ) {
                    // handle the case where the mouse is over the view zone
                    var viewZoneData = mouseEvent.target.detail;
                    if (controller.shouldShowHoverAtViewZone(viewZoneData.viewZoneId)) return new _hoverTypesJs.HoverForeignElementAnchor(1000, this, _rangeJs.Range.fromPositions(viewZoneData.positionBefore || viewZoneData.position, viewZoneData.positionBefore || viewZoneData.position));
                }
                if (mouseEvent.target.type === 7 /* CONTENT_EMPTY */  && mouseEvent.target.range) {
                    // handle the case where the mouse is over the empty portion of a line following ghost text
                    if (controller.shouldShowHoverAt(mouseEvent.target.range)) return new _hoverTypesJs.HoverForeignElementAnchor(1000, this, mouseEvent.target.range);
                }
                if (mouseEvent.target.type === 6 /* CONTENT_TEXT */  && mouseEvent.target.range && mouseEvent.target.detail) {
                    // handle the case where the mouse is directly over ghost text
                    var mightBeForeignElement = mouseEvent.target.detail.mightBeForeignElement;
                    if (mightBeForeignElement && controller.shouldShowHoverAt(mouseEvent.target.range)) return new _hoverTypesJs.HoverForeignElementAnchor(1000, this, mouseEvent.target.range);
                }
                return null;
            }
        },
        {
            key: "computeSync",
            value: function computeSync(anchor, lineDecorations) {
                var controller = _ghostTextControllerJs.GhostTextController.get(this._editor);
                if (controller && controller.shouldShowHoverAt(anchor.range)) return [
                    new InlineCompletionsHover(this, anchor.range, controller)
                ];
                return [];
            }
        },
        {
            key: "renderHoverParts",
            value: function renderHoverParts(hoverParts, fragment, statusBar) {
                var _this = this;
                var disposableStore = new _lifecycleJs.DisposableStore();
                var part = hoverParts[0];
                if (this.accessibilityService.isScreenReaderOptimized()) this.renderScreenReaderText(part, fragment, disposableStore);
                var menu = disposableStore.add(this._menuService.createMenu(_actionsJs.MenuId.InlineCompletionsActions, this._contextKeyService));
                var previousAction = statusBar.addAction({
                    label: _nlsJs.localize('showNextInlineSuggestion', "Next"),
                    commandId: _ghostTextControllerJs.ShowNextInlineSuggestionAction.ID,
                    run: function() {
                        return _this._commandService.executeCommand(_ghostTextControllerJs.ShowNextInlineSuggestionAction.ID);
                    }
                });
                var nextAction = statusBar.addAction({
                    label: _nlsJs.localize('showPreviousInlineSuggestion', "Previous"),
                    commandId: _ghostTextControllerJs.ShowPreviousInlineSuggestionAction.ID,
                    run: function() {
                        return _this._commandService.executeCommand(_ghostTextControllerJs.ShowPreviousInlineSuggestionAction.ID);
                    }
                });
                statusBar.addAction({
                    label: _nlsJs.localize('acceptInlineSuggestion', "Accept"),
                    commandId: _ghostTextControllerJs.commitInlineSuggestionAction.id,
                    run: function() {
                        return _this._commandService.executeCommand(_ghostTextControllerJs.commitInlineSuggestionAction.id);
                    }
                });
                var actions = [
                    previousAction,
                    nextAction
                ];
                var _iteratorNormalCompletion3 = true, _didIteratorError3 = false, _iteratorError3 = undefined;
                try {
                    for(var _iterator = actions[Symbol.iterator](), _step; !(_iteratorNormalCompletion3 = (_step = _iterator.next()).done); _iteratorNormalCompletion3 = true){
                        var action = _step.value;
                        action.setEnabled(false);
                    }
                } catch (err) {
                    _didIteratorError3 = true;
                    _iteratorError3 = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion3 && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError3) {
                            throw _iteratorError3;
                        }
                    }
                }
                part.hasMultipleSuggestions().then(function(hasMore) {
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator = actions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var action = _step.value;
                            action.setEnabled(hasMore);
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                });
                var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                try {
                    for(var _iterator1 = menu.getActions()[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                        var _value = _helpers.slicedToArray(_step1.value, 2), _ = _value[0], group = _value[1];
                        var _this1 = this;
                        var _iteratorNormalCompletion2 = true, _didIteratorError2 = false, _iteratorError2 = undefined;
                        try {
                            var _loop = function(_iterator2, _step2) {
                                var action = _step2.value;
                                if (action instanceof _actionsJs.MenuItemAction) statusBar.addAction({
                                    label: action.label,
                                    commandId: action.item.id,
                                    run: function() {
                                        return _this1._commandService.executeCommand(action.item.id);
                                    }
                                });
                            };
                            for(var _iterator2 = group[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true)_loop(_iterator2, _step2);
                        } catch (err) {
                            _didIteratorError2 = true;
                            _iteratorError2 = err;
                        } finally{
                            try {
                                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                                    _iterator2.return();
                                }
                            } finally{
                                if (_didIteratorError2) {
                                    throw _iteratorError2;
                                }
                            }
                        }
                    }
                } catch (err) {
                    _didIteratorError1 = true;
                    _iteratorError1 = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                            _iterator1.return();
                        }
                    } finally{
                        if (_didIteratorError1) {
                            throw _iteratorError1;
                        }
                    }
                }
                return disposableStore;
            }
        },
        {
            key: "renderScreenReaderText",
            value: function renderScreenReaderText(part, fragment, disposableStore) {
                var _this = this;
                var _a, _b;
                var $ = _domJs.$;
                var markdownHoverElement = $('div.hover-row.markdown-hover');
                var hoverContentsElement = _domJs.append(markdownHoverElement, $('div.hover-contents'));
                var renderer = disposableStore.add(new _markdownRendererJs.MarkdownRenderer({
                    editor: this._editor
                }, this._modeService, this._openerService));
                var render = function(code) {
                    var _this2 = _this;
                    disposableStore.add(renderer.onDidRenderAsync(function() {
                        hoverContentsElement.className = 'hover-contents code-hover-contents';
                        _this2._hover.onContentsChanged();
                    }));
                    var inlineSuggestionAvailable = _nlsJs.localize('inlineSuggestionFollows', "Suggestion:");
                    var renderedContents = disposableStore.add(renderer.render(new _htmlContentJs.MarkdownString().appendText(inlineSuggestionAvailable).appendCodeblock('text', code)));
                    hoverContentsElement.replaceChildren(renderedContents.element);
                };
                var ghostText = (_b = (_a = part.controller.activeModel) === null || _a === void 0 ? void 0 : _a.inlineCompletionsModel) === null || _b === void 0 ? void 0 : _b.ghostText;
                if (ghostText) {
                    var lineText = this._editor.getModel().getLineContent(ghostText.lineNumber);
                    render(ghostText.renderForScreenReader(lineText));
                }
                fragment.appendChild(markdownHoverElement);
            }
        }
    ]);
    return InlineCompletionsHoverParticipant1;
}();
InlineCompletionsHoverParticipant = __decorate([
    __param(2, _commandsJs.ICommandService),
    __param(3, _actionsJs.IMenuService),
    __param(4, _contextkeyJs.IContextKeyService),
    __param(5, _modeServiceJs.IModeService),
    __param(6, _openerJs.IOpenerService),
    __param(7, _accessibilityJs.IAccessibilityService)
], InlineCompletionsHoverParticipant);

},{"@swc/helpers":"erO4s","../../../base/browser/dom.js":"bxmlc","../../../base/common/htmlContent.js":"i3TMB","../../../base/common/lifecycle.js":"bcbPy","../../browser/core/markdownRenderer.js":"7tjMJ","../../common/core/range.js":"VbyL8","../../common/services/modeService.js":"dNIX6","../hover/hoverTypes.js":"3k1AC","./ghostTextController.js":"kRSDa","../../../nls.js":"9djYb","../../../platform/accessibility/common/accessibility.js":"26z4P","../../../platform/actions/common/actions.js":"1qoxQ","../../../platform/commands/common/commands.js":"eeuTC","../../../platform/contextkey/common/contextkey.js":"5cjav","../../../platform/opener/common/opener.js":"nEUGw","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"kRSDa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GhostTextController", function() {
    return GhostTextController;
});
parcelHelpers.export(exports, "ActiveGhostTextController", function() {
    return ActiveGhostTextController;
});
parcelHelpers.export(exports, "commitInlineSuggestionAction", function() {
    return commitInlineSuggestionAction;
});
parcelHelpers.export(exports, "ShowNextInlineSuggestionAction", function() {
    return ShowNextInlineSuggestionAction;
});
parcelHelpers.export(exports, "ShowPreviousInlineSuggestionAction", function() {
    return ShowPreviousInlineSuggestionAction;
});
parcelHelpers.export(exports, "TriggerInlineSuggestionAction", function() {
    return TriggerInlineSuggestionAction;
});
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _stringsJs = require("../../../base/common/strings.js");
var _editorExtensionsJs = require("../../browser/editorExtensions.js");
var _cursorColumnsJs = require("../../common/controller/cursorColumns.js");
var _editorContextKeysJs = require("../../common/editorContextKeys.js");
var _constsJs = require("./consts.js");
var _ghostTextModelJs = require("./ghostTextModel.js");
var _ghostTextWidgetJs = require("./ghostTextWidget.js");
var _nlsJs = require("../../../nls.js");
var _contextkeyJs = require("../../../platform/contextkey/common/contextkey.js");
var _instantiationJs = require("../../../platform/instantiation/common/instantiation.js");
var _keybindingsRegistryJs = require("../../../platform/keybinding/common/keybindingsRegistry.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var GhostTextController = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(GhostTextController1, Disposable);
    var _super = _helpers.createSuper(GhostTextController1);
    function GhostTextController1(editor, instantiationService) {
        _helpers.classCallCheck(this, GhostTextController1);
        var _this;
        _this = _super.call(this);
        _this.editor = editor;
        _this.instantiationService = instantiationService;
        _this.triggeredExplicitly = false;
        _this.activeController = _this._register(new _lifecycleJs.MutableDisposable());
        _this._register(_this.editor.onDidChangeModel(function() {
            _this.updateModelController();
        }));
        _this._register(_this.editor.onDidChangeConfiguration(function(e) {
            if (e.hasChanged(105 /* suggest */ )) _this.updateModelController();
            if (e.hasChanged(54 /* inlineSuggest */ )) _this.updateModelController();
        }));
        _this.updateModelController();
        return _this;
    }
    _helpers.createClass(GhostTextController1, [
        {
            key: "activeModel",
            get: function get() {
                var _a;
                return (_a = this.activeController.value) === null || _a === void 0 ? void 0 : _a.model;
            }
        },
        {
            // Don't call this method when not neccessary. It will recreate the activeController.
            key: "updateModelController",
            value: function updateModelController() {
                var suggestOptions = this.editor.getOption(105 /* suggest */ );
                var inlineSuggestOptions = this.editor.getOption(54 /* inlineSuggest */ );
                this.activeController.value = undefined;
                // ActiveGhostTextController is only created if one of those settings is set or if the inline completions are triggered explicitly.
                this.activeController.value = this.editor.hasModel() && (suggestOptions.preview || inlineSuggestOptions.enabled || this.triggeredExplicitly) ? this.instantiationService.createInstance(ActiveGhostTextController, this.editor) : undefined;
            }
        },
        {
            key: "shouldShowHoverAt",
            value: function shouldShowHoverAt(hoverRange) {
                var _a;
                return ((_a = this.activeModel) === null || _a === void 0 ? void 0 : _a.shouldShowHoverAt(hoverRange)) || false;
            }
        },
        {
            key: "shouldShowHoverAtViewZone",
            value: function shouldShowHoverAtViewZone(viewZoneId) {
                var _a, _b;
                return ((_b = (_a = this.activeController.value) === null || _a === void 0 ? void 0 : _a.widget) === null || _b === void 0 ? void 0 : _b.shouldShowHoverAtViewZone(viewZoneId)) || false;
            }
        },
        {
            key: "trigger",
            value: function trigger() {
                var _a;
                this.triggeredExplicitly = true;
                if (!this.activeController.value) this.updateModelController();
                (_a = this.activeModel) === null || _a === void 0 || _a.triggerInlineCompletion();
            }
        },
        {
            key: "commit",
            value: function commit() {
                var _a;
                (_a = this.activeModel) === null || _a === void 0 || _a.commitInlineCompletion();
            }
        },
        {
            key: "hide",
            value: function hide() {
                var _a;
                (_a = this.activeModel) === null || _a === void 0 || _a.hideInlineCompletion();
            }
        },
        {
            key: "showNextInlineCompletion",
            value: function showNextInlineCompletion() {
                var _a;
                (_a = this.activeModel) === null || _a === void 0 || _a.showNextInlineCompletion();
            }
        },
        {
            key: "showPreviousInlineCompletion",
            value: function showPreviousInlineCompletion() {
                var _a;
                (_a = this.activeModel) === null || _a === void 0 || _a.showPreviousInlineCompletion();
            }
        },
        {
            key: "hasMultipleInlineCompletions",
            value: function hasMultipleInlineCompletions() {
                var _a;
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var result;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                _ctx.next = 2;
                                return (_a = this.activeModel) === null || _a === void 0 ? void 0 : _a.hasMultipleInlineCompletions();
                            case 2:
                                result = _ctx.sent;
                                return _ctx.abrupt("return", result !== undefined ? result : false);
                            case 4:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this);
                }));
            }
        }
    ], [
        {
            key: "get",
            value: function get(editor) {
                return editor.getContribution(GhostTextController1.ID);
            }
        }
    ]);
    return GhostTextController1;
}(_lifecycleJs.Disposable);
GhostTextController.inlineSuggestionVisible = new _contextkeyJs.RawContextKey('inlineSuggestionVisible', false, _nlsJs.localize('inlineSuggestionVisible', "Whether an inline suggestion is visible"));
GhostTextController.inlineSuggestionHasIndentation = new _contextkeyJs.RawContextKey('inlineSuggestionHasIndentation', false, _nlsJs.localize('inlineSuggestionHasIndentation', "Whether the inline suggestion starts with whitespace"));
GhostTextController.inlineSuggestionHasIndentationLessThanTabSize = new _contextkeyJs.RawContextKey('inlineSuggestionHasIndentationLessThanTabSize', true, _nlsJs.localize('inlineSuggestionHasIndentationLessThanTabSize', "Whether the inline suggestion starts with whitespace that is less than what would be inserted by tab"));
GhostTextController.ID = 'editor.contrib.ghostTextController';
GhostTextController = __decorate([
    __param(1, _instantiationJs.IInstantiationService)
], GhostTextController);
var GhostTextContextKeys = function GhostTextContextKeys(contextKeyService) {
    "use strict";
    _helpers.classCallCheck(this, GhostTextContextKeys);
    this.contextKeyService = contextKeyService;
    this.inlineCompletionVisible = GhostTextController.inlineSuggestionVisible.bindTo(this.contextKeyService);
    this.inlineCompletionSuggestsIndentation = GhostTextController.inlineSuggestionHasIndentation.bindTo(this.contextKeyService);
    this.inlineCompletionSuggestsIndentationLessThanTabSize = GhostTextController.inlineSuggestionHasIndentationLessThanTabSize.bindTo(this.contextKeyService);
};
/**
 * The controller for a text editor with an initialized text model.
 * Must be disposed as soon as the model detaches from the editor.
*/ var ActiveGhostTextController = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(ActiveGhostTextController1, Disposable);
    var _super = _helpers.createSuper(ActiveGhostTextController1);
    function ActiveGhostTextController1(editor, instantiationService, contextKeyService) {
        _helpers.classCallCheck(this, ActiveGhostTextController1);
        var _this;
        _this = _super.call(this);
        _this.editor = editor;
        _this.instantiationService = instantiationService;
        _this.contextKeyService = contextKeyService;
        _this.contextKeys = new GhostTextContextKeys(_this.contextKeyService);
        _this.model = _this._register(_this.instantiationService.createInstance(_ghostTextModelJs.GhostTextModel, _this.editor));
        _this.widget = _this._register(_this.instantiationService.createInstance(_ghostTextWidgetJs.GhostTextWidget, _this.editor, _this.model));
        _this._register(_lifecycleJs.toDisposable(function() {
            _this.contextKeys.inlineCompletionVisible.set(false);
            _this.contextKeys.inlineCompletionSuggestsIndentation.set(false);
            _this.contextKeys.inlineCompletionSuggestsIndentationLessThanTabSize.set(true);
        }));
        _this._register(_this.model.onDidChange(function() {
            _this.updateContextKeys();
        }));
        _this.updateContextKeys();
        return _this;
    }
    _helpers.createClass(ActiveGhostTextController1, [
        {
            key: "updateContextKeys",
            value: function updateContextKeys() {
                var _a;
                this.contextKeys.inlineCompletionVisible.set(((_a = this.model.activeInlineCompletionsModel) === null || _a === void 0 ? void 0 : _a.ghostText) !== undefined);
                var startsWithIndentation = false;
                var startsWithIndentationLessThanTabSize = true;
                var ghostText = this.model.inlineCompletionsModel.ghostText;
                if (!!this.model.activeInlineCompletionsModel && ghostText && ghostText.parts.length > 0) {
                    var ref = ghostText.parts[0], column = ref.column, lines = ref.lines;
                    var firstLine = lines[0];
                    var indentationEndColumn = this.editor.getModel().getLineIndentColumn(ghostText.lineNumber);
                    var inIndentation = column <= indentationEndColumn;
                    if (inIndentation) {
                        var firstNonWsIdx = _stringsJs.firstNonWhitespaceIndex(firstLine);
                        if (firstNonWsIdx === -1) firstNonWsIdx = firstLine.length - 1;
                        startsWithIndentation = firstNonWsIdx > 0;
                        var tabSize = this.editor.getModel().getOptions().tabSize;
                        var visibleColumnIndentation = _cursorColumnsJs.CursorColumns.visibleColumnFromColumn(firstLine, firstNonWsIdx + 1, tabSize);
                        startsWithIndentationLessThanTabSize = visibleColumnIndentation < tabSize;
                    }
                }
                this.contextKeys.inlineCompletionSuggestsIndentation.set(startsWithIndentation);
                this.contextKeys.inlineCompletionSuggestsIndentationLessThanTabSize.set(startsWithIndentationLessThanTabSize);
            }
        }
    ]);
    return ActiveGhostTextController1;
}(_lifecycleJs.Disposable);
ActiveGhostTextController = __decorate([
    __param(1, _instantiationJs.IInstantiationService),
    __param(2, _contextkeyJs.IContextKeyService)
], ActiveGhostTextController);
var GhostTextCommand = _editorExtensionsJs.EditorCommand.bindToContribution(GhostTextController.get);
var commitInlineSuggestionAction = new GhostTextCommand({
    id: _constsJs.inlineSuggestCommitId,
    precondition: GhostTextController.inlineSuggestionVisible,
    handler: function(x) {
        x.commit();
        x.editor.focus();
    }
});
_editorExtensionsJs.registerEditorCommand(commitInlineSuggestionAction);
_keybindingsRegistryJs.KeybindingsRegistry.registerKeybindingRule({
    primary: 2 /* Tab */ ,
    weight: 200,
    id: commitInlineSuggestionAction.id,
    when: _contextkeyJs.ContextKeyExpr.and(commitInlineSuggestionAction.precondition, _editorContextKeysJs.EditorContextKeys.tabMovesFocus.toNegated(), GhostTextController.inlineSuggestionHasIndentationLessThanTabSize)
});
_editorExtensionsJs.registerEditorCommand(new GhostTextCommand({
    id: 'editor.action.inlineSuggest.hide',
    precondition: GhostTextController.inlineSuggestionVisible,
    kbOpts: {
        weight: 100,
        primary: 9 /* Escape */ 
    },
    handler: function(x) {
        x.hide();
    }
}));
var ShowNextInlineSuggestionAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(ShowNextInlineSuggestionAction, EditorAction);
    var _super = _helpers.createSuper(ShowNextInlineSuggestionAction);
    function ShowNextInlineSuggestionAction() {
        _helpers.classCallCheck(this, ShowNextInlineSuggestionAction);
        return _super.call(this, {
            id: ShowNextInlineSuggestionAction.ID,
            label: _nlsJs.localize('action.inlineSuggest.showNext', "Show Next Inline Suggestion"),
            alias: 'Show Next Inline Suggestion',
            precondition: _contextkeyJs.ContextKeyExpr.and(_editorContextKeysJs.EditorContextKeys.writable, GhostTextController.inlineSuggestionVisible),
            kbOpts: {
                weight: 100,
                primary: 601 /* BracketRight */ 
            }
        });
    }
    _helpers.createClass(ShowNextInlineSuggestionAction, [
        {
            key: "run",
            value: function run(accessor, editor) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var controller;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                controller = GhostTextController.get(editor);
                                if (controller) {
                                    controller.showNextInlineCompletion();
                                    editor.focus();
                                }
                            case 2:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee);
                }));
            }
        }
    ]);
    return ShowNextInlineSuggestionAction;
}(_editorExtensionsJs.EditorAction);
ShowNextInlineSuggestionAction.ID = 'editor.action.inlineSuggest.showNext';
var ShowPreviousInlineSuggestionAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(ShowPreviousInlineSuggestionAction, EditorAction);
    var _super = _helpers.createSuper(ShowPreviousInlineSuggestionAction);
    function ShowPreviousInlineSuggestionAction() {
        _helpers.classCallCheck(this, ShowPreviousInlineSuggestionAction);
        return _super.call(this, {
            id: ShowPreviousInlineSuggestionAction.ID,
            label: _nlsJs.localize('action.inlineSuggest.showPrevious', "Show Previous Inline Suggestion"),
            alias: 'Show Previous Inline Suggestion',
            precondition: _contextkeyJs.ContextKeyExpr.and(_editorContextKeysJs.EditorContextKeys.writable, GhostTextController.inlineSuggestionVisible),
            kbOpts: {
                weight: 100,
                primary: 599 /* BracketLeft */ 
            }
        });
    }
    _helpers.createClass(ShowPreviousInlineSuggestionAction, [
        {
            key: "run",
            value: function run(accessor, editor) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var controller;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                controller = GhostTextController.get(editor);
                                if (controller) {
                                    controller.showPreviousInlineCompletion();
                                    editor.focus();
                                }
                            case 2:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee);
                }));
            }
        }
    ]);
    return ShowPreviousInlineSuggestionAction;
}(_editorExtensionsJs.EditorAction);
ShowPreviousInlineSuggestionAction.ID = 'editor.action.inlineSuggest.showPrevious';
var TriggerInlineSuggestionAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(TriggerInlineSuggestionAction, EditorAction);
    var _super = _helpers.createSuper(TriggerInlineSuggestionAction);
    function TriggerInlineSuggestionAction() {
        _helpers.classCallCheck(this, TriggerInlineSuggestionAction);
        return _super.call(this, {
            id: 'editor.action.inlineSuggest.trigger',
            label: _nlsJs.localize('action.inlineSuggest.trigger', "Trigger Inline Suggestion"),
            alias: 'Trigger Inline Suggestion',
            precondition: _editorContextKeysJs.EditorContextKeys.writable
        });
    }
    _helpers.createClass(TriggerInlineSuggestionAction, [
        {
            key: "run",
            value: function run(accessor, editor) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var controller;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                controller = GhostTextController.get(editor);
                                if (controller) controller.trigger();
                            case 2:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee);
                }));
            }
        }
    ]);
    return TriggerInlineSuggestionAction;
}(_editorExtensionsJs.EditorAction);
_editorExtensionsJs.registerEditorContribution(GhostTextController.ID, GhostTextController);
_editorExtensionsJs.registerEditorAction(TriggerInlineSuggestionAction);
_editorExtensionsJs.registerEditorAction(ShowNextInlineSuggestionAction);
_editorExtensionsJs.registerEditorAction(ShowPreviousInlineSuggestionAction);

},{"@swc/helpers":"erO4s","regenerator-runtime":"12Ae8","../../../base/common/lifecycle.js":"bcbPy","../../../base/common/strings.js":"jsb6w","../../browser/editorExtensions.js":"dFnlo","../../common/controller/cursorColumns.js":"lcpc7","../../common/editorContextKeys.js":"2t2PW","./consts.js":"6m2KZ","./ghostTextModel.js":"74Oca","./ghostTextWidget.js":"sklnt","../../../nls.js":"9djYb","../../../platform/contextkey/common/contextkey.js":"5cjav","../../../platform/instantiation/common/instantiation.js":"9ABZB","../../../platform/keybinding/common/keybindingsRegistry.js":"5cRx5","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"6m2KZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "inlineSuggestCommitId", function() {
    return inlineSuggestCommitId;
});
var inlineSuggestCommitId = 'editor.action.inlineSuggest.commit';

},{"@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"74Oca":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DelegatingModel", function() {
    return DelegatingModel;
});
parcelHelpers.export(exports, "GhostTextModel", function() {
    return GhostTextModel;
});
parcelHelpers.export(exports, "SharedInlineCompletionCache", function() {
    return SharedInlineCompletionCache;
});
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
var _eventJs = require("../../../base/common/event.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _positionJs = require("../../common/core/position.js");
var _modesJs = require("../../common/modes.js");
var _inlineCompletionsModelJs = require("./inlineCompletionsModel.js");
var _suggestWidgetPreviewModelJs = require("./suggestWidgetPreviewModel.js");
var _utilsJs = require("./utils.js");
var _commandsJs = require("../../../platform/commands/common/commands.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var DelegatingModel = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(DelegatingModel, Disposable);
    var _super = _helpers.createSuper(DelegatingModel);
    function DelegatingModel() {
        _helpers.classCallCheck(this, DelegatingModel);
        var _this;
        _this = _super.call.apply(_super, [
            this
        ].concat(Array.prototype.slice.call(arguments)));
        _this.onDidChangeEmitter = new _eventJs.Emitter();
        _this.onDidChange = _this.onDidChangeEmitter.event;
        _this.hasCachedGhostText = false;
        _this.currentModelRef = _this._register(new _lifecycleJs.MutableDisposable());
        return _this;
    }
    _helpers.createClass(DelegatingModel, [
        {
            key: "targetModel",
            get: function get() {
                var _a;
                return (_a = this.currentModelRef.value) === null || _a === void 0 ? void 0 : _a.object;
            }
        },
        {
            key: "setTargetModel",
            value: function setTargetModel(model) {
                var _this = this;
                var _a;
                if (((_a = this.currentModelRef.value) === null || _a === void 0 ? void 0 : _a.object) === model) return;
                this.currentModelRef.clear();
                this.currentModelRef.value = model ? _utilsJs.createDisposableRef(model, model.onDidChange(function() {
                    _this.hasCachedGhostText = false;
                    _this.onDidChangeEmitter.fire();
                })) : undefined;
                this.hasCachedGhostText = false;
                this.onDidChangeEmitter.fire();
            }
        },
        {
            key: "ghostText",
            get: function get() {
                var _a, _b;
                if (!this.hasCachedGhostText) {
                    this.cachedGhostText = (_b = (_a = this.currentModelRef.value) === null || _a === void 0 ? void 0 : _a.object) === null || _b === void 0 ? void 0 : _b.ghostText;
                    this.hasCachedGhostText = true;
                }
                return this.cachedGhostText;
            }
        },
        {
            key: "setExpanded",
            value: function setExpanded(expanded) {
                var _a;
                (_a = this.targetModel) === null || _a === void 0 || _a.setExpanded(expanded);
            }
        },
        {
            key: "minReservedLineCount",
            get: function get() {
                return this.targetModel ? this.targetModel.minReservedLineCount : 0;
            }
        }
    ]);
    return DelegatingModel;
}(_lifecycleJs.Disposable);
/**
 * A ghost text model that is both driven by inline completions and the suggest widget.
*/ var GhostTextModel = /*#__PURE__*/ function(DelegatingModel) {
    "use strict";
    _helpers.inherits(GhostTextModel1, DelegatingModel);
    var _super = _helpers.createSuper(GhostTextModel1);
    function GhostTextModel1(editor, commandService) {
        _helpers.classCallCheck(this, GhostTextModel1);
        var _this;
        _this = _super.call(this);
        _this.editor = editor;
        _this.commandService = commandService;
        _this.sharedCache = _this._register(new SharedInlineCompletionCache());
        _this.suggestWidgetAdapterModel = _this._register(new _suggestWidgetPreviewModelJs.SuggestWidgetPreviewModel(_this.editor, _this.sharedCache));
        _this.inlineCompletionsModel = _this._register(new _inlineCompletionsModelJs.InlineCompletionsModel(_this.editor, _this.sharedCache, _this.commandService));
        _this._register(_this.suggestWidgetAdapterModel.onDidChange(function() {
            _this.updateModel();
        }));
        _this.updateModel();
        return _this;
    }
    _helpers.createClass(GhostTextModel1, [
        {
            key: "activeInlineCompletionsModel",
            get: function get() {
                if (this.targetModel === this.inlineCompletionsModel) return this.inlineCompletionsModel;
                return undefined;
            }
        },
        {
            key: "updateModel",
            value: function updateModel() {
                this.setTargetModel(this.suggestWidgetAdapterModel.isActive ? this.suggestWidgetAdapterModel : this.inlineCompletionsModel);
                this.inlineCompletionsModel.setActive(this.targetModel === this.inlineCompletionsModel);
            }
        },
        {
            key: "shouldShowHoverAt",
            value: function shouldShowHoverAt(hoverRange) {
                var _a;
                var ghostText = (_a = this.activeInlineCompletionsModel) === null || _a === void 0 ? void 0 : _a.ghostText;
                if (ghostText) return ghostText.parts.some(function(p) {
                    return hoverRange.containsPosition(new _positionJs.Position(ghostText.lineNumber, p.column));
                });
                return false;
            }
        },
        {
            key: "triggerInlineCompletion",
            value: function triggerInlineCompletion() {
                var _a;
                (_a = this.activeInlineCompletionsModel) === null || _a === void 0 || _a.trigger(_modesJs.InlineCompletionTriggerKind.Explicit);
            }
        },
        {
            key: "commitInlineCompletion",
            value: function commitInlineCompletion() {
                var _a;
                (_a = this.activeInlineCompletionsModel) === null || _a === void 0 || _a.commitCurrentSuggestion();
            }
        },
        {
            key: "hideInlineCompletion",
            value: function hideInlineCompletion() {
                var _a;
                (_a = this.activeInlineCompletionsModel) === null || _a === void 0 || _a.hide();
            }
        },
        {
            key: "showNextInlineCompletion",
            value: function showNextInlineCompletion() {
                var _a;
                (_a = this.activeInlineCompletionsModel) === null || _a === void 0 || _a.showNext();
            }
        },
        {
            key: "showPreviousInlineCompletion",
            value: function showPreviousInlineCompletion() {
                var _a;
                (_a = this.activeInlineCompletionsModel) === null || _a === void 0 || _a.showPrevious();
            }
        },
        {
            key: "hasMultipleInlineCompletions",
            value: function hasMultipleInlineCompletions() {
                var _a;
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var result;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                _ctx.next = 2;
                                return (_a = this.activeInlineCompletionsModel) === null || _a === void 0 ? void 0 : _a.hasMultipleInlineCompletions();
                            case 2:
                                result = _ctx.sent;
                                return _ctx.abrupt("return", result !== undefined ? result : false);
                            case 4:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this);
                }));
            }
        }
    ]);
    return GhostTextModel1;
}(DelegatingModel);
GhostTextModel = __decorate([
    __param(1, _commandsJs.ICommandService)
], GhostTextModel);
var SharedInlineCompletionCache = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(SharedInlineCompletionCache, Disposable);
    var _super = _helpers.createSuper(SharedInlineCompletionCache);
    function SharedInlineCompletionCache() {
        _helpers.classCallCheck(this, SharedInlineCompletionCache);
        var _this;
        _this = _super.call.apply(_super, [
            this
        ].concat(Array.prototype.slice.call(arguments)));
        _this.onDidChangeEmitter = new _eventJs.Emitter();
        _this.onDidChange = _this.onDidChangeEmitter.event;
        _this.cache = _this._register(new _lifecycleJs.MutableDisposable());
        return _this;
    }
    _helpers.createClass(SharedInlineCompletionCache, [
        {
            key: "value",
            get: function get() {
                return this.cache.value;
            }
        },
        {
            key: "setValue",
            value: function setValue(editor, completionsSource, triggerKind) {
                var _this = this;
                this.cache.value = new _inlineCompletionsModelJs.SynchronizedInlineCompletionsCache(editor, completionsSource, function() {
                    return _this.onDidChangeEmitter.fire();
                }, triggerKind);
            }
        },
        {
            key: "clearAndLeak",
            value: function clearAndLeak() {
                return this.cache.clearAndLeak();
            }
        },
        {
            key: "clear",
            value: function clear() {
                this.cache.clear();
            }
        }
    ]);
    return SharedInlineCompletionCache;
}(_lifecycleJs.Disposable);

},{"@swc/helpers":"erO4s","regenerator-runtime":"12Ae8","../../../base/common/event.js":"9IBcK","../../../base/common/lifecycle.js":"bcbPy","../../common/core/position.js":"6xP0w","../../common/modes.js":"bRbY1","./inlineCompletionsModel.js":"kkubk","./suggestWidgetPreviewModel.js":"KhE22","./utils.js":"f2zPM","../../../platform/commands/common/commands.js":"eeuTC","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"kkubk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "InlineCompletionsModel", function() {
    return InlineCompletionsModel;
});
parcelHelpers.export(exports, "InlineCompletionsSession", function() {
    return InlineCompletionsSession;
});
parcelHelpers.export(exports, "UpdateOperation", function() {
    return UpdateOperation;
});
parcelHelpers.export(exports, "SynchronizedInlineCompletionsCache", function() {
    return SynchronizedInlineCompletionsCache;
});
parcelHelpers.export(exports, "provideInlineCompletions", function() {
    return provideInlineCompletions;
});
parcelHelpers.export(exports, "minimizeInlineCompletion", function() {
    return minimizeInlineCompletion;
});
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
var _asyncJs = require("../../../base/common/async.js");
var _cancellationJs = require("../../../base/common/cancellation.js");
var _errorsJs = require("../../../base/common/errors.js");
var _eventJs = require("../../../base/common/event.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _stringsJs = require("../../../base/common/strings.js");
var _coreCommandsJs = require("../../browser/controller/coreCommands.js");
var _editOperationJs = require("../../common/core/editOperation.js");
var _rangeJs = require("../../common/core/range.js");
var _modesJs = require("../../common/modes.js");
var _ghostTextJs = require("./ghostText.js");
var _commandsJs = require("../../../platform/commands/common/commands.js");
var _constsJs = require("./consts.js");
var _inlineCompletionToGhostTextJs = require("./inlineCompletionToGhostText.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var InlineCompletionsModel = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(InlineCompletionsModel1, Disposable);
    var _super = _helpers.createSuper(InlineCompletionsModel1);
    function InlineCompletionsModel1(editor, cache, commandService) {
        _helpers.classCallCheck(this, InlineCompletionsModel1);
        var _this;
        _this = _super.call(this);
        _this.editor = editor;
        _this.cache = cache;
        _this.commandService = commandService;
        _this.onDidChangeEmitter = new _eventJs.Emitter();
        _this.onDidChange = _this.onDidChangeEmitter.event;
        _this.completionSession = _this._register(new _lifecycleJs.MutableDisposable());
        _this.active = false;
        _this.disposed = false;
        _this._register(commandService.onDidExecuteCommand(function(e) {
            // These commands don't trigger onDidType.
            var commands = new Set([
                _coreCommandsJs.CoreEditingCommands.Tab.id,
                _coreCommandsJs.CoreEditingCommands.DeleteLeft.id,
                _coreCommandsJs.CoreEditingCommands.DeleteRight.id,
                _constsJs.inlineSuggestCommitId,
                'acceptSelectedSuggestion'
            ]);
            if (commands.has(e.commandId) && editor.hasTextFocus()) _this.handleUserInput();
        }));
        _this._register(_this.editor.onDidType(function(e) {
            _this.handleUserInput();
        }));
        _this._register(_this.editor.onDidChangeCursorPosition(function(e) {
            if (_this.session && !_this.session.isValid) _this.hide();
        }));
        _this._register(_lifecycleJs.toDisposable(function() {
            _this.disposed = true;
        }));
        _this._register(_this.editor.onDidBlurEditorWidget(function() {
            _this.hide();
        }));
        return _this;
    }
    _helpers.createClass(InlineCompletionsModel1, [
        {
            key: "handleUserInput",
            value: function handleUserInput() {
                var _this = this;
                if (this.session && !this.session.isValid) this.hide();
                setTimeout(function() {
                    if (_this.disposed) return;
                    // Wait for the cursor update that happens in the same iteration loop iteration
                    _this.startSessionIfTriggered();
                }, 0);
            }
        },
        {
            key: "session",
            get: function get() {
                return this.completionSession.value;
            }
        },
        {
            key: "ghostText",
            get: function get() {
                var _a;
                return (_a = this.session) === null || _a === void 0 ? void 0 : _a.ghostText;
            }
        },
        {
            key: "minReservedLineCount",
            get: function get() {
                return this.session ? this.session.minReservedLineCount : 0;
            }
        },
        {
            key: "setExpanded",
            value: function setExpanded(expanded) {
                var _a;
                (_a = this.session) === null || _a === void 0 || _a.setExpanded(expanded);
            }
        },
        {
            key: "setActive",
            value: function setActive(active) {
                var _a;
                this.active = active;
                if (active) (_a = this.session) === null || _a === void 0 || _a.scheduleAutomaticUpdate();
            }
        },
        {
            key: "startSessionIfTriggered",
            value: function startSessionIfTriggered() {
                var suggestOptions = this.editor.getOption(54 /* inlineSuggest */ );
                if (!suggestOptions.enabled) return;
                if (this.session && this.session.isValid) return;
                this.trigger(_modesJs.InlineCompletionTriggerKind.Automatic);
            }
        },
        {
            key: "trigger",
            value: function trigger(triggerKind) {
                var _this = this;
                if (this.completionSession.value) {
                    if (triggerKind === _modesJs.InlineCompletionTriggerKind.Explicit) this.completionSession.value.ensureUpdateWithExplicitContext();
                    return;
                }
                this.completionSession.value = new InlineCompletionsSession(this.editor, this.editor.getPosition(), function() {
                    return _this.active;
                }, this.commandService, this.cache, triggerKind);
                this.completionSession.value.takeOwnership(this.completionSession.value.onDidChange(function() {
                    _this.onDidChangeEmitter.fire();
                }));
            }
        },
        {
            key: "hide",
            value: function hide() {
                this.completionSession.clear();
                this.onDidChangeEmitter.fire();
            }
        },
        {
            key: "commitCurrentSuggestion",
            value: function commitCurrentSuggestion() {
                var _a;
                // Don't dispose the session, so that after committing, more suggestions are shown.
                (_a = this.session) === null || _a === void 0 || _a.commitCurrentCompletion();
            }
        },
        {
            key: "showNext",
            value: function showNext() {
                var _a;
                (_a = this.session) === null || _a === void 0 || _a.showNextInlineCompletion();
            }
        },
        {
            key: "showPrevious",
            value: function showPrevious() {
                var _a;
                (_a = this.session) === null || _a === void 0 || _a.showPreviousInlineCompletion();
            }
        },
        {
            key: "hasMultipleInlineCompletions",
            value: function hasMultipleInlineCompletions() {
                var _a;
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var result;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                _ctx.next = 2;
                                return (_a = this.session) === null || _a === void 0 ? void 0 : _a.hasMultipleInlineCompletions();
                            case 2:
                                result = _ctx.sent;
                                return _ctx.abrupt("return", result !== undefined ? result : false);
                            case 4:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this);
                }));
            }
        }
    ]);
    return InlineCompletionsModel1;
}(_lifecycleJs.Disposable);
InlineCompletionsModel = __decorate([
    __param(2, _commandsJs.ICommandService)
], InlineCompletionsModel);
var InlineCompletionsSession = /*#__PURE__*/ function(BaseGhostTextWidgetModel) {
    "use strict";
    _helpers.inherits(InlineCompletionsSession, BaseGhostTextWidgetModel);
    var _super = _helpers.createSuper(InlineCompletionsSession);
    function InlineCompletionsSession(editor, triggerPosition, shouldUpdate, commandService, cache, initialTriggerKind) {
        _helpers.classCallCheck(this, InlineCompletionsSession);
        var _this;
        _this = _super.call(this, editor);
        _this.triggerPosition = triggerPosition;
        _this.shouldUpdate = shouldUpdate;
        _this.commandService = commandService;
        _this.cache = cache;
        _this.initialTriggerKind = initialTriggerKind;
        _this.minReservedLineCount = 0;
        _this.updateOperation = _this._register(new _lifecycleJs.MutableDisposable());
        _this.updateSoon = _this._register(new _asyncJs.RunOnceScheduler(function() {
            var triggerKind = _this.initialTriggerKind;
            // All subsequent triggers are automatic.
            _this.initialTriggerKind = _modesJs.InlineCompletionTriggerKind.Automatic;
            return _this.update(triggerKind);
        }, 50));
        //#region Selection
        // We use a semantic id to track the selection even if the cache changes.
        _this.currentlySelectedCompletionId = undefined;
        var lastCompletionItem = undefined;
        _this._register(_this.onDidChange(function() {
            var currentCompletion = _this.currentCompletion;
            if (currentCompletion && currentCompletion.sourceInlineCompletion !== lastCompletionItem) {
                lastCompletionItem = currentCompletion.sourceInlineCompletion;
                var provider = currentCompletion.sourceProvider;
                if (provider.handleItemDidShow) provider.handleItemDidShow(currentCompletion.sourceInlineCompletions, lastCompletionItem);
            }
        }));
        _this._register(_lifecycleJs.toDisposable(function() {
            _this.cache.clear();
        }));
        _this._register(_this.editor.onDidChangeCursorPosition(function(e) {
            if (_this.cache.value) _this.onDidChangeEmitter.fire();
        }));
        _this._register(_this.editor.onDidChangeModelContent(function(e) {
            _this.scheduleAutomaticUpdate();
        }));
        _this._register(_modesJs.InlineCompletionsProviderRegistry.onDidChange(function() {
            _this.updateSoon.schedule();
        }));
        _this.scheduleAutomaticUpdate();
        return _this;
    }
    _helpers.createClass(InlineCompletionsSession, [
        {
            key: "fixAndGetIndexOfCurrentSelection",
            value: function fixAndGetIndexOfCurrentSelection() {
                var _this = this;
                if (!this.currentlySelectedCompletionId || !this.cache.value) return 0;
                if (this.cache.value.completions.length === 0) // don't reset the selection in this case
                return 0;
                var idx = this.cache.value.completions.findIndex(function(v) {
                    return v.semanticId === _this.currentlySelectedCompletionId;
                });
                if (idx === -1) {
                    // Reset the selection so that the selection does not jump back when it appears again
                    this.currentlySelectedCompletionId = undefined;
                    return 0;
                }
                return idx;
            }
        },
        {
            key: "currentCachedCompletion",
            get: function get() {
                if (!this.cache.value) return undefined;
                return this.cache.value.completions[this.fixAndGetIndexOfCurrentSelection()];
            }
        },
        {
            key: "showNextInlineCompletion",
            value: function showNextInlineCompletion() {
                var _a;
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var completions, newIdx;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                _ctx.next = 2;
                                return this.ensureUpdateWithExplicitContext();
                            case 2:
                                completions = ((_a = this.cache.value) === null || _a === void 0 ? void 0 : _a.completions) || [];
                                if (completions.length > 0) {
                                    newIdx = (this.fixAndGetIndexOfCurrentSelection() + 1) % completions.length;
                                    this.currentlySelectedCompletionId = completions[newIdx].semanticId;
                                } else this.currentlySelectedCompletionId = undefined;
                                this.onDidChangeEmitter.fire();
                            case 5:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this);
                }));
            }
        },
        {
            key: "showPreviousInlineCompletion",
            value: function showPreviousInlineCompletion() {
                var _a;
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var completions, newIdx;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                _ctx.next = 2;
                                return this.ensureUpdateWithExplicitContext();
                            case 2:
                                completions = ((_a = this.cache.value) === null || _a === void 0 ? void 0 : _a.completions) || [];
                                if (completions.length > 0) {
                                    newIdx = (this.fixAndGetIndexOfCurrentSelection() + completions.length - 1) % completions.length;
                                    this.currentlySelectedCompletionId = completions[newIdx].semanticId;
                                } else this.currentlySelectedCompletionId = undefined;
                                this.onDidChangeEmitter.fire();
                            case 5:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this);
                }));
            }
        },
        {
            key: "ensureUpdateWithExplicitContext",
            value: function ensureUpdateWithExplicitContext() {
                var _a;
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                if (!this.updateOperation.value) {
                                    _ctx.next = 10;
                                    break;
                                }
                                if (!(this.updateOperation.value.triggerKind === _modesJs.InlineCompletionTriggerKind.Explicit)) {
                                    _ctx.next = 6;
                                    break;
                                }
                                _ctx.next = 4;
                                return this.updateOperation.value.promise;
                            case 4:
                                _ctx.next = 8;
                                break;
                            case 6:
                                _ctx.next = 8;
                                return this.update(_modesJs.InlineCompletionTriggerKind.Explicit);
                            case 8:
                                _ctx.next = 13;
                                break;
                            case 10:
                                if (!(((_a = this.cache.value) === null || _a === void 0 ? void 0 : _a.triggerKind) !== _modesJs.InlineCompletionTriggerKind.Explicit)) {
                                    _ctx.next = 13;
                                    break;
                                }
                                _ctx.next = 13;
                                return this.update(_modesJs.InlineCompletionTriggerKind.Explicit);
                            case 13:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this);
                }));
            }
        },
        {
            key: "hasMultipleInlineCompletions",
            value: function hasMultipleInlineCompletions() {
                var _a;
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                _ctx.next = 2;
                                return this.ensureUpdateWithExplicitContext();
                            case 2:
                                return _ctx.abrupt("return", (((_a = this.cache.value) === null || _a === void 0 ? void 0 : _a.completions.length) || 0) > 1);
                            case 3:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this);
                }));
            }
        },
        {
            key: "ghostText",
            get: //#endregion
            function get() {
                var currentCompletion = this.currentCompletion;
                var mode = this.editor.getOptions().get(54 /* inlineSuggest */ ).mode;
                return currentCompletion ? _inlineCompletionToGhostTextJs.inlineCompletionToGhostText(currentCompletion, this.editor.getModel(), mode, this.editor.getPosition()) : undefined;
            }
        },
        {
            key: "currentCompletion",
            get: function get() {
                var completion = this.currentCachedCompletion;
                if (!completion) return undefined;
                return completion.toLiveInlineCompletion();
            }
        },
        {
            key: "isValid",
            get: function get() {
                return this.editor.getPosition().lineNumber === this.triggerPosition.lineNumber;
            }
        },
        {
            key: "scheduleAutomaticUpdate",
            value: function scheduleAutomaticUpdate() {
                // Since updateSoon debounces, starvation can happen.
                // To prevent stale cache, we clear the current update operation.
                this.updateOperation.clear();
                this.updateSoon.schedule();
            }
        },
        {
            key: "update",
            value: function update(triggerKind) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee1() {
                    var _this, position, promise, operation;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx1) {
                        while(1)switch(_ctx1.prev = _ctx1.next){
                            case 0:
                                _this = this;
                                if (this.shouldUpdate()) {
                                    _ctx1.next = 3;
                                    break;
                                }
                                return _ctx1.abrupt("return");
                            case 3:
                                position = this.editor.getPosition();
                                promise = _asyncJs.createCancelablePromise(function(token) {
                                    return __awaiter(_this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                                        var result;
                                        return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                                            while(1)switch(_ctx.prev = _ctx.next){
                                                case 0:
                                                    ;
                                                    _ctx.prev = 1;
                                                    _ctx.next = 4;
                                                    return provideInlineCompletions(position, this.editor.getModel(), {
                                                        triggerKind: triggerKind,
                                                        selectedSuggestionInfo: undefined
                                                    }, token);
                                                case 4:
                                                    result = _ctx.sent;
                                                    _ctx.next = 11;
                                                    break;
                                                case 7:
                                                    _ctx.prev = 7;
                                                    _ctx.t0 = _ctx["catch"](1);
                                                    _errorsJs.onUnexpectedError(_ctx.t0);
                                                    return _ctx.abrupt("return");
                                                case 11:
                                                    if (!token.isCancellationRequested) {
                                                        _ctx.next = 13;
                                                        break;
                                                    }
                                                    return _ctx.abrupt("return");
                                                case 13:
                                                    this.cache.setValue(this.editor, result, triggerKind);
                                                    this.onDidChangeEmitter.fire();
                                                case 15:
                                                case "end":
                                                    return _ctx.stop();
                                            }
                                        }, _callee, this, [
                                            [
                                                1,
                                                7
                                            ]
                                        ]);
                                    }));
                                });
                                operation = new UpdateOperation(promise, triggerKind);
                                this.updateOperation.value = operation;
                                _ctx1.next = 9;
                                return promise;
                            case 9:
                                if (this.updateOperation.value === operation) this.updateOperation.clear();
                            case 10:
                            case "end":
                                return _ctx1.stop();
                        }
                    }, _callee1, this);
                }));
            }
        },
        {
            key: "takeOwnership",
            value: function takeOwnership(disposable) {
                this._register(disposable);
            }
        },
        {
            key: "commitCurrentCompletion",
            value: function commitCurrentCompletion() {
                if (!this.ghostText) // No ghost text was shown for this completion.
                // Thus, we don't want to commit anything.
                return;
                var completion = this.currentCompletion;
                if (completion) this.commit(completion);
            }
        },
        {
            key: "commit",
            value: function commit(completion) {
                var _commandService;
                // Mark the cache as stale, but don't dispose it yet,
                // otherwise command args might get disposed.
                var cache = this.cache.clearAndLeak();
                this.editor.executeEdits('inlineSuggestion.accept', [
                    _editOperationJs.EditOperation.replaceMove(completion.range, completion.text)
                ]);
                if (completion.command) (_commandService = this.commandService).executeCommand.apply(_commandService, [
                    completion.command.id
                ].concat(_helpers.toConsumableArray(completion.command.arguments || []))).finally(function() {
                    cache === null || cache === void 0 || cache.dispose();
                }).then(undefined, _errorsJs.onUnexpectedExternalError);
                else cache === null || cache === void 0 || cache.dispose();
                this.onDidChangeEmitter.fire();
            }
        }
    ]);
    return InlineCompletionsSession;
}(_ghostTextJs.BaseGhostTextWidgetModel);
var UpdateOperation = /*#__PURE__*/ function() {
    "use strict";
    function UpdateOperation(promise, triggerKind) {
        _helpers.classCallCheck(this, UpdateOperation);
        this.promise = promise;
        this.triggerKind = triggerKind;
    }
    _helpers.createClass(UpdateOperation, [
        {
            key: "dispose",
            value: function dispose() {
                this.promise.cancel();
            }
        }
    ]);
    return UpdateOperation;
}();
var SynchronizedInlineCompletionsCache = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(SynchronizedInlineCompletionsCache, Disposable);
    var _super = _helpers.createSuper(SynchronizedInlineCompletionsCache);
    function SynchronizedInlineCompletionsCache(editor, completionsSource, onChange, triggerKind) {
        _helpers.classCallCheck(this, SynchronizedInlineCompletionsCache);
        var _this;
        _this = _super.call(this);
        _this.triggerKind = triggerKind;
        var decorationIds = editor.deltaDecorations([], completionsSource.items.map(function(i) {
            return {
                range: i.range,
                options: {
                    description: 'inline-completion-tracking-range'
                }
            };
        }));
        _this._register(_lifecycleJs.toDisposable(function() {
            editor.deltaDecorations(decorationIds, []);
        }));
        _this.completions = completionsSource.items.map(function(c, idx) {
            return new CachedInlineCompletion(c, decorationIds[idx]);
        });
        _this._register(editor.onDidChangeModelContent(function() {
            var hasChanged = false;
            var model = editor.getModel();
            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
            try {
                for(var _iterator = _this.completions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                    var c = _step.value;
                    var newRange = model.getDecorationRange(c.decorationId);
                    if (!newRange) {
                        _errorsJs.onUnexpectedError(new Error('Decoration has no range'));
                        continue;
                    }
                    if (!c.synchronizedRange.equalsRange(newRange)) {
                        hasChanged = true;
                        c.synchronizedRange = newRange;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally{
                try {
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                    }
                } finally{
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
            if (hasChanged) onChange();
        }));
        _this._register(completionsSource);
        return _this;
    }
    return SynchronizedInlineCompletionsCache;
}(_lifecycleJs.Disposable);
var CachedInlineCompletion = /*#__PURE__*/ function() {
    "use strict";
    function CachedInlineCompletion(inlineCompletion, decorationId) {
        _helpers.classCallCheck(this, CachedInlineCompletion);
        this.inlineCompletion = inlineCompletion;
        this.decorationId = decorationId;
        this.semanticId = JSON.stringify({
            text: this.inlineCompletion.text,
            startLine: this.inlineCompletion.range.startLineNumber,
            startColumn: this.inlineCompletion.range.startColumn,
            command: this.inlineCompletion.command
        });
        this.synchronizedRange = inlineCompletion.range;
    }
    _helpers.createClass(CachedInlineCompletion, [
        {
            key: "toLiveInlineCompletion",
            value: function toLiveInlineCompletion() {
                return {
                    text: this.inlineCompletion.text,
                    range: this.synchronizedRange,
                    command: this.inlineCompletion.command,
                    sourceProvider: this.inlineCompletion.sourceProvider,
                    sourceInlineCompletions: this.inlineCompletion.sourceInlineCompletions,
                    sourceInlineCompletion: this.inlineCompletion.sourceInlineCompletion
                };
            }
        }
    ]);
    return CachedInlineCompletion;
}();
function getDefaultRange(position, model) {
    var word = model.getWordAtPosition(position);
    var maxColumn = model.getLineMaxColumn(position.lineNumber);
    // By default, always replace up until the end of the current line.
    // This default might be subject to change!
    return word ? new _rangeJs.Range(position.lineNumber, word.startColumn, position.lineNumber, maxColumn) : _rangeJs.Range.fromPositions(position, position.with(undefined, maxColumn));
}
function provideInlineCompletions(position, model, context) {
    var token = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : _cancellationJs.CancellationToken.None;
    return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee2() {
        var _this, defaultReplaceRange, providers, results, itemsByHash, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, result1, completions1, _iteratorNormalCompletion1, _didIteratorError1, _iteratorError1, _iterator1, _step1, item1;
        return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx2) {
            while(1)switch(_ctx2.prev = _ctx2.next){
                case 0:
                    _this = this;
                    defaultReplaceRange = getDefaultRange(position, model);
                    providers = _modesJs.InlineCompletionsProviderRegistry.all(model);
                    _ctx2.next = 5;
                    return Promise.all(providers.map(function(provider) {
                        return __awaiter(_this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                            var completions;
                            return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                                while(1)switch(_ctx.prev = _ctx.next){
                                    case 0:
                                        _ctx.next = 2;
                                        return provider.provideInlineCompletions(model, position, context, token);
                                    case 2:
                                        completions = _ctx.sent;
                                        return _ctx.abrupt("return", {
                                            completions: completions,
                                            provider: provider,
                                            dispose: function() {
                                                if (completions) provider.freeInlineCompletions(completions);
                                            }
                                        });
                                    case 4:
                                    case "end":
                                        return _ctx.stop();
                                }
                            }, _callee);
                        }));
                    }));
                case 5:
                    results = _ctx2.sent;
                    itemsByHash = new Map();
                    _iteratorNormalCompletion2 = true, _didIteratorError2 = false, _iteratorError2 = undefined;
                    _ctx2.prev = 8;
                    _iterator2 = results[Symbol.iterator]();
                case 10:
                    if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                        _ctx2.next = 42;
                        break;
                    }
                    result1 = _step2.value;
                    completions1 = result1.completions;
                    _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                    if (!completions1) {
                        _ctx2.next = 39;
                        break;
                    }
                    _ctx2.prev = 15;
                    _iterator1 = completions1.items.map(function(item) {
                        return {
                            text: item.text,
                            range: item.range ? _rangeJs.Range.lift(item.range) : defaultReplaceRange,
                            command: item.command,
                            sourceProvider: result1.provider,
                            sourceInlineCompletions: completions1,
                            sourceInlineCompletion: item
                        };
                    })[Symbol.iterator]();
                case 17:
                    if (_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done) {
                        _ctx2.next = 25;
                        break;
                    }
                    item1 = _step1.value;
                    if (!(item1.range.startLineNumber !== item1.range.endLineNumber)) {
                        _ctx2.next = 21;
                        break;
                    }
                    return _ctx2.abrupt("continue", 22);
                case 21:
                    itemsByHash.set(JSON.stringify({
                        text: item1.text,
                        range: item1.range
                    }), item1);
                case 22:
                    _iteratorNormalCompletion1 = true;
                    _ctx2.next = 17;
                    break;
                case 25:
                    _ctx2.next = 31;
                    break;
                case 27:
                    _ctx2.prev = 27;
                    _ctx2.t0 = _ctx2["catch"](15);
                    _didIteratorError1 = true;
                    _iteratorError1 = _ctx2.t0;
                case 31:
                    _ctx2.prev = 31;
                    _ctx2.prev = 32;
                    if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                        _iterator1.return();
                    }
                case 34:
                    _ctx2.prev = 34;
                    if (!_didIteratorError1) {
                        _ctx2.next = 37;
                        break;
                    }
                    throw _iteratorError1;
                case 37:
                    return _ctx2.finish(34);
                case 38:
                    return _ctx2.finish(31);
                case 39:
                    _iteratorNormalCompletion2 = true;
                    _ctx2.next = 10;
                    break;
                case 42:
                    _ctx2.next = 48;
                    break;
                case 44:
                    _ctx2.prev = 44;
                    _ctx2.t1 = _ctx2["catch"](8);
                    _didIteratorError2 = true;
                    _iteratorError2 = _ctx2.t1;
                case 48:
                    _ctx2.prev = 48;
                    _ctx2.prev = 49;
                    if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                        _iterator2.return();
                    }
                case 51:
                    _ctx2.prev = 51;
                    if (!_didIteratorError2) {
                        _ctx2.next = 54;
                        break;
                    }
                    throw _iteratorError2;
                case 54:
                    return _ctx2.finish(51);
                case 55:
                    return _ctx2.finish(48);
                case 56:
                    return _ctx2.abrupt("return", {
                        items: _helpers.toConsumableArray(itemsByHash.values()),
                        dispose: function() {
                            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                            try {
                                for(var _iterator = results[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                                    var result = _step.value;
                                    result.dispose();
                                }
                            } catch (err) {
                                _didIteratorError = true;
                                _iteratorError = err;
                            } finally{
                                try {
                                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                                        _iterator.return();
                                    }
                                } finally{
                                    if (_didIteratorError) {
                                        throw _iteratorError;
                                    }
                                }
                            }
                        }
                    });
                case 57:
                case "end":
                    return _ctx2.stop();
            }
        }, _callee2, this, [
            [
                8,
                44,
                48,
                56
            ],
            [
                15,
                27,
                31,
                39
            ],
            [
                32,
                ,
                34,
                38
            ],
            [
                49,
                ,
                51,
                55
            ]
        ]);
    }));
}
function minimizeInlineCompletion(model, inlineCompletion) {
    if (!inlineCompletion) return inlineCompletion;
    var valueToReplace = model.getValueInRange(inlineCompletion.range);
    var commonPrefixLen = _stringsJs.commonPrefixLength(valueToReplace, inlineCompletion.text);
    var startOffset = model.getOffsetAt(inlineCompletion.range.getStartPosition()) + commonPrefixLen;
    var start = model.getPositionAt(startOffset);
    var remainingValueToReplace = valueToReplace.substr(commonPrefixLen);
    var commonSuffixLen = _stringsJs.commonSuffixLength(remainingValueToReplace, inlineCompletion.text);
    var end = model.getPositionAt(Math.max(startOffset, model.getOffsetAt(inlineCompletion.range.getEndPosition()) - commonSuffixLen));
    return {
        range: _rangeJs.Range.fromPositions(start, end),
        text: inlineCompletion.text.substr(commonPrefixLen, inlineCompletion.text.length - commonPrefixLen - commonSuffixLen)
    };
}

},{"@swc/helpers":"erO4s","regenerator-runtime":"12Ae8","../../../base/common/async.js":"kMhSh","../../../base/common/cancellation.js":"1C4LY","../../../base/common/errors.js":"afm4i","../../../base/common/event.js":"9IBcK","../../../base/common/lifecycle.js":"bcbPy","../../../base/common/strings.js":"jsb6w","../../browser/controller/coreCommands.js":"3tROU","../../common/core/editOperation.js":"3D5yS","../../common/core/range.js":"VbyL8","../../common/modes.js":"bRbY1","./ghostText.js":"kVfgB","../../../platform/commands/common/commands.js":"eeuTC","./consts.js":"6m2KZ","./inlineCompletionToGhostText.js":"b2JNB","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"kVfgB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GhostText", function() {
    return GhostText;
});
parcelHelpers.export(exports, "GhostTextPart", function() {
    return GhostTextPart;
});
parcelHelpers.export(exports, "BaseGhostTextWidgetModel", function() {
    return BaseGhostTextWidgetModel;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _eventJs = require("../../../base/common/event.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _rangeJs = require("../../common/core/range.js");
var GhostText = /*#__PURE__*/ function() {
    "use strict";
    function GhostText(lineNumber, parts) {
        var additionalReservedLineCount = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
        _helpers.classCallCheck(this, GhostText);
        this.lineNumber = lineNumber;
        this.parts = parts;
        this.additionalReservedLineCount = additionalReservedLineCount;
    }
    _helpers.createClass(GhostText, [
        {
            key: "renderForScreenReader",
            value: function renderForScreenReader(lineText) {
                if (this.parts.length === 0) return '';
                var lastPart = this.parts[this.parts.length - 1];
                var cappedLineText = lineText.substr(0, lastPart.column - 1);
                var text = applyEdits(cappedLineText, this.parts.map(function(p) {
                    return {
                        range: {
                            startLineNumber: 1,
                            endLineNumber: 1,
                            startColumn: p.column,
                            endColumn: p.column
                        },
                        text: p.lines.join('\n')
                    };
                }));
                return text.substring(this.parts[0].column - 1);
            }
        }
    ]);
    return GhostText;
}();
var PositionOffsetTransformer = /*#__PURE__*/ function() {
    "use strict";
    function PositionOffsetTransformer(text) {
        _helpers.classCallCheck(this, PositionOffsetTransformer);
        this.lineStartOffsetByLineIdx = [];
        this.lineStartOffsetByLineIdx.push(0);
        for(var i = 0; i < text.length; i++)if (text.charAt(i) === '\n') this.lineStartOffsetByLineIdx.push(i + 1);
    }
    _helpers.createClass(PositionOffsetTransformer, [
        {
            key: "getOffset",
            value: function getOffset(position) {
                return this.lineStartOffsetByLineIdx[position.lineNumber - 1] + position.column - 1;
            }
        }
    ]);
    return PositionOffsetTransformer;
}();
function applyEdits(text, edits) {
    var transformer = new PositionOffsetTransformer(text);
    var offsetEdits = edits.map(function(e) {
        var range = _rangeJs.Range.lift(e.range);
        return {
            startOffset: transformer.getOffset(range.getStartPosition()),
            endOffset: transformer.getOffset(range.getEndPosition()),
            text: e.text
        };
    });
    offsetEdits.sort(function(a, b) {
        return b.startOffset - a.startOffset;
    });
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = offsetEdits[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var edit = _step.value;
            text = text.substring(0, edit.startOffset) + edit.text + text.substring(edit.endOffset);
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    return text;
}
var GhostTextPart = function GhostTextPart(column, lines, /**
     * Indicates if this part is a preview of an inline suggestion when a suggestion is previewed.
    */ preview) {
    "use strict";
    _helpers.classCallCheck(this, GhostTextPart);
    this.column = column;
    this.lines = lines;
    this.preview = preview;
};
var BaseGhostTextWidgetModel = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(BaseGhostTextWidgetModel, Disposable);
    var _super = _helpers.createSuper(BaseGhostTextWidgetModel);
    function BaseGhostTextWidgetModel(editor) {
        _helpers.classCallCheck(this, BaseGhostTextWidgetModel);
        var _this;
        _this = _super.call(this);
        _this.editor = editor;
        _this._expanded = undefined;
        _this.onDidChangeEmitter = new _eventJs.Emitter();
        _this.onDidChange = _this.onDidChangeEmitter.event;
        _this._register(editor.onDidChangeConfiguration(function(e) {
            if (e.hasChanged(105 /* suggest */ ) && _this._expanded === undefined) _this.onDidChangeEmitter.fire();
        }));
        return _this;
    }
    _helpers.createClass(BaseGhostTextWidgetModel, [
        {
            key: "setExpanded",
            value: function setExpanded(expanded) {
                this._expanded = true;
                this.onDidChangeEmitter.fire();
            }
        }
    ]);
    return BaseGhostTextWidgetModel;
}(_lifecycleJs.Disposable);

},{"@swc/helpers":"erO4s","../../../base/common/event.js":"9IBcK","../../../base/common/lifecycle.js":"bcbPy","../../common/core/range.js":"VbyL8","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"b2JNB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "normalizedInlineCompletionsEquals", function() {
    return normalizedInlineCompletionsEquals;
});
/**
 * @param previewSuffixLength Sets where to split `inlineCompletion.text`.
 * 	If the text is `hello` and the suffix length is 2, the non-preview part is `hel` and the preview-part is `lo`.
*/ parcelHelpers.export(exports, "inlineCompletionToGhostText", function() {
    return inlineCompletionToGhostText;
});
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _diffJs = require("../../../base/common/diff/diff.js");
var _stringsJs = require("../../../base/common/strings.js");
var _rangeJs = require("../../common/core/range.js");
var _ghostTextJs = require("./ghostText.js");
function normalizedInlineCompletionsEquals(a, b) {
    if (a === b) return true;
    if (!a || !b) return false;
    return a.range.equalsRange(b.range) && a.text === b.text && a.command === b.command;
}
function inlineCompletionToGhostText(inlineCompletion, textModel, mode, cursorPosition) {
    var previewSuffixLength = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0;
    if (inlineCompletion.range.startLineNumber !== inlineCompletion.range.endLineNumber) // Only single line replacements are supported.
    return undefined;
    var sourceLine = textModel.getLineContent(inlineCompletion.range.startLineNumber);
    var sourceIndentationLength = _stringsJs.getLeadingWhitespace(sourceLine).length;
    var suggestionTouchesIndentation = inlineCompletion.range.startColumn - 1 <= sourceIndentationLength;
    if (suggestionTouchesIndentation) {
        // source:      ··········[······abc]
        //                         ^^^^^^^^^ inlineCompletion.range
        //              ^^^^^^^^^^ ^^^^^^ sourceIndentationLength
        //                         ^^^^^^ replacedIndentation.length
        //                               ^^^ rangeThatDoesNotReplaceIndentation
        // inlineCompletion.text: '··foo'
        //                         ^^ suggestionAddedIndentationLength
        var suggestionAddedIndentationLength = _stringsJs.getLeadingWhitespace(inlineCompletion.text).length;
        var replacedIndentation = sourceLine.substring(inlineCompletion.range.startColumn - 1, sourceIndentationLength);
        var rangeThatDoesNotReplaceIndentation = _rangeJs.Range.fromPositions(inlineCompletion.range.getStartPosition().delta(0, replacedIndentation.length), inlineCompletion.range.getEndPosition());
        var suggestionWithoutIndentationChange = inlineCompletion.text.startsWith(replacedIndentation) ? inlineCompletion.text.substring(replacedIndentation.length) : inlineCompletion.text.substring(suggestionAddedIndentationLength);
        inlineCompletion = {
            range: rangeThatDoesNotReplaceIndentation,
            text: suggestionWithoutIndentationChange,
            command: inlineCompletion.command
        };
    }
    // This is a single line string
    var valueToBeReplaced = textModel.getValueInRange(inlineCompletion.range);
    var changes = cachingDiff(valueToBeReplaced, inlineCompletion.text);
    if (!changes) // No ghost text in case the diff would be too slow to compute
    return undefined;
    var lineNumber = inlineCompletion.range.startLineNumber;
    var parts = new Array();
    if (mode === 'prefix') {
        var filteredChanges = changes.filter(function(c) {
            return c.originalLength === 0;
        });
        if (filteredChanges.length > 1 || filteredChanges.length === 1 && filteredChanges[0].originalStart !== valueToBeReplaced.length) // Prefixes only have a single change.
        return undefined;
    }
    var previewStartInCompletionText = inlineCompletion.text.length - previewSuffixLength;
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = changes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var c1 = _step.value;
            var insertColumn = inlineCompletion.range.startColumn + c1.originalStart + c1.originalLength;
            if (mode === 'subwordSmart' && cursorPosition && cursorPosition.lineNumber === inlineCompletion.range.startLineNumber && insertColumn < cursorPosition.column) // No ghost text before cursor
            return undefined;
            if (c1.originalLength > 0) return undefined;
            if (c1.modifiedLength === 0) continue;
            var modifiedEnd = c1.modifiedStart + c1.modifiedLength;
            var nonPreviewTextEnd = Math.max(c1.modifiedStart, Math.min(modifiedEnd, previewStartInCompletionText));
            var nonPreviewText = inlineCompletion.text.substring(c1.modifiedStart, nonPreviewTextEnd);
            var italicText = inlineCompletion.text.substring(nonPreviewTextEnd, Math.max(c1.modifiedStart, modifiedEnd));
            if (nonPreviewText.length > 0) {
                var lines = _stringsJs.splitLines(nonPreviewText);
                parts.push(new _ghostTextJs.GhostTextPart(insertColumn, lines, false));
            }
            if (italicText.length > 0) {
                var lines1 = _stringsJs.splitLines(italicText);
                parts.push(new _ghostTextJs.GhostTextPart(insertColumn, lines1, true));
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    return new _ghostTextJs.GhostText(lineNumber, parts, 0);
}
var lastRequest = undefined;
function cachingDiff(originalValue, newValue) {
    if ((lastRequest === null || lastRequest === void 0 ? void 0 : lastRequest.originalValue) === originalValue && (lastRequest === null || lastRequest === void 0 ? void 0 : lastRequest.newValue) === newValue) return lastRequest === null || lastRequest === void 0 ? void 0 : lastRequest.changes;
    else {
        var changes = smartDiff(originalValue, newValue);
        lastRequest = {
            originalValue: originalValue,
            newValue: newValue,
            changes: changes
        };
        return changes;
    }
}
/**
 * When matching `if ()` with `if (f() = 1) { g(); }`,
 * align it like this:        `if (       )`
 * Not like this:			  `if (  )`
 * Also not like this:		  `if (             )`.
 *
 * The parenthesis are preprocessed to ensure that they match correctly.
 */ function smartDiff(originalValue, newValue) {
    if (originalValue.length > 5000 || newValue.length > 5000) // We don't want to work on strings that are too big
    return undefined;
    function getMaxCharCode(val) {
        var maxCharCode = 0;
        for(var i = 0, len = val.length; i < len; i++){
            var charCode = val.charCodeAt(i);
            if (charCode > maxCharCode) maxCharCode = charCode;
        }
        return maxCharCode;
    }
    var maxCharCode1 = Math.max(getMaxCharCode(originalValue), getMaxCharCode(newValue));
    function getUniqueCharCode(id) {
        if (id < 0) throw new Error('unexpected');
        return maxCharCode1 + id + 1;
    }
    function getElements(source) {
        var level = 0;
        var group = 0;
        var characters = new Int32Array(source.length);
        for(var i = 0, len = source.length; i < len; i++){
            var id = group * 100 + level;
            // TODO support more brackets
            if (source[i] === '(') {
                characters[i] = getUniqueCharCode(2 * id);
                level++;
            } else if (source[i] === ')') {
                characters[i] = getUniqueCharCode(2 * id + 1);
                if (level === 1) group++;
                level = Math.max(level - 1, 0);
            } else characters[i] = source.charCodeAt(i);
        }
        return characters;
    }
    var elements1 = getElements(originalValue);
    var elements2 = getElements(newValue);
    return new _diffJs.LcsDiff({
        getElements: function() {
            return elements1;
        }
    }, {
        getElements: function() {
            return elements2;
        }
    }).ComputeDiff(false).changes;
}

},{"../../../base/common/diff/diff.js":"7M2Rg","../../../base/common/strings.js":"jsb6w","../../common/core/range.js":"VbyL8","./ghostText.js":"kVfgB","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"KhE22":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SuggestWidgetPreviewModel", function() {
    return SuggestWidgetPreviewModel;
});
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
var _asyncJs = require("../../../base/common/async.js");
var _errorsJs = require("../../../base/common/errors.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _modesJs = require("../../common/modes.js");
var _ghostTextJs = require("./ghostText.js");
var _inlineCompletionsModelJs = require("./inlineCompletionsModel.js");
var _inlineCompletionToGhostTextJs = require("./inlineCompletionToGhostText.js");
var _suggestWidgetInlineCompletionProviderJs = require("./suggestWidgetInlineCompletionProvider.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var SuggestWidgetPreviewModel = /*#__PURE__*/ function(BaseGhostTextWidgetModel) {
    "use strict";
    _helpers.inherits(SuggestWidgetPreviewModel, BaseGhostTextWidgetModel);
    var _super = _helpers.createSuper(SuggestWidgetPreviewModel);
    function SuggestWidgetPreviewModel(editor, cache) {
        _helpers.classCallCheck(this, SuggestWidgetPreviewModel);
        var _this;
        _this = _super.call(this, editor);
        _this.cache = cache;
        _this.suggestionInlineCompletionSource = _this._register(new _suggestWidgetInlineCompletionProviderJs.SuggestWidgetInlineCompletionProvider(_this.editor, // Use the first cache item (if any) as preselection.
        function() {
            var _a, _b;
            return (_b = (_a = _this.cache.value) === null || _a === void 0 ? void 0 : _a.completions[0]) === null || _b === void 0 ? void 0 : _b.toLiveInlineCompletion();
        }));
        _this.updateOperation = _this._register(new _lifecycleJs.MutableDisposable());
        _this.updateCacheSoon = _this._register(new _asyncJs.RunOnceScheduler(function() {
            return _this.updateCache();
        }, 50));
        _this.minReservedLineCount = 0;
        _this._register(_this.suggestionInlineCompletionSource.onDidChange(function() {
            _this.updateCacheSoon.schedule();
            var suggestWidgetState = _this.suggestionInlineCompletionSource.state;
            if (!suggestWidgetState) _this.minReservedLineCount = 0;
            var newGhostText = _this.ghostText;
            if (newGhostText) _this.minReservedLineCount = Math.max(_this.minReservedLineCount, sum(newGhostText.parts.map(function(p) {
                return p.lines.length - 1;
            })));
            if (_this.minReservedLineCount >= 1) _this.suggestionInlineCompletionSource.forceRenderingAbove();
            else _this.suggestionInlineCompletionSource.stopForceRenderingAbove();
            _this.onDidChangeEmitter.fire();
        }));
        _this._register(_this.cache.onDidChange(function() {
            _this.onDidChangeEmitter.fire();
        }));
        _this._register(_this.editor.onDidChangeCursorPosition(function(e) {
            _this.minReservedLineCount = 0;
            _this.updateCacheSoon.schedule();
            _this.onDidChangeEmitter.fire();
        }));
        _this._register(_lifecycleJs.toDisposable(function() {
            return _this.suggestionInlineCompletionSource.stopForceRenderingAbove();
        }));
        return _this;
    }
    _helpers.createClass(SuggestWidgetPreviewModel, [
        {
            key: "isActive",
            get: function get() {
                return this.suggestionInlineCompletionSource.state !== undefined;
            }
        },
        {
            key: "isSuggestionPreviewEnabled",
            value: function isSuggestionPreviewEnabled() {
                var suggestOptions = this.editor.getOption(105 /* suggest */ );
                return suggestOptions.preview;
            }
        },
        {
            key: "updateCache",
            value: function updateCache() {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee1() {
                    var _this, state, info, position, promise, operation;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx1) {
                        while(1)switch(_ctx1.prev = _ctx1.next){
                            case 0:
                                _this = this;
                                state = this.suggestionInlineCompletionSource.state;
                                if (!(!state || !state.selectedItem)) {
                                    _ctx1.next = 4;
                                    break;
                                }
                                return _ctx1.abrupt("return");
                            case 4:
                                info = {
                                    text: state.selectedItem.normalizedInlineCompletion.text,
                                    range: state.selectedItem.normalizedInlineCompletion.range,
                                    isSnippetText: state.selectedItem.isSnippetText,
                                    completionKind: state.selectedItem.completionItemKind
                                };
                                position = this.editor.getPosition();
                                promise = _asyncJs.createCancelablePromise(function(token) {
                                    return __awaiter(_this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                                        var result;
                                        return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                                            while(1)switch(_ctx.prev = _ctx.next){
                                                case 0:
                                                    ;
                                                    _ctx.prev = 1;
                                                    _ctx.next = 4;
                                                    return _inlineCompletionsModelJs.provideInlineCompletions(position, this.editor.getModel(), {
                                                        triggerKind: _modesJs.InlineCompletionTriggerKind.Automatic,
                                                        selectedSuggestionInfo: info
                                                    }, token);
                                                case 4:
                                                    result = _ctx.sent;
                                                    _ctx.next = 11;
                                                    break;
                                                case 7:
                                                    _ctx.prev = 7;
                                                    _ctx.t0 = _ctx["catch"](1);
                                                    _errorsJs.onUnexpectedError(_ctx.t0);
                                                    return _ctx.abrupt("return");
                                                case 11:
                                                    if (!token.isCancellationRequested) {
                                                        _ctx.next = 13;
                                                        break;
                                                    }
                                                    return _ctx.abrupt("return");
                                                case 13:
                                                    this.cache.setValue(this.editor, result, _modesJs.InlineCompletionTriggerKind.Automatic);
                                                    this.onDidChangeEmitter.fire();
                                                case 15:
                                                case "end":
                                                    return _ctx.stop();
                                            }
                                        }, _callee, this, [
                                            [
                                                1,
                                                7
                                            ]
                                        ]);
                                    }));
                                });
                                operation = new _inlineCompletionsModelJs.UpdateOperation(promise, _modesJs.InlineCompletionTriggerKind.Automatic);
                                this.updateOperation.value = operation;
                                _ctx1.next = 11;
                                return promise;
                            case 11:
                                if (this.updateOperation.value === operation) this.updateOperation.clear();
                            case 12:
                            case "end":
                                return _ctx1.stop();
                        }
                    }, _callee1, this);
                }));
            }
        },
        {
            key: "ghostText",
            get: function get() {
                var _a, _b, _c;
                var isSuggestionPreviewEnabled = this.isSuggestionPreviewEnabled();
                var augmentedCompletion = _inlineCompletionsModelJs.minimizeInlineCompletion(this.editor.getModel(), (_b = (_a = this.cache.value) === null || _a === void 0 ? void 0 : _a.completions[0]) === null || _b === void 0 ? void 0 : _b.toLiveInlineCompletion());
                var suggestWidgetState = this.suggestionInlineCompletionSource.state;
                var suggestInlineCompletion = _inlineCompletionsModelJs.minimizeInlineCompletion(this.editor.getModel(), (_c = suggestWidgetState === null || suggestWidgetState === void 0 ? void 0 : suggestWidgetState.selectedItem) === null || _c === void 0 ? void 0 : _c.normalizedInlineCompletion);
                var isAugmentedCompletionValid = augmentedCompletion && suggestInlineCompletion && augmentedCompletion.text.startsWith(suggestInlineCompletion.text) && augmentedCompletion.range.equalsRange(suggestInlineCompletion.range);
                if (!isSuggestionPreviewEnabled && !isAugmentedCompletionValid) return undefined;
                // If the augmented completion is not valid and there is no suggest inline completion, we still show the augmented completion.
                var finalCompletion = isAugmentedCompletionValid ? augmentedCompletion : suggestInlineCompletion || augmentedCompletion;
                var inlineCompletionPreviewLength = isAugmentedCompletionValid ? finalCompletion.text.length - suggestInlineCompletion.text.length : 0;
                var newGhostText = this.toGhostText(finalCompletion, inlineCompletionPreviewLength);
                return newGhostText;
            }
        },
        {
            key: "toGhostText",
            value: function toGhostText(completion, inlineCompletionPreviewLength) {
                var mode = this.editor.getOptions().get(105 /* suggest */ ).previewMode;
                return completion ? _inlineCompletionToGhostTextJs.inlineCompletionToGhostText(completion, this.editor.getModel(), mode, this.editor.getPosition(), inlineCompletionPreviewLength) || // Show an invisible ghost text to reserve space
                new _ghostTextJs.GhostText(completion.range.endLineNumber, [], this.minReservedLineCount) : undefined;
            }
        }
    ]);
    return SuggestWidgetPreviewModel;
}(_ghostTextJs.BaseGhostTextWidgetModel);
function sum(arr) {
    return arr.reduce(function(a, b) {
        return a + b;
    }, 0);
}

},{"@swc/helpers":"erO4s","regenerator-runtime":"12Ae8","../../../base/common/async.js":"kMhSh","../../../base/common/errors.js":"afm4i","../../../base/common/lifecycle.js":"bcbPy","../../common/modes.js":"bRbY1","./ghostText.js":"kVfgB","./inlineCompletionsModel.js":"kkubk","./inlineCompletionToGhostText.js":"b2JNB","./suggestWidgetInlineCompletionProvider.js":"d1wvh","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"d1wvh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SuggestWidgetInlineCompletionProvider", function() {
    return SuggestWidgetInlineCompletionProvider;
});
parcelHelpers.export(exports, "rangeStartsWith", function() {
    return rangeStartsWith;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _asyncJs = require("../../../base/common/async.js");
var _eventJs = require("../../../base/common/event.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _positionJs = require("../../common/core/position.js");
var _rangeJs = require("../../common/core/range.js");
var _snippetParserJs = require("../snippet/snippetParser.js");
var _snippetSessionJs = require("../snippet/snippetSession.js");
var _suggestControllerJs = require("../suggest/suggestController.js");
var _inlineCompletionsModelJs = require("./inlineCompletionsModel.js");
var _inlineCompletionToGhostTextJs = require("./inlineCompletionToGhostText.js");
var _utilsJs = require("./utils.js");
var SuggestWidgetInlineCompletionProvider = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(SuggestWidgetInlineCompletionProvider, Disposable);
    var _super = _helpers.createSuper(SuggestWidgetInlineCompletionProvider);
    function SuggestWidgetInlineCompletionProvider(editor, suggestControllerPreselector) {
        _helpers.classCallCheck(this, SuggestWidgetInlineCompletionProvider);
        var _this;
        _this = _super.call(this);
        _this.editor = editor;
        _this.suggestControllerPreselector = suggestControllerPreselector;
        _this.isSuggestWidgetVisible = false;
        _this.isShiftKeyPressed = false;
        _this._isActive = false;
        _this._currentSuggestItemInfo = undefined;
        _this.onDidChangeEmitter = new _eventJs.Emitter();
        _this.onDidChange = _this.onDidChangeEmitter.event;
        // This delay fixes a suggest widget issue when typing "." immediately restarts the suggestion session.
        _this.setInactiveDelayed = _this._register(new _asyncJs.RunOnceScheduler(function() {
            if (!_this.isSuggestWidgetVisible) {
                if (_this._isActive) {
                    _this._isActive = false;
                    _this.onDidChangeEmitter.fire();
                }
            }
        }, 100));
        // See the command acceptAlternativeSelectedSuggestion that is bound to shift+tab
        _this._register(editor.onKeyDown(function(e) {
            if (e.shiftKey && !_this.isShiftKeyPressed) {
                _this.isShiftKeyPressed = true;
                _this.update(_this._isActive);
            }
        }));
        _this._register(editor.onKeyUp(function(e) {
            if (e.shiftKey && _this.isShiftKeyPressed) {
                _this.isShiftKeyPressed = false;
                _this.update(_this._isActive);
            }
        }));
        var suggestController = _suggestControllerJs.SuggestController.get(_this.editor);
        if (suggestController) {
            _this._register(suggestController.registerSelector({
                priority: 100,
                select: function(model, pos, suggestItems) {
                    var textModel = _this.editor.getModel();
                    var normalizedItemToPreselect = _inlineCompletionsModelJs.minimizeInlineCompletion(textModel, _this.suggestControllerPreselector());
                    if (!normalizedItemToPreselect) return -1;
                    var position = _positionJs.Position.lift(pos);
                    var candidates = suggestItems.map(function(suggestItem, index) {
                        var inlineSuggestItem = suggestionToSuggestItemInfo(suggestController, position, suggestItem, _this.isShiftKeyPressed);
                        var normalizedSuggestItem = _inlineCompletionsModelJs.minimizeInlineCompletion(textModel, inlineSuggestItem === null || inlineSuggestItem === void 0 ? void 0 : inlineSuggestItem.normalizedInlineCompletion);
                        if (!normalizedSuggestItem) return undefined;
                        var valid = rangeStartsWith(normalizedItemToPreselect.range, normalizedSuggestItem.range) && normalizedItemToPreselect.text.startsWith(normalizedSuggestItem.text);
                        return {
                            index: index,
                            valid: valid,
                            prefixLength: normalizedSuggestItem.text.length,
                            suggestItem: suggestItem
                        };
                    }).filter(function(item) {
                        return item && item.valid;
                    });
                    var result = _utilsJs.findMaxBy(candidates, _utilsJs.compareBy(function(s) {
                        return s.prefixLength;
                    }, _utilsJs.compareByNumber()));
                    return result ? result.index : -1;
                }
            }));
            var isBoundToSuggestWidget = false;
            var bindToSuggestWidget = function() {
                if (isBoundToSuggestWidget) return;
                isBoundToSuggestWidget = true;
                _this._register(suggestController.widget.value.onDidShow(function() {
                    _this.isSuggestWidgetVisible = true;
                    _this.update(true);
                }));
                _this._register(suggestController.widget.value.onDidHide(function() {
                    _this.isSuggestWidgetVisible = false;
                    _this.setInactiveDelayed.schedule();
                    _this.update(_this._isActive);
                }));
                _this._register(suggestController.widget.value.onDidFocus(function() {
                    _this.isSuggestWidgetVisible = true;
                    _this.update(true);
                }));
            };
            _this._register(_eventJs.Event.once(suggestController.model.onDidTrigger)(function(e) {
                bindToSuggestWidget();
            }));
        }
        _this.update(_this._isActive);
        return _this;
    }
    _helpers.createClass(SuggestWidgetInlineCompletionProvider, [
        {
            key: "state",
            get: /**
     * Returns undefined if the suggest widget is not active.
    */ function get() {
                if (!this._isActive) return undefined;
                return {
                    selectedItem: this._currentSuggestItemInfo
                };
            }
        },
        {
            key: "update",
            value: function update(newActive) {
                var newInlineCompletion = this.getSuggestItemInfo();
                var shouldFire = false;
                if (!suggestItemInfoEquals(this._currentSuggestItemInfo, newInlineCompletion)) {
                    this._currentSuggestItemInfo = newInlineCompletion;
                    shouldFire = true;
                }
                if (this._isActive !== newActive) {
                    this._isActive = newActive;
                    shouldFire = true;
                }
                if (shouldFire) this.onDidChangeEmitter.fire();
            }
        },
        {
            key: "getSuggestItemInfo",
            value: function getSuggestItemInfo() {
                var suggestController = _suggestControllerJs.SuggestController.get(this.editor);
                if (!suggestController) return undefined;
                if (!this.isSuggestWidgetVisible) return undefined;
                var focusedItem = suggestController.widget.value.getFocusedItem();
                if (!focusedItem) return undefined;
                // TODO: item.isResolved
                return suggestionToSuggestItemInfo(suggestController, this.editor.getPosition(), focusedItem.item, this.isShiftKeyPressed);
            }
        },
        {
            key: "stopForceRenderingAbove",
            value: function stopForceRenderingAbove() {
                var suggestController = _suggestControllerJs.SuggestController.get(this.editor);
                if (suggestController) suggestController.stopForceRenderingAbove();
            }
        },
        {
            key: "forceRenderingAbove",
            value: function forceRenderingAbove() {
                var suggestController = _suggestControllerJs.SuggestController.get(this.editor);
                if (suggestController) suggestController.forceRenderingAbove();
            }
        }
    ]);
    return SuggestWidgetInlineCompletionProvider;
}(_lifecycleJs.Disposable);
function rangeStartsWith(rangeToTest, prefix) {
    return prefix.startLineNumber === rangeToTest.startLineNumber && prefix.startColumn === rangeToTest.startColumn && (prefix.endLineNumber < rangeToTest.endLineNumber || prefix.endLineNumber === rangeToTest.endLineNumber && prefix.endColumn <= rangeToTest.endColumn);
}
function suggestItemInfoEquals(a, b) {
    if (a === b) return true;
    if (!a || !b) return false;
    return a.completionItemKind === b.completionItemKind && a.isSnippetText === b.isSnippetText && _inlineCompletionToGhostTextJs.normalizedInlineCompletionsEquals(a.normalizedInlineCompletion, b.normalizedInlineCompletion);
}
function suggestionToSuggestItemInfo(suggestController, position, item, toggleMode) {
    // additionalTextEdits might not be resolved here, this could be problematic.
    if (Array.isArray(item.completion.additionalTextEdits) && item.completion.additionalTextEdits.length > 0) // cannot represent additional text edits
    return {
        completionItemKind: item.completion.kind,
        isSnippetText: false,
        normalizedInlineCompletion: {
            // Dummy element, so that space is reserved, but no text is shown
            range: _rangeJs.Range.fromPositions(position, position),
            text: ''
        }
    };
    var insertText = item.completion.insertText;
    var isSnippetText = false;
    if (item.completion.insertTextRules & 4 /* InsertAsSnippet */ ) {
        var snippet = new _snippetParserJs.SnippetParser().parse(insertText);
        var model = suggestController.editor.getModel();
        // Ignore snippets that are too large.
        // Adjust whitespace is expensive for them.
        if (snippet.children.length > 100) return undefined;
        _snippetSessionJs.SnippetSession.adjustWhitespace(model, position, snippet, true, true);
        insertText = snippet.toString();
        isSnippetText = true;
    }
    var info = suggestController.getOverwriteInfo(item, toggleMode);
    return {
        isSnippetText: isSnippetText,
        completionItemKind: item.completion.kind,
        normalizedInlineCompletion: {
            text: insertText,
            range: _rangeJs.Range.fromPositions(position.delta(0, -info.overwriteBefore), position.delta(0, Math.max(info.overwriteAfter, 0)))
        }
    };
}

},{"@swc/helpers":"erO4s","../../../base/common/async.js":"kMhSh","../../../base/common/event.js":"9IBcK","../../../base/common/lifecycle.js":"bcbPy","../../common/core/position.js":"6xP0w","../../common/core/range.js":"VbyL8","../snippet/snippetParser.js":"5VMLU","../snippet/snippetSession.js":"lzi1r","../suggest/suggestController.js":"anMj7","./inlineCompletionsModel.js":"kkubk","./inlineCompletionToGhostText.js":"b2JNB","./utils.js":"f2zPM","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"5VMLU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Scanner", function() {
    return Scanner;
});
parcelHelpers.export(exports, "Marker", function() {
    return Marker;
});
parcelHelpers.export(exports, "Text", function() {
    return Text;
});
parcelHelpers.export(exports, "TransformableMarker", function() {
    return TransformableMarker;
});
parcelHelpers.export(exports, "Placeholder", function() {
    return Placeholder;
});
parcelHelpers.export(exports, "Choice", function() {
    return Choice;
});
parcelHelpers.export(exports, "Transform", function() {
    return Transform;
});
parcelHelpers.export(exports, "FormatString", function() {
    return FormatString;
});
parcelHelpers.export(exports, "Variable", function() {
    return Variable;
});
parcelHelpers.export(exports, "TextmateSnippet", function() {
    return TextmateSnippet;
});
parcelHelpers.export(exports, "SnippetParser", function() {
    return SnippetParser;
});
var _helpers = require("@swc/helpers");
var Scanner = /*#__PURE__*/ function() {
    "use strict";
    function Scanner() {
        _helpers.classCallCheck(this, Scanner);
        this.value = '';
        this.pos = 0;
    }
    _helpers.createClass(Scanner, [
        {
            key: "text",
            value: function text(value) {
                this.value = value;
                this.pos = 0;
            }
        },
        {
            key: "tokenText",
            value: function tokenText(token) {
                return this.value.substr(token.pos, token.len);
            }
        },
        {
            key: "next",
            value: function next() {
                if (this.pos >= this.value.length) return {
                    type: 14 /* EOF */ ,
                    pos: this.pos,
                    len: 0
                };
                var pos = this.pos;
                var len = 0;
                var ch = this.value.charCodeAt(pos);
                var type;
                // static types
                type = Scanner._table[ch];
                if (typeof type === 'number') {
                    this.pos += 1;
                    return {
                        type: type,
                        pos: pos,
                        len: 1
                    };
                }
                // number
                if (Scanner.isDigitCharacter(ch)) {
                    type = 8 /* Int */ ;
                    do {
                        len += 1;
                        ch = this.value.charCodeAt(pos + len);
                    }while (Scanner.isDigitCharacter(ch))
                    this.pos += len;
                    return {
                        type: type,
                        pos: pos,
                        len: len
                    };
                }
                // variable name
                if (Scanner.isVariableCharacter(ch)) {
                    type = 9 /* VariableName */ ;
                    do ch = this.value.charCodeAt(pos + ++len);
                    while (Scanner.isVariableCharacter(ch) || Scanner.isDigitCharacter(ch))
                    this.pos += len;
                    return {
                        type: type,
                        pos: pos,
                        len: len
                    };
                }
                // format
                type = 10 /* Format */ ;
                do {
                    len += 1;
                    ch = this.value.charCodeAt(pos + len);
                }while (!isNaN(ch) && typeof Scanner._table[ch] === 'undefined' // not static token
                 && !Scanner.isDigitCharacter(ch) // not number
                 && !Scanner.isVariableCharacter(ch) // not variable
                )
                this.pos += len;
                return {
                    type: type,
                    pos: pos,
                    len: len
                };
            }
        }
    ], [
        {
            key: "isDigitCharacter",
            value: function isDigitCharacter(ch) {
                return ch >= 48 /* Digit0 */  && ch <= 57 /* Digit9 */ ;
            }
        },
        {
            key: "isVariableCharacter",
            value: function isVariableCharacter(ch) {
                return ch === 95 /* Underline */  || ch >= 97 /* a */  && ch <= 122 /* z */  || ch >= 65 /* A */  && ch <= 90 /* Z */ ;
            }
        }
    ]);
    return Scanner;
}();
var _obj;
Scanner._table = (_obj = {}, _helpers.defineProperty(_obj, 36 /* DollarSign */ , 0 /* Dollar */ ), _helpers.defineProperty(_obj, 58 /* Colon */ , 1 /* Colon */ ), _helpers.defineProperty(_obj, 44 /* Comma */ , 2 /* Comma */ ), _helpers.defineProperty(_obj, 123 /* OpenCurlyBrace */ , 3 /* CurlyOpen */ ), _helpers.defineProperty(_obj, 125 /* CloseCurlyBrace */ , 4 /* CurlyClose */ ), _helpers.defineProperty(_obj, 92 /* Backslash */ , 5 /* Backslash */ ), _helpers.defineProperty(_obj, 47 /* Slash */ , 6 /* Forwardslash */ ), _helpers.defineProperty(_obj, 124 /* Pipe */ , 7 /* Pipe */ ), _helpers.defineProperty(_obj, 43 /* Plus */ , 11 /* Plus */ ), _helpers.defineProperty(_obj, 45 /* Dash */ , 12 /* Dash */ ), _helpers.defineProperty(_obj, 63 /* QuestionMark */ , 13 /* QuestionMark */ ), _obj);
var Marker = /*#__PURE__*/ function() {
    "use strict";
    function Marker() {
        _helpers.classCallCheck(this, Marker);
        this._children = [];
    }
    _helpers.createClass(Marker, [
        {
            key: "appendChild",
            value: function appendChild(child) {
                if (child instanceof Text && this._children[this._children.length - 1] instanceof Text) // this and previous child are text -> merge them
                this._children[this._children.length - 1].value += child.value;
                else {
                    // normal adoption of child
                    child.parent = this;
                    this._children.push(child);
                }
                return this;
            }
        },
        {
            key: "replace",
            value: function replace(child, others) {
                var _newChildren;
                var parent1 = child.parent;
                var idx = parent1.children.indexOf(child);
                var newChildren = parent1.children.slice(0);
                (_newChildren = newChildren).splice.apply(_newChildren, [
                    idx,
                    1
                ].concat(_helpers.toConsumableArray(others)));
                parent1._children = newChildren;
                (function _fixParent(children, parent) {
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator = children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var _$child = _step.value;
                            _$child.parent = parent;
                            _fixParent(_$child.children, _$child);
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                })(others, parent1);
            }
        },
        {
            key: "children",
            get: function get() {
                return this._children;
            }
        },
        {
            key: "snippet",
            get: function get() {
                var candidate = this;
                while(true){
                    if (!candidate) return undefined;
                    if (candidate instanceof TextmateSnippet) return candidate;
                    candidate = candidate.parent;
                }
            }
        },
        {
            key: "toString",
            value: function toString() {
                return this.children.reduce(function(prev, cur) {
                    return prev + cur.toString();
                }, '');
            }
        },
        {
            key: "len",
            value: function len() {
                return 0;
            }
        }
    ]);
    return Marker;
}();
var Text = /*#__PURE__*/ function(Marker) {
    "use strict";
    _helpers.inherits(Text, Marker);
    var _super = _helpers.createSuper(Text);
    function Text(value) {
        _helpers.classCallCheck(this, Text);
        var _this;
        _this = _super.call(this);
        _this.value = value;
        return _this;
    }
    _helpers.createClass(Text, [
        {
            key: "toString",
            value: function toString() {
                return this.value;
            }
        },
        {
            key: "len",
            value: function len() {
                return this.value.length;
            }
        },
        {
            key: "clone",
            value: function clone() {
                return new Text(this.value);
            }
        }
    ]);
    return Text;
}(Marker);
var TransformableMarker = /*#__PURE__*/ function(Marker) {
    "use strict";
    _helpers.inherits(TransformableMarker, Marker);
    var _super = _helpers.createSuper(TransformableMarker);
    function TransformableMarker() {
        _helpers.classCallCheck(this, TransformableMarker);
        return _super.apply(this, arguments);
    }
    return TransformableMarker;
}(Marker);
var Placeholder = /*#__PURE__*/ function(TransformableMarker) {
    "use strict";
    _helpers.inherits(Placeholder, TransformableMarker);
    var _super = _helpers.createSuper(Placeholder);
    function Placeholder(index) {
        _helpers.classCallCheck(this, Placeholder);
        var _this;
        _this = _super.call(this);
        _this.index = index;
        return _this;
    }
    _helpers.createClass(Placeholder, [
        {
            key: "isFinalTabstop",
            get: function get() {
                return this.index === 0;
            }
        },
        {
            key: "choice",
            get: function get() {
                return this._children.length === 1 && this._children[0] instanceof Choice ? this._children[0] : undefined;
            }
        },
        {
            key: "clone",
            value: function clone() {
                var ret = new Placeholder(this.index);
                if (this.transform) ret.transform = this.transform.clone();
                ret._children = this.children.map(function(child) {
                    return child.clone();
                });
                return ret;
            }
        }
    ], [
        {
            key: "compareByIndex",
            value: function compareByIndex(a, b) {
                if (a.index === b.index) return 0;
                else if (a.isFinalTabstop) return 1;
                else if (b.isFinalTabstop) return -1;
                else if (a.index < b.index) return -1;
                else if (a.index > b.index) return 1;
                else return 0;
            }
        }
    ]);
    return Placeholder;
}(TransformableMarker);
var Choice = /*#__PURE__*/ function(Marker) {
    "use strict";
    _helpers.inherits(Choice, Marker);
    var _super = _helpers.createSuper(Choice);
    function Choice() {
        _helpers.classCallCheck(this, Choice);
        var _this;
        _this = _super.call.apply(_super, [
            this
        ].concat(Array.prototype.slice.call(arguments)));
        _this.options = [];
        return _this;
    }
    _helpers.createClass(Choice, [
        {
            key: "appendChild",
            value: function appendChild(marker) {
                if (marker instanceof Text) {
                    marker.parent = this;
                    this.options.push(marker);
                }
                return this;
            }
        },
        {
            key: "toString",
            value: function toString() {
                return this.options[0].value;
            }
        },
        {
            key: "len",
            value: function len() {
                return this.options[0].len();
            }
        },
        {
            key: "clone",
            value: function clone() {
                var ret = new Choice();
                this.options.forEach(ret.appendChild, ret);
                return ret;
            }
        }
    ]);
    return Choice;
}(Marker);
var Transform = /*#__PURE__*/ function(Marker) {
    "use strict";
    _helpers.inherits(Transform, Marker);
    var _super = _helpers.createSuper(Transform);
    function Transform() {
        _helpers.classCallCheck(this, Transform);
        var _this;
        _this = _super.call.apply(_super, [
            this
        ].concat(Array.prototype.slice.call(arguments)));
        _this.regexp = new RegExp('');
        return _this;
    }
    _helpers.createClass(Transform, [
        {
            key: "resolve",
            value: function resolve(value) {
                var _this = this;
                var didMatch = false;
                var ret = value.replace(this.regexp, function() {
                    didMatch = true;
                    return _this._replace(Array.prototype.slice.call(arguments, 0, -2));
                });
                // when the regex didn't match and when the transform has
                // else branches, then run those
                if (!didMatch && this._children.some(function(child) {
                    return child instanceof FormatString && Boolean(child.elseValue);
                })) ret = this._replace([]);
                return ret;
            }
        },
        {
            key: "_replace",
            value: function _replace(groups) {
                var ret = '';
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this._children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var marker = _step.value;
                        if (marker instanceof FormatString) {
                            var value = groups[marker.index] || '';
                            value = marker.resolve(value);
                            ret += value;
                        } else ret += marker.toString();
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return ret;
            }
        },
        {
            key: "toString",
            value: function toString() {
                return '';
            }
        },
        {
            key: "clone",
            value: function clone() {
                var ret = new Transform();
                ret.regexp = new RegExp(this.regexp.source, '' + (this.regexp.ignoreCase ? 'i' : '') + (this.regexp.global ? 'g' : ''));
                ret._children = this.children.map(function(child) {
                    return child.clone();
                });
                return ret;
            }
        }
    ]);
    return Transform;
}(Marker);
var FormatString = /*#__PURE__*/ function(Marker) {
    "use strict";
    _helpers.inherits(FormatString, Marker);
    var _super = _helpers.createSuper(FormatString);
    function FormatString(index, shorthandName, ifValue, elseValue) {
        _helpers.classCallCheck(this, FormatString);
        var _this;
        _this = _super.call(this);
        _this.index = index;
        _this.shorthandName = shorthandName;
        _this.ifValue = ifValue;
        _this.elseValue = elseValue;
        return _this;
    }
    _helpers.createClass(FormatString, [
        {
            key: "resolve",
            value: function resolve(value) {
                if (this.shorthandName === 'upcase') return !value ? '' : value.toLocaleUpperCase();
                else if (this.shorthandName === 'downcase') return !value ? '' : value.toLocaleLowerCase();
                else if (this.shorthandName === 'capitalize') return !value ? '' : value[0].toLocaleUpperCase() + value.substr(1);
                else if (this.shorthandName === 'pascalcase') return !value ? '' : this._toPascalCase(value);
                else if (this.shorthandName === 'camelcase') return !value ? '' : this._toCamelCase(value);
                else if (Boolean(value) && typeof this.ifValue === 'string') return this.ifValue;
                else if (!Boolean(value) && typeof this.elseValue === 'string') return this.elseValue;
                else return value || '';
            }
        },
        {
            key: "_toPascalCase",
            value: function _toPascalCase(value) {
                var match = value.match(/[a-z0-9]+/gi);
                if (!match) return value;
                return match.map(function(word) {
                    return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase();
                }).join('');
            }
        },
        {
            key: "_toCamelCase",
            value: function _toCamelCase(value) {
                var match = value.match(/[a-z0-9]+/gi);
                if (!match) return value;
                return match.map(function(word, index) {
                    if (index === 0) return word.toLowerCase();
                    else return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase();
                }).join('');
            }
        },
        {
            key: "clone",
            value: function clone() {
                var ret = new FormatString(this.index, this.shorthandName, this.ifValue, this.elseValue);
                return ret;
            }
        }
    ]);
    return FormatString;
}(Marker);
var Variable = /*#__PURE__*/ function(TransformableMarker) {
    "use strict";
    _helpers.inherits(Variable, TransformableMarker);
    var _super = _helpers.createSuper(Variable);
    function Variable(name) {
        _helpers.classCallCheck(this, Variable);
        var _this;
        _this = _super.call(this);
        _this.name = name;
        return _this;
    }
    _helpers.createClass(Variable, [
        {
            key: "resolve",
            value: function resolve(resolver) {
                var value = resolver.resolve(this);
                if (this.transform) value = this.transform.resolve(value || '');
                if (value !== undefined) {
                    this._children = [
                        new Text(value)
                    ];
                    return true;
                }
                return false;
            }
        },
        {
            key: "clone",
            value: function clone() {
                var ret = new Variable(this.name);
                if (this.transform) ret.transform = this.transform.clone();
                ret._children = this.children.map(function(child) {
                    return child.clone();
                });
                return ret;
            }
        }
    ]);
    return Variable;
}(TransformableMarker);
function walk(marker, visitor) {
    var stack = _helpers.toConsumableArray(marker);
    while(stack.length > 0){
        var _stack;
        var _$marker = stack.shift();
        var recurse = visitor(_$marker);
        if (!recurse) break;
        (_stack = stack).unshift.apply(_stack, _helpers.toConsumableArray(_$marker.children));
    }
}
var TextmateSnippet = /*#__PURE__*/ function(Marker) {
    "use strict";
    _helpers.inherits(TextmateSnippet, Marker);
    var _super = _helpers.createSuper(TextmateSnippet);
    function TextmateSnippet() {
        _helpers.classCallCheck(this, TextmateSnippet);
        return _super.apply(this, arguments);
    }
    _helpers.createClass(TextmateSnippet, [
        {
            key: "placeholderInfo",
            get: function get() {
                if (!this._placeholders) {
                    // fill in placeholders
                    var all = [];
                    var last;
                    this.walk(function(candidate) {
                        if (candidate instanceof Placeholder) {
                            all.push(candidate);
                            last = !last || last.index < candidate.index ? candidate : last;
                        }
                        return true;
                    });
                    this._placeholders = {
                        all: all,
                        last: last
                    };
                }
                return this._placeholders;
            }
        },
        {
            key: "placeholders",
            get: function get() {
                var all = this.placeholderInfo.all;
                return all;
            }
        },
        {
            key: "offset",
            value: function offset(marker) {
                var pos = 0;
                var found = false;
                this.walk(function(candidate) {
                    if (candidate === marker) {
                        found = true;
                        return false;
                    }
                    pos += candidate.len();
                    return true;
                });
                if (!found) return -1;
                return pos;
            }
        },
        {
            key: "fullLen",
            value: function fullLen(marker1) {
                var ret = 0;
                walk([
                    marker1
                ], function(marker) {
                    ret += marker.len();
                    return true;
                });
                return ret;
            }
        },
        {
            key: "enclosingPlaceholders",
            value: function enclosingPlaceholders(placeholder) {
                var ret = [];
                var parent = placeholder.parent;
                while(parent){
                    if (parent instanceof Placeholder) ret.push(parent);
                    parent = parent.parent;
                }
                return ret;
            }
        },
        {
            key: "resolveVariables",
            value: function resolveVariables(resolver) {
                var _this = this;
                this.walk(function(candidate) {
                    if (candidate instanceof Variable) {
                        if (candidate.resolve(resolver)) _this._placeholders = undefined;
                    }
                    return true;
                });
                return this;
            }
        },
        {
            key: "appendChild",
            value: function appendChild(child) {
                this._placeholders = undefined;
                return _helpers.get(_helpers.getPrototypeOf(TextmateSnippet.prototype), "appendChild", this).call(this, child);
            }
        },
        {
            key: "replace",
            value: function replace(child, others) {
                this._placeholders = undefined;
                return _helpers.get(_helpers.getPrototypeOf(TextmateSnippet.prototype), "replace", this).call(this, child, others);
            }
        },
        {
            key: "clone",
            value: function clone() {
                var ret = new TextmateSnippet();
                this._children = this.children.map(function(child) {
                    return child.clone();
                });
                return ret;
            }
        },
        {
            key: "walk",
            value: function walk1(visitor) {
                walk(this.children, visitor);
            }
        }
    ]);
    return TextmateSnippet;
}(Marker);
var SnippetParser = /*#__PURE__*/ function() {
    "use strict";
    function SnippetParser() {
        _helpers.classCallCheck(this, SnippetParser);
        this._scanner = new Scanner();
        this._token = {
            type: 14 /* EOF */ ,
            pos: 0,
            len: 0
        };
    }
    _helpers.createClass(SnippetParser, [
        {
            key: "parse",
            value: function parse(value, insertFinalTabstop, enforceFinalTabstop) {
                this._scanner.text(value);
                this._token = this._scanner.next();
                var snippet = new TextmateSnippet();
                while(this._parse(snippet));
                // fill in values for placeholders. the first placeholder of an index
                // that has a value defines the value for all placeholders with that index
                var placeholderDefaultValues = new Map();
                var incompletePlaceholders = [];
                var placeholderCount = 0;
                snippet.walk(function(marker) {
                    if (marker instanceof Placeholder) {
                        placeholderCount += 1;
                        if (marker.isFinalTabstop) placeholderDefaultValues.set(0, undefined);
                        else if (!placeholderDefaultValues.has(marker.index) && marker.children.length > 0) placeholderDefaultValues.set(marker.index, marker.children);
                        else incompletePlaceholders.push(marker);
                    }
                    return true;
                });
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = incompletePlaceholders[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var placeholder = _step.value;
                        var defaultValues = placeholderDefaultValues.get(placeholder.index);
                        if (defaultValues) {
                            var clone = new Placeholder(placeholder.index);
                            clone.transform = placeholder.transform;
                            var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                            try {
                                for(var _iterator1 = defaultValues[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                                    var child = _step1.value;
                                    clone.appendChild(child.clone());
                                }
                            } catch (err) {
                                _didIteratorError1 = true;
                                _iteratorError1 = err;
                            } finally{
                                try {
                                    if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                                        _iterator1.return();
                                    }
                                } finally{
                                    if (_didIteratorError1) {
                                        throw _iteratorError1;
                                    }
                                }
                            }
                            snippet.replace(placeholder, [
                                clone
                            ]);
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                if (!enforceFinalTabstop) enforceFinalTabstop = placeholderCount > 0 && insertFinalTabstop;
                if (!placeholderDefaultValues.has(0) && enforceFinalTabstop) // the snippet uses placeholders but has no
                // final tabstop defined -> insert at the end
                snippet.appendChild(new Placeholder(0));
                return snippet;
            }
        },
        {
            key: "_accept",
            value: function _accept(type, value) {
                if (type === undefined || this._token.type === type) {
                    var ret = !value ? true : this._scanner.tokenText(this._token);
                    this._token = this._scanner.next();
                    return ret;
                }
                return false;
            }
        },
        {
            key: "_backTo",
            value: function _backTo(token) {
                this._scanner.pos = token.pos + token.len;
                this._token = token;
                return false;
            }
        },
        {
            key: "_until",
            value: function _until(type) {
                var start = this._token;
                while(this._token.type !== type){
                    if (this._token.type === 14 /* EOF */ ) return false;
                    else if (this._token.type === 5 /* Backslash */ ) {
                        var nextToken = this._scanner.next();
                        if (nextToken.type !== 0 /* Dollar */  && nextToken.type !== 4 /* CurlyClose */  && nextToken.type !== 5 /* Backslash */ ) return false;
                    }
                    this._token = this._scanner.next();
                }
                var value = this._scanner.value.substring(start.pos, this._token.pos).replace(/\\(\$|}|\\)/g, '$1');
                this._token = this._scanner.next();
                return value;
            }
        },
        {
            key: "_parse",
            value: function _parse(marker) {
                return this._parseEscaped(marker) || this._parseTabstopOrVariableName(marker) || this._parseComplexPlaceholder(marker) || this._parseComplexVariable(marker) || this._parseAnything(marker);
            }
        },
        {
            // \$, \\, \} -> just text
            key: "_parseEscaped",
            value: function _parseEscaped(marker) {
                var value;
                if (value = this._accept(5 /* Backslash */ , true)) {
                    // saw a backslash, append escaped token or that backslash
                    value = this._accept(0 /* Dollar */ , true) || this._accept(4 /* CurlyClose */ , true) || this._accept(5 /* Backslash */ , true) || value;
                    marker.appendChild(new Text(value));
                    return true;
                }
                return false;
            }
        },
        {
            // $foo -> variable, $1 -> tabstop
            key: "_parseTabstopOrVariableName",
            value: function _parseTabstopOrVariableName(parent) {
                var value;
                var token = this._token;
                var match = this._accept(0 /* Dollar */ ) && (value = this._accept(9 /* VariableName */ , true) || this._accept(8 /* Int */ , true));
                if (!match) return this._backTo(token);
                parent.appendChild(/^\d+$/.test(value) ? new Placeholder(Number(value)) : new Variable(value));
                return true;
            }
        },
        {
            // ${1:<children>}, ${1} -> placeholder
            key: "_parseComplexPlaceholder",
            value: function _parseComplexPlaceholder(parent) {
                var index;
                var token = this._token;
                var match = this._accept(0 /* Dollar */ ) && this._accept(3 /* CurlyOpen */ ) && (index = this._accept(8 /* Int */ , true));
                if (!match) return this._backTo(token);
                var placeholder = new Placeholder(Number(index));
                if (this._accept(1 /* Colon */ )) // ${1:<children>}
                while(true){
                    // ...} -> done
                    if (this._accept(4 /* CurlyClose */ )) {
                        parent.appendChild(placeholder);
                        return true;
                    }
                    if (this._parse(placeholder)) continue;
                    // fallback
                    parent.appendChild(new Text('${' + index + ':'));
                    placeholder.children.forEach(parent.appendChild, parent);
                    return true;
                }
                else if (placeholder.index > 0 && this._accept(7 /* Pipe */ )) {
                    // ${1|one,two,three|}
                    var choice = new Choice();
                    while(true){
                        if (this._parseChoiceElement(choice)) {
                            if (this._accept(2 /* Comma */ )) continue;
                            if (this._accept(7 /* Pipe */ )) {
                                placeholder.appendChild(choice);
                                if (this._accept(4 /* CurlyClose */ )) {
                                    // ..|} -> done
                                    parent.appendChild(placeholder);
                                    return true;
                                }
                            }
                        }
                        this._backTo(token);
                        return false;
                    }
                } else if (this._accept(6 /* Forwardslash */ )) {
                    // ${1/<regex>/<format>/<options>}
                    if (this._parseTransform(placeholder)) {
                        parent.appendChild(placeholder);
                        return true;
                    }
                    this._backTo(token);
                    return false;
                } else if (this._accept(4 /* CurlyClose */ )) {
                    // ${1}
                    parent.appendChild(placeholder);
                    return true;
                } else // ${1 <- missing curly or colon
                return this._backTo(token);
            }
        },
        {
            key: "_parseChoiceElement",
            value: function _parseChoiceElement(parent) {
                var token = this._token;
                var values = [];
                while(true){
                    if (this._token.type === 2 /* Comma */  || this._token.type === 7 /* Pipe */ ) break;
                    var value = void 0;
                    if (value = this._accept(5 /* Backslash */ , true)) // \, \|, or \\
                    value = this._accept(2 /* Comma */ , true) || this._accept(7 /* Pipe */ , true) || this._accept(5 /* Backslash */ , true) || value;
                    else value = this._accept(undefined, true);
                    if (!value) {
                        // EOF
                        this._backTo(token);
                        return false;
                    }
                    values.push(value);
                }
                if (values.length === 0) {
                    this._backTo(token);
                    return false;
                }
                parent.appendChild(new Text(values.join('')));
                return true;
            }
        },
        {
            // ${foo:<children>}, ${foo} -> variable
            key: "_parseComplexVariable",
            value: function _parseComplexVariable(parent) {
                var name;
                var token = this._token;
                var match = this._accept(0 /* Dollar */ ) && this._accept(3 /* CurlyOpen */ ) && (name = this._accept(9 /* VariableName */ , true));
                if (!match) return this._backTo(token);
                var variable = new Variable(name);
                if (this._accept(1 /* Colon */ )) // ${foo:<children>}
                while(true){
                    // ...} -> done
                    if (this._accept(4 /* CurlyClose */ )) {
                        parent.appendChild(variable);
                        return true;
                    }
                    if (this._parse(variable)) continue;
                    // fallback
                    parent.appendChild(new Text('${' + name + ':'));
                    variable.children.forEach(parent.appendChild, parent);
                    return true;
                }
                else if (this._accept(6 /* Forwardslash */ )) {
                    // ${foo/<regex>/<format>/<options>}
                    if (this._parseTransform(variable)) {
                        parent.appendChild(variable);
                        return true;
                    }
                    this._backTo(token);
                    return false;
                } else if (this._accept(4 /* CurlyClose */ )) {
                    // ${foo}
                    parent.appendChild(variable);
                    return true;
                } else // ${foo <- missing curly or colon
                return this._backTo(token);
            }
        },
        {
            key: "_parseTransform",
            value: function _parseTransform(parent) {
                // ...<regex>/<format>/<options>}
                var transform = new Transform();
                var regexValue = '';
                var regexOptions = '';
                // (1) /regex
                while(true){
                    if (this._accept(6 /* Forwardslash */ )) break;
                    var escaped = void 0;
                    if (escaped = this._accept(5 /* Backslash */ , true)) {
                        escaped = this._accept(6 /* Forwardslash */ , true) || escaped;
                        regexValue += escaped;
                        continue;
                    }
                    if (this._token.type !== 14 /* EOF */ ) {
                        regexValue += this._accept(undefined, true);
                        continue;
                    }
                    return false;
                }
                // (2) /format
                while(true){
                    if (this._accept(6 /* Forwardslash */ )) break;
                    var escaped1 = void 0;
                    if (escaped1 = this._accept(5 /* Backslash */ , true)) {
                        escaped1 = this._accept(5 /* Backslash */ , true) || this._accept(6 /* Forwardslash */ , true) || escaped1;
                        transform.appendChild(new Text(escaped1));
                        continue;
                    }
                    if (this._parseFormatString(transform) || this._parseAnything(transform)) continue;
                    return false;
                }
                // (3) /option
                while(true){
                    if (this._accept(4 /* CurlyClose */ )) break;
                    if (this._token.type !== 14 /* EOF */ ) {
                        regexOptions += this._accept(undefined, true);
                        continue;
                    }
                    return false;
                }
                try {
                    transform.regexp = new RegExp(regexValue, regexOptions);
                } catch (e) {
                    // invalid regexp
                    return false;
                }
                parent.transform = transform;
                return true;
            }
        },
        {
            key: "_parseFormatString",
            value: function _parseFormatString(parent) {
                var token = this._token;
                if (!this._accept(0 /* Dollar */ )) return false;
                var complex = false;
                if (this._accept(3 /* CurlyOpen */ )) complex = true;
                var index = this._accept(8 /* Int */ , true);
                if (!index) {
                    this._backTo(token);
                    return false;
                } else if (!complex) {
                    // $1
                    parent.appendChild(new FormatString(Number(index)));
                    return true;
                } else if (this._accept(4 /* CurlyClose */ )) {
                    // ${1}
                    parent.appendChild(new FormatString(Number(index)));
                    return true;
                } else if (!this._accept(1 /* Colon */ )) {
                    this._backTo(token);
                    return false;
                }
                if (this._accept(6 /* Forwardslash */ )) {
                    // ${1:/upcase}
                    var shorthand = this._accept(9 /* VariableName */ , true);
                    if (!shorthand || !this._accept(4 /* CurlyClose */ )) {
                        this._backTo(token);
                        return false;
                    } else {
                        parent.appendChild(new FormatString(Number(index), shorthand));
                        return true;
                    }
                } else if (this._accept(11 /* Plus */ )) {
                    // ${1:+<if>}
                    var ifValue = this._until(4 /* CurlyClose */ );
                    if (ifValue) {
                        parent.appendChild(new FormatString(Number(index), undefined, ifValue, undefined));
                        return true;
                    }
                } else if (this._accept(12 /* Dash */ )) {
                    // ${2:-<else>}
                    var elseValue = this._until(4 /* CurlyClose */ );
                    if (elseValue) {
                        parent.appendChild(new FormatString(Number(index), undefined, undefined, elseValue));
                        return true;
                    }
                } else if (this._accept(13 /* QuestionMark */ )) {
                    // ${2:?<if>:<else>}
                    var ifValue1 = this._until(1 /* Colon */ );
                    if (ifValue1) {
                        var elseValue1 = this._until(4 /* CurlyClose */ );
                        if (elseValue1) {
                            parent.appendChild(new FormatString(Number(index), undefined, ifValue1, elseValue1));
                            return true;
                        }
                    }
                } else {
                    // ${1:<else>}
                    var elseValue2 = this._until(4 /* CurlyClose */ );
                    if (elseValue2) {
                        parent.appendChild(new FormatString(Number(index), undefined, undefined, elseValue2));
                        return true;
                    }
                }
                this._backTo(token);
                return false;
            }
        },
        {
            key: "_parseAnything",
            value: function _parseAnything(marker) {
                if (this._token.type !== 14 /* EOF */ ) {
                    marker.appendChild(new Text(this._scanner.tokenText(this._token)));
                    this._accept(undefined);
                    return true;
                }
                return false;
            }
        }
    ], [
        {
            key: "escape",
            value: function escape(value) {
                return value.replace(/\$|}|\\/g, '\\$&');
            }
        },
        {
            key: "guessNeedsClipboard",
            value: function guessNeedsClipboard(template) {
                return /\${?CLIPBOARD/.test(template);
            }
        }
    ]);
    return SnippetParser;
}();

},{"@swc/helpers":"erO4s","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"lzi1r":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "OneSnippet", function() {
    return OneSnippet;
});
parcelHelpers.export(exports, "SnippetSession", function() {
    return SnippetSession;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _arraysJs = require("../../../base/common/arrays.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _stringsJs = require("../../../base/common/strings.js");
var _snippetSessionCss = require("./snippetSession.css");
var _editOperationJs = require("../../common/core/editOperation.js");
var _rangeJs = require("../../common/core/range.js");
var _selectionJs = require("../../common/core/selection.js");
var _textModelJs = require("../../common/model/textModel.js");
var _labelJs = require("../../../platform/label/common/label.js");
var _workspaceJs = require("../../../platform/workspace/common/workspace.js");
var _snippetParserJs = require("./snippetParser.js");
var _snippetVariablesJs = require("./snippetVariables.js");
var OneSnippet = /*#__PURE__*/ function() {
    "use strict";
    function OneSnippet(_editor, _snippet, _offset, _snippetLineLeadingWhitespace) {
        _helpers.classCallCheck(this, OneSnippet);
        this._editor = _editor;
        this._snippet = _snippet;
        this._offset = _offset;
        this._snippetLineLeadingWhitespace = _snippetLineLeadingWhitespace;
        this._nestingLevel = 1;
        this._placeholderGroups = _arraysJs.groupBy(_snippet.placeholders, _snippetParserJs.Placeholder.compareByIndex);
        this._placeholderGroupsIdx = -1;
    }
    _helpers.createClass(OneSnippet, [
        {
            key: "dispose",
            value: function dispose() {
                if (this._placeholderDecorations) this._editor.deltaDecorations(_helpers.toConsumableArray(this._placeholderDecorations.values()), []);
                this._placeholderGroups.length = 0;
            }
        },
        {
            key: "_initDecorations",
            value: function _initDecorations() {
                var _this = this;
                if (this._placeholderDecorations) // already initialized
                return;
                this._placeholderDecorations = new Map();
                var model = this._editor.getModel();
                this._editor.changeDecorations(function(accessor) {
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        // create a decoration for each placeholder
                        for(var _iterator = _this._snippet.placeholders[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var placeholder = _step.value;
                            var placeholderOffset = _this._snippet.offset(placeholder);
                            var placeholderLen = _this._snippet.fullLen(placeholder);
                            var range = _rangeJs.Range.fromPositions(model.getPositionAt(_this._offset + placeholderOffset), model.getPositionAt(_this._offset + placeholderOffset + placeholderLen));
                            var options = placeholder.isFinalTabstop ? OneSnippet._decor.inactiveFinal : OneSnippet._decor.inactive;
                            var handle = accessor.addDecoration(range, options);
                            _this._placeholderDecorations.set(placeholder, handle);
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                });
            }
        },
        {
            key: "move",
            value: function move(fwd) {
                var _this = this;
                if (!this._editor.hasModel()) return [];
                this._initDecorations();
                // Transform placeholder text if necessary
                if (this._placeholderGroupsIdx >= 0) {
                    var operations = [];
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator = this._placeholderGroups[this._placeholderGroupsIdx][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var placeholder = _step.value;
                            // Check if the placeholder has a transformation
                            if (placeholder.transform) {
                                var id = this._placeholderDecorations.get(placeholder);
                                var range = this._editor.getModel().getDecorationRange(id);
                                var currentValue = this._editor.getModel().getValueInRange(range);
                                var transformedValueLines = placeholder.transform.resolve(currentValue).split(/\r\n|\r|\n/);
                                // fix indentation for transformed lines
                                for(var i = 1; i < transformedValueLines.length; i++)transformedValueLines[i] = this._editor.getModel().normalizeIndentation(this._snippetLineLeadingWhitespace + transformedValueLines[i]);
                                operations.push(_editOperationJs.EditOperation.replace(range, transformedValueLines.join(this._editor.getModel().getEOL())));
                            }
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    if (operations.length > 0) this._editor.executeEdits('snippet.placeholderTransform', operations);
                }
                var couldSkipThisPlaceholder = false;
                if (fwd === true && this._placeholderGroupsIdx < this._placeholderGroups.length - 1) {
                    this._placeholderGroupsIdx += 1;
                    couldSkipThisPlaceholder = true;
                } else if (fwd === false && this._placeholderGroupsIdx > 0) {
                    this._placeholderGroupsIdx -= 1;
                    couldSkipThisPlaceholder = true;
                }
                var newSelections = this._editor.getModel().changeDecorations(function(accessor) {
                    var activePlaceholders = new Set();
                    // change stickiness to always grow when typing at its edges
                    // because these decorations represent the currently active
                    // tabstop.
                    // Special case #1: reaching the final tabstop
                    // Special case #2: placeholders enclosing active placeholders
                    var selections = [];
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator = _this._placeholderGroups[_this._placeholderGroupsIdx][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var placeholder = _step.value;
                            var id = _this._placeholderDecorations.get(placeholder);
                            var range = _this._editor.getModel().getDecorationRange(id);
                            selections.push(new _selectionJs.Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn));
                            // consider to skip this placeholder index when the decoration
                            // range is empty but when the placeholder wasn't. that's a strong
                            // hint that the placeholder has been deleted. (all placeholder must match this)
                            couldSkipThisPlaceholder = couldSkipThisPlaceholder && _this._hasPlaceholderBeenCollapsed(placeholder);
                            accessor.changeDecorationOptions(id, placeholder.isFinalTabstop ? OneSnippet._decor.activeFinal : OneSnippet._decor.active);
                            activePlaceholders.add(placeholder);
                            var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                            try {
                                for(var _iterator1 = _this._snippet.enclosingPlaceholders(placeholder)[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                                    var enclosingPlaceholder = _step1.value;
                                    var id1 = _this._placeholderDecorations.get(enclosingPlaceholder);
                                    accessor.changeDecorationOptions(id1, enclosingPlaceholder.isFinalTabstop ? OneSnippet._decor.activeFinal : OneSnippet._decor.active);
                                    activePlaceholders.add(enclosingPlaceholder);
                                }
                            } catch (err) {
                                _didIteratorError1 = true;
                                _iteratorError1 = err;
                            } finally{
                                try {
                                    if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                                        _iterator1.return();
                                    }
                                } finally{
                                    if (_didIteratorError1) {
                                        throw _iteratorError1;
                                    }
                                }
                            }
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    var _iteratorNormalCompletion2 = true, _didIteratorError2 = false, _iteratorError2 = undefined;
                    try {
                        // change stickness to never grow when typing at its edges
                        // so that in-active tabstops never grow
                        for(var _iterator2 = _this._placeholderDecorations[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true){
                            var _value = _helpers.slicedToArray(_step2.value, 2), placeholder1 = _value[0], id2 = _value[1];
                            if (!activePlaceholders.has(placeholder1)) accessor.changeDecorationOptions(id2, placeholder1.isFinalTabstop ? OneSnippet._decor.inactiveFinal : OneSnippet._decor.inactive);
                        }
                    } catch (err) {
                        _didIteratorError2 = true;
                        _iteratorError2 = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                                _iterator2.return();
                            }
                        } finally{
                            if (_didIteratorError2) {
                                throw _iteratorError2;
                            }
                        }
                    }
                    return selections;
                });
                return !couldSkipThisPlaceholder ? newSelections !== null && newSelections !== void 0 ? newSelections : [] : this.move(fwd);
            }
        },
        {
            key: "_hasPlaceholderBeenCollapsed",
            value: function _hasPlaceholderBeenCollapsed(placeholder) {
                // A placeholder is empty when it wasn't empty when authored but
                // when its tracking decoration is empty. This also applies to all
                // potential parent placeholders
                var marker = placeholder;
                while(marker){
                    if (marker instanceof _snippetParserJs.Placeholder) {
                        var id = this._placeholderDecorations.get(marker);
                        var range = this._editor.getModel().getDecorationRange(id);
                        if (range.isEmpty() && marker.toString().length > 0) return true;
                    }
                    marker = marker.parent;
                }
                return false;
            }
        },
        {
            key: "isAtFirstPlaceholder",
            get: function get() {
                return this._placeholderGroupsIdx <= 0 || this._placeholderGroups.length === 0;
            }
        },
        {
            key: "isAtLastPlaceholder",
            get: function get() {
                return this._placeholderGroupsIdx === this._placeholderGroups.length - 1;
            }
        },
        {
            key: "hasPlaceholder",
            get: function get() {
                return this._snippet.placeholders.length > 0;
            }
        },
        {
            key: "computePossibleSelections",
            value: function computePossibleSelections() {
                var result = new Map();
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this._placeholderGroups[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var placeholdersWithEqualIndex = _step.value;
                        var ranges = void 0;
                        var _iteratorNormalCompletion3 = true, _didIteratorError3 = false, _iteratorError3 = undefined;
                        try {
                            for(var _iterator3 = placeholdersWithEqualIndex[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true){
                                var placeholder = _step3.value;
                                if (placeholder.isFinalTabstop) break;
                                if (!ranges) {
                                    ranges = [];
                                    result.set(placeholder.index, ranges);
                                }
                                var id = this._placeholderDecorations.get(placeholder);
                                var range = this._editor.getModel().getDecorationRange(id);
                                if (!range) {
                                    // one of the placeholder lost its decoration and
                                    // therefore we bail out and pretend the placeholder
                                    // (with its mirrors) doesn't exist anymore.
                                    result.delete(placeholder.index);
                                    break;
                                }
                                ranges.push(range);
                            }
                        } catch (err) {
                            _didIteratorError3 = true;
                            _iteratorError3 = err;
                        } finally{
                            try {
                                if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
                                    _iterator3.return();
                                }
                            } finally{
                                if (_didIteratorError3) {
                                    throw _iteratorError3;
                                }
                            }
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return result;
            }
        },
        {
            key: "choice",
            get: function get() {
                return this._placeholderGroups[this._placeholderGroupsIdx][0].choice;
            }
        },
        {
            key: "merge",
            value: function merge(others) {
                var _this = this;
                var model = this._editor.getModel();
                this._nestingLevel *= 10;
                this._editor.changeDecorations(function(accessor) {
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        // For each active placeholder take one snippet and merge it
                        // in that the placeholder (can be many for `$1foo$1foo`). Because
                        // everything is sorted by editor selection we can simply remove
                        // elements from the beginning of the array
                        for(var _iterator = _this._placeholderGroups[_this._placeholderGroupsIdx][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var placeholder = _step.value;
                            var nested = others.shift();
                            console.assert(!nested._placeholderDecorations);
                            // Massage placeholder-indicies of the nested snippet to be
                            // sorted right after the insertion point. This ensures we move
                            // through the placeholders in the correct order
                            var indexLastPlaceholder = nested._snippet.placeholderInfo.last.index;
                            var _iteratorNormalCompletion4 = true, _didIteratorError4 = false, _iteratorError4 = undefined;
                            try {
                                for(var _iterator4 = nested._snippet.placeholderInfo.all[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true){
                                    var nestedPlaceholder = _step4.value;
                                    if (nestedPlaceholder.isFinalTabstop) nestedPlaceholder.index = placeholder.index + (indexLastPlaceholder + 1) / _this._nestingLevel;
                                    else nestedPlaceholder.index = placeholder.index + nestedPlaceholder.index / _this._nestingLevel;
                                }
                            } catch (err) {
                                _didIteratorError4 = true;
                                _iteratorError4 = err;
                            } finally{
                                try {
                                    if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
                                        _iterator4.return();
                                    }
                                } finally{
                                    if (_didIteratorError4) {
                                        throw _iteratorError4;
                                    }
                                }
                            }
                            _this._snippet.replace(placeholder, nested._snippet.children);
                            // Remove the placeholder at which position are inserting
                            // the snippet and also remove its decoration.
                            var id = _this._placeholderDecorations.get(placeholder);
                            accessor.removeDecoration(id);
                            _this._placeholderDecorations.delete(placeholder);
                            var _iteratorNormalCompletion5 = true, _didIteratorError5 = false, _iteratorError5 = undefined;
                            try {
                                // For each *new* placeholder we create decoration to monitor
                                // how and if it grows/shrinks.
                                for(var _iterator5 = nested._snippet.placeholders[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true){
                                    var placeholder2 = _step5.value;
                                    var placeholderOffset = nested._snippet.offset(placeholder2);
                                    var placeholderLen = nested._snippet.fullLen(placeholder2);
                                    var range = _rangeJs.Range.fromPositions(model.getPositionAt(nested._offset + placeholderOffset), model.getPositionAt(nested._offset + placeholderOffset + placeholderLen));
                                    var handle = accessor.addDecoration(range, OneSnippet._decor.inactive);
                                    _this._placeholderDecorations.set(placeholder2, handle);
                                }
                            } catch (err) {
                                _didIteratorError5 = true;
                                _iteratorError5 = err;
                            } finally{
                                try {
                                    if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
                                        _iterator5.return();
                                    }
                                } finally{
                                    if (_didIteratorError5) {
                                        throw _iteratorError5;
                                    }
                                }
                            }
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    // Last, re-create the placeholder groups by sorting placeholders by their index.
                    _this._placeholderGroups = _arraysJs.groupBy(_this._snippet.placeholders, _snippetParserJs.Placeholder.compareByIndex);
                });
            }
        }
    ]);
    return OneSnippet;
}();
OneSnippet._decor = {
    active: _textModelJs.ModelDecorationOptions.register({
        description: 'snippet-placeholder-1',
        stickiness: 0 /* AlwaysGrowsWhenTypingAtEdges */ ,
        className: 'snippet-placeholder'
    }),
    inactive: _textModelJs.ModelDecorationOptions.register({
        description: 'snippet-placeholder-2',
        stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
        className: 'snippet-placeholder'
    }),
    activeFinal: _textModelJs.ModelDecorationOptions.register({
        description: 'snippet-placeholder-3',
        stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
        className: 'finish-snippet-placeholder'
    }),
    inactiveFinal: _textModelJs.ModelDecorationOptions.register({
        description: 'snippet-placeholder-4',
        stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
        className: 'finish-snippet-placeholder'
    })
};
var _defaultOptions = {
    overwriteBefore: 0,
    overwriteAfter: 0,
    adjustWhitespace: true,
    clipboardText: undefined,
    overtypingCapturer: undefined
};
var SnippetSession = /*#__PURE__*/ function() {
    "use strict";
    function SnippetSession(editor, template) {
        var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : _defaultOptions;
        _helpers.classCallCheck(this, SnippetSession);
        this._templateMerges = [];
        this._snippets = [];
        this._editor = editor;
        this._template = template;
        this._options = options;
    }
    _helpers.createClass(SnippetSession, [
        {
            key: "dispose",
            value: function dispose() {
                _lifecycleJs.dispose(this._snippets);
            }
        },
        {
            key: "_logInfo",
            value: function _logInfo() {
                return 'template="'.concat(this._template, '", merged_templates="').concat(this._templateMerges.join(' -> '), '"');
            }
        },
        {
            key: "insert",
            value: function insert() {
                var _this = this;
                if (!this._editor.hasModel()) return;
                // make insert edit and start with first selections
                var ref = SnippetSession.createEditsAndSnippets(this._editor, this._template, this._options.overwriteBefore, this._options.overwriteAfter, false, this._options.adjustWhitespace, this._options.clipboardText, this._options.overtypingCapturer), edits = ref.edits, snippets = ref.snippets;
                this._snippets = snippets;
                this._editor.executeEdits('snippet', edits, function(undoEdits) {
                    if (_this._snippets[0].hasPlaceholder) return _this._move(true);
                    else return undoEdits.filter(function(edit) {
                        return !!edit.identifier;
                    }) // only use our undo edits
                    .map(function(edit) {
                        return _selectionJs.Selection.fromPositions(edit.range.getEndPosition());
                    });
                });
                this._editor.revealRange(this._editor.getSelections()[0]);
            }
        },
        {
            key: "merge",
            value: function merge(template) {
                var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _defaultOptions;
                var _this = this;
                if (!this._editor.hasModel()) return;
                this._templateMerges.push([
                    this._snippets[0]._nestingLevel,
                    this._snippets[0]._placeholderGroupsIdx,
                    template
                ]);
                var ref = SnippetSession.createEditsAndSnippets(this._editor, template, options.overwriteBefore, options.overwriteAfter, true, options.adjustWhitespace, options.clipboardText, options.overtypingCapturer), edits = ref.edits, snippets = ref.snippets;
                this._editor.executeEdits('snippet', edits, function(undoEdits) {
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator = _this._snippets[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var snippet = _step.value;
                            snippet.merge(snippets);
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    console.assert(snippets.length === 0);
                    if (_this._snippets[0].hasPlaceholder) return _this._move(undefined);
                    else return undoEdits.filter(function(edit) {
                        return !!edit.identifier;
                    }) // only use our undo edits
                    .map(function(edit) {
                        return _selectionJs.Selection.fromPositions(edit.range.getEndPosition());
                    });
                });
            }
        },
        {
            key: "next",
            value: function next() {
                var newSelections = this._move(true);
                this._editor.setSelections(newSelections);
                this._editor.revealPositionInCenterIfOutsideViewport(newSelections[0].getPosition());
            }
        },
        {
            key: "prev",
            value: function prev() {
                var newSelections = this._move(false);
                this._editor.setSelections(newSelections);
                this._editor.revealPositionInCenterIfOutsideViewport(newSelections[0].getPosition());
            }
        },
        {
            key: "_move",
            value: function _move(fwd) {
                var selections = [];
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this._snippets[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var snippet = _step.value;
                        var _selections;
                        var oneSelection = snippet.move(fwd);
                        (_selections = selections).push.apply(_selections, _helpers.toConsumableArray(oneSelection));
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return selections;
            }
        },
        {
            key: "isAtFirstPlaceholder",
            get: function get() {
                return this._snippets[0].isAtFirstPlaceholder;
            }
        },
        {
            key: "isAtLastPlaceholder",
            get: function get() {
                return this._snippets[0].isAtLastPlaceholder;
            }
        },
        {
            key: "hasPlaceholder",
            get: function get() {
                return this._snippets[0].hasPlaceholder;
            }
        },
        {
            key: "choice",
            get: function get() {
                return this._snippets[0].choice;
            }
        },
        {
            key: "isSelectionWithinPlaceholders",
            value: function isSelectionWithinPlaceholders() {
                if (!this.hasPlaceholder) return false;
                var selections = this._editor.getSelections();
                if (selections.length < this._snippets.length) // this means we started snippet mode with N
                // selections and have M (N > M) selections.
                // So one snippet is without selection -> cancel
                return false;
                var allPossibleSelections = new Map();
                var _iteratorNormalCompletion8 = true, _didIteratorError8 = false, _iteratorError8 = undefined;
                try {
                    var _loop = function(_iterator, _step) {
                        var snippet = _step.value;
                        var possibleSelections = snippet.computePossibleSelections();
                        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                        // for the first snippet find the placeholder (and its ranges)
                        // that contain at least one selection. for all remaining snippets
                        // the same placeholder (and their ranges) must be used.
                        if (allPossibleSelections.size === 0) try {
                            for(var _iterator7 = possibleSelections[Symbol.iterator](), _step7; !(_iteratorNormalCompletion = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion = true){
                                var _value = _helpers.slicedToArray(_step7.value, 2), index = _value[0], ranges = _value[1];
                                ranges.sort(_rangeJs.Range.compareRangesUsingStarts);
                                var _iteratorNormalCompletion7 = true, _didIteratorError7 = false, _iteratorError7 = undefined;
                                try {
                                    for(var _iterator8 = selections[Symbol.iterator](), _step8; !(_iteratorNormalCompletion7 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion7 = true){
                                        var selection = _step8.value;
                                        if (ranges[0].containsRange(selection)) {
                                            allPossibleSelections.set(index, []);
                                            break;
                                        }
                                    }
                                } catch (err) {
                                    _didIteratorError7 = true;
                                    _iteratorError7 = err;
                                } finally{
                                    try {
                                        if (!_iteratorNormalCompletion7 && _iterator8.return != null) {
                                            _iterator8.return();
                                        }
                                    } finally{
                                        if (_didIteratorError7) {
                                            throw _iteratorError7;
                                        }
                                    }
                                }
                            }
                        } catch (err) {
                            _didIteratorError = true;
                            _iteratorError = err;
                        } finally{
                            try {
                                if (!_iteratorNormalCompletion && _iterator7.return != null) {
                                    _iterator7.return();
                                }
                            } finally{
                                if (_didIteratorError) {
                                    throw _iteratorError;
                                }
                            }
                        }
                        if (allPossibleSelections.size === 0) // return false if we couldn't associate a selection to
                        // this (the first) snippet
                        return {
                            v: false
                        };
                        // add selections from 'this' snippet so that we know all
                        // selections for this placeholder
                        allPossibleSelections.forEach(function(array, index) {
                            var _array;
                            (_array = array).push.apply(_array, _helpers.toConsumableArray(possibleSelections.get(index)));
                        });
                    };
                    for(var _iterator = this._snippets[Symbol.iterator](), _step; !(_iteratorNormalCompletion8 = (_step = _iterator.next()).done); _iteratorNormalCompletion8 = true){
                        var _ret = _loop(_iterator, _step);
                        if (_helpers.typeOf(_ret) === "object") return _ret.v;
                    }
                } catch (err) {
                    _didIteratorError8 = true;
                    _iteratorError8 = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion8 && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError8) {
                            throw _iteratorError8;
                        }
                    }
                }
                // sort selections (and later placeholder-ranges). then walk both
                // arrays and make sure the placeholder-ranges contain the corresponding
                // selection
                selections.sort(_rangeJs.Range.compareRangesUsingStarts);
                var _iteratorNormalCompletion6 = true, _didIteratorError6 = false, _iteratorError6 = undefined;
                try {
                    for(var _iterator6 = allPossibleSelections[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true){
                        var _value1 = _helpers.slicedToArray(_step6.value, 2), index1 = _value1[0], ranges1 = _value1[1];
                        if (ranges1.length !== selections.length) {
                            allPossibleSelections.delete(index1);
                            continue;
                        }
                        ranges1.sort(_rangeJs.Range.compareRangesUsingStarts);
                        for(var i = 0; i < ranges1.length; i++)if (!ranges1[i].containsRange(selections[i])) {
                            allPossibleSelections.delete(index1);
                            continue;
                        }
                    }
                } catch (err) {
                    _didIteratorError6 = true;
                    _iteratorError6 = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion6 && _iterator6.return != null) {
                            _iterator6.return();
                        }
                    } finally{
                        if (_didIteratorError6) {
                            throw _iteratorError6;
                        }
                    }
                }
                // from all possible selections we have deleted those
                // that don't match with the current selection. if we don't
                // have any left, we don't have a selection anymore
                return allPossibleSelections.size > 0;
            }
        }
    ], [
        {
            key: "adjustWhitespace",
            value: function adjustWhitespace(model, position, snippet, adjustIndentation, adjustNewlines) {
                var line = model.getLineContent(position.lineNumber);
                var lineLeadingWhitespace = _stringsJs.getLeadingWhitespace(line, 0, position.column - 1);
                // the snippet as inserted
                var snippetTextString;
                snippet.walk(function(marker) {
                    // all text elements that are not inside choice
                    if (!(marker instanceof _snippetParserJs.Text) || marker.parent instanceof _snippetParserJs.Choice) return true;
                    var lines = marker.value.split(/\r\n|\r|\n/);
                    if (adjustIndentation) {
                        // adjust indentation of snippet test
                        // -the snippet-start doesn't get extra-indented (lineLeadingWhitespace), only normalized
                        // -all N+1 lines get extra-indented and normalized
                        // -the text start get extra-indented and normalized when following a linebreak
                        var offset = snippet.offset(marker);
                        if (offset === 0) // snippet start
                        lines[0] = model.normalizeIndentation(lines[0]);
                        else {
                            // check if text start is after a linebreak
                            snippetTextString = snippetTextString !== null && snippetTextString !== void 0 ? snippetTextString : snippet.toString();
                            var prevChar = snippetTextString.charCodeAt(offset - 1);
                            if (prevChar === 10 /* LineFeed */  || prevChar === 13 /* CarriageReturn */ ) lines[0] = model.normalizeIndentation(lineLeadingWhitespace + lines[0]);
                        }
                        for(var i = 1; i < lines.length; i++)lines[i] = model.normalizeIndentation(lineLeadingWhitespace + lines[i]);
                    }
                    var newValue = lines.join(model.getEOL());
                    if (newValue !== marker.value) {
                        marker.parent.replace(marker, [
                            new _snippetParserJs.Text(newValue)
                        ]);
                        snippetTextString = undefined;
                    }
                    return true;
                });
                return lineLeadingWhitespace;
            }
        },
        {
            key: "adjustSelection",
            value: function adjustSelection(model, selection, overwriteBefore, overwriteAfter) {
                if (overwriteBefore !== 0 || overwriteAfter !== 0) {
                    // overwrite[Before|After] is compute using the position, not the whole
                    // selection. therefore we adjust the selection around that position
                    var positionLineNumber = selection.positionLineNumber, positionColumn = selection.positionColumn;
                    var positionColumnBefore = positionColumn - overwriteBefore;
                    var positionColumnAfter = positionColumn + overwriteAfter;
                    var range = model.validateRange({
                        startLineNumber: positionLineNumber,
                        startColumn: positionColumnBefore,
                        endLineNumber: positionLineNumber,
                        endColumn: positionColumnAfter
                    });
                    selection = _selectionJs.Selection.createWithDirection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn, selection.getDirection());
                }
                return selection;
            }
        },
        {
            key: "createEditsAndSnippets",
            value: function createEditsAndSnippets(editor, template, overwriteBefore, overwriteAfter, enforceFinalTabstop, adjustWhitespace, clipboardText, overtypingCapturer) {
                var edits = [];
                var snippets = [];
                if (!editor.hasModel()) return {
                    edits: edits,
                    snippets: snippets
                };
                var model = editor.getModel();
                var workspaceService = editor.invokeWithinContext(function(accessor) {
                    return accessor.get(_workspaceJs.IWorkspaceContextService);
                });
                var modelBasedVariableResolver = editor.invokeWithinContext(function(accessor) {
                    return new _snippetVariablesJs.ModelBasedVariableResolver(accessor.get(_labelJs.ILabelService), model);
                });
                var readClipboardText = function() {
                    return clipboardText;
                };
                var delta = 0;
                // know what text the overwrite[Before|After] extensions
                // of the primary curser have selected because only when
                // secondary selections extend to the same text we can grow them
                var firstBeforeText = model.getValueInRange(SnippetSession.adjustSelection(model, editor.getSelection(), overwriteBefore, 0));
                var firstAfterText = model.getValueInRange(SnippetSession.adjustSelection(model, editor.getSelection(), 0, overwriteAfter));
                // remember the first non-whitespace column to decide if
                // `keepWhitespace` should be overruled for secondary selections
                var firstLineFirstNonWhitespace = model.getLineFirstNonWhitespaceColumn(editor.getSelection().positionLineNumber);
                // sort selections by their start position but remeber
                // the original index. that allows you to create correct
                // offset-based selection logic without changing the
                // primary selection
                var indexedSelections = editor.getSelections().map(function(selection, idx) {
                    return {
                        selection: selection,
                        idx: idx
                    };
                }).sort(function(a, b) {
                    return _rangeJs.Range.compareRangesUsingStarts(a.selection, b.selection);
                });
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = indexedSelections[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var _value = _step.value, selection1 = _value.selection, idx1 = _value.idx;
                        // extend selection with the `overwriteBefore` and `overwriteAfter` and then
                        // compare if this matches the extensions of the primary selection
                        var extensionBefore = SnippetSession.adjustSelection(model, selection1, overwriteBefore, 0);
                        var extensionAfter = SnippetSession.adjustSelection(model, selection1, 0, overwriteAfter);
                        if (firstBeforeText !== model.getValueInRange(extensionBefore)) extensionBefore = selection1;
                        if (firstAfterText !== model.getValueInRange(extensionAfter)) extensionAfter = selection1;
                        // merge the before and after selection into one
                        var snippetSelection = selection1.setStartPosition(extensionBefore.startLineNumber, extensionBefore.startColumn).setEndPosition(extensionAfter.endLineNumber, extensionAfter.endColumn);
                        var snippet = new _snippetParserJs.SnippetParser().parse(template, true, enforceFinalTabstop);
                        // adjust the template string to match the indentation and
                        // whitespace rules of this insert location (can be different for each cursor)
                        // happens when being asked for (default) or when this is a secondary
                        // cursor and the leading whitespace is different
                        var start = snippetSelection.getStartPosition();
                        var snippetLineLeadingWhitespace = SnippetSession.adjustWhitespace(model, start, snippet, adjustWhitespace || idx1 > 0 && firstLineFirstNonWhitespace !== model.getLineFirstNonWhitespaceColumn(selection1.positionLineNumber), true);
                        snippet.resolveVariables(new _snippetVariablesJs.CompositeSnippetVariableResolver([
                            modelBasedVariableResolver,
                            new _snippetVariablesJs.ClipboardBasedVariableResolver(readClipboardText, idx1, indexedSelections.length, editor.getOption(70 /* multiCursorPaste */ ) === 'spread'),
                            new _snippetVariablesJs.SelectionBasedVariableResolver(model, selection1, idx1, overtypingCapturer),
                            new _snippetVariablesJs.CommentBasedVariableResolver(model, selection1),
                            new _snippetVariablesJs.TimeBasedVariableResolver,
                            new _snippetVariablesJs.WorkspaceBasedVariableResolver(workspaceService),
                            new _snippetVariablesJs.RandomBasedVariableResolver, 
                        ]));
                        var offset = model.getOffsetAt(start) + delta;
                        delta += snippet.toString().length - model.getValueLengthInRange(snippetSelection);
                        // store snippets with the index of their originating selection.
                        // that ensures the primiary cursor stays primary despite not being
                        // the one with lowest start position
                        edits[idx1] = _editOperationJs.EditOperation.replace(snippetSelection, snippet.toString());
                        edits[idx1].identifier = {
                            major: idx1,
                            minor: 0
                        }; // mark the edit so only our undo edits will be used to generate end cursors
                        snippets[idx1] = new OneSnippet(editor, snippet, offset, snippetLineLeadingWhitespace);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return {
                    edits: edits,
                    snippets: snippets
                };
            }
        }
    ]);
    return SnippetSession;
}();

},{"@swc/helpers":"erO4s","../../../base/common/arrays.js":"bZs3E","../../../base/common/lifecycle.js":"bcbPy","../../../base/common/strings.js":"jsb6w","./snippetSession.css":"gwmsu","../../common/core/editOperation.js":"3D5yS","../../common/core/range.js":"VbyL8","../../common/core/selection.js":"hjmnH","../../common/model/textModel.js":"f18vR","../../../platform/label/common/label.js":"3WfP2","../../../platform/workspace/common/workspace.js":"8FOZO","./snippetParser.js":"5VMLU","./snippetVariables.js":"gE8hy","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"gwmsu":[function() {},{}],"gE8hy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "KnownSnippetVariableNames", function() {
    return KnownSnippetVariableNames;
});
parcelHelpers.export(exports, "CompositeSnippetVariableResolver", function() {
    return CompositeSnippetVariableResolver;
});
parcelHelpers.export(exports, "SelectionBasedVariableResolver", function() {
    return SelectionBasedVariableResolver;
});
parcelHelpers.export(exports, "ModelBasedVariableResolver", function() {
    return ModelBasedVariableResolver;
});
parcelHelpers.export(exports, "ClipboardBasedVariableResolver", function() {
    return ClipboardBasedVariableResolver;
});
parcelHelpers.export(exports, "CommentBasedVariableResolver", function() {
    return CommentBasedVariableResolver;
});
parcelHelpers.export(exports, "TimeBasedVariableResolver", function() {
    return TimeBasedVariableResolver;
});
parcelHelpers.export(exports, "WorkspaceBasedVariableResolver", function() {
    return WorkspaceBasedVariableResolver;
});
parcelHelpers.export(exports, "RandomBasedVariableResolver", function() {
    return RandomBasedVariableResolver;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _labelsJs = require("../../../base/common/labels.js");
var _pathJs = require("../../../base/common/path.js");
var _resourcesJs = require("../../../base/common/resources.js");
var _stringsJs = require("../../../base/common/strings.js");
var _uuidJs = require("../../../base/common/uuid.js");
var _languageConfigurationRegistryJs = require("../../common/modes/languageConfigurationRegistry.js");
var _snippetParserJs = require("./snippetParser.js");
var _nlsJs = require("../../../nls.js");
var _workspacesJs = require("../../../platform/workspaces/common/workspaces.js");
var KnownSnippetVariableNames = Object.freeze({
    'CURRENT_YEAR': true,
    'CURRENT_YEAR_SHORT': true,
    'CURRENT_MONTH': true,
    'CURRENT_DATE': true,
    'CURRENT_HOUR': true,
    'CURRENT_MINUTE': true,
    'CURRENT_SECOND': true,
    'CURRENT_DAY_NAME': true,
    'CURRENT_DAY_NAME_SHORT': true,
    'CURRENT_MONTH_NAME': true,
    'CURRENT_MONTH_NAME_SHORT': true,
    'CURRENT_SECONDS_UNIX': true,
    'SELECTION': true,
    'CLIPBOARD': true,
    'TM_SELECTED_TEXT': true,
    'TM_CURRENT_LINE': true,
    'TM_CURRENT_WORD': true,
    'TM_LINE_INDEX': true,
    'TM_LINE_NUMBER': true,
    'TM_FILENAME': true,
    'TM_FILENAME_BASE': true,
    'TM_DIRECTORY': true,
    'TM_FILEPATH': true,
    'RELATIVE_FILEPATH': true,
    'BLOCK_COMMENT_START': true,
    'BLOCK_COMMENT_END': true,
    'LINE_COMMENT': true,
    'WORKSPACE_NAME': true,
    'WORKSPACE_FOLDER': true,
    'RANDOM': true,
    'RANDOM_HEX': true,
    'UUID': true
});
var CompositeSnippetVariableResolver = /*#__PURE__*/ function() {
    "use strict";
    function CompositeSnippetVariableResolver(_delegates) {
        _helpers.classCallCheck(this, CompositeSnippetVariableResolver);
        this._delegates = _delegates;
    }
    _helpers.createClass(CompositeSnippetVariableResolver, [
        {
            key: "resolve",
            value: function resolve(variable) {
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this._delegates[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var delegate = _step.value;
                        var value = delegate.resolve(variable);
                        if (value !== undefined) return value;
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return undefined;
            }
        }
    ]);
    return CompositeSnippetVariableResolver;
}();
var SelectionBasedVariableResolver = /*#__PURE__*/ function() {
    "use strict";
    function SelectionBasedVariableResolver(_model, _selection, _selectionIdx, _overtypingCapturer) {
        _helpers.classCallCheck(this, SelectionBasedVariableResolver);
        this._model = _model;
        this._selection = _selection;
        this._selectionIdx = _selectionIdx;
        this._overtypingCapturer = _overtypingCapturer;
    }
    _helpers.createClass(SelectionBasedVariableResolver, [
        {
            key: "resolve",
            value: function resolve(variable) {
                var name = variable.name;
                if (name === 'SELECTION' || name === 'TM_SELECTED_TEXT') {
                    var value = this._model.getValueInRange(this._selection) || undefined;
                    var isMultiline = this._selection.startLineNumber !== this._selection.endLineNumber;
                    // If there was no selected text, try to get last overtyped text
                    if (!value && this._overtypingCapturer) {
                        var info = this._overtypingCapturer.getLastOvertypedInfo(this._selectionIdx);
                        if (info) {
                            value = info.value;
                            isMultiline = info.multiline;
                        }
                    }
                    if (value && isMultiline && variable.snippet) {
                        // Selection is a multiline string which we indentation we now
                        // need to adjust. We compare the indentation of this variable
                        // with the indentation at the editor position and add potential
                        // extra indentation to the value
                        var line = this._model.getLineContent(this._selection.startLineNumber);
                        var lineLeadingWhitespace = _stringsJs.getLeadingWhitespace(line, 0, this._selection.startColumn - 1);
                        var varLeadingWhitespace = lineLeadingWhitespace;
                        variable.snippet.walk(function(marker) {
                            if (marker === variable) return false;
                            if (marker instanceof _snippetParserJs.Text) varLeadingWhitespace = _stringsJs.getLeadingWhitespace(_stringsJs.splitLines(marker.value).pop());
                            return true;
                        });
                        var whitespaceCommonLength = _stringsJs.commonPrefixLength(varLeadingWhitespace, lineLeadingWhitespace);
                        value = value.replace(/(\r\n|\r|\n)(.*)/g, function(m, newline, rest) {
                            return "".concat(newline).concat(varLeadingWhitespace.substr(whitespaceCommonLength)).concat(rest);
                        });
                    }
                    return value;
                } else if (name === 'TM_CURRENT_LINE') return this._model.getLineContent(this._selection.positionLineNumber);
                else if (name === 'TM_CURRENT_WORD') {
                    var info1 = this._model.getWordAtPosition({
                        lineNumber: this._selection.positionLineNumber,
                        column: this._selection.positionColumn
                    });
                    return info1 && info1.word || undefined;
                } else if (name === 'TM_LINE_INDEX') return String(this._selection.positionLineNumber - 1);
                else if (name === 'TM_LINE_NUMBER') return String(this._selection.positionLineNumber);
                return undefined;
            }
        }
    ]);
    return SelectionBasedVariableResolver;
}();
var ModelBasedVariableResolver = /*#__PURE__*/ function() {
    "use strict";
    function ModelBasedVariableResolver(_labelService, _model) {
        _helpers.classCallCheck(this, ModelBasedVariableResolver);
        this._labelService = _labelService;
        this._model = _model;
    }
    _helpers.createClass(ModelBasedVariableResolver, [
        {
            key: "resolve",
            value: function resolve(variable) {
                var name = variable.name;
                if (name === 'TM_FILENAME') return _pathJs.basename(this._model.uri.fsPath);
                else if (name === 'TM_FILENAME_BASE') {
                    var name1 = _pathJs.basename(this._model.uri.fsPath);
                    var idx = name1.lastIndexOf('.');
                    if (idx <= 0) return name1;
                    else return name1.slice(0, idx);
                } else if (name === 'TM_DIRECTORY') {
                    if (_pathJs.dirname(this._model.uri.fsPath) === '.') return '';
                    return this._labelService.getUriLabel(_resourcesJs.dirname(this._model.uri));
                } else if (name === 'TM_FILEPATH') return this._labelService.getUriLabel(this._model.uri);
                else if (name === 'RELATIVE_FILEPATH') return this._labelService.getUriLabel(this._model.uri, {
                    relative: true,
                    noPrefix: true
                });
                return undefined;
            }
        }
    ]);
    return ModelBasedVariableResolver;
}();
var ClipboardBasedVariableResolver = /*#__PURE__*/ function() {
    "use strict";
    function ClipboardBasedVariableResolver(_readClipboardText, _selectionIdx, _selectionCount, _spread) {
        _helpers.classCallCheck(this, ClipboardBasedVariableResolver);
        this._readClipboardText = _readClipboardText;
        this._selectionIdx = _selectionIdx;
        this._selectionCount = _selectionCount;
        this._spread = _spread;
    }
    _helpers.createClass(ClipboardBasedVariableResolver, [
        {
            key: "resolve",
            value: function resolve(variable) {
                if (variable.name !== 'CLIPBOARD') return undefined;
                var clipboardText = this._readClipboardText();
                if (!clipboardText) return undefined;
                // `spread` is assigning each cursor a line of the clipboard
                // text whenever there the line count equals the cursor count
                // and when enabled
                if (this._spread) {
                    var lines = clipboardText.split(/\r\n|\n|\r/).filter(function(s) {
                        return !_stringsJs.isFalsyOrWhitespace(s);
                    });
                    if (lines.length === this._selectionCount) return lines[this._selectionIdx];
                }
                return clipboardText;
            }
        }
    ]);
    return ClipboardBasedVariableResolver;
}();
var CommentBasedVariableResolver = /*#__PURE__*/ function() {
    "use strict";
    function CommentBasedVariableResolver(_model, _selection) {
        _helpers.classCallCheck(this, CommentBasedVariableResolver);
        this._model = _model;
        this._selection = _selection;
    }
    _helpers.createClass(CommentBasedVariableResolver, [
        {
            key: "resolve",
            value: function resolve(variable) {
                var name = variable.name;
                var langId = this._model.getLanguageIdAtPosition(this._selection.selectionStartLineNumber, this._selection.selectionStartColumn);
                var config = _languageConfigurationRegistryJs.LanguageConfigurationRegistry.getComments(langId);
                if (!config) return undefined;
                if (name === 'LINE_COMMENT') return config.lineCommentToken || undefined;
                else if (name === 'BLOCK_COMMENT_START') return config.blockCommentStartToken || undefined;
                else if (name === 'BLOCK_COMMENT_END') return config.blockCommentEndToken || undefined;
                return undefined;
            }
        }
    ]);
    return CommentBasedVariableResolver;
}();
var TimeBasedVariableResolver = /*#__PURE__*/ function() {
    "use strict";
    function TimeBasedVariableResolver() {
        _helpers.classCallCheck(this, TimeBasedVariableResolver);
        this._date = new Date();
    }
    _helpers.createClass(TimeBasedVariableResolver, [
        {
            key: "resolve",
            value: function resolve(variable) {
                var name = variable.name;
                if (name === 'CURRENT_YEAR') return String(this._date.getFullYear());
                else if (name === 'CURRENT_YEAR_SHORT') return String(this._date.getFullYear()).slice(-2);
                else if (name === 'CURRENT_MONTH') return String(this._date.getMonth().valueOf() + 1).padStart(2, '0');
                else if (name === 'CURRENT_DATE') return String(this._date.getDate().valueOf()).padStart(2, '0');
                else if (name === 'CURRENT_HOUR') return String(this._date.getHours().valueOf()).padStart(2, '0');
                else if (name === 'CURRENT_MINUTE') return String(this._date.getMinutes().valueOf()).padStart(2, '0');
                else if (name === 'CURRENT_SECOND') return String(this._date.getSeconds().valueOf()).padStart(2, '0');
                else if (name === 'CURRENT_DAY_NAME') return TimeBasedVariableResolver.dayNames[this._date.getDay()];
                else if (name === 'CURRENT_DAY_NAME_SHORT') return TimeBasedVariableResolver.dayNamesShort[this._date.getDay()];
                else if (name === 'CURRENT_MONTH_NAME') return TimeBasedVariableResolver.monthNames[this._date.getMonth()];
                else if (name === 'CURRENT_MONTH_NAME_SHORT') return TimeBasedVariableResolver.monthNamesShort[this._date.getMonth()];
                else if (name === 'CURRENT_SECONDS_UNIX') return String(Math.floor(this._date.getTime() / 1000));
                return undefined;
            }
        }
    ]);
    return TimeBasedVariableResolver;
}();
TimeBasedVariableResolver.dayNames = [
    _nlsJs.localize('Sunday', "Sunday"),
    _nlsJs.localize('Monday', "Monday"),
    _nlsJs.localize('Tuesday', "Tuesday"),
    _nlsJs.localize('Wednesday', "Wednesday"),
    _nlsJs.localize('Thursday', "Thursday"),
    _nlsJs.localize('Friday', "Friday"),
    _nlsJs.localize('Saturday', "Saturday")
];
TimeBasedVariableResolver.dayNamesShort = [
    _nlsJs.localize('SundayShort', "Sun"),
    _nlsJs.localize('MondayShort', "Mon"),
    _nlsJs.localize('TuesdayShort', "Tue"),
    _nlsJs.localize('WednesdayShort', "Wed"),
    _nlsJs.localize('ThursdayShort', "Thu"),
    _nlsJs.localize('FridayShort', "Fri"),
    _nlsJs.localize('SaturdayShort', "Sat")
];
TimeBasedVariableResolver.monthNames = [
    _nlsJs.localize('January', "January"),
    _nlsJs.localize('February', "February"),
    _nlsJs.localize('March', "March"),
    _nlsJs.localize('April', "April"),
    _nlsJs.localize('May', "May"),
    _nlsJs.localize('June', "June"),
    _nlsJs.localize('July', "July"),
    _nlsJs.localize('August', "August"),
    _nlsJs.localize('September', "September"),
    _nlsJs.localize('October', "October"),
    _nlsJs.localize('November', "November"),
    _nlsJs.localize('December', "December")
];
TimeBasedVariableResolver.monthNamesShort = [
    _nlsJs.localize('JanuaryShort', "Jan"),
    _nlsJs.localize('FebruaryShort', "Feb"),
    _nlsJs.localize('MarchShort', "Mar"),
    _nlsJs.localize('AprilShort', "Apr"),
    _nlsJs.localize('MayShort', "May"),
    _nlsJs.localize('JuneShort', "Jun"),
    _nlsJs.localize('JulyShort', "Jul"),
    _nlsJs.localize('AugustShort', "Aug"),
    _nlsJs.localize('SeptemberShort', "Sep"),
    _nlsJs.localize('OctoberShort', "Oct"),
    _nlsJs.localize('NovemberShort', "Nov"),
    _nlsJs.localize('DecemberShort', "Dec")
];
var WorkspaceBasedVariableResolver = /*#__PURE__*/ function() {
    "use strict";
    function WorkspaceBasedVariableResolver(_workspaceService) {
        _helpers.classCallCheck(this, WorkspaceBasedVariableResolver);
        this._workspaceService = _workspaceService;
    }
    _helpers.createClass(WorkspaceBasedVariableResolver, [
        {
            key: "resolve",
            value: function resolve(variable) {
                if (!this._workspaceService) return undefined;
                var workspaceIdentifier = _workspacesJs.toWorkspaceIdentifier(this._workspaceService.getWorkspace());
                if (!workspaceIdentifier) return undefined;
                if (variable.name === 'WORKSPACE_NAME') return this._resolveWorkspaceName(workspaceIdentifier);
                else if (variable.name === 'WORKSPACE_FOLDER') return this._resoveWorkspacePath(workspaceIdentifier);
                return undefined;
            }
        },
        {
            key: "_resolveWorkspaceName",
            value: function _resolveWorkspaceName(workspaceIdentifier) {
                if (_workspacesJs.isSingleFolderWorkspaceIdentifier(workspaceIdentifier)) return _pathJs.basename(workspaceIdentifier.uri.path);
                var filename = _pathJs.basename(workspaceIdentifier.configPath.path);
                if (filename.endsWith(_workspacesJs.WORKSPACE_EXTENSION)) filename = filename.substr(0, filename.length - _workspacesJs.WORKSPACE_EXTENSION.length - 1);
                return filename;
            }
        },
        {
            key: "_resoveWorkspacePath",
            value: function _resoveWorkspacePath(workspaceIdentifier) {
                if (_workspacesJs.isSingleFolderWorkspaceIdentifier(workspaceIdentifier)) return _labelsJs.normalizeDriveLetter(workspaceIdentifier.uri.fsPath);
                var filename = _pathJs.basename(workspaceIdentifier.configPath.path);
                var folderpath = workspaceIdentifier.configPath.fsPath;
                if (folderpath.endsWith(filename)) folderpath = folderpath.substr(0, folderpath.length - filename.length - 1);
                return folderpath ? _labelsJs.normalizeDriveLetter(folderpath) : '/';
            }
        }
    ]);
    return WorkspaceBasedVariableResolver;
}();
var RandomBasedVariableResolver = /*#__PURE__*/ function() {
    "use strict";
    function RandomBasedVariableResolver() {
        _helpers.classCallCheck(this, RandomBasedVariableResolver);
    }
    _helpers.createClass(RandomBasedVariableResolver, [
        {
            key: "resolve",
            value: function resolve(variable) {
                var name = variable.name;
                if (name === 'RANDOM') return Math.random().toString().slice(-6);
                else if (name === 'RANDOM_HEX') return Math.random().toString(16).slice(-6);
                else if (name === 'UUID') return _uuidJs.generateUuid();
                return undefined;
            }
        }
    ]);
    return RandomBasedVariableResolver;
}();

},{"@swc/helpers":"erO4s","../../../base/common/labels.js":"kDPEJ","../../../base/common/path.js":"cLsfX","../../../base/common/resources.js":"14HNj","../../../base/common/strings.js":"jsb6w","../../../base/common/uuid.js":"glfin","../../common/modes/languageConfigurationRegistry.js":"fdCRx","./snippetParser.js":"5VMLU","../../../nls.js":"9djYb","../../../platform/workspaces/common/workspaces.js":"2nASZ","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"glfin":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "generateUuid", function() {
    return generateUuid;
});
// prep-work
var _data = new Uint8Array(16);
var _hex = [];
for(var i = 0; i < 256; i++)_hex.push(i.toString(16).padStart(2, '0'));
// todo@jrieken - with node@15 crypto#getRandomBytes is available everywhere, https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues#browser_compatibility
var _fillRandomValues;
if (typeof crypto === 'object' && typeof crypto.getRandomValues === 'function') // browser
_fillRandomValues = crypto.getRandomValues.bind(crypto);
else _fillRandomValues = function _fillRandomValues(bucket) {
    for(var i1 = 0; i1 < bucket.length; i1++)bucket[i1] = Math.floor(Math.random() * 256);
    return bucket;
};
function generateUuid() {
    // get data
    _fillRandomValues(_data);
    // set version bits
    _data[6] = _data[6] & 0x0f | 0x40;
    _data[8] = _data[8] & 0x3f | 0x80;
    // print as string
    var i2 = 0;
    var result = '';
    result += _hex[_data[i2++]];
    result += _hex[_data[i2++]];
    result += _hex[_data[i2++]];
    result += _hex[_data[i2++]];
    result += '-';
    result += _hex[_data[i2++]];
    result += _hex[_data[i2++]];
    result += '-';
    result += _hex[_data[i2++]];
    result += _hex[_data[i2++]];
    result += '-';
    result += _hex[_data[i2++]];
    result += _hex[_data[i2++]];
    result += '-';
    result += _hex[_data[i2++]];
    result += _hex[_data[i2++]];
    result += _hex[_data[i2++]];
    result += _hex[_data[i2++]];
    result += _hex[_data[i2++]];
    result += _hex[_data[i2++]];
    return result;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"2nASZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "WORKSPACE_EXTENSION", function() {
    return WORKSPACE_EXTENSION;
});
parcelHelpers.export(exports, "WORKSPACE_FILTER", function() {
    return WORKSPACE_FILTER;
});
parcelHelpers.export(exports, "isSingleFolderWorkspaceIdentifier", function() {
    return isSingleFolderWorkspaceIdentifier;
});
parcelHelpers.export(exports, "toWorkspaceIdentifier", function() {
    return toWorkspaceIdentifier;
}) //#endregion
;
var _uriJs = require("../../../base/common/uri.js");
var _nlsJs = require("../../../nls.js");
var WORKSPACE_EXTENSION = 'code-workspace';
var WORKSPACE_FILTER = [
    {
        name: _nlsJs.localize('codeWorkspace', "Code Workspace"),
        extensions: [
            WORKSPACE_EXTENSION
        ]
    }
];
function isSingleFolderWorkspaceIdentifier(obj) {
    var singleFolderIdentifier = obj;
    return typeof (singleFolderIdentifier === null || singleFolderIdentifier === void 0 ? void 0 : singleFolderIdentifier.id) === 'string' && _uriJs.URI.isUri(singleFolderIdentifier.uri);
}
function toWorkspaceIdentifier(workspace) {
    // Multi root
    if (workspace.configuration) return {
        id: workspace.id,
        configPath: workspace.configuration
    };
    // Single folder
    if (workspace.folders.length === 1) return {
        id: workspace.id,
        uri: workspace.folders[0].uri
    };
    // Empty workspace
    return undefined;
}

},{"../../../base/common/uri.js":"4ZDLf","../../../nls.js":"9djYb","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"anMj7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SuggestController", function() {
    return SuggestController;
});
parcelHelpers.export(exports, "TriggerSuggestAction", function() {
    return TriggerSuggestAction;
});
var _helpers = require("@swc/helpers");
var _ariaJs = require("../../../base/browser/ui/aria/aria.js");
var _arraysJs = require("../../../base/common/arrays.js");
var _asyncJs = require("../../../base/common/async.js");
var _cancellationJs = require("../../../base/common/cancellation.js");
var _errorsJs = require("../../../base/common/errors.js");
var _eventJs = require("../../../base/common/event.js");
var _keybindingsJs = require("../../../base/common/keybindings.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _platformJs = require("../../../base/common/platform.js");
var _stopwatchJs = require("../../../base/common/stopwatch.js");
var _typesJs = require("../../../base/common/types.js");
var _editorStateJs = require("../../browser/core/editorState.js");
var _editorExtensionsJs = require("../../browser/editorExtensions.js");
var _editOperationJs = require("../../common/core/editOperation.js");
var _positionJs = require("../../common/core/position.js");
var _rangeJs = require("../../common/core/range.js");
var _editorContextKeysJs = require("../../common/editorContextKeys.js");
var _snippetController2Js = require("../snippet/snippetController2.js");
var _snippetParserJs = require("../snippet/snippetParser.js");
var _suggestMemoryJs = require("./suggestMemory.js");
var _wordContextKeyJs = require("./wordContextKey.js");
var _nlsJs = require("../../../nls.js");
var _actionsJs = require("../../../platform/actions/common/actions.js");
var _commandsJs = require("../../../platform/commands/common/commands.js");
var _contextkeyJs = require("../../../platform/contextkey/common/contextkey.js");
var _instantiationJs = require("../../../platform/instantiation/common/instantiation.js");
var _keybindingsRegistryJs = require("../../../platform/keybinding/common/keybindingsRegistry.js");
var _logJs = require("../../../platform/log/common/log.js");
var _suggestJs = require("./suggest.js");
var _suggestAlternativesJs = require("./suggestAlternatives.js");
var _suggestCommitCharactersJs = require("./suggestCommitCharacters.js");
var _suggestModelJs = require("./suggestModel.js");
var _suggestOvertypingCapturerJs = require("./suggestOvertypingCapturer.js");
var _suggestWidgetJs = require("./suggestWidget.js");
var _telemetryJs = require("../../../platform/telemetry/common/telemetry.js");
var _resourcesJs = require("../../../base/common/resources.js");
var _hashJs = require("../../../base/common/hash.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
// sticky suggest widget which doesn't disappear on focus out and such
var _sticky = false;
// _sticky = Boolean("true"); // done "weirdly" so that a lint warning prevents you from pushing this
var LineSuffix = /*#__PURE__*/ function() {
    "use strict";
    function LineSuffix(_model, _position) {
        _helpers.classCallCheck(this, LineSuffix);
        this._model = _model;
        this._position = _position;
        // spy on what's happening right of the cursor. two cases:
        // 1. end of line -> check that it's still end of line
        // 2. mid of line -> add a marker and compute the delta
        var maxColumn = _model.getLineMaxColumn(_position.lineNumber);
        if (maxColumn !== _position.column) {
            var offset = _model.getOffsetAt(_position);
            var end = _model.getPositionAt(offset + 1);
            this._marker = _model.deltaDecorations([], [
                {
                    range: _rangeJs.Range.fromPositions(_position, end),
                    options: {
                        description: 'suggest-line-suffix',
                        stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ 
                    }
                }
            ]);
        }
    }
    _helpers.createClass(LineSuffix, [
        {
            key: "dispose",
            value: function dispose() {
                if (this._marker && !this._model.isDisposed()) this._model.deltaDecorations(this._marker, []);
            }
        },
        {
            key: "delta",
            value: function delta(position) {
                if (this._model.isDisposed() || this._position.lineNumber !== position.lineNumber) // bail out early if things seems fishy
                return 0;
                // read the marker (in case suggest was triggered at line end) or compare
                // the cursor to the line end.
                if (this._marker) {
                    var range = this._model.getDecorationRange(this._marker[0]);
                    var end = this._model.getOffsetAt(range.getStartPosition());
                    return end - this._model.getOffsetAt(position);
                } else return this._model.getLineMaxColumn(position.lineNumber) - position.column;
            }
        }
    ]);
    return LineSuffix;
}();
var SuggestController = /*#__PURE__*/ function() {
    "use strict";
    function SuggestController1(editor, _memoryService, _commandService, _contextKeyService, _instantiationService, _logService, _telemetryService) {
        var _this = this;
        _helpers.classCallCheck(this, SuggestController1);
        this._memoryService = _memoryService;
        this._commandService = _commandService;
        this._contextKeyService = _contextKeyService;
        this._instantiationService = _instantiationService;
        this._logService = _logService;
        this._telemetryService = _telemetryService;
        this._lineSuffix = new _lifecycleJs.MutableDisposable();
        this._toDispose = new _lifecycleJs.DisposableStore();
        this._selectors = new PriorityRegistry(function(s) {
            return s.priority;
        });
        this._telemetryGate = 0;
        this.editor = editor;
        this.model = _instantiationService.createInstance(_suggestModelJs.SuggestModel, this.editor);
        // context key: update insert/replace mode
        var ctxInsertMode = _suggestJs.Context.InsertMode.bindTo(_contextKeyService);
        ctxInsertMode.set(editor.getOption(105 /* suggest */ ).insertMode);
        this.model.onDidTrigger(function() {
            return ctxInsertMode.set(editor.getOption(105 /* suggest */ ).insertMode);
        });
        this.widget = this._toDispose.add(new _asyncJs.IdleValue(function() {
            var _this1 = _this;
            var widget = _this._instantiationService.createInstance(_suggestWidgetJs.SuggestWidget, _this.editor);
            _this._toDispose.add(widget);
            _this._toDispose.add(widget.onDidSelect(function(item) {
                return _this1._insertSuggestion(item, 0);
            }, _this));
            // Wire up logic to accept a suggestion on certain characters
            var commitCharacterController = new _suggestCommitCharactersJs.CommitCharacterController(_this.editor, widget, function(item) {
                return _this1._insertSuggestion(item, 2 /* NoAfterUndoStop */ );
            });
            _this._toDispose.add(commitCharacterController);
            _this._toDispose.add(_this.model.onDidSuggest(function(e) {
                if (e.completionModel.items.length === 0) commitCharacterController.reset();
            }));
            // Wire up makes text edit context key
            var ctxMakesTextEdit = _suggestJs.Context.MakesTextEdit.bindTo(_this._contextKeyService);
            var ctxHasInsertAndReplace = _suggestJs.Context.HasInsertAndReplaceRange.bindTo(_this._contextKeyService);
            var ctxCanResolve = _suggestJs.Context.CanResolve.bindTo(_this._contextKeyService);
            _this._toDispose.add(_lifecycleJs.toDisposable(function() {
                ctxMakesTextEdit.reset();
                ctxHasInsertAndReplace.reset();
                ctxCanResolve.reset();
            }));
            _this._toDispose.add(widget.onDidFocus(function(param) {
                var item = param.item;
                // (ctx: makesTextEdit)
                var position = _this1.editor.getPosition();
                var startColumn = item.editStart.column;
                var endColumn = position.column;
                var value = true;
                if (_this1.editor.getOption(1 /* acceptSuggestionOnEnter */ ) === 'smart' && _this1.model.state === 2 /* Auto */  && !item.completion.additionalTextEdits && !(item.completion.insertTextRules & 4 /* InsertAsSnippet */ ) && endColumn - startColumn === item.completion.insertText.length) {
                    var oldText = _this1.editor.getModel().getValueInRange({
                        startLineNumber: position.lineNumber,
                        startColumn: startColumn,
                        endLineNumber: position.lineNumber,
                        endColumn: endColumn
                    });
                    value = oldText !== item.completion.insertText;
                }
                ctxMakesTextEdit.set(value);
                // (ctx: hasInsertAndReplaceRange)
                ctxHasInsertAndReplace.set(!_positionJs.Position.equals(item.editInsertEnd, item.editReplaceEnd));
                // (ctx: canResolve)
                ctxCanResolve.set(Boolean(item.provider.resolveCompletionItem) || Boolean(item.completion.documentation) || item.completion.detail !== item.completion.label);
            }));
            _this._toDispose.add(widget.onDetailsKeyDown(function(e) {
                // cmd + c on macOS, ctrl + c on Win / Linux
                if (e.toKeybinding().equals(new _keybindingsJs.SimpleKeybinding(true, false, false, false, 33 /* KeyC */ )) || _platformJs.isMacintosh && e.toKeybinding().equals(new _keybindingsJs.SimpleKeybinding(false, false, false, true, 33 /* KeyC */ ))) {
                    e.stopPropagation();
                    return;
                }
                if (!e.toKeybinding().isModifierKey()) _this1.editor.focus();
            }));
            return widget;
        }));
        // Wire up text overtyping capture
        this._overtypingCapturer = this._toDispose.add(new _asyncJs.IdleValue(function() {
            return _this._toDispose.add(new _suggestOvertypingCapturerJs.OvertypingCapturer(_this.editor, _this.model));
        }));
        this._alternatives = this._toDispose.add(new _asyncJs.IdleValue(function() {
            return _this._toDispose.add(new _suggestAlternativesJs.SuggestAlternatives(_this.editor, _this._contextKeyService));
        }));
        this._toDispose.add(_instantiationService.createInstance(_wordContextKeyJs.WordContextKey, editor));
        this._toDispose.add(this.model.onDidTrigger(function(e) {
            _this.widget.value.showTriggered(e.auto, e.shy ? 250 : 50);
            _this._lineSuffix.value = new LineSuffix(_this.editor.getModel(), e.position);
        }));
        this._toDispose.add(this.model.onDidSuggest(function(e) {
            if (!e.shy) {
                var index = -1;
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = _this._selectors.itemsOrderedByPriorityDesc[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var selector = _step.value;
                        index = selector.select(_this.editor.getModel(), _this.editor.getPosition(), e.completionModel.items);
                        if (index !== -1) break;
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                if (index === -1) index = _this._memoryService.select(_this.editor.getModel(), _this.editor.getPosition(), e.completionModel.items);
                _this.widget.value.showSuggestions(e.completionModel, index, e.isFrozen, e.auto);
            }
        }));
        this._toDispose.add(this.model.onDidCancel(function(e) {
            if (!e.retrigger) _this.widget.value.hideWidget();
        }));
        this._toDispose.add(this.editor.onDidBlurEditorWidget(function() {
            if (!_sticky) {
                _this.model.cancel();
                _this.model.clear();
            }
        }));
        // Manage the acceptSuggestionsOnEnter context key
        var acceptSuggestionsOnEnter = _suggestJs.Context.AcceptSuggestionsOnEnter.bindTo(_contextKeyService);
        var updateFromConfig = function() {
            var acceptSuggestionOnEnter = _this.editor.getOption(1 /* acceptSuggestionOnEnter */ );
            acceptSuggestionsOnEnter.set(acceptSuggestionOnEnter === 'on' || acceptSuggestionOnEnter === 'smart');
        };
        this._toDispose.add(this.editor.onDidChangeConfiguration(function() {
            return updateFromConfig();
        }));
        updateFromConfig();
    }
    _helpers.createClass(SuggestController1, [
        {
            key: "dispose",
            value: function dispose() {
                this._alternatives.dispose();
                this._toDispose.dispose();
                this.widget.dispose();
                this.model.dispose();
                this._lineSuffix.dispose();
            }
        },
        {
            key: "_insertSuggestion",
            value: function _insertSuggestion(event, flags) {
                var _this = this;
                if (!event || !event.item) {
                    this._alternatives.value.reset();
                    this.model.cancel();
                    this.model.clear();
                    return;
                }
                if (!this.editor.hasModel()) return;
                var model = this.editor.getModel();
                var modelVersionNow = model.getAlternativeVersionId();
                var item = event.item;
                //
                var tasks = [];
                var cts = new _cancellationJs.CancellationTokenSource();
                // pushing undo stops *before* additional text edits and
                // *after* the main edit
                if (!(flags & 1 /* NoBeforeUndoStop */ )) this.editor.pushUndoStop();
                // compute overwrite[Before|After] deltas BEFORE applying extra edits
                var info = this.getOverwriteInfo(item, Boolean(flags & 8 /* AlternativeOverwriteConfig */ ));
                // keep item in memory
                this._memoryService.memorize(model, this.editor.getPosition(), item);
                if (Array.isArray(item.completion.additionalTextEdits)) {
                    // sync additional edits
                    var scrollState = _editorStateJs.StableEditorScrollState.capture(this.editor);
                    this.editor.executeEdits('suggestController.additionalTextEdits.sync', item.completion.additionalTextEdits.map(function(edit) {
                        return _editOperationJs.EditOperation.replace(_rangeJs.Range.lift(edit.range), edit.text);
                    }));
                    scrollState.restoreRelativeVerticalPositionOfCursor(this.editor);
                } else if (!item.isResolved) {
                    var _this2 = this;
                    // async additional edits
                    var sw = new _stopwatchJs.StopWatch(true);
                    var position;
                    var docListener = model.onDidChangeContent(function(e) {
                        if (e.isFlush) {
                            cts.cancel();
                            docListener.dispose();
                            return;
                        }
                        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                        try {
                            for(var _iterator = e.changes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                                var change = _step.value;
                                var thisPosition = _rangeJs.Range.getEndPosition(change.range);
                                if (!position || _positionJs.Position.isBefore(thisPosition, position)) position = thisPosition;
                            }
                        } catch (err) {
                            _didIteratorError = true;
                            _iteratorError = err;
                        } finally{
                            try {
                                if (!_iteratorNormalCompletion && _iterator.return != null) {
                                    _iterator.return();
                                }
                            } finally{
                                if (_didIteratorError) {
                                    throw _iteratorError;
                                }
                            }
                        }
                    });
                    var oldFlags = flags;
                    flags |= 2 /* NoAfterUndoStop */ ;
                    var didType = false;
                    var typeListener = this.editor.onWillType(function() {
                        typeListener.dispose();
                        didType = true;
                        if (!(oldFlags & 2 /* NoAfterUndoStop */ )) _this2.editor.pushUndoStop();
                    });
                    tasks.push(item.resolve(cts.token).then(function() {
                        if (!item.completion.additionalTextEdits || cts.token.isCancellationRequested) return false;
                        if (position && item.completion.additionalTextEdits.some(function(edit) {
                            return _positionJs.Position.isBefore(position, _rangeJs.Range.getStartPosition(edit.range));
                        })) return false;
                        if (didType) _this2.editor.pushUndoStop();
                        var scrollState = _editorStateJs.StableEditorScrollState.capture(_this2.editor);
                        _this2.editor.executeEdits('suggestController.additionalTextEdits.async', item.completion.additionalTextEdits.map(function(edit) {
                            return _editOperationJs.EditOperation.replace(_rangeJs.Range.lift(edit.range), edit.text);
                        }));
                        scrollState.restoreRelativeVerticalPositionOfCursor(_this2.editor);
                        if (didType || !(oldFlags & 2 /* NoAfterUndoStop */ )) _this2.editor.pushUndoStop();
                        return true;
                    }).then(function(applied) {
                        _this2._logService.trace('[suggest] async resolving of edits DONE (ms, applied?)', sw.elapsed(), applied);
                        docListener.dispose();
                        typeListener.dispose();
                    }));
                }
                var insertText = item.completion.insertText;
                if (!(item.completion.insertTextRules & 4 /* InsertAsSnippet */ )) insertText = _snippetParserJs.SnippetParser.escape(insertText);
                _snippetController2Js.SnippetController2.get(this.editor).insert(insertText, {
                    overwriteBefore: info.overwriteBefore,
                    overwriteAfter: info.overwriteAfter,
                    undoStopBefore: false,
                    undoStopAfter: false,
                    adjustWhitespace: !(item.completion.insertTextRules & 1 /* KeepWhitespace */ ),
                    clipboardText: event.model.clipboardText,
                    overtypingCapturer: this._overtypingCapturer.value
                });
                if (!(flags & 2 /* NoAfterUndoStop */ )) this.editor.pushUndoStop();
                if (!item.completion.command) // done
                this.model.cancel();
                else if (item.completion.command.id === TriggerSuggestAction.id) // retigger
                this.model.trigger({
                    auto: true,
                    shy: false
                }, true);
                else {
                    var __commandService;
                    // exec command, done
                    tasks.push((__commandService = this._commandService).executeCommand.apply(__commandService, [
                        item.completion.command.id
                    ].concat(_helpers.toConsumableArray(item.completion.command.arguments ? _helpers.toConsumableArray(item.completion.command.arguments) : []))).catch(_errorsJs.onUnexpectedError));
                    this.model.cancel();
                }
                if (flags & 4 /* KeepAlternativeSuggestions */ ) this._alternatives.value.set(event, function(next) {
                    // cancel resolving of additional edits
                    cts.cancel();
                    // this is not so pretty. when inserting the 'next'
                    // suggestion we undo until we are at the state at
                    // which we were before inserting the previous suggestion...
                    while(model.canUndo()){
                        if (modelVersionNow !== model.getAlternativeVersionId()) model.undo();
                        _this._insertSuggestion(next, 3 /* NoAfterUndoStop */  | (flags & 8 /* AlternativeOverwriteConfig */  ? 8 /* AlternativeOverwriteConfig */  : 0));
                        break;
                    }
                });
                this._alertCompletionItem(item);
                // clear only now - after all tasks are done
                Promise.all(tasks).finally(function() {
                    _this._reportSuggestionAcceptedTelemetry(model, event);
                    _this.model.clear();
                    cts.dispose();
                });
            }
        },
        {
            key: "_reportSuggestionAcceptedTelemetry",
            value: function _reportSuggestionAcceptedTelemetry(model, acceptedSuggestion) {
                var _a;
                if ((this._telemetryGate++) % 100 !== 0) return;
                // _debugDisplayName looks like `vscode.css-language-features(/-:)`, where the last bit is the trigger chars
                // normalize it to just the extension ID and lowercase
                var providerId = ((_a = acceptedSuggestion.item.provider._debugDisplayName) !== null && _a !== void 0 ? _a : 'unknown').split('(', 1)[0].toLowerCase();
                this._telemetryService.publicLog2('suggest.acceptedSuggestion', {
                    providerId: providerId,
                    basenameHash: _hashJs.hash(_resourcesJs.basename(model.uri)).toString(16),
                    languageId: model.getLanguageId(),
                    fileExtension: _resourcesJs.extname(model.uri)
                });
            }
        },
        {
            key: "getOverwriteInfo",
            value: function getOverwriteInfo(item, toggleMode) {
                _typesJs.assertType(this.editor.hasModel());
                var replace = this.editor.getOption(105 /* suggest */ ).insertMode === 'replace';
                if (toggleMode) replace = !replace;
                var overwriteBefore = item.position.column - item.editStart.column;
                var overwriteAfter = (replace ? item.editReplaceEnd.column : item.editInsertEnd.column) - item.position.column;
                var columnDelta = this.editor.getPosition().column - item.position.column;
                var suffixDelta = this._lineSuffix.value ? this._lineSuffix.value.delta(this.editor.getPosition()) : 0;
                return {
                    overwriteBefore: overwriteBefore + columnDelta,
                    overwriteAfter: overwriteAfter + suffixDelta
                };
            }
        },
        {
            key: "_alertCompletionItem",
            value: function _alertCompletionItem(item) {
                if (_arraysJs.isNonEmptyArray(item.completion.additionalTextEdits)) {
                    var msg = _nlsJs.localize('aria.alert.snippet', "Accepting '{0}' made {1} additional edits", item.textLabel, item.completion.additionalTextEdits.length);
                    _ariaJs.alert(msg);
                }
            }
        },
        {
            key: "triggerSuggest",
            value: function triggerSuggest(onlyFrom, auto) {
                if (this.editor.hasModel()) {
                    this.model.trigger({
                        auto: auto !== null && auto !== void 0 ? auto : false,
                        shy: false
                    }, false, onlyFrom);
                    this.editor.revealPosition(this.editor.getPosition(), 0 /* Smooth */ );
                    this.editor.focus();
                }
            }
        },
        {
            key: "triggerSuggestAndAcceptBest",
            value: function triggerSuggestAndAcceptBest(arg) {
                var _this = this;
                if (!this.editor.hasModel()) return;
                var positionNow = this.editor.getPosition();
                var fallback = function() {
                    if (positionNow.equals(_this.editor.getPosition())) _this._commandService.executeCommand(arg.fallback);
                };
                var makesTextEdit = function(item) {
                    if (item.completion.insertTextRules & 4 /* InsertAsSnippet */  || item.completion.additionalTextEdits) // snippet, other editor -> makes edit
                    return true;
                    var position = _this.editor.getPosition();
                    var startColumn = item.editStart.column;
                    var endColumn = position.column;
                    if (endColumn - startColumn !== item.completion.insertText.length) // unequal lengths -> makes edit
                    return true;
                    var textNow = _this.editor.getModel().getValueInRange({
                        startLineNumber: position.lineNumber,
                        startColumn: startColumn,
                        endLineNumber: position.lineNumber,
                        endColumn: endColumn
                    });
                    // unequal text -> makes edit
                    return textNow !== item.completion.insertText;
                };
                _eventJs.Event.once(this.model.onDidTrigger)(function(_) {
                    var _this3 = _this;
                    // wait for trigger because only then the cancel-event is trustworthy
                    var listener = [];
                    _eventJs.Event.any(_this.model.onDidTrigger, _this.model.onDidCancel)(function() {
                        // retrigger or cancel -> try to type default text
                        _lifecycleJs.dispose(listener);
                        fallback();
                    }, undefined, listener);
                    _this.model.onDidSuggest(function(param) {
                        var completionModel = param.completionModel;
                        _lifecycleJs.dispose(listener);
                        if (completionModel.items.length === 0) {
                            fallback();
                            return;
                        }
                        var index = _this3._memoryService.select(_this3.editor.getModel(), _this3.editor.getPosition(), completionModel.items);
                        var item = completionModel.items[index];
                        if (!makesTextEdit(item)) {
                            fallback();
                            return;
                        }
                        _this3.editor.pushUndoStop();
                        _this3._insertSuggestion({
                            index: index,
                            item: item,
                            model: completionModel
                        }, 7 /* NoAfterUndoStop */ );
                    }, undefined, listener);
                });
                this.model.trigger({
                    auto: false,
                    shy: true
                });
                this.editor.revealPosition(positionNow, 0 /* Smooth */ );
                this.editor.focus();
            }
        },
        {
            key: "acceptSelectedSuggestion",
            value: function acceptSelectedSuggestion(keepAlternativeSuggestions, alternativeOverwriteConfig) {
                var item = this.widget.value.getFocusedItem();
                var flags = 0;
                if (keepAlternativeSuggestions) flags |= 4 /* KeepAlternativeSuggestions */ ;
                if (alternativeOverwriteConfig) flags |= 8 /* AlternativeOverwriteConfig */ ;
                this._insertSuggestion(item, flags);
            }
        },
        {
            key: "acceptNextSuggestion",
            value: function acceptNextSuggestion() {
                this._alternatives.value.next();
            }
        },
        {
            key: "acceptPrevSuggestion",
            value: function acceptPrevSuggestion() {
                this._alternatives.value.prev();
            }
        },
        {
            key: "cancelSuggestWidget",
            value: function cancelSuggestWidget() {
                this.model.cancel();
                this.model.clear();
                this.widget.value.hideWidget();
            }
        },
        {
            key: "selectNextSuggestion",
            value: function selectNextSuggestion() {
                this.widget.value.selectNext();
            }
        },
        {
            key: "selectNextPageSuggestion",
            value: function selectNextPageSuggestion() {
                this.widget.value.selectNextPage();
            }
        },
        {
            key: "selectLastSuggestion",
            value: function selectLastSuggestion() {
                this.widget.value.selectLast();
            }
        },
        {
            key: "selectPrevSuggestion",
            value: function selectPrevSuggestion() {
                this.widget.value.selectPrevious();
            }
        },
        {
            key: "selectPrevPageSuggestion",
            value: function selectPrevPageSuggestion() {
                this.widget.value.selectPreviousPage();
            }
        },
        {
            key: "selectFirstSuggestion",
            value: function selectFirstSuggestion() {
                this.widget.value.selectFirst();
            }
        },
        {
            key: "toggleSuggestionDetails",
            value: function toggleSuggestionDetails() {
                this.widget.value.toggleDetails();
            }
        },
        {
            key: "toggleExplainMode",
            value: function toggleExplainMode() {
                this.widget.value.toggleExplainMode();
            }
        },
        {
            key: "toggleSuggestionFocus",
            value: function toggleSuggestionFocus() {
                this.widget.value.toggleDetailsFocus();
            }
        },
        {
            key: "resetWidgetSize",
            value: function resetWidgetSize() {
                this.widget.value.resetPersistedSize();
            }
        },
        {
            key: "forceRenderingAbove",
            value: function forceRenderingAbove() {
                this.widget.value.forceRenderingAbove();
            }
        },
        {
            key: "stopForceRenderingAbove",
            value: function stopForceRenderingAbove() {
                if (!this.widget.isInitialized) // This method has no effect if the widget is not initialized yet.
                return;
                this.widget.value.stopForceRenderingAbove();
            }
        },
        {
            key: "registerSelector",
            value: function registerSelector(selector) {
                return this._selectors.register(selector);
            }
        }
    ], [
        {
            key: "get",
            value: function get(editor) {
                return editor.getContribution(SuggestController1.ID);
            }
        }
    ]);
    return SuggestController1;
}();
SuggestController.ID = 'editor.contrib.suggestController';
SuggestController = __decorate([
    __param(1, _suggestMemoryJs.ISuggestMemoryService),
    __param(2, _commandsJs.ICommandService),
    __param(3, _contextkeyJs.IContextKeyService),
    __param(4, _instantiationJs.IInstantiationService),
    __param(5, _logJs.ILogService),
    __param(6, _telemetryJs.ITelemetryService)
], SuggestController);
var PriorityRegistry = /*#__PURE__*/ function() {
    "use strict";
    function PriorityRegistry(prioritySelector) {
        _helpers.classCallCheck(this, PriorityRegistry);
        this.prioritySelector = prioritySelector;
        this._items = new Array();
    }
    _helpers.createClass(PriorityRegistry, [
        {
            key: "register",
            value: function register(value) {
                var _this = this;
                if (this._items.indexOf(value) !== -1) throw new Error('Value is already registered');
                this._items.push(value);
                this._items.sort(function(s1, s2) {
                    return _this.prioritySelector(s2) - _this.prioritySelector(s1);
                });
                return {
                    dispose: function() {
                        var idx = _this._items.indexOf(value);
                        if (idx >= 0) _this._items.splice(idx, 1);
                    }
                };
            }
        },
        {
            key: "itemsOrderedByPriorityDesc",
            get: function get() {
                return this._items;
            }
        }
    ]);
    return PriorityRegistry;
}();
var TriggerSuggestAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(TriggerSuggestAction, EditorAction);
    var _super = _helpers.createSuper(TriggerSuggestAction);
    function TriggerSuggestAction() {
        _helpers.classCallCheck(this, TriggerSuggestAction);
        return _super.call(this, {
            id: TriggerSuggestAction.id,
            label: _nlsJs.localize('suggest.trigger.label', "Trigger Suggest"),
            alias: 'Trigger Suggest',
            precondition: _contextkeyJs.ContextKeyExpr.and(_editorContextKeysJs.EditorContextKeys.writable, _editorContextKeysJs.EditorContextKeys.hasCompletionItemProvider),
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.textInputFocus,
                primary: 2058 /* Space */ ,
                secondary: [
                    2087 /* KeyI */ 
                ],
                mac: {
                    primary: 266 /* Space */ ,
                    secondary: [
                        521 /* Escape */ ,
                        2087 /* KeyI */ 
                    ]
                },
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    _helpers.createClass(TriggerSuggestAction, [
        {
            key: "run",
            value: function run(_accessor, editor, args) {
                var controller = SuggestController.get(editor);
                if (!controller) return;
                var auto;
                if (args && typeof args === 'object') {
                    if (args.auto === true) auto = true;
                }
                controller.triggerSuggest(undefined, auto);
            }
        }
    ]);
    return TriggerSuggestAction;
}(_editorExtensionsJs.EditorAction);
TriggerSuggestAction.id = 'editor.action.triggerSuggest';
_editorExtensionsJs.registerEditorContribution(SuggestController.ID, SuggestController);
_editorExtensionsJs.registerEditorAction(TriggerSuggestAction);
var weight = 190;
var SuggestCommand = _editorExtensionsJs.EditorCommand.bindToContribution(SuggestController.get);
_editorExtensionsJs.registerEditorCommand(new SuggestCommand({
    id: 'acceptSelectedSuggestion',
    precondition: _suggestJs.Context.Visible,
    handler: function(x) {
        x.acceptSelectedSuggestion(true, false);
    }
}));
// normal tab
_keybindingsRegistryJs.KeybindingsRegistry.registerKeybindingRule({
    id: 'acceptSelectedSuggestion',
    when: _contextkeyJs.ContextKeyExpr.and(_suggestJs.Context.Visible, _editorContextKeysJs.EditorContextKeys.textInputFocus),
    primary: 2 /* Tab */ ,
    weight: weight
});
// accept on enter has special rules
_keybindingsRegistryJs.KeybindingsRegistry.registerKeybindingRule({
    id: 'acceptSelectedSuggestion',
    when: _contextkeyJs.ContextKeyExpr.and(_suggestJs.Context.Visible, _editorContextKeysJs.EditorContextKeys.textInputFocus, _suggestJs.Context.AcceptSuggestionsOnEnter, _suggestJs.Context.MakesTextEdit),
    primary: 3 /* Enter */ ,
    weight: weight
});
_actionsJs.MenuRegistry.appendMenuItem(_suggestJs.suggestWidgetStatusbarMenu, {
    command: {
        id: 'acceptSelectedSuggestion',
        title: _nlsJs.localize('accept.insert', "Insert")
    },
    group: 'left',
    order: 1,
    when: _suggestJs.Context.HasInsertAndReplaceRange.toNegated()
});
_actionsJs.MenuRegistry.appendMenuItem(_suggestJs.suggestWidgetStatusbarMenu, {
    command: {
        id: 'acceptSelectedSuggestion',
        title: _nlsJs.localize('accept.insert', "Insert")
    },
    group: 'left',
    order: 1,
    when: _contextkeyJs.ContextKeyExpr.and(_suggestJs.Context.HasInsertAndReplaceRange, _suggestJs.Context.InsertMode.isEqualTo('insert'))
});
_actionsJs.MenuRegistry.appendMenuItem(_suggestJs.suggestWidgetStatusbarMenu, {
    command: {
        id: 'acceptSelectedSuggestion',
        title: _nlsJs.localize('accept.replace', "Replace")
    },
    group: 'left',
    order: 1,
    when: _contextkeyJs.ContextKeyExpr.and(_suggestJs.Context.HasInsertAndReplaceRange, _suggestJs.Context.InsertMode.isEqualTo('replace'))
});
_editorExtensionsJs.registerEditorCommand(new SuggestCommand({
    id: 'acceptAlternativeSelectedSuggestion',
    precondition: _contextkeyJs.ContextKeyExpr.and(_suggestJs.Context.Visible, _editorContextKeysJs.EditorContextKeys.textInputFocus),
    kbOpts: {
        weight: weight,
        kbExpr: _editorContextKeysJs.EditorContextKeys.textInputFocus,
        primary: 1027 /* Enter */ ,
        secondary: [
            1026 /* Tab */ 
        ]
    },
    handler: function(x) {
        x.acceptSelectedSuggestion(false, true);
    },
    menuOpts: [
        {
            menuId: _suggestJs.suggestWidgetStatusbarMenu,
            group: 'left',
            order: 2,
            when: _contextkeyJs.ContextKeyExpr.and(_suggestJs.Context.HasInsertAndReplaceRange, _suggestJs.Context.InsertMode.isEqualTo('insert')),
            title: _nlsJs.localize('accept.replace', "Replace")
        },
        {
            menuId: _suggestJs.suggestWidgetStatusbarMenu,
            group: 'left',
            order: 2,
            when: _contextkeyJs.ContextKeyExpr.and(_suggestJs.Context.HasInsertAndReplaceRange, _suggestJs.Context.InsertMode.isEqualTo('replace')),
            title: _nlsJs.localize('accept.insert', "Insert")
        }
    ]
}));
// continue to support the old command
_commandsJs.CommandsRegistry.registerCommandAlias('acceptSelectedSuggestionOnEnter', 'acceptSelectedSuggestion');
_editorExtensionsJs.registerEditorCommand(new SuggestCommand({
    id: 'hideSuggestWidget',
    precondition: _suggestJs.Context.Visible,
    handler: function(x) {
        return x.cancelSuggestWidget();
    },
    kbOpts: {
        weight: weight,
        kbExpr: _editorContextKeysJs.EditorContextKeys.textInputFocus,
        primary: 9 /* Escape */ ,
        secondary: [
            1033 /* Escape */ 
        ]
    }
}));
_editorExtensionsJs.registerEditorCommand(new SuggestCommand({
    id: 'selectNextSuggestion',
    precondition: _contextkeyJs.ContextKeyExpr.and(_suggestJs.Context.Visible, _suggestJs.Context.MultipleSuggestions),
    handler: function(c) {
        return c.selectNextSuggestion();
    },
    kbOpts: {
        weight: weight,
        kbExpr: _editorContextKeysJs.EditorContextKeys.textInputFocus,
        primary: 18 /* DownArrow */ ,
        secondary: [
            2066 /* DownArrow */ 
        ],
        mac: {
            primary: 18 /* DownArrow */ ,
            secondary: [
                2066 /* DownArrow */ ,
                300 /* KeyN */ 
            ]
        }
    }
}));
_editorExtensionsJs.registerEditorCommand(new SuggestCommand({
    id: 'selectNextPageSuggestion',
    precondition: _contextkeyJs.ContextKeyExpr.and(_suggestJs.Context.Visible, _suggestJs.Context.MultipleSuggestions),
    handler: function(c) {
        return c.selectNextPageSuggestion();
    },
    kbOpts: {
        weight: weight,
        kbExpr: _editorContextKeysJs.EditorContextKeys.textInputFocus,
        primary: 12 /* PageDown */ ,
        secondary: [
            2060 /* PageDown */ 
        ]
    }
}));
_editorExtensionsJs.registerEditorCommand(new SuggestCommand({
    id: 'selectLastSuggestion',
    precondition: _contextkeyJs.ContextKeyExpr.and(_suggestJs.Context.Visible, _suggestJs.Context.MultipleSuggestions),
    handler: function(c) {
        return c.selectLastSuggestion();
    }
}));
_editorExtensionsJs.registerEditorCommand(new SuggestCommand({
    id: 'selectPrevSuggestion',
    precondition: _contextkeyJs.ContextKeyExpr.and(_suggestJs.Context.Visible, _suggestJs.Context.MultipleSuggestions),
    handler: function(c) {
        return c.selectPrevSuggestion();
    },
    kbOpts: {
        weight: weight,
        kbExpr: _editorContextKeysJs.EditorContextKeys.textInputFocus,
        primary: 16 /* UpArrow */ ,
        secondary: [
            2064 /* UpArrow */ 
        ],
        mac: {
            primary: 16 /* UpArrow */ ,
            secondary: [
                2064 /* UpArrow */ ,
                302 /* KeyP */ 
            ]
        }
    }
}));
_editorExtensionsJs.registerEditorCommand(new SuggestCommand({
    id: 'selectPrevPageSuggestion',
    precondition: _contextkeyJs.ContextKeyExpr.and(_suggestJs.Context.Visible, _suggestJs.Context.MultipleSuggestions),
    handler: function(c) {
        return c.selectPrevPageSuggestion();
    },
    kbOpts: {
        weight: weight,
        kbExpr: _editorContextKeysJs.EditorContextKeys.textInputFocus,
        primary: 11 /* PageUp */ ,
        secondary: [
            2059 /* PageUp */ 
        ]
    }
}));
_editorExtensionsJs.registerEditorCommand(new SuggestCommand({
    id: 'selectFirstSuggestion',
    precondition: _contextkeyJs.ContextKeyExpr.and(_suggestJs.Context.Visible, _suggestJs.Context.MultipleSuggestions),
    handler: function(c) {
        return c.selectFirstSuggestion();
    }
}));
_editorExtensionsJs.registerEditorCommand(new SuggestCommand({
    id: 'toggleSuggestionDetails',
    precondition: _suggestJs.Context.Visible,
    handler: function(x) {
        return x.toggleSuggestionDetails();
    },
    kbOpts: {
        weight: weight,
        kbExpr: _editorContextKeysJs.EditorContextKeys.textInputFocus,
        primary: 2058 /* Space */ ,
        secondary: [
            2087 /* KeyI */ 
        ],
        mac: {
            primary: 266 /* Space */ ,
            secondary: [
                2087 /* KeyI */ 
            ]
        }
    },
    menuOpts: [
        {
            menuId: _suggestJs.suggestWidgetStatusbarMenu,
            group: 'right',
            order: 1,
            when: _contextkeyJs.ContextKeyExpr.and(_suggestJs.Context.DetailsVisible, _suggestJs.Context.CanResolve),
            title: _nlsJs.localize('detail.more', "show less")
        },
        {
            menuId: _suggestJs.suggestWidgetStatusbarMenu,
            group: 'right',
            order: 1,
            when: _contextkeyJs.ContextKeyExpr.and(_suggestJs.Context.DetailsVisible.toNegated(), _suggestJs.Context.CanResolve),
            title: _nlsJs.localize('detail.less', "show more")
        }
    ]
}));
_editorExtensionsJs.registerEditorCommand(new SuggestCommand({
    id: 'toggleExplainMode',
    precondition: _suggestJs.Context.Visible,
    handler: function(x) {
        return x.toggleExplainMode();
    },
    kbOpts: {
        weight: 100 /* EditorContrib */ ,
        primary: 2133 /* Slash */ 
    }
}));
_editorExtensionsJs.registerEditorCommand(new SuggestCommand({
    id: 'toggleSuggestionFocus',
    precondition: _suggestJs.Context.Visible,
    handler: function(x) {
        return x.toggleSuggestionFocus();
    },
    kbOpts: {
        weight: weight,
        kbExpr: _editorContextKeysJs.EditorContextKeys.textInputFocus,
        primary: 2570 /* Space */ ,
        mac: {
            primary: 778 /* Space */ 
        }
    }
}));
//#region tab completions
_editorExtensionsJs.registerEditorCommand(new SuggestCommand({
    id: 'insertBestCompletion',
    precondition: _contextkeyJs.ContextKeyExpr.and(_editorContextKeysJs.EditorContextKeys.textInputFocus, _contextkeyJs.ContextKeyExpr.equals('config.editor.tabCompletion', 'on'), _wordContextKeyJs.WordContextKey.AtEnd, _suggestJs.Context.Visible.toNegated(), _suggestAlternativesJs.SuggestAlternatives.OtherSuggestions.toNegated(), _snippetController2Js.SnippetController2.InSnippetMode.toNegated()),
    handler: function(x, arg) {
        x.triggerSuggestAndAcceptBest(_typesJs.isObject(arg) ? Object.assign({
            fallback: 'tab'
        }, arg) : {
            fallback: 'tab'
        });
    },
    kbOpts: {
        weight: weight,
        primary: 2 /* Tab */ 
    }
}));
_editorExtensionsJs.registerEditorCommand(new SuggestCommand({
    id: 'insertNextSuggestion',
    precondition: _contextkeyJs.ContextKeyExpr.and(_editorContextKeysJs.EditorContextKeys.textInputFocus, _contextkeyJs.ContextKeyExpr.equals('config.editor.tabCompletion', 'on'), _suggestAlternativesJs.SuggestAlternatives.OtherSuggestions, _suggestJs.Context.Visible.toNegated(), _snippetController2Js.SnippetController2.InSnippetMode.toNegated()),
    handler: function(x) {
        return x.acceptNextSuggestion();
    },
    kbOpts: {
        weight: weight,
        kbExpr: _editorContextKeysJs.EditorContextKeys.textInputFocus,
        primary: 2 /* Tab */ 
    }
}));
_editorExtensionsJs.registerEditorCommand(new SuggestCommand({
    id: 'insertPrevSuggestion',
    precondition: _contextkeyJs.ContextKeyExpr.and(_editorContextKeysJs.EditorContextKeys.textInputFocus, _contextkeyJs.ContextKeyExpr.equals('config.editor.tabCompletion', 'on'), _suggestAlternativesJs.SuggestAlternatives.OtherSuggestions, _suggestJs.Context.Visible.toNegated(), _snippetController2Js.SnippetController2.InSnippetMode.toNegated()),
    handler: function(x) {
        return x.acceptPrevSuggestion();
    },
    kbOpts: {
        weight: weight,
        kbExpr: _editorContextKeysJs.EditorContextKeys.textInputFocus,
        primary: 1026 /* Tab */ 
    }
}));
_editorExtensionsJs.registerEditorAction(/*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(_class, EditorAction);
    var _super = _helpers.createSuper(_class);
    function _class() {
        _helpers.classCallCheck(this, _class);
        return _super.call(this, {
            id: 'editor.action.resetSuggestSize',
            label: _nlsJs.localize('suggest.reset.label', "Reset Suggest Widget Size"),
            alias: 'Reset Suggest Widget Size',
            precondition: undefined
        });
    }
    _helpers.createClass(_class, [
        {
            key: "run",
            value: function run(_accessor, editor) {
                SuggestController.get(editor).resetWidgetSize();
            }
        }
    ]);
    return _class;
}(_editorExtensionsJs.EditorAction));

},{"@swc/helpers":"erO4s","../../../base/browser/ui/aria/aria.js":"8SLUe","../../../base/common/arrays.js":"bZs3E","../../../base/common/async.js":"kMhSh","../../../base/common/cancellation.js":"1C4LY","../../../base/common/errors.js":"afm4i","../../../base/common/event.js":"9IBcK","../../../base/common/keybindings.js":"cyVft","../../../base/common/lifecycle.js":"bcbPy","../../../base/common/platform.js":"8pohV","../../../base/common/stopwatch.js":"5CaFX","../../../base/common/types.js":"lF7Cj","../../browser/core/editorState.js":"5J2rl","../../browser/editorExtensions.js":"dFnlo","../../common/core/editOperation.js":"3D5yS","../../common/core/position.js":"6xP0w","../../common/core/range.js":"VbyL8","../../common/editorContextKeys.js":"2t2PW","../snippet/snippetController2.js":"gtyum","../snippet/snippetParser.js":"5VMLU","./suggestMemory.js":"1Vs8C","./wordContextKey.js":"5URQQ","../../../nls.js":"9djYb","../../../platform/actions/common/actions.js":"1qoxQ","../../../platform/commands/common/commands.js":"eeuTC","../../../platform/contextkey/common/contextkey.js":"5cjav","../../../platform/instantiation/common/instantiation.js":"9ABZB","../../../platform/keybinding/common/keybindingsRegistry.js":"5cRx5","../../../platform/log/common/log.js":"ef3uL","./suggest.js":"31aA1","./suggestAlternatives.js":"4ukbd","./suggestCommitCharacters.js":"2Q1o5","./suggestModel.js":"4eVw3","./suggestOvertypingCapturer.js":"kPL5M","./suggestWidget.js":"bd0Gz","../../../platform/telemetry/common/telemetry.js":"ers5B","../../../base/common/resources.js":"14HNj","../../../base/common/hash.js":"dfKxN","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"gtyum":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SnippetController2", function() {
    return SnippetController2;
});
var _helpers = require("@swc/helpers");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _editorExtensionsJs = require("../../browser/editorExtensions.js");
var _rangeJs = require("../../common/core/range.js");
var _selectionJs = require("../../common/core/selection.js");
var _editorContextKeysJs = require("../../common/editorContextKeys.js");
var _suggestJs = require("../suggest/suggest.js");
var _nlsJs = require("../../../nls.js");
var _contextkeyJs = require("../../../platform/contextkey/common/contextkey.js");
var _logJs = require("../../../platform/log/common/log.js");
var _snippetSessionJs = require("./snippetSession.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var _defaultOptions = {
    overwriteBefore: 0,
    overwriteAfter: 0,
    undoStopBefore: true,
    undoStopAfter: true,
    adjustWhitespace: true,
    clipboardText: undefined,
    overtypingCapturer: undefined
};
var SnippetController2 = /*#__PURE__*/ function() {
    "use strict";
    function SnippetController21(_editor, _logService, contextKeyService) {
        _helpers.classCallCheck(this, SnippetController21);
        this._editor = _editor;
        this._logService = _logService;
        this._snippetListener = new _lifecycleJs.DisposableStore();
        this._modelVersionId = -1;
        this._inSnippet = SnippetController21.InSnippetMode.bindTo(contextKeyService);
        this._hasNextTabstop = SnippetController21.HasNextTabstop.bindTo(contextKeyService);
        this._hasPrevTabstop = SnippetController21.HasPrevTabstop.bindTo(contextKeyService);
    }
    _helpers.createClass(SnippetController21, [
        {
            key: "dispose",
            value: function dispose() {
                var _a;
                this._inSnippet.reset();
                this._hasPrevTabstop.reset();
                this._hasNextTabstop.reset();
                (_a = this._session) === null || _a === void 0 || _a.dispose();
                this._snippetListener.dispose();
            }
        },
        {
            key: "insert",
            value: function insert(template, opts) {
                // this is here to find out more about the yet-not-understood
                // error that sometimes happens when we fail to inserted a nested
                // snippet
                try {
                    this._doInsert(template, typeof opts === 'undefined' ? _defaultOptions : Object.assign(Object.assign({}, _defaultOptions), opts));
                } catch (e) {
                    this.cancel();
                    this._logService.error(e);
                    this._logService.error('snippet_error');
                    this._logService.error('insert_template=', template);
                    this._logService.error('existing_template=', this._session ? this._session._logInfo() : '<no_session>');
                }
            }
        },
        {
            key: "_doInsert",
            value: function _doInsert(template, opts) {
                var _this = this;
                if (!this._editor.hasModel()) return;
                // don't listen while inserting the snippet
                // as that is the inflight state causing cancelation
                this._snippetListener.clear();
                if (opts.undoStopBefore) this._editor.getModel().pushStackElement();
                if (!this._session) {
                    this._modelVersionId = this._editor.getModel().getAlternativeVersionId();
                    this._session = new _snippetSessionJs.SnippetSession(this._editor, template, opts);
                    this._session.insert();
                } else this._session.merge(template, opts);
                if (opts.undoStopAfter) this._editor.getModel().pushStackElement();
                this._updateState();
                this._snippetListener.add(this._editor.onDidChangeModelContent(function(e) {
                    return e.isFlush && _this.cancel();
                }));
                this._snippetListener.add(this._editor.onDidChangeModel(function() {
                    return _this.cancel();
                }));
                this._snippetListener.add(this._editor.onDidChangeCursorSelection(function() {
                    return _this._updateState();
                }));
            }
        },
        {
            key: "_updateState",
            value: function _updateState() {
                if (!this._session || !this._editor.hasModel()) // canceled in the meanwhile
                return;
                if (this._modelVersionId === this._editor.getModel().getAlternativeVersionId()) // undo until the 'before' state happened
                // and makes use cancel snippet mode
                return this.cancel();
                if (!this._session.hasPlaceholder) // don't listen for selection changes and don't
                // update context keys when the snippet is plain text
                return this.cancel();
                if (this._session.isAtLastPlaceholder || !this._session.isSelectionWithinPlaceholders()) return this.cancel();
                this._inSnippet.set(true);
                this._hasPrevTabstop.set(!this._session.isAtFirstPlaceholder);
                this._hasNextTabstop.set(!this._session.isAtLastPlaceholder);
                this._handleChoice();
            }
        },
        {
            key: "_handleChoice",
            value: function _handleChoice() {
                if (!this._session || !this._editor.hasModel()) {
                    this._currentChoice = undefined;
                    return;
                }
                var choice = this._session.choice;
                if (!choice) {
                    this._currentChoice = undefined;
                    return;
                }
                if (this._currentChoice !== choice) {
                    var _this = this;
                    this._currentChoice = choice;
                    this._editor.setSelections(this._editor.getSelections().map(function(s) {
                        return _selectionJs.Selection.fromPositions(s.getStartPosition());
                    }));
                    var _options = _helpers.slicedToArray(choice.options, 1), first = _options[0];
                    _suggestJs.showSimpleSuggestions(this._editor, choice.options.map(function(option, i) {
                        // let before = choice.options.slice(0, i);
                        // let after = choice.options.slice(i);
                        return {
                            kind: 13 /* Value */ ,
                            label: option.value,
                            insertText: option.value,
                            // insertText: `\${1|${after.concat(before).join(',')}|}$0`,
                            // snippetType: 'textmate',
                            sortText: 'a'.repeat(i + 1),
                            range: _rangeJs.Range.fromPositions(_this._editor.getPosition(), _this._editor.getPosition().delta(0, first.value.length))
                        };
                    }));
                }
            }
        },
        {
            key: "finish",
            value: function finish() {
                while(this._inSnippet.get())this.next();
            }
        },
        {
            key: "cancel",
            value: function cancel() {
                var resetSelection = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
                var _a;
                this._inSnippet.reset();
                this._hasPrevTabstop.reset();
                this._hasNextTabstop.reset();
                this._snippetListener.clear();
                (_a = this._session) === null || _a === void 0 || _a.dispose();
                this._session = undefined;
                this._modelVersionId = -1;
                if (resetSelection) // reset selection to the primary cursor when being asked
                // for. this happens when explicitly cancelling snippet mode,
                // e.g. when pressing ESC
                this._editor.setSelections([
                    this._editor.getSelection()
                ]);
            }
        },
        {
            key: "prev",
            value: function prev() {
                if (this._session) this._session.prev();
                this._updateState();
            }
        },
        {
            key: "next",
            value: function next() {
                if (this._session) this._session.next();
                this._updateState();
            }
        },
        {
            key: "isInSnippet",
            value: function isInSnippet() {
                return Boolean(this._inSnippet.get());
            }
        }
    ], [
        {
            key: "get",
            value: function get(editor) {
                return editor.getContribution(SnippetController21.ID);
            }
        }
    ]);
    return SnippetController21;
}();
SnippetController2.ID = 'snippetController2';
SnippetController2.InSnippetMode = new _contextkeyJs.RawContextKey('inSnippetMode', false, _nlsJs.localize('inSnippetMode', "Whether the editor in current in snippet mode"));
SnippetController2.HasNextTabstop = new _contextkeyJs.RawContextKey('hasNextTabstop', false, _nlsJs.localize('hasNextTabstop', "Whether there is a next tab stop when in snippet mode"));
SnippetController2.HasPrevTabstop = new _contextkeyJs.RawContextKey('hasPrevTabstop', false, _nlsJs.localize('hasPrevTabstop', "Whether there is a previous tab stop when in snippet mode"));
SnippetController2 = __decorate([
    __param(1, _logJs.ILogService),
    __param(2, _contextkeyJs.IContextKeyService)
], SnippetController2);
_editorExtensionsJs.registerEditorContribution(SnippetController2.ID, SnippetController2);
var CommandCtor = _editorExtensionsJs.EditorCommand.bindToContribution(SnippetController2.get);
_editorExtensionsJs.registerEditorCommand(new CommandCtor({
    id: 'jumpToNextSnippetPlaceholder',
    precondition: _contextkeyJs.ContextKeyExpr.and(SnippetController2.InSnippetMode, SnippetController2.HasNextTabstop),
    handler: function(ctrl) {
        return ctrl.next();
    },
    kbOpts: {
        weight: 130,
        kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
        primary: 2 /* Tab */ 
    }
}));
_editorExtensionsJs.registerEditorCommand(new CommandCtor({
    id: 'jumpToPrevSnippetPlaceholder',
    precondition: _contextkeyJs.ContextKeyExpr.and(SnippetController2.InSnippetMode, SnippetController2.HasPrevTabstop),
    handler: function(ctrl) {
        return ctrl.prev();
    },
    kbOpts: {
        weight: 130,
        kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
        primary: 1026 /* Tab */ 
    }
}));
_editorExtensionsJs.registerEditorCommand(new CommandCtor({
    id: 'leaveSnippet',
    precondition: SnippetController2.InSnippetMode,
    handler: function(ctrl) {
        return ctrl.cancel(true);
    },
    kbOpts: {
        weight: 130,
        kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
        primary: 9 /* Escape */ ,
        secondary: [
            1033 /* Escape */ 
        ]
    }
}));
_editorExtensionsJs.registerEditorCommand(new CommandCtor({
    id: 'acceptSnippet',
    precondition: SnippetController2.InSnippetMode,
    handler: function(ctrl) {
        return ctrl.finish();
    }
}));

},{"@swc/helpers":"erO4s","../../../base/common/lifecycle.js":"bcbPy","../../browser/editorExtensions.js":"dFnlo","../../common/core/range.js":"VbyL8","../../common/core/selection.js":"hjmnH","../../common/editorContextKeys.js":"2t2PW","../suggest/suggest.js":"31aA1","../../../nls.js":"9djYb","../../../platform/contextkey/common/contextkey.js":"5cjav","../../../platform/log/common/log.js":"ef3uL","./snippetSession.js":"lzi1r","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"31aA1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Context", function() {
    return Context;
});
parcelHelpers.export(exports, "suggestWidgetStatusbarMenu", function() {
    return suggestWidgetStatusbarMenu;
});
parcelHelpers.export(exports, "CompletionItem", function() {
    return CompletionItem;
});
parcelHelpers.export(exports, "CompletionOptions", function() {
    return CompletionOptions;
});
parcelHelpers.export(exports, "getSnippetSuggestSupport", function() {
    return getSnippetSuggestSupport;
});
parcelHelpers.export(exports, "CompletionItemModel", function() {
    return CompletionItemModel;
});
parcelHelpers.export(exports, "provideSuggestionItems", function() {
    return provideSuggestionItems;
});
parcelHelpers.export(exports, "getSuggestionComparator", function() {
    return getSuggestionComparator;
});
parcelHelpers.export(exports, "showSimpleSuggestions", function() {
    return showSimpleSuggestions;
});
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
var _cancellationJs = require("../../../base/common/cancellation.js");
var _errorsJs = require("../../../base/common/errors.js");
var _filtersJs = require("../../../base/common/filters.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _stopwatchJs = require("../../../base/common/stopwatch.js");
var _typesJs = require("../../../base/common/types.js");
var _uriJs = require("../../../base/common/uri.js");
var _positionJs = require("../../common/core/position.js");
var _rangeJs = require("../../common/core/range.js");
var _modesJs = require("../../common/modes.js");
var _resolverServiceJs = require("../../common/services/resolverService.js");
var _snippetParserJs = require("../snippet/snippetParser.js");
var _nlsJs = require("../../../nls.js");
var _actionsJs = require("../../../platform/actions/common/actions.js");
var _commandsJs = require("../../../platform/commands/common/commands.js");
var _contextkeyJs = require("../../../platform/contextkey/common/contextkey.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var Context = {
    Visible: new _contextkeyJs.RawContextKey('suggestWidgetVisible', false, _nlsJs.localize('suggestWidgetVisible', "Whether suggestion are visible")),
    DetailsVisible: new _contextkeyJs.RawContextKey('suggestWidgetDetailsVisible', false, _nlsJs.localize('suggestWidgetDetailsVisible', "Whether suggestion details are visible")),
    MultipleSuggestions: new _contextkeyJs.RawContextKey('suggestWidgetMultipleSuggestions', false, _nlsJs.localize('suggestWidgetMultipleSuggestions', "Whether there are multiple suggestions to pick from")),
    MakesTextEdit: new _contextkeyJs.RawContextKey('suggestionMakesTextEdit', true, _nlsJs.localize('suggestionMakesTextEdit', "Whether inserting the current suggestion yields in a change or has everything already been typed")),
    AcceptSuggestionsOnEnter: new _contextkeyJs.RawContextKey('acceptSuggestionOnEnter', true, _nlsJs.localize('acceptSuggestionOnEnter', "Whether suggestions are inserted when pressing Enter")),
    HasInsertAndReplaceRange: new _contextkeyJs.RawContextKey('suggestionHasInsertAndReplaceRange', false, _nlsJs.localize('suggestionHasInsertAndReplaceRange', "Whether the current suggestion has insert and replace behaviour")),
    InsertMode: new _contextkeyJs.RawContextKey('suggestionInsertMode', undefined, {
        type: 'string',
        description: _nlsJs.localize('suggestionInsertMode', "Whether the default behaviour is to insert or replace")
    }),
    CanResolve: new _contextkeyJs.RawContextKey('suggestionCanResolve', false, _nlsJs.localize('suggestionCanResolve', "Whether the current suggestion supports to resolve further details"))
};
var suggestWidgetStatusbarMenu = new _actionsJs.MenuId('suggestWidgetStatusBar');
var CompletionItem = /*#__PURE__*/ function() {
    "use strict";
    function CompletionItem(position, completion, container, provider) {
        _helpers.classCallCheck(this, CompletionItem);
        this.position = position;
        this.completion = completion;
        this.container = container;
        this.provider = provider;
        // validation
        this.isInvalid = false;
        // sorting, filtering
        this.score = _filtersJs.FuzzyScore.Default;
        this.distance = 0;
        this.textLabel = typeof completion.label === 'string' ? completion.label : completion.label.label;
        // ensure lower-variants (perf)
        this.labelLow = this.textLabel.toLowerCase();
        // validate label
        this.isInvalid = !this.textLabel;
        this.sortTextLow = completion.sortText && completion.sortText.toLowerCase();
        this.filterTextLow = completion.filterText && completion.filterText.toLowerCase();
        // normalize ranges
        if (_rangeJs.Range.isIRange(completion.range)) {
            this.editStart = new _positionJs.Position(completion.range.startLineNumber, completion.range.startColumn);
            this.editInsertEnd = new _positionJs.Position(completion.range.endLineNumber, completion.range.endColumn);
            this.editReplaceEnd = new _positionJs.Position(completion.range.endLineNumber, completion.range.endColumn);
            // validate range
            this.isInvalid = this.isInvalid || _rangeJs.Range.spansMultipleLines(completion.range) || completion.range.startLineNumber !== position.lineNumber;
        } else {
            this.editStart = new _positionJs.Position(completion.range.insert.startLineNumber, completion.range.insert.startColumn);
            this.editInsertEnd = new _positionJs.Position(completion.range.insert.endLineNumber, completion.range.insert.endColumn);
            this.editReplaceEnd = new _positionJs.Position(completion.range.replace.endLineNumber, completion.range.replace.endColumn);
            // validate ranges
            this.isInvalid = this.isInvalid || _rangeJs.Range.spansMultipleLines(completion.range.insert) || _rangeJs.Range.spansMultipleLines(completion.range.replace) || completion.range.insert.startLineNumber !== position.lineNumber || completion.range.replace.startLineNumber !== position.lineNumber || completion.range.insert.startColumn !== completion.range.replace.startColumn;
        }
        // create the suggestion resolver
        if (typeof provider.resolveCompletionItem !== 'function') {
            this._resolveCache = Promise.resolve();
            this._isResolved = true;
        }
    }
    _helpers.createClass(CompletionItem, [
        {
            key: "isResolved",
            get: // ---- resolving
            function get() {
                return !!this._isResolved;
            }
        },
        {
            key: "resolve",
            value: function resolve(token) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var _this, sub;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                if (!this._resolveCache) {
                                    _this = this;
                                    sub = token.onCancellationRequested(function() {
                                        _this._resolveCache = undefined;
                                        _this._isResolved = false;
                                    });
                                    this._resolveCache = Promise.resolve(this.provider.resolveCompletionItem(this.completion, token)).then(function(value) {
                                        Object.assign(_this.completion, value);
                                        _this._isResolved = true;
                                        sub.dispose();
                                    }, function(err) {
                                        if (_errorsJs.isPromiseCanceledError(err)) {
                                            // the IPC queue will reject the request with the
                                            // cancellation error -> reset cached
                                            _this._resolveCache = undefined;
                                            _this._isResolved = false;
                                        }
                                    });
                                }
                                return _ctx.abrupt("return", this._resolveCache);
                            case 2:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this);
                }));
            }
        }
    ]);
    return CompletionItem;
}();
var CompletionOptions = function CompletionOptions() {
    "use strict";
    var snippetSortOrder = arguments.length > 0 && arguments[0] !== void 0 /* Bottom */  ? arguments[0] : 2, kindFilter = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : new Set(), providerFilter = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : new Set(), showDeprecated = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true;
    _helpers.classCallCheck(this, CompletionOptions);
    this.snippetSortOrder = snippetSortOrder;
    this.kindFilter = kindFilter;
    this.providerFilter = providerFilter;
    this.showDeprecated = showDeprecated;
};
CompletionOptions.default = new CompletionOptions();
var _snippetSuggestSupport;
function getSnippetSuggestSupport() {
    return _snippetSuggestSupport;
}
var CompletionItemModel = function CompletionItemModel(items, needsClipboard, durations, disposable) {
    "use strict";
    _helpers.classCallCheck(this, CompletionItemModel);
    this.items = items;
    this.needsClipboard = needsClipboard;
    this.durations = durations;
    this.disposable = disposable;
};
function provideSuggestionItems(model, position) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : CompletionOptions.default, context = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {
        triggerKind: 0 /* Invoke */ 
    }, token = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : _cancellationJs.CancellationToken.None;
    return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee1() {
        var _this, sw1, word, defaultReplaceRange, defaultRange, result, disposables, durations, needsClipboard, onCompletionList, snippetCompletions, _iteratorNormalCompletion1, _didIteratorError1, _iteratorError1, _iterator1, _step1, providerGroup, _this1, lenBefore;
        return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx1) {
            while(1)switch(_ctx1.prev = _ctx1.next){
                case 0:
                    _this = this;
                    sw1 = new _stopwatchJs.StopWatch(true);
                    position = position.clone();
                    word = model.getWordAtPosition(position);
                    defaultReplaceRange = word ? new _rangeJs.Range(position.lineNumber, word.startColumn, position.lineNumber, word.endColumn) : _rangeJs.Range.fromPositions(position);
                    defaultRange = {
                        replace: defaultReplaceRange,
                        insert: defaultReplaceRange.setEndPosition(position.lineNumber, position.column)
                    };
                    result = [];
                    disposables = new _lifecycleJs.DisposableStore();
                    durations = [];
                    needsClipboard = false;
                    onCompletionList = function(provider, container, sw) {
                        var _a, _b, _c;
                        if (!container) return;
                        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                        try {
                            for(var _iterator = container.suggestions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                                var suggestion = _step.value;
                                if (!options.kindFilter.has(suggestion.kind)) {
                                    // skip if not showing deprecated suggestions
                                    if (!options.showDeprecated && ((_a = suggestion === null || suggestion === void 0 ? void 0 : suggestion.tags) === null || _a === void 0 ? void 0 : _a.includes(1 /* Deprecated */ ))) continue;
                                    // fill in default range when missing
                                    if (!suggestion.range) suggestion.range = defaultRange;
                                    // fill in default sortText when missing
                                    if (!suggestion.sortText) suggestion.sortText = typeof suggestion.label === 'string' ? suggestion.label : suggestion.label.label;
                                    if (!needsClipboard && suggestion.insertTextRules && suggestion.insertTextRules & 4 /* InsertAsSnippet */ ) needsClipboard = _snippetParserJs.SnippetParser.guessNeedsClipboard(suggestion.insertText);
                                    result.push(new CompletionItem(position, suggestion, container, provider));
                                }
                            }
                        } catch (err) {
                            _didIteratorError = true;
                            _iteratorError = err;
                        } finally{
                            try {
                                if (!_iteratorNormalCompletion && _iterator.return != null) {
                                    _iterator.return();
                                }
                            } finally{
                                if (_didIteratorError) {
                                    throw _iteratorError;
                                }
                            }
                        }
                        if (_lifecycleJs.isDisposable(container)) disposables.add(container);
                        durations.push({
                            providerName: (_b = provider._debugDisplayName) !== null && _b !== void 0 ? _b : 'unkown_provider',
                            elapsedProvider: (_c = container.duration) !== null && _c !== void 0 ? _c : -1,
                            elapsedOverall: sw.elapsed()
                        });
                    };
                    snippetCompletions = function() {
                        return __awaiter(_this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                            var sw, list;
                            return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                                while(1)switch(_ctx.prev = _ctx.next){
                                    case 0:
                                        if (!(!_snippetSuggestSupport || options.kindFilter.has(27 /* Snippet */ ))) {
                                            _ctx.next = 2;
                                            break;
                                        }
                                        return _ctx.abrupt("return");
                                    case 2:
                                        if (!(options.providerFilter.size > 0 && !options.providerFilter.has(_snippetSuggestSupport))) {
                                            _ctx.next = 4;
                                            break;
                                        }
                                        return _ctx.abrupt("return");
                                    case 4:
                                        sw = new _stopwatchJs.StopWatch(true);
                                        _ctx.next = 7;
                                        return _snippetSuggestSupport.provideCompletionItems(model, position, context, token);
                                    case 7:
                                        list = _ctx.sent;
                                        onCompletionList(_snippetSuggestSupport, list, sw);
                                    case 9:
                                    case "end":
                                        return _ctx.stop();
                                }
                            }, _callee);
                        }));
                    }();
                    _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                    _ctx1.prev = 13;
                    _iterator1 = _modesJs.CompletionProviderRegistry.orderedGroups(model)[Symbol.iterator]();
                case 15:
                    if (_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done) {
                        _ctx1.next = 26;
                        break;
                    }
                    providerGroup = _step1.value;
                    _this1 = this;
                    lenBefore = result.length;
                    _ctx1.next = 21;
                    return Promise.all(providerGroup.map(function(provider) {
                        return __awaiter(_this1, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                            var sw, list;
                            return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                                while(1)switch(_ctx.prev = _ctx.next){
                                    case 0:
                                        if (!(options.providerFilter.size > 0 && !options.providerFilter.has(provider))) {
                                            _ctx.next = 2;
                                            break;
                                        }
                                        return _ctx.abrupt("return");
                                    case 2:
                                        _ctx.prev = 2;
                                        sw = new _stopwatchJs.StopWatch(true);
                                        _ctx.next = 6;
                                        return provider.provideCompletionItems(model, position, context, token);
                                    case 6:
                                        list = _ctx.sent;
                                        onCompletionList(provider, list, sw);
                                        _ctx.next = 13;
                                        break;
                                    case 10:
                                        _ctx.prev = 10;
                                        _ctx.t0 = _ctx["catch"](2);
                                        _errorsJs.onUnexpectedExternalError(_ctx.t0);
                                    case 13:
                                    case "end":
                                        return _ctx.stop();
                                }
                            }, _callee, null, [
                                [
                                    2,
                                    10
                                ]
                            ]);
                        }));
                    }));
                case 21:
                    if (!(lenBefore !== result.length || token.isCancellationRequested)) {
                        _ctx1.next = 23;
                        break;
                    }
                    return _ctx1.abrupt("break", 26);
                case 23:
                    _iteratorNormalCompletion1 = true;
                    _ctx1.next = 15;
                    break;
                case 26:
                    _ctx1.next = 32;
                    break;
                case 28:
                    _ctx1.prev = 28;
                    _ctx1.t0 = _ctx1["catch"](13);
                    _didIteratorError1 = true;
                    _iteratorError1 = _ctx1.t0;
                case 32:
                    _ctx1.prev = 32;
                    _ctx1.prev = 33;
                    if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                        _iterator1.return();
                    }
                case 35:
                    _ctx1.prev = 35;
                    if (!_didIteratorError1) {
                        _ctx1.next = 38;
                        break;
                    }
                    throw _iteratorError1;
                case 38:
                    return _ctx1.finish(35);
                case 39:
                    return _ctx1.finish(32);
                case 40:
                    _ctx1.next = 42;
                    return snippetCompletions;
                case 42:
                    if (!token.isCancellationRequested) {
                        _ctx1.next = 45;
                        break;
                    }
                    disposables.dispose();
                    return _ctx1.abrupt("return", Promise.reject(_errorsJs.canceled()));
                case 45:
                    return _ctx1.abrupt("return", new CompletionItemModel(result.sort(getSuggestionComparator(options.snippetSortOrder)), needsClipboard, {
                        entries: durations,
                        elapsed: sw1.elapsed()
                    }, disposables));
                case 46:
                case "end":
                    return _ctx1.stop();
            }
        }, _callee1, this, [
            [
                13,
                28,
                32,
                40
            ],
            [
                33,
                ,
                35,
                39
            ]
        ]);
    }));
}
function defaultComparator(a, b) {
    // check with 'sortText'
    if (a.sortTextLow && b.sortTextLow) {
        if (a.sortTextLow < b.sortTextLow) return -1;
        else if (a.sortTextLow > b.sortTextLow) return 1;
    }
    // check with 'label'
    if (a.completion.label < b.completion.label) return -1;
    else if (a.completion.label > b.completion.label) return 1;
    // check with 'type'
    return a.completion.kind - b.completion.kind;
}
function snippetUpComparator(a, b) {
    if (a.completion.kind !== b.completion.kind) {
        if (a.completion.kind === 27 /* Snippet */ ) return -1;
        else if (b.completion.kind === 27 /* Snippet */ ) return 1;
    }
    return defaultComparator(a, b);
}
function snippetDownComparator(a, b) {
    if (a.completion.kind !== b.completion.kind) {
        if (a.completion.kind === 27 /* Snippet */ ) return 1;
        else if (b.completion.kind === 27 /* Snippet */ ) return -1;
    }
    return defaultComparator(a, b);
}
var _snippetComparators = new Map();
_snippetComparators.set(0 /* Top */ , snippetUpComparator);
_snippetComparators.set(2 /* Bottom */ , snippetDownComparator);
_snippetComparators.set(1 /* Inline */ , defaultComparator);
function getSuggestionComparator(snippetConfig) {
    return _snippetComparators.get(snippetConfig);
}
_commandsJs.CommandsRegistry.registerCommand('_executeCompletionItemProvider', function(accessor) {
    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
        args[_key - 1] = arguments[_key];
    }
    return __awaiter(void 0, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
        var _args, uri, position, triggerCharacter, maxItemsToResolve, ref, result, resolving, completions, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, item;
        return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
            while(1)switch(_ctx.prev = _ctx.next){
                case 0:
                    _args = _helpers.slicedToArray(args, 4), uri = _args[0], position = _args[1], triggerCharacter = _args[2], maxItemsToResolve = _args[3];
                    _typesJs.assertType(_uriJs.URI.isUri(uri));
                    _typesJs.assertType(_positionJs.Position.isIPosition(position));
                    _typesJs.assertType(typeof triggerCharacter === 'string' || !triggerCharacter);
                    _typesJs.assertType(typeof maxItemsToResolve === 'number' || !maxItemsToResolve);
                    _ctx.next = 7;
                    return accessor.get(_resolverServiceJs.ITextModelService).createModelReference(uri);
                case 7:
                    ref = _ctx.sent;
                    _ctx.prev = 8;
                    result = {
                        incomplete: false,
                        suggestions: []
                    };
                    resolving = [];
                    _ctx.next = 13;
                    return provideSuggestionItems(ref.object.textEditorModel, _positionJs.Position.lift(position), undefined, {
                        triggerCharacter: triggerCharacter,
                        triggerKind: triggerCharacter ? 1 /* TriggerCharacter */  : 0 /* Invoke */ 
                    });
                case 13:
                    completions = _ctx.sent;
                    _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    _ctx.prev = 15;
                    for(_iterator = completions.items[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        item = _step.value;
                        if (resolving.length < (maxItemsToResolve !== null && maxItemsToResolve !== void 0 ? maxItemsToResolve : 0)) resolving.push(item.resolve(_cancellationJs.CancellationToken.None));
                        result.incomplete = result.incomplete || item.container.incomplete;
                        result.suggestions.push(item.completion);
                    }
                    _ctx.next = 23;
                    break;
                case 19:
                    _ctx.prev = 19;
                    _ctx.t0 = _ctx["catch"](15);
                    _didIteratorError = true;
                    _iteratorError = _ctx.t0;
                case 23:
                    _ctx.prev = 23;
                    _ctx.prev = 24;
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                    }
                case 26:
                    _ctx.prev = 26;
                    if (!_didIteratorError) {
                        _ctx.next = 29;
                        break;
                    }
                    throw _iteratorError;
                case 29:
                    return _ctx.finish(26);
                case 30:
                    return _ctx.finish(23);
                case 31:
                    _ctx.prev = 31;
                    _ctx.next = 34;
                    return Promise.all(resolving);
                case 34:
                    return _ctx.abrupt("return", result);
                case 35:
                    _ctx.prev = 35;
                    setTimeout(function() {
                        return completions.disposable.dispose();
                    }, 100);
                    return _ctx.finish(35);
                case 38:
                    _ctx.prev = 38;
                    ref.dispose();
                    return _ctx.finish(38);
                case 41:
                case "end":
                    return _ctx.stop();
            }
        }, _callee, null, [
            [
                8,
                ,
                38,
                41
            ],
            [
                15,
                19,
                23,
                31
            ],
            [
                24,
                ,
                26,
                30
            ],
            [
                31,
                ,
                35,
                38
            ]
        ]);
    }));
});
var _provider = new /*#__PURE__*/ (function() {
    "use strict";
    function _class() {
        _helpers.classCallCheck(this, _class);
        this.onlyOnceSuggestions = [];
    }
    _helpers.createClass(_class, [
        {
            key: "provideCompletionItems",
            value: function provideCompletionItems() {
                var suggestions = this.onlyOnceSuggestions.slice(0);
                var result = {
                    suggestions: suggestions
                };
                this.onlyOnceSuggestions.length = 0;
                return result;
            }
        }
    ]);
    return _class;
}());
_modesJs.CompletionProviderRegistry.register('*', _provider);
function showSimpleSuggestions(editor, suggestions) {
    setTimeout(function() {
        var _onlyOnceSuggestions;
        (_onlyOnceSuggestions = _provider.onlyOnceSuggestions).push.apply(_onlyOnceSuggestions, _helpers.toConsumableArray(suggestions));
        editor.getContribution('editor.contrib.suggestController').triggerSuggest(new Set().add(_provider));
    }, 0);
}

},{"@swc/helpers":"erO4s","regenerator-runtime":"12Ae8","../../../base/common/cancellation.js":"1C4LY","../../../base/common/errors.js":"afm4i","../../../base/common/filters.js":"m7Exq","../../../base/common/lifecycle.js":"bcbPy","../../../base/common/stopwatch.js":"5CaFX","../../../base/common/types.js":"lF7Cj","../../../base/common/uri.js":"4ZDLf","../../common/core/position.js":"6xP0w","../../common/core/range.js":"VbyL8","../../common/modes.js":"bRbY1","../../common/services/resolverService.js":"944WH","../snippet/snippetParser.js":"5VMLU","../../../nls.js":"9djYb","../../../platform/actions/common/actions.js":"1qoxQ","../../../platform/commands/common/commands.js":"eeuTC","../../../platform/contextkey/common/contextkey.js":"5cjav","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"1Vs8C":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Memory", function() {
    return Memory;
});
parcelHelpers.export(exports, "NoMemory", function() {
    return NoMemory;
});
parcelHelpers.export(exports, "LRUMemory", function() {
    return LRUMemory;
});
parcelHelpers.export(exports, "PrefixMemory", function() {
    return PrefixMemory;
});
parcelHelpers.export(exports, "SuggestMemoryService", function() {
    return SuggestMemoryService;
});
parcelHelpers.export(exports, "ISuggestMemoryService", function() {
    return ISuggestMemoryService;
});
var _helpers = require("@swc/helpers");
var _asyncJs = require("../../../base/common/async.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _mapJs = require("../../../base/common/map.js");
var _modesJs = require("../../common/modes.js");
var _configurationJs = require("../../../platform/configuration/common/configuration.js");
var _extensionsJs = require("../../../platform/instantiation/common/extensions.js");
var _instantiationJs = require("../../../platform/instantiation/common/instantiation.js");
var _storageJs = require("../../../platform/storage/common/storage.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var Memory = /*#__PURE__*/ function() {
    "use strict";
    function Memory(name) {
        _helpers.classCallCheck(this, Memory);
        this.name = name;
    }
    _helpers.createClass(Memory, [
        {
            key: "select",
            value: function select(model, pos, items) {
                if (items.length === 0) return 0;
                var topScore = items[0].score[0];
                for(var i = 0; i < items.length; i++){
                    var _i = items[i], score = _i.score, suggestion = _i.completion;
                    if (score[0] !== topScore) break;
                    if (suggestion.preselect) // stop when seeing an auto-select-item
                    return i;
                }
                return 0;
            }
        }
    ]);
    return Memory;
}();
var NoMemory = /*#__PURE__*/ function(Memory) {
    "use strict";
    _helpers.inherits(NoMemory, Memory);
    var _super = _helpers.createSuper(NoMemory);
    function NoMemory() {
        _helpers.classCallCheck(this, NoMemory);
        return _super.call(this, 'first');
    }
    _helpers.createClass(NoMemory, [
        {
            key: "memorize",
            value: function memorize(model, pos, item) {
            // no-op
            }
        },
        {
            key: "toJSON",
            value: function toJSON() {
                return undefined;
            }
        },
        {
            key: "fromJSON",
            value: function fromJSON() {
            //
            }
        }
    ]);
    return NoMemory;
}(Memory);
var LRUMemory = /*#__PURE__*/ function(Memory) {
    "use strict";
    _helpers.inherits(LRUMemory, Memory);
    var _super = _helpers.createSuper(LRUMemory);
    function LRUMemory() {
        _helpers.classCallCheck(this, LRUMemory);
        var _this;
        _this = _super.call(this, 'recentlyUsed');
        _this._cache = new _mapJs.LRUCache(300, 0.66);
        _this._seq = 0;
        return _this;
    }
    _helpers.createClass(LRUMemory, [
        {
            key: "memorize",
            value: function memorize(model, pos, item) {
                var key = "".concat(model.getLanguageId(), "/").concat(item.textLabel);
                this._cache.set(key, {
                    touch: this._seq++,
                    type: item.completion.kind,
                    insertText: item.completion.insertText
                });
            }
        },
        {
            key: "select",
            value: function select(model, pos, items) {
                if (items.length === 0) return 0;
                var lineSuffix = model.getLineContent(pos.lineNumber).substr(pos.column - 10, pos.column - 1);
                if (/\s$/.test(lineSuffix)) return _helpers.get(_helpers.getPrototypeOf(LRUMemory.prototype), "select", this).call(this, model, pos, items);
                var topScore = items[0].score[0];
                var indexPreselect = -1;
                var indexRecency = -1;
                var seq = -1;
                for(var i = 0; i < items.length; i++){
                    if (items[i].score[0] !== topScore) break;
                    var key = "".concat(model.getLanguageId(), "/").concat(items[i].textLabel);
                    var item = this._cache.peek(key);
                    if (item && item.touch > seq && item.type === items[i].completion.kind && item.insertText === items[i].completion.insertText) {
                        seq = item.touch;
                        indexRecency = i;
                    }
                    if (items[i].completion.preselect && indexPreselect === -1) // stop when seeing an auto-select-item
                    return indexPreselect = i;
                }
                if (indexRecency !== -1) return indexRecency;
                else if (indexPreselect !== -1) return indexPreselect;
                else return 0;
            }
        },
        {
            key: "toJSON",
            value: function toJSON() {
                return this._cache.toJSON();
            }
        },
        {
            key: "fromJSON",
            value: function fromJSON(data) {
                this._cache.clear();
                var seq = 0;
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var _value = _helpers.slicedToArray(_step.value, 2), key = _value[0], value = _value[1];
                        value.touch = seq;
                        value.type = typeof value.type === 'number' ? value.type : _modesJs.completionKindFromString(value.type);
                        this._cache.set(key, value);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                this._seq = this._cache.size;
            }
        }
    ]);
    return LRUMemory;
}(Memory);
var PrefixMemory = /*#__PURE__*/ function(Memory) {
    "use strict";
    _helpers.inherits(PrefixMemory, Memory);
    var _super = _helpers.createSuper(PrefixMemory);
    function PrefixMemory() {
        _helpers.classCallCheck(this, PrefixMemory);
        var _this;
        _this = _super.call(this, 'recentlyUsedByPrefix');
        _this._trie = _mapJs.TernarySearchTree.forStrings();
        _this._seq = 0;
        return _this;
    }
    _helpers.createClass(PrefixMemory, [
        {
            key: "memorize",
            value: function memorize(model, pos, item) {
                var word = model.getWordUntilPosition(pos).word;
                var key = "".concat(model.getLanguageId(), "/").concat(word);
                this._trie.set(key, {
                    type: item.completion.kind,
                    insertText: item.completion.insertText,
                    touch: this._seq++
                });
            }
        },
        {
            key: "select",
            value: function select(model, pos, items) {
                var word = model.getWordUntilPosition(pos).word;
                if (!word) return _helpers.get(_helpers.getPrototypeOf(PrefixMemory.prototype), "select", this).call(this, model, pos, items);
                var key = "".concat(model.getLanguageId(), "/").concat(word);
                var item = this._trie.get(key);
                if (!item) item = this._trie.findSubstr(key);
                if (item) for(var i = 0; i < items.length; i++){
                    var _completion = items[i].completion, kind = _completion.kind, insertText = _completion.insertText;
                    if (kind === item.type && insertText === item.insertText) return i;
                }
                return _helpers.get(_helpers.getPrototypeOf(PrefixMemory.prototype), "select", this).call(this, model, pos, items);
            }
        },
        {
            key: "toJSON",
            value: function toJSON() {
                var entries = [];
                this._trie.forEach(function(value, key) {
                    return entries.push([
                        key,
                        value
                    ]);
                });
                // sort by last recently used (touch), then
                // take the top 200 item and normalize their
                // touch
                entries.sort(function(a, b) {
                    return -(a[1].touch - b[1].touch);
                }).forEach(function(value, i) {
                    return value[1].touch = i;
                });
                return entries.slice(0, 200);
            }
        },
        {
            key: "fromJSON",
            value: function fromJSON(data) {
                this._trie.clear();
                if (data.length > 0) {
                    this._seq = data[0][1].touch + 1;
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator = data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var _value = _helpers.slicedToArray(_step.value, 2), key = _value[0], value = _value[1];
                            value.type = typeof value.type === 'number' ? value.type : _modesJs.completionKindFromString(value.type);
                            this._trie.set(key, value);
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                }
            }
        }
    ]);
    return PrefixMemory;
}(Memory);
var SuggestMemoryService = /*#__PURE__*/ function() {
    "use strict";
    function SuggestMemoryService1(_storageService, _configService) {
        var _this = this;
        _helpers.classCallCheck(this, SuggestMemoryService1);
        this._storageService = _storageService;
        this._configService = _configService;
        this._disposables = new _lifecycleJs.DisposableStore();
        this._persistSoon = new _asyncJs.RunOnceScheduler(function() {
            return _this._saveState();
        }, 500);
        this._disposables.add(_storageService.onWillSaveState(function(e) {
            if (e.reason === _storageJs.WillSaveStateReason.SHUTDOWN) _this._saveState();
        }));
    }
    _helpers.createClass(SuggestMemoryService1, [
        {
            key: "dispose",
            value: function dispose() {
                this._disposables.dispose();
                this._persistSoon.dispose();
            }
        },
        {
            key: "memorize",
            value: function memorize(model, pos, item) {
                this._withStrategy(model, pos).memorize(model, pos, item);
                this._persistSoon.schedule();
            }
        },
        {
            key: "select",
            value: function select(model, pos, items) {
                return this._withStrategy(model, pos).select(model, pos, items);
            }
        },
        {
            key: "_withStrategy",
            value: function _withStrategy(model, pos) {
                var _a;
                var mode = this._configService.getValue('editor.suggestSelection', {
                    overrideIdentifier: model.getLanguageIdAtPosition(pos.lineNumber, pos.column),
                    resource: model.uri
                });
                if (((_a = this._strategy) === null || _a === void 0 ? void 0 : _a.name) !== mode) {
                    this._saveState();
                    var ctor = SuggestMemoryService1._strategyCtors.get(mode) || NoMemory;
                    this._strategy = new ctor();
                    try {
                        var share = this._configService.getValue('editor.suggest.shareSuggestSelections');
                        var scope = share ? 0 /* GLOBAL */  : 1 /* WORKSPACE */ ;
                        var raw = this._storageService.get("".concat(SuggestMemoryService1._storagePrefix, "/").concat(mode), scope);
                        if (raw) this._strategy.fromJSON(JSON.parse(raw));
                    } catch (e) {
                    // things can go wrong with JSON...
                    }
                }
                return this._strategy;
            }
        },
        {
            key: "_saveState",
            value: function _saveState() {
                if (this._strategy) {
                    var share = this._configService.getValue('editor.suggest.shareSuggestSelections');
                    var scope = share ? 0 /* GLOBAL */  : 1 /* WORKSPACE */ ;
                    var raw = JSON.stringify(this._strategy);
                    this._storageService.store("".concat(SuggestMemoryService1._storagePrefix, "/").concat(this._strategy.name), raw, scope, 1 /* MACHINE */ );
                }
            }
        }
    ]);
    return SuggestMemoryService1;
}();
SuggestMemoryService._strategyCtors = new Map([
    [
        'recentlyUsedByPrefix',
        PrefixMemory
    ],
    [
        'recentlyUsed',
        LRUMemory
    ],
    [
        'first',
        NoMemory
    ]
]);
SuggestMemoryService._storagePrefix = 'suggest/memories';
SuggestMemoryService = __decorate([
    __param(0, _storageJs.IStorageService),
    __param(1, _configurationJs.IConfigurationService)
], SuggestMemoryService);
var ISuggestMemoryService = _instantiationJs.createDecorator('ISuggestMemories');
_extensionsJs.registerSingleton(ISuggestMemoryService, SuggestMemoryService, true);

},{"@swc/helpers":"erO4s","../../../base/common/async.js":"kMhSh","../../../base/common/lifecycle.js":"bcbPy","../../../base/common/map.js":"4OXsW","../../common/modes.js":"bRbY1","../../../platform/configuration/common/configuration.js":"9wFfb","../../../platform/instantiation/common/extensions.js":"6Iedq","../../../platform/instantiation/common/instantiation.js":"9ABZB","../../../platform/storage/common/storage.js":"1m95n","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"5URQQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "WordContextKey", function() {
    return WordContextKey;
});
var _helpers = require("@swc/helpers");
var _contextkeyJs = require("../../../platform/contextkey/common/contextkey.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var WordContextKey = /*#__PURE__*/ function() {
    "use strict";
    function WordContextKey1(_editor, contextKeyService) {
        var _this = this;
        _helpers.classCallCheck(this, WordContextKey1);
        this._editor = _editor;
        this._enabled = false;
        this._ckAtEnd = WordContextKey1.AtEnd.bindTo(contextKeyService);
        this._configListener = this._editor.onDidChangeConfiguration(function(e) {
            return e.hasChanged(110 /* tabCompletion */ ) && _this._update();
        });
        this._update();
    }
    _helpers.createClass(WordContextKey1, [
        {
            key: "dispose",
            value: function dispose() {
                var _a;
                this._configListener.dispose();
                (_a = this._selectionListener) === null || _a === void 0 || _a.dispose();
                this._ckAtEnd.reset();
            }
        },
        {
            key: "_update",
            value: function _update() {
                // only update this when tab completions are enabled
                var enabled = this._editor.getOption(110 /* tabCompletion */ ) === 'on';
                if (this._enabled === enabled) return;
                this._enabled = enabled;
                if (this._enabled) {
                    var _this = this;
                    var checkForWordEnd = function() {
                        if (!_this._editor.hasModel()) {
                            _this._ckAtEnd.set(false);
                            return;
                        }
                        var model = _this._editor.getModel();
                        var selection = _this._editor.getSelection();
                        var word = model.getWordAtPosition(selection.getStartPosition());
                        if (!word) {
                            _this._ckAtEnd.set(false);
                            return;
                        }
                        _this._ckAtEnd.set(word.endColumn === selection.getStartPosition().column);
                    };
                    this._selectionListener = this._editor.onDidChangeCursorSelection(checkForWordEnd);
                    checkForWordEnd();
                } else if (this._selectionListener) {
                    this._ckAtEnd.reset();
                    this._selectionListener.dispose();
                    this._selectionListener = undefined;
                }
            }
        }
    ]);
    return WordContextKey1;
}();
WordContextKey.AtEnd = new _contextkeyJs.RawContextKey('atEndOfWord', false);
WordContextKey = __decorate([
    __param(1, _contextkeyJs.IContextKeyService)
], WordContextKey);

},{"@swc/helpers":"erO4s","../../../platform/contextkey/common/contextkey.js":"5cjav","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"4ukbd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SuggestAlternatives", function() {
    return SuggestAlternatives;
});
var _helpers = require("@swc/helpers");
var _contextkeyJs = require("../../../platform/contextkey/common/contextkey.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var SuggestAlternatives = /*#__PURE__*/ function() {
    "use strict";
    function SuggestAlternatives1(_editor, contextKeyService) {
        _helpers.classCallCheck(this, SuggestAlternatives1);
        this._editor = _editor;
        this._index = 0;
        this._ckOtherSuggestions = SuggestAlternatives1.OtherSuggestions.bindTo(contextKeyService);
    }
    _helpers.createClass(SuggestAlternatives1, [
        {
            key: "dispose",
            value: function dispose() {
                this.reset();
            }
        },
        {
            key: "reset",
            value: function reset() {
                var _a;
                this._ckOtherSuggestions.reset();
                (_a = this._listener) === null || _a === void 0 || _a.dispose();
                this._model = undefined;
                this._acceptNext = undefined;
                this._ignore = false;
            }
        },
        {
            key: "set",
            value: function set(param, acceptNext) {
                var model = param.model, index = param.index;
                var _this = this;
                // no suggestions -> nothing to do
                if (model.items.length === 0) {
                    this.reset();
                    return;
                }
                // no alternative suggestions -> nothing to do
                var nextIndex = SuggestAlternatives1._moveIndex(true, model, index);
                if (nextIndex === index) {
                    this.reset();
                    return;
                }
                this._acceptNext = acceptNext;
                this._model = model;
                this._index = index;
                this._listener = this._editor.onDidChangeCursorPosition(function() {
                    if (!_this._ignore) _this.reset();
                });
                this._ckOtherSuggestions.set(true);
            }
        },
        {
            key: "next",
            value: function next() {
                this._move(true);
            }
        },
        {
            key: "prev",
            value: function prev() {
                this._move(false);
            }
        },
        {
            key: "_move",
            value: function _move(fwd) {
                if (!this._model) // nothing to reason about
                return;
                try {
                    this._ignore = true;
                    this._index = SuggestAlternatives1._moveIndex(fwd, this._model, this._index);
                    this._acceptNext({
                        index: this._index,
                        item: this._model.items[this._index],
                        model: this._model
                    });
                } finally{
                    this._ignore = false;
                }
            }
        }
    ], [
        {
            key: "_moveIndex",
            value: function _moveIndex(fwd, model, index) {
                var newIndex = index;
                while(true){
                    newIndex = (newIndex + model.items.length + (fwd ? 1 : -1)) % model.items.length;
                    if (newIndex === index) break;
                    if (!model.items[newIndex].completion.additionalTextEdits) break;
                }
                return newIndex;
            }
        }
    ]);
    return SuggestAlternatives1;
}();
SuggestAlternatives.OtherSuggestions = new _contextkeyJs.RawContextKey('hasOtherSuggestions', false);
SuggestAlternatives = __decorate([
    __param(1, _contextkeyJs.IContextKeyService)
], SuggestAlternatives);

},{"@swc/helpers":"erO4s","../../../platform/contextkey/common/contextkey.js":"5cjav","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"2Q1o5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CommitCharacterController", function() {
    return CommitCharacterController;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _arraysJs = require("../../../base/common/arrays.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _characterClassifierJs = require("../../common/core/characterClassifier.js");
var CommitCharacterController = /*#__PURE__*/ function() {
    "use strict";
    function CommitCharacterController(editor, widget, accept) {
        var _this = this;
        _helpers.classCallCheck(this, CommitCharacterController);
        this._disposables = new _lifecycleJs.DisposableStore();
        this._disposables.add(widget.onDidShow(function() {
            return _this._onItem(widget.getFocusedItem());
        }));
        this._disposables.add(widget.onDidFocus(this._onItem, this));
        this._disposables.add(widget.onDidHide(this.reset, this));
        this._disposables.add(editor.onWillType(function(text) {
            if (_this._active && !widget.isFrozen()) {
                var ch = text.charCodeAt(text.length - 1);
                if (_this._active.acceptCharacters.has(ch) && editor.getOption(0 /* acceptSuggestionOnCommitCharacter */ )) accept(_this._active.item);
            }
        }));
    }
    _helpers.createClass(CommitCharacterController, [
        {
            key: "_onItem",
            value: function _onItem(selected) {
                if (!selected || !_arraysJs.isNonEmptyArray(selected.item.completion.commitCharacters)) {
                    // no item or no commit characters
                    this.reset();
                    return;
                }
                if (this._active && this._active.item.item === selected.item) // still the same item
                return;
                // keep item and its commit characters
                var acceptCharacters = new _characterClassifierJs.CharacterSet();
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = selected.item.completion.commitCharacters[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var ch = _step.value;
                        if (ch.length > 0) acceptCharacters.add(ch.charCodeAt(0));
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                this._active = {
                    acceptCharacters: acceptCharacters,
                    item: selected
                };
            }
        },
        {
            key: "reset",
            value: function reset() {
                this._active = undefined;
            }
        },
        {
            key: "dispose",
            value: function dispose() {
                this._disposables.dispose();
            }
        }
    ]);
    return CommitCharacterController;
}();

},{"@swc/helpers":"erO4s","../../../base/common/arrays.js":"bZs3E","../../../base/common/lifecycle.js":"bcbPy","../../common/core/characterClassifier.js":"ewW0b","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"4eVw3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LineContext", function() {
    return LineContext;
});
parcelHelpers.export(exports, "SuggestModel", function() {
    return SuggestModel;
});
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
var _asyncJs = require("../../../base/common/async.js");
var _cancellationJs = require("../../../base/common/cancellation.js");
var _errorsJs = require("../../../base/common/errors.js");
var _eventJs = require("../../../base/common/event.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _stringsJs = require("../../../base/common/strings.js");
var _selectionJs = require("../../common/core/selection.js");
var _modesJs = require("../../common/modes.js");
var _editorWorkerServiceJs = require("../../common/services/editorWorkerService.js");
var _snippetController2Js = require("../snippet/snippetController2.js");
var _wordDistanceJs = require("./wordDistance.js");
var _clipboardServiceJs = require("../../../platform/clipboard/common/clipboardService.js");
var _configurationJs = require("../../../platform/configuration/common/configuration.js");
var _contextkeyJs = require("../../../platform/contextkey/common/contextkey.js");
var _logJs = require("../../../platform/log/common/log.js");
var _telemetryJs = require("../../../platform/telemetry/common/telemetry.js");
var _completionModelJs = require("./completionModel.js");
var _suggestJs = require("./suggest.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var LineContext = /*#__PURE__*/ function() {
    "use strict";
    function LineContext(model, position, auto, shy) {
        _helpers.classCallCheck(this, LineContext);
        this.leadingLineContent = model.getLineContent(position.lineNumber).substr(0, position.column - 1);
        this.leadingWord = model.getWordUntilPosition(position);
        this.lineNumber = position.lineNumber;
        this.column = position.column;
        this.auto = auto;
        this.shy = shy;
    }
    _helpers.createClass(LineContext, null, [
        {
            key: "shouldAutoTrigger",
            value: function shouldAutoTrigger(editor) {
                if (!editor.hasModel()) return false;
                var model = editor.getModel();
                var pos = editor.getPosition();
                model.tokenizeIfCheap(pos.lineNumber);
                var word = model.getWordAtPosition(pos);
                if (!word) return false;
                if (word.endColumn !== pos.column) return false;
                if (!isNaN(Number(word.word))) return false;
                return true;
            }
        }
    ]);
    return LineContext;
}();
function isSuggestPreviewEnabled(editor) {
    return editor.getOption(105 /* suggest */ ).preview;
}
function canShowQuickSuggest(editor, contextKeyService, configurationService) {
    if (!Boolean(contextKeyService.getContextKeyValue('inlineSuggestionVisible'))) // Allow if there is no inline suggestion.
    return true;
    var allowQuickSuggestions = configurationService.getValue('editor.inlineSuggest.allowQuickSuggestions');
    if (allowQuickSuggestions !== undefined) // Use setting if available.
    return Boolean(allowQuickSuggestions);
    // Don't allow if inline suggestions are visible and no suggest preview is configured.
    // TODO disabled for copilot
    return false;
}
function canShowSuggestOnTriggerCharacters(editor, contextKeyService, configurationService) {
    if (!Boolean(contextKeyService.getContextKeyValue('inlineSuggestionVisible'))) // Allow if there is no inline suggestion.
    return true;
    var allowQuickSuggestions = configurationService.getValue('editor.inlineSuggest.allowSuggestOnTriggerCharacters');
    if (allowQuickSuggestions !== undefined) // Use setting if available.
    return Boolean(allowQuickSuggestions);
    // Don't allow if inline suggestions are visible and no suggest preview is configured.
    // TODO disabled for copilot
    return false;
}
var SuggestModel = /*#__PURE__*/ function() {
    "use strict";
    function SuggestModel1(_editor, _editorWorkerService, _clipboardService, _telemetryService, _logService, _contextKeyService, _configurationService) {
        var _this = this;
        _helpers.classCallCheck(this, SuggestModel1);
        this._editor = _editor;
        this._editorWorkerService = _editorWorkerService;
        this._clipboardService = _clipboardService;
        this._telemetryService = _telemetryService;
        this._logService = _logService;
        this._contextKeyService = _contextKeyService;
        this._configurationService = _configurationService;
        this._toDispose = new _lifecycleJs.DisposableStore();
        this._quickSuggestDelay = 10;
        this._triggerCharacterListener = new _lifecycleJs.DisposableStore();
        this._triggerQuickSuggest = new _asyncJs.TimeoutTimer();
        this._state = 0 /* Idle */ ;
        this._completionDisposables = new _lifecycleJs.DisposableStore();
        this._onDidCancel = new _eventJs.Emitter();
        this._onDidTrigger = new _eventJs.Emitter();
        this._onDidSuggest = new _eventJs.Emitter();
        this.onDidCancel = this._onDidCancel.event;
        this.onDidTrigger = this._onDidTrigger.event;
        this.onDidSuggest = this._onDidSuggest.event;
        this._telemetryGate = 0;
        this._currentSelection = this._editor.getSelection() || new _selectionJs.Selection(1, 1, 1, 1);
        // wire up various listeners
        this._toDispose.add(this._editor.onDidChangeModel(function() {
            _this._updateTriggerCharacters();
            _this.cancel();
        }));
        this._toDispose.add(this._editor.onDidChangeModelLanguage(function() {
            _this._updateTriggerCharacters();
            _this.cancel();
        }));
        this._toDispose.add(this._editor.onDidChangeConfiguration(function() {
            _this._updateTriggerCharacters();
            _this._updateQuickSuggest();
        }));
        this._toDispose.add(_modesJs.CompletionProviderRegistry.onDidChange(function() {
            _this._updateTriggerCharacters();
            _this._updateActiveSuggestSession();
        }));
        this._toDispose.add(this._editor.onDidChangeCursorSelection(function(e) {
            _this._onCursorChange(e);
        }));
        var editorIsComposing = false;
        this._toDispose.add(this._editor.onDidCompositionStart(function() {
            editorIsComposing = true;
        }));
        this._toDispose.add(this._editor.onDidCompositionEnd(function() {
            editorIsComposing = false;
            _this._onCompositionEnd();
        }));
        this._toDispose.add(this._editor.onDidChangeModelContent(function() {
            // only filter completions when the editor isn't composing a character
            // allow-any-unicode-next-line
            // e.g. ¨ + u makes ü but just ¨ cannot be used for filtering
            if (!editorIsComposing) _this._refilterCompletionItems();
        }));
        this._updateTriggerCharacters();
        this._updateQuickSuggest();
    }
    _helpers.createClass(SuggestModel1, [
        {
            key: "dispose",
            value: function dispose() {
                _lifecycleJs.dispose(this._triggerCharacterListener);
                _lifecycleJs.dispose([
                    this._onDidCancel,
                    this._onDidSuggest,
                    this._onDidTrigger,
                    this._triggerQuickSuggest
                ]);
                this._toDispose.dispose();
                this._completionDisposables.dispose();
                this.cancel();
            }
        },
        {
            // --- handle configuration & precondition changes
            key: "_updateQuickSuggest",
            value: function _updateQuickSuggest() {
                this._quickSuggestDelay = this._editor.getOption(79 /* quickSuggestionsDelay */ );
                if (isNaN(this._quickSuggestDelay) || !this._quickSuggestDelay && this._quickSuggestDelay !== 0 || this._quickSuggestDelay < 0) this._quickSuggestDelay = 10;
            }
        },
        {
            key: "_updateTriggerCharacters",
            value: function _updateTriggerCharacters() {
                var _this = this;
                this._triggerCharacterListener.clear();
                if (this._editor.getOption(80 /* readOnly */ ) || !this._editor.hasModel() || !this._editor.getOption(108 /* suggestOnTriggerCharacters */ )) return;
                var supportsByTriggerCharacter = new Map();
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined, _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                try {
                    for(var _iterator = _modesJs.CompletionProviderRegistry.all(this._editor.getModel())[Symbol.iterator](), _step; !(_iteratorNormalCompletion1 = (_step = _iterator.next()).done); _iteratorNormalCompletion1 = true){
                        var support = _step.value;
                        try {
                            for(var _iterator1 = (support.triggerCharacters || [])[Symbol.iterator](), _step1; !(_iteratorNormalCompletion = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion = true){
                                var ch = _step1.value;
                                var set = supportsByTriggerCharacter.get(ch);
                                if (!set) {
                                    set = new Set();
                                    set.add(_suggestJs.getSnippetSuggestSupport());
                                    supportsByTriggerCharacter.set(ch, set);
                                }
                                set.add(support);
                            }
                        } catch (err) {
                            _didIteratorError = true;
                            _iteratorError = err;
                        } finally{
                            try {
                                if (!_iteratorNormalCompletion && _iterator1.return != null) {
                                    _iterator1.return();
                                }
                            } finally{
                                if (_didIteratorError) {
                                    throw _iteratorError;
                                }
                            }
                        }
                    }
                } catch (err) {
                    _didIteratorError1 = true;
                    _iteratorError1 = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion1 && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError1) {
                            throw _iteratorError1;
                        }
                    }
                }
                var checkTriggerCharacter = function(text) {
                    if (!canShowSuggestOnTriggerCharacters(_this._editor, _this._contextKeyService, _this._configurationService)) return;
                    if (LineContext.shouldAutoTrigger(_this._editor)) // don't trigger by trigger characters when this is a case for quick suggest
                    return;
                    if (!text) {
                        // came here from the compositionEnd-event
                        var position = _this._editor.getPosition();
                        var model = _this._editor.getModel();
                        text = model.getLineContent(position.lineNumber).substr(0, position.column - 1);
                    }
                    var lastChar = '';
                    if (_stringsJs.isLowSurrogate(text.charCodeAt(text.length - 1))) {
                        if (_stringsJs.isHighSurrogate(text.charCodeAt(text.length - 2))) lastChar = text.substr(text.length - 2);
                    } else lastChar = text.charAt(text.length - 1);
                    var supports = supportsByTriggerCharacter.get(lastChar);
                    if (supports) {
                        // keep existing items that where not computed by the
                        // supports/providers that want to trigger now
                        var existing = _this._completionModel ? {
                            items: _this._completionModel.adopt(supports),
                            clipboardText: _this._completionModel.clipboardText
                        } : undefined;
                        _this.trigger({
                            auto: true,
                            shy: false,
                            triggerCharacter: lastChar
                        }, Boolean(_this._completionModel), supports, existing);
                    }
                };
                this._triggerCharacterListener.add(this._editor.onDidType(checkTriggerCharacter));
                this._triggerCharacterListener.add(this._editor.onDidCompositionEnd(checkTriggerCharacter));
            }
        },
        {
            key: "state",
            get: // --- trigger/retrigger/cancel suggest
            function get() {
                return this._state;
            }
        },
        {
            key: "cancel",
            value: function cancel() {
                var retrigger = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
                var _a;
                if (this._state !== 0 /* Idle */ ) {
                    this._triggerQuickSuggest.cancel();
                    (_a = this._requestToken) === null || _a === void 0 || _a.cancel();
                    this._requestToken = undefined;
                    this._state = 0 /* Idle */ ;
                    this._completionModel = undefined;
                    this._context = undefined;
                    this._onDidCancel.fire({
                        retrigger: retrigger
                    });
                }
            }
        },
        {
            key: "clear",
            value: function clear() {
                this._completionDisposables.clear();
            }
        },
        {
            key: "_updateActiveSuggestSession",
            value: function _updateActiveSuggestSession() {
                if (this._state !== 0 /* Idle */ ) {
                    if (!this._editor.hasModel() || !_modesJs.CompletionProviderRegistry.has(this._editor.getModel())) this.cancel();
                    else this.trigger({
                        auto: this._state === 2 /* Auto */ ,
                        shy: false
                    }, true);
                }
            }
        },
        {
            key: "_onCursorChange",
            value: function _onCursorChange(e) {
                if (!this._editor.hasModel()) return;
                var prevSelection = this._currentSelection;
                this._currentSelection = this._editor.getSelection();
                if (!e.selection.isEmpty() || e.reason !== 0 /* NotSet */  && e.reason !== 3 /* Explicit */  || e.source !== 'keyboard' && e.source !== 'deleteLeft') {
                    // Early exit if nothing needs to be done!
                    // Leave some form of early exit check here if you wish to continue being a cursor position change listener ;)
                    this.cancel();
                    return;
                }
                if (this._state === 0 /* Idle */  && e.reason === 0 /* NotSet */ ) {
                    if (prevSelection.containsRange(this._currentSelection) || prevSelection.getEndPosition().isBeforeOrEqual(this._currentSelection.getPosition())) // cursor did move RIGHT due to typing -> trigger quick suggest
                    this._doTriggerQuickSuggest();
                } else if (this._state !== 0 /* Idle */  && e.reason === 3 /* Explicit */ ) // suggest is active and something like cursor keys are used to move
                // the cursor. this means we can refilter at the new position
                this._refilterCompletionItems();
            }
        },
        {
            key: "_onCompositionEnd",
            value: function _onCompositionEnd() {
                // trigger or refilter when composition ends
                if (this._state === 0 /* Idle */ ) this._doTriggerQuickSuggest();
                else this._refilterCompletionItems();
            }
        },
        {
            key: "_doTriggerQuickSuggest",
            value: function _doTriggerQuickSuggest() {
                var _this = this;
                if (this._editor.getOption(78 /* quickSuggestions */ ) === false) // not enabled
                return;
                if (this._editor.getOption(105 /* suggest */ ).snippetsPreventQuickSuggestions && _snippetController2Js.SnippetController2.get(this._editor).isInSnippet()) // no quick suggestion when in snippet mode
                return;
                this.cancel();
                this._triggerQuickSuggest.cancelAndSet(function() {
                    if (_this._state !== 0 /* Idle */ ) return;
                    if (!LineContext.shouldAutoTrigger(_this._editor)) return;
                    if (!_this._editor.hasModel()) return;
                    var model = _this._editor.getModel();
                    var pos = _this._editor.getPosition();
                    // validate enabled now
                    var quickSuggestions = _this._editor.getOption(78 /* quickSuggestions */ );
                    if (quickSuggestions === false) return;
                    else if (quickSuggestions === true) ;
                    else {
                        // Check the type of the token that triggered this
                        model.tokenizeIfCheap(pos.lineNumber);
                        var lineTokens = model.getLineTokens(pos.lineNumber);
                        var tokenType = lineTokens.getStandardTokenType(lineTokens.findTokenIndexAtOffset(Math.max(pos.column - 1 - 1, 0)));
                        var inValidScope = quickSuggestions.other && tokenType === 0 /* Other */  || quickSuggestions.comments && tokenType === 1 /* Comment */  || quickSuggestions.strings && tokenType === 2 /* String */ ;
                        if (!inValidScope) return;
                    }
                    if (!canShowQuickSuggest(_this._editor, _this._contextKeyService, _this._configurationService)) // do not trigger quick suggestions if inline suggestions are shown
                    return;
                    if (!_modesJs.CompletionProviderRegistry.has(model)) return;
                    // we made it till here -> trigger now
                    _this.trigger({
                        auto: true,
                        shy: false
                    });
                }, this._quickSuggestDelay);
            }
        },
        {
            key: "_refilterCompletionItems",
            value: function _refilterCompletionItems() {
                var _this = this;
                // Re-filter suggestions. This MUST run async because filtering/scoring
                // uses the model content AND the cursor position. The latter is NOT
                // updated when the document has changed (the event which drives this method)
                // and therefore a little pause (next mirco task) is needed. See:
                // https://stackoverflow.com/questions/25915634/difference-between-microtask-and-macrotask-within-an-event-loop-context#25933985
                Promise.resolve().then(function() {
                    if (_this._state === 0 /* Idle */ ) return;
                    if (!_this._editor.hasModel()) return;
                    var model = _this._editor.getModel();
                    var position = _this._editor.getPosition();
                    var ctx = new LineContext(model, position, _this._state === 2 /* Auto */ , false);
                    _this._onNewContext(ctx);
                });
            }
        },
        {
            key: "trigger",
            value: function trigger(context) {
                var retrigger = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false, onlyFrom = arguments.length > 2 ? arguments[2] : void 0, existing = arguments.length > 3 ? arguments[3] : void 0;
                var _this = this;
                var _a;
                if (!this._editor.hasModel()) return;
                var model1 = this._editor.getModel();
                var auto = context.auto;
                var ctx1 = new LineContext(model1, this._editor.getPosition(), auto, context.shy);
                // Cancel previous requests, change state & update UI
                this.cancel(retrigger);
                this._state = auto ? 2 /* Auto */  : 1 /* Manual */ ;
                this._onDidTrigger.fire({
                    auto: auto,
                    shy: context.shy,
                    position: this._editor.getPosition()
                });
                // Capture context when request was sent
                this._context = ctx1;
                // Build context for request
                var suggestCtx = {
                    triggerKind: (_a = context.triggerKind) !== null && _a !== void 0 ? _a : 0 /* Invoke */ 
                };
                if (context.triggerCharacter) suggestCtx = {
                    triggerKind: 1 /* TriggerCharacter */ ,
                    triggerCharacter: context.triggerCharacter
                };
                this._requestToken = new _cancellationJs.CancellationTokenSource();
                // kind filter and snippet sort rules
                var snippetSuggestions = this._editor.getOption(100 /* snippetSuggestions */ );
                var snippetSortOrder = 1 /* Inline */ ;
                switch(snippetSuggestions){
                    case 'top':
                        snippetSortOrder = 0 /* Top */ ;
                        break;
                    // 	↓ that's the default anyways...
                    // case 'inline':
                    // 	snippetSortOrder = SnippetSortOrder.Inline;
                    // 	break;
                    case 'bottom':
                        snippetSortOrder = 2 /* Bottom */ ;
                        break;
                }
                var ref = SuggestModel1._createSuggestFilter(this._editor), itemKindFilter = ref.itemKind, showDeprecated = ref.showDeprecated;
                var wordDistance1 = _wordDistanceJs.WordDistance.create(this._editorWorkerService, this._editor);
                var completions1 = _suggestJs.provideSuggestionItems(model1, this._editor.getPosition(), new _suggestJs.CompletionOptions(snippetSortOrder, itemKindFilter, onlyFrom, showDeprecated), suggestCtx, this._requestToken.token);
                Promise.all([
                    completions1,
                    wordDistance1
                ]).then(function(param) {
                    var _param = _helpers.slicedToArray(param, 2), completions = _param[0], wordDistance = _param[1];
                    return __awaiter(_this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                        var _b, clipboardText, model, items, cmpFn, ctx;
                        return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                            while(1)switch(_ctx.prev = _ctx.next){
                                case 0:
                                    ;
                                    (_b = this._requestToken) === null || _b === void 0 || _b.dispose();
                                    if (this._editor.hasModel()) {
                                        _ctx.next = 4;
                                        break;
                                    }
                                    return _ctx.abrupt("return");
                                case 4:
                                    clipboardText = existing === null || existing === void 0 ? void 0 : existing.clipboardText;
                                    if (!(!clipboardText && completions.needsClipboard)) {
                                        _ctx.next = 9;
                                        break;
                                    }
                                    _ctx.next = 8;
                                    return this._clipboardService.readText();
                                case 8:
                                    clipboardText = _ctx.sent;
                                case 9:
                                    if (!(this._state === 0 /* Idle */ )) {
                                        _ctx.next = 11;
                                        break;
                                    }
                                    return _ctx.abrupt("return");
                                case 11:
                                    model = this._editor.getModel();
                                    items = completions.items;
                                    if (existing) {
                                        cmpFn = _suggestJs.getSuggestionComparator(snippetSortOrder);
                                        items = items.concat(existing.items).sort(cmpFn);
                                    }
                                    ctx = new LineContext(model, this._editor.getPosition(), auto, context.shy);
                                    this._completionModel = new _completionModelJs.CompletionModel(items, this._context.column, {
                                        leadingLineContent: ctx.leadingLineContent,
                                        characterCountDelta: ctx.column - this._context.column
                                    }, wordDistance, this._editor.getOption(105 /* suggest */ ), this._editor.getOption(100 /* snippetSuggestions */ ), clipboardText);
                                    // store containers so that they can be disposed later
                                    this._completionDisposables.add(completions.disposable);
                                    this._onNewContext(ctx);
                                    // finally report telemetry about durations
                                    this._reportDurationsTelemetry(completions.durations);
                                case 19:
                                case "end":
                                    return _ctx.stop();
                            }
                        }, _callee, this);
                    }));
                }).catch(_errorsJs.onUnexpectedError);
            }
        },
        {
            key: "_reportDurationsTelemetry",
            value: function _reportDurationsTelemetry(durations) {
                var _this = this;
                if ((this._telemetryGate++) % 230 !== 0) return;
                setTimeout(function() {
                    _this._telemetryService.publicLog2('suggest.durations.json', {
                        data: JSON.stringify(durations)
                    });
                    _this._logService.debug('suggest.durations.json', durations);
                });
            }
        },
        {
            key: "_onNewContext",
            value: function _onNewContext(ctx) {
                if (!this._context) // happens when 24x7 IntelliSense is enabled and still in its delay
                return;
                if (ctx.lineNumber !== this._context.lineNumber) {
                    // e.g. happens when pressing Enter while IntelliSense is computed
                    this.cancel();
                    return;
                }
                if (_stringsJs.getLeadingWhitespace(ctx.leadingLineContent) !== _stringsJs.getLeadingWhitespace(this._context.leadingLineContent)) {
                    // cancel IntelliSense when line start changes
                    // happens when the current word gets outdented
                    this.cancel();
                    return;
                }
                if (ctx.column < this._context.column) {
                    // typed -> moved cursor LEFT -> retrigger if still on a word
                    if (ctx.leadingWord.word) this.trigger({
                        auto: this._context.auto,
                        shy: false
                    }, true);
                    else this.cancel();
                    return;
                }
                if (!this._completionModel) // happens when IntelliSense is not yet computed
                return;
                if (ctx.leadingWord.word.length !== 0 && ctx.leadingWord.startColumn > this._context.leadingWord.startColumn) {
                    // started a new word while IntelliSense shows -> retrigger
                    // Select those providers have not contributed to this completion model and re-trigger completions for
                    // them. Also adopt the existing items and merge them into the new completion model
                    var inactiveProvider = new Set(_modesJs.CompletionProviderRegistry.all(this._editor.getModel()));
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator = this._completionModel.allProvider[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var provider = _step.value;
                            inactiveProvider.delete(provider);
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    var items = this._completionModel.adopt(new Set());
                    this.trigger({
                        auto: this._context.auto,
                        shy: false
                    }, true, inactiveProvider, {
                        items: items,
                        clipboardText: this._completionModel.clipboardText
                    });
                    return;
                }
                if (ctx.column > this._context.column && this._completionModel.incomplete.size > 0 && ctx.leadingWord.word.length !== 0) {
                    // typed -> moved cursor RIGHT & incomple model & still on a word -> retrigger
                    var incomplete = this._completionModel.incomplete;
                    var items1 = this._completionModel.adopt(incomplete);
                    this.trigger({
                        auto: this._state === 2 /* Auto */ ,
                        shy: false,
                        triggerKind: 2 /* TriggerForIncompleteCompletions */ 
                    }, true, incomplete, {
                        items: items1,
                        clipboardText: this._completionModel.clipboardText
                    });
                } else {
                    // typed -> moved cursor RIGHT -> update UI
                    var oldLineContext = this._completionModel.lineContext;
                    var isFrozen = false;
                    this._completionModel.lineContext = {
                        leadingLineContent: ctx.leadingLineContent,
                        characterCountDelta: ctx.column - this._context.column
                    };
                    if (this._completionModel.items.length === 0) {
                        if (LineContext.shouldAutoTrigger(this._editor) && this._context.leadingWord.endColumn < ctx.leadingWord.startColumn) {
                            // retrigger when heading into a new word
                            this.trigger({
                                auto: this._context.auto,
                                shy: false
                            }, true);
                            return;
                        }
                        if (!this._context.auto) {
                            // freeze when IntelliSense was manually requested
                            this._completionModel.lineContext = oldLineContext;
                            isFrozen = this._completionModel.items.length > 0;
                            if (isFrozen && ctx.leadingWord.word.length === 0) {
                                // there were results before but now there aren't
                                // and also we are not on a word anymore -> cancel
                                this.cancel();
                                return;
                            }
                        } else {
                            // nothing left
                            this.cancel();
                            return;
                        }
                    }
                    this._onDidSuggest.fire({
                        completionModel: this._completionModel,
                        auto: this._context.auto,
                        shy: this._context.shy,
                        isFrozen: isFrozen
                    });
                }
            }
        }
    ], [
        {
            key: "_createSuggestFilter",
            value: function _createSuggestFilter(editor) {
                // kind filter and snippet sort rules
                var result = new Set();
                // snippet setting
                var snippetSuggestions = editor.getOption(100 /* snippetSuggestions */ );
                if (snippetSuggestions === 'none') result.add(27 /* Snippet */ );
                // type setting
                var suggestOptions = editor.getOption(105 /* suggest */ );
                if (!suggestOptions.showMethods) result.add(0 /* Method */ );
                if (!suggestOptions.showFunctions) result.add(1 /* Function */ );
                if (!suggestOptions.showConstructors) result.add(2 /* Constructor */ );
                if (!suggestOptions.showFields) result.add(3 /* Field */ );
                if (!suggestOptions.showVariables) result.add(4 /* Variable */ );
                if (!suggestOptions.showClasses) result.add(5 /* Class */ );
                if (!suggestOptions.showStructs) result.add(6 /* Struct */ );
                if (!suggestOptions.showInterfaces) result.add(7 /* Interface */ );
                if (!suggestOptions.showModules) result.add(8 /* Module */ );
                if (!suggestOptions.showProperties) result.add(9 /* Property */ );
                if (!suggestOptions.showEvents) result.add(10 /* Event */ );
                if (!suggestOptions.showOperators) result.add(11 /* Operator */ );
                if (!suggestOptions.showUnits) result.add(12 /* Unit */ );
                if (!suggestOptions.showValues) result.add(13 /* Value */ );
                if (!suggestOptions.showConstants) result.add(14 /* Constant */ );
                if (!suggestOptions.showEnums) result.add(15 /* Enum */ );
                if (!suggestOptions.showEnumMembers) result.add(16 /* EnumMember */ );
                if (!suggestOptions.showKeywords) result.add(17 /* Keyword */ );
                if (!suggestOptions.showWords) result.add(18 /* Text */ );
                if (!suggestOptions.showColors) result.add(19 /* Color */ );
                if (!suggestOptions.showFiles) result.add(20 /* File */ );
                if (!suggestOptions.showReferences) result.add(21 /* Reference */ );
                if (!suggestOptions.showColors) result.add(22 /* Customcolor */ );
                if (!suggestOptions.showFolders) result.add(23 /* Folder */ );
                if (!suggestOptions.showTypeParameters) result.add(24 /* TypeParameter */ );
                if (!suggestOptions.showSnippets) result.add(27 /* Snippet */ );
                if (!suggestOptions.showUsers) result.add(25 /* User */ );
                if (!suggestOptions.showIssues) result.add(26 /* Issue */ );
                return {
                    itemKind: result,
                    showDeprecated: suggestOptions.showDeprecated
                };
            }
        }
    ]);
    return SuggestModel1;
}();
SuggestModel = __decorate([
    __param(1, _editorWorkerServiceJs.IEditorWorkerService),
    __param(2, _clipboardServiceJs.IClipboardService),
    __param(3, _telemetryJs.ITelemetryService),
    __param(4, _logJs.ILogService),
    __param(5, _contextkeyJs.IContextKeyService),
    __param(6, _configurationJs.IConfigurationService)
], SuggestModel);

},{"@swc/helpers":"erO4s","regenerator-runtime":"12Ae8","../../../base/common/async.js":"kMhSh","../../../base/common/cancellation.js":"1C4LY","../../../base/common/errors.js":"afm4i","../../../base/common/event.js":"9IBcK","../../../base/common/lifecycle.js":"bcbPy","../../../base/common/strings.js":"jsb6w","../../common/core/selection.js":"hjmnH","../../common/modes.js":"bRbY1","../../common/services/editorWorkerService.js":"jXu2E","../snippet/snippetController2.js":"gtyum","./wordDistance.js":"fTSh2","../../../platform/clipboard/common/clipboardService.js":"lj8DI","../../../platform/configuration/common/configuration.js":"9wFfb","../../../platform/contextkey/common/contextkey.js":"5cjav","../../../platform/log/common/log.js":"ef3uL","../../../platform/telemetry/common/telemetry.js":"ers5B","./completionModel.js":"ehLwy","./suggest.js":"31aA1","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"fTSh2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "WordDistance", function() {
    return WordDistance1;
});
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
var _arraysJs = require("../../../base/common/arrays.js");
var _rangeJs = require("../../common/core/range.js");
var _bracketSelectionsJs = require("../smartSelect/bracketSelections.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var WordDistance1 = /*#__PURE__*/ function() {
    "use strict";
    function WordDistance1() {
        _helpers.classCallCheck(this, WordDistance1);
    }
    _helpers.createClass(WordDistance1, null, [
        {
            key: "create",
            value: function create(service, editor) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var model, position, ref, ranges, wordRanges, wordUntilPos;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                if (editor.getOption(105 /* suggest */ ).localityBonus) {
                                    _ctx.next = 2;
                                    break;
                                }
                                return _ctx.abrupt("return", WordDistance1.None);
                            case 2:
                                if (editor.hasModel()) {
                                    _ctx.next = 4;
                                    break;
                                }
                                return _ctx.abrupt("return", WordDistance1.None);
                            case 4:
                                model = editor.getModel();
                                position = editor.getPosition();
                                if (service.canComputeWordRanges(model.uri)) {
                                    _ctx.next = 8;
                                    break;
                                }
                                return _ctx.abrupt("return", WordDistance1.None);
                            case 8:
                                _ctx.t0 = _helpers;
                                _ctx.next = 11;
                                return new _bracketSelectionsJs.BracketSelectionRangeProvider().provideSelectionRanges(model, [
                                    position
                                ]);
                            case 11:
                                _ctx.t1 = _ctx.sent;
                                ref = _ctx.t0.slicedToArray.call(_ctx.t0, _ctx.t1, 1);
                                ranges = ref[0];
                                if (!(ranges.length === 0)) {
                                    _ctx.next = 16;
                                    break;
                                }
                                return _ctx.abrupt("return", WordDistance1.None);
                            case 16:
                                _ctx.next = 18;
                                return service.computeWordRanges(model.uri, ranges[0].range);
                            case 18:
                                wordRanges = _ctx.sent;
                                if (wordRanges) {
                                    _ctx.next = 21;
                                    break;
                                }
                                return _ctx.abrupt("return", WordDistance1.None);
                            case 21:
                                wordUntilPos = model.getWordUntilPosition(position);
                                delete wordRanges[wordUntilPos.word];
                                return _ctx.abrupt("return", new /*#__PURE__*/ (function(WordDistance2) {
                                    _helpers.inherits(_class, WordDistance2);
                                    var _super = _helpers.createSuper(_class);
                                    function _class() {
                                        _helpers.classCallCheck(this, _class);
                                        return _super.apply(this, arguments);
                                    }
                                    _helpers.createClass(_class, [
                                        {
                                            key: "distance",
                                            value: function distance(anchor, item) {
                                                if (!position.equals(editor.getPosition())) return 0;
                                                if (item.kind === 17 /* Keyword */ ) return 2097152;
                                                var word = typeof item.label === 'string' ? item.label : item.label.label;
                                                var wordLines = wordRanges[word];
                                                if (_arraysJs.isFalsyOrEmpty(wordLines)) return 2097152;
                                                var idx = _arraysJs.binarySearch(wordLines, _rangeJs.Range.fromPositions(anchor), _rangeJs.Range.compareRangesUsingStarts);
                                                var bestWordRange = idx >= 0 ? wordLines[idx] : wordLines[Math.max(0, ~idx - 1)];
                                                var blockDistance = ranges.length;
                                                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                                                try {
                                                    for(var _iterator = ranges[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                                                        var range = _step.value;
                                                        if (!_rangeJs.Range.containsRange(range.range, bestWordRange)) break;
                                                        blockDistance -= 1;
                                                    }
                                                } catch (err) {
                                                    _didIteratorError = true;
                                                    _iteratorError = err;
                                                } finally{
                                                    try {
                                                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                                                            _iterator.return();
                                                        }
                                                    } finally{
                                                        if (_didIteratorError) {
                                                            throw _iteratorError;
                                                        }
                                                    }
                                                }
                                                return blockDistance;
                                            }
                                        }
                                    ]);
                                    return _class;
                                }(WordDistance1)));
                            case 24:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee);
                }));
            }
        }
    ]);
    return WordDistance1;
}();
WordDistance1.None = new /*#__PURE__*/ (function(WordDistance) {
    "use strict";
    _helpers.inherits(_class, WordDistance);
    var _super = _helpers.createSuper(_class);
    function _class() {
        _helpers.classCallCheck(this, _class);
        return _super.apply(this, arguments);
    }
    _helpers.createClass(_class, [
        {
            key: "distance",
            value: function distance() {
                return 0;
            }
        }
    ]);
    return _class;
}(WordDistance1));

},{"@swc/helpers":"erO4s","regenerator-runtime":"12Ae8","../../../base/common/arrays.js":"bZs3E","../../common/core/range.js":"VbyL8","../smartSelect/bracketSelections.js":"2rlge","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"2rlge":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BracketSelectionRangeProvider", function() {
    return BracketSelectionRangeProvider;
});
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
var _linkedListJs = require("../../../base/common/linkedList.js");
var _positionJs = require("../../common/core/position.js");
var _rangeJs = require("../../common/core/range.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var BracketSelectionRangeProvider = /*#__PURE__*/ function() {
    "use strict";
    function BracketSelectionRangeProvider() {
        _helpers.classCallCheck(this, BracketSelectionRangeProvider);
    }
    _helpers.createClass(BracketSelectionRangeProvider, [
        {
            key: "provideSelectionRanges",
            value: function provideSelectionRanges(model, positions) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var result, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, position, bucket, ranges;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                result = [];
                                _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                                _ctx.prev = 2;
                                _iterator = positions[Symbol.iterator]();
                            case 4:
                                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                                    _ctx.next = 16;
                                    break;
                                }
                                position = _step.value;
                                bucket = [];
                                result.push(bucket);
                                ranges = new Map();
                                _ctx.next = 11;
                                return new Promise(function(resolve) {
                                    return BracketSelectionRangeProvider._bracketsRightYield(resolve, 0, model, position, ranges);
                                });
                            case 11:
                                _ctx.next = 13;
                                return new Promise(function(resolve) {
                                    return BracketSelectionRangeProvider._bracketsLeftYield(resolve, 0, model, position, ranges, bucket);
                                });
                            case 13:
                                _iteratorNormalCompletion = true;
                                _ctx.next = 4;
                                break;
                            case 16:
                                _ctx.next = 22;
                                break;
                            case 18:
                                _ctx.prev = 18;
                                _ctx.t0 = _ctx["catch"](2);
                                _didIteratorError = true;
                                _iteratorError = _ctx.t0;
                            case 22:
                                _ctx.prev = 22;
                                _ctx.prev = 23;
                                if (!_iteratorNormalCompletion && _iterator.return != null) {
                                    _iterator.return();
                                }
                            case 25:
                                _ctx.prev = 25;
                                if (!_didIteratorError) {
                                    _ctx.next = 28;
                                    break;
                                }
                                throw _iteratorError;
                            case 28:
                                return _ctx.finish(25);
                            case 29:
                                return _ctx.finish(22);
                            case 30:
                                return _ctx.abrupt("return", result);
                            case 31:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, null, [
                        [
                            2,
                            18,
                            22,
                            30
                        ],
                        [
                            23,
                            ,
                            25,
                            29
                        ]
                    ]);
                }));
            }
        }
    ], [
        {
            key: "_bracketsRightYield",
            value: function _bracketsRightYield(resolve, round, model, pos, ranges) {
                var counts = new Map();
                var t1 = Date.now();
                while(true){
                    if (round >= BracketSelectionRangeProvider._maxRounds) {
                        resolve();
                        break;
                    }
                    if (!pos) {
                        resolve();
                        break;
                    }
                    var bracket = model.bracketPairs.findNextBracket(pos);
                    if (!bracket) {
                        resolve();
                        break;
                    }
                    var d = Date.now() - t1;
                    if (d > BracketSelectionRangeProvider._maxDuration) {
                        setTimeout(function() {
                            return BracketSelectionRangeProvider._bracketsRightYield(resolve, round + 1, model, pos, ranges);
                        });
                        break;
                    }
                    var key = bracket.close[0];
                    if (bracket.isOpen) {
                        // wait for closing
                        var val = counts.has(key) ? counts.get(key) : 0;
                        counts.set(key, val + 1);
                    } else {
                        // process closing
                        var val1 = counts.has(key) ? counts.get(key) : 0;
                        val1 -= 1;
                        counts.set(key, Math.max(0, val1));
                        if (val1 < 0) {
                            var list = ranges.get(key);
                            if (!list) {
                                list = new _linkedListJs.LinkedList();
                                ranges.set(key, list);
                            }
                            list.push(bracket.range);
                        }
                    }
                    pos = bracket.range.getEndPosition();
                }
            }
        },
        {
            key: "_bracketsLeftYield",
            value: function _bracketsLeftYield(resolve, round, model, pos, ranges, bucket) {
                var counts = new Map();
                var t1 = Date.now();
                while(true){
                    if (round >= BracketSelectionRangeProvider._maxRounds && ranges.size === 0) {
                        resolve();
                        break;
                    }
                    if (!pos) {
                        resolve();
                        break;
                    }
                    var bracket = model.bracketPairs.findPrevBracket(pos);
                    if (!bracket) {
                        resolve();
                        break;
                    }
                    var d = Date.now() - t1;
                    if (d > BracketSelectionRangeProvider._maxDuration) {
                        setTimeout(function() {
                            return BracketSelectionRangeProvider._bracketsLeftYield(resolve, round + 1, model, pos, ranges, bucket);
                        });
                        break;
                    }
                    var key = bracket.close[0];
                    if (!bracket.isOpen) {
                        // wait for opening
                        var val = counts.has(key) ? counts.get(key) : 0;
                        counts.set(key, val + 1);
                    } else {
                        // opening
                        var val2 = counts.has(key) ? counts.get(key) : 0;
                        val2 -= 1;
                        counts.set(key, Math.max(0, val2));
                        if (val2 < 0) {
                            var list = ranges.get(key);
                            if (list) {
                                var closing = list.shift();
                                if (list.size === 0) ranges.delete(key);
                                var innerBracket = _rangeJs.Range.fromPositions(bracket.range.getEndPosition(), closing.getStartPosition());
                                var outerBracket = _rangeJs.Range.fromPositions(bracket.range.getStartPosition(), closing.getEndPosition());
                                bucket.push({
                                    range: innerBracket
                                });
                                bucket.push({
                                    range: outerBracket
                                });
                                BracketSelectionRangeProvider._addBracketLeading(model, outerBracket, bucket);
                            }
                        }
                    }
                    pos = bracket.range.getStartPosition();
                }
            }
        },
        {
            key: "_addBracketLeading",
            value: function _addBracketLeading(model, bracket, bucket) {
                if (bracket.startLineNumber === bracket.endLineNumber) return;
                // xxxxxxxx {
                //
                // }
                var startLine = bracket.startLineNumber;
                var column = model.getLineFirstNonWhitespaceColumn(startLine);
                if (column !== 0 && column !== bracket.startColumn) {
                    bucket.push({
                        range: _rangeJs.Range.fromPositions(new _positionJs.Position(startLine, column), bracket.getEndPosition())
                    });
                    bucket.push({
                        range: _rangeJs.Range.fromPositions(new _positionJs.Position(startLine, 1), bracket.getEndPosition())
                    });
                }
                // xxxxxxxx
                // {
                //
                // }
                var aboveLine = startLine - 1;
                if (aboveLine > 0) {
                    var column1 = model.getLineFirstNonWhitespaceColumn(aboveLine);
                    if (column1 === bracket.startColumn && column1 !== model.getLineLastNonWhitespaceColumn(aboveLine)) {
                        bucket.push({
                            range: _rangeJs.Range.fromPositions(new _positionJs.Position(aboveLine, column1), bracket.getEndPosition())
                        });
                        bucket.push({
                            range: _rangeJs.Range.fromPositions(new _positionJs.Position(aboveLine, 1), bracket.getEndPosition())
                        });
                    }
                }
            }
        }
    ]);
    return BracketSelectionRangeProvider;
}();
BracketSelectionRangeProvider._maxDuration = 30;
BracketSelectionRangeProvider._maxRounds = 2;

},{"@swc/helpers":"erO4s","regenerator-runtime":"12Ae8","../../../base/common/linkedList.js":"lvqqV","../../common/core/position.js":"6xP0w","../../common/core/range.js":"VbyL8","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"ehLwy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LineContext", function() {
    return LineContext;
});
parcelHelpers.export(exports, "CompletionModel", function() {
    return CompletionModel;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _arraysJs = require("../../../base/common/arrays.js");
var _filtersJs = require("../../../base/common/filters.js");
var _stringsJs = require("../../../base/common/strings.js");
var LineContext = function LineContext(leadingLineContent, characterCountDelta) {
    "use strict";
    _helpers.classCallCheck(this, LineContext);
    this.leadingLineContent = leadingLineContent;
    this.characterCountDelta = characterCountDelta;
};
var CompletionModel = /*#__PURE__*/ function() {
    "use strict";
    function CompletionModel(items, column, lineContext, wordDistance, options, snippetSuggestions, clipboardText) {
        _helpers.classCallCheck(this, CompletionModel);
        this.clipboardText = clipboardText;
        this._snippetCompareFn = CompletionModel._compareCompletionItems;
        this._items = items;
        this._column = column;
        this._wordDistance = wordDistance;
        this._options = options;
        this._refilterKind = 1 /* All */ ;
        this._lineContext = lineContext;
        if (snippetSuggestions === 'top') this._snippetCompareFn = CompletionModel._compareCompletionItemsSnippetsUp;
        else if (snippetSuggestions === 'bottom') this._snippetCompareFn = CompletionModel._compareCompletionItemsSnippetsDown;
    }
    _helpers.createClass(CompletionModel, [
        {
            key: "lineContext",
            get: function get() {
                return this._lineContext;
            },
            set: function set(value) {
                if (this._lineContext.leadingLineContent !== value.leadingLineContent || this._lineContext.characterCountDelta !== value.characterCountDelta) {
                    this._refilterKind = this._lineContext.characterCountDelta < value.characterCountDelta && this._filteredItems ? 2 /* Incr */  : 1 /* All */ ;
                    this._lineContext = value;
                }
            }
        },
        {
            key: "items",
            get: function get() {
                this._ensureCachedState();
                return this._filteredItems;
            }
        },
        {
            key: "allProvider",
            get: function get() {
                this._ensureCachedState();
                return this._providerInfo.keys();
            }
        },
        {
            key: "incomplete",
            get: function get() {
                this._ensureCachedState();
                var result = new Set();
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this._providerInfo[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var _value = _helpers.slicedToArray(_step.value, 2), provider = _value[0], incomplete = _value[1];
                        if (incomplete) result.add(provider);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return result;
            }
        },
        {
            key: "adopt",
            value: function adopt(except) {
                var res = [];
                for(var i = 0; i < this._items.length;)if (!except.has(this._items[i].provider)) {
                    res.push(this._items[i]);
                    // unordered removed
                    this._items[i] = this._items[this._items.length - 1];
                    this._items.pop();
                } else // continue with next item
                i++;
                this._refilterKind = 1 /* All */ ;
                return res;
            }
        },
        {
            key: "stats",
            get: function get() {
                this._ensureCachedState();
                return this._stats;
            }
        },
        {
            key: "_ensureCachedState",
            value: function _ensureCachedState() {
                if (this._refilterKind !== 0 /* Nothing */ ) this._createCachedState();
            }
        },
        {
            key: "_createCachedState",
            value: function _createCachedState() {
                this._providerInfo = new Map();
                var labelLengths = [];
                var __lineContext = this._lineContext, leadingLineContent = __lineContext.leadingLineContent, characterCountDelta = __lineContext.characterCountDelta;
                var word = '';
                var wordLow = '';
                // incrementally filter less
                var source = this._refilterKind === 1 /* All */  ? this._items : this._filteredItems;
                var target = [];
                // picks a score function based on the number of
                // items that we have to score/filter and based on the
                // user-configuration
                var scoreFn = !this._options.filterGraceful || source.length > 2000 ? _filtersJs.fuzzyScore : _filtersJs.fuzzyScoreGracefulAggressive;
                for(var i = 0; i < source.length; i++){
                    var item = source[i];
                    if (item.isInvalid) continue; // SKIP invalid items
                    // collect all support, know if their result is incomplete
                    this._providerInfo.set(item.provider, Boolean(item.container.incomplete));
                    // 'word' is that remainder of the current line that we
                    // filter and score against. In theory each suggestion uses a
                    // different word, but in practice not - that's why we cache
                    var overwriteBefore = item.position.column - item.editStart.column;
                    var wordLen = overwriteBefore + characterCountDelta - (item.position.column - this._column);
                    if (word.length !== wordLen) {
                        word = wordLen === 0 ? '' : leadingLineContent.slice(-wordLen);
                        wordLow = word.toLowerCase();
                    }
                    // remember the word against which this item was
                    // scored
                    item.word = word;
                    if (wordLen === 0) // when there is nothing to score against, don't
                    // event try to do. Use a const rank and rely on
                    // the fallback-sort using the initial sort order.
                    // use a score of `-100` because that is out of the
                    // bound of values `fuzzyScore` will return
                    item.score = _filtersJs.FuzzyScore.Default;
                    else {
                        // skip word characters that are whitespace until
                        // we have hit the replace range (overwriteBefore)
                        var wordPos = 0;
                        while(wordPos < overwriteBefore){
                            var ch = word.charCodeAt(wordPos);
                            if (ch === 32 /* Space */  || ch === 9 /* Tab */ ) wordPos += 1;
                            else break;
                        }
                        if (wordPos >= wordLen) // the wordPos at which scoring starts is the whole word
                        // and therefore the same rules as not having a word apply
                        item.score = _filtersJs.FuzzyScore.Default;
                        else if (typeof item.completion.filterText === 'string') {
                            // when there is a `filterText` it must match the `word`.
                            // if it matches we check with the label to compute highlights
                            // and if that doesn't yield a result we have no highlights,
                            // despite having the match
                            var match = scoreFn(word, wordLow, wordPos, item.completion.filterText, item.filterTextLow, 0, false);
                            if (!match) continue; // NO match
                            if (_stringsJs.compareIgnoreCase(item.completion.filterText, item.textLabel) === 0) // filterText and label are actually the same -> use good highlights
                            item.score = match;
                            else {
                                // re-run the scorer on the label in the hope of a result BUT use the rank
                                // of the filterText-match
                                item.score = _filtersJs.anyScore(word, wordLow, wordPos, item.textLabel, item.labelLow, 0);
                                item.score[0] = match[0]; // use score from filterText
                            }
                        } else {
                            // by default match `word` against the `label`
                            var match1 = scoreFn(word, wordLow, wordPos, item.textLabel, item.labelLow, 0, false);
                            if (!match1) continue; // NO match
                            item.score = match1;
                        }
                    }
                    item.idx = i;
                    item.distance = this._wordDistance.distance(item.position, item.completion);
                    target.push(item);
                    // update stats
                    labelLengths.push(item.textLabel.length);
                }
                this._filteredItems = target.sort(this._snippetCompareFn);
                this._refilterKind = 0 /* Nothing */ ;
                this._stats = {
                    pLabelLen: labelLengths.length ? _arraysJs.quickSelect(labelLengths.length - .85, labelLengths, function(a, b) {
                        return a - b;
                    }) : 0
                };
            }
        }
    ], [
        {
            key: "_compareCompletionItems",
            value: function _compareCompletionItems(a, b) {
                if (a.score[0] > b.score[0]) return -1;
                else if (a.score[0] < b.score[0]) return 1;
                else if (a.distance < b.distance) return -1;
                else if (a.distance > b.distance) return 1;
                else if (a.idx < b.idx) return -1;
                else if (a.idx > b.idx) return 1;
                else return 0;
            }
        },
        {
            key: "_compareCompletionItemsSnippetsDown",
            value: function _compareCompletionItemsSnippetsDown(a, b) {
                if (a.completion.kind !== b.completion.kind) {
                    if (a.completion.kind === 27 /* Snippet */ ) return 1;
                    else if (b.completion.kind === 27 /* Snippet */ ) return -1;
                }
                return CompletionModel._compareCompletionItems(a, b);
            }
        },
        {
            key: "_compareCompletionItemsSnippetsUp",
            value: function _compareCompletionItemsSnippetsUp(a, b) {
                if (a.completion.kind !== b.completion.kind) {
                    if (a.completion.kind === 27 /* Snippet */ ) return -1;
                    else if (b.completion.kind === 27 /* Snippet */ ) return 1;
                }
                return CompletionModel._compareCompletionItems(a, b);
            }
        }
    ]);
    return CompletionModel;
}();

},{"@swc/helpers":"erO4s","../../../base/common/arrays.js":"bZs3E","../../../base/common/filters.js":"m7Exq","../../../base/common/strings.js":"jsb6w","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"kPL5M":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "OvertypingCapturer", function() {
    return OvertypingCapturer;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _lifecycleJs = require("../../../base/common/lifecycle.js");
var OvertypingCapturer = /*#__PURE__*/ function() {
    "use strict";
    function OvertypingCapturer(editor, suggestModel) {
        var _this = this;
        _helpers.classCallCheck(this, OvertypingCapturer);
        this._disposables = new _lifecycleJs.DisposableStore();
        this._lastOvertyped = [];
        this._empty = true;
        this._disposables.add(editor.onWillType(function() {
            if (!_this._empty) return;
            if (!editor.hasModel()) return;
            var selections = editor.getSelections();
            var selectionsLength = selections.length;
            // Check if it will overtype any selections
            var willOvertype = false;
            for(var i = 0; i < selectionsLength; i++)if (!selections[i].isEmpty()) {
                willOvertype = true;
                break;
            }
            if (!willOvertype) return;
            _this._lastOvertyped = [];
            var model = editor.getModel();
            for(var i1 = 0; i1 < selectionsLength; i1++){
                var selection = selections[i1];
                // Check for overtyping capturer restrictions
                if (model.getValueLengthInRange(selection) > OvertypingCapturer._maxSelectionLength) return;
                _this._lastOvertyped[i1] = {
                    value: model.getValueInRange(selection),
                    multiline: selection.startLineNumber !== selection.endLineNumber
                };
            }
            _this._empty = false;
        }));
        this._disposables.add(suggestModel.onDidCancel(function(e) {
            if (!_this._empty && !e.retrigger) _this._empty = true;
        }));
    }
    _helpers.createClass(OvertypingCapturer, [
        {
            key: "getLastOvertypedInfo",
            value: function getLastOvertypedInfo(idx) {
                if (!this._empty && idx >= 0 && idx < this._lastOvertyped.length) return this._lastOvertyped[idx];
                return undefined;
            }
        },
        {
            key: "dispose",
            value: function dispose() {
                this._disposables.dispose();
            }
        }
    ]);
    return OvertypingCapturer;
}();
OvertypingCapturer._maxSelectionLength = 51200;

},{"@swc/helpers":"erO4s","../../../base/common/lifecycle.js":"bcbPy","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"bd0Gz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "editorSuggestWidgetBackground", function() {
    return editorSuggestWidgetBackground;
});
parcelHelpers.export(exports, "editorSuggestWidgetBorder", function() {
    return editorSuggestWidgetBorder;
});
parcelHelpers.export(exports, "editorSuggestWidgetForeground", function() {
    return editorSuggestWidgetForeground;
});
parcelHelpers.export(exports, "editorSuggestWidgetSelectedForeground", function() {
    return editorSuggestWidgetSelectedForeground;
});
parcelHelpers.export(exports, "editorSuggestWidgetSelectedIconForeground", function() {
    return editorSuggestWidgetSelectedIconForeground;
});
parcelHelpers.export(exports, "editorSuggestWidgetSelectedBackground", function() {
    return editorSuggestWidgetSelectedBackground;
});
parcelHelpers.export(exports, "editorSuggestWidgetHighlightForeground", function() {
    return editorSuggestWidgetHighlightForeground;
});
parcelHelpers.export(exports, "editorSuggestWidgetHighlightFocusForeground", function() {
    return editorSuggestWidgetHighlightFocusForeground;
});
parcelHelpers.export(exports, "editorSuggestWidgetStatusForeground", function() {
    return editorSuggestWidgetStatusForeground;
});
parcelHelpers.export(exports, "SuggestWidget", function() {
    return SuggestWidget;
});
parcelHelpers.export(exports, "SuggestContentWidget", function() {
    return SuggestContentWidget;
});
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
var _domJs = require("../../../base/browser/dom.js");
var _codiconStylesJs = require("../../../base/browser/ui/codicons/codiconStyles.js"); // The codicon symbol styles are defined here and must be loaded
var _listWidgetJs = require("../../../base/browser/ui/list/listWidget.js");
var _asyncJs = require("../../../base/common/async.js");
var _errorsJs = require("../../../base/common/errors.js");
var _eventJs = require("../../../base/common/event.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _numbersJs = require("../../../base/common/numbers.js");
var _stringsJs = require("../../../base/common/strings.js");
var _suggestCss = require("./media/suggest.css");
var _embeddedCodeEditorWidgetJs = require("../../browser/widget/embeddedCodeEditorWidget.js");
var _suggestWidgetStatusJs = require("./suggestWidgetStatus.js");
var _symbolIconsJs = require("../symbolIcons/symbolIcons.js"); // The codicon symbol colors are defined here and must be loaded to get colors
var _nlsJs = require("../../../nls.js");
var _contextkeyJs = require("../../../platform/contextkey/common/contextkey.js");
var _instantiationJs = require("../../../platform/instantiation/common/instantiation.js");
var _storageJs = require("../../../platform/storage/common/storage.js");
var _colorRegistryJs = require("../../../platform/theme/common/colorRegistry.js");
var _stylerJs = require("../../../platform/theme/common/styler.js");
var _themeServiceJs = require("../../../platform/theme/common/themeService.js");
var _resizableJs = require("./resizable.js");
var _suggestJs = require("./suggest.js");
var _suggestWidgetDetailsJs = require("./suggestWidgetDetails.js");
var _suggestWidgetRendererJs = require("./suggestWidgetRenderer.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var editorSuggestWidgetBackground = _colorRegistryJs.registerColor('editorSuggestWidget.background', {
    dark: _colorRegistryJs.editorWidgetBackground,
    light: _colorRegistryJs.editorWidgetBackground,
    hc: _colorRegistryJs.editorWidgetBackground
}, _nlsJs.localize('editorSuggestWidgetBackground', 'Background color of the suggest widget.'));
var editorSuggestWidgetBorder = _colorRegistryJs.registerColor('editorSuggestWidget.border', {
    dark: _colorRegistryJs.editorWidgetBorder,
    light: _colorRegistryJs.editorWidgetBorder,
    hc: _colorRegistryJs.editorWidgetBorder
}, _nlsJs.localize('editorSuggestWidgetBorder', 'Border color of the suggest widget.'));
var editorSuggestWidgetForeground = _colorRegistryJs.registerColor('editorSuggestWidget.foreground', {
    dark: _colorRegistryJs.editorForeground,
    light: _colorRegistryJs.editorForeground,
    hc: _colorRegistryJs.editorForeground
}, _nlsJs.localize('editorSuggestWidgetForeground', 'Foreground color of the suggest widget.'));
var editorSuggestWidgetSelectedForeground = _colorRegistryJs.registerColor('editorSuggestWidget.selectedForeground', {
    dark: _colorRegistryJs.quickInputListFocusForeground,
    light: _colorRegistryJs.quickInputListFocusForeground,
    hc: _colorRegistryJs.quickInputListFocusForeground
}, _nlsJs.localize('editorSuggestWidgetSelectedForeground', 'Foreground color of the selected entry in the suggest widget.'));
var editorSuggestWidgetSelectedIconForeground = _colorRegistryJs.registerColor('editorSuggestWidget.selectedIconForeground', {
    dark: _colorRegistryJs.quickInputListFocusIconForeground,
    light: _colorRegistryJs.quickInputListFocusIconForeground,
    hc: _colorRegistryJs.quickInputListFocusIconForeground
}, _nlsJs.localize('editorSuggestWidgetSelectedIconForeground', 'Icon foreground color of the selected entry in the suggest widget.'));
var editorSuggestWidgetSelectedBackground = _colorRegistryJs.registerColor('editorSuggestWidget.selectedBackground', {
    dark: _colorRegistryJs.quickInputListFocusBackground,
    light: _colorRegistryJs.quickInputListFocusBackground,
    hc: _colorRegistryJs.quickInputListFocusBackground
}, _nlsJs.localize('editorSuggestWidgetSelectedBackground', 'Background color of the selected entry in the suggest widget.'));
var editorSuggestWidgetHighlightForeground = _colorRegistryJs.registerColor('editorSuggestWidget.highlightForeground', {
    dark: _colorRegistryJs.listHighlightForeground,
    light: _colorRegistryJs.listHighlightForeground,
    hc: _colorRegistryJs.listHighlightForeground
}, _nlsJs.localize('editorSuggestWidgetHighlightForeground', 'Color of the match highlights in the suggest widget.'));
var editorSuggestWidgetHighlightFocusForeground = _colorRegistryJs.registerColor('editorSuggestWidget.focusHighlightForeground', {
    dark: _colorRegistryJs.listFocusHighlightForeground,
    light: _colorRegistryJs.listFocusHighlightForeground,
    hc: _colorRegistryJs.listFocusHighlightForeground
}, _nlsJs.localize('editorSuggestWidgetFocusHighlightForeground', 'Color of the match highlights in the suggest widget when an item is focused.'));
var editorSuggestWidgetStatusForeground = _colorRegistryJs.registerColor('editorSuggestWidgetStatus.foreground', {
    dark: _colorRegistryJs.transparent(editorSuggestWidgetForeground, .5),
    light: _colorRegistryJs.transparent(editorSuggestWidgetForeground, .5),
    hc: _colorRegistryJs.transparent(editorSuggestWidgetForeground, .5)
}, _nlsJs.localize('editorSuggestWidgetStatusForeground', 'Foreground color of the suggest widget status.'));
var PersistedWidgetSize = /*#__PURE__*/ function() {
    "use strict";
    function PersistedWidgetSize(_service, editor) {
        _helpers.classCallCheck(this, PersistedWidgetSize);
        this._service = _service;
        this._key = "suggestWidget.size/".concat(editor.getEditorType(), "/").concat(editor instanceof _embeddedCodeEditorWidgetJs.EmbeddedCodeEditorWidget);
    }
    _helpers.createClass(PersistedWidgetSize, [
        {
            key: "restore",
            value: function restore() {
                var _a;
                var raw = (_a = this._service.get(this._key, 0 /* GLOBAL */ )) !== null && _a !== void 0 ? _a : '';
                try {
                    var obj = JSON.parse(raw);
                    if (_domJs.Dimension.is(obj)) return _domJs.Dimension.lift(obj);
                } catch (_b) {
                // ignore
                }
                return undefined;
            }
        },
        {
            key: "store",
            value: function store(size) {
                this._service.store(this._key, JSON.stringify(size), 0 /* GLOBAL */ , 1 /* MACHINE */ );
            }
        },
        {
            key: "reset",
            value: function reset() {
                this._service.remove(this._key, 0 /* GLOBAL */ );
            }
        }
    ]);
    return PersistedWidgetSize;
}();
var SuggestWidget = /*#__PURE__*/ function() {
    "use strict";
    function SuggestWidget1(editor, _storageService, _contextKeyService, _themeService, instantiationService) {
        var _this = this;
        _helpers.classCallCheck(this, SuggestWidget1);
        this.editor = editor;
        this._storageService = _storageService;
        this._state = 0 /* Hidden */ ;
        this._isAuto = false;
        this._ignoreFocusEvents = false;
        this._forceRenderingAbove = false;
        this._explainMode = false;
        this._showTimeout = new _asyncJs.TimeoutTimer();
        this._disposables = new _lifecycleJs.DisposableStore();
        this._onDidSelect = new _eventJs.Emitter();
        this._onDidFocus = new _eventJs.Emitter();
        this._onDidHide = new _eventJs.Emitter();
        this._onDidShow = new _eventJs.Emitter();
        this.onDidSelect = this._onDidSelect.event;
        this.onDidFocus = this._onDidFocus.event;
        this.onDidHide = this._onDidHide.event;
        this.onDidShow = this._onDidShow.event;
        this._onDetailsKeydown = new _eventJs.Emitter();
        this.onDetailsKeyDown = this._onDetailsKeydown.event;
        this.element = new _resizableJs.ResizableHTMLElement();
        this.element.domNode.classList.add('editor-widget', 'suggest-widget');
        this._contentWidget = new SuggestContentWidget(this, editor);
        this._persistedSize = new PersistedWidgetSize(_storageService, editor);
        var ResizeState = function ResizeState(persistedSize, currentSize) {
            var persistHeight = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false, persistWidth = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
            _helpers.classCallCheck(this, ResizeState);
            this.persistedSize = persistedSize;
            this.currentSize = currentSize;
            this.persistHeight = persistHeight;
            this.persistWidth = persistWidth;
        };
        var state;
        this._disposables.add(this.element.onDidWillResize(function() {
            _this._contentWidget.lockPreference();
            state = new ResizeState(_this._persistedSize.restore(), _this.element.size);
        }));
        this._disposables.add(this.element.onDidResize(function(e) {
            var _a, _b, _c, _d;
            _this._resize(e.dimension.width, e.dimension.height);
            if (state) {
                state.persistHeight = state.persistHeight || !!e.north || !!e.south;
                state.persistWidth = state.persistWidth || !!e.east || !!e.west;
            }
            if (!e.done) return;
            if (state) {
                // only store width or height value that have changed and also
                // only store changes that are above a certain threshold
                var ref = _this.getLayoutInfo(), itemHeight = ref.itemHeight, defaultSize = ref.defaultSize;
                var threshold = Math.round(itemHeight / 2);
                var _size = _this.element.size, width = _size.width, height = _size.height;
                if (!state.persistHeight || Math.abs(state.currentSize.height - height) <= threshold) height = (_b = (_a = state.persistedSize) === null || _a === void 0 ? void 0 : _a.height) !== null && _b !== void 0 ? _b : defaultSize.height;
                if (!state.persistWidth || Math.abs(state.currentSize.width - width) <= threshold) width = (_d = (_c = state.persistedSize) === null || _c === void 0 ? void 0 : _c.width) !== null && _d !== void 0 ? _d : defaultSize.width;
                _this._persistedSize.store(new _domJs.Dimension(width, height));
            }
            // reset working state
            _this._contentWidget.unlockPreference();
            state = undefined;
        }));
        this._messageElement = _domJs.append(this.element.domNode, _domJs.$('.message'));
        this._listElement = _domJs.append(this.element.domNode, _domJs.$('.tree'));
        var details = instantiationService.createInstance(_suggestWidgetDetailsJs.SuggestDetailsWidget, this.editor);
        details.onDidClose(this.toggleDetails, this, this._disposables);
        this._details = new _suggestWidgetDetailsJs.SuggestDetailsOverlay(details, this.editor);
        var applyIconStyle = function() {
            return _this.element.domNode.classList.toggle('no-icons', !_this.editor.getOption(105 /* suggest */ ).showIcons);
        };
        applyIconStyle();
        var renderer = instantiationService.createInstance(_suggestWidgetRendererJs.ItemRenderer, this.editor);
        this._disposables.add(renderer);
        this._disposables.add(renderer.onDidToggleDetails(function() {
            return _this.toggleDetails();
        }));
        this._list = new _listWidgetJs.List('SuggestWidget', this._listElement, {
            getHeight: function(_element) {
                return _this.getLayoutInfo().itemHeight;
            },
            getTemplateId: function(_element) {
                return 'suggestion';
            }
        }, [
            renderer
        ], {
            alwaysConsumeMouseWheel: true,
            useShadows: false,
            mouseSupport: false,
            accessibilityProvider: {
                getRole: function() {
                    return 'option';
                },
                getAriaLabel: function(item) {
                    if (item.isResolved && _this._isDetailsVisible()) {
                        var _completion = item.completion, documentation = _completion.documentation, detail = _completion.detail;
                        var docs = _stringsJs.format('{0}{1}', detail || '', documentation ? typeof documentation === 'string' ? documentation : documentation.value : '');
                        return _nlsJs.localize('ariaCurrenttSuggestionReadDetails', "{0}, docs: {1}", item.textLabel, docs);
                    } else return item.textLabel;
                },
                getWidgetAriaLabel: function() {
                    return _nlsJs.localize('suggest', "Suggest");
                },
                getWidgetRole: function() {
                    return 'listbox';
                }
            }
        });
        this._status = instantiationService.createInstance(_suggestWidgetStatusJs.SuggestWidgetStatus, this.element.domNode);
        var applyStatusBarStyle = function() {
            return _this.element.domNode.classList.toggle('with-status-bar', _this.editor.getOption(105 /* suggest */ ).showStatusBar);
        };
        applyStatusBarStyle();
        this._disposables.add(_stylerJs.attachListStyler(this._list, _themeService, {
            listInactiveFocusBackground: editorSuggestWidgetSelectedBackground,
            listInactiveFocusOutline: _colorRegistryJs.activeContrastBorder
        }));
        this._disposables.add(_themeService.onDidColorThemeChange(function(t) {
            return _this._onThemeChange(t);
        }));
        this._onThemeChange(_themeService.getColorTheme());
        this._disposables.add(this._list.onMouseDown(function(e) {
            return _this._onListMouseDownOrTap(e);
        }));
        this._disposables.add(this._list.onTap(function(e) {
            return _this._onListMouseDownOrTap(e);
        }));
        this._disposables.add(this._list.onDidChangeSelection(function(e) {
            return _this._onListSelection(e);
        }));
        this._disposables.add(this._list.onDidChangeFocus(function(e) {
            return _this._onListFocus(e);
        }));
        this._disposables.add(this.editor.onDidChangeCursorSelection(function() {
            return _this._onCursorSelectionChanged();
        }));
        this._disposables.add(this.editor.onDidChangeConfiguration(function(e) {
            if (e.hasChanged(105 /* suggest */ )) {
                applyStatusBarStyle();
                applyIconStyle();
            }
        }));
        this._ctxSuggestWidgetVisible = _suggestJs.Context.Visible.bindTo(_contextKeyService);
        this._ctxSuggestWidgetDetailsVisible = _suggestJs.Context.DetailsVisible.bindTo(_contextKeyService);
        this._ctxSuggestWidgetMultipleSuggestions = _suggestJs.Context.MultipleSuggestions.bindTo(_contextKeyService);
        this._disposables.add(_domJs.addStandardDisposableListener(this._details.widget.domNode, 'keydown', function(e) {
            _this._onDetailsKeydown.fire(e);
        }));
        this._disposables.add(this.editor.onMouseDown(function(e) {
            return _this._onEditorMouseDown(e);
        }));
    }
    _helpers.createClass(SuggestWidget1, [
        {
            key: "dispose",
            value: function dispose() {
                var _a;
                this._details.widget.dispose();
                this._details.dispose();
                this._list.dispose();
                this._status.dispose();
                this._disposables.dispose();
                (_a = this._loadingTimeout) === null || _a === void 0 || _a.dispose();
                this._showTimeout.dispose();
                this._contentWidget.dispose();
                this.element.dispose();
            }
        },
        {
            key: "_onEditorMouseDown",
            value: function _onEditorMouseDown(mouseEvent) {
                if (this._details.widget.domNode.contains(mouseEvent.target.element)) // Clicking inside details
                this._details.widget.domNode.focus();
                else // Clicking outside details and inside suggest
                if (this.element.domNode.contains(mouseEvent.target.element)) this.editor.focus();
            }
        },
        {
            key: "_onCursorSelectionChanged",
            value: function _onCursorSelectionChanged() {
                if (this._state !== 0 /* Hidden */ ) this._contentWidget.layout();
            }
        },
        {
            key: "_onListMouseDownOrTap",
            value: function _onListMouseDownOrTap(e) {
                if (typeof e.element === 'undefined' || typeof e.index === 'undefined') return;
                // prevent stealing browser focus from the editor
                e.browserEvent.preventDefault();
                e.browserEvent.stopPropagation();
                this._select(e.element, e.index);
            }
        },
        {
            key: "_onListSelection",
            value: function _onListSelection(e) {
                if (e.elements.length) this._select(e.elements[0], e.indexes[0]);
            }
        },
        {
            key: "_select",
            value: function _select(item, index) {
                var completionModel = this._completionModel;
                if (completionModel) {
                    this._onDidSelect.fire({
                        item: item,
                        index: index,
                        model: completionModel
                    });
                    this.editor.focus();
                }
            }
        },
        {
            key: "_onThemeChange",
            value: function _onThemeChange(theme) {
                this._details.widget.borderWidth = theme.type === 'hc' ? 2 : 1;
            }
        },
        {
            key: "_onListFocus",
            value: function _onListFocus(e) {
                var _a;
                if (this._ignoreFocusEvents) return;
                if (!e.elements.length) {
                    if (this._currentSuggestionDetails) {
                        this._currentSuggestionDetails.cancel();
                        this._currentSuggestionDetails = undefined;
                        this._focusedItem = undefined;
                    }
                    this.editor.setAriaOptions({
                        activeDescendant: undefined
                    });
                    return;
                }
                if (!this._completionModel) return;
                var item = e.elements[0];
                var index = e.indexes[0];
                if (item !== this._focusedItem) {
                    var _this1 = this;
                    (_a = this._currentSuggestionDetails) === null || _a === void 0 || _a.cancel();
                    this._currentSuggestionDetails = undefined;
                    this._focusedItem = item;
                    this._list.reveal(index);
                    this._currentSuggestionDetails = _asyncJs.createCancelablePromise(function(token) {
                        return __awaiter(_this1, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                            var _this, loading, result;
                            return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                                while(1)switch(_ctx.prev = _ctx.next){
                                    case 0:
                                        _this = this;
                                        loading = _asyncJs.disposableTimeout(function() {
                                            if (_this._isDetailsVisible()) _this.showDetails(true);
                                        }, 250);
                                        token.onCancellationRequested(function() {
                                            return loading.dispose();
                                        });
                                        _ctx.next = 5;
                                        return item.resolve(token);
                                    case 5:
                                        result = _ctx.sent;
                                        loading.dispose();
                                        return _ctx.abrupt("return", result);
                                    case 8:
                                    case "end":
                                        return _ctx.stop();
                                }
                            }, _callee, this);
                        }));
                    });
                    this._currentSuggestionDetails.then(function() {
                        if (index >= _this1._list.length || item !== _this1._list.element(index)) return;
                        // item can have extra information, so re-render
                        _this1._ignoreFocusEvents = true;
                        _this1._list.splice(index, 1, [
                            item
                        ]);
                        _this1._list.setFocus([
                            index
                        ]);
                        _this1._ignoreFocusEvents = false;
                        if (_this1._isDetailsVisible()) _this1.showDetails(false);
                        else _this1.element.domNode.classList.remove('docs-side');
                        _this1.editor.setAriaOptions({
                            activeDescendant: _suggestWidgetRendererJs.getAriaId(index)
                        });
                    }).catch(_errorsJs.onUnexpectedError);
                }
                // emit an event
                this._onDidFocus.fire({
                    item: item,
                    index: index,
                    model: this._completionModel
                });
            }
        },
        {
            key: "_setState",
            value: function _setState(state) {
                if (this._state === state) return;
                this._state = state;
                this.element.domNode.classList.toggle('frozen', state === 4 /* Frozen */ );
                this.element.domNode.classList.remove('message');
                switch(state){
                    case 0 /* Hidden */ :
                        _domJs.hide(this._messageElement, this._listElement, this._status.element);
                        this._details.hide(true);
                        this._status.hide();
                        this._contentWidget.hide();
                        this._ctxSuggestWidgetVisible.reset();
                        this._ctxSuggestWidgetMultipleSuggestions.reset();
                        this._showTimeout.cancel();
                        this.element.domNode.classList.remove('visible');
                        this._list.splice(0, this._list.length);
                        this._focusedItem = undefined;
                        this._cappedHeight = undefined;
                        this._explainMode = false;
                        break;
                    case 1 /* Loading */ :
                        this.element.domNode.classList.add('message');
                        this._messageElement.textContent = SuggestWidget1.LOADING_MESSAGE;
                        _domJs.hide(this._listElement, this._status.element);
                        _domJs.show(this._messageElement);
                        this._details.hide();
                        this._show();
                        this._focusedItem = undefined;
                        break;
                    case 2 /* Empty */ :
                        this.element.domNode.classList.add('message');
                        this._messageElement.textContent = SuggestWidget1.NO_SUGGESTIONS_MESSAGE;
                        _domJs.hide(this._listElement, this._status.element);
                        _domJs.show(this._messageElement);
                        this._details.hide();
                        this._show();
                        this._focusedItem = undefined;
                        break;
                    case 3 /* Open */ :
                        _domJs.hide(this._messageElement);
                        _domJs.show(this._listElement, this._status.element);
                        this._show();
                        break;
                    case 4 /* Frozen */ :
                        _domJs.hide(this._messageElement);
                        _domJs.show(this._listElement, this._status.element);
                        this._show();
                        break;
                    case 5 /* Details */ :
                        _domJs.hide(this._messageElement);
                        _domJs.show(this._listElement, this._status.element);
                        this._details.show();
                        this._show();
                        break;
                }
            }
        },
        {
            key: "_show",
            value: function _show() {
                var _this = this;
                this._status.show();
                this._contentWidget.show();
                this._layout(this._persistedSize.restore());
                this._ctxSuggestWidgetVisible.set(true);
                this._showTimeout.cancelAndSet(function() {
                    _this.element.domNode.classList.add('visible');
                    _this._onDidShow.fire(_this);
                }, 100);
            }
        },
        {
            key: "showTriggered",
            value: function showTriggered(auto, delay) {
                var _this = this;
                if (this._state !== 0 /* Hidden */ ) return;
                this._contentWidget.setPosition(this.editor.getPosition());
                this._isAuto = !!auto;
                if (!this._isAuto) this._loadingTimeout = _asyncJs.disposableTimeout(function() {
                    return _this._setState(1 /* Loading */ );
                }, delay);
            }
        },
        {
            key: "showSuggestions",
            value: function showSuggestions(completionModel, selectionIndex, isFrozen, isAuto) {
                var _a, _b;
                this._contentWidget.setPosition(this.editor.getPosition());
                (_a = this._loadingTimeout) === null || _a === void 0 || _a.dispose();
                (_b = this._currentSuggestionDetails) === null || _b === void 0 || _b.cancel();
                this._currentSuggestionDetails = undefined;
                if (this._completionModel !== completionModel) this._completionModel = completionModel;
                if (isFrozen && this._state !== 2 /* Empty */  && this._state !== 0 /* Hidden */ ) {
                    this._setState(4 /* Frozen */ );
                    return;
                }
                var visibleCount = this._completionModel.items.length;
                var isEmpty = visibleCount === 0;
                this._ctxSuggestWidgetMultipleSuggestions.set(visibleCount > 1);
                if (isEmpty) {
                    this._setState(isAuto ? 0 /* Hidden */  : 2 /* Empty */ );
                    this._completionModel = undefined;
                    return;
                }
                this._focusedItem = undefined;
                this._list.splice(0, this._list.length, this._completionModel.items);
                this._setState(isFrozen ? 4 /* Frozen */  : 3 /* Open */ );
                this._list.reveal(selectionIndex, 0);
                this._list.setFocus([
                    selectionIndex
                ]);
                this._layout(this.element.size);
                // Reset focus border
                this._details.widget.domNode.classList.remove('focused');
            }
        },
        {
            key: "selectNextPage",
            value: function selectNextPage() {
                switch(this._state){
                    case 0 /* Hidden */ :
                        return false;
                    case 5 /* Details */ :
                        this._details.widget.pageDown();
                        return true;
                    case 1 /* Loading */ :
                        return !this._isAuto;
                    default:
                        this._list.focusNextPage();
                        return true;
                }
            }
        },
        {
            key: "selectNext",
            value: function selectNext() {
                switch(this._state){
                    case 0 /* Hidden */ :
                        return false;
                    case 1 /* Loading */ :
                        return !this._isAuto;
                    default:
                        this._list.focusNext(1, true);
                        return true;
                }
            }
        },
        {
            key: "selectLast",
            value: function selectLast() {
                switch(this._state){
                    case 0 /* Hidden */ :
                        return false;
                    case 5 /* Details */ :
                        this._details.widget.scrollBottom();
                        return true;
                    case 1 /* Loading */ :
                        return !this._isAuto;
                    default:
                        this._list.focusLast();
                        return true;
                }
            }
        },
        {
            key: "selectPreviousPage",
            value: function selectPreviousPage() {
                switch(this._state){
                    case 0 /* Hidden */ :
                        return false;
                    case 5 /* Details */ :
                        this._details.widget.pageUp();
                        return true;
                    case 1 /* Loading */ :
                        return !this._isAuto;
                    default:
                        this._list.focusPreviousPage();
                        return true;
                }
            }
        },
        {
            key: "selectPrevious",
            value: function selectPrevious() {
                switch(this._state){
                    case 0 /* Hidden */ :
                        return false;
                    case 1 /* Loading */ :
                        return !this._isAuto;
                    default:
                        this._list.focusPrevious(1, true);
                        return false;
                }
            }
        },
        {
            key: "selectFirst",
            value: function selectFirst() {
                switch(this._state){
                    case 0 /* Hidden */ :
                        return false;
                    case 5 /* Details */ :
                        this._details.widget.scrollTop();
                        return true;
                    case 1 /* Loading */ :
                        return !this._isAuto;
                    default:
                        this._list.focusFirst();
                        return true;
                }
            }
        },
        {
            key: "getFocusedItem",
            value: function getFocusedItem() {
                if (this._state !== 0 /* Hidden */  && this._state !== 2 /* Empty */  && this._state !== 1 /* Loading */  && this._completionModel) return {
                    item: this._list.getFocusedElements()[0],
                    index: this._list.getFocus()[0],
                    model: this._completionModel
                };
                return undefined;
            }
        },
        {
            key: "toggleDetailsFocus",
            value: function toggleDetailsFocus() {
                if (this._state === 5 /* Details */ ) {
                    this._setState(3 /* Open */ );
                    this._details.widget.domNode.classList.remove('focused');
                } else if (this._state === 3 /* Open */  && this._isDetailsVisible()) {
                    this._setState(5 /* Details */ );
                    this._details.widget.domNode.classList.add('focused');
                }
            }
        },
        {
            key: "toggleDetails",
            value: function toggleDetails() {
                if (this._isDetailsVisible()) {
                    // hide details widget
                    this._ctxSuggestWidgetDetailsVisible.set(false);
                    this._setDetailsVisible(false);
                    this._details.hide();
                    this.element.domNode.classList.remove('shows-details');
                } else if ((_suggestWidgetDetailsJs.canExpandCompletionItem(this._list.getFocusedElements()[0]) || this._explainMode) && (this._state === 3 /* Open */  || this._state === 5 /* Details */  || this._state === 4 /* Frozen */ )) {
                    // show details widget (iff possible)
                    this._ctxSuggestWidgetDetailsVisible.set(true);
                    this._setDetailsVisible(true);
                    this.showDetails(false);
                }
            }
        },
        {
            key: "showDetails",
            value: function showDetails(loading) {
                this._details.show();
                if (loading) this._details.widget.renderLoading();
                else this._details.widget.renderItem(this._list.getFocusedElements()[0], this._explainMode);
                this._positionDetails();
                this.editor.focus();
                this.element.domNode.classList.add('shows-details');
            }
        },
        {
            key: "toggleExplainMode",
            value: function toggleExplainMode() {
                if (this._list.getFocusedElements()[0]) {
                    this._explainMode = !this._explainMode;
                    if (!this._isDetailsVisible()) this.toggleDetails();
                    else this.showDetails(false);
                }
            }
        },
        {
            key: "resetPersistedSize",
            value: function resetPersistedSize() {
                this._persistedSize.reset();
            }
        },
        {
            key: "hideWidget",
            value: function hideWidget() {
                var _a;
                (_a = this._loadingTimeout) === null || _a === void 0 || _a.dispose();
                this._setState(0 /* Hidden */ );
                this._onDidHide.fire(this);
                this.element.clearSashHoverState();
                // ensure that a reasonable widget height is persisted so that
                // accidential "resize-to-single-items" cases aren't happening
                var dim = this._persistedSize.restore();
                var minPersistedHeight = Math.ceil(this.getLayoutInfo().itemHeight * 4.3);
                if (dim && dim.height < minPersistedHeight) this._persistedSize.store(dim.with(undefined, minPersistedHeight));
            }
        },
        {
            key: "isFrozen",
            value: function isFrozen() {
                return this._state === 4 /* Frozen */ ;
            }
        },
        {
            key: "_afterRender",
            value: function _afterRender(position) {
                if (position === null) {
                    if (this._isDetailsVisible()) this._details.hide(); //todo@jrieken soft-hide
                    return;
                }
                if (this._state === 2 /* Empty */  || this._state === 1 /* Loading */ ) // no special positioning when widget isn't showing list
                return;
                if (this._isDetailsVisible()) this._details.show();
                this._positionDetails();
            }
        },
        {
            key: "_layout",
            value: function _layout(size) {
                var _a, _b, _c;
                if (!this.editor.hasModel()) return;
                if (!this.editor.getDomNode()) // happens when running tests
                return;
                var bodyBox = _domJs.getClientArea(document.body);
                var info = this.getLayoutInfo();
                if (!size) size = info.defaultSize;
                var height = size.height;
                var width = size.width;
                // status bar
                this._status.element.style.lineHeight = "".concat(info.itemHeight, "px");
                if (this._state === 2 /* Empty */  || this._state === 1 /* Loading */ ) {
                    // showing a message only
                    height = info.itemHeight + info.borderHeight;
                    width = info.defaultSize.width / 2;
                    this.element.enableSashes(false, false, false, false);
                    this.element.minSize = this.element.maxSize = new _domJs.Dimension(width, height);
                    this._contentWidget.setPreference(2 /* BELOW */ );
                } else {
                    // showing items
                    // width math
                    var maxWidth = bodyBox.width - info.borderHeight - 2 * info.horizontalPadding;
                    if (width > maxWidth) width = maxWidth;
                    var preferredWidth = this._completionModel ? this._completionModel.stats.pLabelLen * info.typicalHalfwidthCharacterWidth : width;
                    // height math
                    var fullHeight = info.statusBarHeight + this._list.contentHeight + info.borderHeight;
                    var minHeight = info.itemHeight + info.statusBarHeight;
                    var editorBox = _domJs.getDomNodePagePosition(this.editor.getDomNode());
                    var cursorBox = this.editor.getScrolledVisiblePosition(this.editor.getPosition());
                    var cursorBottom = editorBox.top + cursorBox.top + cursorBox.height;
                    var maxHeightBelow = Math.min(bodyBox.height - cursorBottom - info.verticalPadding, fullHeight);
                    var availableSpaceAbove = editorBox.top + cursorBox.top - info.verticalPadding;
                    var maxHeightAbove = Math.min(availableSpaceAbove, fullHeight);
                    var maxHeight = Math.min(Math.max(maxHeightAbove, maxHeightBelow) + info.borderHeight, fullHeight);
                    if (height === ((_a = this._cappedHeight) === null || _a === void 0 ? void 0 : _a.capped)) // Restore the old (wanted) height when the current
                    // height is capped to fit
                    height = this._cappedHeight.wanted;
                    if (height < minHeight) height = minHeight;
                    if (height > maxHeight) height = maxHeight;
                    var forceRenderingAboveRequiredSpace = 150;
                    if (height > maxHeightBelow || this._forceRenderingAbove && availableSpaceAbove > forceRenderingAboveRequiredSpace) {
                        this._contentWidget.setPreference(1 /* ABOVE */ );
                        this.element.enableSashes(true, true, false, false);
                        maxHeight = maxHeightAbove;
                    } else {
                        this._contentWidget.setPreference(2 /* BELOW */ );
                        this.element.enableSashes(false, true, true, false);
                        maxHeight = maxHeightBelow;
                    }
                    this.element.preferredSize = new _domJs.Dimension(preferredWidth, info.defaultSize.height);
                    this.element.maxSize = new _domJs.Dimension(maxWidth, maxHeight);
                    this.element.minSize = new _domJs.Dimension(220, minHeight);
                    // Know when the height was capped to fit and remember
                    // the wanted height for later. This is required when going
                    // left to widen suggestions.
                    this._cappedHeight = height === fullHeight ? {
                        wanted: (_c = (_b = this._cappedHeight) === null || _b === void 0 ? void 0 : _b.wanted) !== null && _c !== void 0 ? _c : size.height,
                        capped: height
                    } : undefined;
                }
                this._resize(width, height);
            }
        },
        {
            key: "_resize",
            value: function _resize(width, height) {
                var _maxSize = this.element.maxSize, maxWidth = _maxSize.width, maxHeight = _maxSize.height;
                width = Math.min(maxWidth, width);
                height = Math.min(maxHeight, height);
                var statusBarHeight = this.getLayoutInfo().statusBarHeight;
                this._list.layout(height - statusBarHeight, width);
                this._listElement.style.height = "".concat(height - statusBarHeight, "px");
                this.element.layout(height, width);
                this._contentWidget.layout();
                this._positionDetails();
            }
        },
        {
            key: "_positionDetails",
            value: function _positionDetails() {
                var _a;
                if (this._isDetailsVisible()) this._details.placeAtAnchor(this.element.domNode, ((_a = this._contentWidget.getPosition()) === null || _a === void 0 ? void 0 : _a.preference[0]) === 2 /* BELOW */ );
            }
        },
        {
            key: "getLayoutInfo",
            value: function getLayoutInfo() {
                var fontInfo = this.editor.getOption(43 /* fontInfo */ );
                var itemHeight = _numbersJs.clamp(this.editor.getOption(107 /* suggestLineHeight */ ) || fontInfo.lineHeight, 8, 1000);
                var statusBarHeight = !this.editor.getOption(105 /* suggest */ ).showStatusBar || this._state === 2 /* Empty */  || this._state === 1 /* Loading */  ? 0 : itemHeight;
                var borderWidth = this._details.widget.borderWidth;
                var borderHeight = 2 * borderWidth;
                return {
                    itemHeight: itemHeight,
                    statusBarHeight: statusBarHeight,
                    borderWidth: borderWidth,
                    borderHeight: borderHeight,
                    typicalHalfwidthCharacterWidth: fontInfo.typicalHalfwidthCharacterWidth,
                    verticalPadding: 22,
                    horizontalPadding: 14,
                    defaultSize: new _domJs.Dimension(430, statusBarHeight + 12 * itemHeight + borderHeight)
                };
            }
        },
        {
            key: "_isDetailsVisible",
            value: function _isDetailsVisible() {
                return this._storageService.getBoolean('expandSuggestionDocs', 0 /* GLOBAL */ , false);
            }
        },
        {
            key: "_setDetailsVisible",
            value: function _setDetailsVisible(value) {
                this._storageService.store('expandSuggestionDocs', value, 0 /* GLOBAL */ , 0 /* USER */ );
            }
        },
        {
            key: "forceRenderingAbove",
            value: function forceRenderingAbove() {
                if (!this._forceRenderingAbove) {
                    this._forceRenderingAbove = true;
                    this._layout(this._persistedSize.restore());
                }
            }
        },
        {
            key: "stopForceRenderingAbove",
            value: function stopForceRenderingAbove() {
                this._forceRenderingAbove = false;
            }
        }
    ]);
    return SuggestWidget1;
}();
SuggestWidget.LOADING_MESSAGE = _nlsJs.localize('suggestWidget.loading', "Loading...");
SuggestWidget.NO_SUGGESTIONS_MESSAGE = _nlsJs.localize('suggestWidget.noSuggestions', "No suggestions.");
SuggestWidget = __decorate([
    __param(1, _storageJs.IStorageService),
    __param(2, _contextkeyJs.IContextKeyService),
    __param(3, _themeServiceJs.IThemeService),
    __param(4, _instantiationJs.IInstantiationService)
], SuggestWidget);
var SuggestContentWidget = /*#__PURE__*/ function() {
    "use strict";
    function SuggestContentWidget(_widget, _editor) {
        _helpers.classCallCheck(this, SuggestContentWidget);
        this._widget = _widget;
        this._editor = _editor;
        this.allowEditorOverflow = true;
        this.suppressMouseDown = false;
        this._preferenceLocked = false;
        this._added = false;
        this._hidden = false;
    }
    _helpers.createClass(SuggestContentWidget, [
        {
            key: "dispose",
            value: function dispose() {
                if (this._added) {
                    this._added = false;
                    this._editor.removeContentWidget(this);
                }
            }
        },
        {
            key: "getId",
            value: function getId() {
                return 'editor.widget.suggestWidget';
            }
        },
        {
            key: "getDomNode",
            value: function getDomNode() {
                return this._widget.element.domNode;
            }
        },
        {
            key: "show",
            value: function show() {
                this._hidden = false;
                if (!this._added) {
                    this._added = true;
                    this._editor.addContentWidget(this);
                }
            }
        },
        {
            key: "hide",
            value: function hide() {
                if (!this._hidden) {
                    this._hidden = true;
                    this.layout();
                }
            }
        },
        {
            key: "layout",
            value: function layout() {
                this._editor.layoutContentWidget(this);
            }
        },
        {
            key: "getPosition",
            value: function getPosition() {
                if (this._hidden || !this._position || !this._preference) return null;
                return {
                    position: this._position,
                    preference: [
                        this._preference
                    ]
                };
            }
        },
        {
            key: "beforeRender",
            value: function beforeRender() {
                var _size = this._widget.element.size, height = _size.height, width = _size.width;
                var ref = this._widget.getLayoutInfo(), borderWidth = ref.borderWidth, horizontalPadding = ref.horizontalPadding;
                return new _domJs.Dimension(width + 2 * borderWidth + horizontalPadding, height + 2 * borderWidth);
            }
        },
        {
            key: "afterRender",
            value: function afterRender(position) {
                this._widget._afterRender(position);
            }
        },
        {
            key: "setPreference",
            value: function setPreference(preference) {
                if (!this._preferenceLocked) this._preference = preference;
            }
        },
        {
            key: "lockPreference",
            value: function lockPreference() {
                this._preferenceLocked = true;
            }
        },
        {
            key: "unlockPreference",
            value: function unlockPreference() {
                this._preferenceLocked = false;
            }
        },
        {
            key: "setPosition",
            value: function setPosition(position) {
                this._position = position;
            }
        }
    ]);
    return SuggestContentWidget;
}();

},{"@swc/helpers":"erO4s","regenerator-runtime":"12Ae8","../../../base/browser/dom.js":"bxmlc","../../../base/browser/ui/codicons/codiconStyles.js":"bu4zl","../../../base/browser/ui/list/listWidget.js":"1Hgg1","../../../base/common/async.js":"kMhSh","../../../base/common/errors.js":"afm4i","../../../base/common/event.js":"9IBcK","../../../base/common/lifecycle.js":"bcbPy","../../../base/common/numbers.js":"hOP9I","../../../base/common/strings.js":"jsb6w","./media/suggest.css":"1h4ZC","../../browser/widget/embeddedCodeEditorWidget.js":"e432u","./suggestWidgetStatus.js":"1UeHP","../symbolIcons/symbolIcons.js":"jk3Ol","../../../nls.js":"9djYb","../../../platform/contextkey/common/contextkey.js":"5cjav","../../../platform/instantiation/common/instantiation.js":"9ABZB","../../../platform/storage/common/storage.js":"1m95n","../../../platform/theme/common/colorRegistry.js":"lKtxS","../../../platform/theme/common/styler.js":"lssom","../../../platform/theme/common/themeService.js":"kE7QB","./resizable.js":"aAPtI","./suggest.js":"31aA1","./suggestWidgetDetails.js":"4lFYl","./suggestWidgetRenderer.js":"2y7Dk","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"1h4ZC":[function() {},{}],"1UeHP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SuggestWidgetStatus", function() {
    return SuggestWidgetStatus;
});
var _helpers = require("@swc/helpers");
var _domJs = require("../../../base/browser/dom.js");
var _actionbarJs = require("../../../base/browser/ui/actionbar/actionbar.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _suggestJs = require("./suggest.js");
var _nlsJs = require("../../../nls.js");
var _menuEntryActionViewItemJs = require("../../../platform/actions/browser/menuEntryActionViewItem.js");
var _actionsJs = require("../../../platform/actions/common/actions.js");
var _contextkeyJs = require("../../../platform/contextkey/common/contextkey.js");
var _instantiationJs = require("../../../platform/instantiation/common/instantiation.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var StatusBarViewItem = /*#__PURE__*/ function(MenuEntryActionViewItem) {
    "use strict";
    _helpers.inherits(StatusBarViewItem, MenuEntryActionViewItem);
    var _super = _helpers.createSuper(StatusBarViewItem);
    function StatusBarViewItem() {
        _helpers.classCallCheck(this, StatusBarViewItem);
        return _super.apply(this, arguments);
    }
    _helpers.createClass(StatusBarViewItem, [
        {
            key: "updateLabel",
            value: function updateLabel() {
                var kb = this._keybindingService.lookupKeybinding(this._action.id, this._contextKeyService);
                if (!kb) return _helpers.get(_helpers.getPrototypeOf(StatusBarViewItem.prototype), "updateLabel", this).call(this);
                if (this.label) this.label.textContent = _nlsJs.localize('ddd', '{0} ({1})', this._action.label, StatusBarViewItem.symbolPrintEnter(kb));
            }
        }
    ], [
        {
            key: "symbolPrintEnter",
            value: function symbolPrintEnter(kb) {
                var _a;
                return (_a = kb.getLabel()) === null || _a === void 0 ? void 0 : _a.replace(/\benter\b/gi, '\u23CE');
            }
        }
    ]);
    return StatusBarViewItem;
}(_menuEntryActionViewItemJs.MenuEntryActionViewItem);
var SuggestWidgetStatus = /*#__PURE__*/ function() {
    "use strict";
    function SuggestWidgetStatus1(container, instantiationService, _menuService, _contextKeyService) {
        _helpers.classCallCheck(this, SuggestWidgetStatus1);
        this._menuService = _menuService;
        this._contextKeyService = _contextKeyService;
        this._menuDisposables = new _lifecycleJs.DisposableStore();
        this.element = _domJs.append(container, _domJs.$('.suggest-status-bar'));
        var actionViewItemProvider = function(action) {
            return action instanceof _actionsJs.MenuItemAction ? instantiationService.createInstance(StatusBarViewItem, action, undefined) : undefined;
        };
        this._leftActions = new _actionbarJs.ActionBar(this.element, {
            actionViewItemProvider: actionViewItemProvider
        });
        this._rightActions = new _actionbarJs.ActionBar(this.element, {
            actionViewItemProvider: actionViewItemProvider
        });
        this._leftActions.domNode.classList.add('left');
        this._rightActions.domNode.classList.add('right');
    }
    _helpers.createClass(SuggestWidgetStatus1, [
        {
            key: "dispose",
            value: function dispose() {
                this._menuDisposables.dispose();
                this.element.remove();
            }
        },
        {
            key: "show",
            value: function show() {
                var _this = this;
                var menu = this._menuService.createMenu(_suggestJs.suggestWidgetStatusbarMenu, this._contextKeyService);
                var renderMenu = function() {
                    var _left, _right;
                    var left = [];
                    var right = [];
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator = menu.getActions()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var _value = _helpers.slicedToArray(_step.value, 2), group = _value[0], actions = _value[1];
                            if (group === 'left') (_left = left).push.apply(_left, _helpers.toConsumableArray(actions));
                            else (_right = right).push.apply(_right, _helpers.toConsumableArray(actions));
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    _this._leftActions.clear();
                    _this._leftActions.push(left);
                    _this._rightActions.clear();
                    _this._rightActions.push(right);
                };
                this._menuDisposables.add(menu.onDidChange(function() {
                    return renderMenu();
                }));
                this._menuDisposables.add(menu);
            }
        },
        {
            key: "hide",
            value: function hide() {
                this._menuDisposables.clear();
            }
        }
    ]);
    return SuggestWidgetStatus1;
}();
SuggestWidgetStatus = __decorate([
    __param(1, _instantiationJs.IInstantiationService),
    __param(2, _actionsJs.IMenuService),
    __param(3, _contextkeyJs.IContextKeyService)
], SuggestWidgetStatus);

},{"@swc/helpers":"erO4s","../../../base/browser/dom.js":"bxmlc","../../../base/browser/ui/actionbar/actionbar.js":"1SkD3","../../../base/common/lifecycle.js":"bcbPy","./suggest.js":"31aA1","../../../nls.js":"9djYb","../../../platform/actions/browser/menuEntryActionViewItem.js":"jm3Jq","../../../platform/actions/common/actions.js":"1qoxQ","../../../platform/contextkey/common/contextkey.js":"5cjav","../../../platform/instantiation/common/instantiation.js":"9ABZB","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"jk3Ol":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SYMBOL_ICON_ARRAY_FOREGROUND", function() {
    return SYMBOL_ICON_ARRAY_FOREGROUND;
});
parcelHelpers.export(exports, "SYMBOL_ICON_BOOLEAN_FOREGROUND", function() {
    return SYMBOL_ICON_BOOLEAN_FOREGROUND;
});
parcelHelpers.export(exports, "SYMBOL_ICON_CLASS_FOREGROUND", function() {
    return SYMBOL_ICON_CLASS_FOREGROUND;
});
parcelHelpers.export(exports, "SYMBOL_ICON_COLOR_FOREGROUND", function() {
    return SYMBOL_ICON_COLOR_FOREGROUND;
});
parcelHelpers.export(exports, "SYMBOL_ICON_CONSTANT_FOREGROUND", function() {
    return SYMBOL_ICON_CONSTANT_FOREGROUND;
});
parcelHelpers.export(exports, "SYMBOL_ICON_CONSTRUCTOR_FOREGROUND", function() {
    return SYMBOL_ICON_CONSTRUCTOR_FOREGROUND;
});
parcelHelpers.export(exports, "SYMBOL_ICON_ENUMERATOR_FOREGROUND", function() {
    return SYMBOL_ICON_ENUMERATOR_FOREGROUND;
});
parcelHelpers.export(exports, "SYMBOL_ICON_ENUMERATOR_MEMBER_FOREGROUND", function() {
    return SYMBOL_ICON_ENUMERATOR_MEMBER_FOREGROUND;
});
parcelHelpers.export(exports, "SYMBOL_ICON_EVENT_FOREGROUND", function() {
    return SYMBOL_ICON_EVENT_FOREGROUND;
});
parcelHelpers.export(exports, "SYMBOL_ICON_FIELD_FOREGROUND", function() {
    return SYMBOL_ICON_FIELD_FOREGROUND;
});
parcelHelpers.export(exports, "SYMBOL_ICON_FILE_FOREGROUND", function() {
    return SYMBOL_ICON_FILE_FOREGROUND;
});
parcelHelpers.export(exports, "SYMBOL_ICON_FOLDER_FOREGROUND", function() {
    return SYMBOL_ICON_FOLDER_FOREGROUND;
});
parcelHelpers.export(exports, "SYMBOL_ICON_FUNCTION_FOREGROUND", function() {
    return SYMBOL_ICON_FUNCTION_FOREGROUND;
});
parcelHelpers.export(exports, "SYMBOL_ICON_INTERFACE_FOREGROUND", function() {
    return SYMBOL_ICON_INTERFACE_FOREGROUND;
});
parcelHelpers.export(exports, "SYMBOL_ICON_KEY_FOREGROUND", function() {
    return SYMBOL_ICON_KEY_FOREGROUND;
});
parcelHelpers.export(exports, "SYMBOL_ICON_KEYWORD_FOREGROUND", function() {
    return SYMBOL_ICON_KEYWORD_FOREGROUND;
});
parcelHelpers.export(exports, "SYMBOL_ICON_METHOD_FOREGROUND", function() {
    return SYMBOL_ICON_METHOD_FOREGROUND;
});
parcelHelpers.export(exports, "SYMBOL_ICON_MODULE_FOREGROUND", function() {
    return SYMBOL_ICON_MODULE_FOREGROUND;
});
parcelHelpers.export(exports, "SYMBOL_ICON_NAMESPACE_FOREGROUND", function() {
    return SYMBOL_ICON_NAMESPACE_FOREGROUND;
});
parcelHelpers.export(exports, "SYMBOL_ICON_NULL_FOREGROUND", function() {
    return SYMBOL_ICON_NULL_FOREGROUND;
});
parcelHelpers.export(exports, "SYMBOL_ICON_NUMBER_FOREGROUND", function() {
    return SYMBOL_ICON_NUMBER_FOREGROUND;
});
parcelHelpers.export(exports, "SYMBOL_ICON_OBJECT_FOREGROUND", function() {
    return SYMBOL_ICON_OBJECT_FOREGROUND;
});
parcelHelpers.export(exports, "SYMBOL_ICON_OPERATOR_FOREGROUND", function() {
    return SYMBOL_ICON_OPERATOR_FOREGROUND;
});
parcelHelpers.export(exports, "SYMBOL_ICON_PACKAGE_FOREGROUND", function() {
    return SYMBOL_ICON_PACKAGE_FOREGROUND;
});
parcelHelpers.export(exports, "SYMBOL_ICON_PROPERTY_FOREGROUND", function() {
    return SYMBOL_ICON_PROPERTY_FOREGROUND;
});
parcelHelpers.export(exports, "SYMBOL_ICON_REFERENCE_FOREGROUND", function() {
    return SYMBOL_ICON_REFERENCE_FOREGROUND;
});
parcelHelpers.export(exports, "SYMBOL_ICON_SNIPPET_FOREGROUND", function() {
    return SYMBOL_ICON_SNIPPET_FOREGROUND;
});
parcelHelpers.export(exports, "SYMBOL_ICON_STRING_FOREGROUND", function() {
    return SYMBOL_ICON_STRING_FOREGROUND;
});
parcelHelpers.export(exports, "SYMBOL_ICON_STRUCT_FOREGROUND", function() {
    return SYMBOL_ICON_STRUCT_FOREGROUND;
});
parcelHelpers.export(exports, "SYMBOL_ICON_TEXT_FOREGROUND", function() {
    return SYMBOL_ICON_TEXT_FOREGROUND;
});
parcelHelpers.export(exports, "SYMBOL_ICON_TYPEPARAMETER_FOREGROUND", function() {
    return SYMBOL_ICON_TYPEPARAMETER_FOREGROUND;
});
parcelHelpers.export(exports, "SYMBOL_ICON_UNIT_FOREGROUND", function() {
    return SYMBOL_ICON_UNIT_FOREGROUND;
});
parcelHelpers.export(exports, "SYMBOL_ICON_VARIABLE_FOREGROUND", function() {
    return SYMBOL_ICON_VARIABLE_FOREGROUND;
});
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _codiconsJs = require("../../../base/common/codicons.js");
var _nlsJs = require("../../../nls.js");
var _colorRegistryJs = require("../../../platform/theme/common/colorRegistry.js");
var _themeServiceJs = require("../../../platform/theme/common/themeService.js");
var SYMBOL_ICON_ARRAY_FOREGROUND = _colorRegistryJs.registerColor('symbolIcon.arrayForeground', {
    dark: _colorRegistryJs.foreground,
    light: _colorRegistryJs.foreground,
    hc: _colorRegistryJs.foreground
}, _nlsJs.localize('symbolIcon.arrayForeground', 'The foreground color for array symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
var SYMBOL_ICON_BOOLEAN_FOREGROUND = _colorRegistryJs.registerColor('symbolIcon.booleanForeground', {
    dark: _colorRegistryJs.foreground,
    light: _colorRegistryJs.foreground,
    hc: _colorRegistryJs.foreground
}, _nlsJs.localize('symbolIcon.booleanForeground', 'The foreground color for boolean symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
var SYMBOL_ICON_CLASS_FOREGROUND = _colorRegistryJs.registerColor('symbolIcon.classForeground', {
    dark: '#EE9D28',
    light: '#D67E00',
    hc: '#EE9D28'
}, _nlsJs.localize('symbolIcon.classForeground', 'The foreground color for class symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
var SYMBOL_ICON_COLOR_FOREGROUND = _colorRegistryJs.registerColor('symbolIcon.colorForeground', {
    dark: _colorRegistryJs.foreground,
    light: _colorRegistryJs.foreground,
    hc: _colorRegistryJs.foreground
}, _nlsJs.localize('symbolIcon.colorForeground', 'The foreground color for color symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
var SYMBOL_ICON_CONSTANT_FOREGROUND = _colorRegistryJs.registerColor('symbolIcon.constantForeground', {
    dark: _colorRegistryJs.foreground,
    light: _colorRegistryJs.foreground,
    hc: _colorRegistryJs.foreground
}, _nlsJs.localize('symbolIcon.constantForeground', 'The foreground color for constant symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
var SYMBOL_ICON_CONSTRUCTOR_FOREGROUND = _colorRegistryJs.registerColor('symbolIcon.constructorForeground', {
    dark: '#B180D7',
    light: '#652D90',
    hc: '#B180D7'
}, _nlsJs.localize('symbolIcon.constructorForeground', 'The foreground color for constructor symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
var SYMBOL_ICON_ENUMERATOR_FOREGROUND = _colorRegistryJs.registerColor('symbolIcon.enumeratorForeground', {
    dark: '#EE9D28',
    light: '#D67E00',
    hc: '#EE9D28'
}, _nlsJs.localize('symbolIcon.enumeratorForeground', 'The foreground color for enumerator symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
var SYMBOL_ICON_ENUMERATOR_MEMBER_FOREGROUND = _colorRegistryJs.registerColor('symbolIcon.enumeratorMemberForeground', {
    dark: '#75BEFF',
    light: '#007ACC',
    hc: '#75BEFF'
}, _nlsJs.localize('symbolIcon.enumeratorMemberForeground', 'The foreground color for enumerator member symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
var SYMBOL_ICON_EVENT_FOREGROUND = _colorRegistryJs.registerColor('symbolIcon.eventForeground', {
    dark: '#EE9D28',
    light: '#D67E00',
    hc: '#EE9D28'
}, _nlsJs.localize('symbolIcon.eventForeground', 'The foreground color for event symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
var SYMBOL_ICON_FIELD_FOREGROUND = _colorRegistryJs.registerColor('symbolIcon.fieldForeground', {
    dark: '#75BEFF',
    light: '#007ACC',
    hc: '#75BEFF'
}, _nlsJs.localize('symbolIcon.fieldForeground', 'The foreground color for field symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
var SYMBOL_ICON_FILE_FOREGROUND = _colorRegistryJs.registerColor('symbolIcon.fileForeground', {
    dark: _colorRegistryJs.foreground,
    light: _colorRegistryJs.foreground,
    hc: _colorRegistryJs.foreground
}, _nlsJs.localize('symbolIcon.fileForeground', 'The foreground color for file symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
var SYMBOL_ICON_FOLDER_FOREGROUND = _colorRegistryJs.registerColor('symbolIcon.folderForeground', {
    dark: _colorRegistryJs.foreground,
    light: _colorRegistryJs.foreground,
    hc: _colorRegistryJs.foreground
}, _nlsJs.localize('symbolIcon.folderForeground', 'The foreground color for folder symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
var SYMBOL_ICON_FUNCTION_FOREGROUND = _colorRegistryJs.registerColor('symbolIcon.functionForeground', {
    dark: '#B180D7',
    light: '#652D90',
    hc: '#B180D7'
}, _nlsJs.localize('symbolIcon.functionForeground', 'The foreground color for function symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
var SYMBOL_ICON_INTERFACE_FOREGROUND = _colorRegistryJs.registerColor('symbolIcon.interfaceForeground', {
    dark: '#75BEFF',
    light: '#007ACC',
    hc: '#75BEFF'
}, _nlsJs.localize('symbolIcon.interfaceForeground', 'The foreground color for interface symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
var SYMBOL_ICON_KEY_FOREGROUND = _colorRegistryJs.registerColor('symbolIcon.keyForeground', {
    dark: _colorRegistryJs.foreground,
    light: _colorRegistryJs.foreground,
    hc: _colorRegistryJs.foreground
}, _nlsJs.localize('symbolIcon.keyForeground', 'The foreground color for key symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
var SYMBOL_ICON_KEYWORD_FOREGROUND = _colorRegistryJs.registerColor('symbolIcon.keywordForeground', {
    dark: _colorRegistryJs.foreground,
    light: _colorRegistryJs.foreground,
    hc: _colorRegistryJs.foreground
}, _nlsJs.localize('symbolIcon.keywordForeground', 'The foreground color for keyword symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
var SYMBOL_ICON_METHOD_FOREGROUND = _colorRegistryJs.registerColor('symbolIcon.methodForeground', {
    dark: '#B180D7',
    light: '#652D90',
    hc: '#B180D7'
}, _nlsJs.localize('symbolIcon.methodForeground', 'The foreground color for method symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
var SYMBOL_ICON_MODULE_FOREGROUND = _colorRegistryJs.registerColor('symbolIcon.moduleForeground', {
    dark: _colorRegistryJs.foreground,
    light: _colorRegistryJs.foreground,
    hc: _colorRegistryJs.foreground
}, _nlsJs.localize('symbolIcon.moduleForeground', 'The foreground color for module symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
var SYMBOL_ICON_NAMESPACE_FOREGROUND = _colorRegistryJs.registerColor('symbolIcon.namespaceForeground', {
    dark: _colorRegistryJs.foreground,
    light: _colorRegistryJs.foreground,
    hc: _colorRegistryJs.foreground
}, _nlsJs.localize('symbolIcon.namespaceForeground', 'The foreground color for namespace symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
var SYMBOL_ICON_NULL_FOREGROUND = _colorRegistryJs.registerColor('symbolIcon.nullForeground', {
    dark: _colorRegistryJs.foreground,
    light: _colorRegistryJs.foreground,
    hc: _colorRegistryJs.foreground
}, _nlsJs.localize('symbolIcon.nullForeground', 'The foreground color for null symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
var SYMBOL_ICON_NUMBER_FOREGROUND = _colorRegistryJs.registerColor('symbolIcon.numberForeground', {
    dark: _colorRegistryJs.foreground,
    light: _colorRegistryJs.foreground,
    hc: _colorRegistryJs.foreground
}, _nlsJs.localize('symbolIcon.numberForeground', 'The foreground color for number symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
var SYMBOL_ICON_OBJECT_FOREGROUND = _colorRegistryJs.registerColor('symbolIcon.objectForeground', {
    dark: _colorRegistryJs.foreground,
    light: _colorRegistryJs.foreground,
    hc: _colorRegistryJs.foreground
}, _nlsJs.localize('symbolIcon.objectForeground', 'The foreground color for object symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
var SYMBOL_ICON_OPERATOR_FOREGROUND = _colorRegistryJs.registerColor('symbolIcon.operatorForeground', {
    dark: _colorRegistryJs.foreground,
    light: _colorRegistryJs.foreground,
    hc: _colorRegistryJs.foreground
}, _nlsJs.localize('symbolIcon.operatorForeground', 'The foreground color for operator symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
var SYMBOL_ICON_PACKAGE_FOREGROUND = _colorRegistryJs.registerColor('symbolIcon.packageForeground', {
    dark: _colorRegistryJs.foreground,
    light: _colorRegistryJs.foreground,
    hc: _colorRegistryJs.foreground
}, _nlsJs.localize('symbolIcon.packageForeground', 'The foreground color for package symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
var SYMBOL_ICON_PROPERTY_FOREGROUND = _colorRegistryJs.registerColor('symbolIcon.propertyForeground', {
    dark: _colorRegistryJs.foreground,
    light: _colorRegistryJs.foreground,
    hc: _colorRegistryJs.foreground
}, _nlsJs.localize('symbolIcon.propertyForeground', 'The foreground color for property symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
var SYMBOL_ICON_REFERENCE_FOREGROUND = _colorRegistryJs.registerColor('symbolIcon.referenceForeground', {
    dark: _colorRegistryJs.foreground,
    light: _colorRegistryJs.foreground,
    hc: _colorRegistryJs.foreground
}, _nlsJs.localize('symbolIcon.referenceForeground', 'The foreground color for reference symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
var SYMBOL_ICON_SNIPPET_FOREGROUND = _colorRegistryJs.registerColor('symbolIcon.snippetForeground', {
    dark: _colorRegistryJs.foreground,
    light: _colorRegistryJs.foreground,
    hc: _colorRegistryJs.foreground
}, _nlsJs.localize('symbolIcon.snippetForeground', 'The foreground color for snippet symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
var SYMBOL_ICON_STRING_FOREGROUND = _colorRegistryJs.registerColor('symbolIcon.stringForeground', {
    dark: _colorRegistryJs.foreground,
    light: _colorRegistryJs.foreground,
    hc: _colorRegistryJs.foreground
}, _nlsJs.localize('symbolIcon.stringForeground', 'The foreground color for string symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
var SYMBOL_ICON_STRUCT_FOREGROUND = _colorRegistryJs.registerColor('symbolIcon.structForeground', {
    dark: _colorRegistryJs.foreground,
    light: _colorRegistryJs.foreground,
    hc: _colorRegistryJs.foreground
}, _nlsJs.localize('symbolIcon.structForeground', 'The foreground color for struct symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
var SYMBOL_ICON_TEXT_FOREGROUND = _colorRegistryJs.registerColor('symbolIcon.textForeground', {
    dark: _colorRegistryJs.foreground,
    light: _colorRegistryJs.foreground,
    hc: _colorRegistryJs.foreground
}, _nlsJs.localize('symbolIcon.textForeground', 'The foreground color for text symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
var SYMBOL_ICON_TYPEPARAMETER_FOREGROUND = _colorRegistryJs.registerColor('symbolIcon.typeParameterForeground', {
    dark: _colorRegistryJs.foreground,
    light: _colorRegistryJs.foreground,
    hc: _colorRegistryJs.foreground
}, _nlsJs.localize('symbolIcon.typeParameterForeground', 'The foreground color for type parameter symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
var SYMBOL_ICON_UNIT_FOREGROUND = _colorRegistryJs.registerColor('symbolIcon.unitForeground', {
    dark: _colorRegistryJs.foreground,
    light: _colorRegistryJs.foreground,
    hc: _colorRegistryJs.foreground
}, _nlsJs.localize('symbolIcon.unitForeground', 'The foreground color for unit symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
var SYMBOL_ICON_VARIABLE_FOREGROUND = _colorRegistryJs.registerColor('symbolIcon.variableForeground', {
    dark: '#75BEFF',
    light: '#007ACC',
    hc: '#75BEFF'
}, _nlsJs.localize('symbolIcon.variableForeground', 'The foreground color for variable symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
_themeServiceJs.registerThemingParticipant(function(theme, collector) {
    var symbolIconArrayColor = theme.getColor(SYMBOL_ICON_ARRAY_FOREGROUND);
    if (symbolIconArrayColor) collector.addRule("".concat(_codiconsJs.Codicon.symbolArray.cssSelector, " { color: ").concat(symbolIconArrayColor, "; }"));
    var symbolIconBooleanColor = theme.getColor(SYMBOL_ICON_BOOLEAN_FOREGROUND);
    if (symbolIconBooleanColor) collector.addRule("".concat(_codiconsJs.Codicon.symbolBoolean.cssSelector, " { color: ").concat(symbolIconBooleanColor, "; }"));
    var symbolIconClassColor = theme.getColor(SYMBOL_ICON_CLASS_FOREGROUND);
    if (symbolIconClassColor) collector.addRule("".concat(_codiconsJs.Codicon.symbolClass.cssSelector, " { color: ").concat(symbolIconClassColor, "; }"));
    var symbolIconMethodColor = theme.getColor(SYMBOL_ICON_METHOD_FOREGROUND);
    if (symbolIconMethodColor) collector.addRule("".concat(_codiconsJs.Codicon.symbolMethod.cssSelector, " { color: ").concat(symbolIconMethodColor, "; }"));
    var symbolIconColorColor = theme.getColor(SYMBOL_ICON_COLOR_FOREGROUND);
    if (symbolIconColorColor) collector.addRule("".concat(_codiconsJs.Codicon.symbolColor.cssSelector, " { color: ").concat(symbolIconColorColor, "; }"));
    var symbolIconConstantColor = theme.getColor(SYMBOL_ICON_CONSTANT_FOREGROUND);
    if (symbolIconConstantColor) collector.addRule("".concat(_codiconsJs.Codicon.symbolConstant.cssSelector, " { color: ").concat(symbolIconConstantColor, "; }"));
    var symbolIconConstructorColor = theme.getColor(SYMBOL_ICON_CONSTRUCTOR_FOREGROUND);
    if (symbolIconConstructorColor) collector.addRule("".concat(_codiconsJs.Codicon.symbolConstructor.cssSelector, " { color: ").concat(symbolIconConstructorColor, "; }"));
    var symbolIconEnumeratorColor = theme.getColor(SYMBOL_ICON_ENUMERATOR_FOREGROUND);
    if (symbolIconEnumeratorColor) collector.addRule("\n			".concat(_codiconsJs.Codicon.symbolValue.cssSelector, ",").concat(_codiconsJs.Codicon.symbolEnum.cssSelector, " { color: ").concat(symbolIconEnumeratorColor, "; }"));
    var symbolIconEnumeratorMemberColor = theme.getColor(SYMBOL_ICON_ENUMERATOR_MEMBER_FOREGROUND);
    if (symbolIconEnumeratorMemberColor) collector.addRule("".concat(_codiconsJs.Codicon.symbolEnumMember.cssSelector, " { color: ").concat(symbolIconEnumeratorMemberColor, "; }"));
    var symbolIconEventColor = theme.getColor(SYMBOL_ICON_EVENT_FOREGROUND);
    if (symbolIconEventColor) collector.addRule("".concat(_codiconsJs.Codicon.symbolEvent.cssSelector, " { color: ").concat(symbolIconEventColor, "; }"));
    var symbolIconFieldColor = theme.getColor(SYMBOL_ICON_FIELD_FOREGROUND);
    if (symbolIconFieldColor) collector.addRule("".concat(_codiconsJs.Codicon.symbolField.cssSelector, " { color: ").concat(symbolIconFieldColor, "; }"));
    var symbolIconFileColor = theme.getColor(SYMBOL_ICON_FILE_FOREGROUND);
    if (symbolIconFileColor) collector.addRule("".concat(_codiconsJs.Codicon.symbolFile.cssSelector, " { color: ").concat(symbolIconFileColor, "; }"));
    var symbolIconFolderColor = theme.getColor(SYMBOL_ICON_FOLDER_FOREGROUND);
    if (symbolIconFolderColor) collector.addRule("".concat(_codiconsJs.Codicon.symbolFolder.cssSelector, " { color: ").concat(symbolIconFolderColor, "; }"));
    var symbolIconFunctionColor = theme.getColor(SYMBOL_ICON_FUNCTION_FOREGROUND);
    if (symbolIconFunctionColor) collector.addRule("".concat(_codiconsJs.Codicon.symbolFunction.cssSelector, " { color: ").concat(symbolIconFunctionColor, "; }"));
    var symbolIconInterfaceColor = theme.getColor(SYMBOL_ICON_INTERFACE_FOREGROUND);
    if (symbolIconInterfaceColor) collector.addRule("".concat(_codiconsJs.Codicon.symbolInterface.cssSelector, " { color: ").concat(symbolIconInterfaceColor, "; }"));
    var symbolIconKeyColor = theme.getColor(SYMBOL_ICON_KEY_FOREGROUND);
    if (symbolIconKeyColor) collector.addRule("".concat(_codiconsJs.Codicon.symbolKey.cssSelector, " { color: ").concat(symbolIconKeyColor, "; }"));
    var symbolIconKeywordColor = theme.getColor(SYMBOL_ICON_KEYWORD_FOREGROUND);
    if (symbolIconKeywordColor) collector.addRule("".concat(_codiconsJs.Codicon.symbolKeyword.cssSelector, " { color: ").concat(symbolIconKeywordColor, "; }"));
    var symbolIconModuleColor = theme.getColor(SYMBOL_ICON_MODULE_FOREGROUND);
    if (symbolIconModuleColor) collector.addRule("".concat(_codiconsJs.Codicon.symbolModule.cssSelector, " { color: ").concat(symbolIconModuleColor, "; }"));
    var outlineNamespaceColor = theme.getColor(SYMBOL_ICON_NAMESPACE_FOREGROUND);
    if (outlineNamespaceColor) collector.addRule("".concat(_codiconsJs.Codicon.symbolNamespace.cssSelector, " { color: ").concat(outlineNamespaceColor, "; }"));
    var symbolIconNullColor = theme.getColor(SYMBOL_ICON_NULL_FOREGROUND);
    if (symbolIconNullColor) collector.addRule("".concat(_codiconsJs.Codicon.symbolNull.cssSelector, " { color: ").concat(symbolIconNullColor, "; }"));
    var symbolIconNumberColor = theme.getColor(SYMBOL_ICON_NUMBER_FOREGROUND);
    if (symbolIconNumberColor) collector.addRule("".concat(_codiconsJs.Codicon.symbolNumber.cssSelector, " { color: ").concat(symbolIconNumberColor, "; }"));
    var symbolIconObjectColor = theme.getColor(SYMBOL_ICON_OBJECT_FOREGROUND);
    if (symbolIconObjectColor) collector.addRule("".concat(_codiconsJs.Codicon.symbolObject.cssSelector, " { color: ").concat(symbolIconObjectColor, "; }"));
    var symbolIconOperatorColor = theme.getColor(SYMBOL_ICON_OPERATOR_FOREGROUND);
    if (symbolIconOperatorColor) collector.addRule("".concat(_codiconsJs.Codicon.symbolOperator.cssSelector, " { color: ").concat(symbolIconOperatorColor, "; }"));
    var symbolIconPackageColor = theme.getColor(SYMBOL_ICON_PACKAGE_FOREGROUND);
    if (symbolIconPackageColor) collector.addRule("".concat(_codiconsJs.Codicon.symbolPackage.cssSelector, " { color: ").concat(symbolIconPackageColor, "; }"));
    var symbolIconPropertyColor = theme.getColor(SYMBOL_ICON_PROPERTY_FOREGROUND);
    if (symbolIconPropertyColor) collector.addRule("".concat(_codiconsJs.Codicon.symbolProperty.cssSelector, " { color: ").concat(symbolIconPropertyColor, "; }"));
    var symbolIconReferenceColor = theme.getColor(SYMBOL_ICON_REFERENCE_FOREGROUND);
    if (symbolIconReferenceColor) collector.addRule("".concat(_codiconsJs.Codicon.symbolReference.cssSelector, " { color: ").concat(symbolIconReferenceColor, "; }"));
    var symbolIconSnippetColor = theme.getColor(SYMBOL_ICON_SNIPPET_FOREGROUND);
    if (symbolIconSnippetColor) collector.addRule("".concat(_codiconsJs.Codicon.symbolSnippet.cssSelector, " { color: ").concat(symbolIconSnippetColor, "; }"));
    var symbolIconStringColor = theme.getColor(SYMBOL_ICON_STRING_FOREGROUND);
    if (symbolIconStringColor) collector.addRule("".concat(_codiconsJs.Codicon.symbolString.cssSelector, " { color: ").concat(symbolIconStringColor, "; }"));
    var symbolIconStructColor = theme.getColor(SYMBOL_ICON_STRUCT_FOREGROUND);
    if (symbolIconStructColor) collector.addRule("".concat(_codiconsJs.Codicon.symbolStruct.cssSelector, " { color: ").concat(symbolIconStructColor, "; }"));
    var symbolIconTextColor = theme.getColor(SYMBOL_ICON_TEXT_FOREGROUND);
    if (symbolIconTextColor) collector.addRule("".concat(_codiconsJs.Codicon.symbolText.cssSelector, " { color: ").concat(symbolIconTextColor, "; }"));
    var symbolIconTypeParameterColor = theme.getColor(SYMBOL_ICON_TYPEPARAMETER_FOREGROUND);
    if (symbolIconTypeParameterColor) collector.addRule("".concat(_codiconsJs.Codicon.symbolTypeParameter.cssSelector, " { color: ").concat(symbolIconTypeParameterColor, "; }"));
    var symbolIconUnitColor = theme.getColor(SYMBOL_ICON_UNIT_FOREGROUND);
    if (symbolIconUnitColor) collector.addRule("".concat(_codiconsJs.Codicon.symbolUnit.cssSelector, " { color: ").concat(symbolIconUnitColor, "; }"));
    var symbolIconVariableColor = theme.getColor(SYMBOL_ICON_VARIABLE_FOREGROUND);
    if (symbolIconVariableColor) collector.addRule("".concat(_codiconsJs.Codicon.symbolVariable.cssSelector, " { color: ").concat(symbolIconVariableColor, "; }"));
});

},{"../../../base/common/codicons.js":"j24JC","../../../nls.js":"9djYb","../../../platform/theme/common/colorRegistry.js":"lKtxS","../../../platform/theme/common/themeService.js":"kE7QB","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"aAPtI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ResizableHTMLElement", function() {
    return ResizableHTMLElement;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _domJs = require("../../../base/browser/dom.js");
var _sashJs = require("../../../base/browser/ui/sash/sash.js");
var _eventJs = require("../../../base/common/event.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var ResizableHTMLElement = /*#__PURE__*/ function() {
    "use strict";
    function ResizableHTMLElement() {
        var _this = this;
        _helpers.classCallCheck(this, ResizableHTMLElement);
        this._onDidWillResize = new _eventJs.Emitter();
        this.onDidWillResize = this._onDidWillResize.event;
        this._onDidResize = new _eventJs.Emitter();
        this.onDidResize = this._onDidResize.event;
        this._sashListener = new _lifecycleJs.DisposableStore();
        this._size = new _domJs.Dimension(0, 0);
        this._minSize = new _domJs.Dimension(0, 0);
        this._maxSize = new _domJs.Dimension(Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);
        this.domNode = document.createElement('div');
        this._eastSash = new _sashJs.Sash(this.domNode, {
            getVerticalSashLeft: function() {
                return _this._size.width;
            }
        }, {
            orientation: 0 /* VERTICAL */ 
        });
        this._westSash = new _sashJs.Sash(this.domNode, {
            getVerticalSashLeft: function() {
                return 0;
            }
        }, {
            orientation: 0 /* VERTICAL */ 
        });
        this._northSash = new _sashJs.Sash(this.domNode, {
            getHorizontalSashTop: function() {
                return 0;
            }
        }, {
            orientation: 1 /* HORIZONTAL */ ,
            orthogonalEdge: _sashJs.OrthogonalEdge.North
        });
        this._southSash = new _sashJs.Sash(this.domNode, {
            getHorizontalSashTop: function() {
                return _this._size.height;
            }
        }, {
            orientation: 1 /* HORIZONTAL */ ,
            orthogonalEdge: _sashJs.OrthogonalEdge.South
        });
        this._northSash.orthogonalStartSash = this._westSash;
        this._northSash.orthogonalEndSash = this._eastSash;
        this._southSash.orthogonalStartSash = this._westSash;
        this._southSash.orthogonalEndSash = this._eastSash;
        var currentSize;
        var deltaY = 0;
        var deltaX = 0;
        this._sashListener.add(_eventJs.Event.any(this._northSash.onDidStart, this._eastSash.onDidStart, this._southSash.onDidStart, this._westSash.onDidStart)(function() {
            if (currentSize === undefined) {
                _this._onDidWillResize.fire();
                currentSize = _this._size;
                deltaY = 0;
                deltaX = 0;
            }
        }));
        this._sashListener.add(_eventJs.Event.any(this._northSash.onDidEnd, this._eastSash.onDidEnd, this._southSash.onDidEnd, this._westSash.onDidEnd)(function() {
            if (currentSize !== undefined) {
                currentSize = undefined;
                deltaY = 0;
                deltaX = 0;
                _this._onDidResize.fire({
                    dimension: _this._size,
                    done: true
                });
            }
        }));
        this._sashListener.add(this._eastSash.onDidChange(function(e) {
            if (currentSize) {
                deltaX = e.currentX - e.startX;
                _this.layout(currentSize.height + deltaY, currentSize.width + deltaX);
                _this._onDidResize.fire({
                    dimension: _this._size,
                    done: false,
                    east: true
                });
            }
        }));
        this._sashListener.add(this._westSash.onDidChange(function(e) {
            if (currentSize) {
                deltaX = -(e.currentX - e.startX);
                _this.layout(currentSize.height + deltaY, currentSize.width + deltaX);
                _this._onDidResize.fire({
                    dimension: _this._size,
                    done: false,
                    west: true
                });
            }
        }));
        this._sashListener.add(this._northSash.onDidChange(function(e) {
            if (currentSize) {
                deltaY = -(e.currentY - e.startY);
                _this.layout(currentSize.height + deltaY, currentSize.width + deltaX);
                _this._onDidResize.fire({
                    dimension: _this._size,
                    done: false,
                    north: true
                });
            }
        }));
        this._sashListener.add(this._southSash.onDidChange(function(e) {
            if (currentSize) {
                deltaY = e.currentY - e.startY;
                _this.layout(currentSize.height + deltaY, currentSize.width + deltaX);
                _this._onDidResize.fire({
                    dimension: _this._size,
                    done: false,
                    south: true
                });
            }
        }));
        this._sashListener.add(_eventJs.Event.any(this._eastSash.onDidReset, this._westSash.onDidReset)(function(e) {
            if (_this._preferredSize) {
                _this.layout(_this._size.height, _this._preferredSize.width);
                _this._onDidResize.fire({
                    dimension: _this._size,
                    done: true
                });
            }
        }));
        this._sashListener.add(_eventJs.Event.any(this._northSash.onDidReset, this._southSash.onDidReset)(function(e) {
            if (_this._preferredSize) {
                _this.layout(_this._preferredSize.height, _this._size.width);
                _this._onDidResize.fire({
                    dimension: _this._size,
                    done: true
                });
            }
        }));
    }
    _helpers.createClass(ResizableHTMLElement, [
        {
            key: "dispose",
            value: function dispose() {
                this._northSash.dispose();
                this._southSash.dispose();
                this._eastSash.dispose();
                this._westSash.dispose();
                this._sashListener.dispose();
                this._onDidResize.dispose();
                this._onDidWillResize.dispose();
                this.domNode.remove();
            }
        },
        {
            key: "enableSashes",
            value: function enableSashes(north, east, south, west) {
                this._northSash.state = north ? 3 /* Enabled */  : 0 /* Disabled */ ;
                this._eastSash.state = east ? 3 /* Enabled */  : 0 /* Disabled */ ;
                this._southSash.state = south ? 3 /* Enabled */  : 0 /* Disabled */ ;
                this._westSash.state = west ? 3 /* Enabled */  : 0 /* Disabled */ ;
            }
        },
        {
            key: "layout",
            value: function layout() {
                var height = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.size.height, width = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.size.width;
                var __minSize = this._minSize, minHeight = __minSize.height, minWidth = __minSize.width;
                var __maxSize = this._maxSize, maxHeight = __maxSize.height, maxWidth = __maxSize.width;
                height = Math.max(minHeight, Math.min(maxHeight, height));
                width = Math.max(minWidth, Math.min(maxWidth, width));
                var newSize = new _domJs.Dimension(width, height);
                if (!_domJs.Dimension.equals(newSize, this._size)) {
                    this.domNode.style.height = height + 'px';
                    this.domNode.style.width = width + 'px';
                    this._size = newSize;
                    this._northSash.layout();
                    this._eastSash.layout();
                    this._southSash.layout();
                    this._westSash.layout();
                }
            }
        },
        {
            key: "clearSashHoverState",
            value: function clearSashHoverState() {
                this._eastSash.clearSashHoverState();
                this._westSash.clearSashHoverState();
                this._northSash.clearSashHoverState();
                this._southSash.clearSashHoverState();
            }
        },
        {
            key: "size",
            get: function get() {
                return this._size;
            }
        },
        {
            key: "maxSize",
            get: function get() {
                return this._maxSize;
            },
            set: function set(value) {
                this._maxSize = value;
            }
        },
        {
            key: "minSize",
            get: function get() {
                return this._minSize;
            },
            set: function set(value) {
                this._minSize = value;
            }
        },
        {
            key: "preferredSize",
            get: function get() {
                return this._preferredSize;
            },
            set: function set(value) {
                this._preferredSize = value;
            }
        }
    ]);
    return ResizableHTMLElement;
}();

},{"@swc/helpers":"erO4s","../../../base/browser/dom.js":"bxmlc","../../../base/browser/ui/sash/sash.js":"bWRNP","../../../base/common/event.js":"9IBcK","../../../base/common/lifecycle.js":"bcbPy","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"4lFYl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "canExpandCompletionItem", function() {
    return canExpandCompletionItem;
});
parcelHelpers.export(exports, "SuggestDetailsWidget", function() {
    return SuggestDetailsWidget;
});
parcelHelpers.export(exports, "SuggestDetailsOverlay", function() {
    return SuggestDetailsOverlay;
});
var _helpers = require("@swc/helpers");
var _browserJs = require("../../../base/browser/browser.js");
var _domJs = require("../../../base/browser/dom.js");
var _scrollableElementJs = require("../../../base/browser/ui/scrollbar/scrollableElement.js");
var _codiconsJs = require("../../../base/common/codicons.js");
var _eventJs = require("../../../base/common/event.js");
var _htmlContentJs = require("../../../base/common/htmlContent.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _markdownRendererJs = require("../../browser/core/markdownRenderer.js");
var _editorOptionsJs = require("../../common/config/editorOptions.js");
var _resizableJs = require("./resizable.js");
var _nlsJs = require("../../../nls.js");
var _instantiationJs = require("../../../platform/instantiation/common/instantiation.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
function canExpandCompletionItem(item) {
    return !!item && Boolean(item.completion.documentation || item.completion.detail && item.completion.detail !== item.completion.label);
}
var SuggestDetailsWidget = /*#__PURE__*/ function() {
    "use strict";
    function SuggestDetailsWidget1(_editor, instaService) {
        var _this = this;
        _helpers.classCallCheck(this, SuggestDetailsWidget1);
        this._editor = _editor;
        this._onDidClose = new _eventJs.Emitter();
        this.onDidClose = this._onDidClose.event;
        this._onDidChangeContents = new _eventJs.Emitter();
        this.onDidChangeContents = this._onDidChangeContents.event;
        this._disposables = new _lifecycleJs.DisposableStore();
        this._renderDisposeable = new _lifecycleJs.DisposableStore();
        this._borderWidth = 1;
        this._size = new _domJs.Dimension(330, 0);
        this.domNode = _domJs.$('.suggest-details');
        this.domNode.classList.add('no-docs');
        this._markdownRenderer = instaService.createInstance(_markdownRendererJs.MarkdownRenderer, {
            editor: _editor
        });
        this._body = _domJs.$('.body');
        this._scrollbar = new _scrollableElementJs.DomScrollableElement(this._body, {});
        _domJs.append(this.domNode, this._scrollbar.getDomNode());
        this._disposables.add(this._scrollbar);
        this._header = _domJs.append(this._body, _domJs.$('.header'));
        this._close = _domJs.append(this._header, _domJs.$('span' + _codiconsJs.Codicon.close.cssSelector));
        this._close.title = _nlsJs.localize('details.close', "Close");
        this._type = _domJs.append(this._header, _domJs.$('p.type'));
        this._docs = _domJs.append(this._body, _domJs.$('p.docs'));
        this._configureFont();
        this._disposables.add(this._editor.onDidChangeConfiguration(function(e) {
            if (e.hasChanged(43 /* fontInfo */ )) _this._configureFont();
        }));
    }
    _helpers.createClass(SuggestDetailsWidget1, [
        {
            key: "dispose",
            value: function dispose() {
                this._disposables.dispose();
                this._renderDisposeable.dispose();
            }
        },
        {
            key: "_configureFont",
            value: function _configureFont() {
                var options = this._editor.getOptions();
                var fontInfo = options.get(43 /* fontInfo */ );
                var fontFamily = fontInfo.getMassagedFontFamily(_browserJs.isSafari ? _editorOptionsJs.EDITOR_FONT_DEFAULTS.fontFamily : null);
                var fontSize = options.get(106 /* suggestFontSize */ ) || fontInfo.fontSize;
                var lineHeight = options.get(107 /* suggestLineHeight */ ) || fontInfo.lineHeight;
                var fontWeight = fontInfo.fontWeight;
                var fontSizePx = "".concat(fontSize, "px");
                var lineHeightPx = "".concat(lineHeight, "px");
                this.domNode.style.fontSize = fontSizePx;
                this.domNode.style.lineHeight = "".concat(lineHeight / fontSize);
                this.domNode.style.fontWeight = fontWeight;
                this.domNode.style.fontFeatureSettings = fontInfo.fontFeatureSettings;
                this._type.style.fontFamily = fontFamily;
                this._close.style.height = lineHeightPx;
                this._close.style.width = lineHeightPx;
            }
        },
        {
            key: "getLayoutInfo",
            value: function getLayoutInfo() {
                var lineHeight = this._editor.getOption(107 /* suggestLineHeight */ ) || this._editor.getOption(43 /* fontInfo */ ).lineHeight;
                var borderWidth = this._borderWidth;
                var borderHeight = borderWidth * 2;
                return {
                    lineHeight: lineHeight,
                    borderWidth: borderWidth,
                    borderHeight: borderHeight,
                    verticalPadding: 22,
                    horizontalPadding: 14
                };
            }
        },
        {
            key: "renderLoading",
            value: function renderLoading() {
                this._type.textContent = _nlsJs.localize('loading', "Loading...");
                this._docs.textContent = '';
                this.domNode.classList.remove('no-docs', 'no-type');
                this.layout(this.size.width, this.getLayoutInfo().lineHeight * 2);
                this._onDidChangeContents.fire(this);
            }
        },
        {
            key: "renderItem",
            value: function renderItem(item, explainMode) {
                var _this = this;
                var _a, _b;
                this._renderDisposeable.clear();
                var _completion = item.completion, detail = _completion.detail, documentation = _completion.documentation;
                if (explainMode) {
                    var md = '';
                    md += "score: ".concat(item.score[0], "\n");
                    md += "prefix: ".concat((_a = item.word) !== null && _a !== void 0 ? _a : '(no prefix)', "\n");
                    md += "word: ".concat(item.completion.filterText ? item.completion.filterText + ' (filterText)' : item.textLabel, "\n");
                    md += "distance: ".concat(item.distance, " (localityBonus-setting)\n");
                    md += "index: ".concat(item.idx, ", based on ").concat(item.completion.sortText && 'sortText: "'.concat(item.completion.sortText, '"') || 'label', "\n");
                    md += "commit_chars: ".concat((_b = item.completion.commitCharacters) === null || _b === void 0 ? void 0 : _b.join(''), "\n");
                    documentation = new _htmlContentJs.MarkdownString().appendCodeblock('empty', md);
                    detail = "Provider: ".concat(item.provider._debugDisplayName);
                }
                if (!explainMode && !canExpandCompletionItem(item)) {
                    this.clearContents();
                    return;
                }
                this.domNode.classList.remove('no-docs', 'no-type');
                // --- details
                if (detail) {
                    var cappedDetail = detail.length > 100000 ? "".concat(detail.substr(0, 100000), "\u2026") : detail;
                    this._type.textContent = cappedDetail;
                    this._type.title = cappedDetail;
                    _domJs.show(this._type);
                    this._type.classList.toggle('auto-wrap', !/\r?\n^\s+/gmi.test(cappedDetail));
                } else {
                    _domJs.clearNode(this._type);
                    this._type.title = '';
                    _domJs.hide(this._type);
                    this.domNode.classList.add('no-type');
                }
                // --- documentation
                _domJs.clearNode(this._docs);
                if (typeof documentation === 'string') {
                    this._docs.classList.remove('markdown-docs');
                    this._docs.textContent = documentation;
                } else if (documentation) {
                    var _this1 = this;
                    this._docs.classList.add('markdown-docs');
                    _domJs.clearNode(this._docs);
                    var renderedContents = this._markdownRenderer.render(documentation);
                    this._docs.appendChild(renderedContents.element);
                    this._renderDisposeable.add(renderedContents);
                    this._renderDisposeable.add(this._markdownRenderer.onDidRenderAsync(function() {
                        _this1.layout(_this1._size.width, _this1._type.clientHeight + _this1._docs.clientHeight);
                        _this1._onDidChangeContents.fire(_this1);
                    }));
                }
                this.domNode.style.userSelect = 'text';
                this.domNode.tabIndex = -1;
                this._close.onmousedown = function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                };
                this._close.onclick = function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    _this._onDidClose.fire();
                };
                this._body.scrollTop = 0;
                this.layout(this._size.width, this._type.clientHeight + this._docs.clientHeight);
                this._onDidChangeContents.fire(this);
            }
        },
        {
            key: "clearContents",
            value: function clearContents() {
                this.domNode.classList.add('no-docs');
                this._type.textContent = '';
                this._docs.textContent = '';
            }
        },
        {
            key: "size",
            get: function get() {
                return this._size;
            }
        },
        {
            key: "layout",
            value: function layout(width, height) {
                var newSize = new _domJs.Dimension(width, height);
                if (!_domJs.Dimension.equals(newSize, this._size)) {
                    this._size = newSize;
                    _domJs.size(this.domNode, width, height);
                }
                this._scrollbar.scanDomNode();
            }
        },
        {
            key: "scrollDown",
            value: function scrollDown() {
                var much = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 8;
                this._body.scrollTop += much;
            }
        },
        {
            key: "scrollUp",
            value: function scrollUp() {
                var much = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 8;
                this._body.scrollTop -= much;
            }
        },
        {
            key: "scrollTop",
            value: function scrollTop() {
                this._body.scrollTop = 0;
            }
        },
        {
            key: "scrollBottom",
            value: function scrollBottom() {
                this._body.scrollTop = this._body.scrollHeight;
            }
        },
        {
            key: "pageDown",
            value: function pageDown() {
                this.scrollDown(80);
            }
        },
        {
            key: "pageUp",
            value: function pageUp() {
                this.scrollUp(80);
            }
        },
        {
            key: "borderWidth",
            get: function get() {
                return this._borderWidth;
            },
            set: function set(width) {
                this._borderWidth = width;
            }
        }
    ]);
    return SuggestDetailsWidget1;
}();
SuggestDetailsWidget = __decorate([
    __param(1, _instantiationJs.IInstantiationService)
], SuggestDetailsWidget);
var SuggestDetailsOverlay = /*#__PURE__*/ function() {
    "use strict";
    function SuggestDetailsOverlay(widget, _editor) {
        var _this = this;
        _helpers.classCallCheck(this, SuggestDetailsOverlay);
        this.widget = widget;
        this._editor = _editor;
        this._disposables = new _lifecycleJs.DisposableStore();
        this._added = false;
        this._preferAlignAtTop = true;
        this._resizable = new _resizableJs.ResizableHTMLElement();
        this._resizable.domNode.classList.add('suggest-details-container');
        this._resizable.domNode.appendChild(widget.domNode);
        this._resizable.enableSashes(false, true, true, false);
        var topLeftNow;
        var sizeNow;
        var deltaTop = 0;
        var deltaLeft = 0;
        this._disposables.add(this._resizable.onDidWillResize(function() {
            topLeftNow = _this._topLeft;
            sizeNow = _this._resizable.size;
        }));
        this._disposables.add(this._resizable.onDidResize(function(e) {
            if (topLeftNow && sizeNow) {
                _this.widget.layout(e.dimension.width, e.dimension.height);
                var updateTopLeft = false;
                if (e.west) {
                    deltaLeft = sizeNow.width - e.dimension.width;
                    updateTopLeft = true;
                }
                if (e.north) {
                    deltaTop = sizeNow.height - e.dimension.height;
                    updateTopLeft = true;
                }
                if (updateTopLeft) _this._applyTopLeft({
                    top: topLeftNow.top + deltaTop,
                    left: topLeftNow.left + deltaLeft
                });
            }
            if (e.done) {
                topLeftNow = undefined;
                sizeNow = undefined;
                deltaTop = 0;
                deltaLeft = 0;
                _this._userSize = e.dimension;
            }
        }));
        this._disposables.add(this.widget.onDidChangeContents(function() {
            var _a;
            if (_this._anchorBox) _this._placeAtAnchor(_this._anchorBox, (_a = _this._userSize) !== null && _a !== void 0 ? _a : _this.widget.size, _this._preferAlignAtTop);
        }));
    }
    _helpers.createClass(SuggestDetailsOverlay, [
        {
            key: "dispose",
            value: function dispose() {
                this._resizable.dispose();
                this._disposables.dispose();
                this.hide();
            }
        },
        {
            key: "getId",
            value: function getId() {
                return 'suggest.details';
            }
        },
        {
            key: "getDomNode",
            value: function getDomNode() {
                return this._resizable.domNode;
            }
        },
        {
            key: "getPosition",
            value: function getPosition() {
                return null;
            }
        },
        {
            key: "show",
            value: function show() {
                if (!this._added) {
                    this._editor.addOverlayWidget(this);
                    this.getDomNode().style.position = 'fixed';
                    this._added = true;
                }
            }
        },
        {
            key: "hide",
            value: function hide() {
                var sessionEnded = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
                this._resizable.clearSashHoverState();
                if (this._added) {
                    this._editor.removeOverlayWidget(this);
                    this._added = false;
                    this._anchorBox = undefined;
                    this._topLeft = undefined;
                }
                if (sessionEnded) {
                    this._userSize = undefined;
                    this.widget.clearContents();
                }
            }
        },
        {
            key: "placeAtAnchor",
            value: function placeAtAnchor(anchor, preferAlignAtTop) {
                var _a;
                var anchorBox = anchor.getBoundingClientRect();
                this._anchorBox = anchorBox;
                this._preferAlignAtTop = preferAlignAtTop;
                this._placeAtAnchor(this._anchorBox, (_a = this._userSize) !== null && _a !== void 0 ? _a : this.widget.size, preferAlignAtTop);
            }
        },
        {
            key: "_placeAtAnchor",
            value: function _placeAtAnchor(anchorBox, size, preferAlignAtTop) {
                var _a;
                var bodyBox = _domJs.getClientArea(document.body);
                var info = this.widget.getLayoutInfo();
                var defaultMinSize = new _domJs.Dimension(220, 2 * info.lineHeight);
                var defaultTop = anchorBox.top;
                // EAST
                var eastPlacement = function() {
                    var width = bodyBox.width - (anchorBox.left + anchorBox.width + info.borderWidth + info.horizontalPadding);
                    var left = -info.borderWidth + anchorBox.left + anchorBox.width;
                    var maxSizeTop = new _domJs.Dimension(width, bodyBox.height - anchorBox.top - info.borderHeight - info.verticalPadding);
                    var maxSizeBottom = maxSizeTop.with(undefined, anchorBox.top + anchorBox.height - info.borderHeight - info.verticalPadding);
                    return {
                        top: defaultTop,
                        left: left,
                        fit: width - size.width,
                        maxSizeTop: maxSizeTop,
                        maxSizeBottom: maxSizeBottom,
                        minSize: defaultMinSize.with(Math.min(width, defaultMinSize.width))
                    };
                }();
                // WEST
                var westPlacement = function() {
                    var width = anchorBox.left - info.borderWidth - info.horizontalPadding;
                    var left = Math.max(info.horizontalPadding, anchorBox.left - size.width - info.borderWidth);
                    var maxSizeTop = new _domJs.Dimension(width, bodyBox.height - anchorBox.top - info.borderHeight - info.verticalPadding);
                    var maxSizeBottom = maxSizeTop.with(undefined, anchorBox.top + anchorBox.height - info.borderHeight - info.verticalPadding);
                    return {
                        top: defaultTop,
                        left: left,
                        fit: width - size.width,
                        maxSizeTop: maxSizeTop,
                        maxSizeBottom: maxSizeBottom,
                        minSize: defaultMinSize.with(Math.min(width, defaultMinSize.width))
                    };
                }();
                // SOUTH
                var southPacement = function() {
                    var left = anchorBox.left;
                    var top = -info.borderWidth + anchorBox.top + anchorBox.height;
                    var maxSizeBottom = new _domJs.Dimension(anchorBox.width - info.borderHeight, bodyBox.height - anchorBox.top - anchorBox.height - info.verticalPadding);
                    return {
                        top: top,
                        left: left,
                        fit: maxSizeBottom.height - size.height,
                        maxSizeBottom: maxSizeBottom,
                        maxSizeTop: maxSizeBottom,
                        minSize: defaultMinSize.with(maxSizeBottom.width)
                    };
                }();
                // take first placement that fits or the first with "least bad" fit
                var placements = [
                    eastPlacement,
                    westPlacement,
                    southPacement
                ];
                var placement = (_a = placements.find(function(p) {
                    return p.fit >= 0;
                })) !== null && _a !== void 0 ? _a : placements.sort(function(a, b) {
                    return b.fit - a.fit;
                })[0];
                // top/bottom placement
                var bottom = anchorBox.top + anchorBox.height - info.borderHeight;
                var alignAtTop;
                var height = size.height;
                var maxHeight = Math.max(placement.maxSizeTop.height, placement.maxSizeBottom.height);
                if (height > maxHeight) height = maxHeight;
                var maxSize;
                if (preferAlignAtTop) {
                    if (height <= placement.maxSizeTop.height) {
                        alignAtTop = true;
                        maxSize = placement.maxSizeTop;
                    } else {
                        alignAtTop = false;
                        maxSize = placement.maxSizeBottom;
                    }
                } else if (height <= placement.maxSizeBottom.height) {
                    alignAtTop = false;
                    maxSize = placement.maxSizeBottom;
                } else {
                    alignAtTop = true;
                    maxSize = placement.maxSizeTop;
                }
                this._applyTopLeft({
                    left: placement.left,
                    top: alignAtTop ? placement.top : bottom - height
                });
                this.getDomNode().style.position = 'fixed';
                this._resizable.enableSashes(!alignAtTop, placement === eastPlacement, alignAtTop, placement !== eastPlacement);
                this._resizable.minSize = placement.minSize;
                this._resizable.maxSize = maxSize;
                this._resizable.layout(height, Math.min(maxSize.width, size.width));
                this.widget.layout(this._resizable.size.width, this._resizable.size.height);
            }
        },
        {
            key: "_applyTopLeft",
            value: function _applyTopLeft(topLeft) {
                this._topLeft = topLeft;
                this.getDomNode().style.left = "".concat(this._topLeft.left, "px");
                this.getDomNode().style.top = "".concat(this._topLeft.top, "px");
            }
        }
    ]);
    return SuggestDetailsOverlay;
}();

},{"@swc/helpers":"erO4s","../../../base/browser/browser.js":"fIqGd","../../../base/browser/dom.js":"bxmlc","../../../base/browser/ui/scrollbar/scrollableElement.js":"gBkC9","../../../base/common/codicons.js":"j24JC","../../../base/common/event.js":"9IBcK","../../../base/common/htmlContent.js":"i3TMB","../../../base/common/lifecycle.js":"bcbPy","../../browser/core/markdownRenderer.js":"7tjMJ","../../common/config/editorOptions.js":"jb70u","./resizable.js":"aAPtI","../../../nls.js":"9djYb","../../../platform/instantiation/common/instantiation.js":"9ABZB","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"2y7Dk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getAriaId", function() {
    return getAriaId;
});
parcelHelpers.export(exports, "suggestMoreInfoIcon", function() {
    return suggestMoreInfoIcon;
});
parcelHelpers.export(exports, "ItemRenderer", function() {
    return ItemRenderer;
});
var _helpers = require("@swc/helpers");
var _browserJs = require("../../../base/browser/browser.js");
var _domJs = require("../../../base/browser/dom.js");
var _iconLabelJs = require("../../../base/browser/ui/iconLabel/iconLabel.js");
var _arraysJs = require("../../../base/common/arrays.js");
var _codiconsJs = require("../../../base/common/codicons.js");
var _eventJs = require("../../../base/common/event.js");
var _filtersJs = require("../../../base/common/filters.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _uriJs = require("../../../base/common/uri.js");
var _editorOptionsJs = require("../../common/config/editorOptions.js");
var _modesJs = require("../../common/modes.js");
var _getIconClassesJs = require("../../common/services/getIconClasses.js");
var _modelServiceJs = require("../../common/services/modelService.js");
var _modeServiceJs = require("../../common/services/modeService.js");
var _nlsJs = require("../../../nls.js");
var _filesJs = require("../../../platform/files/common/files.js");
var _iconRegistryJs = require("../../../platform/theme/common/iconRegistry.js");
var _themeServiceJs = require("../../../platform/theme/common/themeService.js");
var _suggestWidgetDetailsJs = require("./suggestWidgetDetails.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var _a;
function getAriaId(index) {
    return "suggest-aria-id:".concat(index);
}
var suggestMoreInfoIcon = _iconRegistryJs.registerIcon('suggest-more-info', _codiconsJs.Codicon.chevronRight, _nlsJs.localize('suggestMoreInfoIcon', 'Icon for more information in the suggest widget.'));
var _completionItemColor = new (_a = /*#__PURE__*/ function() {
    "use strict";
    function ColorExtractor() {
        _helpers.classCallCheck(this, ColorExtractor);
    }
    _helpers.createClass(ColorExtractor, [
        {
            key: "extract",
            value: function extract(item, out) {
                if (item.textLabel.match(ColorExtractor._regexStrict)) {
                    out[0] = item.textLabel;
                    return true;
                }
                if (item.completion.detail && item.completion.detail.match(ColorExtractor._regexStrict)) {
                    out[0] = item.completion.detail;
                    return true;
                }
                if (typeof item.completion.documentation === 'string') {
                    var match = ColorExtractor._regexRelaxed.exec(item.completion.documentation);
                    if (match && (match.index === 0 || match.index + match[0].length === item.completion.documentation.length)) {
                        out[0] = match[0];
                        return true;
                    }
                }
                return false;
            }
        }
    ]);
    return ColorExtractor;
}(), _a._regexRelaxed = /(#([\da-fA-F]{3}){1,2}|(rgb|hsl)a\(\s*(\d{1,3}%?\s*,\s*){3}(1|0?\.\d+)\)|(rgb|hsl)\(\s*\d{1,3}%?(\s*,\s*\d{1,3}%?){2}\s*\))/, _a._regexStrict = new RegExp("^".concat(_a._regexRelaxed.source, "$"), 'i'), _a);
var ItemRenderer = /*#__PURE__*/ function() {
    "use strict";
    function ItemRenderer1(_editor, _modelService, _modeService, _themeService) {
        _helpers.classCallCheck(this, ItemRenderer1);
        this._editor = _editor;
        this._modelService = _modelService;
        this._modeService = _modeService;
        this._themeService = _themeService;
        this._onDidToggleDetails = new _eventJs.Emitter();
        this.onDidToggleDetails = this._onDidToggleDetails.event;
        this.templateId = 'suggestion';
    }
    _helpers.createClass(ItemRenderer1, [
        {
            key: "dispose",
            value: function dispose() {
                this._onDidToggleDetails.dispose();
            }
        },
        {
            key: "renderTemplate",
            value: function renderTemplate(container) {
                var _this = this;
                var data = Object.create(null);
                data.disposables = new _lifecycleJs.DisposableStore();
                data.root = container;
                data.root.classList.add('show-file-icons');
                data.icon = _domJs.append(container, _domJs.$('.icon'));
                data.colorspan = _domJs.append(data.icon, _domJs.$('span.colorspan'));
                var text = _domJs.append(container, _domJs.$('.contents'));
                var main = _domJs.append(text, _domJs.$('.main'));
                data.iconContainer = _domJs.append(main, _domJs.$('.icon-label.codicon'));
                data.left = _domJs.append(main, _domJs.$('span.left'));
                data.right = _domJs.append(main, _domJs.$('span.right'));
                data.iconLabel = new _iconLabelJs.IconLabel(data.left, {
                    supportHighlights: true,
                    supportIcons: true
                });
                data.disposables.add(data.iconLabel);
                data.parametersLabel = _domJs.append(data.left, _domJs.$('span.signature-label'));
                data.qualifierLabel = _domJs.append(data.left, _domJs.$('span.qualifier-label'));
                data.detailsLabel = _domJs.append(data.right, _domJs.$('span.details-label'));
                data.readMore = _domJs.append(data.right, _domJs.$('span.readMore' + _themeServiceJs.ThemeIcon.asCSSSelector(suggestMoreInfoIcon)));
                data.readMore.title = _nlsJs.localize('readMore', "Read More");
                var configureFont = function() {
                    var options = _this._editor.getOptions();
                    var fontInfo = options.get(43 /* fontInfo */ );
                    var fontFamily = fontInfo.getMassagedFontFamily(_browserJs.isSafari ? _editorOptionsJs.EDITOR_FONT_DEFAULTS.fontFamily : null);
                    var fontFeatureSettings = fontInfo.fontFeatureSettings;
                    var fontSize = options.get(106 /* suggestFontSize */ ) || fontInfo.fontSize;
                    var lineHeight = options.get(107 /* suggestLineHeight */ ) || fontInfo.lineHeight;
                    var fontWeight = fontInfo.fontWeight;
                    var fontSizePx = "".concat(fontSize, "px");
                    var lineHeightPx = "".concat(lineHeight, "px");
                    data.root.style.fontSize = fontSizePx;
                    data.root.style.fontWeight = fontWeight;
                    main.style.fontFamily = fontFamily;
                    main.style.fontFeatureSettings = fontFeatureSettings;
                    main.style.lineHeight = lineHeightPx;
                    data.icon.style.height = lineHeightPx;
                    data.icon.style.width = lineHeightPx;
                    data.readMore.style.height = lineHeightPx;
                    data.readMore.style.width = lineHeightPx;
                };
                configureFont();
                data.disposables.add(this._editor.onDidChangeConfiguration(function(e) {
                    if (e.hasChanged(43 /* fontInfo */ ) || e.hasChanged(106 /* suggestFontSize */ ) || e.hasChanged(107 /* suggestLineHeight */ )) configureFont();
                }));
                return data;
            }
        },
        {
            key: "renderElement",
            value: function renderElement(element, index, data) {
                var completion = element.completion;
                data.root.id = getAriaId(index);
                data.colorspan.style.backgroundColor = '';
                var labelOptions = {
                    labelEscapeNewLines: true,
                    matches: _filtersJs.createMatches(element.score)
                };
                var color = [];
                if (completion.kind === 19 /* Color */  && _completionItemColor.extract(element, color)) {
                    // special logic for 'color' completion items
                    data.icon.className = 'icon customcolor';
                    data.iconContainer.className = 'icon hide';
                    data.colorspan.style.backgroundColor = color[0];
                } else if (completion.kind === 20 /* File */  && this._themeService.getFileIconTheme().hasFileIcons) {
                    // special logic for 'file' completion items
                    data.icon.className = 'icon hide';
                    data.iconContainer.className = 'icon hide';
                    var labelClasses = _getIconClassesJs.getIconClasses(this._modelService, this._modeService, _uriJs.URI.from({
                        scheme: 'fake',
                        path: element.textLabel
                    }), _filesJs.FileKind.FILE);
                    var detailClasses = _getIconClassesJs.getIconClasses(this._modelService, this._modeService, _uriJs.URI.from({
                        scheme: 'fake',
                        path: completion.detail
                    }), _filesJs.FileKind.FILE);
                    labelOptions.extraClasses = labelClasses.length > detailClasses.length ? labelClasses : detailClasses;
                } else if (completion.kind === 23 /* Folder */  && this._themeService.getFileIconTheme().hasFolderIcons) {
                    // special logic for 'folder' completion items
                    data.icon.className = 'icon hide';
                    data.iconContainer.className = 'icon hide';
                    labelOptions.extraClasses = _arraysJs.flatten([
                        _getIconClassesJs.getIconClasses(this._modelService, this._modeService, _uriJs.URI.from({
                            scheme: 'fake',
                            path: element.textLabel
                        }), _filesJs.FileKind.FOLDER),
                        _getIconClassesJs.getIconClasses(this._modelService, this._modeService, _uriJs.URI.from({
                            scheme: 'fake',
                            path: completion.detail
                        }), _filesJs.FileKind.FOLDER)
                    ]);
                } else {
                    var _classList;
                    // normal icon
                    data.icon.className = 'icon hide';
                    data.iconContainer.className = '';
                    (_classList = data.iconContainer.classList).add.apply(_classList, [
                        'suggest-icon'
                    ].concat(_helpers.toConsumableArray(_modesJs.completionKindToCssClass(completion.kind).split(' '))));
                }
                if (completion.tags && completion.tags.indexOf(1 /* Deprecated */ ) >= 0) {
                    labelOptions.extraClasses = (labelOptions.extraClasses || []).concat([
                        'deprecated'
                    ]);
                    labelOptions.matches = [];
                }
                data.iconLabel.setLabel(element.textLabel, undefined, labelOptions);
                if (typeof completion.label === 'string') {
                    data.parametersLabel.textContent = '';
                    data.detailsLabel.textContent = stripNewLines(completion.detail || '');
                    data.root.classList.add('string-label');
                } else {
                    data.parametersLabel.textContent = stripNewLines(completion.label.detail || '');
                    data.detailsLabel.textContent = stripNewLines(completion.label.description || '');
                    data.root.classList.remove('string-label');
                }
                if (this._editor.getOption(105 /* suggest */ ).showInlineDetails) _domJs.show(data.detailsLabel);
                else _domJs.hide(data.detailsLabel);
                if (_suggestWidgetDetailsJs.canExpandCompletionItem(element)) {
                    var _this = this;
                    data.right.classList.add('can-expand-details');
                    _domJs.show(data.readMore);
                    data.readMore.onmousedown = function(e) {
                        e.stopPropagation();
                        e.preventDefault();
                    };
                    data.readMore.onclick = function(e) {
                        e.stopPropagation();
                        e.preventDefault();
                        _this._onDidToggleDetails.fire();
                    };
                } else {
                    data.right.classList.remove('can-expand-details');
                    _domJs.hide(data.readMore);
                    data.readMore.onmousedown = null;
                    data.readMore.onclick = null;
                }
            }
        },
        {
            key: "disposeTemplate",
            value: function disposeTemplate(templateData) {
                templateData.disposables.dispose();
            }
        }
    ]);
    return ItemRenderer1;
}();
ItemRenderer = __decorate([
    __param(1, _modelServiceJs.IModelService),
    __param(2, _modeServiceJs.IModeService),
    __param(3, _themeServiceJs.IThemeService)
], ItemRenderer);
function stripNewLines(str) {
    return str.replace(/\r\n|\r|\n/g, '');
}

},{"@swc/helpers":"erO4s","../../../base/browser/browser.js":"fIqGd","../../../base/browser/dom.js":"bxmlc","../../../base/browser/ui/iconLabel/iconLabel.js":"bkzBN","../../../base/common/arrays.js":"bZs3E","../../../base/common/codicons.js":"j24JC","../../../base/common/event.js":"9IBcK","../../../base/common/filters.js":"m7Exq","../../../base/common/lifecycle.js":"bcbPy","../../../base/common/uri.js":"4ZDLf","../../common/config/editorOptions.js":"jb70u","../../common/modes.js":"bRbY1","../../common/services/getIconClasses.js":"fXwHI","../../common/services/modelService.js":"HyRTJ","../../common/services/modeService.js":"dNIX6","../../../nls.js":"9djYb","../../../platform/files/common/files.js":"esyEL","../../../platform/theme/common/iconRegistry.js":"evGtc","../../../platform/theme/common/themeService.js":"kE7QB","./suggestWidgetDetails.js":"4lFYl","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"fXwHI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getIconClasses", function() {
    return getIconClasses;
});
parcelHelpers.export(exports, "cssEscape", function() {
    return cssEscape;
});
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _networkJs = require("../../../base/common/network.js");
var _resourcesJs = require("../../../base/common/resources.js");
var _modesRegistryJs = require("../modes/modesRegistry.js");
var _filesJs = require("../../../platform/files/common/files.js");
function getIconClasses(modelService, modeService, resource, fileKind) {
    // we always set these base classes even if we do not have a path
    var classes = fileKind === _filesJs.FileKind.ROOT_FOLDER ? [
        'rootfolder-icon'
    ] : fileKind === _filesJs.FileKind.FOLDER ? [
        'folder-icon'
    ] : [
        'file-icon'
    ];
    if (resource) {
        // Get the path and name of the resource. For data-URIs, we need to parse specially
        var name;
        if (resource.scheme === _networkJs.Schemas.data) {
            var metadata = _resourcesJs.DataUri.parseMetaData(resource);
            name = metadata.get(_resourcesJs.DataUri.META_DATA_LABEL);
        } else name = cssEscape(_resourcesJs.basenameOrAuthority(resource).toLowerCase());
        // Folders
        if (fileKind === _filesJs.FileKind.FOLDER) classes.push("".concat(name, "-name-folder-icon"));
        else {
            // Name & Extension(s)
            if (name) {
                classes.push("".concat(name, "-name-file-icon"));
                // Avoid doing an explosive combination of extensions for very long filenames
                // (most file systems do not allow files > 255 length) with lots of `.` characters
                // https://github.com/microsoft/vscode/issues/116199
                if (name.length <= 255) {
                    var dotSegments = name.split('.');
                    for(var i = 1; i < dotSegments.length; i++)classes.push("".concat(dotSegments.slice(i).join('.'), "-ext-file-icon")); // add each combination of all found extensions if more than one
                }
                classes.push("ext-file-icon"); // extra segment to increase file-ext score
            }
            // Detected Mode
            var detectedModeId = detectModeId(modelService, modeService, resource);
            if (detectedModeId) classes.push("".concat(cssEscape(detectedModeId), "-lang-file-icon"));
        }
    }
    return classes;
}
function detectModeId(modelService, modeService, resource) {
    if (!resource) return null; // we need a resource at least
    var modeId = null;
    // Data URI: check for encoded metadata
    if (resource.scheme === _networkJs.Schemas.data) {
        var metadata = _resourcesJs.DataUri.parseMetaData(resource);
        var mime = metadata.get(_resourcesJs.DataUri.META_DATA_MIME);
        if (mime) modeId = modeService.getModeId(mime);
    } else {
        var model = modelService.getModel(resource);
        if (model) modeId = model.getLanguageId();
    }
    // only take if the mode is specific (aka no just plain text)
    if (modeId && modeId !== _modesRegistryJs.PLAINTEXT_MODE_ID) return modeId;
    // otherwise fallback to path based detection
    return modeService.getModeIdByFilepathOrFirstLine(resource);
}
function cssEscape(str) {
    return str.replace(/[\11\12\14\15\40]/g, '/'); // HTML class names can not contain certain whitespace characters, use / instead, which doesn't exist in file names.
}

},{"../../../base/common/network.js":"4fXI6","../../../base/common/resources.js":"14HNj","../modes/modesRegistry.js":"5xdlz","../../../platform/files/common/files.js":"esyEL","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"esyEL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FileKind", function() {
    return FileKind;
});
var FileKind;
(function(FileKind1) {
    FileKind1[FileKind1["FILE"] = 0] = "FILE";
    FileKind1[FileKind1["FOLDER"] = 1] = "FOLDER";
    FileKind1[FileKind1["ROOT_FOLDER"] = 2] = "ROOT_FOLDER";
})(FileKind || (FileKind = {})); //#endregion

},{"@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"f2zPM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ parcelHelpers.export(exports, "createDisposableRef", function() {
    return createDisposableRef;
});
parcelHelpers.export(exports, "compareBy", function() {
    return compareBy;
});
parcelHelpers.export(exports, "compareByNumber", function() {
    return compareByNumber;
});
parcelHelpers.export(exports, "findMaxBy", function() {
    return findMaxBy;
});
function createDisposableRef(object, disposable) {
    return {
        object: object,
        dispose: function() {
            return disposable === null || disposable === void 0 ? void 0 : disposable.dispose();
        }
    };
}
function compareBy(selector, comparator) {
    return function(a, b) {
        return comparator(selector(a), selector(b));
    };
}
function compareByNumber() {
    return function(a, b) {
        return a - b;
    };
}
function findMaxBy(items, comparator) {
    var min = undefined;
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = items[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var item = _step.value;
            if (min === undefined || comparator(item, min) > 0) min = item;
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    return min;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"sklnt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GhostTextWidget", function() {
    return GhostTextWidget;
});
var _helpers = require("@swc/helpers");
var _domJs = require("../../../base/browser/dom.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _stringsJs = require("../../../base/common/strings.js");
var _ghostTextCss = require("./ghostText.css");
var _configurationJs = require("../../browser/config/configuration.js");
var _editorOptionsJs = require("../../common/config/editorOptions.js");
var _lineTokensJs = require("../../common/core/lineTokens.js");
var _positionJs = require("../../common/core/position.js");
var _rangeJs = require("../../common/core/range.js");
var _stringBuilderJs = require("../../common/core/stringBuilder.js");
var _modeServiceJs = require("../../common/services/modeService.js");
var _editorColorRegistryJs = require("../../common/view/editorColorRegistry.js");
var _lineDecorationsJs = require("../../common/viewLayout/lineDecorations.js");
var _viewLineRendererJs = require("../../common/viewLayout/viewLineRenderer.js");
var _instantiationJs = require("../../../platform/instantiation/common/instantiation.js");
var _themeServiceJs = require("../../../platform/theme/common/themeService.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var _a;
var ttPolicy = (_a = window.trustedTypes) === null || _a === void 0 ? void 0 : _a.createPolicy('editorGhostText', {
    createHTML: function(value) {
        return value;
    }
});
var GhostTextWidget = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(GhostTextWidget1, Disposable);
    var _super = _helpers.createSuper(GhostTextWidget1);
    function GhostTextWidget1(editor, model, instantiationService, modeService) {
        _helpers.classCallCheck(this, GhostTextWidget1);
        var _this;
        _this = _super.call(this);
        _this.editor = editor;
        _this.model = model;
        _this.instantiationService = instantiationService;
        _this.modeService = modeService;
        _this.disposed = false;
        _this.partsWidget = _this._register(_this.instantiationService.createInstance(DecorationsWidget, _this.editor));
        _this.additionalLinesWidget = _this._register(new AdditionalLinesWidget(_this.editor, _this.modeService.languageIdCodec));
        _this.viewMoreContentWidget = undefined;
        _this._register(_this.editor.onDidChangeConfiguration(function(e) {
            if (e.hasChanged(29 /* disableMonospaceOptimizations */ ) || e.hasChanged(104 /* stopRenderingLineAfter */ ) || e.hasChanged(87 /* renderWhitespace */ ) || e.hasChanged(82 /* renderControlCharacters */ ) || e.hasChanged(44 /* fontLigatures */ ) || e.hasChanged(43 /* fontInfo */ ) || e.hasChanged(58 /* lineHeight */ )) _this.update();
        }));
        _this._register(_lifecycleJs.toDisposable(function() {
            var _a1;
            _this.disposed = true;
            _this.update();
            (_a1 = _this.viewMoreContentWidget) === null || _a1 === void 0 || _a1.dispose();
            _this.viewMoreContentWidget = undefined;
        }));
        _this._register(model.onDidChange(function() {
            _this.update();
        }));
        _this.update();
        return _this;
    }
    _helpers.createClass(GhostTextWidget1, [
        {
            key: "shouldShowHoverAtViewZone",
            value: function shouldShowHoverAtViewZone(viewZoneId) {
                return this.additionalLinesWidget.viewZoneId === viewZoneId;
            }
        },
        {
            key: "update",
            value: function update() {
                var _a2;
                var ghostText = this.model.ghostText;
                if (!this.editor.hasModel() || !ghostText || this.disposed) {
                    this.partsWidget.clear();
                    this.additionalLinesWidget.clear();
                    return;
                }
                var inlineTexts = new Array();
                var additionalLines = new Array();
                function addToAdditionalLines(lines, className) {
                    if (additionalLines.length > 0) {
                        var lastLine = additionalLines[additionalLines.length - 1];
                        if (className) lastLine.decorations.push(new _lineDecorationsJs.LineDecoration(lastLine.content.length + 1, lastLine.content.length + 1 + lines[0].length, className, 0 /* Regular */ ));
                        lastLine.content += lines[0];
                        lines = lines.slice(1);
                    }
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator = lines[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var line = _step.value;
                            additionalLines.push({
                                content: line,
                                decorations: className ? [
                                    new _lineDecorationsJs.LineDecoration(1, line.length + 1, className, 0 /* Regular */ )
                                ] : []
                            });
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                }
                var textBufferLine = this.editor.getModel().getLineContent(ghostText.lineNumber);
                this.editor.getModel().getLineTokens(ghostText.lineNumber);
                var hiddenTextStartColumn = undefined;
                var lastIdx = 0;
                var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                try {
                    for(var _iterator1 = ghostText.parts[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                        var part = _step1.value;
                        var lines1 = part.lines;
                        if (hiddenTextStartColumn === undefined) {
                            inlineTexts.push({
                                column: part.column,
                                text: lines1[0],
                                preview: part.preview
                            });
                            lines1 = lines1.slice(1);
                        } else addToAdditionalLines([
                            textBufferLine.substring(lastIdx, part.column - 1)
                        ], undefined);
                        if (lines1.length > 0) {
                            addToAdditionalLines(lines1, 'ghost-text');
                            if (hiddenTextStartColumn === undefined && part.column <= textBufferLine.length) hiddenTextStartColumn = part.column;
                        }
                        lastIdx = part.column - 1;
                    }
                } catch (err) {
                    _didIteratorError1 = true;
                    _iteratorError1 = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                            _iterator1.return();
                        }
                    } finally{
                        if (_didIteratorError1) {
                            throw _iteratorError1;
                        }
                    }
                }
                if (hiddenTextStartColumn !== undefined) addToAdditionalLines([
                    textBufferLine.substring(lastIdx)
                ], undefined);
                this.partsWidget.setParts(ghostText.lineNumber, inlineTexts, hiddenTextStartColumn !== undefined ? {
                    column: hiddenTextStartColumn,
                    length: textBufferLine.length + 1 - hiddenTextStartColumn
                } : undefined);
                this.additionalLinesWidget.updateLines(ghostText.lineNumber, additionalLines, ghostText.additionalReservedLineCount);
                if (ghostText.parts.some(function(p) {
                    return p.lines.length < 0;
                })) // Not supported at the moment, condition is always false.
                this.viewMoreContentWidget = this.renderViewMoreLines(new _positionJs.Position(ghostText.lineNumber, this.editor.getModel().getLineMaxColumn(ghostText.lineNumber)), '', 0);
                else {
                    (_a2 = this.viewMoreContentWidget) === null || _a2 === void 0 || _a2.dispose();
                    this.viewMoreContentWidget = undefined;
                }
            }
        },
        {
            key: "renderViewMoreLines",
            value: function renderViewMoreLines(position, firstLineText, remainingLinesLength) {
                var _this = this;
                var fontInfo = this.editor.getOption(43 /* fontInfo */ );
                var domNode = document.createElement('div');
                domNode.className = 'suggest-preview-additional-widget';
                _configurationJs.Configuration.applyFontInfoSlow(domNode, fontInfo);
                var spacer = document.createElement('span');
                spacer.className = 'content-spacer';
                spacer.append(firstLineText);
                domNode.append(spacer);
                var newline = document.createElement('span');
                newline.className = 'content-newline suggest-preview-text';
                newline.append('⏎  ');
                domNode.append(newline);
                var disposableStore = new _lifecycleJs.DisposableStore();
                var button = document.createElement('div');
                button.className = 'button suggest-preview-text';
                button.append("+".concat(remainingLinesLength, " lines\u2026"));
                disposableStore.add(_domJs.addStandardDisposableListener(button, 'mousedown', function(e) {
                    var _a3;
                    (_a3 = _this.model) === null || _a3 === void 0 || _a3.setExpanded(true);
                    e.preventDefault();
                    _this.editor.focus();
                }));
                domNode.append(button);
                return new ViewMoreLinesContentWidget(this.editor, position, domNode, disposableStore);
            }
        }
    ]);
    return GhostTextWidget1;
}(_lifecycleJs.Disposable);
GhostTextWidget = __decorate([
    __param(2, _instantiationJs.IInstantiationService),
    __param(3, _modeServiceJs.IModeService)
], GhostTextWidget);
var DecorationsWidget = /*#__PURE__*/ function() {
    "use strict";
    function DecorationsWidget(editor) {
        _helpers.classCallCheck(this, DecorationsWidget);
        this.editor = editor;
        this.decorationIds = [];
        this.disposableStore = new _lifecycleJs.DisposableStore();
    }
    _helpers.createClass(DecorationsWidget, [
        {
            key: "dispose",
            value: function dispose() {
                this.clear();
                this.disposableStore.dispose();
            }
        },
        {
            key: "clear",
            value: function clear() {
                this.editor.deltaDecorations(this.decorationIds, []);
                this.disposableStore.clear();
            }
        },
        {
            key: "setParts",
            value: function setParts(lineNumber, parts, hiddenText) {
                this.disposableStore.clear();
                var textModel = this.editor.getModel();
                if (!textModel) return;
                var hiddenTextDecorations = new Array();
                if (hiddenText) hiddenTextDecorations.push({
                    range: _rangeJs.Range.fromPositions(new _positionJs.Position(lineNumber, hiddenText.column), new _positionJs.Position(lineNumber, hiddenText.column + hiddenText.length)),
                    options: {
                        inlineClassName: 'ghost-text-hidden',
                        description: 'ghost-text-hidden'
                    }
                });
                this.decorationIds = this.editor.deltaDecorations(this.decorationIds, parts.map(function(p) {
                    return {
                        range: _rangeJs.Range.fromPositions(new _positionJs.Position(lineNumber, p.column)),
                        options: {
                            description: 'ghost-text',
                            after: {
                                content: p.text,
                                inlineClassName: p.preview ? 'ghost-text-decoration-preview' : 'ghost-text-decoration'
                            },
                            showIfCollapsed: true
                        }
                    };
                }).concat(hiddenTextDecorations));
            }
        }
    ]);
    return DecorationsWidget;
}();
var AdditionalLinesWidget = /*#__PURE__*/ function() {
    "use strict";
    function AdditionalLinesWidget(editor, languageIdCodec) {
        _helpers.classCallCheck(this, AdditionalLinesWidget);
        this.editor = editor;
        this.languageIdCodec = languageIdCodec;
        this._viewZoneId = undefined;
    }
    _helpers.createClass(AdditionalLinesWidget, [
        {
            key: "viewZoneId",
            get: function get() {
                return this._viewZoneId;
            }
        },
        {
            key: "dispose",
            value: function dispose() {
                this.clear();
            }
        },
        {
            key: "clear",
            value: function clear() {
                var _this = this;
                this.editor.changeViewZones(function(changeAccessor) {
                    if (_this._viewZoneId) {
                        changeAccessor.removeZone(_this._viewZoneId);
                        _this._viewZoneId = undefined;
                    }
                });
            }
        },
        {
            key: "updateLines",
            value: function updateLines(lineNumber, additionalLines, minReservedLineCount) {
                var _this = this;
                var textModel = this.editor.getModel();
                if (!textModel) return;
                var tabSize = textModel.getOptions().tabSize;
                this.editor.changeViewZones(function(changeAccessor) {
                    if (_this._viewZoneId) {
                        changeAccessor.removeZone(_this._viewZoneId);
                        _this._viewZoneId = undefined;
                    }
                    var heightInLines = Math.max(additionalLines.length, minReservedLineCount);
                    if (heightInLines > 0) {
                        var domNode = document.createElement('div');
                        renderLines(domNode, tabSize, additionalLines, _this.editor.getOptions(), _this.languageIdCodec);
                        _this._viewZoneId = changeAccessor.addZone({
                            afterLineNumber: lineNumber,
                            heightInLines: heightInLines,
                            domNode: domNode
                        });
                    }
                });
            }
        }
    ]);
    return AdditionalLinesWidget;
}();
function renderLines(domNode, tabSize, lines, opts, languageIdCodec) {
    var disableMonospaceOptimizations = opts.get(29 /* disableMonospaceOptimizations */ );
    var stopRenderingLineAfter = opts.get(104 /* stopRenderingLineAfter */ );
    // To avoid visual confusion, we don't want to render visible whitespace
    var renderWhitespace = 'none';
    var renderControlCharacters = opts.get(82 /* renderControlCharacters */ );
    var fontLigatures = opts.get(44 /* fontLigatures */ );
    var fontInfo = opts.get(43 /* fontInfo */ );
    var lineHeight = opts.get(58 /* lineHeight */ );
    var sb = _stringBuilderJs.createStringBuilder(10000);
    sb.appendASCIIString('<div class="suggest-preview-text">');
    for(var i = 0, len = lines.length; i < len; i++){
        var lineData = lines[i];
        var line = lineData.content;
        sb.appendASCIIString('<div class="view-line');
        sb.appendASCIIString('" style="top:');
        sb.appendASCIIString(String(i * lineHeight));
        sb.appendASCIIString('px;width:1000000px;">');
        var isBasicASCII = _stringsJs.isBasicASCII(line);
        var containsRTL = _stringsJs.containsRTL(line);
        var lineTokens = _lineTokensJs.LineTokens.createEmpty(line, languageIdCodec);
        _viewLineRendererJs.renderViewLine(new _viewLineRendererJs.RenderLineInput(fontInfo.isMonospace && !disableMonospaceOptimizations, fontInfo.canUseHalfwidthRightwardsArrow, line, false, isBasicASCII, containsRTL, 0, lineTokens, lineData.decorations, tabSize, 0, fontInfo.spaceWidth, fontInfo.middotWidth, fontInfo.wsmiddotWidth, stopRenderingLineAfter, renderWhitespace, renderControlCharacters, fontLigatures !== _editorOptionsJs.EditorFontLigatures.OFF, null), sb);
        sb.appendASCIIString('</div>');
    }
    sb.appendASCIIString('</div>');
    _configurationJs.Configuration.applyFontInfoSlow(domNode, fontInfo);
    var html = sb.build();
    var trustedhtml = ttPolicy ? ttPolicy.createHTML(html) : html;
    domNode.innerHTML = trustedhtml;
}
var ViewMoreLinesContentWidget = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(ViewMoreLinesContentWidget, Disposable);
    var _super = _helpers.createSuper(ViewMoreLinesContentWidget);
    function ViewMoreLinesContentWidget(editor, position, domNode, disposableStore) {
        _helpers.classCallCheck(this, ViewMoreLinesContentWidget);
        var _this;
        _this = _super.call(this);
        _this.editor = editor;
        _this.position = position;
        _this.domNode = domNode;
        _this.allowEditorOverflow = false;
        _this.suppressMouseDown = false;
        _this._register(disposableStore);
        _this._register(_lifecycleJs.toDisposable(function() {
            _this.editor.removeContentWidget(_helpers.assertThisInitialized(_this));
        }));
        _this.editor.addContentWidget(_helpers.assertThisInitialized(_this));
        return _this;
    }
    _helpers.createClass(ViewMoreLinesContentWidget, [
        {
            key: "getId",
            value: function getId() {
                return 'editor.widget.viewMoreLinesWidget';
            }
        },
        {
            key: "getDomNode",
            value: function getDomNode() {
                return this.domNode;
            }
        },
        {
            key: "getPosition",
            value: function getPosition() {
                return {
                    position: this.position,
                    preference: [
                        0 /* EXACT */ 
                    ]
                };
            }
        }
    ]);
    return ViewMoreLinesContentWidget;
}(_lifecycleJs.Disposable);
_themeServiceJs.registerThemingParticipant(function(theme, collector) {
    var foreground = theme.getColor(_editorColorRegistryJs.ghostTextForeground);
    if (foreground) {
        // `!important` ensures that other decorations don't cause a style conflict (#132017).
        collector.addRule(".monaco-editor .ghost-text-decoration { color: ".concat(foreground.toString(), " !important; }"));
        collector.addRule(".monaco-editor .ghost-text-decoration-preview { color: ".concat(foreground.toString(), " !important; }"));
        collector.addRule(".monaco-editor .suggest-preview-text .ghost-text { color: ".concat(foreground.toString(), " !important; }"));
    }
    var background = theme.getColor(_editorColorRegistryJs.ghostTextBackground);
    if (background) {
        collector.addRule(".monaco-editor .ghost-text-decoration { background-color: ".concat(background.toString(), "; }"));
        collector.addRule(".monaco-editor .ghost-text-decoration-preview { background-color: ".concat(background.toString(), "; }"));
        collector.addRule(".monaco-editor .suggest-preview-text .ghost-text { background-color: ".concat(background.toString(), "; }"));
    }
    var border = theme.getColor(_editorColorRegistryJs.ghostTextBorder);
    if (border) {
        collector.addRule(".monaco-editor .suggest-preview-text .ghost-text { border: 1px solid ".concat(border, "; }"));
        collector.addRule(".monaco-editor .ghost-text-decoration { border: 1px solid ".concat(border, "; }"));
        collector.addRule(".monaco-editor .ghost-text-decoration-preview { border: 1px solid ".concat(border, "; }"));
    }
});

},{"@swc/helpers":"erO4s","../../../base/browser/dom.js":"bxmlc","../../../base/common/lifecycle.js":"bcbPy","../../../base/common/strings.js":"jsb6w","./ghostText.css":"dNPRW","../../browser/config/configuration.js":"hCKA4","../../common/config/editorOptions.js":"jb70u","../../common/core/lineTokens.js":"7jBCx","../../common/core/position.js":"6xP0w","../../common/core/range.js":"VbyL8","../../common/core/stringBuilder.js":"jo3Tk","../../common/services/modeService.js":"dNIX6","../../common/view/editorColorRegistry.js":"3F5El","../../common/viewLayout/lineDecorations.js":"hF3fz","../../common/viewLayout/viewLineRenderer.js":"YBNCK","../../../platform/instantiation/common/instantiation.js":"9ABZB","../../../platform/theme/common/themeService.js":"kE7QB","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"dNPRW":[function() {},{}],"elscl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "warningIcon", function() {
    return warningIcon;
});
parcelHelpers.export(exports, "UnicodeHighlighter", function() {
    return UnicodeHighlighter;
});
parcelHelpers.export(exports, "UnicodeHighlighterHoverParticipant", function() {
    return UnicodeHighlighterHoverParticipant;
});
parcelHelpers.export(exports, "DisableHighlightingOfAmbiguousCharactersAction", function() {
    return DisableHighlightingOfAmbiguousCharactersAction;
});
parcelHelpers.export(exports, "DisableHighlightingOfInvisibleCharactersAction", function() {
    return DisableHighlightingOfInvisibleCharactersAction;
});
parcelHelpers.export(exports, "DisableHighlightingOfNonBasicAsciiCharactersAction", function() {
    return DisableHighlightingOfNonBasicAsciiCharactersAction;
});
parcelHelpers.export(exports, "ShowExcludeOptions", function() {
    return ShowExcludeOptions;
});
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
var _asyncJs = require("../../../base/common/async.js");
var _codiconsJs = require("../../../base/common/codicons.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _stringsJs = require("../../../base/common/strings.js");
var _unicodeHighlighterCss = require("./unicodeHighlighter.css");
var _editorExtensionsJs = require("../../browser/editorExtensions.js");
var _editorOptionsJs = require("../../common/config/editorOptions.js");
var _modelJs = require("../../common/model.js");
var _textModelJs = require("../../common/model/textModel.js");
var _unicodeTextModelHighlighterJs = require("../../common/modes/unicodeTextModelHighlighter.js");
var _editorWorkerServiceJs = require("../../common/services/editorWorkerService.js");
var _modeServiceJs = require("../../common/services/modeService.js");
var _viewModelDecorationsJs = require("../../common/viewModel/viewModelDecorations.js");
var _markdownHoverParticipantJs = require("../hover/markdownHoverParticipant.js");
var _bannerControllerJs = require("./bannerController.js");
var _nlsJs = require("../../../nls.js");
var _configurationJs = require("../../../platform/configuration/common/configuration.js");
var _instantiationJs = require("../../../platform/instantiation/common/instantiation.js");
var _openerJs = require("../../../platform/opener/common/opener.js");
var _quickInputJs = require("../../../platform/quickinput/common/quickInput.js");
var _colorRegistryJs = require("../../../platform/theme/common/colorRegistry.js");
var _iconRegistryJs = require("../../../platform/theme/common/iconRegistry.js");
var _themeServiceJs = require("../../../platform/theme/common/themeService.js");
var _workspaceTrustJs = require("../../../platform/workspace/common/workspaceTrust.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var warningIcon = _iconRegistryJs.registerIcon('extensions-warning-message', _codiconsJs.Codicon.warning, _nlsJs.localize('warningIcon', 'Icon shown with a warning message in the extensions editor.'));
var UnicodeHighlighter = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(UnicodeHighlighter1, Disposable);
    var _super = _helpers.createSuper(UnicodeHighlighter1);
    function UnicodeHighlighter1(_editor, _editorWorkerService, _workspaceTrustService, instantiationService) {
        _helpers.classCallCheck(this, UnicodeHighlighter1);
        var _this;
        _this = _super.call(this);
        _this._editor = _editor;
        _this._editorWorkerService = _editorWorkerService;
        _this._workspaceTrustService = _workspaceTrustService;
        _this._highlighter = null;
        _this._bannerClosed = false;
        _this._updateState = function(state) {
            if (state && state.hasMore) {
                if (_this._bannerClosed) return;
                // This document contains many non-basic ASCII characters.
                var max = Math.max(state.ambiguousCharacterCount, state.nonBasicAsciiCharacterCount, state.invisibleCharacterCount);
                var data;
                if (state.nonBasicAsciiCharacterCount >= max) data = {
                    message: _nlsJs.localize('unicodeHighlighting.thisDocumentHasManyNonBasicAsciiUnicodeCharacters', 'This document contains many non-basic ASCII unicode characters'),
                    command: new DisableHighlightingOfNonBasicAsciiCharactersAction()
                };
                else if (state.ambiguousCharacterCount >= max) data = {
                    message: _nlsJs.localize('unicodeHighlighting.thisDocumentHasManyAmbiguousUnicodeCharacters', 'This document contains many ambiguous unicode characters'),
                    command: new DisableHighlightingOfAmbiguousCharactersAction()
                };
                else if (state.invisibleCharacterCount >= max) data = {
                    message: _nlsJs.localize('unicodeHighlighting.thisDocumentHasManyInvisibleUnicodeCharacters', 'This document contains many invisible unicode characters'),
                    command: new DisableHighlightingOfInvisibleCharactersAction()
                };
                else throw new Error('Unreachable');
                _this._bannerController.show({
                    id: 'unicodeHighlightBanner',
                    message: data.message,
                    icon: warningIcon,
                    actions: [
                        {
                            label: data.command.shortLabel,
                            href: "command:".concat(data.command.id)
                        }
                    ],
                    onClose: function() {
                        _this._bannerClosed = true;
                    }
                });
            } else _this._bannerController.hide();
        };
        _this._bannerController = _this._register(instantiationService.createInstance(_bannerControllerJs.BannerController, _editor));
        _this._register(_this._editor.onDidChangeModel(function() {
            _this._bannerClosed = false;
            _this._updateHighlighter();
        }));
        _this._options = _editor.getOption(112 /* unicodeHighlighting */ );
        _this._register(_workspaceTrustService.onDidChangeTrust(function(e) {
            _this._updateHighlighter();
        }));
        _this._register(_editor.onDidChangeConfiguration(function(e) {
            if (e.hasChanged(112 /* unicodeHighlighting */ )) {
                _this._options = _editor.getOption(112 /* unicodeHighlighting */ );
                _this._updateHighlighter();
            }
        }));
        _this._updateHighlighter();
        return _this;
    }
    _helpers.createClass(UnicodeHighlighter1, [
        {
            key: "dispose",
            value: function dispose() {
                if (this._highlighter) {
                    this._highlighter.dispose();
                    this._highlighter = null;
                }
                _helpers.get(_helpers.getPrototypeOf(UnicodeHighlighter1.prototype), "dispose", this).call(this);
            }
        },
        {
            key: "_updateHighlighter",
            value: function _updateHighlighter() {
                this._updateState(null);
                if (this._highlighter) {
                    this._highlighter.dispose();
                    this._highlighter = null;
                }
                if (!this._editor.hasModel()) return;
                var options = resolveOptions(this._workspaceTrustService.isWorkspaceTrusted(), this._options);
                if ([
                    options.nonBasicASCII,
                    options.ambiguousCharacters,
                    options.invisibleCharacters, 
                ].every(function(option) {
                    return option === false;
                })) // Don't do anything if the feature is fully disabled
                return;
                var highlightOptions = {
                    nonBasicASCII: options.nonBasicASCII,
                    ambiguousCharacters: options.ambiguousCharacters,
                    invisibleCharacters: options.invisibleCharacters,
                    includeComments: options.includeComments,
                    allowedCodePoints: Object.keys(options.allowedCharacters).map(function(c) {
                        return c.codePointAt(0);
                    })
                };
                if (this._editorWorkerService.canComputeUnicodeHighlights(this._editor.getModel().uri)) this._highlighter = new DocumentUnicodeHighlighter(this._editor, highlightOptions, this._updateState, this._editorWorkerService);
                else this._highlighter = new ViewportUnicodeHighlighter(this._editor, highlightOptions, this._updateState);
            }
        },
        {
            key: "getDecorationInfo",
            value: function getDecorationInfo(decorationId) {
                if (this._highlighter) return this._highlighter.getDecorationInfo(decorationId);
                return null;
            }
        }
    ]);
    return UnicodeHighlighter1;
}(_lifecycleJs.Disposable);
UnicodeHighlighter.ID = 'editor.contrib.unicodeHighlighter';
UnicodeHighlighter = __decorate([
    __param(1, _editorWorkerServiceJs.IEditorWorkerService),
    __param(2, _workspaceTrustJs.IWorkspaceTrustManagementService),
    __param(3, _instantiationJs.IInstantiationService)
], UnicodeHighlighter);
function resolveOptions(trusted, options) {
    var _a;
    return {
        nonBasicASCII: options.nonBasicASCII === _editorOptionsJs.inUntrustedWorkspace ? !trusted : options.nonBasicASCII,
        ambiguousCharacters: options.ambiguousCharacters,
        invisibleCharacters: options.invisibleCharacters,
        includeComments: options.includeComments === _editorOptionsJs.inUntrustedWorkspace ? !trusted : options.includeComments,
        allowedCharacters: (_a = options.allowedCharacters) !== null && _a !== void 0 ? _a : {}
    };
}
var DocumentUnicodeHighlighter = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(DocumentUnicodeHighlighter1, Disposable);
    var _super = _helpers.createSuper(DocumentUnicodeHighlighter1);
    function DocumentUnicodeHighlighter1(_editor, _options, _updateState, _editorWorkerService) {
        _helpers.classCallCheck(this, DocumentUnicodeHighlighter1);
        var _this;
        _this = _super.call(this);
        _this._editor = _editor;
        _this._options = _options;
        _this._updateState = _updateState;
        _this._editorWorkerService = _editorWorkerService;
        _this._model = _this._editor.getModel();
        _this._decorationIds = new Set();
        _this._updateSoon = _this._register(new _asyncJs.RunOnceScheduler(function() {
            return _this._update();
        }, 250));
        _this._register(_this._editor.onDidChangeModelContent(function() {
            _this._updateSoon.schedule();
        }));
        _this._updateSoon.schedule();
        return _this;
    }
    _helpers.createClass(DocumentUnicodeHighlighter1, [
        {
            key: "dispose",
            value: function dispose() {
                this._decorationIds = new Set(this._model.deltaDecorations(Array.from(this._decorationIds), []));
                _helpers.get(_helpers.getPrototypeOf(DocumentUnicodeHighlighter1.prototype), "dispose", this).call(this);
            }
        },
        {
            key: "_update",
            value: function _update() {
                var _this = this;
                if (!this._model.mightContainNonBasicASCII()) {
                    this._decorationIds = new Set(this._editor.deltaDecorations(Array.from(this._decorationIds), []));
                    return;
                }
                var modelVersionId = this._model.getVersionId();
                this._editorWorkerService.computedUnicodeHighlights(this._model.uri, this._options).then(function(info) {
                    if (_this._model.getVersionId() !== modelVersionId) // model changed in the meantime
                    return;
                    _this._updateState(info);
                    var decorations = [];
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    if (!info.hasMore) try {
                        // Don't show decoration if there are too many.
                        // In this case, a banner is shown.
                        for(var _iterator = info.ranges[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var range = _step.value;
                            decorations.push({
                                range: range,
                                options: _this._options.includeComments ? DECORATION : DECORATION_HIDE_IN_COMMENTS
                            });
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    _this._decorationIds = new Set(_this._editor.deltaDecorations(Array.from(_this._decorationIds), decorations));
                });
            }
        },
        {
            key: "getDecorationInfo",
            value: function getDecorationInfo(decorationId) {
                if (!this._decorationIds.has(decorationId)) return null;
                var model = this._editor.getModel();
                var range = model.getDecorationRange(decorationId);
                if (!_viewModelDecorationsJs.isModelDecorationVisible(model, {
                    range: range,
                    options: this._options.includeComments ? DECORATION : DECORATION_HIDE_IN_COMMENTS,
                    id: decorationId,
                    ownerId: 0
                })) return null;
                var text = model.getValueInRange(range);
                return {
                    reason: computeReason(text, this._options)
                };
            }
        }
    ]);
    return DocumentUnicodeHighlighter1;
}(_lifecycleJs.Disposable);
DocumentUnicodeHighlighter = __decorate([
    __param(3, _editorWorkerServiceJs.IEditorWorkerService)
], DocumentUnicodeHighlighter);
var ViewportUnicodeHighlighter = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(ViewportUnicodeHighlighter, Disposable);
    var _super = _helpers.createSuper(ViewportUnicodeHighlighter);
    function ViewportUnicodeHighlighter(_editor, _options, _updateState) {
        _helpers.classCallCheck(this, ViewportUnicodeHighlighter);
        var _this;
        _this = _super.call(this);
        _this._editor = _editor;
        _this._options = _options;
        _this._updateState = _updateState;
        _this._model = _this._editor.getModel();
        _this._decorationIds = new Set();
        _this._updateSoon = _this._register(new _asyncJs.RunOnceScheduler(function() {
            return _this._update();
        }, 250));
        _this._register(_this._editor.onDidLayoutChange(function() {
            _this._updateSoon.schedule();
        }));
        _this._register(_this._editor.onDidScrollChange(function() {
            _this._updateSoon.schedule();
        }));
        _this._register(_this._editor.onDidChangeHiddenAreas(function() {
            _this._updateSoon.schedule();
        }));
        _this._register(_this._editor.onDidChangeModelContent(function() {
            _this._updateSoon.schedule();
        }));
        _this._updateSoon.schedule();
        return _this;
    }
    _helpers.createClass(ViewportUnicodeHighlighter, [
        {
            key: "dispose",
            value: function dispose() {
                this._decorationIds = new Set(this._model.deltaDecorations(Array.from(this._decorationIds), []));
                _helpers.get(_helpers.getPrototypeOf(ViewportUnicodeHighlighter.prototype), "dispose", this).call(this);
            }
        },
        {
            key: "_update",
            value: function _update() {
                if (!this._model.mightContainNonBasicASCII()) {
                    this._decorationIds = new Set(this._editor.deltaDecorations(Array.from(this._decorationIds), []));
                    return;
                }
                var ranges = this._editor.getVisibleRanges();
                var decorations = [];
                var totalResult = {
                    ranges: [],
                    ambiguousCharacterCount: 0,
                    invisibleCharacterCount: 0,
                    nonBasicAsciiCharacterCount: 0,
                    hasMore: false
                };
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = ranges[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var range = _step.value;
                        var result = _unicodeTextModelHighlighterJs.UnicodeTextModelHighlighter.computeUnicodeHighlights(this._model, this._options, range);
                        var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                        try {
                            for(var _iterator1 = result.ranges[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                                var r = _step1.value;
                                totalResult.ranges.push(r);
                            }
                        } catch (err) {
                            _didIteratorError1 = true;
                            _iteratorError1 = err;
                        } finally{
                            try {
                                if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                                    _iterator1.return();
                                }
                            } finally{
                                if (_didIteratorError1) {
                                    throw _iteratorError1;
                                }
                            }
                        }
                        totalResult.ambiguousCharacterCount += totalResult.ambiguousCharacterCount;
                        totalResult.invisibleCharacterCount += totalResult.invisibleCharacterCount;
                        totalResult.nonBasicAsciiCharacterCount += totalResult.nonBasicAsciiCharacterCount;
                        totalResult.hasMore = totalResult.hasMore || result.hasMore;
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                var _iteratorNormalCompletion2 = true, _didIteratorError2 = false, _iteratorError2 = undefined;
                if (!totalResult.hasMore) try {
                    // Don't show decorations if there are too many.
                    // A banner will be shown instead.
                    for(var _iterator2 = totalResult.ranges[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true){
                        var range1 = _step2.value;
                        decorations.push({
                            range: range1,
                            options: this._options.includeComments ? DECORATION : DECORATION_HIDE_IN_COMMENTS
                        });
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                            _iterator2.return();
                        }
                    } finally{
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }
                this._updateState(totalResult);
                this._decorationIds = new Set(this._editor.deltaDecorations(Array.from(this._decorationIds), decorations));
            }
        },
        {
            key: "getDecorationInfo",
            value: function getDecorationInfo(decorationId) {
                if (!this._decorationIds.has(decorationId)) return null;
                var model = this._editor.getModel();
                var range = model.getDecorationRange(decorationId);
                var text = model.getValueInRange(range);
                if (!_viewModelDecorationsJs.isModelDecorationVisible(model, {
                    range: range,
                    options: this._options.includeComments ? DECORATION : DECORATION_HIDE_IN_COMMENTS,
                    id: decorationId,
                    ownerId: 0
                })) return null;
                return {
                    reason: computeReason(text, this._options)
                };
            }
        }
    ]);
    return ViewportUnicodeHighlighter;
}(_lifecycleJs.Disposable);
var UnicodeHighlighterHoverParticipant = /*#__PURE__*/ function() {
    "use strict";
    function UnicodeHighlighterHoverParticipant1(_editor, _hover, _modeService, _openerService) {
        _helpers.classCallCheck(this, UnicodeHighlighterHoverParticipant1);
        this._editor = _editor;
        this._hover = _hover;
        this._modeService = _modeService;
        this._openerService = _openerService;
    }
    _helpers.createClass(UnicodeHighlighterHoverParticipant1, [
        {
            key: "computeSync",
            value: function computeSync(anchor, lineDecorations) {
                if (!this._editor.hasModel() || anchor.type !== 1 /* Range */ ) return [];
                var model = this._editor.getModel();
                var unicodeHighlighter = this._editor.getContribution(UnicodeHighlighter.ID);
                var result = [];
                var index = 300;
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = lineDecorations[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var d = _step.value;
                        var highlightInfo = unicodeHighlighter.getDecorationInfo(d.id);
                        if (!highlightInfo) continue;
                        var char = model.getValueInRange(d.range);
                        // text refers to a single character.
                        var codePoint1 = char.codePointAt(0);
                        function formatCodePoint(codePoint) {
                            var value = "`U+".concat(codePoint.toString(16).padStart(4, '0'), "`");
                            if (!_stringsJs.InvisibleCharacters.isInvisibleCharacter(codePoint)) // Don't render any control characters or any invisible characters, as they cannot be seen anyways.
                            value += ' "'.concat("".concat(renderCodePointAsInlineCode(codePoint)), '"');
                            return value;
                        }
                        var codePointStr = formatCodePoint(codePoint1);
                        var reason = void 0;
                        switch(highlightInfo.reason.kind){
                            case 0 /* Ambiguous */ :
                                reason = _nlsJs.localize('unicodeHighlight.characterIsAmbiguous', 'The character {0} could be confused with the character {1}, which is more common in source code.', codePointStr, formatCodePoint(highlightInfo.reason.confusableWith.codePointAt(0)));
                                break;
                            case 1 /* Invisible */ :
                                reason = _nlsJs.localize('unicodeHighlight.characterIsInvisible', 'The character {0} is invisible.', codePointStr);
                                break;
                            case 2 /* NonBasicAscii */ :
                                reason = _nlsJs.localize('unicodeHighlight.characterIsNonBasicAscii', 'The character {0} is not a basic ASCII character.', codePointStr);
                                break;
                        }
                        var adjustSettingsArgs = {
                            codePoint: codePoint1,
                            reason: highlightInfo.reason.kind
                        };
                        var adjustSettings = _nlsJs.localize('unicodeHighlight.adjustSettings', 'Adjust settings');
                        var contents = [
                            {
                                value: "".concat(reason, " [").concat(adjustSettings, "](command:").concat(ShowExcludeOptions.ID, "?").concat(encodeURIComponent(JSON.stringify(adjustSettingsArgs)), ")"),
                                isTrusted: true
                            }
                        ];
                        result.push(new _markdownHoverParticipantJs.MarkdownHover(this, d.range, contents, index++));
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return result;
            }
        },
        {
            key: "renderHoverParts",
            value: function renderHoverParts(hoverParts, fragment, statusBar) {
                return _markdownHoverParticipantJs.renderMarkdownHovers(hoverParts, fragment, this._editor, this._hover, this._modeService, this._openerService);
            }
        }
    ]);
    return UnicodeHighlighterHoverParticipant1;
}();
UnicodeHighlighterHoverParticipant = __decorate([
    __param(2, _modeServiceJs.IModeService),
    __param(3, _openerJs.IOpenerService)
], UnicodeHighlighterHoverParticipant);
function renderCodePointAsInlineCode(codePoint) {
    if (codePoint === 96 /* BackTick */ ) return '`` ` ``';
    return '`' + String.fromCodePoint(codePoint) + '`';
}
function computeReason(char, options) {
    return _unicodeTextModelHighlighterJs.UnicodeTextModelHighlighter.computeUnicodeHighlightReason(char, options);
}
var DECORATION_HIDE_IN_COMMENTS = _textModelJs.ModelDecorationOptions.register({
    description: 'unicode-highlight',
    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
    className: 'unicode-highlight',
    showIfCollapsed: true,
    overviewRuler: {
        color: _themeServiceJs.themeColorFromId(_colorRegistryJs.overviewRulerUnicodeHighlightForeground),
        position: _modelJs.OverviewRulerLane.Center
    },
    minimap: {
        color: _themeServiceJs.themeColorFromId(_colorRegistryJs.minimapUnicodeHighlight),
        position: _modelJs.MinimapPosition.Inline
    },
    hideInCommentTokens: true
});
var DECORATION = _textModelJs.ModelDecorationOptions.register({
    description: 'unicode-highlight',
    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
    className: 'unicode-highlight',
    showIfCollapsed: true,
    overviewRuler: {
        color: _themeServiceJs.themeColorFromId(_colorRegistryJs.overviewRulerFindMatchForeground),
        position: _modelJs.OverviewRulerLane.Center
    },
    minimap: {
        color: _themeServiceJs.themeColorFromId(_colorRegistryJs.minimapFindMatch),
        position: _modelJs.MinimapPosition.Inline
    }
});
var DisableHighlightingOfAmbiguousCharactersAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(DisableHighlightingOfAmbiguousCharactersAction, EditorAction);
    var _super = _helpers.createSuper(DisableHighlightingOfAmbiguousCharactersAction);
    function DisableHighlightingOfAmbiguousCharactersAction() {
        _helpers.classCallCheck(this, DisableHighlightingOfAmbiguousCharactersAction);
        var _this;
        _this = _super.call(this, {
            id: DisableHighlightingOfAmbiguousCharactersAction.ID,
            label: _nlsJs.localize('action.unicodeHighlight.disableHighlightingOfAmbiguousCharacters', 'Disable highlighting of ambiguous characters'),
            alias: 'Disable highlighting of ambiguous characters',
            precondition: undefined
        });
        _this.shortLabel = _nlsJs.localize('unicodeHighlight.disableHighlightingOfAmbiguousCharacters.shortLabel', 'Disable Ambiguous Highlight');
        return _this;
    }
    _helpers.createClass(DisableHighlightingOfAmbiguousCharactersAction, [
        {
            key: "run",
            value: function run(accessor, editor, args) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var configurationService;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                configurationService = accessor === null || accessor === void 0 ? void 0 : accessor.get(_configurationJs.IConfigurationService);
                                if (configurationService) this.runAction(configurationService);
                            case 2:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this);
                }));
            }
        },
        {
            key: "runAction",
            value: function runAction(configurationService) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                _ctx.next = 2;
                                return configurationService.updateValue(_editorOptionsJs.unicodeHighlightConfigKeys.ambiguousCharacters, false, 1 /* USER */ );
                            case 2:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee);
                }));
            }
        }
    ]);
    return DisableHighlightingOfAmbiguousCharactersAction;
}(_editorExtensionsJs.EditorAction);
DisableHighlightingOfAmbiguousCharactersAction.ID = 'editor.action.unicodeHighlight.disableHighlightingOfAmbiguousCharacters';
var DisableHighlightingOfInvisibleCharactersAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(DisableHighlightingOfInvisibleCharactersAction, EditorAction);
    var _super = _helpers.createSuper(DisableHighlightingOfInvisibleCharactersAction);
    function DisableHighlightingOfInvisibleCharactersAction() {
        _helpers.classCallCheck(this, DisableHighlightingOfInvisibleCharactersAction);
        var _this;
        _this = _super.call(this, {
            id: DisableHighlightingOfInvisibleCharactersAction.ID,
            label: _nlsJs.localize('action.unicodeHighlight.disableHighlightingOfInvisibleCharacters', 'Disable highlighting of invisible characters'),
            alias: 'Disable highlighting of invisible characters',
            precondition: undefined
        });
        _this.shortLabel = _nlsJs.localize('unicodeHighlight.disableHighlightingOfInvisibleCharacters.shortLabel', 'Disable Invisible Highlight');
        return _this;
    }
    _helpers.createClass(DisableHighlightingOfInvisibleCharactersAction, [
        {
            key: "run",
            value: function run(accessor, editor, args) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var configurationService;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                configurationService = accessor === null || accessor === void 0 ? void 0 : accessor.get(_configurationJs.IConfigurationService);
                                if (configurationService) this.runAction(configurationService);
                            case 2:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this);
                }));
            }
        },
        {
            key: "runAction",
            value: function runAction(configurationService) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                _ctx.next = 2;
                                return configurationService.updateValue(_editorOptionsJs.unicodeHighlightConfigKeys.invisibleCharacters, false, 1 /* USER */ );
                            case 2:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee);
                }));
            }
        }
    ]);
    return DisableHighlightingOfInvisibleCharactersAction;
}(_editorExtensionsJs.EditorAction);
DisableHighlightingOfInvisibleCharactersAction.ID = 'editor.action.unicodeHighlight.disableHighlightingOfInvisibleCharacters';
var DisableHighlightingOfNonBasicAsciiCharactersAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(DisableHighlightingOfNonBasicAsciiCharactersAction, EditorAction);
    var _super = _helpers.createSuper(DisableHighlightingOfNonBasicAsciiCharactersAction);
    function DisableHighlightingOfNonBasicAsciiCharactersAction() {
        _helpers.classCallCheck(this, DisableHighlightingOfNonBasicAsciiCharactersAction);
        var _this;
        _this = _super.call(this, {
            id: DisableHighlightingOfNonBasicAsciiCharactersAction.ID,
            label: _nlsJs.localize('action.unicodeHighlight.disableHighlightingOfNonBasicAsciiCharacters', 'Disable highlighting of non basic ASCII characters'),
            alias: 'Disable highlighting of non basic ASCII characters',
            precondition: undefined
        });
        _this.shortLabel = _nlsJs.localize('unicodeHighlight.disableHighlightingOfNonBasicAsciiCharacters.shortLabel', 'Disable Non ASCII Highlight');
        return _this;
    }
    _helpers.createClass(DisableHighlightingOfNonBasicAsciiCharactersAction, [
        {
            key: "run",
            value: function run(accessor, editor, args) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var configurationService;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                configurationService = accessor === null || accessor === void 0 ? void 0 : accessor.get(_configurationJs.IConfigurationService);
                                if (configurationService) this.runAction(configurationService);
                            case 2:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this);
                }));
            }
        },
        {
            key: "runAction",
            value: function runAction(configurationService) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                _ctx.next = 2;
                                return configurationService.updateValue(_editorOptionsJs.unicodeHighlightConfigKeys.nonBasicASCII, false, 1 /* USER */ );
                            case 2:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee);
                }));
            }
        }
    ]);
    return DisableHighlightingOfNonBasicAsciiCharactersAction;
}(_editorExtensionsJs.EditorAction);
DisableHighlightingOfNonBasicAsciiCharactersAction.ID = 'editor.action.unicodeHighlight.disableHighlightingOfNonBasicAsciiCharacters';
var ShowExcludeOptions = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(ShowExcludeOptions, EditorAction);
    var _super = _helpers.createSuper(ShowExcludeOptions);
    function ShowExcludeOptions() {
        _helpers.classCallCheck(this, ShowExcludeOptions);
        return _super.call(this, {
            id: ShowExcludeOptions.ID,
            label: _nlsJs.localize('action.unicodeHighlight.showExcludeOptions', "Show Exclude Options"),
            alias: 'Show Exclude Options',
            precondition: undefined
        });
    }
    _helpers.createClass(ShowExcludeOptions, [
        {
            key: "run",
            value: function run(accessor, editor, args) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee1() {
                    var codePoint4, reason, char, quickPickService, configurationService, getExcludeCharFromBeingHighlightedLabel, options, _this, action, _this1, action1, _this2, action2, result;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx1) {
                        while(1)switch(_ctx1.prev = _ctx1.next){
                            case 0:
                                getExcludeCharFromBeingHighlightedLabel = function _getExcludeCharFromBeingHighlightedLabel(codePoint) {
                                    if (_stringsJs.InvisibleCharacters.isInvisibleCharacter(codePoint)) return _nlsJs.localize('unicodeHighlight.excludeInvisibleCharFromBeingHighlighted', 'Exclude {0} (invisible character) from being highlighted', "U+".concat(codePoint.toString(16)));
                                    return _nlsJs.localize('unicodeHighlight.excludeCharFromBeingHighlighted', 'Exclude {0} from being highlighted', "U+".concat(codePoint.toString(16), ' "').concat(char, '"'));
                                };
                                codePoint4 = args.codePoint, reason = args.reason;
                                char = String.fromCodePoint(codePoint4);
                                quickPickService = accessor.get(_quickInputJs.IQuickInputService);
                                configurationService = accessor.get(_configurationJs.IConfigurationService);
                                ;
                                options = [
                                    {
                                        label: getExcludeCharFromBeingHighlightedLabel(codePoint4),
                                        run: function() {
                                            return excludeCharFromBeingHighlighted(configurationService, [
                                                codePoint4
                                            ]);
                                        }
                                    }, 
                                ];
                                if (reason === 0 /* Ambiguous */ ) {
                                    _this = this;
                                    action = new DisableHighlightingOfAmbiguousCharactersAction();
                                    options.push({
                                        label: action.label,
                                        run: function() {
                                            return __awaiter(_this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                                                return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                                                    while(1)switch(_ctx.prev = _ctx.next){
                                                        case 0:
                                                            return _ctx.abrupt("return", action.runAction(configurationService));
                                                        case 1:
                                                        case "end":
                                                            return _ctx.stop();
                                                    }
                                                }, _callee);
                                            }));
                                        }
                                    });
                                } else if (reason === 1 /* Invisible */ ) {
                                    _this1 = this;
                                    action1 = new DisableHighlightingOfInvisibleCharactersAction();
                                    options.push({
                                        label: action1.label,
                                        run: function() {
                                            return __awaiter(_this1, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                                                return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                                                    while(1)switch(_ctx.prev = _ctx.next){
                                                        case 0:
                                                            return _ctx.abrupt("return", action1.runAction(configurationService));
                                                        case 1:
                                                        case "end":
                                                            return _ctx.stop();
                                                    }
                                                }, _callee);
                                            }));
                                        }
                                    });
                                } else if (reason === 2 /* NonBasicAscii */ ) {
                                    _this2 = this;
                                    action2 = new DisableHighlightingOfNonBasicAsciiCharactersAction();
                                    options.push({
                                        label: action2.label,
                                        run: function() {
                                            return __awaiter(_this2, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                                                return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                                                    while(1)switch(_ctx.prev = _ctx.next){
                                                        case 0:
                                                            return _ctx.abrupt("return", action2.runAction(configurationService));
                                                        case 1:
                                                        case "end":
                                                            return _ctx.stop();
                                                    }
                                                }, _callee);
                                            }));
                                        }
                                    });
                                } else expectNever(reason);
                                _ctx1.next = 10;
                                return quickPickService.pick(options, {
                                    title: _nlsJs.localize('unicodeHighlight.configureUnicodeHighlightOptions', 'Configure Unicode Highlight Options')
                                });
                            case 10:
                                result = _ctx1.sent;
                                if (!result) {
                                    _ctx1.next = 14;
                                    break;
                                }
                                _ctx1.next = 14;
                                return result.run();
                            case 14:
                            case "end":
                                return _ctx1.stop();
                        }
                    }, _callee1, this);
                }));
            }
        }
    ]);
    return ShowExcludeOptions;
}(_editorExtensionsJs.EditorAction);
ShowExcludeOptions.ID = 'editor.action.unicodeHighlight.showExcludeOptions';
function excludeCharFromBeingHighlighted(configurationService, charCodes) {
    return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
        var existingValue, value, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, charCode;
        return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
            while(1)switch(_ctx.prev = _ctx.next){
                case 0:
                    existingValue = configurationService.getValue(_editorOptionsJs.unicodeHighlightConfigKeys.allowedCharacters);
                    ;
                    if (typeof existingValue === 'object' && existingValue) value = existingValue;
                    else value = {};
                    _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    _ctx.prev = 4;
                    for(_iterator = charCodes[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        charCode = _step.value;
                        value[String.fromCodePoint(charCode)] = true;
                    }
                    _ctx.next = 12;
                    break;
                case 8:
                    _ctx.prev = 8;
                    _ctx.t0 = _ctx["catch"](4);
                    _didIteratorError = true;
                    _iteratorError = _ctx.t0;
                case 12:
                    _ctx.prev = 12;
                    _ctx.prev = 13;
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                    }
                case 15:
                    _ctx.prev = 15;
                    if (!_didIteratorError) {
                        _ctx.next = 18;
                        break;
                    }
                    throw _iteratorError;
                case 18:
                    return _ctx.finish(15);
                case 19:
                    return _ctx.finish(12);
                case 20:
                    _ctx.next = 22;
                    return configurationService.updateValue(_editorOptionsJs.unicodeHighlightConfigKeys.allowedCharacters, value, 1 /* USER */ );
                case 22:
                case "end":
                    return _ctx.stop();
            }
        }, _callee, null, [
            [
                4,
                8,
                12,
                20
            ],
            [
                13,
                ,
                15,
                19
            ]
        ]);
    }));
}
function expectNever(value) {
    throw new Error("Unexpected value: ".concat(value));
}
_editorExtensionsJs.registerEditorAction(DisableHighlightingOfAmbiguousCharactersAction);
_editorExtensionsJs.registerEditorAction(DisableHighlightingOfInvisibleCharactersAction);
_editorExtensionsJs.registerEditorAction(DisableHighlightingOfNonBasicAsciiCharactersAction);
_editorExtensionsJs.registerEditorAction(ShowExcludeOptions);
_editorExtensionsJs.registerEditorContribution(UnicodeHighlighter.ID, UnicodeHighlighter);

},{"@swc/helpers":"erO4s","regenerator-runtime":"12Ae8","../../../base/common/async.js":"kMhSh","../../../base/common/codicons.js":"j24JC","../../../base/common/lifecycle.js":"bcbPy","../../../base/common/strings.js":"jsb6w","./unicodeHighlighter.css":"9tSLi","../../browser/editorExtensions.js":"dFnlo","../../common/config/editorOptions.js":"jb70u","../../common/model.js":"dUHFC","../../common/model/textModel.js":"f18vR","../../common/modes/unicodeTextModelHighlighter.js":"1EMFf","../../common/services/editorWorkerService.js":"jXu2E","../../common/services/modeService.js":"dNIX6","../../common/viewModel/viewModelDecorations.js":"3oZv3","../hover/markdownHoverParticipant.js":"3IqyG","./bannerController.js":"l6wnu","../../../nls.js":"9djYb","../../../platform/configuration/common/configuration.js":"9wFfb","../../../platform/instantiation/common/instantiation.js":"9ABZB","../../../platform/opener/common/opener.js":"nEUGw","../../../platform/quickinput/common/quickInput.js":"2k9Ij","../../../platform/theme/common/colorRegistry.js":"lKtxS","../../../platform/theme/common/iconRegistry.js":"evGtc","../../../platform/theme/common/themeService.js":"kE7QB","../../../platform/workspace/common/workspaceTrust.js":"5xA8i","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"9tSLi":[function() {},{}],"l6wnu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BannerController", function() {
    return BannerController;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _bannerControllerCss = require("./bannerController.css");
var _domJs = require("../../../base/browser/dom.js");
var _actionbarJs = require("../../../base/browser/ui/actionbar/actionbar.js");
var _actionsJs = require("../../../base/common/actions.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _markdownRendererJs = require("../../browser/core/markdownRenderer.js");
var _instantiationJs = require("../../../platform/instantiation/common/instantiation.js");
var _linkJs = require("../../../platform/opener/browser/link.js");
var _iconRegistryJs = require("../../../platform/theme/common/iconRegistry.js");
var _themeServiceJs = require("../../../platform/theme/common/themeService.js");
var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var BANNER_ELEMENT_HEIGHT = 26;
var BannerController = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(BannerController1, Disposable);
    var _super = _helpers.createSuper(BannerController1);
    function BannerController1(_editor, instantiationService) {
        _helpers.classCallCheck(this, BannerController1);
        var _this;
        _this = _super.call(this);
        _this._editor = _editor;
        _this.instantiationService = instantiationService;
        _this.banner = _this._register(_this.instantiationService.createInstance(Banner));
        return _this;
    }
    _helpers.createClass(BannerController1, [
        {
            key: "hide",
            value: function hide() {
                this._editor.setBanner(null, 0);
                this.banner.clear();
            }
        },
        {
            key: "show",
            value: function show(item) {
                var _this = this;
                this.banner.show(Object.assign(Object.assign({}, item), {
                    onClose: function() {
                        _this.hide();
                        if (item.onClose) item.onClose();
                    }
                }));
                this._editor.setBanner(this.banner.element, BANNER_ELEMENT_HEIGHT);
            }
        }
    ]);
    return BannerController1;
}(_lifecycleJs.Disposable);
BannerController = __decorate([
    __param(1, _instantiationJs.IInstantiationService)
], BannerController);
// TODO@hediet: Investigate if this can be reused by the workspace banner (bannerPart.ts).
var Banner = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(Banner1, Disposable);
    var _super = _helpers.createSuper(Banner1);
    function Banner1(instantiationService) {
        _helpers.classCallCheck(this, Banner1);
        var _this;
        _this = _super.call(this);
        _this.instantiationService = instantiationService;
        _this.markdownRenderer = _this.instantiationService.createInstance(_markdownRendererJs.MarkdownRenderer, {});
        _this.element = _domJs.$('div.editor-banner');
        _this.element.tabIndex = 0;
        return _this;
    }
    _helpers.createClass(Banner1, [
        {
            key: "getAriaLabel",
            value: function getAriaLabel(item) {
                if (item.ariaLabel) return item.ariaLabel;
                if (typeof item.message === 'string') return item.message;
                return undefined;
            }
        },
        {
            key: "getBannerMessage",
            value: function getBannerMessage(message) {
                if (typeof message === 'string') {
                    var element = _domJs.$('span');
                    element.innerText = message;
                    return element;
                }
                return this.markdownRenderer.render(message).element;
            }
        },
        {
            key: "clear",
            value: function clear() {
                _domJs.clearNode(this.element);
            }
        },
        {
            key: "show",
            value: function show(item) {
                // Clear previous item
                _domJs.clearNode(this.element);
                // Banner aria label
                var ariaLabel = this.getAriaLabel(item);
                if (ariaLabel) this.element.setAttribute('aria-label', ariaLabel);
                // Icon
                var iconContainer = _domJs.append(this.element, _domJs.$('div.icon-container'));
                iconContainer.setAttribute('aria-hidden', 'true');
                if (item.icon) iconContainer.appendChild(_domJs.$("div".concat(_themeServiceJs.ThemeIcon.asCSSSelector(item.icon))));
                // Message
                var messageContainer = _domJs.append(this.element, _domJs.$('div.message-container'));
                messageContainer.setAttribute('aria-hidden', 'true');
                messageContainer.appendChild(this.getBannerMessage(item.message));
                // Message Actions
                this.messageActionsContainer = _domJs.append(this.element, _domJs.$('div.message-actions-container'));
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                if (item.actions) try {
                    for(var _iterator = item.actions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var action = _step.value;
                        this._register(this.instantiationService.createInstance(_linkJs.Link, this.messageActionsContainer, Object.assign(Object.assign({}, action), {
                            tabIndex: -1
                        }), {}));
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                // Action
                var actionBarContainer = _domJs.append(this.element, _domJs.$('div.action-container'));
                this.actionBar = this._register(new _actionbarJs.ActionBar(actionBarContainer));
                this.actionBar.push(this._register(new _actionsJs.Action('banner.close', 'Close Banner', _themeServiceJs.ThemeIcon.asClassName(_iconRegistryJs.widgetClose), true, function() {
                    if (typeof item.onClose === 'function') item.onClose();
                })), {
                    icon: true,
                    label: false
                });
                this.actionBar.setFocusable(false);
            }
        }
    ]);
    return Banner1;
}(_lifecycleJs.Disposable);
Banner = __decorate([
    __param(0, _instantiationJs.IInstantiationService)
], Banner);

},{"@swc/helpers":"erO4s","./bannerController.css":"nBsgQ","../../../base/browser/dom.js":"bxmlc","../../../base/browser/ui/actionbar/actionbar.js":"1SkD3","../../../base/common/actions.js":"5c0wW","../../../base/common/lifecycle.js":"bcbPy","../../browser/core/markdownRenderer.js":"7tjMJ","../../../platform/instantiation/common/instantiation.js":"9ABZB","../../../platform/opener/browser/link.js":"aKdYW","../../../platform/theme/common/iconRegistry.js":"evGtc","../../../platform/theme/common/themeService.js":"kE7QB","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"nBsgQ":[function() {},{}],"aKdYW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Link", function() {
    return Link;
});
var _helpers = require("@swc/helpers");
var _domJs = require("../../../base/browser/dom.js");
var _eventJs = require("../../../base/browser/event.js");
var _keyboardEventJs = require("../../../base/browser/keyboardEvent.js");
var _touchJs = require("../../../base/browser/touch.js");
var _eventJs1 = require("../../../base/common/event.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _openerJs = require("../common/opener.js");
var _colorRegistryJs = require("../../theme/common/colorRegistry.js");
var _themeServiceJs = require("../../theme/common/themeService.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var Link = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(Link1, Disposable);
    var _super = _helpers.createSuper(Link1);
    function Link1(container, _link) {
        var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, openerService = arguments.length > 3 ? arguments[3] : void 0;
        _helpers.classCallCheck(this, Link1);
        var _this;
        var _a;
        _this = _super.call(this);
        _this._link = _link;
        _this._enabled = true;
        _this.el = _domJs.append(container, _domJs.$('a.monaco-link', {
            tabIndex: (_a = _link.tabIndex) !== null && _a !== void 0 ? _a : 0,
            href: _link.href,
            title: _link.title
        }, _link.label));
        _this.el.setAttribute('role', 'button');
        var onClickEmitter = _this._register(new _eventJs.DomEmitter(_this.el, 'click'));
        var onKeyPress = _this._register(new _eventJs.DomEmitter(_this.el, 'keypress'));
        var onEnterPress = _eventJs1.Event.chain(onKeyPress.event).map(function(e) {
            return new _keyboardEventJs.StandardKeyboardEvent(e);
        }).filter(function(e) {
            return e.keyCode === 3 /* Enter */ ;
        }).event;
        var onTap = _this._register(new _eventJs.DomEmitter(_this.el, _touchJs.EventType.Tap)).event;
        _this._register(_touchJs.Gesture.addTarget(_this.el));
        var onOpen = _eventJs1.Event.any(onClickEmitter.event, onEnterPress, onTap);
        _this._register(onOpen(function(e) {
            if (!_this.enabled) return;
            _domJs.EventHelper.stop(e, true);
            if (options === null || options === void 0 ? void 0 : options.opener) options.opener(_this._link.href);
            else openerService.open(_this._link.href, {
                allowCommands: true
            });
        }));
        _this.enabled = true;
        return _this;
    }
    _helpers.createClass(Link1, [
        {
            key: "enabled",
            get: function get() {
                return this._enabled;
            },
            set: function set(enabled) {
                if (enabled) {
                    this.el.setAttribute('aria-disabled', 'false');
                    this.el.tabIndex = 0;
                    this.el.style.pointerEvents = 'auto';
                    this.el.style.opacity = '1';
                    this.el.style.cursor = 'pointer';
                    this._enabled = false;
                } else {
                    this.el.setAttribute('aria-disabled', 'true');
                    this.el.tabIndex = -1;
                    this.el.style.pointerEvents = 'none';
                    this.el.style.opacity = '0.4';
                    this.el.style.cursor = 'default';
                    this._enabled = true;
                }
                this._enabled = enabled;
            }
        }
    ]);
    return Link1;
}(_lifecycleJs.Disposable);
Link = __decorate([
    __param(3, _openerJs.IOpenerService)
], Link);
_themeServiceJs.registerThemingParticipant(function(theme, collector) {
    var textLinkForegroundColor = theme.getColor(_colorRegistryJs.textLinkForeground);
    if (textLinkForegroundColor) collector.addRule(".monaco-link { color: ".concat(textLinkForegroundColor, "; }"));
    var textLinkActiveForegroundColor = theme.getColor(_colorRegistryJs.textLinkActiveForeground);
    if (textLinkActiveForegroundColor) collector.addRule(".monaco-link:hover { color: ".concat(textLinkActiveForegroundColor, "; }"));
});

},{"@swc/helpers":"erO4s","../../../base/browser/dom.js":"bxmlc","../../../base/browser/event.js":"eSUjm","../../../base/browser/keyboardEvent.js":"fMCNR","../../../base/browser/touch.js":"8QLOK","../../../base/common/event.js":"9IBcK","../../../base/common/lifecycle.js":"bcbPy","../common/opener.js":"nEUGw","../../theme/common/colorRegistry.js":"lKtxS","../../theme/common/themeService.js":"kE7QB","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"6Tcgw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ModesGlyphHoverWidget", function() {
    return ModesGlyphHoverWidget;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _domJs = require("../../../base/browser/dom.js");
var _arraysJs = require("../../../base/common/arrays.js");
var _htmlContentJs = require("../../../base/common/htmlContent.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _markdownRendererJs = require("../../browser/core/markdownRenderer.js");
var _hoverOperationJs = require("./hoverOperation.js");
var _widgetJs = require("../../../base/browser/ui/widget.js");
var _openerJs = require("../../../platform/opener/common/opener.js");
var _hoverWidgetJs = require("../../../base/browser/ui/hover/hoverWidget.js");
var $ = _domJs.$;
var MarginComputer = /*#__PURE__*/ function() {
    "use strict";
    function MarginComputer(editor) {
        _helpers.classCallCheck(this, MarginComputer);
        this._editor = editor;
        this._lineNumber = -1;
        this._result = [];
    }
    _helpers.createClass(MarginComputer, [
        {
            key: "setLineNumber",
            value: function setLineNumber(lineNumber) {
                this._lineNumber = lineNumber;
                this._result = [];
            }
        },
        {
            key: "clearResult",
            value: function clearResult() {
                this._result = [];
            }
        },
        {
            key: "computeSync",
            value: function computeSync() {
                var toHoverMessage = function(contents) {
                    return {
                        value: contents
                    };
                };
                var lineDecorations = this._editor.getLineDecorations(this._lineNumber);
                var result = [];
                if (!lineDecorations) return result;
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = lineDecorations[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var d = _step.value;
                        var _result;
                        if (!d.options.glyphMarginClassName) continue;
                        var hoverMessage = d.options.glyphMarginHoverMessage;
                        if (!hoverMessage || _htmlContentJs.isEmptyMarkdownString(hoverMessage)) continue;
                        (_result = result).push.apply(_result, _helpers.toConsumableArray(_arraysJs.asArray(hoverMessage).map(toHoverMessage)));
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return result;
            }
        },
        {
            key: "onResult",
            value: function onResult(result, isFromSynchronousComputation) {
                this._result = this._result.concat(result);
            }
        },
        {
            key: "getResult",
            value: function getResult() {
                return this._result;
            }
        },
        {
            key: "getResultWithLoadingMessage",
            value: function getResultWithLoadingMessage() {
                return this.getResult();
            }
        }
    ]);
    return MarginComputer;
}();
var ModesGlyphHoverWidget = /*#__PURE__*/ function(Widget) {
    "use strict";
    _helpers.inherits(ModesGlyphHoverWidget, Widget);
    var _super = _helpers.createSuper(ModesGlyphHoverWidget);
    function ModesGlyphHoverWidget(editor, modeService) {
        var openerService = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : _openerJs.NullOpenerService;
        _helpers.classCallCheck(this, ModesGlyphHoverWidget);
        var _this;
        _this = _super.call(this);
        _this._renderDisposeables = _this._register(new _lifecycleJs.DisposableStore());
        _this._editor = editor;
        _this._isVisible = false;
        _this._messages = [];
        _this._lastLineNumber = -1;
        _this._hover = _this._register(new _hoverWidgetJs.HoverWidget());
        _this._hover.containerDomNode.classList.toggle('hidden', !_this._isVisible);
        _this._markdownRenderer = _this._register(new _markdownRendererJs.MarkdownRenderer({
            editor: _this._editor
        }, modeService, openerService));
        _this._computer = new MarginComputer(_this._editor);
        _this._hoverOperation = new _hoverOperationJs.HoverOperation(_this._computer, function(result) {
            return _this._withResult(result);
        }, undefined, function(result) {
            return _this._withResult(result);
        }, 300);
        _this._register(_this._editor.onDidChangeConfiguration(function(e) {
            if (e.hasChanged(43 /* fontInfo */ )) _this._updateFont();
        }));
        _this._editor.addOverlayWidget(_helpers.assertThisInitialized(_this));
        return _this;
    }
    _helpers.createClass(ModesGlyphHoverWidget, [
        {
            key: "dispose",
            value: function dispose() {
                this._hoverOperation.cancel();
                this._editor.removeOverlayWidget(this);
                _helpers.get(_helpers.getPrototypeOf(ModesGlyphHoverWidget.prototype), "dispose", this).call(this);
            }
        },
        {
            key: "getId",
            value: function getId() {
                return ModesGlyphHoverWidget.ID;
            }
        },
        {
            key: "getDomNode",
            value: function getDomNode() {
                return this._hover.containerDomNode;
            }
        },
        {
            key: "getPosition",
            value: function getPosition() {
                return null;
            }
        },
        {
            key: "_showAt",
            value: function _showAt(lineNumber) {
                if (!this._isVisible) {
                    this._isVisible = true;
                    this._hover.containerDomNode.classList.toggle('hidden', !this._isVisible);
                }
                var editorLayout = this._editor.getLayoutInfo();
                var topForLineNumber = this._editor.getTopForLineNumber(lineNumber);
                var editorScrollTop = this._editor.getScrollTop();
                var lineHeight = this._editor.getOption(58 /* lineHeight */ );
                var nodeHeight = this._hover.containerDomNode.clientHeight;
                var top = topForLineNumber - editorScrollTop - (nodeHeight - lineHeight) / 2;
                this._hover.containerDomNode.style.left = "".concat(editorLayout.glyphMarginLeft + editorLayout.glyphMarginWidth, "px");
                this._hover.containerDomNode.style.top = "".concat(Math.max(Math.round(top), 0), "px");
            }
        },
        {
            key: "_updateFont",
            value: function _updateFont() {
                var _this = this;
                var codeClasses = Array.prototype.slice.call(this._hover.contentsDomNode.getElementsByClassName('code'));
                codeClasses.forEach(function(node) {
                    return _this._editor.applyFontInfo(node);
                });
            }
        },
        {
            key: "_updateContents",
            value: function _updateContents(node) {
                this._hover.contentsDomNode.textContent = '';
                this._hover.contentsDomNode.appendChild(node);
                this._updateFont();
            }
        },
        {
            key: "onModelDecorationsChanged",
            value: function onModelDecorationsChanged() {
                if (this._isVisible) {
                    // The decorations have changed and the hover is visible,
                    // we need to recompute the displayed text
                    this._hoverOperation.cancel();
                    this._computer.clearResult();
                    this._hoverOperation.start(0 /* Delayed */ );
                }
            }
        },
        {
            key: "startShowingAt",
            value: function startShowingAt(lineNumber) {
                if (this._lastLineNumber === lineNumber) // We have to show the widget at the exact same line number as before, so no work is needed
                return;
                this._hoverOperation.cancel();
                this.hide();
                this._lastLineNumber = lineNumber;
                this._computer.setLineNumber(lineNumber);
                this._hoverOperation.start(0 /* Delayed */ );
            }
        },
        {
            key: "hide",
            value: function hide() {
                this._lastLineNumber = -1;
                this._hoverOperation.cancel();
                if (!this._isVisible) return;
                this._isVisible = false;
                this._hover.containerDomNode.classList.toggle('hidden', !this._isVisible);
            }
        },
        {
            key: "_withResult",
            value: function _withResult(result) {
                this._messages = result;
                if (this._messages.length > 0) this._renderMessages(this._lastLineNumber, this._messages);
                else this.hide();
            }
        },
        {
            key: "_renderMessages",
            value: function _renderMessages(lineNumber, messages) {
                this._renderDisposeables.clear();
                var fragment = document.createDocumentFragment();
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = messages[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var msg = _step.value;
                        var markdownHoverElement = $('div.hover-row.markdown-hover');
                        var hoverContentsElement = _domJs.append(markdownHoverElement, $('div.hover-contents'));
                        var renderedContents = this._renderDisposeables.add(this._markdownRenderer.render(msg.value));
                        hoverContentsElement.appendChild(renderedContents.element);
                        fragment.appendChild(markdownHoverElement);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                this._updateContents(fragment);
                this._showAt(lineNumber);
            }
        }
    ]);
    return ModesGlyphHoverWidget;
}(_widgetJs.Widget);
ModesGlyphHoverWidget.ID = 'editor.contrib.modesGlyphHoverWidget';

},{"@swc/helpers":"erO4s","../../../base/browser/dom.js":"bxmlc","../../../base/common/arrays.js":"bZs3E","../../../base/common/htmlContent.js":"i3TMB","../../../base/common/lifecycle.js":"bcbPy","../../browser/core/markdownRenderer.js":"7tjMJ","./hoverOperation.js":"6dDxJ","../../../base/browser/ui/widget.js":"2HEtf","../../../platform/opener/common/opener.js":"nEUGw","../../../base/browser/ui/hover/hoverWidget.js":"5vfHP","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"9NtgH":[function(require,module,exports) {
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _keyCodesJs = require("../../../base/common/keyCodes.js");
var _editorExtensionsJs = require("../../browser/editorExtensions.js");
var _rangeJs = require("../../common/core/range.js");
var _editorContextKeysJs = require("../../common/editorContextKeys.js");
var _blockCommentCommandJs = require("./blockCommentCommand.js");
var _lineCommentCommandJs = require("./lineCommentCommand.js");
var _nlsJs = require("../../../nls.js");
var _actionsJs = require("../../../platform/actions/common/actions.js");
var CommentLineAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(CommentLineAction, EditorAction);
    var _super = _helpers.createSuper(CommentLineAction);
    function CommentLineAction(type, opts) {
        _helpers.classCallCheck(this, CommentLineAction);
        var _this;
        _this = _super.call(this, opts);
        _this._type = type;
        return _this;
    }
    _helpers.createClass(CommentLineAction, [
        {
            key: "run",
            value: function run(accessor, editor) {
                if (!editor.hasModel()) return;
                var model = editor.getModel();
                var commands = [];
                var modelOptions = model.getOptions();
                var commentsOptions = editor.getOption(19 /* comments */ );
                var selections = editor.getSelections().map(function(selection, index) {
                    return {
                        selection: selection,
                        index: index,
                        ignoreFirstLine: false
                    };
                });
                selections.sort(function(a, b) {
                    return _rangeJs.Range.compareRangesUsingStarts(a.selection, b.selection);
                });
                // Remove selections that would result in copying the same line
                var prev = selections[0];
                for(var i = 1; i < selections.length; i++){
                    var curr = selections[i];
                    if (prev.selection.endLineNumber === curr.selection.startLineNumber) {
                        // these two selections would copy the same line
                        if (prev.index < curr.index) // prev wins
                        curr.ignoreFirstLine = true;
                        else {
                            // curr wins
                            prev.ignoreFirstLine = true;
                            prev = curr;
                        }
                    }
                }
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = selections[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var selection1 = _step.value;
                        commands.push(new _lineCommentCommandJs.LineCommentCommand(selection1.selection, modelOptions.tabSize, this._type, commentsOptions.insertSpace, commentsOptions.ignoreEmptyLines, selection1.ignoreFirstLine));
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                editor.pushUndoStop();
                editor.executeCommands(this.id, commands);
                editor.pushUndoStop();
            }
        }
    ]);
    return CommentLineAction;
}(_editorExtensionsJs.EditorAction);
var ToggleCommentLineAction = /*#__PURE__*/ function(CommentLineAction) {
    "use strict";
    _helpers.inherits(ToggleCommentLineAction, CommentLineAction);
    var _super = _helpers.createSuper(ToggleCommentLineAction);
    function ToggleCommentLineAction() {
        _helpers.classCallCheck(this, ToggleCommentLineAction);
        return _super.call(this, 0 /* Toggle */ , {
            id: 'editor.action.commentLine',
            label: _nlsJs.localize('comment.line', "Toggle Line Comment"),
            alias: 'Toggle Line Comment',
            precondition: _editorContextKeysJs.EditorContextKeys.writable,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: 2133 /* Slash */ ,
                weight: 100 /* EditorContrib */ 
            },
            menuOpts: {
                menuId: _actionsJs.MenuId.MenubarEditMenu,
                group: '5_insert',
                title: _nlsJs.localize({
                    key: 'miToggleLineComment',
                    comment: [
                        '&& denotes a mnemonic'
                    ]
                }, "&&Toggle Line Comment"),
                order: 1
            }
        });
    }
    return ToggleCommentLineAction;
}(CommentLineAction);
var AddLineCommentAction = /*#__PURE__*/ function(CommentLineAction) {
    "use strict";
    _helpers.inherits(AddLineCommentAction, CommentLineAction);
    var _super = _helpers.createSuper(AddLineCommentAction);
    function AddLineCommentAction() {
        _helpers.classCallCheck(this, AddLineCommentAction);
        return _super.call(this, 1 /* ForceAdd */ , {
            id: 'editor.action.addCommentLine',
            label: _nlsJs.localize('comment.line.add', "Add Line Comment"),
            alias: 'Add Line Comment',
            precondition: _editorContextKeysJs.EditorContextKeys.writable,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: _keyCodesJs.KeyChord(2089 /* KeyK */ , 2081 /* KeyC */ ),
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    return AddLineCommentAction;
}(CommentLineAction);
var RemoveLineCommentAction = /*#__PURE__*/ function(CommentLineAction) {
    "use strict";
    _helpers.inherits(RemoveLineCommentAction, CommentLineAction);
    var _super = _helpers.createSuper(RemoveLineCommentAction);
    function RemoveLineCommentAction() {
        _helpers.classCallCheck(this, RemoveLineCommentAction);
        return _super.call(this, 2 /* ForceRemove */ , {
            id: 'editor.action.removeCommentLine',
            label: _nlsJs.localize('comment.line.remove', "Remove Line Comment"),
            alias: 'Remove Line Comment',
            precondition: _editorContextKeysJs.EditorContextKeys.writable,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: _keyCodesJs.KeyChord(2089 /* KeyK */ , 2099 /* KeyU */ ),
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    return RemoveLineCommentAction;
}(CommentLineAction);
var BlockCommentAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(BlockCommentAction, EditorAction);
    var _super = _helpers.createSuper(BlockCommentAction);
    function BlockCommentAction() {
        _helpers.classCallCheck(this, BlockCommentAction);
        return _super.call(this, {
            id: 'editor.action.blockComment',
            label: _nlsJs.localize('comment.block', "Toggle Block Comment"),
            alias: 'Toggle Block Comment',
            precondition: _editorContextKeysJs.EditorContextKeys.writable,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: 1567 /* KeyA */ ,
                linux: {
                    primary: 3103 /* KeyA */ 
                },
                weight: 100 /* EditorContrib */ 
            },
            menuOpts: {
                menuId: _actionsJs.MenuId.MenubarEditMenu,
                group: '5_insert',
                title: _nlsJs.localize({
                    key: 'miToggleBlockComment',
                    comment: [
                        '&& denotes a mnemonic'
                    ]
                }, "Toggle &&Block Comment"),
                order: 2
            }
        });
    }
    _helpers.createClass(BlockCommentAction, [
        {
            key: "run",
            value: function run(accessor, editor) {
                if (!editor.hasModel()) return;
                var commentsOptions = editor.getOption(19 /* comments */ );
                var commands = [];
                var selections = editor.getSelections();
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = selections[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var selection = _step.value;
                        commands.push(new _blockCommentCommandJs.BlockCommentCommand(selection, commentsOptions.insertSpace));
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                editor.pushUndoStop();
                editor.executeCommands(this.id, commands);
                editor.pushUndoStop();
            }
        }
    ]);
    return BlockCommentAction;
}(_editorExtensionsJs.EditorAction);
_editorExtensionsJs.registerEditorAction(ToggleCommentLineAction);
_editorExtensionsJs.registerEditorAction(AddLineCommentAction);
_editorExtensionsJs.registerEditorAction(RemoveLineCommentAction);
_editorExtensionsJs.registerEditorAction(BlockCommentAction);

},{"@swc/helpers":"erO4s","../../../base/common/keyCodes.js":"4hRDv","../../browser/editorExtensions.js":"dFnlo","../../common/core/range.js":"VbyL8","../../common/editorContextKeys.js":"2t2PW","./blockCommentCommand.js":"2F6Dm","./lineCommentCommand.js":"1fEdP","../../../nls.js":"9djYb","../../../platform/actions/common/actions.js":"1qoxQ"}],"2F6Dm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BlockCommentCommand", function() {
    return BlockCommentCommand;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _editOperationJs = require("../../common/core/editOperation.js");
var _positionJs = require("../../common/core/position.js");
var _rangeJs = require("../../common/core/range.js");
var _selectionJs = require("../../common/core/selection.js");
var _languageConfigurationRegistryJs = require("../../common/modes/languageConfigurationRegistry.js");
var BlockCommentCommand = /*#__PURE__*/ function() {
    "use strict";
    function BlockCommentCommand(selection, insertSpace) {
        _helpers.classCallCheck(this, BlockCommentCommand);
        this._selection = selection;
        this._insertSpace = insertSpace;
        this._usedEndToken = null;
    }
    _helpers.createClass(BlockCommentCommand, [
        {
            key: "_createOperationsForBlockComment",
            value: function _createOperationsForBlockComment(selection, startToken, endToken, insertSpace, model, builder) {
                var startLineNumber = selection.startLineNumber;
                var startColumn = selection.startColumn;
                var endLineNumber = selection.endLineNumber;
                var endColumn = selection.endColumn;
                var startLineText = model.getLineContent(startLineNumber);
                var endLineText = model.getLineContent(endLineNumber);
                var startTokenIndex = startLineText.lastIndexOf(startToken, startColumn - 1 + startToken.length);
                var endTokenIndex = endLineText.indexOf(endToken, endColumn - 1 - endToken.length);
                if (startTokenIndex !== -1 && endTokenIndex !== -1) {
                    if (startLineNumber === endLineNumber) {
                        var lineBetweenTokens = startLineText.substring(startTokenIndex + startToken.length, endTokenIndex);
                        if (lineBetweenTokens.indexOf(endToken) >= 0) {
                            // force to add a block comment
                            startTokenIndex = -1;
                            endTokenIndex = -1;
                        }
                    } else {
                        var startLineAfterStartToken = startLineText.substring(startTokenIndex + startToken.length);
                        var endLineBeforeEndToken = endLineText.substring(0, endTokenIndex);
                        if (startLineAfterStartToken.indexOf(endToken) >= 0 || endLineBeforeEndToken.indexOf(endToken) >= 0) {
                            // force to add a block comment
                            startTokenIndex = -1;
                            endTokenIndex = -1;
                        }
                    }
                }
                var ops;
                if (startTokenIndex !== -1 && endTokenIndex !== -1) {
                    // Consider spaces as part of the comment tokens
                    if (insertSpace && startTokenIndex + startToken.length < startLineText.length && startLineText.charCodeAt(startTokenIndex + startToken.length) === 32 /* Space */ ) // Pretend the start token contains a trailing space
                    startToken = startToken + ' ';
                    if (insertSpace && endTokenIndex > 0 && endLineText.charCodeAt(endTokenIndex - 1) === 32 /* Space */ ) {
                        // Pretend the end token contains a leading space
                        endToken = ' ' + endToken;
                        endTokenIndex -= 1;
                    }
                    ops = BlockCommentCommand._createRemoveBlockCommentOperations(new _rangeJs.Range(startLineNumber, startTokenIndex + startToken.length + 1, endLineNumber, endTokenIndex + 1), startToken, endToken);
                } else {
                    ops = BlockCommentCommand._createAddBlockCommentOperations(selection, startToken, endToken, this._insertSpace);
                    this._usedEndToken = ops.length === 1 ? endToken : null;
                }
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = ops[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var op = _step.value;
                        builder.addTrackedEditOperation(op.range, op.text);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        },
        {
            key: "getEditOperations",
            value: function getEditOperations(model, builder) {
                var startLineNumber = this._selection.startLineNumber;
                var startColumn = this._selection.startColumn;
                model.tokenizeIfCheap(startLineNumber);
                var languageId = model.getLanguageIdAtPosition(startLineNumber, startColumn);
                var config = _languageConfigurationRegistryJs.LanguageConfigurationRegistry.getComments(languageId);
                if (!config || !config.blockCommentStartToken || !config.blockCommentEndToken) // Mode does not support block comments
                return;
                this._createOperationsForBlockComment(this._selection, config.blockCommentStartToken, config.blockCommentEndToken, this._insertSpace, model, builder);
            }
        },
        {
            key: "computeCursorState",
            value: function computeCursorState(model, helper) {
                var inverseEditOperations = helper.getInverseEditOperations();
                if (inverseEditOperations.length === 2) {
                    var startTokenEditOperation = inverseEditOperations[0];
                    var endTokenEditOperation = inverseEditOperations[1];
                    return new _selectionJs.Selection(startTokenEditOperation.range.endLineNumber, startTokenEditOperation.range.endColumn, endTokenEditOperation.range.startLineNumber, endTokenEditOperation.range.startColumn);
                } else {
                    var srcRange = inverseEditOperations[0].range;
                    var deltaColumn = this._usedEndToken ? -this._usedEndToken.length - 1 : 0; // minus 1 space before endToken
                    return new _selectionJs.Selection(srcRange.endLineNumber, srcRange.endColumn + deltaColumn, srcRange.endLineNumber, srcRange.endColumn + deltaColumn);
                }
            }
        }
    ], [
        {
            key: "_haystackHasNeedleAtOffset",
            value: function _haystackHasNeedleAtOffset(haystack, needle, offset) {
                if (offset < 0) return false;
                var needleLength = needle.length;
                var haystackLength = haystack.length;
                if (offset + needleLength > haystackLength) return false;
                for(var i = 0; i < needleLength; i++){
                    var codeA = haystack.charCodeAt(offset + i);
                    var codeB = needle.charCodeAt(i);
                    if (codeA === codeB) continue;
                    if (codeA >= 65 /* A */  && codeA <= 90 /* Z */  && codeA + 32 === codeB) continue;
                    if (codeB >= 65 /* A */  && codeB <= 90 /* Z */  && codeB + 32 === codeA) continue;
                    return false;
                }
                return true;
            }
        },
        {
            key: "_createRemoveBlockCommentOperations",
            value: function _createRemoveBlockCommentOperations(r, startToken, endToken) {
                var res = [];
                if (!_rangeJs.Range.isEmpty(r)) {
                    // Remove block comment start
                    res.push(_editOperationJs.EditOperation.delete(new _rangeJs.Range(r.startLineNumber, r.startColumn - startToken.length, r.startLineNumber, r.startColumn)));
                    // Remove block comment end
                    res.push(_editOperationJs.EditOperation.delete(new _rangeJs.Range(r.endLineNumber, r.endColumn, r.endLineNumber, r.endColumn + endToken.length)));
                } else // Remove both continuously
                res.push(_editOperationJs.EditOperation.delete(new _rangeJs.Range(r.startLineNumber, r.startColumn - startToken.length, r.endLineNumber, r.endColumn + endToken.length)));
                return res;
            }
        },
        {
            key: "_createAddBlockCommentOperations",
            value: function _createAddBlockCommentOperations(r, startToken, endToken, insertSpace) {
                var res = [];
                if (!_rangeJs.Range.isEmpty(r)) {
                    // Insert block comment start
                    res.push(_editOperationJs.EditOperation.insert(new _positionJs.Position(r.startLineNumber, r.startColumn), startToken + (insertSpace ? ' ' : '')));
                    // Insert block comment end
                    res.push(_editOperationJs.EditOperation.insert(new _positionJs.Position(r.endLineNumber, r.endColumn), (insertSpace ? ' ' : '') + endToken));
                } else // Insert both continuously
                res.push(_editOperationJs.EditOperation.replace(new _rangeJs.Range(r.startLineNumber, r.startColumn, r.endLineNumber, r.endColumn), startToken + '  ' + endToken));
                return res;
            }
        }
    ]);
    return BlockCommentCommand;
}();

},{"@swc/helpers":"erO4s","../../common/core/editOperation.js":"3D5yS","../../common/core/position.js":"6xP0w","../../common/core/range.js":"VbyL8","../../common/core/selection.js":"hjmnH","../../common/modes/languageConfigurationRegistry.js":"fdCRx","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"1fEdP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LineCommentCommand", function() {
    return LineCommentCommand;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _stringsJs = require("../../../base/common/strings.js");
var _editOperationJs = require("../../common/core/editOperation.js");
var _positionJs = require("../../common/core/position.js");
var _rangeJs = require("../../common/core/range.js");
var _selectionJs = require("../../common/core/selection.js");
var _languageConfigurationRegistryJs = require("../../common/modes/languageConfigurationRegistry.js");
var _blockCommentCommandJs = require("./blockCommentCommand.js");
var LineCommentCommand = /*#__PURE__*/ function() {
    "use strict";
    function LineCommentCommand(selection, tabSize, type, insertSpace, ignoreEmptyLines, ignoreFirstLine) {
        _helpers.classCallCheck(this, LineCommentCommand);
        this._selection = selection;
        this._tabSize = tabSize;
        this._type = type;
        this._insertSpace = insertSpace;
        this._selectionId = null;
        this._deltaColumn = 0;
        this._moveEndPositionDown = false;
        this._ignoreEmptyLines = ignoreEmptyLines;
        this._ignoreFirstLine = ignoreFirstLine || false;
    }
    _helpers.createClass(LineCommentCommand, [
        {
            /**
     * Given a successful analysis, execute either insert line comments, either remove line comments
     */ key: "_executeLineComments",
            value: function _executeLineComments(model, builder, data, s) {
                var ops;
                if (data.shouldRemoveComments) ops = LineCommentCommand._createRemoveLineCommentsOperations(data.lines, s.startLineNumber);
                else {
                    LineCommentCommand._normalizeInsertionPoint(model, data.lines, s.startLineNumber, this._tabSize);
                    ops = this._createAddLineCommentsOperations(data.lines, s.startLineNumber);
                }
                var cursorPosition = new _positionJs.Position(s.positionLineNumber, s.positionColumn);
                for(var i = 0, len = ops.length; i < len; i++){
                    builder.addEditOperation(ops[i].range, ops[i].text);
                    if (_rangeJs.Range.isEmpty(ops[i].range) && _rangeJs.Range.getStartPosition(ops[i].range).equals(cursorPosition)) {
                        var lineContent = model.getLineContent(cursorPosition.lineNumber);
                        if (lineContent.length + 1 === cursorPosition.column) this._deltaColumn = (ops[i].text || '').length;
                    }
                }
                this._selectionId = builder.trackSelection(s);
            }
        },
        {
            key: "_attemptRemoveBlockComment",
            value: function _attemptRemoveBlockComment(model, s, startToken, endToken) {
                var startLineNumber = s.startLineNumber;
                var endLineNumber = s.endLineNumber;
                var startTokenAllowedBeforeColumn = endToken.length + Math.max(model.getLineFirstNonWhitespaceColumn(s.startLineNumber), s.startColumn);
                var startTokenIndex = model.getLineContent(startLineNumber).lastIndexOf(startToken, startTokenAllowedBeforeColumn - 1);
                var endTokenIndex = model.getLineContent(endLineNumber).indexOf(endToken, s.endColumn - 1 - startToken.length);
                if (startTokenIndex !== -1 && endTokenIndex === -1) {
                    endTokenIndex = model.getLineContent(startLineNumber).indexOf(endToken, startTokenIndex + startToken.length);
                    endLineNumber = startLineNumber;
                }
                if (startTokenIndex === -1 && endTokenIndex !== -1) {
                    startTokenIndex = model.getLineContent(endLineNumber).lastIndexOf(startToken, endTokenIndex);
                    startLineNumber = endLineNumber;
                }
                if (s.isEmpty() && (startTokenIndex === -1 || endTokenIndex === -1)) {
                    startTokenIndex = model.getLineContent(startLineNumber).indexOf(startToken);
                    if (startTokenIndex !== -1) endTokenIndex = model.getLineContent(startLineNumber).indexOf(endToken, startTokenIndex + startToken.length);
                }
                // We have to adjust to possible inner white space.
                // For Space after startToken, add Space to startToken - range math will work out.
                if (startTokenIndex !== -1 && model.getLineContent(startLineNumber).charCodeAt(startTokenIndex + startToken.length) === 32 /* Space */ ) startToken += ' ';
                // For Space before endToken, add Space before endToken and shift index one left.
                if (endTokenIndex !== -1 && model.getLineContent(endLineNumber).charCodeAt(endTokenIndex - 1) === 32 /* Space */ ) {
                    endToken = ' ' + endToken;
                    endTokenIndex -= 1;
                }
                if (startTokenIndex !== -1 && endTokenIndex !== -1) return _blockCommentCommandJs.BlockCommentCommand._createRemoveBlockCommentOperations(new _rangeJs.Range(startLineNumber, startTokenIndex + startToken.length + 1, endLineNumber, endTokenIndex + 1), startToken, endToken);
                return null;
            }
        },
        {
            /**
     * Given an unsuccessful analysis, delegate to the block comment command
     */ key: "_executeBlockComment",
            value: function _executeBlockComment(model, builder, s) {
                model.tokenizeIfCheap(s.startLineNumber);
                var languageId = model.getLanguageIdAtPosition(s.startLineNumber, 1);
                var config = _languageConfigurationRegistryJs.LanguageConfigurationRegistry.getComments(languageId);
                if (!config || !config.blockCommentStartToken || !config.blockCommentEndToken) // Mode does not support block comments
                return;
                var startToken = config.blockCommentStartToken;
                var endToken = config.blockCommentEndToken;
                var ops = this._attemptRemoveBlockComment(model, s, startToken, endToken);
                if (!ops) {
                    if (s.isEmpty()) {
                        var lineContent = model.getLineContent(s.startLineNumber);
                        var firstNonWhitespaceIndex = _stringsJs.firstNonWhitespaceIndex(lineContent);
                        if (firstNonWhitespaceIndex === -1) // Line is empty or contains only whitespace
                        firstNonWhitespaceIndex = lineContent.length;
                        ops = _blockCommentCommandJs.BlockCommentCommand._createAddBlockCommentOperations(new _rangeJs.Range(s.startLineNumber, firstNonWhitespaceIndex + 1, s.startLineNumber, lineContent.length + 1), startToken, endToken, this._insertSpace);
                    } else ops = _blockCommentCommandJs.BlockCommentCommand._createAddBlockCommentOperations(new _rangeJs.Range(s.startLineNumber, model.getLineFirstNonWhitespaceColumn(s.startLineNumber), s.endLineNumber, model.getLineMaxColumn(s.endLineNumber)), startToken, endToken, this._insertSpace);
                    if (ops.length === 1) // Leave cursor after token and Space
                    this._deltaColumn = startToken.length + 1;
                }
                this._selectionId = builder.trackSelection(s);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = ops[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var op = _step.value;
                        builder.addEditOperation(op.range, op.text);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        },
        {
            key: "getEditOperations",
            value: function getEditOperations(model, builder) {
                var s = this._selection;
                this._moveEndPositionDown = false;
                if (s.startLineNumber === s.endLineNumber && this._ignoreFirstLine) {
                    builder.addEditOperation(new _rangeJs.Range(s.startLineNumber, model.getLineMaxColumn(s.startLineNumber), s.startLineNumber + 1, 1), s.startLineNumber === model.getLineCount() ? '' : '\n');
                    this._selectionId = builder.trackSelection(s);
                    return;
                }
                if (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {
                    this._moveEndPositionDown = true;
                    s = s.setEndPosition(s.endLineNumber - 1, model.getLineMaxColumn(s.endLineNumber - 1));
                }
                var data = LineCommentCommand._gatherPreflightData(this._type, this._insertSpace, model, s.startLineNumber, s.endLineNumber, this._ignoreEmptyLines, this._ignoreFirstLine);
                if (data.supported) return this._executeLineComments(model, builder, data, s);
                return this._executeBlockComment(model, builder, s);
            }
        },
        {
            key: "computeCursorState",
            value: function computeCursorState(model, helper) {
                var result = helper.getTrackedSelection(this._selectionId);
                if (this._moveEndPositionDown) result = result.setEndPosition(result.endLineNumber + 1, 1);
                return new _selectionJs.Selection(result.selectionStartLineNumber, result.selectionStartColumn + this._deltaColumn, result.positionLineNumber, result.positionColumn + this._deltaColumn);
            }
        },
        {
            /**
     * Generate edit operations in the add line comment case
     */ key: "_createAddLineCommentsOperations",
            value: function _createAddLineCommentsOperations(lines, startLineNumber) {
                var res = [];
                var afterCommentStr = this._insertSpace ? ' ' : '';
                for(var i = 0, len = lines.length; i < len; i++){
                    var lineData = lines[i];
                    if (lineData.ignore) continue;
                    res.push(_editOperationJs.EditOperation.insert(new _positionJs.Position(startLineNumber + i, lineData.commentStrOffset + 1), lineData.commentStr + afterCommentStr));
                }
                return res;
            }
        }
    ], [
        {
            key: "_gatherPreflightCommentStrings",
            value: /**
     * Do an initial pass over the lines and gather info about the line comment string.
     * Returns null if any of the lines doesn't support a line comment string.
     */ function _gatherPreflightCommentStrings(model, startLineNumber, endLineNumber) {
                model.tokenizeIfCheap(startLineNumber);
                var languageId = model.getLanguageIdAtPosition(startLineNumber, 1);
                var config = _languageConfigurationRegistryJs.LanguageConfigurationRegistry.getComments(languageId);
                var commentStr = config ? config.lineCommentToken : null;
                if (!commentStr) // Mode does not support line comments
                return null;
                var lines = [];
                for(var i = 0, lineCount = endLineNumber - startLineNumber + 1; i < lineCount; i++)lines[i] = {
                    ignore: false,
                    commentStr: commentStr,
                    commentStrOffset: 0,
                    commentStrLength: commentStr.length
                };
                return lines;
            }
        },
        {
            key: "_analyzeLines",
            value: /**
     * Analyze lines and decide which lines are relevant and what the toggle should do.
     * Also, build up several offsets and lengths useful in the generation of editor operations.
     */ function _analyzeLines(type, insertSpace, model, lines, startLineNumber, ignoreEmptyLines, ignoreFirstLine) {
                var onlyWhitespaceLines = true;
                var shouldRemoveComments;
                if (type === 0 /* Toggle */ ) shouldRemoveComments = true;
                else if (type === 1 /* ForceAdd */ ) shouldRemoveComments = false;
                else shouldRemoveComments = true;
                for(var i = 0, lineCount = lines.length; i < lineCount; i++){
                    var lineData = lines[i];
                    var lineNumber = startLineNumber + i;
                    if (lineNumber === startLineNumber && ignoreFirstLine) {
                        // first line ignored
                        lineData.ignore = true;
                        continue;
                    }
                    var lineContent = model.getLineContent(lineNumber);
                    var lineContentStartOffset = _stringsJs.firstNonWhitespaceIndex(lineContent);
                    if (lineContentStartOffset === -1) {
                        // Empty or whitespace only line
                        lineData.ignore = ignoreEmptyLines;
                        lineData.commentStrOffset = lineContent.length;
                        continue;
                    }
                    onlyWhitespaceLines = false;
                    lineData.ignore = false;
                    lineData.commentStrOffset = lineContentStartOffset;
                    if (shouldRemoveComments && !_blockCommentCommandJs.BlockCommentCommand._haystackHasNeedleAtOffset(lineContent, lineData.commentStr, lineContentStartOffset)) {
                        if (type === 0 /* Toggle */ ) // Every line so far has been a line comment, but this one is not
                        shouldRemoveComments = false;
                        else if (type === 1 /* ForceAdd */ ) ;
                        else lineData.ignore = true;
                    }
                    if (shouldRemoveComments && insertSpace) {
                        // Remove a following space if present
                        var commentStrEndOffset = lineContentStartOffset + lineData.commentStrLength;
                        if (commentStrEndOffset < lineContent.length && lineContent.charCodeAt(commentStrEndOffset) === 32 /* Space */ ) lineData.commentStrLength += 1;
                    }
                }
                if (type === 0 /* Toggle */  && onlyWhitespaceLines) {
                    // For only whitespace lines, we insert comments
                    shouldRemoveComments = false;
                    // Also, no longer ignore them
                    for(var i1 = 0, lineCount1 = lines.length; i1 < lineCount1; i1++)lines[i1].ignore = false;
                }
                return {
                    supported: true,
                    shouldRemoveComments: shouldRemoveComments,
                    lines: lines
                };
            }
        },
        {
            key: "_gatherPreflightData",
            value: /**
     * Analyze all lines and decide exactly what to do => not supported | insert line comments | remove line comments
     */ function _gatherPreflightData(type, insertSpace, model, startLineNumber, endLineNumber, ignoreEmptyLines, ignoreFirstLine) {
                var lines = LineCommentCommand._gatherPreflightCommentStrings(model, startLineNumber, endLineNumber);
                if (lines === null) return {
                    supported: false
                };
                return LineCommentCommand._analyzeLines(type, insertSpace, model, lines, startLineNumber, ignoreEmptyLines, ignoreFirstLine);
            }
        },
        {
            key: "_createRemoveLineCommentsOperations",
            value: /**
     * Generate edit operations in the remove line comment case
     */ function _createRemoveLineCommentsOperations(lines, startLineNumber) {
                var res = [];
                for(var i = 0, len = lines.length; i < len; i++){
                    var lineData = lines[i];
                    if (lineData.ignore) continue;
                    res.push(_editOperationJs.EditOperation.delete(new _rangeJs.Range(startLineNumber + i, lineData.commentStrOffset + 1, startLineNumber + i, lineData.commentStrOffset + lineData.commentStrLength + 1)));
                }
                return res;
            }
        },
        {
            key: "nextVisibleColumn",
            value: function nextVisibleColumn(currentVisibleColumn, tabSize, isTab, columnSize) {
                if (isTab) return currentVisibleColumn + (tabSize - currentVisibleColumn % tabSize);
                return currentVisibleColumn + columnSize;
            }
        },
        {
            key: "_normalizeInsertionPoint",
            value: /**
     * Adjust insertion points to have them vertically aligned in the add line comment case
     */ function _normalizeInsertionPoint(model, lines, startLineNumber, tabSize) {
                var minVisibleColumn = 1073741824 /* MAX_SAFE_SMALL_INTEGER */ ;
                var j;
                var lenJ;
                for(var i = 0, len = lines.length; i < len; i++){
                    if (lines[i].ignore) continue;
                    var lineContent = model.getLineContent(startLineNumber + i);
                    var currentVisibleColumn = 0;
                    for(var j1 = 0, lenJ1 = lines[i].commentStrOffset; currentVisibleColumn < minVisibleColumn && j1 < lenJ1; j1++)currentVisibleColumn = LineCommentCommand.nextVisibleColumn(currentVisibleColumn, tabSize, lineContent.charCodeAt(j1) === 9 /* Tab */ , 1);
                    if (currentVisibleColumn < minVisibleColumn) minVisibleColumn = currentVisibleColumn;
                }
                minVisibleColumn = Math.floor(minVisibleColumn / tabSize) * tabSize;
                for(var i2 = 0, len1 = lines.length; i2 < len1; i2++){
                    if (lines[i2].ignore) continue;
                    var lineContent1 = model.getLineContent(startLineNumber + i2);
                    var currentVisibleColumn1 = 0;
                    for(j = 0, lenJ = lines[i2].commentStrOffset; currentVisibleColumn1 < minVisibleColumn && j < lenJ; j++)currentVisibleColumn1 = LineCommentCommand.nextVisibleColumn(currentVisibleColumn1, tabSize, lineContent1.charCodeAt(j) === 9 /* Tab */ , 1);
                    if (currentVisibleColumn1 > minVisibleColumn) lines[i2].commentStrOffset = j - 1;
                    else lines[i2].commentStrOffset = j;
                }
            }
        }
    ]);
    return LineCommentCommand;
}();

},{"@swc/helpers":"erO4s","../../../base/common/strings.js":"jsb6w","../../common/core/editOperation.js":"3D5yS","../../common/core/position.js":"6xP0w","../../common/core/range.js":"VbyL8","../../common/core/selection.js":"hjmnH","../../common/modes/languageConfigurationRegistry.js":"fdCRx","./blockCommentCommand.js":"2F6Dm","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"hcNOg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ContextMenuController", function() {
    return ContextMenuController;
});
var _helpers = require("@swc/helpers");
var _domJs = require("../../../base/browser/dom.js");
var _actionViewItemsJs = require("../../../base/browser/ui/actionbar/actionViewItems.js");
var _actionsJs = require("../../../base/common/actions.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _platformJs = require("../../../base/common/platform.js");
var _editorExtensionsJs = require("../../browser/editorExtensions.js");
var _editorContextKeysJs = require("../../common/editorContextKeys.js");
var _nlsJs = require("../../../nls.js");
var _actionsJs1 = require("../../../platform/actions/common/actions.js");
var _contextkeyJs = require("../../../platform/contextkey/common/contextkey.js");
var _contextViewJs = require("../../../platform/contextview/browser/contextView.js");
var _keybindingJs = require("../../../platform/keybinding/common/keybinding.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var ContextMenuController = /*#__PURE__*/ function() {
    "use strict";
    function ContextMenuController1(editor, _contextMenuService, _contextViewService, _contextKeyService, _keybindingService, _menuService) {
        var _this = this;
        _helpers.classCallCheck(this, ContextMenuController1);
        this._contextMenuService = _contextMenuService;
        this._contextViewService = _contextViewService;
        this._contextKeyService = _contextKeyService;
        this._keybindingService = _keybindingService;
        this._menuService = _menuService;
        this._toDispose = new _lifecycleJs.DisposableStore();
        this._contextMenuIsBeingShownCount = 0;
        this._editor = editor;
        this._toDispose.add(this._editor.onContextMenu(function(e) {
            return _this._onContextMenu(e);
        }));
        this._toDispose.add(this._editor.onMouseWheel(function(e) {
            if (_this._contextMenuIsBeingShownCount > 0) {
                var view = _this._contextViewService.getContextViewElement();
                var target = e.srcElement;
                // Event triggers on shadow root host first
                // Check if the context view is under this host before hiding it #103169
                if (!(target.shadowRoot && _domJs.getShadowRoot(view) === target.shadowRoot)) _this._contextViewService.hideContextView();
            }
        }));
        this._toDispose.add(this._editor.onKeyDown(function(e) {
            if (e.keyCode === 58 /* ContextMenu */ ) {
                // Chrome is funny like that
                e.preventDefault();
                e.stopPropagation();
                _this.showContextMenu();
            }
        }));
    }
    _helpers.createClass(ContextMenuController1, [
        {
            key: "_onContextMenu",
            value: function _onContextMenu(e) {
                if (!this._editor.hasModel()) return;
                if (!this._editor.getOption(20 /* contextmenu */ )) {
                    this._editor.focus();
                    // Ensure the cursor is at the position of the mouse click
                    if (e.target.position && !this._editor.getSelection().containsPosition(e.target.position)) this._editor.setPosition(e.target.position);
                    return; // Context menu is turned off through configuration
                }
                if (e.target.type === 12 /* OVERLAY_WIDGET */ ) return; // allow native menu on widgets to support right click on input field for example in find
                e.event.preventDefault();
                e.event.stopPropagation();
                if (e.target.type !== 6 /* CONTENT_TEXT */  && e.target.type !== 7 /* CONTENT_EMPTY */  && e.target.type !== 1 /* TEXTAREA */ ) return; // only support mouse click into text or native context menu key for now
                // Ensure the editor gets focus if it hasn't, so the right events are being sent to other contributions
                this._editor.focus();
                // Ensure the cursor is at the position of the mouse click
                if (e.target.position) {
                    var hasSelectionAtPosition = false;
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator = this._editor.getSelections()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var selection = _step.value;
                            if (selection.containsPosition(e.target.position)) {
                                hasSelectionAtPosition = true;
                                break;
                            }
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    if (!hasSelectionAtPosition) this._editor.setPosition(e.target.position);
                }
                // Unless the user triggerd the context menu through Shift+F10, use the mouse position as menu position
                var anchor = null;
                if (e.target.type !== 1 /* TEXTAREA */ ) anchor = {
                    x: e.event.posx - 1,
                    width: 2,
                    y: e.event.posy - 1,
                    height: 2
                };
                // Show the context menu
                this.showContextMenu(anchor);
            }
        },
        {
            key: "showContextMenu",
            value: function showContextMenu(anchor) {
                if (!this._editor.getOption(20 /* contextmenu */ )) return; // Context menu is turned off through configuration
                if (!this._editor.hasModel()) return;
                if (!this._contextMenuService) {
                    this._editor.focus();
                    return; // We need the context menu service to function
                }
                // Find actions available for menu
                var menuActions = this._getMenuActions(this._editor.getModel(), this._editor.isSimpleWidget ? _actionsJs1.MenuId.SimpleEditorContext : _actionsJs1.MenuId.EditorContext);
                // Show menu if we have actions to show
                if (menuActions.length > 0) this._doShowContextMenu(menuActions, anchor);
            }
        },
        {
            key: "_getMenuActions",
            value: function _getMenuActions(model, menuId) {
                var result = [];
                // get menu groups
                var menu = this._menuService.createMenu(menuId, this._contextKeyService);
                var groups = menu.getActions({
                    arg: model.uri
                });
                menu.dispose();
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    // translate them into other actions
                    for(var _iterator = groups[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var group = _step.value;
                        var _group = _helpers.slicedToArray(group, 2), actions = _group[1];
                        var addedItems = 0;
                        var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                        try {
                            for(var _iterator1 = actions[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                                var action = _step1.value;
                                if (action instanceof _actionsJs1.SubmenuItemAction) {
                                    var subActions = this._getMenuActions(model, action.item.submenu);
                                    if (subActions.length > 0) {
                                        result.push(new _actionsJs.SubmenuAction(action.id, action.label, subActions));
                                        addedItems++;
                                    }
                                } else {
                                    result.push(action);
                                    addedItems++;
                                }
                            }
                        } catch (err) {
                            _didIteratorError1 = true;
                            _iteratorError1 = err;
                        } finally{
                            try {
                                if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                                    _iterator1.return();
                                }
                            } finally{
                                if (_didIteratorError1) {
                                    throw _iteratorError1;
                                }
                            }
                        }
                        if (addedItems) result.push(new _actionsJs.Separator());
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                if (result.length) result.pop(); // remove last separator
                return result;
            }
        },
        {
            key: "_doShowContextMenu",
            value: function _doShowContextMenu(actions) {
                var anchor = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
                var _this = this;
                if (!this._editor.hasModel()) return;
                // Disable hover
                var oldHoverSetting = this._editor.getOption(52 /* hover */ );
                this._editor.updateOptions({
                    hover: {
                        enabled: false
                    }
                });
                if (!anchor) {
                    // Ensure selection is visible
                    this._editor.revealPosition(this._editor.getPosition(), 1 /* Immediate */ );
                    this._editor.render();
                    var cursorCoords = this._editor.getScrolledVisiblePosition(this._editor.getPosition());
                    // Translate to absolute editor position
                    var editorCoords = _domJs.getDomNodePagePosition(this._editor.getDomNode());
                    var posx = editorCoords.left + cursorCoords.left;
                    var posy = editorCoords.top + cursorCoords.top + cursorCoords.height;
                    anchor = {
                        x: posx,
                        y: posy
                    };
                }
                var useShadowDOM = this._editor.getOption(114 /* useShadowDOM */ ) && !_platformJs.isIOS; // Do not use shadow dom on IOS #122035
                // Show menu
                this._contextMenuIsBeingShownCount++;
                this._contextMenuService.showContextMenu({
                    domForShadowRoot: useShadowDOM ? this._editor.getDomNode() : undefined,
                    getAnchor: function() {
                        return anchor;
                    },
                    getActions: function() {
                        return actions;
                    },
                    getActionViewItem: function(action) {
                        var keybinding = _this._keybindingFor(action);
                        if (keybinding) return new _actionViewItemsJs.ActionViewItem(action, action, {
                            label: true,
                            keybinding: keybinding.getLabel(),
                            isMenu: true
                        });
                        var customActionViewItem = action;
                        if (typeof customActionViewItem.getActionViewItem === 'function') return customActionViewItem.getActionViewItem();
                        return new _actionViewItemsJs.ActionViewItem(action, action, {
                            icon: true,
                            label: true,
                            isMenu: true
                        });
                    },
                    getKeyBinding: function(action) {
                        return _this._keybindingFor(action);
                    },
                    onHide: function(wasCancelled) {
                        _this._contextMenuIsBeingShownCount--;
                        _this._editor.focus();
                        _this._editor.updateOptions({
                            hover: oldHoverSetting
                        });
                    }
                });
            }
        },
        {
            key: "_keybindingFor",
            value: function _keybindingFor(action) {
                return this._keybindingService.lookupKeybinding(action.id);
            }
        },
        {
            key: "dispose",
            value: function dispose() {
                if (this._contextMenuIsBeingShownCount > 0) this._contextViewService.hideContextView();
                this._toDispose.dispose();
            }
        }
    ], [
        {
            key: "get",
            value: function get(editor) {
                return editor.getContribution(ContextMenuController1.ID);
            }
        }
    ]);
    return ContextMenuController1;
}();
ContextMenuController.ID = 'editor.contrib.contextmenu';
ContextMenuController = __decorate([
    __param(1, _contextViewJs.IContextMenuService),
    __param(2, _contextViewJs.IContextViewService),
    __param(3, _contextkeyJs.IContextKeyService),
    __param(4, _keybindingJs.IKeybindingService),
    __param(5, _actionsJs1.IMenuService)
], ContextMenuController);
var ShowContextMenu = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(ShowContextMenu, EditorAction);
    var _super = _helpers.createSuper(ShowContextMenu);
    function ShowContextMenu() {
        _helpers.classCallCheck(this, ShowContextMenu);
        return _super.call(this, {
            id: 'editor.action.showContextMenu',
            label: _nlsJs.localize('action.showContextMenu.label', "Show Editor Context Menu"),
            alias: 'Show Editor Context Menu',
            precondition: undefined,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.textInputFocus,
                primary: 1092 /* F10 */ ,
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    _helpers.createClass(ShowContextMenu, [
        {
            key: "run",
            value: function run(accessor, editor) {
                var contribution = ContextMenuController.get(editor);
                contribution.showContextMenu();
            }
        }
    ]);
    return ShowContextMenu;
}(_editorExtensionsJs.EditorAction);
_editorExtensionsJs.registerEditorContribution(ContextMenuController.ID, ContextMenuController);
_editorExtensionsJs.registerEditorAction(ShowContextMenu);

},{"@swc/helpers":"erO4s","../../../base/browser/dom.js":"bxmlc","../../../base/browser/ui/actionbar/actionViewItems.js":"lixq5","../../../base/common/actions.js":"5c0wW","../../../base/common/lifecycle.js":"bcbPy","../../../base/common/platform.js":"8pohV","../../browser/editorExtensions.js":"dFnlo","../../common/editorContextKeys.js":"2t2PW","../../../nls.js":"9djYb","../../../platform/actions/common/actions.js":"1qoxQ","../../../platform/contextkey/common/contextkey.js":"5cjav","../../../platform/contextview/browser/contextView.js":"kl0FP","../../../platform/keybinding/common/keybinding.js":"5rr15","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"geqyf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CursorUndoRedoController", function() {
    return CursorUndoRedoController;
});
parcelHelpers.export(exports, "CursorUndo", function() {
    return CursorUndo;
});
parcelHelpers.export(exports, "CursorRedo", function() {
    return CursorRedo;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _editorExtensionsJs = require("../../browser/editorExtensions.js");
var _editorContextKeysJs = require("../../common/editorContextKeys.js");
var _nlsJs = require("../../../nls.js");
var CursorState = /*#__PURE__*/ function() {
    "use strict";
    function CursorState(selections) {
        _helpers.classCallCheck(this, CursorState);
        this.selections = selections;
    }
    _helpers.createClass(CursorState, [
        {
            key: "equals",
            value: function equals(other) {
                var thisLen = this.selections.length;
                var otherLen = other.selections.length;
                if (thisLen !== otherLen) return false;
                for(var i = 0; i < thisLen; i++){
                    if (!this.selections[i].equalsSelection(other.selections[i])) return false;
                }
                return true;
            }
        }
    ]);
    return CursorState;
}();
var StackElement = function StackElement(cursorState, scrollTop, scrollLeft) {
    "use strict";
    _helpers.classCallCheck(this, StackElement);
    this.cursorState = cursorState;
    this.scrollTop = scrollTop;
    this.scrollLeft = scrollLeft;
};
var CursorUndoRedoController = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(CursorUndoRedoController, Disposable);
    var _super = _helpers.createSuper(CursorUndoRedoController);
    function CursorUndoRedoController(editor) {
        _helpers.classCallCheck(this, CursorUndoRedoController);
        var _this;
        _this = _super.call(this);
        _this._editor = editor;
        _this._isCursorUndoRedo = false;
        _this._undoStack = [];
        _this._redoStack = [];
        _this._register(editor.onDidChangeModel(function(e) {
            _this._undoStack = [];
            _this._redoStack = [];
        }));
        _this._register(editor.onDidChangeModelContent(function(e) {
            _this._undoStack = [];
            _this._redoStack = [];
        }));
        _this._register(editor.onDidChangeCursorSelection(function(e) {
            if (_this._isCursorUndoRedo) return;
            if (!e.oldSelections) return;
            if (e.oldModelVersionId !== e.modelVersionId) return;
            var prevState = new CursorState(e.oldSelections);
            var isEqualToLastUndoStack = _this._undoStack.length > 0 && _this._undoStack[_this._undoStack.length - 1].cursorState.equals(prevState);
            if (!isEqualToLastUndoStack) {
                _this._undoStack.push(new StackElement(prevState, editor.getScrollTop(), editor.getScrollLeft()));
                _this._redoStack = [];
                if (_this._undoStack.length > 50) // keep the cursor undo stack bounded
                _this._undoStack.shift();
            }
        }));
        return _this;
    }
    _helpers.createClass(CursorUndoRedoController, [
        {
            key: "cursorUndo",
            value: function cursorUndo() {
                if (!this._editor.hasModel() || this._undoStack.length === 0) return;
                this._redoStack.push(new StackElement(new CursorState(this._editor.getSelections()), this._editor.getScrollTop(), this._editor.getScrollLeft()));
                this._applyState(this._undoStack.pop());
            }
        },
        {
            key: "cursorRedo",
            value: function cursorRedo() {
                if (!this._editor.hasModel() || this._redoStack.length === 0) return;
                this._undoStack.push(new StackElement(new CursorState(this._editor.getSelections()), this._editor.getScrollTop(), this._editor.getScrollLeft()));
                this._applyState(this._redoStack.pop());
            }
        },
        {
            key: "_applyState",
            value: function _applyState(stackElement) {
                this._isCursorUndoRedo = true;
                this._editor.setSelections(stackElement.cursorState.selections);
                this._editor.setScrollPosition({
                    scrollTop: stackElement.scrollTop,
                    scrollLeft: stackElement.scrollLeft
                });
                this._isCursorUndoRedo = false;
            }
        }
    ], [
        {
            key: "get",
            value: function get(editor) {
                return editor.getContribution(CursorUndoRedoController.ID);
            }
        }
    ]);
    return CursorUndoRedoController;
}(_lifecycleJs.Disposable);
CursorUndoRedoController.ID = 'editor.contrib.cursorUndoRedoController';
var CursorUndo = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(CursorUndo, EditorAction);
    var _super = _helpers.createSuper(CursorUndo);
    function CursorUndo() {
        _helpers.classCallCheck(this, CursorUndo);
        return _super.call(this, {
            id: 'cursorUndo',
            label: _nlsJs.localize('cursor.undo', "Cursor Undo"),
            alias: 'Cursor Undo',
            precondition: undefined,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.textInputFocus,
                primary: 2099 /* KeyU */ ,
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    _helpers.createClass(CursorUndo, [
        {
            key: "run",
            value: function run(accessor, editor, args) {
                CursorUndoRedoController.get(editor).cursorUndo();
            }
        }
    ]);
    return CursorUndo;
}(_editorExtensionsJs.EditorAction);
var CursorRedo = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(CursorRedo, EditorAction);
    var _super = _helpers.createSuper(CursorRedo);
    function CursorRedo() {
        _helpers.classCallCheck(this, CursorRedo);
        return _super.call(this, {
            id: 'cursorRedo',
            label: _nlsJs.localize('cursor.redo', "Cursor Redo"),
            alias: 'Cursor Redo',
            precondition: undefined
        });
    }
    _helpers.createClass(CursorRedo, [
        {
            key: "run",
            value: function run(accessor, editor, args) {
                CursorUndoRedoController.get(editor).cursorRedo();
            }
        }
    ]);
    return CursorRedo;
}(_editorExtensionsJs.EditorAction);
_editorExtensionsJs.registerEditorContribution(CursorUndoRedoController.ID, CursorUndoRedoController);
_editorExtensionsJs.registerEditorAction(CursorUndo);
_editorExtensionsJs.registerEditorAction(CursorRedo);

},{"@swc/helpers":"erO4s","../../../base/common/lifecycle.js":"bcbPy","../../browser/editorExtensions.js":"dFnlo","../../common/editorContextKeys.js":"2t2PW","../../../nls.js":"9djYb","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"aOdfE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DragAndDropController", function() {
    return DragAndDropController;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _platformJs = require("../../../base/common/platform.js");
var _dndCss = require("./dnd.css");
var _editorExtensionsJs = require("../../browser/editorExtensions.js");
var _positionJs = require("../../common/core/position.js");
var _rangeJs = require("../../common/core/range.js");
var _selectionJs = require("../../common/core/selection.js");
var _textModelJs = require("../../common/model/textModel.js");
var _dragAndDropCommandJs = require("./dragAndDropCommand.js");
function hasTriggerModifier(e) {
    if (_platformJs.isMacintosh) return e.altKey;
    else return e.ctrlKey;
}
var DragAndDropController = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(DragAndDropController, Disposable);
    var _super = _helpers.createSuper(DragAndDropController);
    function DragAndDropController(editor) {
        _helpers.classCallCheck(this, DragAndDropController);
        var _this;
        _this = _super.call(this);
        _this._editor = editor;
        _this._register(_this._editor.onMouseDown(function(e) {
            return _this._onEditorMouseDown(e);
        }));
        _this._register(_this._editor.onMouseUp(function(e) {
            return _this._onEditorMouseUp(e);
        }));
        _this._register(_this._editor.onMouseDrag(function(e) {
            return _this._onEditorMouseDrag(e);
        }));
        _this._register(_this._editor.onMouseDrop(function(e) {
            return _this._onEditorMouseDrop(e);
        }));
        _this._register(_this._editor.onMouseDropCanceled(function() {
            return _this._onEditorMouseDropCanceled();
        }));
        _this._register(_this._editor.onKeyDown(function(e) {
            return _this.onEditorKeyDown(e);
        }));
        _this._register(_this._editor.onKeyUp(function(e) {
            return _this.onEditorKeyUp(e);
        }));
        _this._register(_this._editor.onDidBlurEditorWidget(function() {
            return _this.onEditorBlur();
        }));
        _this._register(_this._editor.onDidBlurEditorText(function() {
            return _this.onEditorBlur();
        }));
        _this._dndDecorationIds = [];
        _this._mouseDown = false;
        _this._modifierPressed = false;
        _this._dragSelection = null;
        return _this;
    }
    _helpers.createClass(DragAndDropController, [
        {
            key: "onEditorBlur",
            value: function onEditorBlur() {
                this._removeDecoration();
                this._dragSelection = null;
                this._mouseDown = false;
                this._modifierPressed = false;
            }
        },
        {
            key: "onEditorKeyDown",
            value: function onEditorKeyDown(e) {
                if (!this._editor.getOption(31 /* dragAndDrop */ ) || this._editor.getOption(18 /* columnSelection */ )) return;
                if (hasTriggerModifier(e)) this._modifierPressed = true;
                if (this._mouseDown && hasTriggerModifier(e)) this._editor.updateOptions({
                    mouseStyle: 'copy'
                });
            }
        },
        {
            key: "onEditorKeyUp",
            value: function onEditorKeyUp(e) {
                if (!this._editor.getOption(31 /* dragAndDrop */ ) || this._editor.getOption(18 /* columnSelection */ )) return;
                if (hasTriggerModifier(e)) this._modifierPressed = false;
                if (this._mouseDown && e.keyCode === DragAndDropController.TRIGGER_KEY_VALUE) this._editor.updateOptions({
                    mouseStyle: 'default'
                });
            }
        },
        {
            key: "_onEditorMouseDown",
            value: function _onEditorMouseDown(mouseEvent) {
                this._mouseDown = true;
            }
        },
        {
            key: "_onEditorMouseUp",
            value: function _onEditorMouseUp(mouseEvent) {
                this._mouseDown = false;
                // Whenever users release the mouse, the drag and drop operation should finish and the cursor should revert to text.
                this._editor.updateOptions({
                    mouseStyle: 'text'
                });
            }
        },
        {
            key: "_onEditorMouseDrag",
            value: function _onEditorMouseDrag(mouseEvent) {
                var target = mouseEvent.target;
                if (this._dragSelection === null) {
                    var selections = this._editor.getSelections() || [];
                    var possibleSelections = selections.filter(function(selection) {
                        return target.position && selection.containsPosition(target.position);
                    });
                    if (possibleSelections.length === 1) this._dragSelection = possibleSelections[0];
                    else return;
                }
                if (hasTriggerModifier(mouseEvent.event)) this._editor.updateOptions({
                    mouseStyle: 'copy'
                });
                else this._editor.updateOptions({
                    mouseStyle: 'default'
                });
                if (target.position) {
                    if (this._dragSelection.containsPosition(target.position)) this._removeDecoration();
                    else this.showAt(target.position);
                }
            }
        },
        {
            key: "_onEditorMouseDropCanceled",
            value: function _onEditorMouseDropCanceled() {
                this._editor.updateOptions({
                    mouseStyle: 'text'
                });
                this._removeDecoration();
                this._dragSelection = null;
                this._mouseDown = false;
            }
        },
        {
            key: "_onEditorMouseDrop",
            value: function _onEditorMouseDrop(mouseEvent) {
                if (mouseEvent.target && (this._hitContent(mouseEvent.target) || this._hitMargin(mouseEvent.target)) && mouseEvent.target.position) {
                    var newCursorPosition = new _positionJs.Position(mouseEvent.target.position.lineNumber, mouseEvent.target.position.column);
                    if (this._dragSelection === null) {
                        var newSelections = null;
                        if (mouseEvent.event.shiftKey) {
                            var primarySelection = this._editor.getSelection();
                            if (primarySelection) {
                                var selectionStartLineNumber = primarySelection.selectionStartLineNumber, selectionStartColumn = primarySelection.selectionStartColumn;
                                newSelections = [
                                    new _selectionJs.Selection(selectionStartLineNumber, selectionStartColumn, newCursorPosition.lineNumber, newCursorPosition.column)
                                ];
                            }
                        } else newSelections = (this._editor.getSelections() || []).map(function(selection) {
                            if (selection.containsPosition(newCursorPosition)) return new _selectionJs.Selection(newCursorPosition.lineNumber, newCursorPosition.column, newCursorPosition.lineNumber, newCursorPosition.column);
                            else return selection;
                        });
                        // Use `mouse` as the source instead of `api` and setting the reason to explicit (to behave like any other mouse operation).
                        this._editor.setSelections(newSelections || [], 'mouse', 3 /* Explicit */ );
                    } else if (!this._dragSelection.containsPosition(newCursorPosition) || (hasTriggerModifier(mouseEvent.event) || this._modifierPressed) && (this._dragSelection.getEndPosition().equals(newCursorPosition) || this._dragSelection.getStartPosition().equals(newCursorPosition) // we allow users to paste content beside the selection
                    )) {
                        this._editor.pushUndoStop();
                        this._editor.executeCommand(DragAndDropController.ID, new _dragAndDropCommandJs.DragAndDropCommand(this._dragSelection, newCursorPosition, hasTriggerModifier(mouseEvent.event) || this._modifierPressed));
                        this._editor.pushUndoStop();
                    }
                }
                this._editor.updateOptions({
                    mouseStyle: 'text'
                });
                this._removeDecoration();
                this._dragSelection = null;
                this._mouseDown = false;
            }
        },
        {
            key: "showAt",
            value: function showAt(position) {
                var newDecorations = [
                    {
                        range: new _rangeJs.Range(position.lineNumber, position.column, position.lineNumber, position.column),
                        options: DragAndDropController._DECORATION_OPTIONS
                    }
                ];
                this._dndDecorationIds = this._editor.deltaDecorations(this._dndDecorationIds, newDecorations);
                this._editor.revealPosition(position, 1 /* Immediate */ );
            }
        },
        {
            key: "_removeDecoration",
            value: function _removeDecoration() {
                this._dndDecorationIds = this._editor.deltaDecorations(this._dndDecorationIds, []);
            }
        },
        {
            key: "_hitContent",
            value: function _hitContent(target) {
                return target.type === 6 /* CONTENT_TEXT */  || target.type === 7 /* CONTENT_EMPTY */ ;
            }
        },
        {
            key: "_hitMargin",
            value: function _hitMargin(target) {
                return target.type === 2 /* GUTTER_GLYPH_MARGIN */  || target.type === 3 /* GUTTER_LINE_NUMBERS */  || target.type === 4 /* GUTTER_LINE_DECORATIONS */ ;
            }
        },
        {
            key: "dispose",
            value: function dispose() {
                this._removeDecoration();
                this._dragSelection = null;
                this._mouseDown = false;
                this._modifierPressed = false;
                _helpers.get(_helpers.getPrototypeOf(DragAndDropController.prototype), "dispose", this).call(this);
            }
        }
    ]);
    return DragAndDropController;
}(_lifecycleJs.Disposable);
DragAndDropController.ID = 'editor.contrib.dragAndDrop';
DragAndDropController.TRIGGER_KEY_VALUE = _platformJs.isMacintosh ? 6 /* Alt */  : 5 /* Ctrl */ ;
DragAndDropController._DECORATION_OPTIONS = _textModelJs.ModelDecorationOptions.register({
    description: 'dnd-target',
    className: 'dnd-target'
});
_editorExtensionsJs.registerEditorContribution(DragAndDropController.ID, DragAndDropController);

},{"@swc/helpers":"erO4s","../../../base/common/lifecycle.js":"bcbPy","../../../base/common/platform.js":"8pohV","./dnd.css":"4KfoB","../../browser/editorExtensions.js":"dFnlo","../../common/core/position.js":"6xP0w","../../common/core/range.js":"VbyL8","../../common/core/selection.js":"hjmnH","../../common/model/textModel.js":"f18vR","./dragAndDropCommand.js":"4MRhO","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"4KfoB":[function() {},{}],"4MRhO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DragAndDropCommand", function() {
    return DragAndDropCommand;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _rangeJs = require("../../common/core/range.js");
var _selectionJs = require("../../common/core/selection.js");
var DragAndDropCommand = /*#__PURE__*/ function() {
    "use strict";
    function DragAndDropCommand(selection, targetPosition, copy) {
        _helpers.classCallCheck(this, DragAndDropCommand);
        this.selection = selection;
        this.targetPosition = targetPosition;
        this.copy = copy;
        this.targetSelection = null;
    }
    _helpers.createClass(DragAndDropCommand, [
        {
            key: "getEditOperations",
            value: function getEditOperations(model, builder) {
                var text = model.getValueInRange(this.selection);
                if (!this.copy) builder.addEditOperation(this.selection, null);
                builder.addEditOperation(new _rangeJs.Range(this.targetPosition.lineNumber, this.targetPosition.column, this.targetPosition.lineNumber, this.targetPosition.column), text);
                if (this.selection.containsPosition(this.targetPosition) && !(this.copy && (this.selection.getEndPosition().equals(this.targetPosition) || this.selection.getStartPosition().equals(this.targetPosition) // we allow users to paste content beside the selection
                ))) {
                    this.targetSelection = this.selection;
                    return;
                }
                if (this.copy) {
                    this.targetSelection = new _selectionJs.Selection(this.targetPosition.lineNumber, this.targetPosition.column, this.selection.endLineNumber - this.selection.startLineNumber + this.targetPosition.lineNumber, this.selection.startLineNumber === this.selection.endLineNumber ? this.targetPosition.column + this.selection.endColumn - this.selection.startColumn : this.selection.endColumn);
                    return;
                }
                if (this.targetPosition.lineNumber > this.selection.endLineNumber) {
                    // Drag the selection downwards
                    this.targetSelection = new _selectionJs.Selection(this.targetPosition.lineNumber - this.selection.endLineNumber + this.selection.startLineNumber, this.targetPosition.column, this.targetPosition.lineNumber, this.selection.startLineNumber === this.selection.endLineNumber ? this.targetPosition.column + this.selection.endColumn - this.selection.startColumn : this.selection.endColumn);
                    return;
                }
                if (this.targetPosition.lineNumber < this.selection.endLineNumber) {
                    // Drag the selection upwards
                    this.targetSelection = new _selectionJs.Selection(this.targetPosition.lineNumber, this.targetPosition.column, this.targetPosition.lineNumber + this.selection.endLineNumber - this.selection.startLineNumber, this.selection.startLineNumber === this.selection.endLineNumber ? this.targetPosition.column + this.selection.endColumn - this.selection.startColumn : this.selection.endColumn);
                    return;
                }
                // The target position is at the same line as the selection's end position.
                if (this.selection.endColumn <= this.targetPosition.column) // The target position is after the selection's end position
                this.targetSelection = new _selectionJs.Selection(this.targetPosition.lineNumber - this.selection.endLineNumber + this.selection.startLineNumber, this.selection.startLineNumber === this.selection.endLineNumber ? this.targetPosition.column - this.selection.endColumn + this.selection.startColumn : this.targetPosition.column - this.selection.endColumn + this.selection.startColumn, this.targetPosition.lineNumber, this.selection.startLineNumber === this.selection.endLineNumber ? this.targetPosition.column : this.selection.endColumn);
                else // The target position is before the selection's end position. Since the selection doesn't contain the target position, the selection is one-line and target position is before this selection.
                this.targetSelection = new _selectionJs.Selection(this.targetPosition.lineNumber - this.selection.endLineNumber + this.selection.startLineNumber, this.targetPosition.column, this.targetPosition.lineNumber, this.targetPosition.column + this.selection.endColumn - this.selection.startColumn);
            }
        },
        {
            key: "computeCursorState",
            value: function computeCursorState(model, helper) {
                return this.targetSelection;
            }
        }
    ]);
    return DragAndDropCommand;
}();

},{"@swc/helpers":"erO4s","../../common/core/range.js":"VbyL8","../../common/core/selection.js":"hjmnH","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"kgAfF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getSelectionSearchString", function() {
    return getSelectionSearchString;
});
parcelHelpers.export(exports, "CommonFindController", function() {
    return CommonFindController;
});
parcelHelpers.export(exports, "FindController", function() {
    return FindController;
});
parcelHelpers.export(exports, "StartFindAction", function() {
    return StartFindAction;
});
parcelHelpers.export(exports, "StartFindWithArgsAction", function() {
    return StartFindWithArgsAction;
});
parcelHelpers.export(exports, "StartFindWithSelectionAction", function() {
    return StartFindWithSelectionAction;
});
parcelHelpers.export(exports, "MatchFindAction", function() {
    return MatchFindAction;
});
parcelHelpers.export(exports, "NextMatchFindAction", function() {
    return NextMatchFindAction;
});
parcelHelpers.export(exports, "PreviousMatchFindAction", function() {
    return PreviousMatchFindAction;
});
parcelHelpers.export(exports, "SelectionMatchFindAction", function() {
    return SelectionMatchFindAction;
});
parcelHelpers.export(exports, "NextSelectionMatchFindAction", function() {
    return NextSelectionMatchFindAction;
});
parcelHelpers.export(exports, "PreviousSelectionMatchFindAction", function() {
    return PreviousSelectionMatchFindAction;
});
parcelHelpers.export(exports, "StartFindReplaceAction", function() {
    return StartFindReplaceAction;
});
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
var _asyncJs = require("../../../base/common/async.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _stringsJs = require("../../../base/common/strings.js");
var _editorExtensionsJs = require("../../browser/editorExtensions.js");
var _editorContextKeysJs = require("../../common/editorContextKeys.js");
var _findModelJs = require("./findModel.js");
var _findOptionsWidgetJs = require("./findOptionsWidget.js");
var _findStateJs = require("./findState.js");
var _findWidgetJs = require("./findWidget.js");
var _nlsJs = require("../../../nls.js");
var _actionsJs = require("../../../platform/actions/common/actions.js");
var _clipboardServiceJs = require("../../../platform/clipboard/common/clipboardService.js");
var _contextkeyJs = require("../../../platform/contextkey/common/contextkey.js");
var _contextViewJs = require("../../../platform/contextview/browser/contextView.js");
var _keybindingJs = require("../../../platform/keybinding/common/keybinding.js");
var _notificationJs = require("../../../platform/notification/common/notification.js");
var _storageJs = require("../../../platform/storage/common/storage.js");
var _themeServiceJs = require("../../../platform/theme/common/themeService.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var SEARCH_STRING_MAX_LENGTH = 524288;
function getSelectionSearchString(editor) {
    var seedSearchStringFromSelection = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 'single', seedSearchStringFromNonEmptySelection = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
    if (!editor.hasModel()) return null;
    var selection = editor.getSelection();
    // if selection spans multiple lines, default search string to empty
    if (seedSearchStringFromSelection === 'single' && selection.startLineNumber === selection.endLineNumber || seedSearchStringFromSelection === 'multiple') {
        if (selection.isEmpty()) {
            var wordAtPosition = editor.getConfiguredWordAtPosition(selection.getStartPosition());
            if (wordAtPosition && false === seedSearchStringFromNonEmptySelection) return wordAtPosition.word;
        } else {
            if (editor.getModel().getValueLengthInRange(selection) < SEARCH_STRING_MAX_LENGTH) return editor.getModel().getValueInRange(selection);
        }
    }
    return null;
}
var CommonFindController = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(CommonFindController1, Disposable);
    var _super = _helpers.createSuper(CommonFindController1);
    function CommonFindController1(editor, contextKeyService, storageService, clipboardService) {
        _helpers.classCallCheck(this, CommonFindController1);
        var _this;
        _this = _super.call(this);
        _this._editor = editor;
        _this._findWidgetVisible = _findModelJs.CONTEXT_FIND_WIDGET_VISIBLE.bindTo(contextKeyService);
        _this._contextKeyService = contextKeyService;
        _this._storageService = storageService;
        _this._clipboardService = clipboardService;
        _this._updateHistoryDelayer = new _asyncJs.Delayer(500);
        _this._state = _this._register(new _findStateJs.FindReplaceState());
        _this.loadQueryState();
        _this._register(_this._state.onFindReplaceStateChange(function(e) {
            return _this._onStateChanged(e);
        }));
        _this._model = null;
        _this._register(_this._editor.onDidChangeModel(function() {
            var shouldRestartFind = _this._editor.getModel() && _this._state.isRevealed;
            _this.disposeModel();
            _this._state.change({
                searchScope: null,
                matchCase: _this._storageService.getBoolean('editor.matchCase', 1 /* WORKSPACE */ , false),
                wholeWord: _this._storageService.getBoolean('editor.wholeWord', 1 /* WORKSPACE */ , false),
                isRegex: _this._storageService.getBoolean('editor.isRegex', 1 /* WORKSPACE */ , false),
                preserveCase: _this._storageService.getBoolean('editor.preserveCase', 1 /* WORKSPACE */ , false)
            }, false);
            if (shouldRestartFind) _this._start({
                forceRevealReplace: false,
                seedSearchStringFromSelection: 'none',
                seedSearchStringFromNonEmptySelection: false,
                seedSearchStringFromGlobalClipboard: false,
                shouldFocus: 0 /* NoFocusChange */ ,
                shouldAnimate: false,
                updateSearchScope: false,
                loop: _this._editor.getOption(35 /* find */ ).loop
            });
        }));
        return _this;
    }
    _helpers.createClass(CommonFindController1, [
        {
            key: "editor",
            get: function get() {
                return this._editor;
            }
        },
        {
            key: "dispose",
            value: function dispose() {
                this.disposeModel();
                _helpers.get(_helpers.getPrototypeOf(CommonFindController1.prototype), "dispose", this).call(this);
            }
        },
        {
            key: "disposeModel",
            value: function disposeModel() {
                if (this._model) {
                    this._model.dispose();
                    this._model = null;
                }
            }
        },
        {
            key: "_onStateChanged",
            value: function _onStateChanged(e) {
                this.saveQueryState(e);
                if (e.isRevealed) {
                    if (this._state.isRevealed) this._findWidgetVisible.set(true);
                    else {
                        this._findWidgetVisible.reset();
                        this.disposeModel();
                    }
                }
                if (e.searchString) this.setGlobalBufferTerm(this._state.searchString);
            }
        },
        {
            key: "saveQueryState",
            value: function saveQueryState(e) {
                if (e.isRegex) this._storageService.store('editor.isRegex', this._state.actualIsRegex, 1 /* WORKSPACE */ , 0 /* USER */ );
                if (e.wholeWord) this._storageService.store('editor.wholeWord', this._state.actualWholeWord, 1 /* WORKSPACE */ , 0 /* USER */ );
                if (e.matchCase) this._storageService.store('editor.matchCase', this._state.actualMatchCase, 1 /* WORKSPACE */ , 0 /* USER */ );
                if (e.preserveCase) this._storageService.store('editor.preserveCase', this._state.actualPreserveCase, 1 /* WORKSPACE */ , 0 /* USER */ );
            }
        },
        {
            key: "loadQueryState",
            value: function loadQueryState() {
                this._state.change({
                    matchCase: this._storageService.getBoolean('editor.matchCase', 1 /* WORKSPACE */ , this._state.matchCase),
                    wholeWord: this._storageService.getBoolean('editor.wholeWord', 1 /* WORKSPACE */ , this._state.wholeWord),
                    isRegex: this._storageService.getBoolean('editor.isRegex', 1 /* WORKSPACE */ , this._state.isRegex),
                    preserveCase: this._storageService.getBoolean('editor.preserveCase', 1 /* WORKSPACE */ , this._state.preserveCase)
                }, false);
            }
        },
        {
            key: "isFindInputFocused",
            value: function isFindInputFocused() {
                return !!_findModelJs.CONTEXT_FIND_INPUT_FOCUSED.getValue(this._contextKeyService);
            }
        },
        {
            key: "getState",
            value: function getState() {
                return this._state;
            }
        },
        {
            key: "closeFindWidget",
            value: function closeFindWidget() {
                this._state.change({
                    isRevealed: false,
                    searchScope: null
                }, false);
                this._editor.focus();
            }
        },
        {
            key: "toggleCaseSensitive",
            value: function toggleCaseSensitive() {
                this._state.change({
                    matchCase: !this._state.matchCase
                }, false);
                if (!this._state.isRevealed) this.highlightFindOptions();
            }
        },
        {
            key: "toggleWholeWords",
            value: function toggleWholeWords() {
                this._state.change({
                    wholeWord: !this._state.wholeWord
                }, false);
                if (!this._state.isRevealed) this.highlightFindOptions();
            }
        },
        {
            key: "toggleRegex",
            value: function toggleRegex() {
                this._state.change({
                    isRegex: !this._state.isRegex
                }, false);
                if (!this._state.isRevealed) this.highlightFindOptions();
            }
        },
        {
            key: "togglePreserveCase",
            value: function togglePreserveCase() {
                this._state.change({
                    preserveCase: !this._state.preserveCase
                }, false);
                if (!this._state.isRevealed) this.highlightFindOptions();
            }
        },
        {
            key: "toggleSearchScope",
            value: function toggleSearchScope() {
                if (this._state.searchScope) this._state.change({
                    searchScope: null
                }, true);
                else if (this._editor.hasModel()) {
                    var _this = this;
                    var selections = this._editor.getSelections();
                    selections.map(function(selection) {
                        if (selection.endColumn === 1 && selection.endLineNumber > selection.startLineNumber) selection = selection.setEndPosition(selection.endLineNumber - 1, _this._editor.getModel().getLineMaxColumn(selection.endLineNumber - 1));
                        if (!selection.isEmpty()) return selection;
                        return null;
                    }).filter(function(element) {
                        return !!element;
                    });
                    if (selections.length) this._state.change({
                        searchScope: selections
                    }, true);
                }
            }
        },
        {
            key: "setSearchString",
            value: function setSearchString(searchString) {
                if (this._state.isRegex) searchString = _stringsJs.escapeRegExpCharacters(searchString);
                this._state.change({
                    searchString: searchString
                }, false);
            }
        },
        {
            key: "highlightFindOptions",
            value: function highlightFindOptions() {
                var ignoreWhenVisible = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
            // overwritten in subclass
            }
        },
        {
            key: "_start",
            value: function _start(opts, newState) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var stateChanges, selectionSearchString, selectionSearchString1, selectionSearchString2, currentSelections;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                this.disposeModel();
                                if (this._editor.hasModel()) {
                                    _ctx.next = 3;
                                    break;
                                }
                                return _ctx.abrupt("return");
                            case 3:
                                stateChanges = Object.assign(Object.assign({}, newState), {
                                    isRevealed: true
                                });
                                if (opts.seedSearchStringFromSelection === 'single') {
                                    selectionSearchString = getSelectionSearchString(this._editor, opts.seedSearchStringFromSelection, opts.seedSearchStringFromNonEmptySelection);
                                    if (selectionSearchString) {
                                        if (this._state.isRegex) stateChanges.searchString = _stringsJs.escapeRegExpCharacters(selectionSearchString);
                                        else stateChanges.searchString = selectionSearchString;
                                    }
                                } else if (opts.seedSearchStringFromSelection === 'multiple' && !opts.updateSearchScope) {
                                    selectionSearchString1 = getSelectionSearchString(this._editor, opts.seedSearchStringFromSelection);
                                    if (selectionSearchString1) stateChanges.searchString = selectionSearchString1;
                                }
                                if (!(!stateChanges.searchString && opts.seedSearchStringFromGlobalClipboard)) {
                                    _ctx.next = 12;
                                    break;
                                }
                                _ctx.next = 8;
                                return this.getGlobalBufferTerm();
                            case 8:
                                selectionSearchString2 = _ctx.sent;
                                if (this._editor.hasModel()) {
                                    _ctx.next = 11;
                                    break;
                                }
                                return _ctx.abrupt("return");
                            case 11:
                                if (selectionSearchString2) stateChanges.searchString = selectionSearchString2;
                            case 12:
                                // Overwrite isReplaceRevealed
                                if (opts.forceRevealReplace || stateChanges.isReplaceRevealed) stateChanges.isReplaceRevealed = true;
                                else if (!this._findWidgetVisible.get()) stateChanges.isReplaceRevealed = false;
                                if (opts.updateSearchScope) {
                                    currentSelections = this._editor.getSelections();
                                    if (currentSelections.some(function(selection) {
                                        return !selection.isEmpty();
                                    })) stateChanges.searchScope = currentSelections;
                                }
                                stateChanges.loop = opts.loop;
                                this._state.change(stateChanges, false);
                                if (!this._model) this._model = new _findModelJs.FindModelBoundToEditorModel(this._editor, this._state);
                            case 17:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this);
                }));
            }
        },
        {
            key: "start",
            value: function start(opts, newState) {
                return this._start(opts, newState);
            }
        },
        {
            key: "moveToNextMatch",
            value: function moveToNextMatch() {
                if (this._model) {
                    this._model.moveToNextMatch();
                    return true;
                }
                return false;
            }
        },
        {
            key: "moveToPrevMatch",
            value: function moveToPrevMatch() {
                if (this._model) {
                    this._model.moveToPrevMatch();
                    return true;
                }
                return false;
            }
        },
        {
            key: "replace",
            value: function replace() {
                if (this._model) {
                    this._model.replace();
                    return true;
                }
                return false;
            }
        },
        {
            key: "replaceAll",
            value: function replaceAll() {
                if (this._model) {
                    this._model.replaceAll();
                    return true;
                }
                return false;
            }
        },
        {
            key: "selectAllMatches",
            value: function selectAllMatches() {
                if (this._model) {
                    this._model.selectAllMatches();
                    this._editor.focus();
                    return true;
                }
                return false;
            }
        },
        {
            key: "getGlobalBufferTerm",
            value: function getGlobalBufferTerm() {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                if (!(this._editor.getOption(35 /* find */ ).globalFindClipboard && this._editor.hasModel() && !this._editor.getModel().isTooLargeForSyncing())) {
                                    _ctx.next = 2;
                                    break;
                                }
                                return _ctx.abrupt("return", this._clipboardService.readFindText());
                            case 2:
                                return _ctx.abrupt("return", '');
                            case 3:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this);
                }));
            }
        },
        {
            key: "setGlobalBufferTerm",
            value: function setGlobalBufferTerm(text) {
                if (this._editor.getOption(35 /* find */ ).globalFindClipboard && this._editor.hasModel() && !this._editor.getModel().isTooLargeForSyncing()) // intentionally not awaited
                this._clipboardService.writeFindText(text);
            }
        }
    ], [
        {
            key: "get",
            value: function get(editor) {
                return editor.getContribution(CommonFindController1.ID);
            }
        }
    ]);
    return CommonFindController1;
}(_lifecycleJs.Disposable);
CommonFindController.ID = 'editor.contrib.findController';
CommonFindController = __decorate([
    __param(1, _contextkeyJs.IContextKeyService),
    __param(2, _storageJs.IStorageService),
    __param(3, _clipboardServiceJs.IClipboardService)
], CommonFindController);
var FindController = /*#__PURE__*/ function(CommonFindController2) {
    "use strict";
    _helpers.inherits(FindController1, CommonFindController2);
    var _super1 = _helpers.createSuper(FindController1);
    function FindController1(editor, _contextViewService, _contextKeyService, _keybindingService, _themeService, _notificationService, _storageService, clipboardService) {
        _helpers.classCallCheck(this, FindController1);
        var _this;
        _this = _super1.call(this, editor, _contextKeyService, _storageService, clipboardService);
        _this._contextViewService = _contextViewService;
        _this._keybindingService = _keybindingService;
        _this._themeService = _themeService;
        _this._notificationService = _notificationService;
        _this._widget = null;
        _this._findOptionsWidget = null;
        return _this;
    }
    _helpers.createClass(FindController1, [
        {
            key: "_start",
            value: function _start(opts, newState) {
                var _this = this;
                var _super = Object.create(null, {
                    _start: {
                        get: function() {
                            return _helpers.get(_helpers.getPrototypeOf(FindController1.prototype), "_start", _this);
                        }
                    }
                });
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var selection, updateSearchScope, isSelectionMultipleLine;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                if (!this._widget) this._createFindWidget();
                                selection = this._editor.getSelection();
                                updateSearchScope = false;
                                _ctx.t0 = this._editor.getOption(35 /* find */ ).autoFindInSelection;
                                _ctx.next = _ctx.t0 === 'always' ? 6 : _ctx.t0 === 'never' ? 8 : _ctx.t0 === 'multiline' ? 10 : 13;
                                break;
                            case 6:
                                updateSearchScope = true;
                                return _ctx.abrupt("break", 14);
                            case 8:
                                updateSearchScope = false;
                                return _ctx.abrupt("break", 14);
                            case 10:
                                isSelectionMultipleLine = !!selection && selection.startLineNumber !== selection.endLineNumber;
                                updateSearchScope = isSelectionMultipleLine;
                                return _ctx.abrupt("break", 14);
                            case 13:
                                return _ctx.abrupt("break", 14);
                            case 14:
                                opts.updateSearchScope = opts.updateSearchScope || updateSearchScope;
                                _ctx.next = 17;
                                return _super._start.call(this, opts, newState);
                            case 17:
                                if (this._widget) {
                                    if (opts.shouldFocus === 2 /* FocusReplaceInput */ ) this._widget.focusReplaceInput();
                                    else if (opts.shouldFocus === 1 /* FocusFindInput */ ) this._widget.focusFindInput();
                                }
                            case 18:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this);
                }));
            }
        },
        {
            key: "highlightFindOptions",
            value: function highlightFindOptions() {
                var ignoreWhenVisible = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
                if (!this._widget) this._createFindWidget();
                if (this._state.isRevealed && !ignoreWhenVisible) this._widget.highlightFindOptions();
                else this._findOptionsWidget.highlightFindOptions();
            }
        },
        {
            key: "_createFindWidget",
            value: function _createFindWidget() {
                this._widget = this._register(new _findWidgetJs.FindWidget(this._editor, this, this._state, this._contextViewService, this._keybindingService, this._contextKeyService, this._themeService, this._storageService, this._notificationService));
                this._findOptionsWidget = this._register(new _findOptionsWidgetJs.FindOptionsWidget(this._editor, this._state, this._keybindingService, this._themeService));
            }
        }
    ]);
    return FindController1;
}(CommonFindController);
FindController = __decorate([
    __param(1, _contextViewJs.IContextViewService),
    __param(2, _contextkeyJs.IContextKeyService),
    __param(3, _keybindingJs.IKeybindingService),
    __param(4, _themeServiceJs.IThemeService),
    __param(5, _notificationJs.INotificationService),
    __param(6, _storageJs.IStorageService),
    __param(7, _clipboardServiceJs.IClipboardService)
], FindController);
var StartFindAction = _editorExtensionsJs.registerMultiEditorAction(new _editorExtensionsJs.MultiEditorAction({
    id: _findModelJs.FIND_IDS.StartFindAction,
    label: _nlsJs.localize('startFindAction', "Find"),
    alias: 'Find',
    precondition: _contextkeyJs.ContextKeyExpr.or(_editorContextKeysJs.EditorContextKeys.focus, _contextkeyJs.ContextKeyExpr.has('editorIsOpen')),
    kbOpts: {
        kbExpr: null,
        primary: 2084 /* KeyF */ ,
        weight: 100 /* EditorContrib */ 
    },
    menuOpts: {
        menuId: _actionsJs.MenuId.MenubarEditMenu,
        group: '3_find',
        title: _nlsJs.localize({
            key: 'miFind',
            comment: [
                '&& denotes a mnemonic'
            ]
        }, "&&Find"),
        order: 1
    }
}));
StartFindAction.addImplementation(0, function(accessor, editor, args) {
    var controller = CommonFindController.get(editor);
    if (!controller) return false;
    return controller.start({
        forceRevealReplace: false,
        seedSearchStringFromSelection: editor.getOption(35 /* find */ ).seedSearchStringFromSelection !== 'never' ? 'single' : 'none',
        seedSearchStringFromNonEmptySelection: editor.getOption(35 /* find */ ).seedSearchStringFromSelection === 'selection',
        seedSearchStringFromGlobalClipboard: editor.getOption(35 /* find */ ).globalFindClipboard,
        shouldFocus: 1 /* FocusFindInput */ ,
        shouldAnimate: true,
        updateSearchScope: false,
        loop: editor.getOption(35 /* find */ ).loop
    });
});
var findArgDescription = {
    description: 'Open a new In-Editor Find Widget.',
    args: [
        {
            name: 'Open a new In-Editor Find Widget args',
            schema: {
                properties: {
                    searchString: {
                        type: 'string'
                    },
                    replaceString: {
                        type: 'string'
                    },
                    regex: {
                        type: 'boolean'
                    },
                    regexOverride: {
                        type: 'number',
                        description: _nlsJs.localize('actions.find.isRegexOverride', 'Overrides "Use Regular Expression" flag.\nThe flag will not be saved for the future.\n0: Do Nothing\n1: True\n2: False')
                    },
                    wholeWord: {
                        type: 'boolean'
                    },
                    wholeWordOverride: {
                        type: 'number',
                        description: _nlsJs.localize('actions.find.wholeWordOverride', 'Overrides "Match Whole Word" flag.\nThe flag will not be saved for the future.\n0: Do Nothing\n1: True\n2: False')
                    },
                    matchCase: {
                        type: 'boolean'
                    },
                    matchCaseOverride: {
                        type: 'number',
                        description: _nlsJs.localize('actions.find.matchCaseOverride', 'Overrides "Math Case" flag.\nThe flag will not be saved for the future.\n0: Do Nothing\n1: True\n2: False')
                    },
                    preserveCase: {
                        type: 'boolean'
                    },
                    preserveCaseOverride: {
                        type: 'number',
                        description: _nlsJs.localize('actions.find.preserveCaseOverride', 'Overrides "Preserve Case" flag.\nThe flag will not be saved for the future.\n0: Do Nothing\n1: True\n2: False')
                    },
                    findInSelection: {
                        type: 'boolean'
                    }
                }
            }
        }
    ]
};
var StartFindWithArgsAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(StartFindWithArgsAction, EditorAction);
    var _super = _helpers.createSuper(StartFindWithArgsAction);
    function StartFindWithArgsAction() {
        _helpers.classCallCheck(this, StartFindWithArgsAction);
        return _super.call(this, {
            id: _findModelJs.FIND_IDS.StartFindWithArgs,
            label: _nlsJs.localize('startFindWithArgsAction', "Find With Arguments"),
            alias: 'Find With Arguments',
            precondition: undefined,
            kbOpts: {
                kbExpr: null,
                primary: 0,
                weight: 100 /* EditorContrib */ 
            },
            description: findArgDescription
        });
    }
    _helpers.createClass(StartFindWithArgsAction, [
        {
            key: "run",
            value: function run(accessor, editor, args) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var controller, newState;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                controller = CommonFindController.get(editor);
                                if (!controller) {
                                    _ctx.next = 6;
                                    break;
                                }
                                newState = args ? {
                                    searchString: args.searchString,
                                    replaceString: args.replaceString,
                                    isReplaceRevealed: args.replaceString !== undefined,
                                    isRegex: args.isRegex,
                                    // isRegexOverride: args.regexOverride,
                                    wholeWord: args.matchWholeWord,
                                    // wholeWordOverride: args.wholeWordOverride,
                                    matchCase: args.isCaseSensitive,
                                    // matchCaseOverride: args.matchCaseOverride,
                                    preserveCase: args.preserveCase
                                } : {};
                                _ctx.next = 5;
                                return controller.start({
                                    forceRevealReplace: false,
                                    seedSearchStringFromSelection: controller.getState().searchString.length === 0 && editor.getOption(35 /* find */ ).seedSearchStringFromSelection !== 'never' ? 'single' : 'none',
                                    seedSearchStringFromNonEmptySelection: editor.getOption(35 /* find */ ).seedSearchStringFromSelection === 'selection',
                                    seedSearchStringFromGlobalClipboard: true,
                                    shouldFocus: 1 /* FocusFindInput */ ,
                                    shouldAnimate: true,
                                    updateSearchScope: (args === null || args === void 0 ? void 0 : args.findInSelection) || false,
                                    loop: editor.getOption(35 /* find */ ).loop
                                }, newState);
                            case 5:
                                controller.setGlobalBufferTerm(controller.getState().searchString);
                            case 6:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee);
                }));
            }
        }
    ]);
    return StartFindWithArgsAction;
}(_editorExtensionsJs.EditorAction);
var StartFindWithSelectionAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(StartFindWithSelectionAction, EditorAction);
    var _super = _helpers.createSuper(StartFindWithSelectionAction);
    function StartFindWithSelectionAction() {
        _helpers.classCallCheck(this, StartFindWithSelectionAction);
        return _super.call(this, {
            id: _findModelJs.FIND_IDS.StartFindWithSelection,
            label: _nlsJs.localize('startFindWithSelectionAction', "Find With Selection"),
            alias: 'Find With Selection',
            precondition: undefined,
            kbOpts: {
                kbExpr: null,
                primary: 0,
                mac: {
                    primary: 2083 /* KeyE */ 
                },
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    _helpers.createClass(StartFindWithSelectionAction, [
        {
            key: "run",
            value: function run(accessor, editor) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var controller;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                controller = CommonFindController.get(editor);
                                if (!controller) {
                                    _ctx.next = 5;
                                    break;
                                }
                                _ctx.next = 4;
                                return controller.start({
                                    forceRevealReplace: false,
                                    seedSearchStringFromSelection: 'multiple',
                                    seedSearchStringFromNonEmptySelection: false,
                                    seedSearchStringFromGlobalClipboard: false,
                                    shouldFocus: 0 /* NoFocusChange */ ,
                                    shouldAnimate: true,
                                    updateSearchScope: false,
                                    loop: editor.getOption(35 /* find */ ).loop
                                });
                            case 4:
                                controller.setGlobalBufferTerm(controller.getState().searchString);
                            case 5:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee);
                }));
            }
        }
    ]);
    return StartFindWithSelectionAction;
}(_editorExtensionsJs.EditorAction);
var MatchFindAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(MatchFindAction, EditorAction);
    var _super = _helpers.createSuper(MatchFindAction);
    function MatchFindAction() {
        _helpers.classCallCheck(this, MatchFindAction);
        return _super.apply(this, arguments);
    }
    _helpers.createClass(MatchFindAction, [
        {
            key: "run",
            value: function run(accessor, editor) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var controller;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                controller = CommonFindController.get(editor);
                                if (!(controller && !this._run(controller))) {
                                    _ctx.next = 5;
                                    break;
                                }
                                _ctx.next = 4;
                                return controller.start({
                                    forceRevealReplace: false,
                                    seedSearchStringFromSelection: controller.getState().searchString.length === 0 && editor.getOption(35 /* find */ ).seedSearchStringFromSelection !== 'never' ? 'single' : 'none',
                                    seedSearchStringFromNonEmptySelection: editor.getOption(35 /* find */ ).seedSearchStringFromSelection === 'selection',
                                    seedSearchStringFromGlobalClipboard: true,
                                    shouldFocus: 0 /* NoFocusChange */ ,
                                    shouldAnimate: true,
                                    updateSearchScope: false,
                                    loop: editor.getOption(35 /* find */ ).loop
                                });
                            case 4:
                                this._run(controller);
                            case 5:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this);
                }));
            }
        }
    ]);
    return MatchFindAction;
}(_editorExtensionsJs.EditorAction);
var NextMatchFindAction = /*#__PURE__*/ function(MatchFindAction) {
    "use strict";
    _helpers.inherits(NextMatchFindAction, MatchFindAction);
    var _super = _helpers.createSuper(NextMatchFindAction);
    function NextMatchFindAction() {
        _helpers.classCallCheck(this, NextMatchFindAction);
        return _super.call(this, {
            id: _findModelJs.FIND_IDS.NextMatchFindAction,
            label: _nlsJs.localize('findNextMatchAction', "Find Next"),
            alias: 'Find Next',
            precondition: undefined,
            kbOpts: [
                {
                    kbExpr: _editorContextKeysJs.EditorContextKeys.focus,
                    primary: 61 /* F3 */ ,
                    mac: {
                        primary: 2085 /* KeyG */ ,
                        secondary: [
                            61 /* F3 */ 
                        ]
                    },
                    weight: 100 /* EditorContrib */ 
                },
                {
                    kbExpr: _contextkeyJs.ContextKeyExpr.and(_editorContextKeysJs.EditorContextKeys.focus, _findModelJs.CONTEXT_FIND_INPUT_FOCUSED),
                    primary: 3 /* Enter */ ,
                    weight: 100 /* EditorContrib */ 
                }
            ]
        });
    }
    _helpers.createClass(NextMatchFindAction, [
        {
            key: "_run",
            value: function _run(controller) {
                var result = controller.moveToNextMatch();
                if (result) {
                    controller.editor.pushUndoStop();
                    return true;
                }
                return false;
            }
        }
    ]);
    return NextMatchFindAction;
}(MatchFindAction);
var PreviousMatchFindAction = /*#__PURE__*/ function(MatchFindAction) {
    "use strict";
    _helpers.inherits(PreviousMatchFindAction, MatchFindAction);
    var _super = _helpers.createSuper(PreviousMatchFindAction);
    function PreviousMatchFindAction() {
        _helpers.classCallCheck(this, PreviousMatchFindAction);
        return _super.call(this, {
            id: _findModelJs.FIND_IDS.PreviousMatchFindAction,
            label: _nlsJs.localize('findPreviousMatchAction', "Find Previous"),
            alias: 'Find Previous',
            precondition: undefined,
            kbOpts: [
                {
                    kbExpr: _editorContextKeysJs.EditorContextKeys.focus,
                    primary: 1085 /* F3 */ ,
                    mac: {
                        primary: 3109 /* KeyG */ ,
                        secondary: [
                            1085 /* F3 */ 
                        ]
                    },
                    weight: 100 /* EditorContrib */ 
                },
                {
                    kbExpr: _contextkeyJs.ContextKeyExpr.and(_editorContextKeysJs.EditorContextKeys.focus, _findModelJs.CONTEXT_FIND_INPUT_FOCUSED),
                    primary: 1027 /* Enter */ ,
                    weight: 100 /* EditorContrib */ 
                }
            ]
        });
    }
    _helpers.createClass(PreviousMatchFindAction, [
        {
            key: "_run",
            value: function _run(controller) {
                return controller.moveToPrevMatch();
            }
        }
    ]);
    return PreviousMatchFindAction;
}(MatchFindAction);
var SelectionMatchFindAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(SelectionMatchFindAction, EditorAction);
    var _super = _helpers.createSuper(SelectionMatchFindAction);
    function SelectionMatchFindAction() {
        _helpers.classCallCheck(this, SelectionMatchFindAction);
        return _super.apply(this, arguments);
    }
    _helpers.createClass(SelectionMatchFindAction, [
        {
            key: "run",
            value: function run(accessor, editor) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var controller, seedSearchStringFromNonEmptySelection, selectionSearchString;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                controller = CommonFindController.get(editor);
                                if (controller) {
                                    _ctx.next = 3;
                                    break;
                                }
                                return _ctx.abrupt("return");
                            case 3:
                                seedSearchStringFromNonEmptySelection = editor.getOption(35 /* find */ ).seedSearchStringFromSelection === 'selection';
                                selectionSearchString = null;
                                if (editor.getOption(35 /* find */ ).seedSearchStringFromSelection !== 'never') selectionSearchString = getSelectionSearchString(editor, 'single', seedSearchStringFromNonEmptySelection);
                                if (selectionSearchString) controller.setSearchString(selectionSearchString);
                                if (this._run(controller)) {
                                    _ctx.next = 11;
                                    break;
                                }
                                _ctx.next = 10;
                                return controller.start({
                                    forceRevealReplace: false,
                                    seedSearchStringFromSelection: editor.getOption(35 /* find */ ).seedSearchStringFromSelection !== 'never' ? 'single' : 'none',
                                    seedSearchStringFromNonEmptySelection: seedSearchStringFromNonEmptySelection,
                                    seedSearchStringFromGlobalClipboard: false,
                                    shouldFocus: 0 /* NoFocusChange */ ,
                                    shouldAnimate: true,
                                    updateSearchScope: false,
                                    loop: editor.getOption(35 /* find */ ).loop
                                });
                            case 10:
                                this._run(controller);
                            case 11:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this);
                }));
            }
        }
    ]);
    return SelectionMatchFindAction;
}(_editorExtensionsJs.EditorAction);
var NextSelectionMatchFindAction = /*#__PURE__*/ function(SelectionMatchFindAction) {
    "use strict";
    _helpers.inherits(NextSelectionMatchFindAction, SelectionMatchFindAction);
    var _super = _helpers.createSuper(NextSelectionMatchFindAction);
    function NextSelectionMatchFindAction() {
        _helpers.classCallCheck(this, NextSelectionMatchFindAction);
        return _super.call(this, {
            id: _findModelJs.FIND_IDS.NextSelectionMatchFindAction,
            label: _nlsJs.localize('nextSelectionMatchFindAction', "Find Next Selection"),
            alias: 'Find Next Selection',
            precondition: undefined,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.focus,
                primary: 2109 /* F3 */ ,
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    _helpers.createClass(NextSelectionMatchFindAction, [
        {
            key: "_run",
            value: function _run(controller) {
                return controller.moveToNextMatch();
            }
        }
    ]);
    return NextSelectionMatchFindAction;
}(SelectionMatchFindAction);
var PreviousSelectionMatchFindAction = /*#__PURE__*/ function(SelectionMatchFindAction) {
    "use strict";
    _helpers.inherits(PreviousSelectionMatchFindAction, SelectionMatchFindAction);
    var _super = _helpers.createSuper(PreviousSelectionMatchFindAction);
    function PreviousSelectionMatchFindAction() {
        _helpers.classCallCheck(this, PreviousSelectionMatchFindAction);
        return _super.call(this, {
            id: _findModelJs.FIND_IDS.PreviousSelectionMatchFindAction,
            label: _nlsJs.localize('previousSelectionMatchFindAction', "Find Previous Selection"),
            alias: 'Find Previous Selection',
            precondition: undefined,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.focus,
                primary: 3133 /* F3 */ ,
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    _helpers.createClass(PreviousSelectionMatchFindAction, [
        {
            key: "_run",
            value: function _run(controller) {
                return controller.moveToPrevMatch();
            }
        }
    ]);
    return PreviousSelectionMatchFindAction;
}(SelectionMatchFindAction);
var StartFindReplaceAction = _editorExtensionsJs.registerMultiEditorAction(new _editorExtensionsJs.MultiEditorAction({
    id: _findModelJs.FIND_IDS.StartFindReplaceAction,
    label: _nlsJs.localize('startReplace', "Replace"),
    alias: 'Replace',
    precondition: _contextkeyJs.ContextKeyExpr.or(_editorContextKeysJs.EditorContextKeys.focus, _contextkeyJs.ContextKeyExpr.has('editorIsOpen')),
    kbOpts: {
        kbExpr: null,
        primary: 2086 /* KeyH */ ,
        mac: {
            primary: 2596 /* KeyF */ 
        },
        weight: 100 /* EditorContrib */ 
    },
    menuOpts: {
        menuId: _actionsJs.MenuId.MenubarEditMenu,
        group: '3_find',
        title: _nlsJs.localize({
            key: 'miReplace',
            comment: [
                '&& denotes a mnemonic'
            ]
        }, "&&Replace"),
        order: 2
    }
}));
StartFindReplaceAction.addImplementation(0, function(accessor, editor, args) {
    if (!editor.hasModel() || editor.getOption(80 /* readOnly */ )) return false;
    var controller = CommonFindController.get(editor);
    if (!controller) return false;
    var currentSelection = editor.getSelection();
    var findInputFocused = controller.isFindInputFocused();
    // we only seed search string from selection when the current selection is single line and not empty,
    // + the find input is not focused
    var seedSearchStringFromSelection = !currentSelection.isEmpty() && currentSelection.startLineNumber === currentSelection.endLineNumber && editor.getOption(35 /* find */ ).seedSearchStringFromSelection !== 'never' && !findInputFocused;
    /*
    * if the existing search string in find widget is empty and we don't seed search string from selection, it means the Find Input is still empty, so we should focus the Find Input instead of Replace Input.

    * findInputFocused true -> seedSearchStringFromSelection false, FocusReplaceInput
    * findInputFocused false, seedSearchStringFromSelection true FocusReplaceInput
    * findInputFocused false seedSearchStringFromSelection false FocusFindInput
    */ var shouldFocus = findInputFocused || seedSearchStringFromSelection ? 2 /* FocusReplaceInput */  : 1 /* FocusFindInput */ ;
    return controller.start({
        forceRevealReplace: true,
        seedSearchStringFromSelection: seedSearchStringFromSelection ? 'single' : 'none',
        seedSearchStringFromNonEmptySelection: editor.getOption(35 /* find */ ).seedSearchStringFromSelection === 'selection',
        seedSearchStringFromGlobalClipboard: editor.getOption(35 /* find */ ).seedSearchStringFromSelection !== 'never',
        shouldFocus: shouldFocus,
        shouldAnimate: true,
        updateSearchScope: false,
        loop: editor.getOption(35 /* find */ ).loop
    });
});
_editorExtensionsJs.registerEditorContribution(CommonFindController.ID, FindController);
_editorExtensionsJs.registerEditorAction(StartFindWithArgsAction);
_editorExtensionsJs.registerEditorAction(StartFindWithSelectionAction);
_editorExtensionsJs.registerEditorAction(NextMatchFindAction);
_editorExtensionsJs.registerEditorAction(PreviousMatchFindAction);
_editorExtensionsJs.registerEditorAction(NextSelectionMatchFindAction);
_editorExtensionsJs.registerEditorAction(PreviousSelectionMatchFindAction);
var FindCommand = _editorExtensionsJs.EditorCommand.bindToContribution(CommonFindController.get);
_editorExtensionsJs.registerEditorCommand(new FindCommand({
    id: _findModelJs.FIND_IDS.CloseFindWidgetCommand,
    precondition: _findModelJs.CONTEXT_FIND_WIDGET_VISIBLE,
    handler: function(x) {
        return x.closeFindWidget();
    },
    kbOpts: {
        weight: 105,
        kbExpr: _contextkeyJs.ContextKeyExpr.and(_editorContextKeysJs.EditorContextKeys.focus, _contextkeyJs.ContextKeyExpr.not('isComposing')),
        primary: 9 /* Escape */ ,
        secondary: [
            1033 /* Escape */ 
        ]
    }
}));
_editorExtensionsJs.registerEditorCommand(new FindCommand({
    id: _findModelJs.FIND_IDS.ToggleCaseSensitiveCommand,
    precondition: undefined,
    handler: function(x) {
        return x.toggleCaseSensitive();
    },
    kbOpts: {
        weight: 105,
        kbExpr: _editorContextKeysJs.EditorContextKeys.focus,
        primary: _findModelJs.ToggleCaseSensitiveKeybinding.primary,
        mac: _findModelJs.ToggleCaseSensitiveKeybinding.mac,
        win: _findModelJs.ToggleCaseSensitiveKeybinding.win,
        linux: _findModelJs.ToggleCaseSensitiveKeybinding.linux
    }
}));
_editorExtensionsJs.registerEditorCommand(new FindCommand({
    id: _findModelJs.FIND_IDS.ToggleWholeWordCommand,
    precondition: undefined,
    handler: function(x) {
        return x.toggleWholeWords();
    },
    kbOpts: {
        weight: 105,
        kbExpr: _editorContextKeysJs.EditorContextKeys.focus,
        primary: _findModelJs.ToggleWholeWordKeybinding.primary,
        mac: _findModelJs.ToggleWholeWordKeybinding.mac,
        win: _findModelJs.ToggleWholeWordKeybinding.win,
        linux: _findModelJs.ToggleWholeWordKeybinding.linux
    }
}));
_editorExtensionsJs.registerEditorCommand(new FindCommand({
    id: _findModelJs.FIND_IDS.ToggleRegexCommand,
    precondition: undefined,
    handler: function(x) {
        return x.toggleRegex();
    },
    kbOpts: {
        weight: 105,
        kbExpr: _editorContextKeysJs.EditorContextKeys.focus,
        primary: _findModelJs.ToggleRegexKeybinding.primary,
        mac: _findModelJs.ToggleRegexKeybinding.mac,
        win: _findModelJs.ToggleRegexKeybinding.win,
        linux: _findModelJs.ToggleRegexKeybinding.linux
    }
}));
_editorExtensionsJs.registerEditorCommand(new FindCommand({
    id: _findModelJs.FIND_IDS.ToggleSearchScopeCommand,
    precondition: undefined,
    handler: function(x) {
        return x.toggleSearchScope();
    },
    kbOpts: {
        weight: 105,
        kbExpr: _editorContextKeysJs.EditorContextKeys.focus,
        primary: _findModelJs.ToggleSearchScopeKeybinding.primary,
        mac: _findModelJs.ToggleSearchScopeKeybinding.mac,
        win: _findModelJs.ToggleSearchScopeKeybinding.win,
        linux: _findModelJs.ToggleSearchScopeKeybinding.linux
    }
}));
_editorExtensionsJs.registerEditorCommand(new FindCommand({
    id: _findModelJs.FIND_IDS.TogglePreserveCaseCommand,
    precondition: undefined,
    handler: function(x) {
        return x.togglePreserveCase();
    },
    kbOpts: {
        weight: 105,
        kbExpr: _editorContextKeysJs.EditorContextKeys.focus,
        primary: _findModelJs.TogglePreserveCaseKeybinding.primary,
        mac: _findModelJs.TogglePreserveCaseKeybinding.mac,
        win: _findModelJs.TogglePreserveCaseKeybinding.win,
        linux: _findModelJs.TogglePreserveCaseKeybinding.linux
    }
}));
_editorExtensionsJs.registerEditorCommand(new FindCommand({
    id: _findModelJs.FIND_IDS.ReplaceOneAction,
    precondition: _findModelJs.CONTEXT_FIND_WIDGET_VISIBLE,
    handler: function(x) {
        return x.replace();
    },
    kbOpts: {
        weight: 105,
        kbExpr: _editorContextKeysJs.EditorContextKeys.focus,
        primary: 3094 /* Digit1 */ 
    }
}));
_editorExtensionsJs.registerEditorCommand(new FindCommand({
    id: _findModelJs.FIND_IDS.ReplaceOneAction,
    precondition: _findModelJs.CONTEXT_FIND_WIDGET_VISIBLE,
    handler: function(x) {
        return x.replace();
    },
    kbOpts: {
        weight: 105,
        kbExpr: _contextkeyJs.ContextKeyExpr.and(_editorContextKeysJs.EditorContextKeys.focus, _findModelJs.CONTEXT_REPLACE_INPUT_FOCUSED),
        primary: 3 /* Enter */ 
    }
}));
_editorExtensionsJs.registerEditorCommand(new FindCommand({
    id: _findModelJs.FIND_IDS.ReplaceAllAction,
    precondition: _findModelJs.CONTEXT_FIND_WIDGET_VISIBLE,
    handler: function(x) {
        return x.replaceAll();
    },
    kbOpts: {
        weight: 105,
        kbExpr: _editorContextKeysJs.EditorContextKeys.focus,
        primary: 2563 /* Enter */ 
    }
}));
_editorExtensionsJs.registerEditorCommand(new FindCommand({
    id: _findModelJs.FIND_IDS.ReplaceAllAction,
    precondition: _findModelJs.CONTEXT_FIND_WIDGET_VISIBLE,
    handler: function(x) {
        return x.replaceAll();
    },
    kbOpts: {
        weight: 105,
        kbExpr: _contextkeyJs.ContextKeyExpr.and(_editorContextKeysJs.EditorContextKeys.focus, _findModelJs.CONTEXT_REPLACE_INPUT_FOCUSED),
        primary: undefined,
        mac: {
            primary: 2051 /* Enter */ 
        }
    }
}));
_editorExtensionsJs.registerEditorCommand(new FindCommand({
    id: _findModelJs.FIND_IDS.SelectAllMatchesAction,
    precondition: _findModelJs.CONTEXT_FIND_WIDGET_VISIBLE,
    handler: function(x) {
        return x.selectAllMatches();
    },
    kbOpts: {
        weight: 105,
        kbExpr: _editorContextKeysJs.EditorContextKeys.focus,
        primary: 515 /* Enter */ 
    }
}));

},{"@swc/helpers":"erO4s","regenerator-runtime":"12Ae8","../../../base/common/async.js":"kMhSh","../../../base/common/lifecycle.js":"bcbPy","../../../base/common/strings.js":"jsb6w","../../browser/editorExtensions.js":"dFnlo","../../common/editorContextKeys.js":"2t2PW","./findModel.js":"hkZgx","./findOptionsWidget.js":"4p2A6","./findState.js":"1obEc","./findWidget.js":"1fpoH","../../../nls.js":"9djYb","../../../platform/actions/common/actions.js":"1qoxQ","../../../platform/clipboard/common/clipboardService.js":"lj8DI","../../../platform/contextkey/common/contextkey.js":"5cjav","../../../platform/contextview/browser/contextView.js":"kl0FP","../../../platform/keybinding/common/keybinding.js":"5rr15","../../../platform/notification/common/notification.js":"baqho","../../../platform/storage/common/storage.js":"1m95n","../../../platform/theme/common/themeService.js":"kE7QB","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"hkZgx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CONTEXT_FIND_WIDGET_VISIBLE", function() {
    return CONTEXT_FIND_WIDGET_VISIBLE;
});
parcelHelpers.export(exports, "CONTEXT_FIND_WIDGET_NOT_VISIBLE", function() {
    return CONTEXT_FIND_WIDGET_NOT_VISIBLE;
});
parcelHelpers.export(exports, "CONTEXT_FIND_INPUT_FOCUSED", function() {
    return CONTEXT_FIND_INPUT_FOCUSED;
});
parcelHelpers.export(exports, "CONTEXT_REPLACE_INPUT_FOCUSED", function() {
    return CONTEXT_REPLACE_INPUT_FOCUSED;
});
parcelHelpers.export(exports, "ToggleCaseSensitiveKeybinding", function() {
    return ToggleCaseSensitiveKeybinding;
});
parcelHelpers.export(exports, "ToggleWholeWordKeybinding", function() {
    return ToggleWholeWordKeybinding;
});
parcelHelpers.export(exports, "ToggleRegexKeybinding", function() {
    return ToggleRegexKeybinding;
});
parcelHelpers.export(exports, "ToggleSearchScopeKeybinding", function() {
    return ToggleSearchScopeKeybinding;
});
parcelHelpers.export(exports, "TogglePreserveCaseKeybinding", function() {
    return TogglePreserveCaseKeybinding;
});
parcelHelpers.export(exports, "FIND_IDS", function() {
    return FIND_IDS;
});
parcelHelpers.export(exports, "MATCHES_LIMIT", function() {
    return MATCHES_LIMIT;
});
parcelHelpers.export(exports, "FindModelBoundToEditorModel", function() {
    return FindModelBoundToEditorModel;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _arraysJs = require("../../../base/common/arrays.js");
var _asyncJs = require("../../../base/common/async.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _replaceCommandJs = require("../../common/commands/replaceCommand.js");
var _positionJs = require("../../common/core/position.js");
var _rangeJs = require("../../common/core/range.js");
var _selectionJs = require("../../common/core/selection.js");
var _textModelSearchJs = require("../../common/model/textModelSearch.js");
var _findDecorationsJs = require("./findDecorations.js");
var _replaceAllCommandJs = require("./replaceAllCommand.js");
var _replacePatternJs = require("./replacePattern.js");
var _contextkeyJs = require("../../../platform/contextkey/common/contextkey.js");
var CONTEXT_FIND_WIDGET_VISIBLE = new _contextkeyJs.RawContextKey('findWidgetVisible', false);
var CONTEXT_FIND_WIDGET_NOT_VISIBLE = CONTEXT_FIND_WIDGET_VISIBLE.toNegated();
var CONTEXT_FIND_INPUT_FOCUSED = new _contextkeyJs.RawContextKey('findInputFocussed', false);
var CONTEXT_REPLACE_INPUT_FOCUSED = new _contextkeyJs.RawContextKey('replaceInputFocussed', false);
var ToggleCaseSensitiveKeybinding = {
    primary: 545 /* KeyC */ ,
    mac: {
        primary: 2593 /* KeyC */ 
    }
};
var ToggleWholeWordKeybinding = {
    primary: 565 /* KeyW */ ,
    mac: {
        primary: 2613 /* KeyW */ 
    }
};
var ToggleRegexKeybinding = {
    primary: 560 /* KeyR */ ,
    mac: {
        primary: 2608 /* KeyR */ 
    }
};
var ToggleSearchScopeKeybinding = {
    primary: 554 /* KeyL */ ,
    mac: {
        primary: 2602 /* KeyL */ 
    }
};
var TogglePreserveCaseKeybinding = {
    primary: 558 /* KeyP */ ,
    mac: {
        primary: 2606 /* KeyP */ 
    }
};
var FIND_IDS = {
    StartFindAction: 'actions.find',
    StartFindWithSelection: 'actions.findWithSelection',
    StartFindWithArgs: 'editor.actions.findWithArgs',
    NextMatchFindAction: 'editor.action.nextMatchFindAction',
    PreviousMatchFindAction: 'editor.action.previousMatchFindAction',
    NextSelectionMatchFindAction: 'editor.action.nextSelectionMatchFindAction',
    PreviousSelectionMatchFindAction: 'editor.action.previousSelectionMatchFindAction',
    StartFindReplaceAction: 'editor.action.startFindReplaceAction',
    CloseFindWidgetCommand: 'closeFindWidget',
    ToggleCaseSensitiveCommand: 'toggleFindCaseSensitive',
    ToggleWholeWordCommand: 'toggleFindWholeWord',
    ToggleRegexCommand: 'toggleFindRegex',
    ToggleSearchScopeCommand: 'toggleFindInSelection',
    TogglePreserveCaseCommand: 'togglePreserveCase',
    ReplaceOneAction: 'editor.action.replaceOne',
    ReplaceAllAction: 'editor.action.replaceAll',
    SelectAllMatchesAction: 'editor.action.selectAllMatches'
};
var MATCHES_LIMIT = 19999;
var RESEARCH_DELAY = 240;
var FindModelBoundToEditorModel = /*#__PURE__*/ function() {
    "use strict";
    function FindModelBoundToEditorModel(editor, state) {
        var _this = this;
        _helpers.classCallCheck(this, FindModelBoundToEditorModel);
        this._toDispose = new _lifecycleJs.DisposableStore();
        this._editor = editor;
        this._state = state;
        this._isDisposed = false;
        this._startSearchingTimer = new _asyncJs.TimeoutTimer();
        this._decorations = new _findDecorationsJs.FindDecorations(editor);
        this._toDispose.add(this._decorations);
        this._updateDecorationsScheduler = new _asyncJs.RunOnceScheduler(function() {
            return _this.research(false);
        }, 100);
        this._toDispose.add(this._updateDecorationsScheduler);
        this._toDispose.add(this._editor.onDidChangeCursorPosition(function(e) {
            if (e.reason === 3 /* Explicit */  || e.reason === 5 /* Undo */  || e.reason === 6 /* Redo */ ) _this._decorations.setStartPosition(_this._editor.getPosition());
        }));
        this._ignoreModelContentChanged = false;
        this._toDispose.add(this._editor.onDidChangeModelContent(function(e) {
            if (_this._ignoreModelContentChanged) return;
            if (e.isFlush) // a model.setValue() was called
            _this._decorations.reset();
            _this._decorations.setStartPosition(_this._editor.getPosition());
            _this._updateDecorationsScheduler.schedule();
        }));
        this._toDispose.add(this._state.onFindReplaceStateChange(function(e) {
            return _this._onStateChanged(e);
        }));
        this.research(false, this._state.searchScope);
    }
    _helpers.createClass(FindModelBoundToEditorModel, [
        {
            key: "dispose",
            value: function dispose() {
                this._isDisposed = true;
                _lifecycleJs.dispose(this._startSearchingTimer);
                this._toDispose.dispose();
            }
        },
        {
            key: "_onStateChanged",
            value: function _onStateChanged(e) {
                if (this._isDisposed) // The find model is disposed during a find state changed event
                return;
                if (!this._editor.hasModel()) // The find model will be disposed momentarily
                return;
                if (e.searchString || e.isReplaceRevealed || e.isRegex || e.wholeWord || e.matchCase || e.searchScope) {
                    var model = this._editor.getModel();
                    if (model.isTooLargeForSyncing()) {
                        var _this = this;
                        this._startSearchingTimer.cancel();
                        this._startSearchingTimer.setIfNotSet(function() {
                            if (e.searchScope) _this.research(e.moveCursor, _this._state.searchScope);
                            else _this.research(e.moveCursor);
                        }, RESEARCH_DELAY);
                    } else if (e.searchScope) this.research(e.moveCursor, this._state.searchScope);
                    else this.research(e.moveCursor);
                }
            }
        },
        {
            key: "research",
            value: function research(moveCursor, newFindScope) {
                var _this = this;
                var findScopes = null;
                if (typeof newFindScope !== 'undefined') {
                    if (newFindScope !== null) {
                        if (!Array.isArray(newFindScope)) findScopes = [
                            newFindScope
                        ];
                        else findScopes = newFindScope;
                    }
                } else findScopes = this._decorations.getFindScopes();
                if (findScopes !== null) findScopes = findScopes.map(function(findScope) {
                    if (findScope.startLineNumber !== findScope.endLineNumber) {
                        var endLineNumber = findScope.endLineNumber;
                        if (findScope.endColumn === 1) endLineNumber = endLineNumber - 1;
                        return new _rangeJs.Range(findScope.startLineNumber, 1, endLineNumber, _this._editor.getModel().getLineMaxColumn(endLineNumber));
                    }
                    return findScope;
                });
                var findMatches = this._findMatches(findScopes, false, MATCHES_LIMIT);
                this._decorations.set(findMatches, findScopes);
                var editorSelection = this._editor.getSelection();
                var currentMatchesPosition = this._decorations.getCurrentMatchesPosition(editorSelection);
                if (currentMatchesPosition === 0 && findMatches.length > 0) {
                    // current selection is not on top of a match
                    // try to find its nearest result from the top of the document
                    var matchAfterSelection = _arraysJs.findFirstInSorted(findMatches.map(function(match) {
                        return match.range;
                    }), function(range) {
                        return _rangeJs.Range.compareRangesUsingStarts(range, editorSelection) >= 0;
                    });
                    currentMatchesPosition = matchAfterSelection > 0 ? matchAfterSelection - 1 + 1 /** match position is one based */  : currentMatchesPosition;
                }
                this._state.changeMatchInfo(currentMatchesPosition, this._decorations.getCount(), undefined);
                if (moveCursor && this._editor.getOption(35 /* find */ ).cursorMoveOnType) this._moveToNextMatch(this._decorations.getStartPosition());
            }
        },
        {
            key: "_hasMatches",
            value: function _hasMatches() {
                return this._state.matchesCount > 0;
            }
        },
        {
            key: "_cannotFind",
            value: function _cannotFind() {
                if (!this._hasMatches()) {
                    var findScope = this._decorations.getFindScope();
                    if (findScope) // Reveal the selection so user is reminded that 'selection find' is on.
                    this._editor.revealRangeInCenterIfOutsideViewport(findScope, 0 /* Smooth */ );
                    return true;
                }
                return false;
            }
        },
        {
            key: "_setCurrentFindMatch",
            value: function _setCurrentFindMatch(match) {
                var matchesPosition = this._decorations.setCurrentFindMatch(match);
                this._state.changeMatchInfo(matchesPosition, this._decorations.getCount(), match);
                this._editor.setSelection(match);
                this._editor.revealRangeInCenterIfOutsideViewport(match, 0 /* Smooth */ );
            }
        },
        {
            key: "_prevSearchPosition",
            value: function _prevSearchPosition(before) {
                var isUsingLineStops = this._state.isRegex && (this._state.searchString.indexOf('^') >= 0 || this._state.searchString.indexOf('$') >= 0);
                var lineNumber = before.lineNumber, column = before.column;
                var model = this._editor.getModel();
                if (isUsingLineStops || column === 1) {
                    if (lineNumber === 1) lineNumber = model.getLineCount();
                    else lineNumber--;
                    column = model.getLineMaxColumn(lineNumber);
                } else column--;
                return new _positionJs.Position(lineNumber, column);
            }
        },
        {
            key: "_moveToPrevMatch",
            value: function _moveToPrevMatch(before) {
                var isRecursed = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
                if (!this._state.canNavigateBack()) {
                    // we are beyond the first matched find result
                    // instead of doing nothing, we should refocus the first item
                    var nextMatchRange = this._decorations.matchAfterPosition(before);
                    if (nextMatchRange) this._setCurrentFindMatch(nextMatchRange);
                    return;
                }
                if (this._decorations.getCount() < MATCHES_LIMIT) {
                    var prevMatchRange = this._decorations.matchBeforePosition(before);
                    if (prevMatchRange && prevMatchRange.isEmpty() && prevMatchRange.getStartPosition().equals(before)) {
                        before = this._prevSearchPosition(before);
                        prevMatchRange = this._decorations.matchBeforePosition(before);
                    }
                    if (prevMatchRange) this._setCurrentFindMatch(prevMatchRange);
                    return;
                }
                if (this._cannotFind()) return;
                var findScope = this._decorations.getFindScope();
                var searchRange = FindModelBoundToEditorModel._getSearchRange(this._editor.getModel(), findScope);
                // ...(----)...|...
                if (searchRange.getEndPosition().isBefore(before)) before = searchRange.getEndPosition();
                // ...|...(----)...
                if (before.isBefore(searchRange.getStartPosition())) before = searchRange.getEndPosition();
                var lineNumber = before.lineNumber, column = before.column;
                var model = this._editor.getModel();
                var position = new _positionJs.Position(lineNumber, column);
                var prevMatch = model.findPreviousMatch(this._state.searchString, position, this._state.isRegex, this._state.matchCase, this._state.wholeWord ? this._editor.getOption(116 /* wordSeparators */ ) : null, false);
                if (prevMatch && prevMatch.range.isEmpty() && prevMatch.range.getStartPosition().equals(position)) {
                    // Looks like we're stuck at this position, unacceptable!
                    position = this._prevSearchPosition(position);
                    prevMatch = model.findPreviousMatch(this._state.searchString, position, this._state.isRegex, this._state.matchCase, this._state.wholeWord ? this._editor.getOption(116 /* wordSeparators */ ) : null, false);
                }
                if (!prevMatch) // there is precisely one match and selection is on top of it
                return;
                if (!isRecursed && !searchRange.containsRange(prevMatch.range)) return this._moveToPrevMatch(prevMatch.range.getStartPosition(), true);
                this._setCurrentFindMatch(prevMatch.range);
            }
        },
        {
            key: "moveToPrevMatch",
            value: function moveToPrevMatch() {
                this._moveToPrevMatch(this._editor.getSelection().getStartPosition());
            }
        },
        {
            key: "_nextSearchPosition",
            value: function _nextSearchPosition(after) {
                var isUsingLineStops = this._state.isRegex && (this._state.searchString.indexOf('^') >= 0 || this._state.searchString.indexOf('$') >= 0);
                var lineNumber = after.lineNumber, column = after.column;
                var model = this._editor.getModel();
                if (isUsingLineStops || column === model.getLineMaxColumn(lineNumber)) {
                    if (lineNumber === model.getLineCount()) lineNumber = 1;
                    else lineNumber++;
                    column = 1;
                } else column++;
                return new _positionJs.Position(lineNumber, column);
            }
        },
        {
            key: "_moveToNextMatch",
            value: function _moveToNextMatch(after) {
                if (!this._state.canNavigateForward()) {
                    // we are beyond the last matched find result
                    // instead of doing nothing, we should refocus the last item
                    var prevMatchRange = this._decorations.matchBeforePosition(after);
                    if (prevMatchRange) this._setCurrentFindMatch(prevMatchRange);
                    return;
                }
                if (this._decorations.getCount() < MATCHES_LIMIT) {
                    var nextMatchRange = this._decorations.matchAfterPosition(after);
                    if (nextMatchRange && nextMatchRange.isEmpty() && nextMatchRange.getStartPosition().equals(after)) {
                        // Looks like we're stuck at this position, unacceptable!
                        after = this._nextSearchPosition(after);
                        nextMatchRange = this._decorations.matchAfterPosition(after);
                    }
                    if (nextMatchRange) this._setCurrentFindMatch(nextMatchRange);
                    return;
                }
                var nextMatch = this._getNextMatch(after, false, true);
                if (nextMatch) this._setCurrentFindMatch(nextMatch.range);
            }
        },
        {
            key: "_getNextMatch",
            value: function _getNextMatch(after, captureMatches, forceMove) {
                var isRecursed = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
                if (this._cannotFind()) return null;
                var findScope = this._decorations.getFindScope();
                var searchRange = FindModelBoundToEditorModel._getSearchRange(this._editor.getModel(), findScope);
                // ...(----)...|...
                if (searchRange.getEndPosition().isBefore(after)) after = searchRange.getStartPosition();
                // ...|...(----)...
                if (after.isBefore(searchRange.getStartPosition())) after = searchRange.getStartPosition();
                var lineNumber = after.lineNumber, column = after.column;
                var model = this._editor.getModel();
                var position = new _positionJs.Position(lineNumber, column);
                var nextMatch = model.findNextMatch(this._state.searchString, position, this._state.isRegex, this._state.matchCase, this._state.wholeWord ? this._editor.getOption(116 /* wordSeparators */ ) : null, captureMatches);
                if (forceMove && nextMatch && nextMatch.range.isEmpty() && nextMatch.range.getStartPosition().equals(position)) {
                    // Looks like we're stuck at this position, unacceptable!
                    position = this._nextSearchPosition(position);
                    nextMatch = model.findNextMatch(this._state.searchString, position, this._state.isRegex, this._state.matchCase, this._state.wholeWord ? this._editor.getOption(116 /* wordSeparators */ ) : null, captureMatches);
                }
                if (!nextMatch) // there is precisely one match and selection is on top of it
                return null;
                if (!isRecursed && !searchRange.containsRange(nextMatch.range)) return this._getNextMatch(nextMatch.range.getEndPosition(), captureMatches, forceMove, true);
                return nextMatch;
            }
        },
        {
            key: "moveToNextMatch",
            value: function moveToNextMatch() {
                this._moveToNextMatch(this._editor.getSelection().getEndPosition());
            }
        },
        {
            key: "_getReplacePattern",
            value: function _getReplacePattern() {
                if (this._state.isRegex) return _replacePatternJs.parseReplaceString(this._state.replaceString);
                return _replacePatternJs.ReplacePattern.fromStaticValue(this._state.replaceString);
            }
        },
        {
            key: "replace",
            value: function replace() {
                if (!this._hasMatches()) return;
                var replacePattern = this._getReplacePattern();
                var selection = this._editor.getSelection();
                var nextMatch = this._getNextMatch(selection.getStartPosition(), true, false);
                if (nextMatch) {
                    if (selection.equalsRange(nextMatch.range)) {
                        // selection sits on a find match => replace it!
                        var replaceString = replacePattern.buildReplaceString(nextMatch.matches, this._state.preserveCase);
                        var command = new _replaceCommandJs.ReplaceCommand(selection, replaceString);
                        this._executeEditorCommand('replace', command);
                        this._decorations.setStartPosition(new _positionJs.Position(selection.startLineNumber, selection.startColumn + replaceString.length));
                        this.research(true);
                    } else {
                        this._decorations.setStartPosition(this._editor.getPosition());
                        this._setCurrentFindMatch(nextMatch.range);
                    }
                }
            }
        },
        {
            key: "_findMatches",
            value: function _findMatches(findScopes, captureMatches, limitResultCount) {
                var _this = this;
                var searchRanges = (findScopes || [
                    null
                ]).map(function(scope) {
                    return FindModelBoundToEditorModel._getSearchRange(_this._editor.getModel(), scope);
                });
                return this._editor.getModel().findMatches(this._state.searchString, searchRanges, this._state.isRegex, this._state.matchCase, this._state.wholeWord ? this._editor.getOption(116 /* wordSeparators */ ) : null, captureMatches, limitResultCount);
            }
        },
        {
            key: "replaceAll",
            value: function replaceAll() {
                if (!this._hasMatches()) return;
                var findScopes = this._decorations.getFindScopes();
                if (findScopes === null && this._state.matchesCount >= MATCHES_LIMIT) // Doing a replace on the entire file that is over ${MATCHES_LIMIT} matches
                this._largeReplaceAll();
                else this._regularReplaceAll(findScopes);
                this.research(false);
            }
        },
        {
            key: "_largeReplaceAll",
            value: function _largeReplaceAll() {
                var searchParams = new _textModelSearchJs.SearchParams(this._state.searchString, this._state.isRegex, this._state.matchCase, this._state.wholeWord ? this._editor.getOption(116 /* wordSeparators */ ) : null);
                var searchData = searchParams.parseSearchRequest();
                if (!searchData) return;
                var searchRegex = searchData.regex;
                if (!searchRegex.multiline) {
                    var mod = 'mu';
                    if (searchRegex.ignoreCase) mod += 'i';
                    if (searchRegex.global) mod += 'g';
                    searchRegex = new RegExp(searchRegex.source, mod);
                }
                var model = this._editor.getModel();
                var modelText = model.getValue(1 /* LF */ );
                var fullModelRange = model.getFullModelRange();
                var replacePattern = this._getReplacePattern();
                var resultText;
                var preserveCase = this._state.preserveCase;
                if (replacePattern.hasReplacementPatterns || preserveCase) resultText = modelText.replace(searchRegex, function() {
                    return replacePattern.buildReplaceString(arguments, preserveCase);
                });
                else resultText = modelText.replace(searchRegex, replacePattern.buildReplaceString(null, preserveCase));
                var command = new _replaceCommandJs.ReplaceCommandThatPreservesSelection(fullModelRange, resultText, this._editor.getSelection());
                this._executeEditorCommand('replaceAll', command);
            }
        },
        {
            key: "_regularReplaceAll",
            value: function _regularReplaceAll(findScopes) {
                var replacePattern = this._getReplacePattern();
                // Get all the ranges (even more than the highlighted ones)
                var matches = this._findMatches(findScopes, replacePattern.hasReplacementPatterns || this._state.preserveCase, 1073741824 /* MAX_SAFE_SMALL_INTEGER */ );
                var replaceStrings = [];
                for(var i = 0, len = matches.length; i < len; i++)replaceStrings[i] = replacePattern.buildReplaceString(matches[i].matches, this._state.preserveCase);
                var command = new _replaceAllCommandJs.ReplaceAllCommand(this._editor.getSelection(), matches.map(function(m) {
                    return m.range;
                }), replaceStrings);
                this._executeEditorCommand('replaceAll', command);
            }
        },
        {
            key: "selectAllMatches",
            value: function selectAllMatches() {
                if (!this._hasMatches()) return;
                var findScopes = this._decorations.getFindScopes();
                // Get all the ranges (even more than the highlighted ones)
                var matches = this._findMatches(findScopes, false, 1073741824 /* MAX_SAFE_SMALL_INTEGER */ );
                var selections = matches.map(function(m) {
                    return new _selectionJs.Selection(m.range.startLineNumber, m.range.startColumn, m.range.endLineNumber, m.range.endColumn);
                });
                // If one of the ranges is the editor selection, then maintain it as primary
                var editorSelection = this._editor.getSelection();
                for(var i = 0, len = selections.length; i < len; i++){
                    var sel = selections[i];
                    if (sel.equalsRange(editorSelection)) {
                        selections = [
                            editorSelection
                        ].concat(selections.slice(0, i)).concat(selections.slice(i + 1));
                        break;
                    }
                }
                this._editor.setSelections(selections);
            }
        },
        {
            key: "_executeEditorCommand",
            value: function _executeEditorCommand(source, command) {
                try {
                    this._ignoreModelContentChanged = true;
                    this._editor.pushUndoStop();
                    this._editor.executeCommand(source, command);
                    this._editor.pushUndoStop();
                } finally{
                    this._ignoreModelContentChanged = false;
                }
            }
        }
    ], [
        {
            key: "_getSearchRange",
            value: function _getSearchRange(model, findScope) {
                // If we have set now or before a find scope, use it for computing the search range
                if (findScope) return findScope;
                return model.getFullModelRange();
            }
        }
    ]);
    return FindModelBoundToEditorModel;
}();

},{"@swc/helpers":"erO4s","../../../base/common/arrays.js":"bZs3E","../../../base/common/async.js":"kMhSh","../../../base/common/lifecycle.js":"bcbPy","../../common/commands/replaceCommand.js":"kkstX","../../common/core/position.js":"6xP0w","../../common/core/range.js":"VbyL8","../../common/core/selection.js":"hjmnH","../../common/model/textModelSearch.js":"14P7M","./findDecorations.js":"cjbee","./replaceAllCommand.js":"eQmxm","./replacePattern.js":"1edlf","../../../platform/contextkey/common/contextkey.js":"5cjav","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"cjbee":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FindDecorations", function() {
    return FindDecorations;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _rangeJs = require("../../common/core/range.js");
var _modelJs = require("../../common/model.js");
var _textModelJs = require("../../common/model/textModel.js");
var _colorRegistryJs = require("../../../platform/theme/common/colorRegistry.js");
var _themeServiceJs = require("../../../platform/theme/common/themeService.js");
var FindDecorations = /*#__PURE__*/ function() {
    "use strict";
    function FindDecorations(editor) {
        _helpers.classCallCheck(this, FindDecorations);
        this._editor = editor;
        this._decorations = [];
        this._overviewRulerApproximateDecorations = [];
        this._findScopeDecorationIds = [];
        this._rangeHighlightDecorationId = null;
        this._highlightedDecorationId = null;
        this._startPosition = this._editor.getPosition();
    }
    _helpers.createClass(FindDecorations, [
        {
            key: "dispose",
            value: function dispose() {
                this._editor.deltaDecorations(this._allDecorations(), []);
                this._decorations = [];
                this._overviewRulerApproximateDecorations = [];
                this._findScopeDecorationIds = [];
                this._rangeHighlightDecorationId = null;
                this._highlightedDecorationId = null;
            }
        },
        {
            key: "reset",
            value: function reset() {
                this._decorations = [];
                this._overviewRulerApproximateDecorations = [];
                this._findScopeDecorationIds = [];
                this._rangeHighlightDecorationId = null;
                this._highlightedDecorationId = null;
            }
        },
        {
            key: "getCount",
            value: function getCount() {
                return this._decorations.length;
            }
        },
        {
            /** @deprecated use getFindScopes to support multiple selections */ key: "getFindScope",
            value: function getFindScope() {
                if (this._findScopeDecorationIds[0]) return this._editor.getModel().getDecorationRange(this._findScopeDecorationIds[0]);
                return null;
            }
        },
        {
            key: "getFindScopes",
            value: function getFindScopes() {
                if (this._findScopeDecorationIds.length) {
                    var _this = this;
                    var scopes = this._findScopeDecorationIds.map(function(findScopeDecorationId) {
                        return _this._editor.getModel().getDecorationRange(findScopeDecorationId);
                    }).filter(function(element) {
                        return !!element;
                    });
                    if (scopes.length) return scopes;
                }
                return null;
            }
        },
        {
            key: "getStartPosition",
            value: function getStartPosition() {
                return this._startPosition;
            }
        },
        {
            key: "setStartPosition",
            value: function setStartPosition(newStartPosition) {
                this._startPosition = newStartPosition;
                this.setCurrentFindMatch(null);
            }
        },
        {
            key: "_getDecorationIndex",
            value: function _getDecorationIndex(decorationId) {
                var index = this._decorations.indexOf(decorationId);
                if (index >= 0) return index + 1;
                return 1;
            }
        },
        {
            key: "getCurrentMatchesPosition",
            value: function getCurrentMatchesPosition(desiredRange) {
                var candidates = this._editor.getModel().getDecorationsInRange(desiredRange);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = candidates[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var candidate = _step.value;
                        var candidateOpts = candidate.options;
                        if (candidateOpts === FindDecorations._FIND_MATCH_DECORATION || candidateOpts === FindDecorations._CURRENT_FIND_MATCH_DECORATION) return this._getDecorationIndex(candidate.id);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                // We don't know the current match position, so returns zero to show '?' in find widget
                return 0;
            }
        },
        {
            key: "setCurrentFindMatch",
            value: function setCurrentFindMatch(nextMatch) {
                var _this = this;
                var newCurrentDecorationId = null;
                var matchPosition = 0;
                if (nextMatch) for(var i = 0, len = this._decorations.length; i < len; i++){
                    var range = this._editor.getModel().getDecorationRange(this._decorations[i]);
                    if (nextMatch.equalsRange(range)) {
                        newCurrentDecorationId = this._decorations[i];
                        matchPosition = i + 1;
                        break;
                    }
                }
                if (this._highlightedDecorationId !== null || newCurrentDecorationId !== null) this._editor.changeDecorations(function(changeAccessor) {
                    if (_this._highlightedDecorationId !== null) {
                        changeAccessor.changeDecorationOptions(_this._highlightedDecorationId, FindDecorations._FIND_MATCH_DECORATION);
                        _this._highlightedDecorationId = null;
                    }
                    if (newCurrentDecorationId !== null) {
                        _this._highlightedDecorationId = newCurrentDecorationId;
                        changeAccessor.changeDecorationOptions(_this._highlightedDecorationId, FindDecorations._CURRENT_FIND_MATCH_DECORATION);
                    }
                    if (_this._rangeHighlightDecorationId !== null) {
                        changeAccessor.removeDecoration(_this._rangeHighlightDecorationId);
                        _this._rangeHighlightDecorationId = null;
                    }
                    if (newCurrentDecorationId !== null) {
                        var rng = _this._editor.getModel().getDecorationRange(newCurrentDecorationId);
                        if (rng.startLineNumber !== rng.endLineNumber && rng.endColumn === 1) {
                            var lineBeforeEnd = rng.endLineNumber - 1;
                            var lineBeforeEndMaxColumn = _this._editor.getModel().getLineMaxColumn(lineBeforeEnd);
                            rng = new _rangeJs.Range(rng.startLineNumber, rng.startColumn, lineBeforeEnd, lineBeforeEndMaxColumn);
                        }
                        _this._rangeHighlightDecorationId = changeAccessor.addDecoration(rng, FindDecorations._RANGE_HIGHLIGHT_DECORATION);
                    }
                });
                return matchPosition;
            }
        },
        {
            key: "set",
            value: function set(findMatches, findScopes) {
                var _this = this;
                this._editor.changeDecorations(function(accessor) {
                    var findMatchesOptions = FindDecorations._FIND_MATCH_DECORATION;
                    var newOverviewRulerApproximateDecorations = [];
                    if (findMatches.length > 1000) {
                        // we go into a mode where the overview ruler gets "approximate" decorations
                        // the reason is that the overview ruler paints all the decorations in the file and we don't want to cause freezes
                        findMatchesOptions = FindDecorations._FIND_MATCH_NO_OVERVIEW_DECORATION;
                        // approximate a distance in lines where matches should be merged
                        var lineCount = _this._editor.getModel().getLineCount();
                        var height = _this._editor.getLayoutInfo().height;
                        var approxPixelsPerLine = height / lineCount;
                        var mergeLinesDelta = Math.max(2, Math.ceil(3 / approxPixelsPerLine));
                        // merge decorations as much as possible
                        var prevStartLineNumber = findMatches[0].range.startLineNumber;
                        var prevEndLineNumber = findMatches[0].range.endLineNumber;
                        for(var i = 1, len = findMatches.length; i < len; i++){
                            var range = findMatches[i].range;
                            if (prevEndLineNumber + mergeLinesDelta >= range.startLineNumber) {
                                if (range.endLineNumber > prevEndLineNumber) prevEndLineNumber = range.endLineNumber;
                            } else {
                                newOverviewRulerApproximateDecorations.push({
                                    range: new _rangeJs.Range(prevStartLineNumber, 1, prevEndLineNumber, 1),
                                    options: FindDecorations._FIND_MATCH_ONLY_OVERVIEW_DECORATION
                                });
                                prevStartLineNumber = range.startLineNumber;
                                prevEndLineNumber = range.endLineNumber;
                            }
                        }
                        newOverviewRulerApproximateDecorations.push({
                            range: new _rangeJs.Range(prevStartLineNumber, 1, prevEndLineNumber, 1),
                            options: FindDecorations._FIND_MATCH_ONLY_OVERVIEW_DECORATION
                        });
                    }
                    // Find matches
                    var newFindMatchesDecorations = new Array(findMatches.length);
                    for(var i1 = 0, len1 = findMatches.length; i1 < len1; i1++)newFindMatchesDecorations[i1] = {
                        range: findMatches[i1].range,
                        options: findMatchesOptions
                    };
                    _this._decorations = accessor.deltaDecorations(_this._decorations, newFindMatchesDecorations);
                    // Overview ruler approximate decorations
                    _this._overviewRulerApproximateDecorations = accessor.deltaDecorations(_this._overviewRulerApproximateDecorations, newOverviewRulerApproximateDecorations);
                    // Range highlight
                    if (_this._rangeHighlightDecorationId) {
                        accessor.removeDecoration(_this._rangeHighlightDecorationId);
                        _this._rangeHighlightDecorationId = null;
                    }
                    // Find scope
                    if (_this._findScopeDecorationIds.length) {
                        _this._findScopeDecorationIds.forEach(function(findScopeDecorationId) {
                            return accessor.removeDecoration(findScopeDecorationId);
                        });
                        _this._findScopeDecorationIds = [];
                    }
                    if (findScopes === null || findScopes === void 0 ? void 0 : findScopes.length) _this._findScopeDecorationIds = findScopes.map(function(findScope) {
                        return accessor.addDecoration(findScope, FindDecorations._FIND_SCOPE_DECORATION);
                    });
                });
            }
        },
        {
            key: "matchBeforePosition",
            value: function matchBeforePosition(position) {
                if (this._decorations.length === 0) return null;
                for(var i = this._decorations.length - 1; i >= 0; i--){
                    var decorationId = this._decorations[i];
                    var r = this._editor.getModel().getDecorationRange(decorationId);
                    if (!r || r.endLineNumber > position.lineNumber) continue;
                    if (r.endLineNumber < position.lineNumber) return r;
                    if (r.endColumn > position.column) continue;
                    return r;
                }
                return this._editor.getModel().getDecorationRange(this._decorations[this._decorations.length - 1]);
            }
        },
        {
            key: "matchAfterPosition",
            value: function matchAfterPosition(position) {
                if (this._decorations.length === 0) return null;
                for(var i = 0, len = this._decorations.length; i < len; i++){
                    var decorationId = this._decorations[i];
                    var r = this._editor.getModel().getDecorationRange(decorationId);
                    if (!r || r.startLineNumber < position.lineNumber) continue;
                    if (r.startLineNumber > position.lineNumber) return r;
                    if (r.startColumn < position.column) continue;
                    return r;
                }
                return this._editor.getModel().getDecorationRange(this._decorations[0]);
            }
        },
        {
            key: "_allDecorations",
            value: function _allDecorations() {
                var _result;
                var result = [];
                result = result.concat(this._decorations);
                result = result.concat(this._overviewRulerApproximateDecorations);
                if (this._findScopeDecorationIds.length) (_result = result).push.apply(_result, _helpers.toConsumableArray(this._findScopeDecorationIds));
                if (this._rangeHighlightDecorationId) result.push(this._rangeHighlightDecorationId);
                return result;
            }
        }
    ]);
    return FindDecorations;
}();
FindDecorations._CURRENT_FIND_MATCH_DECORATION = _textModelJs.ModelDecorationOptions.register({
    description: 'current-find-match',
    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
    zIndex: 13,
    className: 'currentFindMatch',
    showIfCollapsed: true,
    overviewRuler: {
        color: _themeServiceJs.themeColorFromId(_colorRegistryJs.overviewRulerFindMatchForeground),
        position: _modelJs.OverviewRulerLane.Center
    },
    minimap: {
        color: _themeServiceJs.themeColorFromId(_colorRegistryJs.minimapFindMatch),
        position: _modelJs.MinimapPosition.Inline
    }
});
FindDecorations._FIND_MATCH_DECORATION = _textModelJs.ModelDecorationOptions.register({
    description: 'find-match',
    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
    zIndex: 10,
    className: 'findMatch',
    showIfCollapsed: true,
    overviewRuler: {
        color: _themeServiceJs.themeColorFromId(_colorRegistryJs.overviewRulerFindMatchForeground),
        position: _modelJs.OverviewRulerLane.Center
    },
    minimap: {
        color: _themeServiceJs.themeColorFromId(_colorRegistryJs.minimapFindMatch),
        position: _modelJs.MinimapPosition.Inline
    }
});
FindDecorations._FIND_MATCH_NO_OVERVIEW_DECORATION = _textModelJs.ModelDecorationOptions.register({
    description: 'find-match-no-overview',
    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
    className: 'findMatch',
    showIfCollapsed: true
});
FindDecorations._FIND_MATCH_ONLY_OVERVIEW_DECORATION = _textModelJs.ModelDecorationOptions.register({
    description: 'find-match-only-overview',
    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
    overviewRuler: {
        color: _themeServiceJs.themeColorFromId(_colorRegistryJs.overviewRulerFindMatchForeground),
        position: _modelJs.OverviewRulerLane.Center
    }
});
FindDecorations._RANGE_HIGHLIGHT_DECORATION = _textModelJs.ModelDecorationOptions.register({
    description: 'find-range-highlight',
    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
    className: 'rangeHighlight',
    isWholeLine: true
});
FindDecorations._FIND_SCOPE_DECORATION = _textModelJs.ModelDecorationOptions.register({
    description: 'find-scope',
    className: 'findScope',
    isWholeLine: true
});

},{"@swc/helpers":"erO4s","../../common/core/range.js":"VbyL8","../../common/model.js":"dUHFC","../../common/model/textModel.js":"f18vR","../../../platform/theme/common/colorRegistry.js":"lKtxS","../../../platform/theme/common/themeService.js":"kE7QB","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"eQmxm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ReplaceAllCommand", function() {
    return ReplaceAllCommand;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _rangeJs = require("../../common/core/range.js");
var ReplaceAllCommand = /*#__PURE__*/ function() {
    "use strict";
    function ReplaceAllCommand(editorSelection, ranges, replaceStrings) {
        _helpers.classCallCheck(this, ReplaceAllCommand);
        this._editorSelection = editorSelection;
        this._ranges = ranges;
        this._replaceStrings = replaceStrings;
        this._trackedEditorSelectionId = null;
    }
    _helpers.createClass(ReplaceAllCommand, [
        {
            key: "getEditOperations",
            value: function getEditOperations(model, builder) {
                if (this._ranges.length > 0) {
                    // Collect all edit operations
                    var ops = [];
                    for(var i = 0; i < this._ranges.length; i++)ops.push({
                        range: this._ranges[i],
                        text: this._replaceStrings[i]
                    });
                    // Sort them in ascending order by range starts
                    ops.sort(function(o1, o2) {
                        return _rangeJs.Range.compareRangesUsingStarts(o1.range, o2.range);
                    });
                    // Merge operations that touch each other
                    var resultOps = [];
                    var previousOp = ops[0];
                    for(var i1 = 1; i1 < ops.length; i1++)if (previousOp.range.endLineNumber === ops[i1].range.startLineNumber && previousOp.range.endColumn === ops[i1].range.startColumn) {
                        // These operations are one after another and can be merged
                        previousOp.range = previousOp.range.plusRange(ops[i1].range);
                        previousOp.text = previousOp.text + ops[i1].text;
                    } else {
                        resultOps.push(previousOp);
                        previousOp = ops[i1];
                    }
                    resultOps.push(previousOp);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator = resultOps[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var op = _step.value;
                            builder.addEditOperation(op.range, op.text);
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                }
                this._trackedEditorSelectionId = builder.trackSelection(this._editorSelection);
            }
        },
        {
            key: "computeCursorState",
            value: function computeCursorState(model, helper) {
                return helper.getTrackedSelection(this._trackedEditorSelectionId);
            }
        }
    ]);
    return ReplaceAllCommand;
}();

},{"@swc/helpers":"erO4s","../../common/core/range.js":"VbyL8","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"1edlf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ReplacePattern", function() {
    return ReplacePattern;
});
parcelHelpers.export(exports, "ReplacePiece", function() {
    return ReplacePiece;
});
/**
 * \n			=> inserts a LF
 * \t			=> inserts a TAB
 * \\			=> inserts a "\".
 * \u			=> upper-cases one character in a match.
 * \U			=> upper-cases ALL remaining characters in a match.
 * \l			=> lower-cases one character in a match.
 * \L			=> lower-cases ALL remaining characters in a match.
 * $$			=> inserts a "$".
 * $& and $0	=> inserts the matched substring.
 * $n			=> Where n is a non-negative integer lesser than 100, inserts the nth parenthesized submatch string
 * everything else stays untouched
 *
 * Also see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#Specifying_a_string_as_a_parameter
 */ parcelHelpers.export(exports, "parseReplaceString", function() {
    return parseReplaceString;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _searchJs = require("../../../base/common/search.js");
/**
 * Assigned when the replace pattern is entirely static.
 */ var StaticValueReplacePattern = function StaticValueReplacePattern(staticValue) {
    "use strict";
    _helpers.classCallCheck(this, StaticValueReplacePattern);
    this.staticValue = staticValue;
    this.kind = 0 /* StaticValue */ ;
};
/**
 * Assigned when the replace pattern has replacement patterns.
 */ var DynamicPiecesReplacePattern = function DynamicPiecesReplacePattern(pieces) {
    "use strict";
    _helpers.classCallCheck(this, DynamicPiecesReplacePattern);
    this.pieces = pieces;
    this.kind = 1 /* DynamicPieces */ ;
};
var ReplacePattern = /*#__PURE__*/ function() {
    "use strict";
    function ReplacePattern(pieces) {
        _helpers.classCallCheck(this, ReplacePattern);
        if (!pieces || pieces.length === 0) this._state = new StaticValueReplacePattern('');
        else if (pieces.length === 1 && pieces[0].staticValue !== null) this._state = new StaticValueReplacePattern(pieces[0].staticValue);
        else this._state = new DynamicPiecesReplacePattern(pieces);
    }
    _helpers.createClass(ReplacePattern, [
        {
            key: "hasReplacementPatterns",
            get: function get() {
                return this._state.kind === 1 /* DynamicPieces */ ;
            }
        },
        {
            key: "buildReplaceString",
            value: function buildReplaceString(matches, preserveCase) {
                if (this._state.kind === 0 /* StaticValue */ ) {
                    if (preserveCase) return _searchJs.buildReplaceStringWithCasePreserved(matches, this._state.staticValue);
                    else return this._state.staticValue;
                }
                var result = '';
                for(var i = 0, len = this._state.pieces.length; i < len; i++){
                    var piece = this._state.pieces[i];
                    if (piece.staticValue !== null) {
                        // static value ReplacePiece
                        result += piece.staticValue;
                        continue;
                    }
                    // match index ReplacePiece
                    var match = ReplacePattern._substitute(piece.matchIndex, matches);
                    if (piece.caseOps !== null && piece.caseOps.length > 0) {
                        var repl = [];
                        var lenOps = piece.caseOps.length;
                        var opIdx = 0;
                        for(var idx = 0, len1 = match.length; idx < len1; idx++){
                            if (opIdx >= lenOps) {
                                repl.push(match.slice(idx));
                                break;
                            }
                            switch(piece.caseOps[opIdx]){
                                case 'U':
                                    repl.push(match[idx].toUpperCase());
                                    break;
                                case 'u':
                                    repl.push(match[idx].toUpperCase());
                                    opIdx++;
                                    break;
                                case 'L':
                                    repl.push(match[idx].toLowerCase());
                                    break;
                                case 'l':
                                    repl.push(match[idx].toLowerCase());
                                    opIdx++;
                                    break;
                                default:
                                    repl.push(match[idx]);
                            }
                        }
                        match = repl.join('');
                    }
                    result += match;
                }
                return result;
            }
        }
    ], [
        {
            key: "fromStaticValue",
            value: function fromStaticValue(value) {
                return new ReplacePattern([
                    ReplacePiece.staticValue(value)
                ]);
            }
        },
        {
            key: "_substitute",
            value: function _substitute(matchIndex, matches) {
                if (matches === null) return '';
                if (matchIndex === 0) return matches[0];
                var remainder = '';
                while(matchIndex > 0){
                    if (matchIndex < matches.length) {
                        // A match can be undefined
                        var match = matches[matchIndex] || '';
                        return match + remainder;
                    }
                    remainder = String(matchIndex % 10) + remainder;
                    matchIndex = Math.floor(matchIndex / 10);
                }
                return '$' + remainder;
            }
        }
    ]);
    return ReplacePattern;
}();
var ReplacePiece = /*#__PURE__*/ function() {
    "use strict";
    function ReplacePiece(staticValue, matchIndex, caseOps) {
        _helpers.classCallCheck(this, ReplacePiece);
        this.staticValue = staticValue;
        this.matchIndex = matchIndex;
        if (!caseOps || caseOps.length === 0) this.caseOps = null;
        else this.caseOps = caseOps.slice(0);
    }
    _helpers.createClass(ReplacePiece, null, [
        {
            key: "staticValue",
            value: function staticValue(value) {
                return new ReplacePiece(value, -1, null);
            }
        },
        {
            key: "caseOps",
            value: function caseOps1(index, caseOps) {
                return new ReplacePiece(null, index, caseOps);
            }
        }
    ]);
    return ReplacePiece;
}();
var ReplacePieceBuilder = /*#__PURE__*/ function() {
    "use strict";
    function ReplacePieceBuilder(source) {
        _helpers.classCallCheck(this, ReplacePieceBuilder);
        this._source = source;
        this._lastCharIndex = 0;
        this._result = [];
        this._resultLen = 0;
        this._currentStaticPiece = '';
    }
    _helpers.createClass(ReplacePieceBuilder, [
        {
            key: "emitUnchanged",
            value: function emitUnchanged(toCharIndex) {
                this._emitStatic(this._source.substring(this._lastCharIndex, toCharIndex));
                this._lastCharIndex = toCharIndex;
            }
        },
        {
            key: "emitStatic",
            value: function emitStatic(value, toCharIndex) {
                this._emitStatic(value);
                this._lastCharIndex = toCharIndex;
            }
        },
        {
            key: "_emitStatic",
            value: function _emitStatic(value) {
                if (value.length === 0) return;
                this._currentStaticPiece += value;
            }
        },
        {
            key: "emitMatchIndex",
            value: function emitMatchIndex(index, toCharIndex, caseOps) {
                if (this._currentStaticPiece.length !== 0) {
                    this._result[this._resultLen++] = ReplacePiece.staticValue(this._currentStaticPiece);
                    this._currentStaticPiece = '';
                }
                this._result[this._resultLen++] = ReplacePiece.caseOps(index, caseOps);
                this._lastCharIndex = toCharIndex;
            }
        },
        {
            key: "finalize",
            value: function finalize() {
                this.emitUnchanged(this._source.length);
                if (this._currentStaticPiece.length !== 0) {
                    this._result[this._resultLen++] = ReplacePiece.staticValue(this._currentStaticPiece);
                    this._currentStaticPiece = '';
                }
                return new ReplacePattern(this._result);
            }
        }
    ]);
    return ReplacePieceBuilder;
}();
function parseReplaceString(replaceString) {
    if (!replaceString || replaceString.length === 0) return new ReplacePattern(null);
    var caseOps = [];
    var result = new ReplacePieceBuilder(replaceString);
    for(var i = 0, len = replaceString.length; i < len; i++){
        var chCode = replaceString.charCodeAt(i);
        if (chCode === 92 /* Backslash */ ) {
            // move to next char
            i++;
            if (i >= len) break;
            var nextChCode = replaceString.charCodeAt(i);
            // let replaceWithCharacter: string | null = null;
            switch(nextChCode){
                case 92 /* Backslash */ :
                    // \\ => inserts a "\"
                    result.emitUnchanged(i - 1);
                    result.emitStatic('\\', i + 1);
                    break;
                case 110 /* n */ :
                    // \n => inserts a LF
                    result.emitUnchanged(i - 1);
                    result.emitStatic('\n', i + 1);
                    break;
                case 116 /* t */ :
                    // \t => inserts a TAB
                    result.emitUnchanged(i - 1);
                    result.emitStatic('\t', i + 1);
                    break;
                // Case modification of string replacements, patterned after Boost, but only applied
                // to the replacement text, not subsequent content.
                case 117 /* u */ :
                // \u => upper-cases one character.
                case 85 /* U */ :
                // \U => upper-cases ALL following characters.
                case 108 /* l */ :
                // \l => lower-cases one character.
                case 76 /* L */ :
                    // \L => lower-cases ALL following characters.
                    result.emitUnchanged(i - 1);
                    result.emitStatic('', i + 1);
                    caseOps.push(String.fromCharCode(nextChCode));
                    break;
            }
            continue;
        }
        if (chCode === 36 /* DollarSign */ ) {
            // move to next char
            i++;
            if (i >= len) break;
            var nextChCode1 = replaceString.charCodeAt(i);
            if (nextChCode1 === 36 /* DollarSign */ ) {
                // $$ => inserts a "$"
                result.emitUnchanged(i - 1);
                result.emitStatic('$', i + 1);
                continue;
            }
            if (nextChCode1 === 48 /* Digit0 */  || nextChCode1 === 38 /* Ampersand */ ) {
                // $& and $0 => inserts the matched substring.
                result.emitUnchanged(i - 1);
                result.emitMatchIndex(0, i + 1, caseOps);
                caseOps.length = 0;
                continue;
            }
            if (49 /* Digit1 */  <= nextChCode1 && nextChCode1 <= 57 /* Digit9 */ ) {
                // $n
                var matchIndex = nextChCode1 - 48 /* Digit0 */ ;
                // peek next char to probe for $nn
                if (i + 1 < len) {
                    var nextNextChCode = replaceString.charCodeAt(i + 1);
                    if (48 /* Digit0 */  <= nextNextChCode && nextNextChCode <= 57 /* Digit9 */ ) {
                        // $nn
                        // move to next char
                        i++;
                        matchIndex = matchIndex * 10 + (nextNextChCode - 48 /* Digit0 */ );
                        result.emitUnchanged(i - 2);
                        result.emitMatchIndex(matchIndex, i + 1, caseOps);
                        caseOps.length = 0;
                        continue;
                    }
                }
                result.emitUnchanged(i - 1);
                result.emitMatchIndex(matchIndex, i + 1, caseOps);
                caseOps.length = 0;
                continue;
            }
        }
    }
    return result.finalize();
}

},{"@swc/helpers":"erO4s","../../../base/common/search.js":"UY0zk","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"UY0zk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "buildReplaceStringWithCasePreserved", function() {
    return buildReplaceStringWithCasePreserved;
});
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _stringsJs = require("./strings.js");
function buildReplaceStringWithCasePreserved(matches, pattern) {
    if (matches && matches[0] !== '') {
        var containsHyphens = validateSpecificSpecialCharacter(matches, pattern, '-');
        var containsUnderscores = validateSpecificSpecialCharacter(matches, pattern, '_');
        if (containsHyphens && !containsUnderscores) return buildReplaceStringForSpecificSpecialCharacter(matches, pattern, '-');
        else if (!containsHyphens && containsUnderscores) return buildReplaceStringForSpecificSpecialCharacter(matches, pattern, '_');
        if (matches[0].toUpperCase() === matches[0]) return pattern.toUpperCase();
        else if (matches[0].toLowerCase() === matches[0]) return pattern.toLowerCase();
        else if (_stringsJs.containsUppercaseCharacter(matches[0][0]) && pattern.length > 0) return pattern[0].toUpperCase() + pattern.substr(1);
        else if (matches[0][0].toUpperCase() !== matches[0][0] && pattern.length > 0) return pattern[0].toLowerCase() + pattern.substr(1);
        else // we don't understand its pattern yet.
        return pattern;
    } else return pattern;
}
function validateSpecificSpecialCharacter(matches, pattern, specialCharacter) {
    var doesContainSpecialCharacter = matches[0].indexOf(specialCharacter) !== -1 && pattern.indexOf(specialCharacter) !== -1;
    return doesContainSpecialCharacter && matches[0].split(specialCharacter).length === pattern.split(specialCharacter).length;
}
function buildReplaceStringForSpecificSpecialCharacter(matches, pattern, specialCharacter) {
    var splitPatternAtSpecialCharacter = pattern.split(specialCharacter);
    var splitMatchAtSpecialCharacter = matches[0].split(specialCharacter);
    var replaceString = '';
    splitPatternAtSpecialCharacter.forEach(function(splitValue, index) {
        replaceString += buildReplaceStringWithCasePreserved([
            splitMatchAtSpecialCharacter[index]
        ], splitValue) + specialCharacter;
    });
    return replaceString.slice(0, -1);
}

},{"./strings.js":"jsb6w","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"4p2A6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FindOptionsWidget", function() {
    return FindOptionsWidget;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _domJs = require("../../../base/browser/dom.js");
var _findInputCheckboxesJs = require("../../../base/browser/ui/findinput/findInputCheckboxes.js");
var _widgetJs = require("../../../base/browser/ui/widget.js");
var _asyncJs = require("../../../base/common/async.js");
var _findModelJs = require("./findModel.js");
var _colorRegistryJs = require("../../../platform/theme/common/colorRegistry.js");
var _themeServiceJs = require("../../../platform/theme/common/themeService.js");
var FindOptionsWidget = /*#__PURE__*/ function(Widget) {
    "use strict";
    _helpers.inherits(FindOptionsWidget, Widget);
    var _super = _helpers.createSuper(FindOptionsWidget);
    function FindOptionsWidget(editor, state, keybindingService, themeService) {
        _helpers.classCallCheck(this, FindOptionsWidget);
        var _this;
        _this = _super.call(this);
        _this._hideSoon = _this._register(new _asyncJs.RunOnceScheduler(function() {
            return _this._hide();
        }, 2000));
        _this._isVisible = false;
        _this._editor = editor;
        _this._state = state;
        _this._keybindingService = keybindingService;
        _this._domNode = document.createElement('div');
        _this._domNode.className = 'findOptionsWidget';
        _this._domNode.style.display = 'none';
        _this._domNode.style.top = '10px';
        _this._domNode.setAttribute('role', 'presentation');
        _this._domNode.setAttribute('aria-hidden', 'true');
        var inputActiveOptionBorderColor = themeService.getColorTheme().getColor(_colorRegistryJs.inputActiveOptionBorder);
        var inputActiveOptionForegroundColor = themeService.getColorTheme().getColor(_colorRegistryJs.inputActiveOptionForeground);
        var inputActiveOptionBackgroundColor = themeService.getColorTheme().getColor(_colorRegistryJs.inputActiveOptionBackground);
        _this.caseSensitive = _this._register(new _findInputCheckboxesJs.CaseSensitiveCheckbox({
            appendTitle: _this._keybindingLabelFor(_findModelJs.FIND_IDS.ToggleCaseSensitiveCommand),
            isChecked: _this._state.matchCase,
            inputActiveOptionBorder: inputActiveOptionBorderColor,
            inputActiveOptionForeground: inputActiveOptionForegroundColor,
            inputActiveOptionBackground: inputActiveOptionBackgroundColor
        }));
        _this._domNode.appendChild(_this.caseSensitive.domNode);
        _this._register(_this.caseSensitive.onChange(function() {
            _this._state.change({
                matchCase: _this.caseSensitive.checked
            }, false);
        }));
        _this.wholeWords = _this._register(new _findInputCheckboxesJs.WholeWordsCheckbox({
            appendTitle: _this._keybindingLabelFor(_findModelJs.FIND_IDS.ToggleWholeWordCommand),
            isChecked: _this._state.wholeWord,
            inputActiveOptionBorder: inputActiveOptionBorderColor,
            inputActiveOptionForeground: inputActiveOptionForegroundColor,
            inputActiveOptionBackground: inputActiveOptionBackgroundColor
        }));
        _this._domNode.appendChild(_this.wholeWords.domNode);
        _this._register(_this.wholeWords.onChange(function() {
            _this._state.change({
                wholeWord: _this.wholeWords.checked
            }, false);
        }));
        _this.regex = _this._register(new _findInputCheckboxesJs.RegexCheckbox({
            appendTitle: _this._keybindingLabelFor(_findModelJs.FIND_IDS.ToggleRegexCommand),
            isChecked: _this._state.isRegex,
            inputActiveOptionBorder: inputActiveOptionBorderColor,
            inputActiveOptionForeground: inputActiveOptionForegroundColor,
            inputActiveOptionBackground: inputActiveOptionBackgroundColor
        }));
        _this._domNode.appendChild(_this.regex.domNode);
        _this._register(_this.regex.onChange(function() {
            _this._state.change({
                isRegex: _this.regex.checked
            }, false);
        }));
        _this._editor.addOverlayWidget(_helpers.assertThisInitialized(_this));
        _this._register(_this._state.onFindReplaceStateChange(function(e) {
            var somethingChanged = false;
            if (e.isRegex) {
                _this.regex.checked = _this._state.isRegex;
                somethingChanged = true;
            }
            if (e.wholeWord) {
                _this.wholeWords.checked = _this._state.wholeWord;
                somethingChanged = true;
            }
            if (e.matchCase) {
                _this.caseSensitive.checked = _this._state.matchCase;
                somethingChanged = true;
            }
            if (!_this._state.isRevealed && somethingChanged) _this._revealTemporarily();
        }));
        _this._register(_domJs.addDisposableNonBubblingMouseOutListener(_this._domNode, function(e) {
            return _this._onMouseOut();
        }));
        _this._register(_domJs.addDisposableListener(_this._domNode, 'mouseover', function(e) {
            return _this._onMouseOver();
        }));
        _this._applyTheme(themeService.getColorTheme());
        _this._register(themeService.onDidColorThemeChange(_this._applyTheme.bind(_helpers.assertThisInitialized(_this))));
        return _this;
    }
    _helpers.createClass(FindOptionsWidget, [
        {
            key: "_keybindingLabelFor",
            value: function _keybindingLabelFor(actionId) {
                var kb = this._keybindingService.lookupKeybinding(actionId);
                if (!kb) return '';
                return " (".concat(kb.getLabel(), ")");
            }
        },
        {
            key: "dispose",
            value: function dispose() {
                this._editor.removeOverlayWidget(this);
                _helpers.get(_helpers.getPrototypeOf(FindOptionsWidget.prototype), "dispose", this).call(this);
            }
        },
        {
            // ----- IOverlayWidget API
            key: "getId",
            value: function getId() {
                return FindOptionsWidget.ID;
            }
        },
        {
            key: "getDomNode",
            value: function getDomNode() {
                return this._domNode;
            }
        },
        {
            key: "getPosition",
            value: function getPosition() {
                return {
                    preference: 0 /* TOP_RIGHT_CORNER */ 
                };
            }
        },
        {
            key: "highlightFindOptions",
            value: function highlightFindOptions() {
                this._revealTemporarily();
            }
        },
        {
            key: "_revealTemporarily",
            value: function _revealTemporarily() {
                this._show();
                this._hideSoon.schedule();
            }
        },
        {
            key: "_onMouseOut",
            value: function _onMouseOut() {
                this._hideSoon.schedule();
            }
        },
        {
            key: "_onMouseOver",
            value: function _onMouseOver() {
                this._hideSoon.cancel();
            }
        },
        {
            key: "_show",
            value: function _show() {
                if (this._isVisible) return;
                this._isVisible = true;
                this._domNode.style.display = 'block';
            }
        },
        {
            key: "_hide",
            value: function _hide() {
                if (!this._isVisible) return;
                this._isVisible = false;
                this._domNode.style.display = 'none';
            }
        },
        {
            key: "_applyTheme",
            value: function _applyTheme(theme) {
                var inputStyles = {
                    inputActiveOptionBorder: theme.getColor(_colorRegistryJs.inputActiveOptionBorder),
                    inputActiveOptionForeground: theme.getColor(_colorRegistryJs.inputActiveOptionForeground),
                    inputActiveOptionBackground: theme.getColor(_colorRegistryJs.inputActiveOptionBackground)
                };
                this.caseSensitive.style(inputStyles);
                this.wholeWords.style(inputStyles);
                this.regex.style(inputStyles);
            }
        }
    ]);
    return FindOptionsWidget;
}(_widgetJs.Widget);
FindOptionsWidget.ID = 'editor.contrib.findOptionsWidget';
_themeServiceJs.registerThemingParticipant(function(theme, collector) {
    var widgetBackground = theme.getColor(_colorRegistryJs.editorWidgetBackground);
    if (widgetBackground) collector.addRule(".monaco-editor .findOptionsWidget { background-color: ".concat(widgetBackground, "; }"));
    var widgetForeground = theme.getColor(_colorRegistryJs.editorWidgetForeground);
    if (widgetForeground) collector.addRule(".monaco-editor .findOptionsWidget { color: ".concat(widgetForeground, "; }"));
    var widgetShadowColor = theme.getColor(_colorRegistryJs.widgetShadow);
    if (widgetShadowColor) collector.addRule(".monaco-editor .findOptionsWidget { box-shadow: 0 0 8px 2px ".concat(widgetShadowColor, "; }"));
    var hcBorder = theme.getColor(_colorRegistryJs.contrastBorder);
    if (hcBorder) collector.addRule(".monaco-editor .findOptionsWidget { border: 2px solid ".concat(hcBorder, "; }"));
});

},{"@swc/helpers":"erO4s","../../../base/browser/dom.js":"bxmlc","../../../base/browser/ui/findinput/findInputCheckboxes.js":"dWMAH","../../../base/browser/ui/widget.js":"2HEtf","../../../base/common/async.js":"kMhSh","./findModel.js":"hkZgx","../../../platform/theme/common/colorRegistry.js":"lKtxS","../../../platform/theme/common/themeService.js":"kE7QB","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"dWMAH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CaseSensitiveCheckbox", function() {
    return CaseSensitiveCheckbox;
});
parcelHelpers.export(exports, "WholeWordsCheckbox", function() {
    return WholeWordsCheckbox;
});
parcelHelpers.export(exports, "RegexCheckbox", function() {
    return RegexCheckbox;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _checkboxJs = require("../checkbox/checkbox.js");
var _codiconsJs = require("../../../common/codicons.js");
var _nlsJs = require("../../../../nls.js");
var NLS_CASE_SENSITIVE_CHECKBOX_LABEL = _nlsJs.localize('caseDescription', "Match Case");
var NLS_WHOLE_WORD_CHECKBOX_LABEL = _nlsJs.localize('wordsDescription', "Match Whole Word");
var NLS_REGEX_CHECKBOX_LABEL = _nlsJs.localize('regexDescription', "Use Regular Expression");
var CaseSensitiveCheckbox = /*#__PURE__*/ function(Checkbox) {
    "use strict";
    _helpers.inherits(CaseSensitiveCheckbox, Checkbox);
    var _super = _helpers.createSuper(CaseSensitiveCheckbox);
    function CaseSensitiveCheckbox(opts) {
        _helpers.classCallCheck(this, CaseSensitiveCheckbox);
        return _super.call(this, {
            icon: _codiconsJs.Codicon.caseSensitive,
            title: NLS_CASE_SENSITIVE_CHECKBOX_LABEL + opts.appendTitle,
            isChecked: opts.isChecked,
            inputActiveOptionBorder: opts.inputActiveOptionBorder,
            inputActiveOptionForeground: opts.inputActiveOptionForeground,
            inputActiveOptionBackground: opts.inputActiveOptionBackground
        });
    }
    return CaseSensitiveCheckbox;
}(_checkboxJs.Checkbox);
var WholeWordsCheckbox = /*#__PURE__*/ function(Checkbox) {
    "use strict";
    _helpers.inherits(WholeWordsCheckbox, Checkbox);
    var _super = _helpers.createSuper(WholeWordsCheckbox);
    function WholeWordsCheckbox(opts) {
        _helpers.classCallCheck(this, WholeWordsCheckbox);
        return _super.call(this, {
            icon: _codiconsJs.Codicon.wholeWord,
            title: NLS_WHOLE_WORD_CHECKBOX_LABEL + opts.appendTitle,
            isChecked: opts.isChecked,
            inputActiveOptionBorder: opts.inputActiveOptionBorder,
            inputActiveOptionForeground: opts.inputActiveOptionForeground,
            inputActiveOptionBackground: opts.inputActiveOptionBackground
        });
    }
    return WholeWordsCheckbox;
}(_checkboxJs.Checkbox);
var RegexCheckbox = /*#__PURE__*/ function(Checkbox) {
    "use strict";
    _helpers.inherits(RegexCheckbox, Checkbox);
    var _super = _helpers.createSuper(RegexCheckbox);
    function RegexCheckbox(opts) {
        _helpers.classCallCheck(this, RegexCheckbox);
        return _super.call(this, {
            icon: _codiconsJs.Codicon.regex,
            title: NLS_REGEX_CHECKBOX_LABEL + opts.appendTitle,
            isChecked: opts.isChecked,
            inputActiveOptionBorder: opts.inputActiveOptionBorder,
            inputActiveOptionForeground: opts.inputActiveOptionForeground,
            inputActiveOptionBackground: opts.inputActiveOptionBackground
        });
    }
    return RegexCheckbox;
}(_checkboxJs.Checkbox);

},{"@swc/helpers":"erO4s","../checkbox/checkbox.js":"8oSPd","../../../common/codicons.js":"j24JC","../../../../nls.js":"9djYb","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"8oSPd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Checkbox", function() {
    return Checkbox;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _widgetJs = require("../widget.js");
var _codiconsJs = require("../../../common/codicons.js");
var _colorJs = require("../../../common/color.js");
var _eventJs = require("../../../common/event.js");
var _checkboxCss = require("./checkbox.css");
var defaultOpts = {
    inputActiveOptionBorder: _colorJs.Color.fromHex('#007ACC00'),
    inputActiveOptionForeground: _colorJs.Color.fromHex('#FFFFFF'),
    inputActiveOptionBackground: _colorJs.Color.fromHex('#0E639C50')
};
var Checkbox = /*#__PURE__*/ function(Widget) {
    "use strict";
    _helpers.inherits(Checkbox, Widget);
    var _super = _helpers.createSuper(Checkbox);
    function Checkbox(opts) {
        var _classes, _classes1, _classList;
        _helpers.classCallCheck(this, Checkbox);
        var _this;
        _this = _super.call(this);
        _this._onChange = _this._register(new _eventJs.Emitter());
        _this.onChange = _this._onChange.event;
        _this._onKeyDown = _this._register(new _eventJs.Emitter());
        _this.onKeyDown = _this._onKeyDown.event;
        _this._opts = Object.assign(Object.assign({}, defaultOpts), opts);
        _this._checked = _this._opts.isChecked;
        var classes = [
            'monaco-custom-checkbox'
        ];
        if (_this._opts.icon) (_classes = classes).push.apply(_classes, _helpers.toConsumableArray(_codiconsJs.CSSIcon.asClassNameArray(_this._opts.icon)));
        if (_this._opts.actionClassName) (_classes1 = classes).push.apply(_classes1, _helpers.toConsumableArray(_this._opts.actionClassName.split(' ')));
        if (_this._checked) classes.push('checked');
        _this.domNode = document.createElement('div');
        _this.domNode.title = _this._opts.title;
        (_classList = _this.domNode.classList).add.apply(_classList, _helpers.toConsumableArray(classes));
        if (!_this._opts.notFocusable) _this.domNode.tabIndex = 0;
        _this.domNode.setAttribute('role', 'checkbox');
        _this.domNode.setAttribute('aria-checked', String(_this._checked));
        _this.domNode.setAttribute('aria-label', _this._opts.title);
        _this.applyStyles();
        _this.onclick(_this.domNode, function(ev) {
            _this.checked = !_this._checked;
            _this._onChange.fire(false);
            ev.preventDefault();
        });
        _this.ignoreGesture(_this.domNode);
        _this.onkeydown(_this.domNode, function(keyboardEvent) {
            if (keyboardEvent.keyCode === 10 /* Space */  || keyboardEvent.keyCode === 3 /* Enter */ ) {
                _this.checked = !_this._checked;
                _this._onChange.fire(true);
                keyboardEvent.preventDefault();
                return;
            }
            _this._onKeyDown.fire(keyboardEvent);
        });
        return _this;
    }
    _helpers.createClass(Checkbox, [
        {
            key: "enabled",
            get: function get() {
                return this.domNode.getAttribute('aria-disabled') !== 'true';
            }
        },
        {
            key: "focus",
            value: function focus() {
                this.domNode.focus();
            }
        },
        {
            key: "checked",
            get: function get() {
                return this._checked;
            },
            set: function set(newIsChecked) {
                this._checked = newIsChecked;
                this.domNode.setAttribute('aria-checked', String(this._checked));
                this.domNode.classList.toggle('checked', this._checked);
                this.applyStyles();
            }
        },
        {
            key: "width",
            value: function width() {
                return 22 /* icon width */ ;
            }
        },
        {
            key: "style",
            value: function style(styles) {
                if (styles.inputActiveOptionBorder) this._opts.inputActiveOptionBorder = styles.inputActiveOptionBorder;
                if (styles.inputActiveOptionForeground) this._opts.inputActiveOptionForeground = styles.inputActiveOptionForeground;
                if (styles.inputActiveOptionBackground) this._opts.inputActiveOptionBackground = styles.inputActiveOptionBackground;
                this.applyStyles();
            }
        },
        {
            key: "applyStyles",
            value: function applyStyles() {
                if (this.domNode) {
                    this.domNode.style.borderColor = this._checked && this._opts.inputActiveOptionBorder ? this._opts.inputActiveOptionBorder.toString() : '';
                    this.domNode.style.color = this._checked && this._opts.inputActiveOptionForeground ? this._opts.inputActiveOptionForeground.toString() : 'inherit';
                    this.domNode.style.backgroundColor = this._checked && this._opts.inputActiveOptionBackground ? this._opts.inputActiveOptionBackground.toString() : '';
                }
            }
        },
        {
            key: "enable",
            value: function enable() {
                this.domNode.setAttribute('aria-disabled', String(false));
            }
        },
        {
            key: "disable",
            value: function disable() {
                this.domNode.setAttribute('aria-disabled', String(true));
            }
        }
    ]);
    return Checkbox;
}(_widgetJs.Widget);

},{"@swc/helpers":"erO4s","../widget.js":"2HEtf","../../../common/codicons.js":"j24JC","../../../common/color.js":"2jKDp","../../../common/event.js":"9IBcK","./checkbox.css":"28WqF","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"28WqF":[function() {},{}],"1obEc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FindReplaceState", function() {
    return FindReplaceState;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _eventJs = require("../../../base/common/event.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _rangeJs = require("../../common/core/range.js");
var _findModelJs = require("./findModel.js");
function effectiveOptionValue(override, value) {
    if (override === 1 /* True */ ) return true;
    if (override === 2 /* False */ ) return false;
    return value;
}
var FindReplaceState = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(FindReplaceState, Disposable);
    var _super = _helpers.createSuper(FindReplaceState);
    function FindReplaceState() {
        _helpers.classCallCheck(this, FindReplaceState);
        var _this;
        _this = _super.call(this);
        _this._onFindReplaceStateChange = _this._register(new _eventJs.Emitter());
        _this.onFindReplaceStateChange = _this._onFindReplaceStateChange.event;
        _this._searchString = '';
        _this._replaceString = '';
        _this._isRevealed = false;
        _this._isReplaceRevealed = false;
        _this._isRegex = false;
        _this._isRegexOverride = 0 /* NotSet */ ;
        _this._wholeWord = false;
        _this._wholeWordOverride = 0 /* NotSet */ ;
        _this._matchCase = false;
        _this._matchCaseOverride = 0 /* NotSet */ ;
        _this._preserveCase = false;
        _this._preserveCaseOverride = 0 /* NotSet */ ;
        _this._searchScope = null;
        _this._matchesPosition = 0;
        _this._matchesCount = 0;
        _this._currentMatch = null;
        _this._loop = true;
        return _this;
    }
    _helpers.createClass(FindReplaceState, [
        {
            key: "searchString",
            get: function get() {
                return this._searchString;
            }
        },
        {
            key: "replaceString",
            get: function get() {
                return this._replaceString;
            }
        },
        {
            key: "isRevealed",
            get: function get() {
                return this._isRevealed;
            }
        },
        {
            key: "isReplaceRevealed",
            get: function get() {
                return this._isReplaceRevealed;
            }
        },
        {
            key: "isRegex",
            get: function get() {
                return effectiveOptionValue(this._isRegexOverride, this._isRegex);
            }
        },
        {
            key: "wholeWord",
            get: function get() {
                return effectiveOptionValue(this._wholeWordOverride, this._wholeWord);
            }
        },
        {
            key: "matchCase",
            get: function get() {
                return effectiveOptionValue(this._matchCaseOverride, this._matchCase);
            }
        },
        {
            key: "preserveCase",
            get: function get() {
                return effectiveOptionValue(this._preserveCaseOverride, this._preserveCase);
            }
        },
        {
            key: "actualIsRegex",
            get: function get() {
                return this._isRegex;
            }
        },
        {
            key: "actualWholeWord",
            get: function get() {
                return this._wholeWord;
            }
        },
        {
            key: "actualMatchCase",
            get: function get() {
                return this._matchCase;
            }
        },
        {
            key: "actualPreserveCase",
            get: function get() {
                return this._preserveCase;
            }
        },
        {
            key: "searchScope",
            get: function get() {
                return this._searchScope;
            }
        },
        {
            key: "matchesPosition",
            get: function get() {
                return this._matchesPosition;
            }
        },
        {
            key: "matchesCount",
            get: function get() {
                return this._matchesCount;
            }
        },
        {
            key: "currentMatch",
            get: function get() {
                return this._currentMatch;
            }
        },
        {
            key: "changeMatchInfo",
            value: function changeMatchInfo(matchesPosition, matchesCount, currentMatch) {
                var changeEvent = {
                    moveCursor: false,
                    updateHistory: false,
                    searchString: false,
                    replaceString: false,
                    isRevealed: false,
                    isReplaceRevealed: false,
                    isRegex: false,
                    wholeWord: false,
                    matchCase: false,
                    preserveCase: false,
                    searchScope: false,
                    matchesPosition: false,
                    matchesCount: false,
                    currentMatch: false,
                    loop: false
                };
                var somethingChanged = false;
                if (matchesCount === 0) matchesPosition = 0;
                if (matchesPosition > matchesCount) matchesPosition = matchesCount;
                if (this._matchesPosition !== matchesPosition) {
                    this._matchesPosition = matchesPosition;
                    changeEvent.matchesPosition = true;
                    somethingChanged = true;
                }
                if (this._matchesCount !== matchesCount) {
                    this._matchesCount = matchesCount;
                    changeEvent.matchesCount = true;
                    somethingChanged = true;
                }
                if (typeof currentMatch !== 'undefined') {
                    if (!_rangeJs.Range.equalsRange(this._currentMatch, currentMatch)) {
                        this._currentMatch = currentMatch;
                        changeEvent.currentMatch = true;
                        somethingChanged = true;
                    }
                }
                if (somethingChanged) this._onFindReplaceStateChange.fire(changeEvent);
            }
        },
        {
            key: "change",
            value: function change(newState, moveCursor) {
                var updateHistory = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
                var _this = this;
                var _a1;
                var changeEvent = {
                    moveCursor: moveCursor,
                    updateHistory: updateHistory,
                    searchString: false,
                    replaceString: false,
                    isRevealed: false,
                    isReplaceRevealed: false,
                    isRegex: false,
                    wholeWord: false,
                    matchCase: false,
                    preserveCase: false,
                    searchScope: false,
                    matchesPosition: false,
                    matchesCount: false,
                    currentMatch: false,
                    loop: false
                };
                var somethingChanged = false;
                var oldEffectiveIsRegex = this.isRegex;
                var oldEffectiveWholeWords = this.wholeWord;
                var oldEffectiveMatchCase = this.matchCase;
                var oldEffectivePreserveCase = this.preserveCase;
                if (typeof newState.searchString !== 'undefined') {
                    if (this._searchString !== newState.searchString) {
                        this._searchString = newState.searchString;
                        changeEvent.searchString = true;
                        somethingChanged = true;
                    }
                }
                if (typeof newState.replaceString !== 'undefined') {
                    if (this._replaceString !== newState.replaceString) {
                        this._replaceString = newState.replaceString;
                        changeEvent.replaceString = true;
                        somethingChanged = true;
                    }
                }
                if (typeof newState.isRevealed !== 'undefined') {
                    if (this._isRevealed !== newState.isRevealed) {
                        this._isRevealed = newState.isRevealed;
                        changeEvent.isRevealed = true;
                        somethingChanged = true;
                    }
                }
                if (typeof newState.isReplaceRevealed !== 'undefined') {
                    if (this._isReplaceRevealed !== newState.isReplaceRevealed) {
                        this._isReplaceRevealed = newState.isReplaceRevealed;
                        changeEvent.isReplaceRevealed = true;
                        somethingChanged = true;
                    }
                }
                if (typeof newState.isRegex !== 'undefined') this._isRegex = newState.isRegex;
                if (typeof newState.wholeWord !== 'undefined') this._wholeWord = newState.wholeWord;
                if (typeof newState.matchCase !== 'undefined') this._matchCase = newState.matchCase;
                if (typeof newState.preserveCase !== 'undefined') this._preserveCase = newState.preserveCase;
                if (typeof newState.searchScope !== 'undefined') {
                    if (!((_a1 = newState.searchScope) === null || _a1 === void 0 ? void 0 : _a1.every(function(newSearchScope) {
                        var _a;
                        return (_a = _this._searchScope) === null || _a === void 0 ? void 0 : _a.some(function(existingSearchScope) {
                            return !_rangeJs.Range.equalsRange(existingSearchScope, newSearchScope);
                        });
                    }))) {
                        this._searchScope = newState.searchScope;
                        changeEvent.searchScope = true;
                        somethingChanged = true;
                    }
                }
                if (typeof newState.loop !== 'undefined') {
                    if (this._loop !== newState.loop) {
                        this._loop = newState.loop;
                        changeEvent.loop = true;
                        somethingChanged = true;
                    }
                }
                // Overrides get set when they explicitly come in and get reset anytime something else changes
                this._isRegexOverride = typeof newState.isRegexOverride !== 'undefined' ? newState.isRegexOverride : 0 /* NotSet */ ;
                this._wholeWordOverride = typeof newState.wholeWordOverride !== 'undefined' ? newState.wholeWordOverride : 0 /* NotSet */ ;
                this._matchCaseOverride = typeof newState.matchCaseOverride !== 'undefined' ? newState.matchCaseOverride : 0 /* NotSet */ ;
                this._preserveCaseOverride = typeof newState.preserveCaseOverride !== 'undefined' ? newState.preserveCaseOverride : 0 /* NotSet */ ;
                if (oldEffectiveIsRegex !== this.isRegex) {
                    somethingChanged = true;
                    changeEvent.isRegex = true;
                }
                if (oldEffectiveWholeWords !== this.wholeWord) {
                    somethingChanged = true;
                    changeEvent.wholeWord = true;
                }
                if (oldEffectiveMatchCase !== this.matchCase) {
                    somethingChanged = true;
                    changeEvent.matchCase = true;
                }
                if (oldEffectivePreserveCase !== this.preserveCase) {
                    somethingChanged = true;
                    changeEvent.preserveCase = true;
                }
                if (somethingChanged) this._onFindReplaceStateChange.fire(changeEvent);
            }
        },
        {
            key: "canNavigateBack",
            value: function canNavigateBack() {
                return this.canNavigateInLoop() || this.matchesPosition !== 1;
            }
        },
        {
            key: "canNavigateForward",
            value: function canNavigateForward() {
                return this.canNavigateInLoop() || this.matchesPosition < this.matchesCount;
            }
        },
        {
            key: "canNavigateInLoop",
            value: function canNavigateInLoop() {
                return this._loop || this.matchesCount >= _findModelJs.MATCHES_LIMIT;
            }
        }
    ]);
    return FindReplaceState;
}(_lifecycleJs.Disposable);

},{"@swc/helpers":"erO4s","../../../base/common/event.js":"9IBcK","../../../base/common/lifecycle.js":"bcbPy","../../common/core/range.js":"VbyL8","./findModel.js":"hkZgx","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"1fpoH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "findReplaceIcon", function() {
    return findReplaceIcon;
});
parcelHelpers.export(exports, "findReplaceAllIcon", function() {
    return findReplaceAllIcon;
});
parcelHelpers.export(exports, "findPreviousMatchIcon", function() {
    return findPreviousMatchIcon;
});
parcelHelpers.export(exports, "findNextMatchIcon", function() {
    return findNextMatchIcon;
});
parcelHelpers.export(exports, "NLS_MATCHES_LOCATION", function() {
    return NLS_MATCHES_LOCATION;
});
parcelHelpers.export(exports, "NLS_NO_RESULTS", function() {
    return NLS_NO_RESULTS;
});
parcelHelpers.export(exports, "FindWidgetViewZone", function() {
    return FindWidgetViewZone;
});
parcelHelpers.export(exports, "FindWidget", function() {
    return FindWidget;
});
parcelHelpers.export(exports, "SimpleButton", function() {
    return SimpleButton;
});
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
var _domJs = require("../../../base/browser/dom.js");
var _ariaJs = require("../../../base/browser/ui/aria/aria.js");
var _checkboxJs = require("../../../base/browser/ui/checkbox/checkbox.js");
var _sashJs = require("../../../base/browser/ui/sash/sash.js");
var _widgetJs = require("../../../base/browser/ui/widget.js");
var _asyncJs = require("../../../base/common/async.js");
var _codiconsJs = require("../../../base/common/codicons.js");
var _errorsJs = require("../../../base/common/errors.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _platformJs = require("../../../base/common/platform.js");
var _stringsJs = require("../../../base/common/strings.js");
var _findWidgetCss = require("./findWidget.css");
var _rangeJs = require("../../common/core/range.js");
var _findModelJs = require("./findModel.js");
var _nlsJs = require("../../../nls.js");
var _contextScopedHistoryWidgetJs = require("../../../platform/browser/contextScopedHistoryWidget.js");
var _historyWidgetKeybindingHintJs = require("../../../platform/browser/historyWidgetKeybindingHint.js");
var _colorRegistryJs = require("../../../platform/theme/common/colorRegistry.js");
var _iconRegistryJs = require("../../../platform/theme/common/iconRegistry.js");
var _themeServiceJs = require("../../../platform/theme/common/themeService.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var findSelectionIcon = _iconRegistryJs.registerIcon('find-selection', _codiconsJs.Codicon.selection, _nlsJs.localize('findSelectionIcon', 'Icon for \'Find in Selection\' in the editor find widget.'));
var findCollapsedIcon = _iconRegistryJs.registerIcon('find-collapsed', _codiconsJs.Codicon.chevronRight, _nlsJs.localize('findCollapsedIcon', 'Icon to indicate that the editor find widget is collapsed.'));
var findExpandedIcon = _iconRegistryJs.registerIcon('find-expanded', _codiconsJs.Codicon.chevronDown, _nlsJs.localize('findExpandedIcon', 'Icon to indicate that the editor find widget is expanded.'));
var findReplaceIcon = _iconRegistryJs.registerIcon('find-replace', _codiconsJs.Codicon.replace, _nlsJs.localize('findReplaceIcon', 'Icon for \'Replace\' in the editor find widget.'));
var findReplaceAllIcon = _iconRegistryJs.registerIcon('find-replace-all', _codiconsJs.Codicon.replaceAll, _nlsJs.localize('findReplaceAllIcon', 'Icon for \'Replace All\' in the editor find widget.'));
var findPreviousMatchIcon = _iconRegistryJs.registerIcon('find-previous-match', _codiconsJs.Codicon.arrowUp, _nlsJs.localize('findPreviousMatchIcon', 'Icon for \'Find Previous\' in the editor find widget.'));
var findNextMatchIcon = _iconRegistryJs.registerIcon('find-next-match', _codiconsJs.Codicon.arrowDown, _nlsJs.localize('findNextMatchIcon', 'Icon for \'Find Next\' in the editor find widget.'));
var NLS_FIND_INPUT_LABEL = _nlsJs.localize('label.find', "Find");
var NLS_FIND_INPUT_PLACEHOLDER = _nlsJs.localize('placeholder.find', "Find");
var NLS_PREVIOUS_MATCH_BTN_LABEL = _nlsJs.localize('label.previousMatchButton', "Previous Match");
var NLS_NEXT_MATCH_BTN_LABEL = _nlsJs.localize('label.nextMatchButton', "Next Match");
var NLS_TOGGLE_SELECTION_FIND_TITLE = _nlsJs.localize('label.toggleSelectionFind', "Find in Selection");
var NLS_CLOSE_BTN_LABEL = _nlsJs.localize('label.closeButton', "Close");
var NLS_REPLACE_INPUT_LABEL = _nlsJs.localize('label.replace', "Replace");
var NLS_REPLACE_INPUT_PLACEHOLDER = _nlsJs.localize('placeholder.replace', "Replace");
var NLS_REPLACE_BTN_LABEL = _nlsJs.localize('label.replaceButton', "Replace");
var NLS_REPLACE_ALL_BTN_LABEL = _nlsJs.localize('label.replaceAllButton', "Replace All");
var NLS_TOGGLE_REPLACE_MODE_BTN_LABEL = _nlsJs.localize('label.toggleReplaceButton', "Toggle Replace");
var NLS_MATCHES_COUNT_LIMIT_TITLE = _nlsJs.localize('title.matchesCountLimit', "Only the first {0} results are highlighted, but all find operations work on the entire text.", _findModelJs.MATCHES_LIMIT);
var NLS_MATCHES_LOCATION = _nlsJs.localize('label.matchesLocation', "{0} of {1}");
var NLS_NO_RESULTS = _nlsJs.localize('label.noResults', "No results");
var FIND_WIDGET_INITIAL_WIDTH = 419;
var PART_WIDTH = 275;
var FIND_INPUT_AREA_WIDTH = PART_WIDTH - 54;
var MAX_MATCHES_COUNT_WIDTH = 69;
// let FIND_ALL_CONTROLS_WIDTH = 17/** Find Input margin-left */ + (MAX_MATCHES_COUNT_WIDTH + 3 + 1) /** Match Results */ + 23 /** Button */ * 4 + 2/** sash */;
var FIND_INPUT_AREA_HEIGHT = 33; // The height of Find Widget when Replace Input is not visible.
var ctrlEnterReplaceAllWarningPromptedKey = 'ctrlEnterReplaceAll.windows.donotask';
var ctrlKeyMod = _platformJs.isMacintosh ? 256 /* WinCtrl */  : 2048 /* CtrlCmd */ ;
var FindWidgetViewZone = function FindWidgetViewZone(afterLineNumber) {
    "use strict";
    _helpers.classCallCheck(this, FindWidgetViewZone);
    this.afterLineNumber = afterLineNumber;
    this.heightInPx = FIND_INPUT_AREA_HEIGHT;
    this.suppressMouseDown = false;
    this.domNode = document.createElement('div');
    this.domNode.className = 'dock-find-viewzone';
};
function stopPropagationForMultiLineUpwards(event, value, textarea) {
    var isMultiline = !!value.match(/\n/);
    if (textarea && isMultiline && textarea.selectionStart > 0) {
        event.stopPropagation();
        return;
    }
}
function stopPropagationForMultiLineDownwards(event, value, textarea) {
    var isMultiline = !!value.match(/\n/);
    if (textarea && isMultiline && textarea.selectionEnd < textarea.value.length) {
        event.stopPropagation();
        return;
    }
}
var FindWidget = /*#__PURE__*/ function(Widget) {
    "use strict";
    _helpers.inherits(FindWidget, Widget);
    var _super = _helpers.createSuper(FindWidget);
    function FindWidget(codeEditor, controller, state, contextViewProvider, keybindingService, contextKeyService, themeService, storageService, notificationService) {
        _helpers.classCallCheck(this, FindWidget);
        var _this;
        _this = _super.call(this);
        _this._cachedHeight = null;
        _this._revealTimeouts = [];
        _this._codeEditor = codeEditor;
        _this._controller = controller;
        _this._state = state;
        _this._contextViewProvider = contextViewProvider;
        _this._keybindingService = keybindingService;
        _this._contextKeyService = contextKeyService;
        _this._storageService = storageService;
        _this._notificationService = notificationService;
        _this._ctrlEnterReplaceAllWarningPrompted = !!storageService.getBoolean(ctrlEnterReplaceAllWarningPromptedKey, 0 /* GLOBAL */ );
        _this._isVisible = false;
        _this._isReplaceVisible = false;
        _this._ignoreChangeEvent = false;
        _this._updateHistoryDelayer = new _asyncJs.Delayer(500);
        _this._register(_lifecycleJs.toDisposable(function() {
            return _this._updateHistoryDelayer.cancel();
        }));
        _this._register(_this._state.onFindReplaceStateChange(function(e) {
            return _this._onStateChanged(e);
        }));
        _this._buildDomNode();
        _this._updateButtons();
        _this._tryUpdateWidgetWidth();
        _this._findInput.inputBox.layout();
        _this._register(_this._codeEditor.onDidChangeConfiguration(function(e) {
            if (e.hasChanged(80 /* readOnly */ )) {
                if (_this._codeEditor.getOption(80 /* readOnly */ )) // Hide replace part if editor becomes read only
                _this._state.change({
                    isReplaceRevealed: false
                }, false);
                _this._updateButtons();
            }
            if (e.hasChanged(130 /* layoutInfo */ )) _this._tryUpdateWidgetWidth();
            if (e.hasChanged(2 /* accessibilitySupport */ )) _this.updateAccessibilitySupport();
            if (e.hasChanged(35 /* find */ )) {
                var addExtraSpaceOnTop = _this._codeEditor.getOption(35 /* find */ ).addExtraSpaceOnTop;
                if (addExtraSpaceOnTop && !_this._viewZone) {
                    _this._viewZone = new FindWidgetViewZone(0);
                    _this._showViewZone();
                }
                if (!addExtraSpaceOnTop && _this._viewZone) _this._removeViewZone();
            }
        }));
        _this.updateAccessibilitySupport();
        _this._register(_this._codeEditor.onDidChangeCursorSelection(function() {
            if (_this._isVisible) _this._updateToggleSelectionFindButton();
        }));
        _this._register(_this._codeEditor.onDidFocusEditorWidget(function() {
            return __awaiter(_helpers.assertThisInitialized(_this), void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                var globalBufferTerm;
                return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                    while(1)switch(_ctx.prev = _ctx.next){
                        case 0:
                            if (!this._isVisible) {
                                _ctx.next = 5;
                                break;
                            }
                            _ctx.next = 3;
                            return this._controller.getGlobalBufferTerm();
                        case 3:
                            globalBufferTerm = _ctx.sent;
                            if (globalBufferTerm && globalBufferTerm !== this._state.searchString) {
                                this._state.change({
                                    searchString: globalBufferTerm
                                }, false);
                                this._findInput.select();
                            }
                        case 5:
                        case "end":
                            return _ctx.stop();
                    }
                }, _callee, this);
            }));
        }));
        _this._findInputFocused = _findModelJs.CONTEXT_FIND_INPUT_FOCUSED.bindTo(contextKeyService);
        _this._findFocusTracker = _this._register(_domJs.trackFocus(_this._findInput.inputBox.inputElement));
        _this._register(_this._findFocusTracker.onDidFocus(function() {
            _this._findInputFocused.set(true);
            _this._updateSearchScope();
        }));
        _this._register(_this._findFocusTracker.onDidBlur(function() {
            _this._findInputFocused.set(false);
        }));
        _this._replaceInputFocused = _findModelJs.CONTEXT_REPLACE_INPUT_FOCUSED.bindTo(contextKeyService);
        _this._replaceFocusTracker = _this._register(_domJs.trackFocus(_this._replaceInput.inputBox.inputElement));
        _this._register(_this._replaceFocusTracker.onDidFocus(function() {
            _this._replaceInputFocused.set(true);
            _this._updateSearchScope();
        }));
        _this._register(_this._replaceFocusTracker.onDidBlur(function() {
            _this._replaceInputFocused.set(false);
        }));
        _this._codeEditor.addOverlayWidget(_helpers.assertThisInitialized(_this));
        if (_this._codeEditor.getOption(35 /* find */ ).addExtraSpaceOnTop) _this._viewZone = new FindWidgetViewZone(0); // Put it before the first line then users can scroll beyond the first line.
        _this._applyTheme(themeService.getColorTheme());
        _this._register(themeService.onDidColorThemeChange(_this._applyTheme.bind(_helpers.assertThisInitialized(_this))));
        _this._register(_this._codeEditor.onDidChangeModel(function() {
            if (!_this._isVisible) return;
            _this._viewZoneId = undefined;
        }));
        _this._register(_this._codeEditor.onDidScrollChange(function(e) {
            if (e.scrollTopChanged) {
                _this._layoutViewZone();
                return;
            }
            // for other scroll changes, layout the viewzone in next tick to avoid ruining current rendering.
            setTimeout(function() {
                _this._layoutViewZone();
            }, 0);
        }));
        return _this;
    }
    _helpers.createClass(FindWidget, [
        {
            // ----- IOverlayWidget API
            key: "getId",
            value: function getId() {
                return FindWidget.ID;
            }
        },
        {
            key: "getDomNode",
            value: function getDomNode() {
                return this._domNode;
            }
        },
        {
            key: "getPosition",
            value: function getPosition() {
                if (this._isVisible) return {
                    preference: 0 /* TOP_RIGHT_CORNER */ 
                };
                return null;
            }
        },
        {
            // ----- React to state changes
            key: "_onStateChanged",
            value: function _onStateChanged(e) {
                if (e.searchString) {
                    try {
                        this._ignoreChangeEvent = true;
                        this._findInput.setValue(this._state.searchString);
                    } finally{
                        this._ignoreChangeEvent = false;
                    }
                    this._updateButtons();
                }
                if (e.replaceString) this._replaceInput.inputBox.value = this._state.replaceString;
                if (e.isRevealed) {
                    if (this._state.isRevealed) this._reveal();
                    else this._hide(true);
                }
                if (e.isReplaceRevealed) {
                    if (this._state.isReplaceRevealed) {
                        if (!this._codeEditor.getOption(80 /* readOnly */ ) && !this._isReplaceVisible) {
                            this._isReplaceVisible = true;
                            this._replaceInput.width = _domJs.getTotalWidth(this._findInput.domNode);
                            this._updateButtons();
                            this._replaceInput.inputBox.layout();
                        }
                    } else if (this._isReplaceVisible) {
                        this._isReplaceVisible = false;
                        this._updateButtons();
                    }
                }
                if ((e.isRevealed || e.isReplaceRevealed) && (this._state.isRevealed || this._state.isReplaceRevealed)) {
                    if (this._tryUpdateHeight()) this._showViewZone();
                }
                if (e.isRegex) this._findInput.setRegex(this._state.isRegex);
                if (e.wholeWord) this._findInput.setWholeWords(this._state.wholeWord);
                if (e.matchCase) this._findInput.setCaseSensitive(this._state.matchCase);
                if (e.preserveCase) this._replaceInput.setPreserveCase(this._state.preserveCase);
                if (e.searchScope) {
                    if (this._state.searchScope) this._toggleSelectionFind.checked = true;
                    else this._toggleSelectionFind.checked = false;
                    this._updateToggleSelectionFindButton();
                }
                if (e.searchString || e.matchesCount || e.matchesPosition) {
                    var showRedOutline = this._state.searchString.length > 0 && this._state.matchesCount === 0;
                    this._domNode.classList.toggle('no-results', showRedOutline);
                    this._updateMatchesCount();
                    this._updateButtons();
                }
                if (e.searchString || e.currentMatch) this._layoutViewZone();
                if (e.updateHistory) this._delayedUpdateHistory();
                if (e.loop) this._updateButtons();
            }
        },
        {
            key: "_delayedUpdateHistory",
            value: function _delayedUpdateHistory() {
                this._updateHistoryDelayer.trigger(this._updateHistory.bind(this)).then(undefined, _errorsJs.onUnexpectedError);
            }
        },
        {
            key: "_updateHistory",
            value: function _updateHistory() {
                if (this._state.searchString) this._findInput.inputBox.addToHistory();
                if (this._state.replaceString) this._replaceInput.inputBox.addToHistory();
            }
        },
        {
            key: "_updateMatchesCount",
            value: function _updateMatchesCount() {
                this._matchesCount.style.minWidth = MAX_MATCHES_COUNT_WIDTH + 'px';
                if (this._state.matchesCount >= _findModelJs.MATCHES_LIMIT) this._matchesCount.title = NLS_MATCHES_COUNT_LIMIT_TITLE;
                else this._matchesCount.title = '';
                // remove previous content
                if (this._matchesCount.firstChild) this._matchesCount.removeChild(this._matchesCount.firstChild);
                var label;
                if (this._state.matchesCount > 0) {
                    var matchesCount = String(this._state.matchesCount);
                    if (this._state.matchesCount >= _findModelJs.MATCHES_LIMIT) matchesCount += '+';
                    var matchesPosition = String(this._state.matchesPosition);
                    if (matchesPosition === '0') matchesPosition = '?';
                    label = _stringsJs.format(NLS_MATCHES_LOCATION, matchesPosition, matchesCount);
                } else label = NLS_NO_RESULTS;
                this._matchesCount.appendChild(document.createTextNode(label));
                _ariaJs.alert(this._getAriaLabel(label, this._state.currentMatch, this._state.searchString));
                MAX_MATCHES_COUNT_WIDTH = Math.max(MAX_MATCHES_COUNT_WIDTH, this._matchesCount.clientWidth);
            }
        },
        {
            // ----- actions
            key: "_getAriaLabel",
            value: function _getAriaLabel(label, currentMatch, searchString) {
                if (label === NLS_NO_RESULTS) return searchString === '' ? _nlsJs.localize('ariaSearchNoResultEmpty', "{0} found", label) : _nlsJs.localize('ariaSearchNoResult', "{0} found for '{1}'", label, searchString);
                if (currentMatch) {
                    var ariaLabel = _nlsJs.localize('ariaSearchNoResultWithLineNum', "{0} found for '{1}', at {2}", label, searchString, currentMatch.startLineNumber + ':' + currentMatch.startColumn);
                    var model = this._codeEditor.getModel();
                    if (model && currentMatch.startLineNumber <= model.getLineCount() && currentMatch.startLineNumber >= 1) {
                        var lineContent = model.getLineContent(currentMatch.startLineNumber);
                        return "".concat(lineContent, ", ").concat(ariaLabel);
                    }
                    return ariaLabel;
                }
                return _nlsJs.localize('ariaSearchNoResultWithLineNumNoCurrentMatch', "{0} found for '{1}'", label, searchString);
            }
        },
        {
            /**
     * If 'selection find' is ON we should not disable the button (its function is to cancel 'selection find').
     * If 'selection find' is OFF we enable the button only if there is a selection.
     */ key: "_updateToggleSelectionFindButton",
            value: function _updateToggleSelectionFindButton() {
                var selection = this._codeEditor.getSelection();
                var isSelection = selection ? selection.startLineNumber !== selection.endLineNumber || selection.startColumn !== selection.endColumn : false;
                var isChecked = this._toggleSelectionFind.checked;
                if (this._isVisible && (isChecked || isSelection)) this._toggleSelectionFind.enable();
                else this._toggleSelectionFind.disable();
            }
        },
        {
            key: "_updateButtons",
            value: function _updateButtons() {
                this._findInput.setEnabled(this._isVisible);
                this._replaceInput.setEnabled(this._isVisible && this._isReplaceVisible);
                this._updateToggleSelectionFindButton();
                this._closeBtn.setEnabled(this._isVisible);
                var findInputIsNonEmpty = this._state.searchString.length > 0;
                var matchesCount = this._state.matchesCount ? true : false;
                this._prevBtn.setEnabled(this._isVisible && findInputIsNonEmpty && matchesCount && this._state.canNavigateBack());
                this._nextBtn.setEnabled(this._isVisible && findInputIsNonEmpty && matchesCount && this._state.canNavigateForward());
                this._replaceBtn.setEnabled(this._isVisible && this._isReplaceVisible && findInputIsNonEmpty);
                this._replaceAllBtn.setEnabled(this._isVisible && this._isReplaceVisible && findInputIsNonEmpty);
                this._domNode.classList.toggle('replaceToggled', this._isReplaceVisible);
                this._toggleReplaceBtn.setExpanded(this._isReplaceVisible);
                var canReplace = !this._codeEditor.getOption(80 /* readOnly */ );
                this._toggleReplaceBtn.setEnabled(this._isVisible && canReplace);
            }
        },
        {
            key: "_reveal",
            value: function _reveal() {
                this._revealTimeouts.forEach(function(e) {
                    clearTimeout(e);
                });
                this._revealTimeouts = [];
                if (!this._isVisible) {
                    var _this = this;
                    this._isVisible = true;
                    var selection = this._codeEditor.getSelection();
                    switch(this._codeEditor.getOption(35 /* find */ ).autoFindInSelection){
                        case 'always':
                            this._toggleSelectionFind.checked = true;
                            break;
                        case 'never':
                            this._toggleSelectionFind.checked = false;
                            break;
                        case 'multiline':
                            var isSelectionMultipleLine = !!selection && selection.startLineNumber !== selection.endLineNumber;
                            this._toggleSelectionFind.checked = isSelectionMultipleLine;
                            break;
                        default:
                            break;
                    }
                    this._tryUpdateWidgetWidth();
                    this._updateButtons();
                    this._revealTimeouts.push(setTimeout(function() {
                        _this._domNode.classList.add('visible');
                        _this._domNode.setAttribute('aria-hidden', 'false');
                    }, 0));
                    // validate query again as it's being dismissed when we hide the find widget.
                    this._revealTimeouts.push(setTimeout(function() {
                        _this._findInput.validate();
                    }, 200));
                    this._codeEditor.layoutOverlayWidget(this);
                    var adjustEditorScrollTop = true;
                    if (this._codeEditor.getOption(35 /* find */ ).seedSearchStringFromSelection && selection) {
                        var domNode = this._codeEditor.getDomNode();
                        if (domNode) {
                            var editorCoords = _domJs.getDomNodePagePosition(domNode);
                            var startCoords = this._codeEditor.getScrolledVisiblePosition(selection.getStartPosition());
                            var startLeft = editorCoords.left + (startCoords ? startCoords.left : 0);
                            var startTop = startCoords ? startCoords.top : 0;
                            if (this._viewZone && startTop < this._viewZone.heightInPx) {
                                if (selection.endLineNumber > selection.startLineNumber) adjustEditorScrollTop = false;
                                var leftOfFindWidget = _domJs.getTopLeftOffset(this._domNode).left;
                                if (startLeft > leftOfFindWidget) adjustEditorScrollTop = false;
                                var endCoords = this._codeEditor.getScrolledVisiblePosition(selection.getEndPosition());
                                var endLeft = editorCoords.left + (endCoords ? endCoords.left : 0);
                                if (endLeft > leftOfFindWidget) adjustEditorScrollTop = false;
                            }
                        }
                    }
                    this._showViewZone(adjustEditorScrollTop);
                }
            }
        },
        {
            key: "_hide",
            value: function _hide(focusTheEditor) {
                this._revealTimeouts.forEach(function(e) {
                    clearTimeout(e);
                });
                this._revealTimeouts = [];
                if (this._isVisible) {
                    this._isVisible = false;
                    this._updateButtons();
                    this._domNode.classList.remove('visible');
                    this._domNode.setAttribute('aria-hidden', 'true');
                    this._findInput.clearMessage();
                    if (focusTheEditor) this._codeEditor.focus();
                    this._codeEditor.layoutOverlayWidget(this);
                    this._removeViewZone();
                }
            }
        },
        {
            key: "_layoutViewZone",
            value: function _layoutViewZone(targetScrollTop) {
                var _this = this;
                var addExtraSpaceOnTop = this._codeEditor.getOption(35 /* find */ ).addExtraSpaceOnTop;
                if (!addExtraSpaceOnTop) {
                    this._removeViewZone();
                    return;
                }
                if (!this._isVisible) return;
                var viewZone = this._viewZone;
                if (this._viewZoneId !== undefined || !viewZone) return;
                this._codeEditor.changeViewZones(function(accessor) {
                    viewZone.heightInPx = _this._getHeight();
                    _this._viewZoneId = accessor.addZone(viewZone);
                    // scroll top adjust to make sure the editor doesn't scroll when adding viewzone at the beginning.
                    _this._codeEditor.setScrollTop(targetScrollTop || _this._codeEditor.getScrollTop() + viewZone.heightInPx);
                });
            }
        },
        {
            key: "_showViewZone",
            value: function _showViewZone() {
                var adjustScroll = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
                var _this = this;
                if (!this._isVisible) return;
                var addExtraSpaceOnTop = this._codeEditor.getOption(35 /* find */ ).addExtraSpaceOnTop;
                if (!addExtraSpaceOnTop) return;
                if (this._viewZone === undefined) this._viewZone = new FindWidgetViewZone(0);
                var viewZone = this._viewZone;
                this._codeEditor.changeViewZones(function(accessor) {
                    if (_this._viewZoneId !== undefined) {
                        // the view zone already exists, we need to update the height
                        var newHeight = _this._getHeight();
                        if (newHeight === viewZone.heightInPx) return;
                        var scrollAdjustment = newHeight - viewZone.heightInPx;
                        viewZone.heightInPx = newHeight;
                        accessor.layoutZone(_this._viewZoneId);
                        if (adjustScroll) _this._codeEditor.setScrollTop(_this._codeEditor.getScrollTop() + scrollAdjustment);
                        return;
                    } else {
                        var scrollAdjustment1 = _this._getHeight();
                        // if the editor has top padding, factor that into the zone height
                        scrollAdjustment1 -= _this._codeEditor.getOption(74 /* padding */ ).top;
                        if (scrollAdjustment1 <= 0) return;
                        viewZone.heightInPx = scrollAdjustment1;
                        _this._viewZoneId = accessor.addZone(viewZone);
                        if (adjustScroll) _this._codeEditor.setScrollTop(_this._codeEditor.getScrollTop() + scrollAdjustment1);
                    }
                });
            }
        },
        {
            key: "_removeViewZone",
            value: function _removeViewZone() {
                var _this = this;
                this._codeEditor.changeViewZones(function(accessor) {
                    if (_this._viewZoneId !== undefined) {
                        accessor.removeZone(_this._viewZoneId);
                        _this._viewZoneId = undefined;
                        if (_this._viewZone) {
                            _this._codeEditor.setScrollTop(_this._codeEditor.getScrollTop() - _this._viewZone.heightInPx);
                            _this._viewZone = undefined;
                        }
                    }
                });
            }
        },
        {
            key: "_applyTheme",
            value: function _applyTheme(theme) {
                var inputStyles = {
                    inputActiveOptionBorder: theme.getColor(_colorRegistryJs.inputActiveOptionBorder),
                    inputActiveOptionBackground: theme.getColor(_colorRegistryJs.inputActiveOptionBackground),
                    inputActiveOptionForeground: theme.getColor(_colorRegistryJs.inputActiveOptionForeground),
                    inputBackground: theme.getColor(_colorRegistryJs.inputBackground),
                    inputForeground: theme.getColor(_colorRegistryJs.inputForeground),
                    inputBorder: theme.getColor(_colorRegistryJs.inputBorder),
                    inputValidationInfoBackground: theme.getColor(_colorRegistryJs.inputValidationInfoBackground),
                    inputValidationInfoForeground: theme.getColor(_colorRegistryJs.inputValidationInfoForeground),
                    inputValidationInfoBorder: theme.getColor(_colorRegistryJs.inputValidationInfoBorder),
                    inputValidationWarningBackground: theme.getColor(_colorRegistryJs.inputValidationWarningBackground),
                    inputValidationWarningForeground: theme.getColor(_colorRegistryJs.inputValidationWarningForeground),
                    inputValidationWarningBorder: theme.getColor(_colorRegistryJs.inputValidationWarningBorder),
                    inputValidationErrorBackground: theme.getColor(_colorRegistryJs.inputValidationErrorBackground),
                    inputValidationErrorForeground: theme.getColor(_colorRegistryJs.inputValidationErrorForeground),
                    inputValidationErrorBorder: theme.getColor(_colorRegistryJs.inputValidationErrorBorder)
                };
                this._findInput.style(inputStyles);
                this._replaceInput.style(inputStyles);
                this._toggleSelectionFind.style(inputStyles);
            }
        },
        {
            key: "_tryUpdateWidgetWidth",
            value: function _tryUpdateWidgetWidth() {
                if (!this._isVisible) return;
                if (!_domJs.isInDOM(this._domNode)) // the widget is not in the DOM
                return;
                var layoutInfo = this._codeEditor.getLayoutInfo();
                var editorContentWidth = layoutInfo.contentWidth;
                if (editorContentWidth <= 0) {
                    // for example, diff view original editor
                    this._domNode.classList.add('hiddenEditor');
                    return;
                } else if (this._domNode.classList.contains('hiddenEditor')) this._domNode.classList.remove('hiddenEditor');
                var editorWidth = layoutInfo.width;
                var minimapWidth = layoutInfo.minimap.minimapWidth;
                var collapsedFindWidget = false;
                var reducedFindWidget = false;
                var narrowFindWidget = false;
                if (this._resized) {
                    var widgetWidth = _domJs.getTotalWidth(this._domNode);
                    if (widgetWidth > FIND_WIDGET_INITIAL_WIDTH) {
                        // as the widget is resized by users, we may need to change the max width of the widget as the editor width changes.
                        this._domNode.style.maxWidth = "".concat(editorWidth - 28 - minimapWidth - 15, "px");
                        this._replaceInput.width = _domJs.getTotalWidth(this._findInput.domNode);
                        return;
                    }
                }
                if (FIND_WIDGET_INITIAL_WIDTH + 28 + minimapWidth >= editorWidth) reducedFindWidget = true;
                if (FIND_WIDGET_INITIAL_WIDTH + 28 + minimapWidth - MAX_MATCHES_COUNT_WIDTH >= editorWidth) narrowFindWidget = true;
                if (FIND_WIDGET_INITIAL_WIDTH + 28 + minimapWidth - MAX_MATCHES_COUNT_WIDTH >= editorWidth + 50) collapsedFindWidget = true;
                this._domNode.classList.toggle('collapsed-find-widget', collapsedFindWidget);
                this._domNode.classList.toggle('narrow-find-widget', narrowFindWidget);
                this._domNode.classList.toggle('reduced-find-widget', reducedFindWidget);
                if (!narrowFindWidget && !collapsedFindWidget) // the minimal left offset of findwidget is 15px.
                this._domNode.style.maxWidth = "".concat(editorWidth - 28 - minimapWidth - 15, "px");
                if (this._resized) {
                    this._findInput.inputBox.layout();
                    var findInputWidth = this._findInput.inputBox.element.clientWidth;
                    if (findInputWidth > 0) this._replaceInput.width = findInputWidth;
                } else if (this._isReplaceVisible) this._replaceInput.width = _domJs.getTotalWidth(this._findInput.domNode);
            }
        },
        {
            key: "_getHeight",
            value: function _getHeight() {
                var totalheight = 0;
                // find input margin top
                totalheight += 4;
                // find input height
                totalheight += this._findInput.inputBox.height + 2 /** input box border */ ;
                if (this._isReplaceVisible) {
                    // replace input margin
                    totalheight += 4;
                    totalheight += this._replaceInput.inputBox.height + 2 /** input box border */ ;
                }
                // margin bottom
                totalheight += 4;
                return totalheight;
            }
        },
        {
            key: "_tryUpdateHeight",
            value: function _tryUpdateHeight() {
                var totalHeight = this._getHeight();
                if (this._cachedHeight !== null && this._cachedHeight === totalHeight) return false;
                this._cachedHeight = totalHeight;
                this._domNode.style.height = "".concat(totalHeight, "px");
                return true;
            }
        },
        {
            // ----- Public
            key: "focusFindInput",
            value: function focusFindInput() {
                this._findInput.select();
                // Edge browser requires focus() in addition to select()
                this._findInput.focus();
            }
        },
        {
            key: "focusReplaceInput",
            value: function focusReplaceInput() {
                this._replaceInput.select();
                // Edge browser requires focus() in addition to select()
                this._replaceInput.focus();
            }
        },
        {
            key: "highlightFindOptions",
            value: function highlightFindOptions() {
                this._findInput.highlightFindOptions();
            }
        },
        {
            key: "_updateSearchScope",
            value: function _updateSearchScope() {
                if (!this._codeEditor.hasModel()) return;
                if (this._toggleSelectionFind.checked) {
                    var _this = this;
                    var selections = this._codeEditor.getSelections();
                    selections.map(function(selection) {
                        if (selection.endColumn === 1 && selection.endLineNumber > selection.startLineNumber) selection = selection.setEndPosition(selection.endLineNumber - 1, _this._codeEditor.getModel().getLineMaxColumn(selection.endLineNumber - 1));
                        var currentMatch = _this._state.currentMatch;
                        if (selection.startLineNumber !== selection.endLineNumber) {
                            if (!_rangeJs.Range.equalsRange(selection, currentMatch)) return selection;
                        }
                        return null;
                    }).filter(function(element) {
                        return !!element;
                    });
                    if (selections.length) this._state.change({
                        searchScope: selections
                    }, true);
                }
            }
        },
        {
            key: "_onFindInputMouseDown",
            value: function _onFindInputMouseDown(e) {
                // on linux, middle key does pasting.
                if (e.middleButton) e.stopPropagation();
            }
        },
        {
            key: "_onFindInputKeyDown",
            value: function _onFindInputKeyDown(e) {
                if (e.equals(ctrlKeyMod | 3 /* Enter */ )) {
                    if (this._keybindingService.dispatchEvent(e, e.target)) {
                        e.preventDefault();
                        return;
                    } else {
                        this._findInput.inputBox.insertAtCursor('\n');
                        e.preventDefault();
                        return;
                    }
                }
                if (e.equals(2 /* Tab */ )) {
                    if (this._isReplaceVisible) this._replaceInput.focus();
                    else this._findInput.focusOnCaseSensitive();
                    e.preventDefault();
                    return;
                }
                if (e.equals(2066 /* DownArrow */ )) {
                    this._codeEditor.focus();
                    e.preventDefault();
                    return;
                }
                if (e.equals(16 /* UpArrow */ )) return stopPropagationForMultiLineUpwards(e, this._findInput.getValue(), this._findInput.domNode.querySelector('textarea'));
                if (e.equals(18 /* DownArrow */ )) return stopPropagationForMultiLineDownwards(e, this._findInput.getValue(), this._findInput.domNode.querySelector('textarea'));
            }
        },
        {
            key: "_onReplaceInputKeyDown",
            value: function _onReplaceInputKeyDown(e) {
                if (e.equals(ctrlKeyMod | 3 /* Enter */ )) {
                    if (this._keybindingService.dispatchEvent(e, e.target)) {
                        e.preventDefault();
                        return;
                    } else {
                        if (_platformJs.isWindows && _platformJs.isNative && !this._ctrlEnterReplaceAllWarningPrompted) {
                            // this is the first time when users press Ctrl + Enter to replace all
                            this._notificationService.info(_nlsJs.localize('ctrlEnter.keybindingChanged', 'Ctrl+Enter now inserts line break instead of replacing all. You can modify the keybinding for editor.action.replaceAll to override this behavior.'));
                            this._ctrlEnterReplaceAllWarningPrompted = true;
                            this._storageService.store(ctrlEnterReplaceAllWarningPromptedKey, true, 0 /* GLOBAL */ , 0 /* USER */ );
                        }
                        this._replaceInput.inputBox.insertAtCursor('\n');
                        e.preventDefault();
                        return;
                    }
                }
                if (e.equals(2 /* Tab */ )) {
                    this._findInput.focusOnCaseSensitive();
                    e.preventDefault();
                    return;
                }
                if (e.equals(1026 /* Tab */ )) {
                    this._findInput.focus();
                    e.preventDefault();
                    return;
                }
                if (e.equals(2066 /* DownArrow */ )) {
                    this._codeEditor.focus();
                    e.preventDefault();
                    return;
                }
                if (e.equals(16 /* UpArrow */ )) return stopPropagationForMultiLineUpwards(e, this._replaceInput.inputBox.value, this._replaceInput.inputBox.element.querySelector('textarea'));
                if (e.equals(18 /* DownArrow */ )) return stopPropagationForMultiLineDownwards(e, this._replaceInput.inputBox.value, this._replaceInput.inputBox.element.querySelector('textarea'));
            }
        },
        {
            // ----- sash
            key: "getVerticalSashLeft",
            value: function getVerticalSashLeft(_sash) {
                return 0;
            }
        },
        {
            // ----- initialization
            key: "_keybindingLabelFor",
            value: function _keybindingLabelFor(actionId) {
                var kb = this._keybindingService.lookupKeybinding(actionId);
                if (!kb) return '';
                return " (".concat(kb.getLabel(), ")");
            }
        },
        {
            key: "_buildDomNode",
            value: function _buildDomNode() {
                var _this = this;
                var flexibleHeight = true;
                var flexibleWidth = true;
                // Find input
                this._findInput = this._register(new _contextScopedHistoryWidgetJs.ContextScopedFindInput(null, this._contextViewProvider, {
                    width: FIND_INPUT_AREA_WIDTH,
                    label: NLS_FIND_INPUT_LABEL,
                    placeholder: NLS_FIND_INPUT_PLACEHOLDER,
                    appendCaseSensitiveLabel: this._keybindingLabelFor(_findModelJs.FIND_IDS.ToggleCaseSensitiveCommand),
                    appendWholeWordsLabel: this._keybindingLabelFor(_findModelJs.FIND_IDS.ToggleWholeWordCommand),
                    appendRegexLabel: this._keybindingLabelFor(_findModelJs.FIND_IDS.ToggleRegexCommand),
                    validation: function(value) {
                        if (value.length === 0 || !_this._findInput.getRegex()) return null;
                        try {
                            // use `g` and `u` which are also used by the TextModel search
                            new RegExp(value, 'gu');
                            return null;
                        } catch (e) {
                            return {
                                content: e.message
                            };
                        }
                    },
                    flexibleHeight: flexibleHeight,
                    flexibleWidth: flexibleWidth,
                    flexibleMaxHeight: 118,
                    showHistoryHint: function() {
                        return _historyWidgetKeybindingHintJs.showHistoryKeybindingHint(_this._keybindingService);
                    }
                }, this._contextKeyService, true));
                this._findInput.setRegex(!!this._state.isRegex);
                this._findInput.setCaseSensitive(!!this._state.matchCase);
                this._findInput.setWholeWords(!!this._state.wholeWord);
                this._register(this._findInput.onKeyDown(function(e) {
                    return _this._onFindInputKeyDown(e);
                }));
                this._register(this._findInput.inputBox.onDidChange(function() {
                    if (_this._ignoreChangeEvent) return;
                    _this._state.change({
                        searchString: _this._findInput.getValue()
                    }, true);
                }));
                this._register(this._findInput.onDidOptionChange(function() {
                    _this._state.change({
                        isRegex: _this._findInput.getRegex(),
                        wholeWord: _this._findInput.getWholeWords(),
                        matchCase: _this._findInput.getCaseSensitive()
                    }, true);
                }));
                this._register(this._findInput.onCaseSensitiveKeyDown(function(e) {
                    if (e.equals(1026 /* Tab */ )) {
                        if (_this._isReplaceVisible) {
                            _this._replaceInput.focus();
                            e.preventDefault();
                        }
                    }
                }));
                this._register(this._findInput.onRegexKeyDown(function(e) {
                    if (e.equals(2 /* Tab */ )) {
                        if (_this._isReplaceVisible) {
                            _this._replaceInput.focusOnPreserve();
                            e.preventDefault();
                        }
                    }
                }));
                this._register(this._findInput.inputBox.onDidHeightChange(function(e) {
                    if (_this._tryUpdateHeight()) _this._showViewZone();
                }));
                if (_platformJs.isLinux) this._register(this._findInput.onMouseDown(function(e) {
                    return _this._onFindInputMouseDown(e);
                }));
                this._matchesCount = document.createElement('div');
                this._matchesCount.className = 'matchesCount';
                this._updateMatchesCount();
                // Previous button
                this._prevBtn = this._register(new SimpleButton({
                    label: NLS_PREVIOUS_MATCH_BTN_LABEL + this._keybindingLabelFor(_findModelJs.FIND_IDS.PreviousMatchFindAction),
                    icon: findPreviousMatchIcon,
                    onTrigger: function() {
                        _this._codeEditor.getAction(_findModelJs.FIND_IDS.PreviousMatchFindAction).run().then(undefined, _errorsJs.onUnexpectedError);
                    }
                }));
                // Next button
                this._nextBtn = this._register(new SimpleButton({
                    label: NLS_NEXT_MATCH_BTN_LABEL + this._keybindingLabelFor(_findModelJs.FIND_IDS.NextMatchFindAction),
                    icon: findNextMatchIcon,
                    onTrigger: function() {
                        _this._codeEditor.getAction(_findModelJs.FIND_IDS.NextMatchFindAction).run().then(undefined, _errorsJs.onUnexpectedError);
                    }
                }));
                var findPart = document.createElement('div');
                findPart.className = 'find-part';
                findPart.appendChild(this._findInput.domNode);
                var actionsContainer = document.createElement('div');
                actionsContainer.className = 'find-actions';
                findPart.appendChild(actionsContainer);
                actionsContainer.appendChild(this._matchesCount);
                actionsContainer.appendChild(this._prevBtn.domNode);
                actionsContainer.appendChild(this._nextBtn.domNode);
                // Toggle selection button
                this._toggleSelectionFind = this._register(new _checkboxJs.Checkbox({
                    icon: findSelectionIcon,
                    title: NLS_TOGGLE_SELECTION_FIND_TITLE + this._keybindingLabelFor(_findModelJs.FIND_IDS.ToggleSearchScopeCommand),
                    isChecked: false
                }));
                this._register(this._toggleSelectionFind.onChange(function() {
                    if (_this._toggleSelectionFind.checked) {
                        if (_this._codeEditor.hasModel()) {
                            var _this1 = _this;
                            var selections = _this._codeEditor.getSelections();
                            selections.map(function(selection) {
                                if (selection.endColumn === 1 && selection.endLineNumber > selection.startLineNumber) selection = selection.setEndPosition(selection.endLineNumber - 1, _this1._codeEditor.getModel().getLineMaxColumn(selection.endLineNumber - 1));
                                if (!selection.isEmpty()) return selection;
                                return null;
                            }).filter(function(element) {
                                return !!element;
                            });
                            if (selections.length) _this._state.change({
                                searchScope: selections
                            }, true);
                        }
                    } else _this._state.change({
                        searchScope: null
                    }, true);
                }));
                actionsContainer.appendChild(this._toggleSelectionFind.domNode);
                // Close button
                this._closeBtn = this._register(new SimpleButton({
                    label: NLS_CLOSE_BTN_LABEL + this._keybindingLabelFor(_findModelJs.FIND_IDS.CloseFindWidgetCommand),
                    icon: _iconRegistryJs.widgetClose,
                    onTrigger: function() {
                        _this._state.change({
                            isRevealed: false,
                            searchScope: null
                        }, false);
                    },
                    onKeyDown: function(e) {
                        if (e.equals(2 /* Tab */ )) {
                            if (_this._isReplaceVisible) {
                                if (_this._replaceBtn.isEnabled()) _this._replaceBtn.focus();
                                else _this._codeEditor.focus();
                                e.preventDefault();
                            }
                        }
                    }
                }));
                actionsContainer.appendChild(this._closeBtn.domNode);
                // Replace input
                this._replaceInput = this._register(new _contextScopedHistoryWidgetJs.ContextScopedReplaceInput(null, undefined, {
                    label: NLS_REPLACE_INPUT_LABEL,
                    placeholder: NLS_REPLACE_INPUT_PLACEHOLDER,
                    appendPreserveCaseLabel: this._keybindingLabelFor(_findModelJs.FIND_IDS.TogglePreserveCaseCommand),
                    history: [],
                    flexibleHeight: flexibleHeight,
                    flexibleWidth: flexibleWidth,
                    flexibleMaxHeight: 118,
                    showHistoryHint: function() {
                        return _historyWidgetKeybindingHintJs.showHistoryKeybindingHint(_this._keybindingService);
                    }
                }, this._contextKeyService, true));
                this._replaceInput.setPreserveCase(!!this._state.preserveCase);
                this._register(this._replaceInput.onKeyDown(function(e) {
                    return _this._onReplaceInputKeyDown(e);
                }));
                this._register(this._replaceInput.inputBox.onDidChange(function() {
                    _this._state.change({
                        replaceString: _this._replaceInput.inputBox.value
                    }, false);
                }));
                this._register(this._replaceInput.inputBox.onDidHeightChange(function(e) {
                    if (_this._isReplaceVisible && _this._tryUpdateHeight()) _this._showViewZone();
                }));
                this._register(this._replaceInput.onDidOptionChange(function() {
                    _this._state.change({
                        preserveCase: _this._replaceInput.getPreserveCase()
                    }, true);
                }));
                this._register(this._replaceInput.onPreserveCaseKeyDown(function(e) {
                    if (e.equals(2 /* Tab */ )) {
                        if (_this._prevBtn.isEnabled()) _this._prevBtn.focus();
                        else if (_this._nextBtn.isEnabled()) _this._nextBtn.focus();
                        else if (_this._toggleSelectionFind.enabled) _this._toggleSelectionFind.focus();
                        else if (_this._closeBtn.isEnabled()) _this._closeBtn.focus();
                        e.preventDefault();
                    }
                }));
                // Replace one button
                this._replaceBtn = this._register(new SimpleButton({
                    label: NLS_REPLACE_BTN_LABEL + this._keybindingLabelFor(_findModelJs.FIND_IDS.ReplaceOneAction),
                    icon: findReplaceIcon,
                    onTrigger: function() {
                        _this._controller.replace();
                    },
                    onKeyDown: function(e) {
                        if (e.equals(1026 /* Tab */ )) {
                            _this._closeBtn.focus();
                            e.preventDefault();
                        }
                    }
                }));
                // Replace all button
                this._replaceAllBtn = this._register(new SimpleButton({
                    label: NLS_REPLACE_ALL_BTN_LABEL + this._keybindingLabelFor(_findModelJs.FIND_IDS.ReplaceAllAction),
                    icon: findReplaceAllIcon,
                    onTrigger: function() {
                        _this._controller.replaceAll();
                    }
                }));
                var replacePart = document.createElement('div');
                replacePart.className = 'replace-part';
                replacePart.appendChild(this._replaceInput.domNode);
                var replaceActionsContainer = document.createElement('div');
                replaceActionsContainer.className = 'replace-actions';
                replacePart.appendChild(replaceActionsContainer);
                replaceActionsContainer.appendChild(this._replaceBtn.domNode);
                replaceActionsContainer.appendChild(this._replaceAllBtn.domNode);
                // Toggle replace button
                this._toggleReplaceBtn = this._register(new SimpleButton({
                    label: NLS_TOGGLE_REPLACE_MODE_BTN_LABEL,
                    className: 'codicon toggle left',
                    onTrigger: function() {
                        _this._state.change({
                            isReplaceRevealed: !_this._isReplaceVisible
                        }, false);
                        if (_this._isReplaceVisible) {
                            _this._replaceInput.width = _domJs.getTotalWidth(_this._findInput.domNode);
                            _this._replaceInput.inputBox.layout();
                        }
                        _this._showViewZone();
                    }
                }));
                this._toggleReplaceBtn.setExpanded(this._isReplaceVisible);
                // Widget
                this._domNode = document.createElement('div');
                this._domNode.className = 'editor-widget find-widget';
                this._domNode.setAttribute('aria-hidden', 'true');
                // We need to set this explicitly, otherwise on IE11, the width inheritence of flex doesn't work.
                this._domNode.style.width = "".concat(FIND_WIDGET_INITIAL_WIDTH, "px");
                this._domNode.appendChild(this._toggleReplaceBtn.domNode);
                this._domNode.appendChild(findPart);
                this._domNode.appendChild(replacePart);
                this._resizeSash = new _sashJs.Sash(this._domNode, this, {
                    orientation: 0 /* VERTICAL */ ,
                    size: 2
                });
                this._resized = false;
                var originalWidth = FIND_WIDGET_INITIAL_WIDTH;
                this._register(this._resizeSash.onDidStart(function() {
                    originalWidth = _domJs.getTotalWidth(_this._domNode);
                }));
                this._register(this._resizeSash.onDidChange(function(evt) {
                    _this._resized = true;
                    var width = originalWidth + evt.startX - evt.currentX;
                    if (width < FIND_WIDGET_INITIAL_WIDTH) // narrow down the find widget should be handled by CSS.
                    return;
                    var maxWidth = parseFloat(_domJs.getComputedStyle(_this._domNode).maxWidth) || 0;
                    if (width > maxWidth) return;
                    _this._domNode.style.width = "".concat(width, "px");
                    if (_this._isReplaceVisible) _this._replaceInput.width = _domJs.getTotalWidth(_this._findInput.domNode);
                    _this._findInput.inputBox.layout();
                    _this._tryUpdateHeight();
                }));
                this._register(this._resizeSash.onDidReset(function() {
                    // users double click on the sash
                    var currentWidth = _domJs.getTotalWidth(_this._domNode);
                    if (currentWidth < FIND_WIDGET_INITIAL_WIDTH) // The editor is narrow and the width of the find widget is controlled fully by CSS.
                    return;
                    var width = FIND_WIDGET_INITIAL_WIDTH;
                    if (!_this._resized || currentWidth === FIND_WIDGET_INITIAL_WIDTH) {
                        // 1. never resized before, double click should maximizes it
                        // 2. users resized it already but its width is the same as default
                        var layoutInfo = _this._codeEditor.getLayoutInfo();
                        width = layoutInfo.width - 28 - layoutInfo.minimap.minimapWidth - 15;
                        _this._resized = true;
                    }
                    _this._domNode.style.width = "".concat(width, "px");
                    if (_this._isReplaceVisible) _this._replaceInput.width = _domJs.getTotalWidth(_this._findInput.domNode);
                    _this._findInput.inputBox.layout();
                }));
            }
        },
        {
            key: "updateAccessibilitySupport",
            value: function updateAccessibilitySupport() {
                var value = this._codeEditor.getOption(2 /* accessibilitySupport */ );
                this._findInput.setFocusInputOnOptionClick(value !== 2 /* Enabled */ );
            }
        }
    ]);
    return FindWidget;
}(_widgetJs.Widget);
FindWidget.ID = 'editor.contrib.findWidget';
var SimpleButton = /*#__PURE__*/ function(Widget) {
    "use strict";
    _helpers.inherits(SimpleButton, Widget);
    var _super = _helpers.createSuper(SimpleButton);
    function SimpleButton(opts) {
        _helpers.classCallCheck(this, SimpleButton);
        var _this;
        _this = _super.call(this);
        _this._opts = opts;
        var className = 'button';
        if (_this._opts.className) className = className + ' ' + _this._opts.className;
        if (_this._opts.icon) className = className + ' ' + _themeServiceJs.ThemeIcon.asClassName(_this._opts.icon);
        _this._domNode = document.createElement('div');
        _this._domNode.title = _this._opts.label;
        _this._domNode.tabIndex = 0;
        _this._domNode.className = className;
        _this._domNode.setAttribute('role', 'button');
        _this._domNode.setAttribute('aria-label', _this._opts.label);
        _this.onclick(_this._domNode, function(e) {
            _this._opts.onTrigger();
            e.preventDefault();
        });
        _this.onkeydown(_this._domNode, function(e) {
            if (e.equals(10 /* Space */ ) || e.equals(3 /* Enter */ )) {
                _this._opts.onTrigger();
                e.preventDefault();
                return;
            }
            if (_this._opts.onKeyDown) _this._opts.onKeyDown(e);
        });
        return _this;
    }
    _helpers.createClass(SimpleButton, [
        {
            key: "domNode",
            get: function get() {
                return this._domNode;
            }
        },
        {
            key: "isEnabled",
            value: function isEnabled() {
                return this._domNode.tabIndex >= 0;
            }
        },
        {
            key: "focus",
            value: function focus() {
                this._domNode.focus();
            }
        },
        {
            key: "setEnabled",
            value: function setEnabled(enabled) {
                this._domNode.classList.toggle('disabled', !enabled);
                this._domNode.setAttribute('aria-disabled', String(!enabled));
                this._domNode.tabIndex = enabled ? 0 : -1;
            }
        },
        {
            key: "setExpanded",
            value: function setExpanded(expanded) {
                this._domNode.setAttribute('aria-expanded', String(!!expanded));
                if (expanded) {
                    var _classList, _classList1;
                    (_classList = this._domNode.classList).remove.apply(_classList, _helpers.toConsumableArray(_themeServiceJs.ThemeIcon.asClassNameArray(findCollapsedIcon)));
                    (_classList1 = this._domNode.classList).add.apply(_classList1, _helpers.toConsumableArray(_themeServiceJs.ThemeIcon.asClassNameArray(findExpandedIcon)));
                } else {
                    var _classList2, _classList3;
                    (_classList2 = this._domNode.classList).remove.apply(_classList2, _helpers.toConsumableArray(_themeServiceJs.ThemeIcon.asClassNameArray(findExpandedIcon)));
                    (_classList3 = this._domNode.classList).add.apply(_classList3, _helpers.toConsumableArray(_themeServiceJs.ThemeIcon.asClassNameArray(findCollapsedIcon)));
                }
            }
        }
    ]);
    return SimpleButton;
}(_widgetJs.Widget);
// theming
_themeServiceJs.registerThemingParticipant(function(theme, collector) {
    var addBackgroundColorRule = function(selector, color) {
        if (color) collector.addRule(".monaco-editor ".concat(selector, " { background-color: ").concat(color, "; }"));
    };
    addBackgroundColorRule('.findMatch', theme.getColor(_colorRegistryJs.editorFindMatchHighlight));
    addBackgroundColorRule('.currentFindMatch', theme.getColor(_colorRegistryJs.editorFindMatch));
    addBackgroundColorRule('.findScope', theme.getColor(_colorRegistryJs.editorFindRangeHighlight));
    var widgetBackground = theme.getColor(_colorRegistryJs.editorWidgetBackground);
    addBackgroundColorRule('.find-widget', widgetBackground);
    var widgetShadowColor = theme.getColor(_colorRegistryJs.widgetShadow);
    if (widgetShadowColor) collector.addRule(".monaco-editor .find-widget { box-shadow: 0 0 8px 2px ".concat(widgetShadowColor, "; }"));
    var findMatchHighlightBorder = theme.getColor(_colorRegistryJs.editorFindMatchHighlightBorder);
    if (findMatchHighlightBorder) collector.addRule(".monaco-editor .findMatch { border: 1px ".concat(theme.type === 'hc' ? 'dotted' : 'solid', " ").concat(findMatchHighlightBorder, "; box-sizing: border-box; }"));
    var findMatchBorder = theme.getColor(_colorRegistryJs.editorFindMatchBorder);
    if (findMatchBorder) collector.addRule(".monaco-editor .currentFindMatch { border: 2px solid ".concat(findMatchBorder, "; padding: 1px; box-sizing: border-box; }"));
    var findRangeHighlightBorder = theme.getColor(_colorRegistryJs.editorFindRangeHighlightBorder);
    if (findRangeHighlightBorder) collector.addRule(".monaco-editor .findScope { border: 1px ".concat(theme.type === 'hc' ? 'dashed' : 'solid', " ").concat(findRangeHighlightBorder, "; }"));
    var hcBorder = theme.getColor(_colorRegistryJs.contrastBorder);
    if (hcBorder) collector.addRule(".monaco-editor .find-widget { border: 1px solid ".concat(hcBorder, "; }"));
    var foreground = theme.getColor(_colorRegistryJs.editorWidgetForeground);
    if (foreground) collector.addRule(".monaco-editor .find-widget { color: ".concat(foreground, "; }"));
    var error = theme.getColor(_colorRegistryJs.errorForeground);
    if (error) collector.addRule(".monaco-editor .find-widget.no-results .matchesCount { color: ".concat(error, "; }"));
    var resizeBorderBackground = theme.getColor(_colorRegistryJs.editorWidgetResizeBorder);
    if (resizeBorderBackground) collector.addRule(".monaco-editor .find-widget .monaco-sash { background-color: ".concat(resizeBorderBackground, "; }"));
    else {
        var border = theme.getColor(_colorRegistryJs.editorWidgetBorder);
        if (border) collector.addRule(".monaco-editor .find-widget .monaco-sash { background-color: ".concat(border, "; }"));
    }
    // Action bars
    var toolbarHoverBackgroundColor = theme.getColor(_colorRegistryJs.toolbarHoverBackground);
    if (toolbarHoverBackgroundColor) collector.addRule("\n		.monaco-editor .find-widget .button:not(.disabled):hover,\n		.monaco-editor .find-widget .codicon-find-selection:hover {\n			background-color: ".concat(toolbarHoverBackgroundColor, " !important;\n		}\n	"));
    // This rule is used to override the outline color for synthetic-focus find input.
    var focusOutline = theme.getColor(_colorRegistryJs.focusBorder);
    if (focusOutline) collector.addRule(".monaco-editor .find-widget .monaco-inputbox.synthetic-focus { outline-color: ".concat(focusOutline, "; }"));
});

},{"@swc/helpers":"erO4s","regenerator-runtime":"12Ae8","../../../base/browser/dom.js":"bxmlc","../../../base/browser/ui/aria/aria.js":"8SLUe","../../../base/browser/ui/checkbox/checkbox.js":"8oSPd","../../../base/browser/ui/sash/sash.js":"bWRNP","../../../base/browser/ui/widget.js":"2HEtf","../../../base/common/async.js":"kMhSh","../../../base/common/codicons.js":"j24JC","../../../base/common/errors.js":"afm4i","../../../base/common/lifecycle.js":"bcbPy","../../../base/common/platform.js":"8pohV","../../../base/common/strings.js":"jsb6w","./findWidget.css":"2G1ZQ","../../common/core/range.js":"VbyL8","./findModel.js":"hkZgx","../../../nls.js":"9djYb","../../../platform/browser/contextScopedHistoryWidget.js":"efpU5","../../../platform/browser/historyWidgetKeybindingHint.js":"5HuPQ","../../../platform/theme/common/colorRegistry.js":"lKtxS","../../../platform/theme/common/iconRegistry.js":"evGtc","../../../platform/theme/common/themeService.js":"kE7QB","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"2G1ZQ":[function() {},{}],"efpU5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HistoryNavigationWidgetContext", function() {
    return HistoryNavigationWidgetContext;
});
parcelHelpers.export(exports, "createAndBindHistoryNavigationWidgetScopedContextKeyService", function() {
    return createAndBindHistoryNavigationWidgetScopedContextKeyService;
});
parcelHelpers.export(exports, "ContextScopedFindInput", function() {
    return ContextScopedFindInput;
});
parcelHelpers.export(exports, "ContextScopedReplaceInput", function() {
    return ContextScopedReplaceInput;
});
var _helpers = require("@swc/helpers");
var _findInputJs = require("../../base/browser/ui/findinput/findInput.js");
var _replaceInputJs = require("../../base/browser/ui/findinput/replaceInput.js");
var _contextkeyJs = require("../contextkey/common/contextkey.js");
var _keybindingsRegistryJs = require("../keybinding/common/keybindingsRegistry.js");
var _suggestJs = require("../../editor/contrib/suggest/suggest.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var HistoryNavigationWidgetContext = 'historyNavigationWidget';
var HistoryNavigationForwardsEnablementContext = 'historyNavigationForwardsEnabled';
var HistoryNavigationBackwardsEnablementContext = 'historyNavigationBackwardsEnabled';
function bindContextScopedWidget(contextKeyService, widget, contextKey) {
    new _contextkeyJs.RawContextKey(contextKey, widget).bindTo(contextKeyService);
}
function createWidgetScopedContextKeyService(contextKeyService, widget) {
    return contextKeyService.createScoped(widget.target);
}
function getContextScopedWidget(contextKeyService, contextKey) {
    return contextKeyService.getContext(document.activeElement).getValue(contextKey);
}
function createAndBindHistoryNavigationWidgetScopedContextKeyService(contextKeyService, widget) {
    var scopedContextKeyService = createWidgetScopedContextKeyService(contextKeyService, widget);
    bindContextScopedWidget(scopedContextKeyService, widget, HistoryNavigationWidgetContext);
    var historyNavigationForwardsEnablement = new _contextkeyJs.RawContextKey(HistoryNavigationForwardsEnablementContext, true).bindTo(scopedContextKeyService);
    var historyNavigationBackwardsEnablement = new _contextkeyJs.RawContextKey(HistoryNavigationBackwardsEnablementContext, true).bindTo(scopedContextKeyService);
    return {
        scopedContextKeyService: scopedContextKeyService,
        historyNavigationForwardsEnablement: historyNavigationForwardsEnablement,
        historyNavigationBackwardsEnablement: historyNavigationBackwardsEnablement
    };
}
var ContextScopedFindInput = /*#__PURE__*/ function(FindInput) {
    "use strict";
    _helpers.inherits(ContextScopedFindInput1, FindInput);
    var _super = _helpers.createSuper(ContextScopedFindInput1);
    function ContextScopedFindInput1(container, contextViewProvider, options, contextKeyService) {
        var showFindOptions = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
        _helpers.classCallCheck(this, ContextScopedFindInput1);
        var _this;
        _this = _super.call(this, container, contextViewProvider, showFindOptions, options);
        _this._register(createAndBindHistoryNavigationWidgetScopedContextKeyService(contextKeyService, {
            target: _this.inputBox.element,
            historyNavigator: _this.inputBox
        }).scopedContextKeyService);
        return _this;
    }
    return ContextScopedFindInput1;
}(_findInputJs.FindInput);
ContextScopedFindInput = __decorate([
    __param(3, _contextkeyJs.IContextKeyService)
], ContextScopedFindInput);
var ContextScopedReplaceInput = /*#__PURE__*/ function(ReplaceInput) {
    "use strict";
    _helpers.inherits(ContextScopedReplaceInput1, ReplaceInput);
    var _super = _helpers.createSuper(ContextScopedReplaceInput1);
    function ContextScopedReplaceInput1(container, contextViewProvider, options, contextKeyService) {
        var showReplaceOptions = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
        _helpers.classCallCheck(this, ContextScopedReplaceInput1);
        var _this;
        _this = _super.call(this, container, contextViewProvider, showReplaceOptions, options);
        _this._register(createAndBindHistoryNavigationWidgetScopedContextKeyService(contextKeyService, {
            target: _this.inputBox.element,
            historyNavigator: _this.inputBox
        }).scopedContextKeyService);
        return _this;
    }
    return ContextScopedReplaceInput1;
}(_replaceInputJs.ReplaceInput);
ContextScopedReplaceInput = __decorate([
    __param(3, _contextkeyJs.IContextKeyService)
], ContextScopedReplaceInput);
_keybindingsRegistryJs.KeybindingsRegistry.registerCommandAndKeybindingRule({
    id: 'history.showPrevious',
    weight: 200 /* WorkbenchContrib */ ,
    when: _contextkeyJs.ContextKeyExpr.and(_contextkeyJs.ContextKeyExpr.has(HistoryNavigationWidgetContext), _contextkeyJs.ContextKeyExpr.equals(HistoryNavigationBackwardsEnablementContext, true), _suggestJs.Context.Visible.isEqualTo(false)),
    primary: 16 /* UpArrow */ ,
    secondary: [
        528 /* UpArrow */ 
    ],
    handler: function(accessor) {
        var widget = getContextScopedWidget(accessor.get(_contextkeyJs.IContextKeyService), HistoryNavigationWidgetContext);
        if (widget) {
            var historyInputBox = widget.historyNavigator;
            historyInputBox.showPreviousValue();
        }
    }
});
_keybindingsRegistryJs.KeybindingsRegistry.registerCommandAndKeybindingRule({
    id: 'history.showNext',
    weight: 200 /* WorkbenchContrib */ ,
    when: _contextkeyJs.ContextKeyExpr.and(_contextkeyJs.ContextKeyExpr.has(HistoryNavigationWidgetContext), _contextkeyJs.ContextKeyExpr.equals(HistoryNavigationForwardsEnablementContext, true), _suggestJs.Context.Visible.isEqualTo(false)),
    primary: 18 /* DownArrow */ ,
    secondary: [
        530 /* DownArrow */ 
    ],
    handler: function(accessor) {
        var widget = getContextScopedWidget(accessor.get(_contextkeyJs.IContextKeyService), HistoryNavigationWidgetContext);
        if (widget) {
            var historyInputBox = widget.historyNavigator;
            historyInputBox.showNextValue();
        }
    }
});

},{"@swc/helpers":"erO4s","../../base/browser/ui/findinput/findInput.js":"aAA2b","../../base/browser/ui/findinput/replaceInput.js":"2Svtv","../contextkey/common/contextkey.js":"5cjav","../keybinding/common/keybindingsRegistry.js":"5cRx5","../../editor/contrib/suggest/suggest.js":"31aA1","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"aAA2b":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FindInput", function() {
    return FindInput;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _domJs = require("../../dom.js");
var _findInputCheckboxesJs = require("./findInputCheckboxes.js");
var _inputBoxJs = require("../inputbox/inputBox.js");
var _widgetJs = require("../widget.js");
var _eventJs = require("../../../common/event.js");
var _findInputCss = require("./findInput.css");
var _nlsJs = require("../../../../nls.js");
var NLS_DEFAULT_LABEL = _nlsJs.localize('defaultLabel', "input");
var FindInput = /*#__PURE__*/ function(Widget) {
    "use strict";
    _helpers.inherits(FindInput, Widget);
    var _super = _helpers.createSuper(FindInput);
    function FindInput(parent, contextViewProvider, _showOptionButtons, options) {
        _helpers.classCallCheck(this, FindInput);
        var _this;
        _this = _super.call(this);
        _this._showOptionButtons = _showOptionButtons;
        _this.fixFocusOnOptionClickEnabled = true;
        _this.imeSessionInProgress = false;
        _this._onDidOptionChange = _this._register(new _eventJs.Emitter());
        _this.onDidOptionChange = _this._onDidOptionChange.event;
        _this._onKeyDown = _this._register(new _eventJs.Emitter());
        _this.onKeyDown = _this._onKeyDown.event;
        _this._onMouseDown = _this._register(new _eventJs.Emitter());
        _this.onMouseDown = _this._onMouseDown.event;
        _this._onInput = _this._register(new _eventJs.Emitter());
        _this._onKeyUp = _this._register(new _eventJs.Emitter());
        _this._onCaseSensitiveKeyDown = _this._register(new _eventJs.Emitter());
        _this.onCaseSensitiveKeyDown = _this._onCaseSensitiveKeyDown.event;
        _this._onRegexKeyDown = _this._register(new _eventJs.Emitter());
        _this.onRegexKeyDown = _this._onRegexKeyDown.event;
        _this._lastHighlightFindOptions = 0;
        _this.contextViewProvider = contextViewProvider;
        _this.placeholder = options.placeholder || '';
        _this.validation = options.validation;
        _this.label = options.label || NLS_DEFAULT_LABEL;
        _this.inputActiveOptionBorder = options.inputActiveOptionBorder;
        _this.inputActiveOptionForeground = options.inputActiveOptionForeground;
        _this.inputActiveOptionBackground = options.inputActiveOptionBackground;
        _this.inputBackground = options.inputBackground;
        _this.inputForeground = options.inputForeground;
        _this.inputBorder = options.inputBorder;
        _this.inputValidationInfoBorder = options.inputValidationInfoBorder;
        _this.inputValidationInfoBackground = options.inputValidationInfoBackground;
        _this.inputValidationInfoForeground = options.inputValidationInfoForeground;
        _this.inputValidationWarningBorder = options.inputValidationWarningBorder;
        _this.inputValidationWarningBackground = options.inputValidationWarningBackground;
        _this.inputValidationWarningForeground = options.inputValidationWarningForeground;
        _this.inputValidationErrorBorder = options.inputValidationErrorBorder;
        _this.inputValidationErrorBackground = options.inputValidationErrorBackground;
        _this.inputValidationErrorForeground = options.inputValidationErrorForeground;
        var appendCaseSensitiveLabel = options.appendCaseSensitiveLabel || '';
        var appendWholeWordsLabel = options.appendWholeWordsLabel || '';
        var appendRegexLabel = options.appendRegexLabel || '';
        var history = options.history || [];
        var flexibleHeight = !!options.flexibleHeight;
        var flexibleWidth = !!options.flexibleWidth;
        var flexibleMaxHeight = options.flexibleMaxHeight;
        _this.domNode = document.createElement('div');
        _this.domNode.classList.add('monaco-findInput');
        _this.inputBox = _this._register(new _inputBoxJs.HistoryInputBox(_this.domNode, _this.contextViewProvider, {
            placeholder: _this.placeholder || '',
            ariaLabel: _this.label || '',
            validationOptions: {
                validation: _this.validation
            },
            inputBackground: _this.inputBackground,
            inputForeground: _this.inputForeground,
            inputBorder: _this.inputBorder,
            inputValidationInfoBackground: _this.inputValidationInfoBackground,
            inputValidationInfoForeground: _this.inputValidationInfoForeground,
            inputValidationInfoBorder: _this.inputValidationInfoBorder,
            inputValidationWarningBackground: _this.inputValidationWarningBackground,
            inputValidationWarningForeground: _this.inputValidationWarningForeground,
            inputValidationWarningBorder: _this.inputValidationWarningBorder,
            inputValidationErrorBackground: _this.inputValidationErrorBackground,
            inputValidationErrorForeground: _this.inputValidationErrorForeground,
            inputValidationErrorBorder: _this.inputValidationErrorBorder,
            history: history,
            showHistoryHint: options.showHistoryHint,
            flexibleHeight: flexibleHeight,
            flexibleWidth: flexibleWidth,
            flexibleMaxHeight: flexibleMaxHeight
        }));
        _this.regex = _this._register(new _findInputCheckboxesJs.RegexCheckbox({
            appendTitle: appendRegexLabel,
            isChecked: false,
            inputActiveOptionBorder: _this.inputActiveOptionBorder,
            inputActiveOptionForeground: _this.inputActiveOptionForeground,
            inputActiveOptionBackground: _this.inputActiveOptionBackground
        }));
        _this._register(_this.regex.onChange(function(viaKeyboard) {
            _this._onDidOptionChange.fire(viaKeyboard);
            if (!viaKeyboard && _this.fixFocusOnOptionClickEnabled) _this.inputBox.focus();
            _this.validate();
        }));
        _this._register(_this.regex.onKeyDown(function(e) {
            _this._onRegexKeyDown.fire(e);
        }));
        _this.wholeWords = _this._register(new _findInputCheckboxesJs.WholeWordsCheckbox({
            appendTitle: appendWholeWordsLabel,
            isChecked: false,
            inputActiveOptionBorder: _this.inputActiveOptionBorder,
            inputActiveOptionForeground: _this.inputActiveOptionForeground,
            inputActiveOptionBackground: _this.inputActiveOptionBackground
        }));
        _this._register(_this.wholeWords.onChange(function(viaKeyboard) {
            _this._onDidOptionChange.fire(viaKeyboard);
            if (!viaKeyboard && _this.fixFocusOnOptionClickEnabled) _this.inputBox.focus();
            _this.validate();
        }));
        _this.caseSensitive = _this._register(new _findInputCheckboxesJs.CaseSensitiveCheckbox({
            appendTitle: appendCaseSensitiveLabel,
            isChecked: false,
            inputActiveOptionBorder: _this.inputActiveOptionBorder,
            inputActiveOptionForeground: _this.inputActiveOptionForeground,
            inputActiveOptionBackground: _this.inputActiveOptionBackground
        }));
        _this._register(_this.caseSensitive.onChange(function(viaKeyboard) {
            _this._onDidOptionChange.fire(viaKeyboard);
            if (!viaKeyboard && _this.fixFocusOnOptionClickEnabled) _this.inputBox.focus();
            _this.validate();
        }));
        _this._register(_this.caseSensitive.onKeyDown(function(e) {
            _this._onCaseSensitiveKeyDown.fire(e);
        }));
        if (_this._showOptionButtons) _this.inputBox.paddingRight = _this.caseSensitive.width() + _this.wholeWords.width() + _this.regex.width();
        // Arrow-Key support to navigate between options
        var indexes = [
            _this.caseSensitive.domNode,
            _this.wholeWords.domNode,
            _this.regex.domNode
        ];
        _this.onkeydown(_this.domNode, function(event) {
            if (event.equals(15 /* LeftArrow */ ) || event.equals(17 /* RightArrow */ ) || event.equals(9 /* Escape */ )) {
                var index = indexes.indexOf(document.activeElement);
                if (index >= 0) {
                    var newIndex = -1;
                    if (event.equals(17 /* RightArrow */ )) newIndex = (index + 1) % indexes.length;
                    else if (event.equals(15 /* LeftArrow */ )) {
                        if (index === 0) newIndex = indexes.length - 1;
                        else newIndex = index - 1;
                    }
                    if (event.equals(9 /* Escape */ )) {
                        indexes[index].blur();
                        _this.inputBox.focus();
                    } else if (newIndex >= 0) indexes[newIndex].focus();
                    _domJs.EventHelper.stop(event, true);
                }
            }
        });
        var controls = document.createElement('div');
        controls.className = 'controls';
        controls.style.display = _this._showOptionButtons ? 'block' : 'none';
        controls.appendChild(_this.caseSensitive.domNode);
        controls.appendChild(_this.wholeWords.domNode);
        controls.appendChild(_this.regex.domNode);
        _this.domNode.appendChild(controls);
        if (parent) parent.appendChild(_this.domNode);
        _this._register(_domJs.addDisposableListener(_this.inputBox.inputElement, 'compositionstart', function(e) {
            _this.imeSessionInProgress = true;
        }));
        _this._register(_domJs.addDisposableListener(_this.inputBox.inputElement, 'compositionend', function(e) {
            _this.imeSessionInProgress = false;
            _this._onInput.fire();
        }));
        _this.onkeydown(_this.inputBox.inputElement, function(e) {
            return _this._onKeyDown.fire(e);
        });
        _this.onkeyup(_this.inputBox.inputElement, function(e) {
            return _this._onKeyUp.fire(e);
        });
        _this.oninput(_this.inputBox.inputElement, function(e) {
            return _this._onInput.fire();
        });
        _this.onmousedown(_this.inputBox.inputElement, function(e) {
            return _this._onMouseDown.fire(e);
        });
        return _this;
    }
    _helpers.createClass(FindInput, [
        {
            key: "enable",
            value: function enable() {
                this.domNode.classList.remove('disabled');
                this.inputBox.enable();
                this.regex.enable();
                this.wholeWords.enable();
                this.caseSensitive.enable();
            }
        },
        {
            key: "disable",
            value: function disable() {
                this.domNode.classList.add('disabled');
                this.inputBox.disable();
                this.regex.disable();
                this.wholeWords.disable();
                this.caseSensitive.disable();
            }
        },
        {
            key: "setFocusInputOnOptionClick",
            value: function setFocusInputOnOptionClick(value) {
                this.fixFocusOnOptionClickEnabled = value;
            }
        },
        {
            key: "setEnabled",
            value: function setEnabled(enabled) {
                if (enabled) this.enable();
                else this.disable();
            }
        },
        {
            key: "getValue",
            value: function getValue() {
                return this.inputBox.value;
            }
        },
        {
            key: "setValue",
            value: function setValue(value) {
                if (this.inputBox.value !== value) this.inputBox.value = value;
            }
        },
        {
            key: "style",
            value: function style(styles) {
                this.inputActiveOptionBorder = styles.inputActiveOptionBorder;
                this.inputActiveOptionForeground = styles.inputActiveOptionForeground;
                this.inputActiveOptionBackground = styles.inputActiveOptionBackground;
                this.inputBackground = styles.inputBackground;
                this.inputForeground = styles.inputForeground;
                this.inputBorder = styles.inputBorder;
                this.inputValidationInfoBackground = styles.inputValidationInfoBackground;
                this.inputValidationInfoForeground = styles.inputValidationInfoForeground;
                this.inputValidationInfoBorder = styles.inputValidationInfoBorder;
                this.inputValidationWarningBackground = styles.inputValidationWarningBackground;
                this.inputValidationWarningForeground = styles.inputValidationWarningForeground;
                this.inputValidationWarningBorder = styles.inputValidationWarningBorder;
                this.inputValidationErrorBackground = styles.inputValidationErrorBackground;
                this.inputValidationErrorForeground = styles.inputValidationErrorForeground;
                this.inputValidationErrorBorder = styles.inputValidationErrorBorder;
                this.applyStyles();
            }
        },
        {
            key: "applyStyles",
            value: function applyStyles() {
                if (this.domNode) {
                    var checkBoxStyles = {
                        inputActiveOptionBorder: this.inputActiveOptionBorder,
                        inputActiveOptionForeground: this.inputActiveOptionForeground,
                        inputActiveOptionBackground: this.inputActiveOptionBackground
                    };
                    this.regex.style(checkBoxStyles);
                    this.wholeWords.style(checkBoxStyles);
                    this.caseSensitive.style(checkBoxStyles);
                    var inputBoxStyles = {
                        inputBackground: this.inputBackground,
                        inputForeground: this.inputForeground,
                        inputBorder: this.inputBorder,
                        inputValidationInfoBackground: this.inputValidationInfoBackground,
                        inputValidationInfoForeground: this.inputValidationInfoForeground,
                        inputValidationInfoBorder: this.inputValidationInfoBorder,
                        inputValidationWarningBackground: this.inputValidationWarningBackground,
                        inputValidationWarningForeground: this.inputValidationWarningForeground,
                        inputValidationWarningBorder: this.inputValidationWarningBorder,
                        inputValidationErrorBackground: this.inputValidationErrorBackground,
                        inputValidationErrorForeground: this.inputValidationErrorForeground,
                        inputValidationErrorBorder: this.inputValidationErrorBorder
                    };
                    this.inputBox.style(inputBoxStyles);
                }
            }
        },
        {
            key: "select",
            value: function select() {
                this.inputBox.select();
            }
        },
        {
            key: "focus",
            value: function focus() {
                this.inputBox.focus();
            }
        },
        {
            key: "getCaseSensitive",
            value: function getCaseSensitive() {
                return this.caseSensitive.checked;
            }
        },
        {
            key: "setCaseSensitive",
            value: function setCaseSensitive(value) {
                this.caseSensitive.checked = value;
            }
        },
        {
            key: "getWholeWords",
            value: function getWholeWords() {
                return this.wholeWords.checked;
            }
        },
        {
            key: "setWholeWords",
            value: function setWholeWords(value) {
                this.wholeWords.checked = value;
            }
        },
        {
            key: "getRegex",
            value: function getRegex() {
                return this.regex.checked;
            }
        },
        {
            key: "setRegex",
            value: function setRegex(value) {
                this.regex.checked = value;
                this.validate();
            }
        },
        {
            key: "focusOnCaseSensitive",
            value: function focusOnCaseSensitive() {
                this.caseSensitive.focus();
            }
        },
        {
            key: "highlightFindOptions",
            value: function highlightFindOptions() {
                this.domNode.classList.remove('highlight-' + this._lastHighlightFindOptions);
                this._lastHighlightFindOptions = 1 - this._lastHighlightFindOptions;
                this.domNode.classList.add('highlight-' + this._lastHighlightFindOptions);
            }
        },
        {
            key: "validate",
            value: function validate() {
                this.inputBox.validate();
            }
        },
        {
            key: "clearMessage",
            value: function clearMessage() {
                this.inputBox.hideMessage();
            }
        }
    ]);
    return FindInput;
}(_widgetJs.Widget);

},{"@swc/helpers":"erO4s","../../dom.js":"bxmlc","./findInputCheckboxes.js":"dWMAH","../inputbox/inputBox.js":"fhlIP","../widget.js":"2HEtf","../../../common/event.js":"9IBcK","./findInput.css":"87xkL","../../../../nls.js":"9djYb","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"87xkL":[function() {},{}],"2Svtv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PreserveCaseCheckbox", function() {
    return PreserveCaseCheckbox;
});
parcelHelpers.export(exports, "ReplaceInput", function() {
    return ReplaceInput;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _domJs = require("../../dom.js");
var _checkboxJs = require("../checkbox/checkbox.js");
var _inputBoxJs = require("../inputbox/inputBox.js");
var _widgetJs = require("../widget.js");
var _codiconsJs = require("../../../common/codicons.js");
var _eventJs = require("../../../common/event.js");
var _findInputCss = require("./findInput.css");
var _nlsJs = require("../../../../nls.js");
var NLS_DEFAULT_LABEL = _nlsJs.localize('defaultLabel', "input");
var NLS_PRESERVE_CASE_LABEL = _nlsJs.localize('label.preserveCaseCheckbox', "Preserve Case");
var PreserveCaseCheckbox = /*#__PURE__*/ function(Checkbox) {
    "use strict";
    _helpers.inherits(PreserveCaseCheckbox, Checkbox);
    var _super = _helpers.createSuper(PreserveCaseCheckbox);
    function PreserveCaseCheckbox(opts) {
        _helpers.classCallCheck(this, PreserveCaseCheckbox);
        return _super.call(this, {
            // TODO: does this need its own icon?
            icon: _codiconsJs.Codicon.preserveCase,
            title: NLS_PRESERVE_CASE_LABEL + opts.appendTitle,
            isChecked: opts.isChecked,
            inputActiveOptionBorder: opts.inputActiveOptionBorder,
            inputActiveOptionForeground: opts.inputActiveOptionForeground,
            inputActiveOptionBackground: opts.inputActiveOptionBackground
        });
    }
    return PreserveCaseCheckbox;
}(_checkboxJs.Checkbox);
var ReplaceInput = /*#__PURE__*/ function(Widget) {
    "use strict";
    _helpers.inherits(ReplaceInput, Widget);
    var _super = _helpers.createSuper(ReplaceInput);
    function ReplaceInput(parent, contextViewProvider, _showOptionButtons, options) {
        _helpers.classCallCheck(this, ReplaceInput);
        var _this;
        _this = _super.call(this);
        _this._showOptionButtons = _showOptionButtons;
        _this.fixFocusOnOptionClickEnabled = true;
        _this.cachedOptionsWidth = 0;
        _this._onDidOptionChange = _this._register(new _eventJs.Emitter());
        _this.onDidOptionChange = _this._onDidOptionChange.event;
        _this._onKeyDown = _this._register(new _eventJs.Emitter());
        _this.onKeyDown = _this._onKeyDown.event;
        _this._onMouseDown = _this._register(new _eventJs.Emitter());
        _this._onInput = _this._register(new _eventJs.Emitter());
        _this._onKeyUp = _this._register(new _eventJs.Emitter());
        _this._onPreserveCaseKeyDown = _this._register(new _eventJs.Emitter());
        _this.onPreserveCaseKeyDown = _this._onPreserveCaseKeyDown.event;
        _this.contextViewProvider = contextViewProvider;
        _this.placeholder = options.placeholder || '';
        _this.validation = options.validation;
        _this.label = options.label || NLS_DEFAULT_LABEL;
        _this.inputActiveOptionBorder = options.inputActiveOptionBorder;
        _this.inputActiveOptionForeground = options.inputActiveOptionForeground;
        _this.inputActiveOptionBackground = options.inputActiveOptionBackground;
        _this.inputBackground = options.inputBackground;
        _this.inputForeground = options.inputForeground;
        _this.inputBorder = options.inputBorder;
        _this.inputValidationInfoBorder = options.inputValidationInfoBorder;
        _this.inputValidationInfoBackground = options.inputValidationInfoBackground;
        _this.inputValidationInfoForeground = options.inputValidationInfoForeground;
        _this.inputValidationWarningBorder = options.inputValidationWarningBorder;
        _this.inputValidationWarningBackground = options.inputValidationWarningBackground;
        _this.inputValidationWarningForeground = options.inputValidationWarningForeground;
        _this.inputValidationErrorBorder = options.inputValidationErrorBorder;
        _this.inputValidationErrorBackground = options.inputValidationErrorBackground;
        _this.inputValidationErrorForeground = options.inputValidationErrorForeground;
        var appendPreserveCaseLabel = options.appendPreserveCaseLabel || '';
        var history = options.history || [];
        var flexibleHeight = !!options.flexibleHeight;
        var flexibleWidth = !!options.flexibleWidth;
        var flexibleMaxHeight = options.flexibleMaxHeight;
        _this.domNode = document.createElement('div');
        _this.domNode.classList.add('monaco-findInput');
        _this.inputBox = _this._register(new _inputBoxJs.HistoryInputBox(_this.domNode, _this.contextViewProvider, {
            ariaLabel: _this.label || '',
            placeholder: _this.placeholder || '',
            validationOptions: {
                validation: _this.validation
            },
            inputBackground: _this.inputBackground,
            inputForeground: _this.inputForeground,
            inputBorder: _this.inputBorder,
            inputValidationInfoBackground: _this.inputValidationInfoBackground,
            inputValidationInfoForeground: _this.inputValidationInfoForeground,
            inputValidationInfoBorder: _this.inputValidationInfoBorder,
            inputValidationWarningBackground: _this.inputValidationWarningBackground,
            inputValidationWarningForeground: _this.inputValidationWarningForeground,
            inputValidationWarningBorder: _this.inputValidationWarningBorder,
            inputValidationErrorBackground: _this.inputValidationErrorBackground,
            inputValidationErrorForeground: _this.inputValidationErrorForeground,
            inputValidationErrorBorder: _this.inputValidationErrorBorder,
            history: history,
            showHistoryHint: options.showHistoryHint,
            flexibleHeight: flexibleHeight,
            flexibleWidth: flexibleWidth,
            flexibleMaxHeight: flexibleMaxHeight
        }));
        _this.preserveCase = _this._register(new PreserveCaseCheckbox({
            appendTitle: appendPreserveCaseLabel,
            isChecked: false,
            inputActiveOptionBorder: _this.inputActiveOptionBorder,
            inputActiveOptionForeground: _this.inputActiveOptionForeground,
            inputActiveOptionBackground: _this.inputActiveOptionBackground
        }));
        _this._register(_this.preserveCase.onChange(function(viaKeyboard) {
            _this._onDidOptionChange.fire(viaKeyboard);
            if (!viaKeyboard && _this.fixFocusOnOptionClickEnabled) _this.inputBox.focus();
            _this.validate();
        }));
        _this._register(_this.preserveCase.onKeyDown(function(e) {
            _this._onPreserveCaseKeyDown.fire(e);
        }));
        if (_this._showOptionButtons) _this.cachedOptionsWidth = _this.preserveCase.width();
        else _this.cachedOptionsWidth = 0;
        // Arrow-Key support to navigate between options
        var indexes = [
            _this.preserveCase.domNode
        ];
        _this.onkeydown(_this.domNode, function(event) {
            if (event.equals(15 /* LeftArrow */ ) || event.equals(17 /* RightArrow */ ) || event.equals(9 /* Escape */ )) {
                var index = indexes.indexOf(document.activeElement);
                if (index >= 0) {
                    var newIndex = -1;
                    if (event.equals(17 /* RightArrow */ )) newIndex = (index + 1) % indexes.length;
                    else if (event.equals(15 /* LeftArrow */ )) {
                        if (index === 0) newIndex = indexes.length - 1;
                        else newIndex = index - 1;
                    }
                    if (event.equals(9 /* Escape */ )) {
                        indexes[index].blur();
                        _this.inputBox.focus();
                    } else if (newIndex >= 0) indexes[newIndex].focus();
                    _domJs.EventHelper.stop(event, true);
                }
            }
        });
        var controls = document.createElement('div');
        controls.className = 'controls';
        controls.style.display = _this._showOptionButtons ? 'block' : 'none';
        controls.appendChild(_this.preserveCase.domNode);
        _this.domNode.appendChild(controls);
        if (parent) parent.appendChild(_this.domNode);
        _this.onkeydown(_this.inputBox.inputElement, function(e) {
            return _this._onKeyDown.fire(e);
        });
        _this.onkeyup(_this.inputBox.inputElement, function(e) {
            return _this._onKeyUp.fire(e);
        });
        _this.oninput(_this.inputBox.inputElement, function(e) {
            return _this._onInput.fire();
        });
        _this.onmousedown(_this.inputBox.inputElement, function(e) {
            return _this._onMouseDown.fire(e);
        });
        return _this;
    }
    _helpers.createClass(ReplaceInput, [
        {
            key: "enable",
            value: function enable() {
                this.domNode.classList.remove('disabled');
                this.inputBox.enable();
                this.preserveCase.enable();
            }
        },
        {
            key: "disable",
            value: function disable() {
                this.domNode.classList.add('disabled');
                this.inputBox.disable();
                this.preserveCase.disable();
            }
        },
        {
            key: "setEnabled",
            value: function setEnabled(enabled) {
                if (enabled) this.enable();
                else this.disable();
            }
        },
        {
            key: "style",
            value: function style(styles) {
                this.inputActiveOptionBorder = styles.inputActiveOptionBorder;
                this.inputActiveOptionForeground = styles.inputActiveOptionForeground;
                this.inputActiveOptionBackground = styles.inputActiveOptionBackground;
                this.inputBackground = styles.inputBackground;
                this.inputForeground = styles.inputForeground;
                this.inputBorder = styles.inputBorder;
                this.inputValidationInfoBackground = styles.inputValidationInfoBackground;
                this.inputValidationInfoForeground = styles.inputValidationInfoForeground;
                this.inputValidationInfoBorder = styles.inputValidationInfoBorder;
                this.inputValidationWarningBackground = styles.inputValidationWarningBackground;
                this.inputValidationWarningForeground = styles.inputValidationWarningForeground;
                this.inputValidationWarningBorder = styles.inputValidationWarningBorder;
                this.inputValidationErrorBackground = styles.inputValidationErrorBackground;
                this.inputValidationErrorForeground = styles.inputValidationErrorForeground;
                this.inputValidationErrorBorder = styles.inputValidationErrorBorder;
                this.applyStyles();
            }
        },
        {
            key: "applyStyles",
            value: function applyStyles() {
                if (this.domNode) {
                    var checkBoxStyles = {
                        inputActiveOptionBorder: this.inputActiveOptionBorder,
                        inputActiveOptionForeground: this.inputActiveOptionForeground,
                        inputActiveOptionBackground: this.inputActiveOptionBackground
                    };
                    this.preserveCase.style(checkBoxStyles);
                    var inputBoxStyles = {
                        inputBackground: this.inputBackground,
                        inputForeground: this.inputForeground,
                        inputBorder: this.inputBorder,
                        inputValidationInfoBackground: this.inputValidationInfoBackground,
                        inputValidationInfoForeground: this.inputValidationInfoForeground,
                        inputValidationInfoBorder: this.inputValidationInfoBorder,
                        inputValidationWarningBackground: this.inputValidationWarningBackground,
                        inputValidationWarningForeground: this.inputValidationWarningForeground,
                        inputValidationWarningBorder: this.inputValidationWarningBorder,
                        inputValidationErrorBackground: this.inputValidationErrorBackground,
                        inputValidationErrorForeground: this.inputValidationErrorForeground,
                        inputValidationErrorBorder: this.inputValidationErrorBorder
                    };
                    this.inputBox.style(inputBoxStyles);
                }
            }
        },
        {
            key: "select",
            value: function select() {
                this.inputBox.select();
            }
        },
        {
            key: "focus",
            value: function focus() {
                this.inputBox.focus();
            }
        },
        {
            key: "getPreserveCase",
            value: function getPreserveCase() {
                return this.preserveCase.checked;
            }
        },
        {
            key: "setPreserveCase",
            value: function setPreserveCase(value) {
                this.preserveCase.checked = value;
            }
        },
        {
            key: "focusOnPreserve",
            value: function focusOnPreserve() {
                this.preserveCase.focus();
            }
        },
        {
            key: "validate",
            value: function validate() {
                if (this.inputBox) this.inputBox.validate();
            }
        },
        {
            key: "width",
            set: function set(newWidth) {
                this.inputBox.paddingRight = this.cachedOptionsWidth;
                this.inputBox.width = newWidth;
                this.domNode.style.width = newWidth + 'px';
            }
        },
        {
            key: "dispose",
            value: function dispose() {
                _helpers.get(_helpers.getPrototypeOf(ReplaceInput.prototype), "dispose", this).call(this);
            }
        }
    ]);
    return ReplaceInput;
}(_widgetJs.Widget);

},{"@swc/helpers":"erO4s","../../dom.js":"bxmlc","../checkbox/checkbox.js":"8oSPd","../inputbox/inputBox.js":"fhlIP","../widget.js":"2HEtf","../../../common/codicons.js":"j24JC","../../../common/event.js":"9IBcK","./findInput.css":"87xkL","../../../../nls.js":"9djYb","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"87xkL":[function() {},{}],"5HuPQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ parcelHelpers.export(exports, "showHistoryKeybindingHint", function() {
    return showHistoryKeybindingHint;
});
function showHistoryKeybindingHint(keybindingService) {
    var _a, _b;
    return ((_a = keybindingService.lookupKeybinding('history.showPrevious')) === null || _a === void 0 ? void 0 : _a.getElectronAccelerator()) === 'Up' && ((_b = keybindingService.lookupKeybinding('history.showNext')) === null || _b === void 0 ? void 0 : _b.getElectronAccelerator()) === 'Down';
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"f2IpV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FoldingController", function() {
    return FoldingController;
});
parcelHelpers.export(exports, "foldBackgroundBackground", function() {
    return foldBackgroundBackground;
});
parcelHelpers.export(exports, "editorFoldForeground", function() {
    return editorFoldForeground;
});
var _helpers = require("@swc/helpers");
var _asyncJs = require("../../../base/common/async.js");
var _errorsJs = require("../../../base/common/errors.js");
var _keyCodesJs = require("../../../base/common/keyCodes.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _stringsJs = require("../../../base/common/strings.js");
var _typesJs = require("../../../base/common/types.js");
var _foldingCss = require("./folding.css");
var _editorStateJs = require("../../browser/core/editorState.js");
var _editorExtensionsJs = require("../../browser/editorExtensions.js");
var _editorContextKeysJs = require("../../common/editorContextKeys.js");
var _modesJs = require("../../common/modes.js");
var _languageConfigurationRegistryJs = require("../../common/modes/languageConfigurationRegistry.js");
var _foldingModelJs = require("./foldingModel.js");
var _hiddenRangeModelJs = require("./hiddenRangeModel.js");
var _indentRangeProviderJs = require("./indentRangeProvider.js");
var _intializingRangeProviderJs = require("./intializingRangeProvider.js");
var _nlsJs = require("../../../nls.js");
var _contextkeyJs = require("../../../platform/contextkey/common/contextkey.js");
var _colorRegistryJs = require("../../../platform/theme/common/colorRegistry.js");
var _themeServiceJs = require("../../../platform/theme/common/themeService.js");
var _foldingDecorationsJs = require("./foldingDecorations.js");
var _syntaxRangeProviderJs = require("./syntaxRangeProvider.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i1 = decorators.length - 1; i1 >= 0; i1--)if (d = decorators[i1]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var CONTEXT_FOLDING_ENABLED = new _contextkeyJs.RawContextKey('foldingEnabled', false);
var FoldingController = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(FoldingController1, Disposable);
    var _super = _helpers.createSuper(FoldingController1);
    function FoldingController1(editor, contextKeyService) {
        _helpers.classCallCheck(this, FoldingController1);
        var _this;
        _this = _super.call(this);
        _this.contextKeyService = contextKeyService;
        _this.localToDispose = _this._register(new _lifecycleJs.DisposableStore());
        _this.editor = editor;
        var options1 = _this.editor.getOptions();
        _this._isEnabled = options1.get(37 /* folding */ );
        _this._useFoldingProviders = options1.get(38 /* foldingStrategy */ ) !== 'indentation';
        _this._unfoldOnClickAfterEndOfLine = options1.get(41 /* unfoldOnClickAfterEndOfLine */ );
        _this._restoringViewState = false;
        _this._currentModelHasFoldedImports = false;
        _this._foldingImportsByDefault = options1.get(40 /* foldingImportsByDefault */ );
        _this.foldingModel = null;
        _this.hiddenRangeModel = null;
        _this.rangeProvider = null;
        _this.foldingRegionPromise = null;
        _this.foldingStateMemento = null;
        _this.foldingModelPromise = null;
        _this.updateScheduler = null;
        _this.cursorChangedScheduler = null;
        _this.mouseDownInfo = null;
        _this.foldingDecorationProvider = new _foldingDecorationsJs.FoldingDecorationProvider(editor);
        _this.foldingDecorationProvider.autoHideFoldingControls = options1.get(98 /* showFoldingControls */ ) === 'mouseover';
        _this.foldingDecorationProvider.showFoldingHighlights = options1.get(39 /* foldingHighlight */ );
        _this.foldingEnabled = CONTEXT_FOLDING_ENABLED.bindTo(_this.contextKeyService);
        _this.foldingEnabled.set(_this._isEnabled);
        _this._register(_this.editor.onDidChangeModel(function() {
            return _this.onModelChanged();
        }));
        _this._register(_this.editor.onDidChangeConfiguration(function(e) {
            if (e.hasChanged(37 /* folding */ )) {
                _this._isEnabled = _this.editor.getOptions().get(37 /* folding */ );
                _this.foldingEnabled.set(_this._isEnabled);
                _this.onModelChanged();
            }
            if (e.hasChanged(98 /* showFoldingControls */ ) || e.hasChanged(39 /* foldingHighlight */ )) {
                var options = _this.editor.getOptions();
                _this.foldingDecorationProvider.autoHideFoldingControls = options.get(98 /* showFoldingControls */ ) === 'mouseover';
                _this.foldingDecorationProvider.showFoldingHighlights = options.get(39 /* foldingHighlight */ );
                _this.triggerFoldingModelChanged();
            }
            if (e.hasChanged(38 /* foldingStrategy */ )) {
                _this._useFoldingProviders = _this.editor.getOptions().get(38 /* foldingStrategy */ ) !== 'indentation';
                _this.onFoldingStrategyChanged();
            }
            if (e.hasChanged(41 /* unfoldOnClickAfterEndOfLine */ )) _this._unfoldOnClickAfterEndOfLine = _this.editor.getOptions().get(41 /* unfoldOnClickAfterEndOfLine */ );
            if (e.hasChanged(40 /* foldingImportsByDefault */ )) _this._foldingImportsByDefault = _this.editor.getOptions().get(40 /* foldingImportsByDefault */ );
        }));
        _this.onModelChanged();
        return _this;
    }
    _helpers.createClass(FoldingController1, [
        {
            /**
     * Store view state.
     */ key: "saveViewState",
            value: function saveViewState() {
                var model = this.editor.getModel();
                if (!model || !this._isEnabled || model.isTooLargeForTokenization()) return {};
                if (this.foldingModel) {
                    var collapsedRegions = this.foldingModel.isInitialized ? this.foldingModel.getMemento() : this.hiddenRangeModel.getMemento();
                    var provider = this.rangeProvider ? this.rangeProvider.id : undefined;
                    return {
                        collapsedRegions: collapsedRegions,
                        lineCount: model.getLineCount(),
                        provider: provider,
                        foldedImports: this._currentModelHasFoldedImports
                    };
                }
                return undefined;
            }
        },
        {
            /**
     * Restore view state.
     */ key: "restoreViewState",
            value: function restoreViewState(state) {
                var model = this.editor.getModel();
                if (!model || !this._isEnabled || model.isTooLargeForTokenization() || !this.hiddenRangeModel) return;
                if (!state || state.lineCount !== model.getLineCount()) return;
                this._currentModelHasFoldedImports = !!state.foldedImports;
                if (!state.collapsedRegions) return;
                if (state.provider === _syntaxRangeProviderJs.ID_SYNTAX_PROVIDER || state.provider === _intializingRangeProviderJs.ID_INIT_PROVIDER) this.foldingStateMemento = state;
                var collapsedRegions = state.collapsedRegions;
                // set the hidden ranges right away, before waiting for the folding model.
                if (this.hiddenRangeModel.applyMemento(collapsedRegions)) {
                    var _this = this;
                    var foldingModel1 = this.getFoldingModel();
                    if (foldingModel1) foldingModel1.then(function(foldingModel) {
                        if (foldingModel) {
                            _this._restoringViewState = true;
                            try {
                                foldingModel.applyMemento(collapsedRegions);
                            } finally{
                                _this._restoringViewState = false;
                            }
                        }
                    }).then(undefined, _errorsJs.onUnexpectedError);
                }
            }
        },
        {
            key: "onModelChanged",
            value: function onModelChanged() {
                var _this = this;
                this.localToDispose.clear();
                var model = this.editor.getModel();
                if (!this._isEnabled || !model || model.isTooLargeForTokenization()) // huge files get no view model, so they cannot support hidden areas
                return;
                this._currentModelHasFoldedImports = false;
                this.foldingModel = new _foldingModelJs.FoldingModel(model, this.foldingDecorationProvider);
                this.localToDispose.add(this.foldingModel);
                this.hiddenRangeModel = new _hiddenRangeModelJs.HiddenRangeModel(this.foldingModel);
                this.localToDispose.add(this.hiddenRangeModel);
                this.localToDispose.add(this.hiddenRangeModel.onDidChange(function(hr) {
                    return _this.onHiddenRangesChanges(hr);
                }));
                this.updateScheduler = new _asyncJs.Delayer(200);
                this.cursorChangedScheduler = new _asyncJs.RunOnceScheduler(function() {
                    return _this.revealCursor();
                }, 200);
                this.localToDispose.add(this.cursorChangedScheduler);
                this.localToDispose.add(_modesJs.FoldingRangeProviderRegistry.onDidChange(function() {
                    return _this.onFoldingStrategyChanged();
                }));
                this.localToDispose.add(this.editor.onDidChangeModelLanguageConfiguration(function() {
                    return _this.onFoldingStrategyChanged();
                })); // covers model language changes as well
                this.localToDispose.add(this.editor.onDidChangeModelContent(function(e) {
                    return _this.onDidChangeModelContent(e);
                }));
                this.localToDispose.add(this.editor.onDidChangeCursorPosition(function() {
                    return _this.onCursorPositionChanged();
                }));
                this.localToDispose.add(this.editor.onMouseDown(function(e) {
                    return _this.onEditorMouseDown(e);
                }));
                this.localToDispose.add(this.editor.onMouseUp(function(e) {
                    return _this.onEditorMouseUp(e);
                }));
                this.localToDispose.add({
                    dispose: function() {
                        if (_this.foldingRegionPromise) {
                            _this.foldingRegionPromise.cancel();
                            _this.foldingRegionPromise = null;
                        }
                        if (_this.updateScheduler) _this.updateScheduler.cancel();
                        _this.updateScheduler = null;
                        _this.foldingModel = null;
                        _this.foldingModelPromise = null;
                        _this.hiddenRangeModel = null;
                        _this.cursorChangedScheduler = null;
                        _this.foldingStateMemento = null;
                        if (_this.rangeProvider) _this.rangeProvider.dispose();
                        _this.rangeProvider = null;
                    }
                });
                this.triggerFoldingModelChanged();
            }
        },
        {
            key: "onFoldingStrategyChanged",
            value: function onFoldingStrategyChanged() {
                if (this.rangeProvider) this.rangeProvider.dispose();
                this.rangeProvider = null;
                this.triggerFoldingModelChanged();
            }
        },
        {
            key: "getRangeProvider",
            value: function getRangeProvider(editorModel) {
                if (this.rangeProvider) return this.rangeProvider;
                this.rangeProvider = new _indentRangeProviderJs.IndentRangeProvider(editorModel); // fallback
                if (this._useFoldingProviders && this.foldingModel) {
                    var _this = this;
                    var foldingProviders = _modesJs.FoldingRangeProviderRegistry.ordered(this.foldingModel.textModel);
                    if (foldingProviders.length === 0 && this.foldingStateMemento && this.foldingStateMemento.collapsedRegions) {
                        var _this1 = this;
                        var rangeProvider = this.rangeProvider = new _intializingRangeProviderJs.InitializingRangeProvider(editorModel, this.foldingStateMemento.collapsedRegions, function() {
                            // if after 30 the InitializingRangeProvider is still not replaced, force a refresh
                            _this1.foldingStateMemento = null;
                            _this1.onFoldingStrategyChanged();
                        }, 30000);
                        return rangeProvider; // keep memento in case there are still no foldingProviders on the next request.
                    } else if (foldingProviders.length > 0) this.rangeProvider = new _syntaxRangeProviderJs.SyntaxRangeProvider(editorModel, foldingProviders, function() {
                        return _this.triggerFoldingModelChanged();
                    });
                }
                this.foldingStateMemento = null;
                return this.rangeProvider;
            }
        },
        {
            key: "getFoldingModel",
            value: function getFoldingModel() {
                return this.foldingModelPromise;
            }
        },
        {
            key: "onDidChangeModelContent",
            value: function onDidChangeModelContent(e) {
                var _a;
                (_a = this.hiddenRangeModel) === null || _a === void 0 || _a.notifyChangeModelContent(e);
                this.triggerFoldingModelChanged();
            }
        },
        {
            key: "triggerFoldingModelChanged",
            value: function triggerFoldingModelChanged() {
                if (this.updateScheduler) {
                    var _this = this;
                    if (this.foldingRegionPromise) {
                        this.foldingRegionPromise.cancel();
                        this.foldingRegionPromise = null;
                    }
                    this.foldingModelPromise = this.updateScheduler.trigger(function() {
                        var _this2 = _this;
                        var foldingModel = _this.foldingModel;
                        if (!foldingModel) return null;
                        var provider = _this.getRangeProvider(foldingModel.textModel);
                        var foldingRegionPromise = _this.foldingRegionPromise = _asyncJs.createCancelablePromise(function(token) {
                            return provider.compute(token);
                        });
                        return foldingRegionPromise.then(function(foldingRanges) {
                            if (foldingRanges && foldingRegionPromise === _this2.foldingRegionPromise) {
                                var scrollState;
                                if (_this2._foldingImportsByDefault && !_this2._currentModelHasFoldedImports) {
                                    var hasChanges = foldingRanges.setCollapsedAllOfType(_modesJs.FoldingRangeKind.Imports.value, true);
                                    if (hasChanges) {
                                        scrollState = _editorStateJs.StableEditorScrollState.capture(_this2.editor);
                                        _this2._currentModelHasFoldedImports = hasChanges;
                                    }
                                }
                                // some cursors might have moved into hidden regions, make sure they are in expanded regions
                                var selections = _this2.editor.getSelections();
                                var selectionLineNumbers = selections ? selections.map(function(s) {
                                    return s.startLineNumber;
                                }) : [];
                                foldingModel.update(foldingRanges, selectionLineNumbers);
                                if (scrollState) scrollState.restore(_this2.editor);
                            }
                            return foldingModel;
                        });
                    }).then(undefined, function(err) {
                        _errorsJs.onUnexpectedError(err);
                        return null;
                    });
                }
            }
        },
        {
            key: "onHiddenRangesChanges",
            value: function onHiddenRangesChanges(hiddenRanges) {
                if (this.hiddenRangeModel && hiddenRanges.length && !this._restoringViewState) {
                    var selections = this.editor.getSelections();
                    if (selections) {
                        if (this.hiddenRangeModel.adjustSelections(selections)) this.editor.setSelections(selections);
                    }
                }
                this.editor.setHiddenAreas(hiddenRanges);
            }
        },
        {
            key: "onCursorPositionChanged",
            value: function onCursorPositionChanged() {
                if (this.hiddenRangeModel && this.hiddenRangeModel.hasRanges()) this.cursorChangedScheduler.schedule();
            }
        },
        {
            key: "revealCursor",
            value: function revealCursor() {
                var _this = this;
                var foldingModel3 = this.getFoldingModel();
                if (!foldingModel3) return;
                foldingModel3.then(function(foldingModel) {
                    if (foldingModel) {
                        var selections = _this.editor.getSelections();
                        if (selections && selections.length > 0) {
                            var toToggle = [];
                            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                            try {
                                var _loop = function(_iterator, _step) {
                                    var selection = _step.value;
                                    var _toToggle;
                                    var lineNumber = selection.selectionStartLineNumber;
                                    if (_this.hiddenRangeModel && _this.hiddenRangeModel.isHidden(lineNumber)) (_toToggle = toToggle).push.apply(_toToggle, _helpers.toConsumableArray(foldingModel.getAllRegionsAtLine(lineNumber, function(r) {
                                        return r.isCollapsed && lineNumber > r.startLineNumber;
                                    })));
                                };
                                for(var _iterator = selections[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop(_iterator, _step);
                            } catch (err) {
                                _didIteratorError = true;
                                _iteratorError = err;
                            } finally{
                                try {
                                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                                        _iterator.return();
                                    }
                                } finally{
                                    if (_didIteratorError) {
                                        throw _iteratorError;
                                    }
                                }
                            }
                            if (toToggle.length) {
                                foldingModel.toggleCollapseState(toToggle);
                                _this.reveal(selections[0].getPosition());
                            }
                        }
                    }
                }).then(undefined, _errorsJs.onUnexpectedError);
            }
        },
        {
            key: "onEditorMouseDown",
            value: function onEditorMouseDown(e) {
                this.mouseDownInfo = null;
                if (!this.hiddenRangeModel || !e.target || !e.target.range) return;
                if (!e.event.leftButton && !e.event.middleButton) return;
                var range = e.target.range;
                var iconClicked = false;
                switch(e.target.type){
                    case 4 /* GUTTER_LINE_DECORATIONS */ :
                        var data = e.target.detail;
                        var offsetLeftInGutter = e.target.element.offsetLeft;
                        var gutterOffsetX = data.offsetX - offsetLeftInGutter;
                        // const gutterOffsetX = data.offsetX - data.glyphMarginWidth - data.lineNumbersWidth - data.glyphMarginLeft;
                        // TODO@joao TODO@alex TODO@martin this is such that we don't collide with dirty diff
                        if (gutterOffsetX < 5) return;
                        iconClicked = true;
                        break;
                    case 7 /* CONTENT_EMPTY */ :
                        if (this._unfoldOnClickAfterEndOfLine && this.hiddenRangeModel.hasRanges()) {
                            var data1 = e.target.detail;
                            if (!data1.isAfterLines) break;
                        }
                        return;
                    case 6 /* CONTENT_TEXT */ :
                        if (this.hiddenRangeModel.hasRanges()) {
                            var model = this.editor.getModel();
                            if (model && range.startColumn === model.getLineMaxColumn(range.startLineNumber)) break;
                        }
                        return;
                    default:
                        return;
                }
                this.mouseDownInfo = {
                    lineNumber: range.startLineNumber,
                    iconClicked: iconClicked
                };
            }
        },
        {
            key: "onEditorMouseUp",
            value: function onEditorMouseUp(e) {
                var _this = this;
                var foldingModel4 = this.getFoldingModel();
                if (!foldingModel4 || !this.mouseDownInfo || !e.target) return;
                var lineNumber = this.mouseDownInfo.lineNumber;
                var iconClicked = this.mouseDownInfo.iconClicked;
                var range = e.target.range;
                if (!range || range.startLineNumber !== lineNumber) return;
                if (iconClicked) {
                    if (e.target.type !== 4 /* GUTTER_LINE_DECORATIONS */ ) return;
                } else {
                    var model = this.editor.getModel();
                    if (!model || range.startColumn !== model.getLineMaxColumn(lineNumber)) return;
                }
                foldingModel4.then(function(foldingModel) {
                    if (foldingModel) {
                        var region = foldingModel.getRegionAtLine(lineNumber);
                        if (region && region.startLineNumber === lineNumber) {
                            var isCollapsed = region.isCollapsed;
                            if (iconClicked || isCollapsed) {
                                var surrounding = e.event.altKey;
                                var toToggle = [];
                                if (surrounding) {
                                    var filter = function(otherRegion) {
                                        return !otherRegion.containedBy(region) && !region.containedBy(otherRegion);
                                    };
                                    var toMaybeToggle = foldingModel.getRegionsInside(null, filter);
                                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                                    try {
                                        for(var _iterator = toMaybeToggle[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                                            var r = _step.value;
                                            if (r.isCollapsed) toToggle.push(r);
                                        }
                                    } catch (err) {
                                        _didIteratorError = true;
                                        _iteratorError = err;
                                    } finally{
                                        try {
                                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                                _iterator.return();
                                            }
                                        } finally{
                                            if (_didIteratorError) {
                                                throw _iteratorError;
                                            }
                                        }
                                    }
                                    // if any surrounding regions are folded, unfold those. Otherwise, fold all surrounding
                                    if (toToggle.length === 0) toToggle = toMaybeToggle;
                                } else {
                                    var recursive = e.event.middleButton || e.event.shiftKey;
                                    if (recursive) {
                                        var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                                        try {
                                            for(var _iterator1 = foldingModel.getRegionsInside(region)[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                                                var r1 = _step1.value;
                                                if (r1.isCollapsed === isCollapsed) toToggle.push(r1);
                                            }
                                        } catch (err) {
                                            _didIteratorError1 = true;
                                            _iteratorError1 = err;
                                        } finally{
                                            try {
                                                if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                                                    _iterator1.return();
                                                }
                                            } finally{
                                                if (_didIteratorError1) {
                                                    throw _iteratorError1;
                                                }
                                            }
                                        }
                                    }
                                    // when recursive, first only collapse all children. If all are already folded or there are no children, also fold parent.
                                    if (isCollapsed || !recursive || toToggle.length === 0) toToggle.push(region);
                                }
                                foldingModel.toggleCollapseState(toToggle);
                                _this.reveal({
                                    lineNumber: lineNumber,
                                    column: 1
                                });
                            }
                        }
                    }
                }).then(undefined, _errorsJs.onUnexpectedError);
            }
        },
        {
            key: "reveal",
            value: function reveal(position) {
                this.editor.revealPositionInCenterIfOutsideViewport(position, 0 /* Smooth */ );
            }
        }
    ], [
        {
            key: "get",
            value: function get(editor) {
                return editor.getContribution(FoldingController1.ID);
            }
        }
    ]);
    return FoldingController1;
}(_lifecycleJs.Disposable);
FoldingController.ID = 'editor.contrib.folding';
FoldingController = __decorate([
    __param(1, _contextkeyJs.IContextKeyService)
], FoldingController);
var FoldingAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(FoldingAction, EditorAction);
    var _super = _helpers.createSuper(FoldingAction);
    function FoldingAction() {
        _helpers.classCallCheck(this, FoldingAction);
        return _super.apply(this, arguments);
    }
    _helpers.createClass(FoldingAction, [
        {
            key: "runEditorCommand",
            value: function runEditorCommand(accessor, editor, args) {
                var foldingController = FoldingController.get(editor);
                if (!foldingController) return;
                var foldingModelPromise = foldingController.getFoldingModel();
                if (foldingModelPromise) {
                    var _this = this;
                    this.reportTelemetry(accessor, editor);
                    return foldingModelPromise.then(function(foldingModel) {
                        if (foldingModel) {
                            _this.invoke(foldingController, foldingModel, editor, args);
                            var selection = editor.getSelection();
                            if (selection) foldingController.reveal(selection.getStartPosition());
                        }
                    });
                }
            }
        },
        {
            key: "getSelectedLines",
            value: function getSelectedLines(editor) {
                var selections = editor.getSelections();
                return selections ? selections.map(function(s) {
                    return s.startLineNumber;
                }) : [];
            }
        },
        {
            key: "getLineNumbers",
            value: function getLineNumbers(args, editor) {
                if (args && args.selectionLines) return args.selectionLines.map(function(l) {
                    return l + 1;
                }); // to 0-bases line numbers
                return this.getSelectedLines(editor);
            }
        },
        {
            key: "run",
            value: function run(_accessor, _editor) {}
        }
    ]);
    return FoldingAction;
}(_editorExtensionsJs.EditorAction);
function foldingArgumentsConstraint(args) {
    if (!_typesJs.isUndefined(args)) {
        if (!_typesJs.isObject(args)) return false;
        var foldingArgs = args;
        if (!_typesJs.isUndefined(foldingArgs.levels) && !_typesJs.isNumber(foldingArgs.levels)) return false;
        if (!_typesJs.isUndefined(foldingArgs.direction) && !_typesJs.isString(foldingArgs.direction)) return false;
        if (!_typesJs.isUndefined(foldingArgs.selectionLines) && (!_typesJs.isArray(foldingArgs.selectionLines) || !foldingArgs.selectionLines.every(_typesJs.isNumber))) return false;
    }
    return true;
}
var UnfoldAction = /*#__PURE__*/ function(FoldingAction) {
    "use strict";
    _helpers.inherits(UnfoldAction, FoldingAction);
    var _super = _helpers.createSuper(UnfoldAction);
    function UnfoldAction() {
        _helpers.classCallCheck(this, UnfoldAction);
        return _super.call(this, {
            id: 'editor.unfold',
            label: _nlsJs.localize('unfoldAction.label', "Unfold"),
            alias: 'Unfold',
            precondition: CONTEXT_FOLDING_ENABLED,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: 3161 /* BracketRight */ ,
                mac: {
                    primary: 2649 /* BracketRight */ 
                },
                weight: 100 /* EditorContrib */ 
            },
            description: {
                description: 'Unfold the content in the editor',
                args: [
                    {
                        name: 'Unfold editor argument',
                        description: "Property-value pairs that can be passed through this argument:\n						* 'levels': Number of levels to unfold. If not set, defaults to 1.\n						* 'direction': If 'up', unfold given number of levels up otherwise unfolds down.\n						* 'selectionLines': The start lines (0-based) of the editor selections to apply the unfold action to. If not set, the active selection(s) will be used.\n						",
                        constraint: foldingArgumentsConstraint,
                        schema: {
                            'type': 'object',
                            'properties': {
                                'levels': {
                                    'type': 'number',
                                    'default': 1
                                },
                                'direction': {
                                    'type': 'string',
                                    'enum': [
                                        'up',
                                        'down'
                                    ],
                                    'default': 'down'
                                },
                                'selectionLines': {
                                    'type': 'array',
                                    'items': {
                                        'type': 'number'
                                    }
                                }
                            }
                        }
                    }
                ]
            }
        });
    }
    _helpers.createClass(UnfoldAction, [
        {
            key: "invoke",
            value: function invoke(_foldingController, foldingModel, editor, args) {
                var levels = args && args.levels || 1;
                var lineNumbers = this.getLineNumbers(args, editor);
                if (args && args.direction === 'up') _foldingModelJs.setCollapseStateLevelsUp(foldingModel, false, levels, lineNumbers);
                else _foldingModelJs.setCollapseStateLevelsDown(foldingModel, false, levels, lineNumbers);
            }
        }
    ]);
    return UnfoldAction;
}(FoldingAction);
var UnFoldRecursivelyAction = /*#__PURE__*/ function(FoldingAction) {
    "use strict";
    _helpers.inherits(UnFoldRecursivelyAction, FoldingAction);
    var _super = _helpers.createSuper(UnFoldRecursivelyAction);
    function UnFoldRecursivelyAction() {
        _helpers.classCallCheck(this, UnFoldRecursivelyAction);
        return _super.call(this, {
            id: 'editor.unfoldRecursively',
            label: _nlsJs.localize('unFoldRecursivelyAction.label', "Unfold Recursively"),
            alias: 'Unfold Recursively',
            precondition: CONTEXT_FOLDING_ENABLED,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: _keyCodesJs.KeyChord(2089 /* KeyK */ , 2137 /* BracketRight */ ),
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    _helpers.createClass(UnFoldRecursivelyAction, [
        {
            key: "invoke",
            value: function invoke(_foldingController, foldingModel, editor, _args) {
                _foldingModelJs.setCollapseStateLevelsDown(foldingModel, false, Number.MAX_VALUE, this.getSelectedLines(editor));
            }
        }
    ]);
    return UnFoldRecursivelyAction;
}(FoldingAction);
var FoldAction = /*#__PURE__*/ function(FoldingAction) {
    "use strict";
    _helpers.inherits(FoldAction, FoldingAction);
    var _super = _helpers.createSuper(FoldAction);
    function FoldAction() {
        _helpers.classCallCheck(this, FoldAction);
        return _super.call(this, {
            id: 'editor.fold',
            label: _nlsJs.localize('foldAction.label', "Fold"),
            alias: 'Fold',
            precondition: CONTEXT_FOLDING_ENABLED,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: 3159 /* BracketLeft */ ,
                mac: {
                    primary: 2647 /* BracketLeft */ 
                },
                weight: 100 /* EditorContrib */ 
            },
            description: {
                description: 'Fold the content in the editor',
                args: [
                    {
                        name: 'Fold editor argument',
                        description: "Property-value pairs that can be passed through this argument:\n							* 'levels': Number of levels to fold.\n							* 'direction': If 'up', folds given number of levels up otherwise folds down.\n							* 'selectionLines': The start lines (0-based) of the editor selections to apply the fold action to. If not set, the active selection(s) will be used.\n							If no levels or direction is set, folds the region at the locations or if already collapsed, the first uncollapsed parent instead.\n						",
                        constraint: foldingArgumentsConstraint,
                        schema: {
                            'type': 'object',
                            'properties': {
                                'levels': {
                                    'type': 'number'
                                },
                                'direction': {
                                    'type': 'string',
                                    'enum': [
                                        'up',
                                        'down'
                                    ]
                                },
                                'selectionLines': {
                                    'type': 'array',
                                    'items': {
                                        'type': 'number'
                                    }
                                }
                            }
                        }
                    }
                ]
            }
        });
    }
    _helpers.createClass(FoldAction, [
        {
            key: "invoke",
            value: function invoke(_foldingController, foldingModel, editor, args) {
                var lineNumbers = this.getLineNumbers(args, editor);
                var levels = args && args.levels;
                var direction = args && args.direction;
                if (typeof levels !== 'number' && typeof direction !== 'string') // fold the region at the location or if already collapsed, the first uncollapsed parent instead.
                _foldingModelJs.setCollapseStateUp(foldingModel, true, lineNumbers);
                else if (direction === 'up') _foldingModelJs.setCollapseStateLevelsUp(foldingModel, true, levels || 1, lineNumbers);
                else _foldingModelJs.setCollapseStateLevelsDown(foldingModel, true, levels || 1, lineNumbers);
            }
        }
    ]);
    return FoldAction;
}(FoldingAction);
var ToggleFoldAction = /*#__PURE__*/ function(FoldingAction) {
    "use strict";
    _helpers.inherits(ToggleFoldAction, FoldingAction);
    var _super = _helpers.createSuper(ToggleFoldAction);
    function ToggleFoldAction() {
        _helpers.classCallCheck(this, ToggleFoldAction);
        return _super.call(this, {
            id: 'editor.toggleFold',
            label: _nlsJs.localize('toggleFoldAction.label', "Toggle Fold"),
            alias: 'Toggle Fold',
            precondition: CONTEXT_FOLDING_ENABLED,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: _keyCodesJs.KeyChord(2089 /* KeyK */ , 2090 /* KeyL */ ),
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    _helpers.createClass(ToggleFoldAction, [
        {
            key: "invoke",
            value: function invoke(_foldingController, foldingModel, editor) {
                var selectedLines = this.getSelectedLines(editor);
                _foldingModelJs.toggleCollapseState(foldingModel, 1, selectedLines);
            }
        }
    ]);
    return ToggleFoldAction;
}(FoldingAction);
var FoldRecursivelyAction = /*#__PURE__*/ function(FoldingAction) {
    "use strict";
    _helpers.inherits(FoldRecursivelyAction, FoldingAction);
    var _super = _helpers.createSuper(FoldRecursivelyAction);
    function FoldRecursivelyAction() {
        _helpers.classCallCheck(this, FoldRecursivelyAction);
        return _super.call(this, {
            id: 'editor.foldRecursively',
            label: _nlsJs.localize('foldRecursivelyAction.label', "Fold Recursively"),
            alias: 'Fold Recursively',
            precondition: CONTEXT_FOLDING_ENABLED,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: _keyCodesJs.KeyChord(2089 /* KeyK */ , 2135 /* BracketLeft */ ),
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    _helpers.createClass(FoldRecursivelyAction, [
        {
            key: "invoke",
            value: function invoke(_foldingController, foldingModel, editor) {
                var selectedLines = this.getSelectedLines(editor);
                _foldingModelJs.setCollapseStateLevelsDown(foldingModel, true, Number.MAX_VALUE, selectedLines);
            }
        }
    ]);
    return FoldRecursivelyAction;
}(FoldingAction);
var FoldAllBlockCommentsAction = /*#__PURE__*/ function(FoldingAction) {
    "use strict";
    _helpers.inherits(FoldAllBlockCommentsAction, FoldingAction);
    var _super = _helpers.createSuper(FoldAllBlockCommentsAction);
    function FoldAllBlockCommentsAction() {
        _helpers.classCallCheck(this, FoldAllBlockCommentsAction);
        return _super.call(this, {
            id: 'editor.foldAllBlockComments',
            label: _nlsJs.localize('foldAllBlockComments.label', "Fold All Block Comments"),
            alias: 'Fold All Block Comments',
            precondition: CONTEXT_FOLDING_ENABLED,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: _keyCodesJs.KeyChord(2089 /* KeyK */ , 2133 /* Slash */ ),
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    _helpers.createClass(FoldAllBlockCommentsAction, [
        {
            key: "invoke",
            value: function invoke(_foldingController, foldingModel, editor) {
                if (foldingModel.regions.hasTypes()) _foldingModelJs.setCollapseStateForType(foldingModel, _modesJs.FoldingRangeKind.Comment.value, true);
                else {
                    var editorModel = editor.getModel();
                    if (!editorModel) return;
                    var comments = _languageConfigurationRegistryJs.LanguageConfigurationRegistry.getComments(editorModel.getLanguageId());
                    if (comments && comments.blockCommentStartToken) {
                        var regExp = new RegExp('^\\s*' + _stringsJs.escapeRegExpCharacters(comments.blockCommentStartToken));
                        _foldingModelJs.setCollapseStateForMatchingLines(foldingModel, regExp, true);
                    }
                }
            }
        }
    ]);
    return FoldAllBlockCommentsAction;
}(FoldingAction);
var FoldAllRegionsAction = /*#__PURE__*/ function(FoldingAction) {
    "use strict";
    _helpers.inherits(FoldAllRegionsAction, FoldingAction);
    var _super = _helpers.createSuper(FoldAllRegionsAction);
    function FoldAllRegionsAction() {
        _helpers.classCallCheck(this, FoldAllRegionsAction);
        return _super.call(this, {
            id: 'editor.foldAllMarkerRegions',
            label: _nlsJs.localize('foldAllMarkerRegions.label', "Fold All Regions"),
            alias: 'Fold All Regions',
            precondition: CONTEXT_FOLDING_ENABLED,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: _keyCodesJs.KeyChord(2089 /* KeyK */ , 2077 /* Digit8 */ ),
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    _helpers.createClass(FoldAllRegionsAction, [
        {
            key: "invoke",
            value: function invoke(_foldingController, foldingModel, editor) {
                if (foldingModel.regions.hasTypes()) _foldingModelJs.setCollapseStateForType(foldingModel, _modesJs.FoldingRangeKind.Region.value, true);
                else {
                    var editorModel = editor.getModel();
                    if (!editorModel) return;
                    var foldingRules = _languageConfigurationRegistryJs.LanguageConfigurationRegistry.getFoldingRules(editorModel.getLanguageId());
                    if (foldingRules && foldingRules.markers && foldingRules.markers.start) {
                        var regExp = new RegExp(foldingRules.markers.start);
                        _foldingModelJs.setCollapseStateForMatchingLines(foldingModel, regExp, true);
                    }
                }
            }
        }
    ]);
    return FoldAllRegionsAction;
}(FoldingAction);
var UnfoldAllRegionsAction = /*#__PURE__*/ function(FoldingAction) {
    "use strict";
    _helpers.inherits(UnfoldAllRegionsAction, FoldingAction);
    var _super = _helpers.createSuper(UnfoldAllRegionsAction);
    function UnfoldAllRegionsAction() {
        _helpers.classCallCheck(this, UnfoldAllRegionsAction);
        return _super.call(this, {
            id: 'editor.unfoldAllMarkerRegions',
            label: _nlsJs.localize('unfoldAllMarkerRegions.label', "Unfold All Regions"),
            alias: 'Unfold All Regions',
            precondition: CONTEXT_FOLDING_ENABLED,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: _keyCodesJs.KeyChord(2089 /* KeyK */ , 2078 /* Digit9 */ ),
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    _helpers.createClass(UnfoldAllRegionsAction, [
        {
            key: "invoke",
            value: function invoke(_foldingController, foldingModel, editor) {
                if (foldingModel.regions.hasTypes()) _foldingModelJs.setCollapseStateForType(foldingModel, _modesJs.FoldingRangeKind.Region.value, false);
                else {
                    var editorModel = editor.getModel();
                    if (!editorModel) return;
                    var foldingRules = _languageConfigurationRegistryJs.LanguageConfigurationRegistry.getFoldingRules(editorModel.getLanguageId());
                    if (foldingRules && foldingRules.markers && foldingRules.markers.start) {
                        var regExp = new RegExp(foldingRules.markers.start);
                        _foldingModelJs.setCollapseStateForMatchingLines(foldingModel, regExp, false);
                    }
                }
            }
        }
    ]);
    return UnfoldAllRegionsAction;
}(FoldingAction);
var FoldAllRegionsExceptAction = /*#__PURE__*/ function(FoldingAction) {
    "use strict";
    _helpers.inherits(FoldAllRegionsExceptAction, FoldingAction);
    var _super = _helpers.createSuper(FoldAllRegionsExceptAction);
    function FoldAllRegionsExceptAction() {
        _helpers.classCallCheck(this, FoldAllRegionsExceptAction);
        return _super.call(this, {
            id: 'editor.foldAllExcept',
            label: _nlsJs.localize('foldAllExcept.label', "Fold All Regions Except Selected"),
            alias: 'Fold All Regions Except Selected',
            precondition: CONTEXT_FOLDING_ENABLED,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: _keyCodesJs.KeyChord(2089 /* KeyK */ , 2131 /* Minus */ ),
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    _helpers.createClass(FoldAllRegionsExceptAction, [
        {
            key: "invoke",
            value: function invoke(_foldingController, foldingModel, editor) {
                var selectedLines = this.getSelectedLines(editor);
                _foldingModelJs.setCollapseStateForRest(foldingModel, true, selectedLines);
            }
        }
    ]);
    return FoldAllRegionsExceptAction;
}(FoldingAction);
var UnfoldAllRegionsExceptAction = /*#__PURE__*/ function(FoldingAction) {
    "use strict";
    _helpers.inherits(UnfoldAllRegionsExceptAction, FoldingAction);
    var _super = _helpers.createSuper(UnfoldAllRegionsExceptAction);
    function UnfoldAllRegionsExceptAction() {
        _helpers.classCallCheck(this, UnfoldAllRegionsExceptAction);
        return _super.call(this, {
            id: 'editor.unfoldAllExcept',
            label: _nlsJs.localize('unfoldAllExcept.label', "Unfold All Regions Except Selected"),
            alias: 'Unfold All Regions Except Selected',
            precondition: CONTEXT_FOLDING_ENABLED,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: _keyCodesJs.KeyChord(2089 /* KeyK */ , 2129 /* Equal */ ),
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    _helpers.createClass(UnfoldAllRegionsExceptAction, [
        {
            key: "invoke",
            value: function invoke(_foldingController, foldingModel, editor) {
                var selectedLines = this.getSelectedLines(editor);
                _foldingModelJs.setCollapseStateForRest(foldingModel, false, selectedLines);
            }
        }
    ]);
    return UnfoldAllRegionsExceptAction;
}(FoldingAction);
var FoldAllAction = /*#__PURE__*/ function(FoldingAction) {
    "use strict";
    _helpers.inherits(FoldAllAction, FoldingAction);
    var _super = _helpers.createSuper(FoldAllAction);
    function FoldAllAction() {
        _helpers.classCallCheck(this, FoldAllAction);
        return _super.call(this, {
            id: 'editor.foldAll',
            label: _nlsJs.localize('foldAllAction.label', "Fold All"),
            alias: 'Fold All',
            precondition: CONTEXT_FOLDING_ENABLED,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: _keyCodesJs.KeyChord(2089 /* KeyK */ , 2069 /* Digit0 */ ),
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    _helpers.createClass(FoldAllAction, [
        {
            key: "invoke",
            value: function invoke(_foldingController, foldingModel, _editor) {
                _foldingModelJs.setCollapseStateLevelsDown(foldingModel, true);
            }
        }
    ]);
    return FoldAllAction;
}(FoldingAction);
var UnfoldAllAction = /*#__PURE__*/ function(FoldingAction) {
    "use strict";
    _helpers.inherits(UnfoldAllAction, FoldingAction);
    var _super = _helpers.createSuper(UnfoldAllAction);
    function UnfoldAllAction() {
        _helpers.classCallCheck(this, UnfoldAllAction);
        return _super.call(this, {
            id: 'editor.unfoldAll',
            label: _nlsJs.localize('unfoldAllAction.label', "Unfold All"),
            alias: 'Unfold All',
            precondition: CONTEXT_FOLDING_ENABLED,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: _keyCodesJs.KeyChord(2089 /* KeyK */ , 2088 /* KeyJ */ ),
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    _helpers.createClass(UnfoldAllAction, [
        {
            key: "invoke",
            value: function invoke(_foldingController, foldingModel, _editor) {
                _foldingModelJs.setCollapseStateLevelsDown(foldingModel, false);
            }
        }
    ]);
    return UnfoldAllAction;
}(FoldingAction);
var FoldLevelAction = /*#__PURE__*/ function(FoldingAction) {
    "use strict";
    _helpers.inherits(FoldLevelAction, FoldingAction);
    var _super = _helpers.createSuper(FoldLevelAction);
    function FoldLevelAction() {
        _helpers.classCallCheck(this, FoldLevelAction);
        return _super.apply(this, arguments);
    }
    _helpers.createClass(FoldLevelAction, [
        {
            key: "getFoldingLevel",
            value: function getFoldingLevel() {
                return parseInt(this.id.substr(FoldLevelAction.ID_PREFIX.length));
            }
        },
        {
            key: "invoke",
            value: function invoke(_foldingController, foldingModel, editor) {
                _foldingModelJs.setCollapseStateAtLevel(foldingModel, this.getFoldingLevel(), true, this.getSelectedLines(editor));
            }
        }
    ]);
    return FoldLevelAction;
}(FoldingAction);
FoldLevelAction.ID_PREFIX = 'editor.foldLevel';
FoldLevelAction.ID = function(level) {
    return FoldLevelAction.ID_PREFIX + level;
};
/** Action to go to the parent fold of current line */ var GotoParentFoldAction = /*#__PURE__*/ function(FoldingAction) {
    "use strict";
    _helpers.inherits(GotoParentFoldAction, FoldingAction);
    var _super = _helpers.createSuper(GotoParentFoldAction);
    function GotoParentFoldAction() {
        _helpers.classCallCheck(this, GotoParentFoldAction);
        return _super.call(this, {
            id: 'editor.gotoParentFold',
            label: _nlsJs.localize('gotoParentFold.label', "Go to Parent Fold"),
            alias: 'Go to Parent Fold',
            precondition: CONTEXT_FOLDING_ENABLED,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    _helpers.createClass(GotoParentFoldAction, [
        {
            key: "invoke",
            value: function invoke(_foldingController, foldingModel, editor) {
                var selectedLines = this.getSelectedLines(editor);
                if (selectedLines.length > 0) {
                    var startLineNumber = _foldingModelJs.getParentFoldLine(selectedLines[0], foldingModel);
                    if (startLineNumber !== null) editor.setSelection({
                        startLineNumber: startLineNumber,
                        startColumn: 1,
                        endLineNumber: startLineNumber,
                        endColumn: 1
                    });
                }
            }
        }
    ]);
    return GotoParentFoldAction;
}(FoldingAction);
/** Action to go to the previous fold of current line */ var GotoPreviousFoldAction = /*#__PURE__*/ function(FoldingAction) {
    "use strict";
    _helpers.inherits(GotoPreviousFoldAction, FoldingAction);
    var _super = _helpers.createSuper(GotoPreviousFoldAction);
    function GotoPreviousFoldAction() {
        _helpers.classCallCheck(this, GotoPreviousFoldAction);
        return _super.call(this, {
            id: 'editor.gotoPreviousFold',
            label: _nlsJs.localize('gotoPreviousFold.label', "Go to Previous Folding Range"),
            alias: 'Go to Previous Folding Range',
            precondition: CONTEXT_FOLDING_ENABLED,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    _helpers.createClass(GotoPreviousFoldAction, [
        {
            key: "invoke",
            value: function invoke(_foldingController, foldingModel, editor) {
                var selectedLines = this.getSelectedLines(editor);
                if (selectedLines.length > 0) {
                    var startLineNumber = _foldingModelJs.getPreviousFoldLine(selectedLines[0], foldingModel);
                    if (startLineNumber !== null) editor.setSelection({
                        startLineNumber: startLineNumber,
                        startColumn: 1,
                        endLineNumber: startLineNumber,
                        endColumn: 1
                    });
                }
            }
        }
    ]);
    return GotoPreviousFoldAction;
}(FoldingAction);
/** Action to go to the next fold of current line */ var GotoNextFoldAction = /*#__PURE__*/ function(FoldingAction) {
    "use strict";
    _helpers.inherits(GotoNextFoldAction, FoldingAction);
    var _super = _helpers.createSuper(GotoNextFoldAction);
    function GotoNextFoldAction() {
        _helpers.classCallCheck(this, GotoNextFoldAction);
        return _super.call(this, {
            id: 'editor.gotoNextFold',
            label: _nlsJs.localize('gotoNextFold.label', "Go to Next Folding Range"),
            alias: 'Go to Next Folding Range',
            precondition: CONTEXT_FOLDING_ENABLED,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    _helpers.createClass(GotoNextFoldAction, [
        {
            key: "invoke",
            value: function invoke(_foldingController, foldingModel, editor) {
                var selectedLines = this.getSelectedLines(editor);
                if (selectedLines.length > 0) {
                    var startLineNumber = _foldingModelJs.getNextFoldLine(selectedLines[0], foldingModel);
                    if (startLineNumber !== null) editor.setSelection({
                        startLineNumber: startLineNumber,
                        startColumn: 1,
                        endLineNumber: startLineNumber,
                        endColumn: 1
                    });
                }
            }
        }
    ]);
    return GotoNextFoldAction;
}(FoldingAction);
_editorExtensionsJs.registerEditorContribution(FoldingController.ID, FoldingController);
_editorExtensionsJs.registerEditorAction(UnfoldAction);
_editorExtensionsJs.registerEditorAction(UnFoldRecursivelyAction);
_editorExtensionsJs.registerEditorAction(FoldAction);
_editorExtensionsJs.registerEditorAction(FoldRecursivelyAction);
_editorExtensionsJs.registerEditorAction(FoldAllAction);
_editorExtensionsJs.registerEditorAction(UnfoldAllAction);
_editorExtensionsJs.registerEditorAction(FoldAllBlockCommentsAction);
_editorExtensionsJs.registerEditorAction(FoldAllRegionsAction);
_editorExtensionsJs.registerEditorAction(UnfoldAllRegionsAction);
_editorExtensionsJs.registerEditorAction(FoldAllRegionsExceptAction);
_editorExtensionsJs.registerEditorAction(UnfoldAllRegionsExceptAction);
_editorExtensionsJs.registerEditorAction(ToggleFoldAction);
_editorExtensionsJs.registerEditorAction(GotoParentFoldAction);
_editorExtensionsJs.registerEditorAction(GotoPreviousFoldAction);
_editorExtensionsJs.registerEditorAction(GotoNextFoldAction);
for(var i = 1; i <= 7; i++)_editorExtensionsJs.registerInstantiatedEditorAction(new FoldLevelAction({
    id: FoldLevelAction.ID(i),
    label: _nlsJs.localize('foldLevelAction.label', "Fold Level {0}", i),
    alias: "Fold Level ".concat(i),
    precondition: CONTEXT_FOLDING_ENABLED,
    kbOpts: {
        kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
        primary: _keyCodesJs.KeyChord(2089 /* KeyK */ , 2048 /* CtrlCmd */  | 21 /* Digit0 */  + i),
        weight: 100 /* EditorContrib */ 
    }
}));
var foldBackgroundBackground = _colorRegistryJs.registerColor('editor.foldBackground', {
    light: _colorRegistryJs.transparent(_colorRegistryJs.editorSelectionBackground, 0.3),
    dark: _colorRegistryJs.transparent(_colorRegistryJs.editorSelectionBackground, 0.3),
    hc: null
}, _nlsJs.localize('foldBackgroundBackground', "Background color behind folded ranges. The color must not be opaque so as not to hide underlying decorations."), true);
var editorFoldForeground = _colorRegistryJs.registerColor('editorGutter.foldingControlForeground', {
    dark: _colorRegistryJs.iconForeground,
    light: _colorRegistryJs.iconForeground,
    hc: _colorRegistryJs.iconForeground
}, _nlsJs.localize('editorGutter.foldingControlForeground', 'Color of the folding control in the editor gutter.'));
_themeServiceJs.registerThemingParticipant(function(theme, collector) {
    var foldBackground = theme.getColor(foldBackgroundBackground);
    if (foldBackground) collector.addRule(".monaco-editor .folded-background { background-color: ".concat(foldBackground, "; }"));
    var editorFoldColor = theme.getColor(editorFoldForeground);
    if (editorFoldColor) collector.addRule("\n		.monaco-editor .cldr".concat(_themeServiceJs.ThemeIcon.asCSSSelector(_foldingDecorationsJs.foldingExpandedIcon), ",\n		.monaco-editor .cldr").concat(_themeServiceJs.ThemeIcon.asCSSSelector(_foldingDecorationsJs.foldingCollapsedIcon), " {\n			color: ").concat(editorFoldColor, " !important;\n		}\n		"));
});

},{"@swc/helpers":"erO4s","../../../base/common/async.js":"kMhSh","../../../base/common/errors.js":"afm4i","../../../base/common/keyCodes.js":"4hRDv","../../../base/common/lifecycle.js":"bcbPy","../../../base/common/strings.js":"jsb6w","../../../base/common/types.js":"lF7Cj","./folding.css":"cCfC6","../../browser/core/editorState.js":"5J2rl","../../browser/editorExtensions.js":"dFnlo","../../common/editorContextKeys.js":"2t2PW","../../common/modes.js":"bRbY1","../../common/modes/languageConfigurationRegistry.js":"fdCRx","./foldingModel.js":"f03oX","./hiddenRangeModel.js":"t9igK","./indentRangeProvider.js":"5clWs","./intializingRangeProvider.js":"lAb6x","../../../nls.js":"9djYb","../../../platform/contextkey/common/contextkey.js":"5cjav","../../../platform/theme/common/colorRegistry.js":"lKtxS","../../../platform/theme/common/themeService.js":"kE7QB","./foldingDecorations.js":"jCsZS","./syntaxRangeProvider.js":"01s2d","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"cCfC6":[function() {},{}],"f03oX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FoldingModel", function() {
    return FoldingModel;
});
/**
 * Collapse or expand the regions at the given locations
 * @param levels The number of levels. Use 1 to only impact the regions at the location, use Number.MAX_VALUE for all levels.
 * @param lineNumbers the location of the regions to collapse or expand, or if not set, all regions in the model.
 */ parcelHelpers.export(exports, "toggleCollapseState", function() {
    return toggleCollapseState;
});
/**
 * Collapse or expand the regions at the given locations including all children.
 * @param doCollapse Whether to collapse or expand
 * @param levels The number of levels. Use 1 to only impact the regions at the location, use Number.MAX_VALUE for all levels.
 * @param lineNumbers the location of the regions to collapse or expand, or if not set, all regions in the model.
 */ parcelHelpers.export(exports, "setCollapseStateLevelsDown", function() {
    return setCollapseStateLevelsDown;
});
/**
 * Collapse or expand the regions at the given locations including all parents.
 * @param doCollapse Whether to collapse or expand
 * @param levels The number of levels. Use 1 to only impact the regions at the location, use Number.MAX_VALUE for all levels.
 * @param lineNumbers the location of the regions to collapse or expand.
 */ parcelHelpers.export(exports, "setCollapseStateLevelsUp", function() {
    return setCollapseStateLevelsUp;
});
/**
 * Collapse or expand a region at the given locations. If the inner most region is already collapsed/expanded, uses the first parent instead.
 * @param doCollapse Whether to collapse or expand
 * @param lineNumbers the location of the regions to collapse or expand.
 */ parcelHelpers.export(exports, "setCollapseStateUp", function() {
    return setCollapseStateUp;
});
/**
 * Folds or unfolds all regions that have a given level, except if they contain one of the blocked lines.
 * @param foldLevel level. Level == 1 is the top level
 * @param doCollapse Whether to collapse or expand
*/ parcelHelpers.export(exports, "setCollapseStateAtLevel", function() {
    return setCollapseStateAtLevel;
});
/**
 * Folds or unfolds all regions, except if they contain or are contained by a region of one of the blocked lines.
 * @param doCollapse Whether to collapse or expand
 * @param blockedLineNumbers the location of regions to not collapse or expand
 */ parcelHelpers.export(exports, "setCollapseStateForRest", function() {
    return setCollapseStateForRest;
});
/**
 * Folds all regions for which the lines start with a given regex
 * @param foldingModel the folding model
 */ parcelHelpers.export(exports, "setCollapseStateForMatchingLines", function() {
    return setCollapseStateForMatchingLines;
});
/**
 * Folds all regions of the given type
 * @param foldingModel the folding model
 */ parcelHelpers.export(exports, "setCollapseStateForType", function() {
    return setCollapseStateForType;
});
/**
 * Get line to go to for parent fold of current line
 * @param lineNumber the current line number
 * @param foldingModel the folding model
 *
 * @return Parent fold start line
 */ parcelHelpers.export(exports, "getParentFoldLine", function() {
    return getParentFoldLine;
});
/**
 * Get line to go to for previous fold at the same level of current line
 * @param lineNumber the current line number
 * @param foldingModel the folding model
 *
 * @return Previous fold start line
 */ parcelHelpers.export(exports, "getPreviousFoldLine", function() {
    return getPreviousFoldLine;
});
/**
 * Get line to go to next fold at the same level of current line
 * @param lineNumber the current line number
 * @param foldingModel the folding model
 *
 * @return Next fold start line
 */ parcelHelpers.export(exports, "getNextFoldLine", function() {
    return getNextFoldLine;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _eventJs = require("../../../base/common/event.js");
var _foldingRangesJs = require("./foldingRanges.js");
var FoldingModel = /*#__PURE__*/ function() {
    "use strict";
    function FoldingModel(textModel, decorationProvider) {
        _helpers.classCallCheck(this, FoldingModel);
        this._updateEventEmitter = new _eventJs.Emitter();
        this.onDidChange = this._updateEventEmitter.event;
        this._textModel = textModel;
        this._decorationProvider = decorationProvider;
        this._regions = new _foldingRangesJs.FoldingRegions(new Uint32Array(0), new Uint32Array(0));
        this._editorDecorationIds = [];
        this._isInitialized = false;
    }
    _helpers.createClass(FoldingModel, [
        {
            key: "regions",
            get: function get() {
                return this._regions;
            }
        },
        {
            key: "textModel",
            get: function get() {
                return this._textModel;
            }
        },
        {
            key: "isInitialized",
            get: function get() {
                return this._isInitialized;
            }
        },
        {
            key: "toggleCollapseState",
            value: function toggleCollapseState(toggledRegions) {
                var _this = this;
                if (!toggledRegions.length) return;
                toggledRegions = toggledRegions.sort(function(r1, r2) {
                    return r1.regionIndex - r2.regionIndex;
                });
                var processed = {};
                this._decorationProvider.changeDecorations(function(accessor) {
                    var _this1 = _this;
                    var k = 0; // index from [0 ... this.regions.length]
                    var dirtyRegionEndLine = -1; // end of the range where decorations need to be updated
                    var lastHiddenLine = -1; // the end of the last hidden lines
                    var updateDecorationsUntil = function(index) {
                        while(k < index){
                            var endLineNumber = _this1._regions.getEndLineNumber(k);
                            var isCollapsed = _this1._regions.isCollapsed(k);
                            if (endLineNumber <= dirtyRegionEndLine) accessor.changeDecorationOptions(_this1._editorDecorationIds[k], _this1._decorationProvider.getDecorationOption(isCollapsed, endLineNumber <= lastHiddenLine));
                            if (isCollapsed && endLineNumber > lastHiddenLine) lastHiddenLine = endLineNumber;
                            k++;
                        }
                    };
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator = toggledRegions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var region = _step.value;
                            var index1 = region.regionIndex;
                            var editorDecorationId = _this._editorDecorationIds[index1];
                            if (editorDecorationId && !processed[editorDecorationId]) {
                                processed[editorDecorationId] = true;
                                updateDecorationsUntil(index1); // update all decorations up to current index using the old dirtyRegionEndLine
                                var newCollapseState = !_this._regions.isCollapsed(index1);
                                _this._regions.setCollapsed(index1, newCollapseState);
                                dirtyRegionEndLine = Math.max(dirtyRegionEndLine, _this._regions.getEndLineNumber(index1));
                            }
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    updateDecorationsUntil(_this._regions.length);
                });
                this._updateEventEmitter.fire({
                    model: this,
                    collapseStateChanged: toggledRegions
                });
            }
        },
        {
            key: "update",
            value: function update(newRegions) {
                var blockedLineNumers = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
                var _this = this;
                var newEditorDecorations = [];
                var isBlocked = function(startLineNumber, endLineNumber) {
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator = blockedLineNumers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var blockedLineNumber = _step.value;
                            if (startLineNumber < blockedLineNumber && blockedLineNumber <= endLineNumber) return true;
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return false;
                };
                var lastHiddenLine = -1;
                var initRange = function(index, isCollapsed) {
                    var startLineNumber = newRegions.getStartLineNumber(index);
                    var endLineNumber = newRegions.getEndLineNumber(index);
                    if (!isCollapsed) isCollapsed = newRegions.isCollapsed(index);
                    if (isCollapsed && isBlocked(startLineNumber, endLineNumber)) isCollapsed = false;
                    newRegions.setCollapsed(index, isCollapsed);
                    var maxColumn = _this._textModel.getLineMaxColumn(startLineNumber);
                    var decorationRange = {
                        startLineNumber: startLineNumber,
                        startColumn: Math.max(maxColumn - 1, 1),
                        endLineNumber: startLineNumber,
                        endColumn: maxColumn
                    };
                    newEditorDecorations.push({
                        range: decorationRange,
                        options: _this._decorationProvider.getDecorationOption(isCollapsed, endLineNumber <= lastHiddenLine)
                    });
                    if (isCollapsed && endLineNumber > lastHiddenLine) lastHiddenLine = endLineNumber;
                };
                var i = 0;
                var nextCollapsed = function() {
                    while(i < _this._regions.length){
                        var isCollapsed = _this._regions.isCollapsed(i);
                        i++;
                        if (isCollapsed) return i - 1;
                    }
                    return -1;
                };
                var k = 0;
                var collapsedIndex = nextCollapsed();
                while(collapsedIndex !== -1 && k < newRegions.length){
                    // get the latest range
                    var decRange = this._textModel.getDecorationRange(this._editorDecorationIds[collapsedIndex]);
                    if (decRange) {
                        var collapsedStartLineNumber = decRange.startLineNumber;
                        if (decRange.startColumn === Math.max(decRange.endColumn - 1, 1) && this._textModel.getLineMaxColumn(collapsedStartLineNumber) === decRange.endColumn) while(k < newRegions.length){
                            var startLineNumber1 = newRegions.getStartLineNumber(k);
                            if (collapsedStartLineNumber >= startLineNumber1) {
                                initRange(k, collapsedStartLineNumber === startLineNumber1);
                                k++;
                            } else break;
                        }
                    }
                    collapsedIndex = nextCollapsed();
                }
                while(k < newRegions.length){
                    initRange(k, false);
                    k++;
                }
                this._editorDecorationIds = this._decorationProvider.deltaDecorations(this._editorDecorationIds, newEditorDecorations);
                this._regions = newRegions;
                this._isInitialized = true;
                this._updateEventEmitter.fire({
                    model: this
                });
            }
        },
        {
            /**
     * Collapse state memento, for persistence only
     */ key: "getMemento",
            value: function getMemento() {
                var collapsedRanges = [];
                for(var i = 0; i < this._regions.length; i++)if (this._regions.isCollapsed(i)) {
                    var range = this._textModel.getDecorationRange(this._editorDecorationIds[i]);
                    if (range) {
                        var startLineNumber = range.startLineNumber;
                        var endLineNumber = range.endLineNumber + this._regions.getEndLineNumber(i) - this._regions.getStartLineNumber(i);
                        collapsedRanges.push({
                            startLineNumber: startLineNumber,
                            endLineNumber: endLineNumber
                        });
                    }
                }
                if (collapsedRanges.length > 0) return collapsedRanges;
                return undefined;
            }
        },
        {
            /**
     * Apply persisted state, for persistence only
     */ key: "applyMemento",
            value: function applyMemento(state) {
                if (!Array.isArray(state)) return;
                var toToogle = [];
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = state[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var range = _step.value;
                        var region = this.getRegionAtLine(range.startLineNumber);
                        if (region && !region.isCollapsed) toToogle.push(region);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                this.toggleCollapseState(toToogle);
            }
        },
        {
            key: "dispose",
            value: function dispose() {
                this._decorationProvider.deltaDecorations(this._editorDecorationIds, []);
            }
        },
        {
            key: "getAllRegionsAtLine",
            value: function getAllRegionsAtLine(lineNumber, filter) {
                var result = [];
                if (this._regions) {
                    var index = this._regions.findRange(lineNumber);
                    var level = 1;
                    while(index >= 0){
                        var current = this._regions.toRegion(index);
                        if (!filter || filter(current, level)) result.push(current);
                        level++;
                        index = current.parentIndex;
                    }
                }
                return result;
            }
        },
        {
            key: "getRegionAtLine",
            value: function getRegionAtLine(lineNumber) {
                if (this._regions) {
                    var index = this._regions.findRange(lineNumber);
                    if (index >= 0) return this._regions.toRegion(index);
                }
                return null;
            }
        },
        {
            key: "getRegionsInside",
            value: function getRegionsInside(region, filter) {
                var result = [];
                var index = region ? region.regionIndex + 1 : 0;
                var endLineNumber = region ? region.endLineNumber : Number.MAX_VALUE;
                if (filter && filter.length === 2) {
                    var levelStack = [];
                    for(var i = index, len = this._regions.length; i < len; i++){
                        var current = this._regions.toRegion(i);
                        if (this._regions.getStartLineNumber(i) < endLineNumber) {
                            while(levelStack.length > 0 && !current.containedBy(levelStack[levelStack.length - 1]))levelStack.pop();
                            levelStack.push(current);
                            if (filter(current, levelStack.length)) result.push(current);
                        } else break;
                    }
                } else for(var i1 = index, len1 = this._regions.length; i1 < len1; i1++){
                    var current1 = this._regions.toRegion(i1);
                    if (this._regions.getStartLineNumber(i1) < endLineNumber) {
                        if (!filter || filter(current1)) result.push(current1);
                    } else break;
                }
                return result;
            }
        }
    ]);
    return FoldingModel;
}();
function toggleCollapseState(foldingModel, levels, lineNumbers) {
    var toToggle = [];
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        var _loop = function(_iterator, _step) {
            var lineNumber = _step.value;
            var region = foldingModel.getRegionAtLine(lineNumber);
            if (region) {
                var doCollapse = !region.isCollapsed;
                toToggle.push(region);
                if (levels > 1) {
                    var _toToggle;
                    var regionsInside = foldingModel.getRegionsInside(region, function(r, level) {
                        return r.isCollapsed !== doCollapse && level < levels;
                    });
                    (_toToggle = toToggle).push.apply(_toToggle, _helpers.toConsumableArray(regionsInside));
                }
            }
        };
        for(var _iterator = lineNumbers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop(_iterator, _step);
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    foldingModel.toggleCollapseState(toToggle);
}
function setCollapseStateLevelsDown(foldingModel, doCollapse) {
    var levels = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : Number.MAX_VALUE, lineNumbers = arguments.length > 3 ? arguments[3] : void 0;
    var toToggle = [];
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    if (lineNumbers && lineNumbers.length > 0) try {
        for(var _iterator = lineNumbers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var lineNumber = _step.value;
            var region = foldingModel.getRegionAtLine(lineNumber);
            if (region) {
                if (region.isCollapsed !== doCollapse) toToggle.push(region);
                if (levels > 1) {
                    var _toToggle;
                    var regionsInside = foldingModel.getRegionsInside(region, function(r, level) {
                        return r.isCollapsed !== doCollapse && level < levels;
                    });
                    (_toToggle = toToggle).push.apply(_toToggle, _helpers.toConsumableArray(regionsInside));
                }
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    else {
        var _toToggle1;
        var regionsInside1 = foldingModel.getRegionsInside(null, function(r, level) {
            return r.isCollapsed !== doCollapse && level < levels;
        });
        (_toToggle1 = toToggle).push.apply(_toToggle1, _helpers.toConsumableArray(regionsInside1));
    }
    foldingModel.toggleCollapseState(toToggle);
}
function setCollapseStateLevelsUp(foldingModel, doCollapse, levels, lineNumbers) {
    var toToggle = [];
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = lineNumbers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var lineNumber = _step.value;
            var _toToggle;
            var regions = foldingModel.getAllRegionsAtLine(lineNumber, function(region, level) {
                return region.isCollapsed !== doCollapse && level <= levels;
            });
            (_toToggle = toToggle).push.apply(_toToggle, _helpers.toConsumableArray(regions));
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    foldingModel.toggleCollapseState(toToggle);
}
function setCollapseStateUp(foldingModel, doCollapse, lineNumbers) {
    var toToggle = [];
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = lineNumbers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var lineNumber = _step.value;
            var regions = foldingModel.getAllRegionsAtLine(lineNumber, function(region) {
                return region.isCollapsed !== doCollapse;
            });
            if (regions.length > 0) toToggle.push(regions[0]);
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    foldingModel.toggleCollapseState(toToggle);
}
function setCollapseStateAtLevel(foldingModel, foldLevel, doCollapse, blockedLineNumbers) {
    var filter = function(region, level) {
        return level === foldLevel && region.isCollapsed !== doCollapse && !blockedLineNumbers.some(function(line) {
            return region.containsLine(line);
        });
    };
    var toToggle = foldingModel.getRegionsInside(null, filter);
    foldingModel.toggleCollapseState(toToggle);
}
function setCollapseStateForRest(foldingModel, doCollapse, blockedLineNumbers) {
    var filteredRegions = [];
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = blockedLineNumbers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var lineNumber = _step.value;
            filteredRegions.push(foldingModel.getAllRegionsAtLine(lineNumber, undefined)[0]);
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    var filter = function(region) {
        return filteredRegions.every(function(filteredRegion) {
            return !filteredRegion.containedBy(region) && !region.containedBy(filteredRegion);
        }) && region.isCollapsed !== doCollapse;
    };
    var toToggle = foldingModel.getRegionsInside(null, filter);
    foldingModel.toggleCollapseState(toToggle);
}
function setCollapseStateForMatchingLines(foldingModel, regExp, doCollapse) {
    var editorModel = foldingModel.textModel;
    var regions = foldingModel.regions;
    var toToggle = [];
    for(var i = regions.length - 1; i >= 0; i--)if (doCollapse !== regions.isCollapsed(i)) {
        var startLineNumber = regions.getStartLineNumber(i);
        if (regExp.test(editorModel.getLineContent(startLineNumber))) toToggle.push(regions.toRegion(i));
    }
    foldingModel.toggleCollapseState(toToggle);
}
function setCollapseStateForType(foldingModel, type, doCollapse) {
    var regions = foldingModel.regions;
    var toToggle = [];
    for(var i = regions.length - 1; i >= 0; i--)if (doCollapse !== regions.isCollapsed(i) && type === regions.getType(i)) toToggle.push(regions.toRegion(i));
    foldingModel.toggleCollapseState(toToggle);
}
function getParentFoldLine(lineNumber, foldingModel) {
    var startLineNumber = null;
    var foldingRegion = foldingModel.getRegionAtLine(lineNumber);
    if (foldingRegion !== null) {
        startLineNumber = foldingRegion.startLineNumber;
        // If current line is not the start of the current fold, go to top line of current fold. If not, go to parent fold
        if (lineNumber === startLineNumber) {
            var parentFoldingIdx = foldingRegion.parentIndex;
            if (parentFoldingIdx !== -1) startLineNumber = foldingModel.regions.getStartLineNumber(parentFoldingIdx);
            else startLineNumber = null;
        }
    }
    return startLineNumber;
}
function getPreviousFoldLine(lineNumber, foldingModel) {
    var foldingRegion = foldingModel.getRegionAtLine(lineNumber);
    // If on the folding range start line, go to previous sibling.
    if (foldingRegion !== null && foldingRegion.startLineNumber === lineNumber) {
        // If current line is not the start of the current fold, go to top line of current fold. If not, go to previous fold.
        if (lineNumber !== foldingRegion.startLineNumber) return foldingRegion.startLineNumber;
        else {
            // Find min line number to stay within parent.
            var expectedParentIndex = foldingRegion.parentIndex;
            var minLineNumber = 0;
            if (expectedParentIndex !== -1) minLineNumber = foldingModel.regions.getStartLineNumber(foldingRegion.parentIndex);
            // Find fold at same level.
            while(foldingRegion !== null){
                if (foldingRegion.regionIndex > 0) {
                    foldingRegion = foldingModel.regions.toRegion(foldingRegion.regionIndex - 1);
                    // Keep at same level.
                    if (foldingRegion.startLineNumber <= minLineNumber) return null;
                    else if (foldingRegion.parentIndex === expectedParentIndex) return foldingRegion.startLineNumber;
                } else return null;
            }
        }
    } else // Go to last fold that's before the current line.
    if (foldingModel.regions.length > 0) {
        foldingRegion = foldingModel.regions.toRegion(foldingModel.regions.length - 1);
        while(foldingRegion !== null){
            // Found fold before current line.
            if (foldingRegion.startLineNumber < lineNumber) return foldingRegion.startLineNumber;
            if (foldingRegion.regionIndex > 0) foldingRegion = foldingModel.regions.toRegion(foldingRegion.regionIndex - 1);
            else foldingRegion = null;
        }
    }
    return null;
}
function getNextFoldLine(lineNumber, foldingModel) {
    var foldingRegion = foldingModel.getRegionAtLine(lineNumber);
    // If on the folding range start line, go to next sibling.
    if (foldingRegion !== null && foldingRegion.startLineNumber === lineNumber) {
        // Find max line number to stay within parent.
        var expectedParentIndex = foldingRegion.parentIndex;
        var maxLineNumber = 0;
        if (expectedParentIndex !== -1) maxLineNumber = foldingModel.regions.getEndLineNumber(foldingRegion.parentIndex);
        else if (foldingModel.regions.length === 0) return null;
        else maxLineNumber = foldingModel.regions.getEndLineNumber(foldingModel.regions.length - 1);
        // Find fold at same level.
        while(foldingRegion !== null){
            if (foldingRegion.regionIndex < foldingModel.regions.length) {
                foldingRegion = foldingModel.regions.toRegion(foldingRegion.regionIndex + 1);
                // Keep at same level.
                if (foldingRegion.startLineNumber >= maxLineNumber) return null;
                else if (foldingRegion.parentIndex === expectedParentIndex) return foldingRegion.startLineNumber;
            } else return null;
        }
    } else // Go to first fold that's after the current line.
    if (foldingModel.regions.length > 0) {
        foldingRegion = foldingModel.regions.toRegion(0);
        while(foldingRegion !== null){
            // Found fold after current line.
            if (foldingRegion.startLineNumber > lineNumber) return foldingRegion.startLineNumber;
            if (foldingRegion.regionIndex < foldingModel.regions.length) foldingRegion = foldingModel.regions.toRegion(foldingRegion.regionIndex + 1);
            else foldingRegion = null;
        }
    }
    return null;
}

},{"@swc/helpers":"erO4s","../../../base/common/event.js":"9IBcK","./foldingRanges.js":"aUzUc","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"aUzUc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MAX_FOLDING_REGIONS", function() {
    return MAX_FOLDING_REGIONS;
});
parcelHelpers.export(exports, "MAX_LINE_NUMBER", function() {
    return MAX_LINE_NUMBER;
});
parcelHelpers.export(exports, "FoldingRegions", function() {
    return FoldingRegions;
});
parcelHelpers.export(exports, "FoldingRegion", function() {
    return FoldingRegion;
});
var _helpers = require("@swc/helpers");
var MAX_FOLDING_REGIONS = 0xFFFF;
var MAX_LINE_NUMBER = 0xFFFFFF;
var MASK_INDENT = 0xFF000000;
var FoldingRegions = /*#__PURE__*/ function() {
    "use strict";
    function FoldingRegions(startIndexes, endIndexes, types) {
        _helpers.classCallCheck(this, FoldingRegions);
        if (startIndexes.length !== endIndexes.length || startIndexes.length > MAX_FOLDING_REGIONS) throw new Error('invalid startIndexes or endIndexes size');
        this._startIndexes = startIndexes;
        this._endIndexes = endIndexes;
        this._collapseStates = new Uint32Array(Math.ceil(startIndexes.length / 32));
        this._types = types;
        this._parentsComputed = false;
    }
    _helpers.createClass(FoldingRegions, [
        {
            key: "ensureParentIndices",
            value: function ensureParentIndices() {
                if (!this._parentsComputed) {
                    var _this = this;
                    this._parentsComputed = true;
                    var parentIndexes = [];
                    var isInsideLast = function(startLineNumber, endLineNumber) {
                        var index = parentIndexes[parentIndexes.length - 1];
                        return _this.getStartLineNumber(index) <= startLineNumber && _this.getEndLineNumber(index) >= endLineNumber;
                    };
                    for(var i = 0, len = this._startIndexes.length; i < len; i++){
                        var startLineNumber1 = this._startIndexes[i];
                        var endLineNumber1 = this._endIndexes[i];
                        if (startLineNumber1 > MAX_LINE_NUMBER || endLineNumber1 > MAX_LINE_NUMBER) throw new Error('startLineNumber or endLineNumber must not exceed ' + MAX_LINE_NUMBER);
                        while(parentIndexes.length > 0 && !isInsideLast(startLineNumber1, endLineNumber1))parentIndexes.pop();
                        var parentIndex = parentIndexes.length > 0 ? parentIndexes[parentIndexes.length - 1] : -1;
                        parentIndexes.push(i);
                        this._startIndexes[i] = startLineNumber1 + ((parentIndex & 0xFF) << 24);
                        this._endIndexes[i] = endLineNumber1 + ((parentIndex & 0xFF00) << 16);
                    }
                }
            }
        },
        {
            key: "length",
            get: function get() {
                return this._startIndexes.length;
            }
        },
        {
            key: "getStartLineNumber",
            value: function getStartLineNumber(index) {
                return this._startIndexes[index] & MAX_LINE_NUMBER;
            }
        },
        {
            key: "getEndLineNumber",
            value: function getEndLineNumber(index) {
                return this._endIndexes[index] & MAX_LINE_NUMBER;
            }
        },
        {
            key: "getType",
            value: function getType(index) {
                return this._types ? this._types[index] : undefined;
            }
        },
        {
            key: "hasTypes",
            value: function hasTypes() {
                return !!this._types;
            }
        },
        {
            key: "isCollapsed",
            value: function isCollapsed(index) {
                var arrayIndex = index / 32 | 0;
                var bit = index % 32;
                return (this._collapseStates[arrayIndex] & 1 << bit) !== 0;
            }
        },
        {
            key: "setCollapsed",
            value: function setCollapsed(index, newState) {
                var arrayIndex = index / 32 | 0;
                var bit = index % 32;
                var value = this._collapseStates[arrayIndex];
                if (newState) this._collapseStates[arrayIndex] = value | 1 << bit;
                else this._collapseStates[arrayIndex] = value & ~(1 << bit);
            }
        },
        {
            key: "setCollapsedAllOfType",
            value: function setCollapsedAllOfType(type, newState) {
                var hasChanged = false;
                if (this._types) {
                    for(var i = 0; i < this._types.length; i++)if (this._types[i] === type) {
                        this.setCollapsed(i, newState);
                        hasChanged = true;
                    }
                }
                return hasChanged;
            }
        },
        {
            key: "toRegion",
            value: function toRegion(index) {
                return new FoldingRegion(this, index);
            }
        },
        {
            key: "getParentIndex",
            value: function getParentIndex(index) {
                this.ensureParentIndices();
                var parent = ((this._startIndexes[index] & MASK_INDENT) >>> 24) + ((this._endIndexes[index] & MASK_INDENT) >>> 16);
                if (parent === MAX_FOLDING_REGIONS) return -1;
                return parent;
            }
        },
        {
            key: "contains",
            value: function contains(index, line) {
                return this.getStartLineNumber(index) <= line && this.getEndLineNumber(index) >= line;
            }
        },
        {
            key: "findIndex",
            value: function findIndex(line) {
                var low = 0, high = this._startIndexes.length;
                if (high === 0) return -1; // no children
                while(low < high){
                    var mid = Math.floor((low + high) / 2);
                    if (line < this.getStartLineNumber(mid)) high = mid;
                    else low = mid + 1;
                }
                return low - 1;
            }
        },
        {
            key: "findRange",
            value: function findRange(line) {
                var index = this.findIndex(line);
                if (index >= 0) {
                    var endLineNumber = this.getEndLineNumber(index);
                    if (endLineNumber >= line) return index;
                    index = this.getParentIndex(index);
                    while(index !== -1){
                        if (this.contains(index, line)) return index;
                        index = this.getParentIndex(index);
                    }
                }
                return -1;
            }
        },
        {
            key: "toString",
            value: function toString() {
                var res = [];
                for(var i = 0; i < this.length; i++)res[i] = "[".concat(this.isCollapsed(i) ? '+' : '-', "] ").concat(this.getStartLineNumber(i), "/").concat(this.getEndLineNumber(i));
                return res.join(', ');
            }
        }
    ]);
    return FoldingRegions;
}();
var FoldingRegion = /*#__PURE__*/ function() {
    "use strict";
    function FoldingRegion(ranges, index) {
        _helpers.classCallCheck(this, FoldingRegion);
        this.ranges = ranges;
        this.index = index;
    }
    _helpers.createClass(FoldingRegion, [
        {
            key: "startLineNumber",
            get: function get() {
                return this.ranges.getStartLineNumber(this.index);
            }
        },
        {
            key: "endLineNumber",
            get: function get() {
                return this.ranges.getEndLineNumber(this.index);
            }
        },
        {
            key: "regionIndex",
            get: function get() {
                return this.index;
            }
        },
        {
            key: "parentIndex",
            get: function get() {
                return this.ranges.getParentIndex(this.index);
            }
        },
        {
            key: "isCollapsed",
            get: function get() {
                return this.ranges.isCollapsed(this.index);
            }
        },
        {
            key: "containedBy",
            value: function containedBy(range) {
                return range.startLineNumber <= this.startLineNumber && range.endLineNumber >= this.endLineNumber;
            }
        },
        {
            key: "containsLine",
            value: function containsLine(lineNumber) {
                return this.startLineNumber <= lineNumber && lineNumber <= this.endLineNumber;
            }
        }
    ]);
    return FoldingRegion;
}();

},{"@swc/helpers":"erO4s","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"t9igK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HiddenRangeModel", function() {
    return HiddenRangeModel;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _arraysJs = require("../../../base/common/arrays.js");
var _eventJs = require("../../../base/common/event.js");
var _rangeJs = require("../../common/core/range.js");
var _tokensStoreJs = require("../../common/model/tokensStore.js");
var HiddenRangeModel = /*#__PURE__*/ function() {
    "use strict";
    function HiddenRangeModel(model) {
        var _this = this;
        _helpers.classCallCheck(this, HiddenRangeModel);
        this._updateEventEmitter = new _eventJs.Emitter();
        this._hasLineChanges = false;
        this._foldingModel = model;
        this._foldingModelListener = model.onDidChange(function(_) {
            return _this.updateHiddenRanges();
        });
        this._hiddenRanges = [];
        if (model.regions.length) this.updateHiddenRanges();
    }
    _helpers.createClass(HiddenRangeModel, [
        {
            key: "onDidChange",
            get: function get() {
                return this._updateEventEmitter.event;
            }
        },
        {
            key: "hiddenRanges",
            get: function get() {
                return this._hiddenRanges;
            }
        },
        {
            key: "notifyChangeModelContent",
            value: function notifyChangeModelContent(e) {
                if (this._hiddenRanges.length && !this._hasLineChanges) this._hasLineChanges = e.changes.some(function(change) {
                    return change.range.endLineNumber !== change.range.startLineNumber || _tokensStoreJs.countEOL(change.text)[0] !== 0;
                });
            }
        },
        {
            key: "updateHiddenRanges",
            value: function updateHiddenRanges() {
                var updateHiddenAreas = false;
                var newHiddenAreas = [];
                var i = 0; // index into hidden
                var k = 0;
                var lastCollapsedStart = Number.MAX_VALUE;
                var lastCollapsedEnd = -1;
                var ranges = this._foldingModel.regions;
                for(; i < ranges.length; i++){
                    if (!ranges.isCollapsed(i)) continue;
                    var startLineNumber = ranges.getStartLineNumber(i) + 1; // the first line is not hidden
                    var endLineNumber = ranges.getEndLineNumber(i);
                    if (lastCollapsedStart <= startLineNumber && endLineNumber <= lastCollapsedEnd) continue;
                    if (!updateHiddenAreas && k < this._hiddenRanges.length && this._hiddenRanges[k].startLineNumber === startLineNumber && this._hiddenRanges[k].endLineNumber === endLineNumber) {
                        // reuse the old ranges
                        newHiddenAreas.push(this._hiddenRanges[k]);
                        k++;
                    } else {
                        updateHiddenAreas = true;
                        newHiddenAreas.push(new _rangeJs.Range(startLineNumber, 1, endLineNumber, 1));
                    }
                    lastCollapsedStart = startLineNumber;
                    lastCollapsedEnd = endLineNumber;
                }
                if (this._hasLineChanges || updateHiddenAreas || k < this._hiddenRanges.length) this.applyHiddenRanges(newHiddenAreas);
            }
        },
        {
            key: "applyMemento",
            value: function applyMemento(state) {
                if (!Array.isArray(state) || state.length === 0) return false;
                var hiddenRanges = [];
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = state[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var r = _step.value;
                        if (!r.startLineNumber || !r.endLineNumber) return false;
                        hiddenRanges.push(new _rangeJs.Range(r.startLineNumber + 1, 1, r.endLineNumber, 1));
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                this.applyHiddenRanges(hiddenRanges);
                return true;
            }
        },
        {
            /**
     * Collapse state memento, for persistence only, only used if folding model is not yet initialized
     */ key: "getMemento",
            value: function getMemento() {
                return this._hiddenRanges.map(function(r) {
                    return {
                        startLineNumber: r.startLineNumber - 1,
                        endLineNumber: r.endLineNumber
                    };
                });
            }
        },
        {
            key: "applyHiddenRanges",
            value: function applyHiddenRanges(newHiddenAreas) {
                this._hiddenRanges = newHiddenAreas;
                this._hasLineChanges = false;
                this._updateEventEmitter.fire(newHiddenAreas);
            }
        },
        {
            key: "hasRanges",
            value: function hasRanges() {
                return this._hiddenRanges.length > 0;
            }
        },
        {
            key: "isHidden",
            value: function isHidden(line) {
                return findRange(this._hiddenRanges, line) !== null;
            }
        },
        {
            key: "adjustSelections",
            value: function adjustSelections(selections) {
                var _this = this;
                var hasChanges = false;
                var editorModel = this._foldingModel.textModel;
                var lastRange = null;
                var adjustLine = function(line) {
                    if (!lastRange || !isInside(line, lastRange)) lastRange = findRange(_this._hiddenRanges, line);
                    if (lastRange) return lastRange.startLineNumber - 1;
                    return null;
                };
                for(var i = 0, len = selections.length; i < len; i++){
                    var selection = selections[i];
                    var adjustedStartLine = adjustLine(selection.startLineNumber);
                    if (adjustedStartLine) {
                        selection = selection.setStartPosition(adjustedStartLine, editorModel.getLineMaxColumn(adjustedStartLine));
                        hasChanges = true;
                    }
                    var adjustedEndLine = adjustLine(selection.endLineNumber);
                    if (adjustedEndLine) {
                        selection = selection.setEndPosition(adjustedEndLine, editorModel.getLineMaxColumn(adjustedEndLine));
                        hasChanges = true;
                    }
                    selections[i] = selection;
                }
                return hasChanges;
            }
        },
        {
            key: "dispose",
            value: function dispose() {
                if (this.hiddenRanges.length > 0) {
                    this._hiddenRanges = [];
                    this._updateEventEmitter.fire(this._hiddenRanges);
                }
                if (this._foldingModelListener) {
                    this._foldingModelListener.dispose();
                    this._foldingModelListener = null;
                }
            }
        }
    ]);
    return HiddenRangeModel;
}();
function isInside(line, range) {
    return line >= range.startLineNumber && line <= range.endLineNumber;
}
function findRange(ranges, line) {
    var i = _arraysJs.findFirstInSorted(ranges, function(r) {
        return line < r.startLineNumber;
    }) - 1;
    if (i >= 0 && ranges[i].endLineNumber >= line) return ranges[i];
    return null;
}

},{"@swc/helpers":"erO4s","../../../base/common/arrays.js":"bZs3E","../../../base/common/event.js":"9IBcK","../../common/core/range.js":"VbyL8","../../common/model/tokensStore.js":"kqgOO","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"5clWs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ID_INDENT_PROVIDER", function() {
    return ID_INDENT_PROVIDER;
});
parcelHelpers.export(exports, "IndentRangeProvider", function() {
    return IndentRangeProvider;
});
parcelHelpers.export(exports, "RangesCollector", function() {
    return RangesCollector;
});
parcelHelpers.export(exports, "computeRanges", function() {
    return computeRanges;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _textModelJs = require("../../common/model/textModel.js");
var _languageConfigurationRegistryJs = require("../../common/modes/languageConfigurationRegistry.js");
var _foldingRangesJs = require("./foldingRanges.js");
var MAX_FOLDING_REGIONS_FOR_INDENT_LIMIT = 5000;
var ID_INDENT_PROVIDER = 'indent';
var IndentRangeProvider = /*#__PURE__*/ function() {
    "use strict";
    function IndentRangeProvider(editorModel) {
        _helpers.classCallCheck(this, IndentRangeProvider);
        this.editorModel = editorModel;
        this.id = ID_INDENT_PROVIDER;
    }
    _helpers.createClass(IndentRangeProvider, [
        {
            key: "dispose",
            value: function dispose() {}
        },
        {
            key: "compute",
            value: function compute(cancelationToken) {
                var foldingRules = _languageConfigurationRegistryJs.LanguageConfigurationRegistry.getFoldingRules(this.editorModel.getLanguageId());
                var offSide = foldingRules && !!foldingRules.offSide;
                var markers = foldingRules && foldingRules.markers;
                return Promise.resolve(computeRanges(this.editorModel, offSide, markers));
            }
        }
    ]);
    return IndentRangeProvider;
}();
var RangesCollector = /*#__PURE__*/ function() {
    "use strict";
    function RangesCollector(foldingRangesLimit) {
        _helpers.classCallCheck(this, RangesCollector);
        this._startIndexes = [];
        this._endIndexes = [];
        this._indentOccurrences = [];
        this._length = 0;
        this._foldingRangesLimit = foldingRangesLimit;
    }
    _helpers.createClass(RangesCollector, [
        {
            key: "insertFirst",
            value: function insertFirst(startLineNumber, endLineNumber, indent) {
                if (startLineNumber > _foldingRangesJs.MAX_LINE_NUMBER || endLineNumber > _foldingRangesJs.MAX_LINE_NUMBER) return;
                var index = this._length;
                this._startIndexes[index] = startLineNumber;
                this._endIndexes[index] = endLineNumber;
                this._length++;
                if (indent < 1000) this._indentOccurrences[indent] = (this._indentOccurrences[indent] || 0) + 1;
            }
        },
        {
            key: "toIndentRanges",
            value: function toIndentRanges(model) {
                if (this._length <= this._foldingRangesLimit) {
                    // reverse and create arrays of the exact length
                    var startIndexes = new Uint32Array(this._length);
                    var endIndexes = new Uint32Array(this._length);
                    for(var i = this._length - 1, k = 0; i >= 0; i--, k++){
                        startIndexes[k] = this._startIndexes[i];
                        endIndexes[k] = this._endIndexes[i];
                    }
                    return new _foldingRangesJs.FoldingRegions(startIndexes, endIndexes);
                } else {
                    var entries = 0;
                    var maxIndent = this._indentOccurrences.length;
                    for(var i1 = 0; i1 < this._indentOccurrences.length; i1++){
                        var n = this._indentOccurrences[i1];
                        if (n) {
                            if (n + entries > this._foldingRangesLimit) {
                                maxIndent = i1;
                                break;
                            }
                            entries += n;
                        }
                    }
                    var tabSize = model.getOptions().tabSize;
                    // reverse and create arrays of the exact length
                    var startIndexes1 = new Uint32Array(this._foldingRangesLimit);
                    var endIndexes1 = new Uint32Array(this._foldingRangesLimit);
                    for(var i2 = this._length - 1, k1 = 0; i2 >= 0; i2--){
                        var startIndex = this._startIndexes[i2];
                        var lineContent = model.getLineContent(startIndex);
                        var indent = _textModelJs.TextModel.computeIndentLevel(lineContent, tabSize);
                        if (indent < maxIndent || indent === maxIndent && (entries++) < this._foldingRangesLimit) {
                            startIndexes1[k1] = startIndex;
                            endIndexes1[k1] = this._endIndexes[i2];
                            k1++;
                        }
                    }
                    return new _foldingRangesJs.FoldingRegions(startIndexes1, endIndexes1);
                }
            }
        }
    ]);
    return RangesCollector;
}();
function computeRanges(model, offSide, markers) {
    var foldingRangesLimit = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : MAX_FOLDING_REGIONS_FOR_INDENT_LIMIT;
    var tabSize = model.getOptions().tabSize;
    var result = new RangesCollector(foldingRangesLimit);
    var pattern = undefined;
    if (markers) pattern = new RegExp("(".concat(markers.start.source, ")|(?:").concat(markers.end.source, ")"));
    var previousRegions = [];
    var line = model.getLineCount() + 1;
    previousRegions.push({
        indent: -1,
        endAbove: line,
        line: line
    }); // sentinel, to make sure there's at least one entry
    for(var line1 = model.getLineCount(); line1 > 0; line1--){
        var lineContent = model.getLineContent(line1);
        var indent = _textModelJs.TextModel.computeIndentLevel(lineContent, tabSize);
        var previous = previousRegions[previousRegions.length - 1];
        if (indent === -1) {
            if (offSide) // for offSide languages, empty lines are associated to the previous block
            // note: the next block is already written to the results, so this only
            // impacts the end position of the block before
            previous.endAbove = line1;
            continue; // only whitespace
        }
        var m = void 0;
        if (pattern && (m = lineContent.match(pattern))) {
            // folding pattern match
            if (m[1]) {
                // discard all regions until the folding pattern
                var i = previousRegions.length - 1;
                while(i > 0 && previousRegions[i].indent !== -2)i--;
                if (i > 0) {
                    previousRegions.length = i + 1;
                    previous = previousRegions[i];
                    // new folding range from pattern, includes the end line
                    result.insertFirst(line1, previous.line, indent);
                    previous.line = line1;
                    previous.indent = indent;
                    previous.endAbove = line1;
                    continue;
                }
            } else {
                previousRegions.push({
                    indent: -2,
                    endAbove: line1,
                    line: line1
                });
                continue;
            }
        }
        if (previous.indent > indent) {
            // discard all regions with larger indent
            do {
                previousRegions.pop();
                previous = previousRegions[previousRegions.length - 1];
            }while (previous.indent > indent)
            // new folding range
            var endLineNumber = previous.endAbove - 1;
            if (endLineNumber - line1 >= 1) result.insertFirst(line1, endLineNumber, indent);
        }
        if (previous.indent === indent) previous.endAbove = line1;
        else // new region with a bigger indent
        previousRegions.push({
            indent: indent,
            endAbove: line1,
            line: line1
        });
    }
    return result.toIndentRanges(model);
}

},{"@swc/helpers":"erO4s","../../common/model/textModel.js":"f18vR","../../common/modes/languageConfigurationRegistry.js":"fdCRx","./foldingRanges.js":"aUzUc","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"lAb6x":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ID_INIT_PROVIDER", function() {
    return ID_INIT_PROVIDER;
});
parcelHelpers.export(exports, "InitializingRangeProvider", function() {
    return InitializingRangeProvider;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _syntaxRangeProviderJs = require("./syntaxRangeProvider.js");
var ID_INIT_PROVIDER = 'init';
var InitializingRangeProvider = /*#__PURE__*/ function() {
    "use strict";
    function InitializingRangeProvider(editorModel, initialRanges, onTimeout, timeoutTime) {
        _helpers.classCallCheck(this, InitializingRangeProvider);
        this.editorModel = editorModel;
        this.id = ID_INIT_PROVIDER;
        if (initialRanges.length) {
            var toDecorationRange = function(range) {
                return {
                    range: {
                        startLineNumber: range.startLineNumber,
                        startColumn: 0,
                        endLineNumber: range.endLineNumber,
                        endColumn: editorModel.getLineLength(range.endLineNumber)
                    },
                    options: {
                        description: 'folding-initializing-range-provider',
                        stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ 
                    }
                };
            };
            this.decorationIds = editorModel.deltaDecorations([], initialRanges.map(toDecorationRange));
            this.timeout = setTimeout(onTimeout, timeoutTime);
        }
    }
    _helpers.createClass(InitializingRangeProvider, [
        {
            key: "dispose",
            value: function dispose() {
                if (this.decorationIds) {
                    this.editorModel.deltaDecorations(this.decorationIds, []);
                    this.decorationIds = undefined;
                }
                if (typeof this.timeout === 'number') {
                    clearTimeout(this.timeout);
                    this.timeout = undefined;
                }
            }
        },
        {
            key: "compute",
            value: function compute(cancelationToken) {
                var foldingRangeData = [];
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                if (this.decorationIds) try {
                    for(var _iterator = this.decorationIds[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var id = _step.value;
                        var range = this.editorModel.getDecorationRange(id);
                        if (range) foldingRangeData.push({
                            start: range.startLineNumber,
                            end: range.endLineNumber,
                            rank: 1
                        });
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return Promise.resolve(_syntaxRangeProviderJs.sanitizeRanges(foldingRangeData, Number.MAX_VALUE));
            }
        }
    ]);
    return InitializingRangeProvider;
}();

},{"@swc/helpers":"erO4s","./syntaxRangeProvider.js":"01s2d","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"01s2d":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ID_SYNTAX_PROVIDER", function() {
    return ID_SYNTAX_PROVIDER;
});
parcelHelpers.export(exports, "SyntaxRangeProvider", function() {
    return SyntaxRangeProvider;
});
parcelHelpers.export(exports, "RangesCollector", function() {
    return RangesCollector;
});
parcelHelpers.export(exports, "sanitizeRanges", function() {
    return sanitizeRanges;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _errorsJs = require("../../../base/common/errors.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _foldingRangesJs = require("./foldingRanges.js");
var MAX_FOLDING_REGIONS = 5000;
var foldingContext = {};
var ID_SYNTAX_PROVIDER = 'syntax';
var SyntaxRangeProvider = /*#__PURE__*/ function() {
    "use strict";
    function SyntaxRangeProvider(editorModel, providers, handleFoldingRangesChange) {
        var limit = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : MAX_FOLDING_REGIONS;
        _helpers.classCallCheck(this, SyntaxRangeProvider);
        this.editorModel = editorModel;
        this.providers = providers;
        this.limit = limit;
        this.id = ID_SYNTAX_PROVIDER;
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = providers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var provider = _step.value;
                if (typeof provider.onDidChange === 'function') {
                    if (!this.disposables) this.disposables = new _lifecycleJs.DisposableStore();
                    this.disposables.add(provider.onDidChange(handleFoldingRangesChange));
                }
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
    }
    _helpers.createClass(SyntaxRangeProvider, [
        {
            key: "compute",
            value: function compute(cancellationToken) {
                var _this = this;
                return collectSyntaxRanges(this.providers, this.editorModel, cancellationToken).then(function(ranges) {
                    if (ranges) {
                        var res = sanitizeRanges(ranges, _this.limit);
                        return res;
                    }
                    return null;
                });
            }
        },
        {
            key: "dispose",
            value: function dispose() {
                var _a;
                (_a = this.disposables) === null || _a === void 0 || _a.dispose();
            }
        }
    ]);
    return SyntaxRangeProvider;
}();
function collectSyntaxRanges(providers, model, cancellationToken) {
    var rangeData = null;
    var promises = providers.map(function(provider, i) {
        return Promise.resolve(provider.provideFoldingRanges(model, foldingContext, cancellationToken)).then(function(ranges) {
            if (cancellationToken.isCancellationRequested) return;
            if (Array.isArray(ranges)) {
                if (!Array.isArray(rangeData)) rangeData = [];
                var nLines = model.getLineCount();
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = ranges[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var r = _step.value;
                        if (r.start > 0 && r.end > r.start && r.end <= nLines) rangeData.push({
                            start: r.start,
                            end: r.end,
                            rank: i,
                            kind: r.kind
                        });
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        }, _errorsJs.onUnexpectedExternalError);
    });
    return Promise.all(promises).then(function(_) {
        return rangeData;
    });
}
var RangesCollector = /*#__PURE__*/ function() {
    "use strict";
    function RangesCollector(foldingRangesLimit) {
        _helpers.classCallCheck(this, RangesCollector);
        this._startIndexes = [];
        this._endIndexes = [];
        this._nestingLevels = [];
        this._nestingLevelCounts = [];
        this._types = [];
        this._length = 0;
        this._foldingRangesLimit = foldingRangesLimit;
    }
    _helpers.createClass(RangesCollector, [
        {
            key: "add",
            value: function add(startLineNumber, endLineNumber, type, nestingLevel) {
                if (startLineNumber > _foldingRangesJs.MAX_LINE_NUMBER || endLineNumber > _foldingRangesJs.MAX_LINE_NUMBER) return;
                var index = this._length;
                this._startIndexes[index] = startLineNumber;
                this._endIndexes[index] = endLineNumber;
                this._nestingLevels[index] = nestingLevel;
                this._types[index] = type;
                this._length++;
                if (nestingLevel < 30) this._nestingLevelCounts[nestingLevel] = (this._nestingLevelCounts[nestingLevel] || 0) + 1;
            }
        },
        {
            key: "toIndentRanges",
            value: function toIndentRanges() {
                if (this._length <= this._foldingRangesLimit) {
                    var startIndexes = new Uint32Array(this._length);
                    var endIndexes = new Uint32Array(this._length);
                    for(var i = 0; i < this._length; i++){
                        startIndexes[i] = this._startIndexes[i];
                        endIndexes[i] = this._endIndexes[i];
                    }
                    return new _foldingRangesJs.FoldingRegions(startIndexes, endIndexes, this._types);
                } else {
                    var entries = 0;
                    var maxLevel = this._nestingLevelCounts.length;
                    for(var i1 = 0; i1 < this._nestingLevelCounts.length; i1++){
                        var n = this._nestingLevelCounts[i1];
                        if (n) {
                            if (n + entries > this._foldingRangesLimit) {
                                maxLevel = i1;
                                break;
                            }
                            entries += n;
                        }
                    }
                    var startIndexes1 = new Uint32Array(this._foldingRangesLimit);
                    var endIndexes1 = new Uint32Array(this._foldingRangesLimit);
                    var types = [];
                    for(var i2 = 0, k = 0; i2 < this._length; i2++){
                        var level = this._nestingLevels[i2];
                        if (level < maxLevel || level === maxLevel && (entries++) < this._foldingRangesLimit) {
                            startIndexes1[k] = this._startIndexes[i2];
                            endIndexes1[k] = this._endIndexes[i2];
                            types[k] = this._types[i2];
                            k++;
                        }
                    }
                    return new _foldingRangesJs.FoldingRegions(startIndexes1, endIndexes1, types);
                }
            }
        }
    ]);
    return RangesCollector;
}();
function sanitizeRanges(rangeData, limit) {
    var sorted = rangeData.sort(function(d1, d2) {
        var diff = d1.start - d2.start;
        if (diff === 0) diff = d1.rank - d2.rank;
        return diff;
    });
    var collector = new RangesCollector(limit);
    var top = undefined;
    var previous = [];
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = sorted[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var entry = _step.value;
            if (!top) {
                top = entry;
                collector.add(entry.start, entry.end, entry.kind && entry.kind.value, previous.length);
            } else if (entry.start > top.start) {
                if (entry.end <= top.end) {
                    previous.push(top);
                    top = entry;
                    collector.add(entry.start, entry.end, entry.kind && entry.kind.value, previous.length);
                } else {
                    if (entry.start > top.end) {
                        do top = previous.pop();
                        while (top && entry.start > top.end)
                        if (top) previous.push(top);
                        top = entry;
                    }
                    collector.add(entry.start, entry.end, entry.kind && entry.kind.value, previous.length);
                }
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    return collector.toIndentRanges();
}

},{"@swc/helpers":"erO4s","../../../base/common/errors.js":"afm4i","../../../base/common/lifecycle.js":"bcbPy","./foldingRanges.js":"aUzUc","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"jCsZS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "foldingExpandedIcon", function() {
    return foldingExpandedIcon;
});
parcelHelpers.export(exports, "foldingCollapsedIcon", function() {
    return foldingCollapsedIcon;
});
parcelHelpers.export(exports, "FoldingDecorationProvider", function() {
    return FoldingDecorationProvider;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _codiconsJs = require("../../../base/common/codicons.js");
var _textModelJs = require("../../common/model/textModel.js");
var _nlsJs = require("../../../nls.js");
var _iconRegistryJs = require("../../../platform/theme/common/iconRegistry.js");
var _themeServiceJs = require("../../../platform/theme/common/themeService.js");
var foldingExpandedIcon = _iconRegistryJs.registerIcon('folding-expanded', _codiconsJs.Codicon.chevronDown, _nlsJs.localize('foldingExpandedIcon', 'Icon for expanded ranges in the editor glyph margin.'));
var foldingCollapsedIcon = _iconRegistryJs.registerIcon('folding-collapsed', _codiconsJs.Codicon.chevronRight, _nlsJs.localize('foldingCollapsedIcon', 'Icon for collapsed ranges in the editor glyph margin.'));
var FoldingDecorationProvider = /*#__PURE__*/ function() {
    "use strict";
    function FoldingDecorationProvider(editor) {
        _helpers.classCallCheck(this, FoldingDecorationProvider);
        this.editor = editor;
        this.autoHideFoldingControls = true;
        this.showFoldingHighlights = true;
    }
    _helpers.createClass(FoldingDecorationProvider, [
        {
            key: "getDecorationOption",
            value: function getDecorationOption(isCollapsed, isHidden) {
                if (isHidden) return FoldingDecorationProvider.HIDDEN_RANGE_DECORATION;
                if (isCollapsed) return this.showFoldingHighlights ? FoldingDecorationProvider.COLLAPSED_HIGHLIGHTED_VISUAL_DECORATION : FoldingDecorationProvider.COLLAPSED_VISUAL_DECORATION;
                else if (this.autoHideFoldingControls) return FoldingDecorationProvider.EXPANDED_AUTO_HIDE_VISUAL_DECORATION;
                else return FoldingDecorationProvider.EXPANDED_VISUAL_DECORATION;
            }
        },
        {
            key: "deltaDecorations",
            value: function deltaDecorations(oldDecorations, newDecorations) {
                return this.editor.deltaDecorations(oldDecorations, newDecorations);
            }
        },
        {
            key: "changeDecorations",
            value: function changeDecorations(callback) {
                return this.editor.changeDecorations(callback);
            }
        }
    ]);
    return FoldingDecorationProvider;
}();
FoldingDecorationProvider.COLLAPSED_VISUAL_DECORATION = _textModelJs.ModelDecorationOptions.register({
    description: 'folding-collapsed-visual-decoration',
    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
    afterContentClassName: 'inline-folded',
    isWholeLine: true,
    firstLineDecorationClassName: _themeServiceJs.ThemeIcon.asClassName(foldingCollapsedIcon)
});
FoldingDecorationProvider.COLLAPSED_HIGHLIGHTED_VISUAL_DECORATION = _textModelJs.ModelDecorationOptions.register({
    description: 'folding-collapsed-highlighted-visual-decoration',
    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
    afterContentClassName: 'inline-folded',
    className: 'folded-background',
    isWholeLine: true,
    firstLineDecorationClassName: _themeServiceJs.ThemeIcon.asClassName(foldingCollapsedIcon)
});
FoldingDecorationProvider.EXPANDED_AUTO_HIDE_VISUAL_DECORATION = _textModelJs.ModelDecorationOptions.register({
    description: 'folding-expanded-auto-hide-visual-decoration',
    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
    isWholeLine: true,
    firstLineDecorationClassName: _themeServiceJs.ThemeIcon.asClassName(foldingExpandedIcon)
});
FoldingDecorationProvider.EXPANDED_VISUAL_DECORATION = _textModelJs.ModelDecorationOptions.register({
    description: 'folding-expanded-visual-decoration',
    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
    isWholeLine: true,
    firstLineDecorationClassName: 'alwaysShowFoldIcons ' + _themeServiceJs.ThemeIcon.asClassName(foldingExpandedIcon)
});
FoldingDecorationProvider.HIDDEN_RANGE_DECORATION = _textModelJs.ModelDecorationOptions.register({
    description: 'folding-hidden-range-decoration',
    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ 
});

},{"@swc/helpers":"erO4s","../../../base/common/codicons.js":"j24JC","../../common/model/textModel.js":"f18vR","../../../nls.js":"9djYb","../../../platform/theme/common/iconRegistry.js":"evGtc","../../../platform/theme/common/themeService.js":"kE7QB","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"lIHX7":[function(require,module,exports) {
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _editorExtensionsJs = require("../../browser/editorExtensions.js");
var _editorZoomJs = require("../../common/config/editorZoom.js");
var _nlsJs = require("../../../nls.js");
var EditorFontZoomIn = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(EditorFontZoomIn, EditorAction);
    var _super = _helpers.createSuper(EditorFontZoomIn);
    function EditorFontZoomIn() {
        _helpers.classCallCheck(this, EditorFontZoomIn);
        return _super.call(this, {
            id: 'editor.action.fontZoomIn',
            label: _nlsJs.localize('EditorFontZoomIn.label', "Editor Font Zoom In"),
            alias: 'Editor Font Zoom In',
            precondition: undefined
        });
    }
    _helpers.createClass(EditorFontZoomIn, [
        {
            key: "run",
            value: function run(accessor, editor) {
                _editorZoomJs.EditorZoom.setZoomLevel(_editorZoomJs.EditorZoom.getZoomLevel() + 1);
            }
        }
    ]);
    return EditorFontZoomIn;
}(_editorExtensionsJs.EditorAction);
var EditorFontZoomOut = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(EditorFontZoomOut, EditorAction);
    var _super = _helpers.createSuper(EditorFontZoomOut);
    function EditorFontZoomOut() {
        _helpers.classCallCheck(this, EditorFontZoomOut);
        return _super.call(this, {
            id: 'editor.action.fontZoomOut',
            label: _nlsJs.localize('EditorFontZoomOut.label', "Editor Font Zoom Out"),
            alias: 'Editor Font Zoom Out',
            precondition: undefined
        });
    }
    _helpers.createClass(EditorFontZoomOut, [
        {
            key: "run",
            value: function run(accessor, editor) {
                _editorZoomJs.EditorZoom.setZoomLevel(_editorZoomJs.EditorZoom.getZoomLevel() - 1);
            }
        }
    ]);
    return EditorFontZoomOut;
}(_editorExtensionsJs.EditorAction);
var EditorFontZoomReset = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(EditorFontZoomReset, EditorAction);
    var _super = _helpers.createSuper(EditorFontZoomReset);
    function EditorFontZoomReset() {
        _helpers.classCallCheck(this, EditorFontZoomReset);
        return _super.call(this, {
            id: 'editor.action.fontZoomReset',
            label: _nlsJs.localize('EditorFontZoomReset.label', "Editor Font Zoom Reset"),
            alias: 'Editor Font Zoom Reset',
            precondition: undefined
        });
    }
    _helpers.createClass(EditorFontZoomReset, [
        {
            key: "run",
            value: function run(accessor, editor) {
                _editorZoomJs.EditorZoom.setZoomLevel(0);
            }
        }
    ]);
    return EditorFontZoomReset;
}(_editorExtensionsJs.EditorAction);
_editorExtensionsJs.registerEditorAction(EditorFontZoomIn);
_editorExtensionsJs.registerEditorAction(EditorFontZoomOut);
_editorExtensionsJs.registerEditorAction(EditorFontZoomReset);

},{"@swc/helpers":"erO4s","../../browser/editorExtensions.js":"dFnlo","../../common/config/editorZoom.js":"gxzCp","../../../nls.js":"9djYb"}],"eT27D":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
var _arraysJs = require("../../../base/common/arrays.js");
var _cancellationJs = require("../../../base/common/cancellation.js");
var _errorsJs = require("../../../base/common/errors.js");
var _keyCodesJs = require("../../../base/common/keyCodes.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _editorExtensionsJs = require("../../browser/editorExtensions.js");
var _codeEditorServiceJs = require("../../browser/services/codeEditorService.js");
var _characterClassifierJs = require("../../common/core/characterClassifier.js");
var _rangeJs = require("../../common/core/range.js");
var _editorContextKeysJs = require("../../common/editorContextKeys.js");
var _modesJs = require("../../common/modes.js");
var _editorWorkerServiceJs = require("../../common/services/editorWorkerService.js");
var _formatJs = require("./format.js");
var _formattingEditJs = require("./formattingEdit.js");
var _nlsJs = require("../../../nls.js");
var _commandsJs = require("../../../platform/commands/common/commands.js");
var _contextkeyJs = require("../../../platform/contextkey/common/contextkey.js");
var _instantiationJs = require("../../../platform/instantiation/common/instantiation.js");
var _progressJs = require("../../../platform/progress/common/progress.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var FormatOnType = /*#__PURE__*/ function() {
    "use strict";
    function FormatOnType1(editor, _workerService) {
        var _this = this;
        _helpers.classCallCheck(this, FormatOnType1);
        this._workerService = _workerService;
        this._callOnDispose = new _lifecycleJs.DisposableStore();
        this._callOnModel = new _lifecycleJs.DisposableStore();
        this._editor = editor;
        this._callOnDispose.add(editor.onDidChangeConfiguration(function() {
            return _this._update();
        }));
        this._callOnDispose.add(editor.onDidChangeModel(function() {
            return _this._update();
        }));
        this._callOnDispose.add(editor.onDidChangeModelLanguage(function() {
            return _this._update();
        }));
        this._callOnDispose.add(_modesJs.OnTypeFormattingEditProviderRegistry.onDidChange(this._update, this));
    }
    _helpers.createClass(FormatOnType1, [
        {
            key: "dispose",
            value: function dispose() {
                this._callOnDispose.dispose();
                this._callOnModel.dispose();
            }
        },
        {
            key: "_update",
            value: function _update() {
                var _this = this;
                // clean up
                this._callOnModel.clear();
                // we are disabled
                if (!this._editor.getOption(48 /* formatOnType */ )) return;
                // no model
                if (!this._editor.hasModel()) return;
                var model = this._editor.getModel();
                // no support
                var ref = _helpers.slicedToArray(_modesJs.OnTypeFormattingEditProviderRegistry.ordered(model), 1), support = ref[0];
                if (!support || !support.autoFormatTriggerCharacters) return;
                // register typing listeners that will trigger the format
                var triggerChars = new _characterClassifierJs.CharacterSet();
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = support.autoFormatTriggerCharacters[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var ch = _step.value;
                        triggerChars.add(ch.charCodeAt(0));
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                this._callOnModel.add(this._editor.onDidType(function(text) {
                    var lastCharCode = text.charCodeAt(text.length - 1);
                    if (triggerChars.has(lastCharCode)) _this._trigger(String.fromCharCode(lastCharCode));
                }));
            }
        },
        {
            key: "_trigger",
            value: function _trigger(ch) {
                var _this = this;
                if (!this._editor.hasModel()) return;
                if (this._editor.getSelections().length > 1 || !this._editor.getSelection().isEmpty()) return;
                var model = this._editor.getModel();
                var position = this._editor.getPosition();
                var canceled = false;
                // install a listener that checks if edits happens before the
                // position on which we format right now. If so, we won't
                // apply the format edits
                var unbind = this._editor.onDidChangeModelContent(function(e) {
                    if (e.isFlush) {
                        // a model.setValue() was called
                        // cancel only once
                        canceled = true;
                        unbind.dispose();
                        return;
                    }
                    for(var i = 0, len = e.changes.length; i < len; i++){
                        var change = e.changes[i];
                        if (change.range.endLineNumber <= position.lineNumber) {
                            // cancel only once
                            canceled = true;
                            unbind.dispose();
                            return;
                        }
                    }
                });
                _formatJs.getOnTypeFormattingEdits(this._workerService, model, position, ch, model.getFormattingOptions()).then(function(edits) {
                    unbind.dispose();
                    if (canceled) return;
                    if (_arraysJs.isNonEmptyArray(edits)) {
                        _formattingEditJs.FormattingEdit.execute(_this._editor, edits, true);
                        _formatJs.alertFormattingEdits(edits);
                    }
                }, function(err) {
                    unbind.dispose();
                    throw err;
                });
            }
        }
    ]);
    return FormatOnType1;
}();
FormatOnType.ID = 'editor.contrib.autoFormat';
FormatOnType = __decorate([
    __param(1, _editorWorkerServiceJs.IEditorWorkerService)
], FormatOnType);
var FormatOnPaste = /*#__PURE__*/ function() {
    "use strict";
    function FormatOnPaste1(editor, _instantiationService) {
        var _this = this;
        _helpers.classCallCheck(this, FormatOnPaste1);
        this.editor = editor;
        this._instantiationService = _instantiationService;
        this._callOnDispose = new _lifecycleJs.DisposableStore();
        this._callOnModel = new _lifecycleJs.DisposableStore();
        this._callOnDispose.add(editor.onDidChangeConfiguration(function() {
            return _this._update();
        }));
        this._callOnDispose.add(editor.onDidChangeModel(function() {
            return _this._update();
        }));
        this._callOnDispose.add(editor.onDidChangeModelLanguage(function() {
            return _this._update();
        }));
        this._callOnDispose.add(_modesJs.DocumentRangeFormattingEditProviderRegistry.onDidChange(this._update, this));
    }
    _helpers.createClass(FormatOnPaste1, [
        {
            key: "dispose",
            value: function dispose() {
                this._callOnDispose.dispose();
                this._callOnModel.dispose();
            }
        },
        {
            key: "_update",
            value: function _update() {
                var _this = this;
                // clean up
                this._callOnModel.clear();
                // we are disabled
                if (!this.editor.getOption(47 /* formatOnPaste */ )) return;
                // no model
                if (!this.editor.hasModel()) return;
                // no formatter
                if (!_modesJs.DocumentRangeFormattingEditProviderRegistry.has(this.editor.getModel())) return;
                this._callOnModel.add(this.editor.onDidPaste(function(param) {
                    var range = param.range;
                    return _this._trigger(range);
                }));
            }
        },
        {
            key: "_trigger",
            value: function _trigger(range) {
                if (!this.editor.hasModel()) return;
                if (this.editor.getSelections().length > 1) return;
                this._instantiationService.invokeFunction(_formatJs.formatDocumentRangesWithSelectedProvider, this.editor, range, 2 /* Silent */ , _progressJs.Progress.None, _cancellationJs.CancellationToken.None).catch(_errorsJs.onUnexpectedError);
            }
        }
    ]);
    return FormatOnPaste1;
}();
FormatOnPaste.ID = 'editor.contrib.formatOnPaste';
FormatOnPaste = __decorate([
    __param(1, _instantiationJs.IInstantiationService)
], FormatOnPaste);
var FormatDocumentAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(FormatDocumentAction, EditorAction);
    var _super = _helpers.createSuper(FormatDocumentAction);
    function FormatDocumentAction() {
        _helpers.classCallCheck(this, FormatDocumentAction);
        return _super.call(this, {
            id: 'editor.action.formatDocument',
            label: _nlsJs.localize('formatDocument.label', "Format Document"),
            alias: 'Format Document',
            precondition: _contextkeyJs.ContextKeyExpr.and(_editorContextKeysJs.EditorContextKeys.notInCompositeEditor, _editorContextKeysJs.EditorContextKeys.writable, _editorContextKeysJs.EditorContextKeys.hasDocumentFormattingProvider),
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: 1572 /* KeyF */ ,
                linux: {
                    primary: 3111 /* KeyI */ 
                },
                weight: 100 /* EditorContrib */ 
            },
            contextMenuOpts: {
                group: '1_modification',
                order: 1.3
            }
        });
    }
    _helpers.createClass(FormatDocumentAction, [
        {
            key: "run",
            value: function run(accessor, editor) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var instaService, progressService;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                if (!editor.hasModel()) {
                                    _ctx.next = 5;
                                    break;
                                }
                                instaService = accessor.get(_instantiationJs.IInstantiationService);
                                progressService = accessor.get(_progressJs.IEditorProgressService);
                                _ctx.next = 5;
                                return progressService.showWhile(instaService.invokeFunction(_formatJs.formatDocumentWithSelectedProvider, editor, 1 /* Explicit */ , _progressJs.Progress.None, _cancellationJs.CancellationToken.None), 250);
                            case 5:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee);
                }));
            }
        }
    ]);
    return FormatDocumentAction;
}(_editorExtensionsJs.EditorAction);
var FormatSelectionAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(FormatSelectionAction, EditorAction);
    var _super = _helpers.createSuper(FormatSelectionAction);
    function FormatSelectionAction() {
        _helpers.classCallCheck(this, FormatSelectionAction);
        return _super.call(this, {
            id: 'editor.action.formatSelection',
            label: _nlsJs.localize('formatSelection.label', "Format Selection"),
            alias: 'Format Selection',
            precondition: _contextkeyJs.ContextKeyExpr.and(_editorContextKeysJs.EditorContextKeys.writable, _editorContextKeysJs.EditorContextKeys.hasDocumentSelectionFormattingProvider),
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: _keyCodesJs.KeyChord(2089 /* KeyK */ , 2084 /* KeyF */ ),
                weight: 100 /* EditorContrib */ 
            },
            contextMenuOpts: {
                when: _editorContextKeysJs.EditorContextKeys.hasNonEmptySelection,
                group: '1_modification',
                order: 1.31
            }
        });
    }
    _helpers.createClass(FormatSelectionAction, [
        {
            key: "run",
            value: function run(accessor, editor) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var instaService, model, ranges, progressService;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                if (editor.hasModel()) {
                                    _ctx.next = 2;
                                    break;
                                }
                                return _ctx.abrupt("return");
                            case 2:
                                instaService = accessor.get(_instantiationJs.IInstantiationService);
                                model = editor.getModel();
                                ranges = editor.getSelections().map(function(range) {
                                    return range.isEmpty() ? new _rangeJs.Range(range.startLineNumber, 1, range.startLineNumber, model.getLineMaxColumn(range.startLineNumber)) : range;
                                });
                                progressService = accessor.get(_progressJs.IEditorProgressService);
                                _ctx.next = 8;
                                return progressService.showWhile(instaService.invokeFunction(_formatJs.formatDocumentRangesWithSelectedProvider, editor, ranges, 1 /* Explicit */ , _progressJs.Progress.None, _cancellationJs.CancellationToken.None), 250);
                            case 8:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee);
                }));
            }
        }
    ]);
    return FormatSelectionAction;
}(_editorExtensionsJs.EditorAction);
_editorExtensionsJs.registerEditorContribution(FormatOnType.ID, FormatOnType);
_editorExtensionsJs.registerEditorContribution(FormatOnPaste.ID, FormatOnPaste);
_editorExtensionsJs.registerEditorAction(FormatDocumentAction);
_editorExtensionsJs.registerEditorAction(FormatSelectionAction);
// this is the old format action that does both (format document OR format selection)
// and we keep it here such that existing keybinding configurations etc will still work
_commandsJs.CommandsRegistry.registerCommand('editor.action.format', function(accessor) {
    return __awaiter(void 0, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
        var editor, commandService;
        return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
            while(1)switch(_ctx.prev = _ctx.next){
                case 0:
                    editor = accessor.get(_codeEditorServiceJs.ICodeEditorService).getFocusedCodeEditor();
                    if (!(!editor || !editor.hasModel())) {
                        _ctx.next = 3;
                        break;
                    }
                    return _ctx.abrupt("return");
                case 3:
                    commandService = accessor.get(_commandsJs.ICommandService);
                    if (!editor.getSelection().isEmpty()) {
                        _ctx.next = 9;
                        break;
                    }
                    _ctx.next = 7;
                    return commandService.executeCommand('editor.action.formatDocument');
                case 7:
                    _ctx.next = 11;
                    break;
                case 9:
                    _ctx.next = 11;
                    return commandService.executeCommand('editor.action.formatSelection');
                case 11:
                case "end":
                    return _ctx.stop();
            }
        }, _callee);
    }));
});

},{"@swc/helpers":"erO4s","regenerator-runtime":"12Ae8","../../../base/common/arrays.js":"bZs3E","../../../base/common/cancellation.js":"1C4LY","../../../base/common/errors.js":"afm4i","../../../base/common/keyCodes.js":"4hRDv","../../../base/common/lifecycle.js":"bcbPy","../../browser/editorExtensions.js":"dFnlo","../../browser/services/codeEditorService.js":"izkTN","../../common/core/characterClassifier.js":"ewW0b","../../common/core/range.js":"VbyL8","../../common/editorContextKeys.js":"2t2PW","../../common/modes.js":"bRbY1","../../common/services/editorWorkerService.js":"jXu2E","./format.js":"6p8DY","./formattingEdit.js":"c9irQ","../../../nls.js":"9djYb","../../../platform/commands/common/commands.js":"eeuTC","../../../platform/contextkey/common/contextkey.js":"5cjav","../../../platform/instantiation/common/instantiation.js":"9ABZB","../../../platform/progress/common/progress.js":"dJdAd","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"b3pN7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getDocumentSymbols", function() {
    return getDocumentSymbols;
});
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
var _cancellationJs = require("../../../base/common/cancellation.js");
var _typesJs = require("../../../base/common/types.js");
var _uriJs = require("../../../base/common/uri.js");
var _modelServiceJs = require("../../common/services/modelService.js");
var _resolverServiceJs = require("../../common/services/resolverService.js");
var _outlineModelJs = require("./outlineModel.js");
var _commandsJs = require("../../../platform/commands/common/commands.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function getDocumentSymbols(document, flat, token) {
    return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
        var model;
        return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
            while(1)switch(_ctx.prev = _ctx.next){
                case 0:
                    _ctx.next = 2;
                    return _outlineModelJs.OutlineModel.create(document, token);
                case 2:
                    model = _ctx.sent;
                    return _ctx.abrupt("return", flat ? model.asListOfDocumentSymbols() : model.getTopLevelSymbols());
                case 4:
                case "end":
                    return _ctx.stop();
            }
        }, _callee);
    }));
}
_commandsJs.CommandsRegistry.registerCommand('_executeDocumentSymbolProvider', function(accessor) {
    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
        args[_key - 1] = arguments[_key];
    }
    return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
        var _args, resource, model, reference;
        return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
            while(1)switch(_ctx.prev = _ctx.next){
                case 0:
                    _args = _helpers.slicedToArray(args, 1), resource = _args[0];
                    _typesJs.assertType(_uriJs.URI.isUri(resource));
                    model = accessor.get(_modelServiceJs.IModelService).getModel(resource);
                    if (!model) {
                        _ctx.next = 5;
                        break;
                    }
                    return _ctx.abrupt("return", getDocumentSymbols(model, false, _cancellationJs.CancellationToken.None));
                case 5:
                    _ctx.next = 7;
                    return accessor.get(_resolverServiceJs.ITextModelService).createModelReference(resource);
                case 7:
                    reference = _ctx.sent;
                    _ctx.prev = 8;
                    _ctx.next = 11;
                    return getDocumentSymbols(reference.object.textEditorModel, false, _cancellationJs.CancellationToken.None);
                case 11:
                    return _ctx.abrupt("return", _ctx.sent);
                case 12:
                    _ctx.prev = 12;
                    reference.dispose();
                    return _ctx.finish(12);
                case 15:
                case "end":
                    return _ctx.stop();
            }
        }, _callee, null, [
            [
                8,
                ,
                12,
                15
            ]
        ]);
    }));
});

},{"@swc/helpers":"erO4s","regenerator-runtime":"12Ae8","../../../base/common/cancellation.js":"1C4LY","../../../base/common/types.js":"lF7Cj","../../../base/common/uri.js":"4ZDLf","../../common/services/modelService.js":"HyRTJ","../../common/services/resolverService.js":"944WH","./outlineModel.js":"lQeld","../../../platform/commands/common/commands.js":"eeuTC","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"lQeld":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TreeElement", function() {
    return TreeElement;
});
parcelHelpers.export(exports, "OutlineElement", function() {
    return OutlineElement;
});
parcelHelpers.export(exports, "OutlineGroup", function() {
    return OutlineGroup;
});
parcelHelpers.export(exports, "OutlineModel", function() {
    return OutlineModel;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _arraysJs = require("../../../base/common/arrays.js");
var _cancellationJs = require("../../../base/common/cancellation.js");
var _errorsJs = require("../../../base/common/errors.js");
var _iteratorJs = require("../../../base/common/iterator.js");
var _mapJs = require("../../../base/common/map.js");
var _rangeJs = require("../../common/core/range.js");
var _modesJs = require("../../common/modes.js");
var _languageFeatureRegistryJs = require("../../common/modes/languageFeatureRegistry.js");
var TreeElement = /*#__PURE__*/ function() {
    "use strict";
    function TreeElement() {
        _helpers.classCallCheck(this, TreeElement);
    }
    _helpers.createClass(TreeElement, [
        {
            key: "remove",
            value: function remove() {
                if (this.parent) this.parent.children.delete(this.id);
            }
        }
    ], [
        {
            key: "findId",
            value: function findId(candidate, container) {
                // complex id-computation which contains the origin/extension,
                // the parent path, and some dedupe logic when names collide
                var candidateId;
                if (typeof candidate === 'string') candidateId = "".concat(container.id, "/").concat(candidate);
                else {
                    candidateId = "".concat(container.id, "/").concat(candidate.name);
                    if (container.children.get(candidateId) !== undefined) candidateId = "".concat(container.id, "/").concat(candidate.name, "_").concat(candidate.range.startLineNumber, "_").concat(candidate.range.startColumn);
                }
                var id = candidateId;
                for(var i = 0; container.children.get(id) !== undefined; i++)id = "".concat(candidateId, "_").concat(i);
                return id;
            }
        },
        {
            key: "empty",
            value: function empty(element) {
                return element.children.size === 0;
            }
        }
    ]);
    return TreeElement;
}();
var OutlineElement = /*#__PURE__*/ function(TreeElement) {
    "use strict";
    _helpers.inherits(OutlineElement, TreeElement);
    var _super = _helpers.createSuper(OutlineElement);
    function OutlineElement(id, parent, symbol) {
        _helpers.classCallCheck(this, OutlineElement);
        var _this;
        _this = _super.call(this);
        _this.id = id;
        _this.parent = parent;
        _this.symbol = symbol;
        _this.children = new Map();
        return _this;
    }
    return OutlineElement;
}(TreeElement);
var OutlineGroup = /*#__PURE__*/ function(TreeElement) {
    "use strict";
    _helpers.inherits(OutlineGroup, TreeElement);
    var _super = _helpers.createSuper(OutlineGroup);
    function OutlineGroup(id, parent, label, order) {
        _helpers.classCallCheck(this, OutlineGroup);
        var _this;
        _this = _super.call(this);
        _this.id = id;
        _this.parent = parent;
        _this.label = label;
        _this.order = order;
        _this.children = new Map();
        return _this;
    }
    return OutlineGroup;
}(TreeElement);
var OutlineModel = /*#__PURE__*/ function(TreeElement1) {
    "use strict";
    _helpers.inherits(OutlineModel, TreeElement1);
    var _super = _helpers.createSuper(OutlineModel);
    function OutlineModel(uri) {
        _helpers.classCallCheck(this, OutlineModel);
        var _this;
        _this = _super.call(this);
        _this.uri = uri;
        _this.id = 'root';
        _this.parent = undefined;
        _this._groups = new Map();
        _this.children = new Map();
        _this.id = 'root';
        _this.parent = undefined;
        return _this;
    }
    _helpers.createClass(OutlineModel, [
        {
            key: "_compact",
            value: function _compact() {
                var count = 0;
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this._groups[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var _value = _helpers.slicedToArray(_step.value, 2), key = _value[0], group = _value[1];
                        if (group.children.size === 0) this._groups.delete(key);
                        else count += 1;
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                if (count !== 1) //
                this.children = this._groups;
                else {
                    // adopt all elements of the first group
                    var group1 = _iteratorJs.Iterable.first(this._groups.values());
                    var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                    try {
                        for(var _iterator1 = group1.children[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                            var _value1 = _helpers.slicedToArray(_step1.value, 2), child = _value1[1];
                            child.parent = this;
                            this.children.set(child.id, child);
                        }
                    } catch (err) {
                        _didIteratorError1 = true;
                        _iteratorError1 = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                                _iterator1.return();
                            }
                        } finally{
                            if (_didIteratorError1) {
                                throw _iteratorError1;
                            }
                        }
                    }
                }
                return this;
            }
        },
        {
            key: "getTopLevelSymbols",
            value: function getTopLevelSymbols() {
                var _roots;
                var roots = [];
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.children.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var child1 = _step.value;
                        if (child1 instanceof OutlineElement) roots.push(child1.symbol);
                        else (_roots = roots).push.apply(_roots, _helpers.toConsumableArray(_iteratorJs.Iterable.map(child1.children.values(), function(child) {
                            return child.symbol;
                        })));
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return roots.sort(function(a, b) {
                    return _rangeJs.Range.compareRangesUsingStarts(a.range, b.range);
                });
            }
        },
        {
            key: "asListOfDocumentSymbols",
            value: function asListOfDocumentSymbols() {
                var roots = this.getTopLevelSymbols();
                var bucket = [];
                OutlineModel._flattenDocumentSymbols(bucket, roots, '');
                return bucket.sort(function(a, b) {
                    return _rangeJs.Range.compareRangesUsingStarts(a.range, b.range);
                });
            }
        }
    ], [
        {
            key: "create",
            value: function create(textModel, token) {
                var key = this._keys.for(textModel, true);
                var data = OutlineModel._requests.get(key);
                if (!data) {
                    var _this = this;
                    var source = new _cancellationJs.CancellationTokenSource();
                    data = {
                        promiseCnt: 0,
                        source: source,
                        promise: OutlineModel._create(textModel, source.token),
                        model: undefined
                    };
                    OutlineModel._requests.set(key, data);
                    // keep moving average of request durations
                    var now = Date.now();
                    data.promise.then(function() {
                        _this._requestDurations.update(textModel, Date.now() - now);
                    });
                }
                if (data.model) // resolved -> return data
                return Promise.resolve(data.model);
                // increase usage counter
                data.promiseCnt += 1;
                token.onCancellationRequested(function() {
                    // last -> cancel provider request, remove cached promise
                    if (--data.promiseCnt === 0) {
                        data.source.cancel();
                        OutlineModel._requests.delete(key);
                    }
                });
                return new Promise(function(resolve, reject) {
                    data.promise.then(function(model) {
                        data.model = model;
                        resolve(model);
                    }, function(err) {
                        OutlineModel._requests.delete(key);
                        reject(err);
                    });
                });
            }
        },
        {
            key: "_create",
            value: function _create(textModel, token) {
                var cts = new _cancellationJs.CancellationTokenSource(token);
                var result1 = new OutlineModel(textModel.uri);
                var provider1 = _modesJs.DocumentSymbolProviderRegistry.ordered(textModel);
                var promises = provider1.map(function(provider, index) {
                    var _a;
                    var id = TreeElement.findId("provider_".concat(index), result1);
                    var group2 = new OutlineGroup(id, result1, (_a = provider.displayName) !== null && _a !== void 0 ? _a : 'Unknown Outline Provider', index);
                    return Promise.resolve(provider.provideDocumentSymbols(textModel, cts.token)).then(function(result) {
                        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                        try {
                            for(var _iterator = (result || [])[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                                var info = _step.value;
                                OutlineModel._makeOutlineElement(info, group2);
                            }
                        } catch (err) {
                            _didIteratorError = true;
                            _iteratorError = err;
                        } finally{
                            try {
                                if (!_iteratorNormalCompletion && _iterator.return != null) {
                                    _iterator.return();
                                }
                            } finally{
                                if (_didIteratorError) {
                                    throw _iteratorError;
                                }
                            }
                        }
                        return group2;
                    }, function(err) {
                        _errorsJs.onUnexpectedExternalError(err);
                        return group2;
                    }).then(function(group) {
                        if (!TreeElement.empty(group)) result1._groups.set(id, group);
                        else group.remove();
                    });
                });
                var listener = _modesJs.DocumentSymbolProviderRegistry.onDidChange(function() {
                    var newProvider = _modesJs.DocumentSymbolProviderRegistry.ordered(textModel);
                    if (!_arraysJs.equals(newProvider, provider1)) cts.cancel();
                });
                return Promise.all(promises).then(function() {
                    if (cts.token.isCancellationRequested && !token.isCancellationRequested) return OutlineModel._create(textModel, token);
                    else return result1._compact();
                }).finally(function() {
                    listener.dispose();
                });
            }
        },
        {
            key: "_makeOutlineElement",
            value: function _makeOutlineElement(info, container) {
                var id = TreeElement.findId(info, container);
                var res = new OutlineElement(id, container, info);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                if (info.children) try {
                    for(var _iterator = info.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var childInfo = _step.value;
                        OutlineModel._makeOutlineElement(childInfo, res);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                container.children.set(res.id, res);
            }
        },
        {
            key: "_flattenDocumentSymbols",
            value: function _flattenDocumentSymbols(bucket, entries, overrideContainerLabel) {
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = entries[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var entry = _step.value;
                        bucket.push({
                            kind: entry.kind,
                            tags: entry.tags,
                            name: entry.name,
                            detail: entry.detail,
                            containerName: entry.containerName || overrideContainerLabel,
                            range: entry.range,
                            selectionRange: entry.selectionRange,
                            children: undefined
                        });
                        // Recurse over children
                        if (entry.children) OutlineModel._flattenDocumentSymbols(bucket, entry.children, entry.name);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        }
    ]);
    return OutlineModel;
}(TreeElement);
OutlineModel._requestDurations = new _languageFeatureRegistryJs.LanguageFeatureRequestDelays(_modesJs.DocumentSymbolProviderRegistry, 350);
OutlineModel._requests = new _mapJs.LRUCache(9, 0.75);
OutlineModel._keys = new /*#__PURE__*/ (function() {
    "use strict";
    function _class() {
        _helpers.classCallCheck(this, _class);
        this._counter = 1;
        this._data = new WeakMap();
    }
    _helpers.createClass(_class, [
        {
            key: "for",
            value: function _for(textModel, version) {
                return "".concat(textModel.id, "/").concat(version ? textModel.getVersionId() : '', "/").concat(this._hash(_modesJs.DocumentSymbolProviderRegistry.all(textModel)));
            }
        },
        {
            key: "_hash",
            value: function _hash(providers) {
                var result = '';
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = providers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var provider = _step.value;
                        var n = this._data.get(provider);
                        if (typeof n === 'undefined') {
                            n = this._counter++;
                            this._data.set(provider, n);
                        }
                        result += n;
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return result;
            }
        }
    ]);
    return _class;
}());

},{"@swc/helpers":"erO4s","../../../base/common/arrays.js":"bZs3E","../../../base/common/cancellation.js":"1C4LY","../../../base/common/errors.js":"afm4i","../../../base/common/iterator.js":"defKy","../../../base/common/map.js":"4OXsW","../../common/core/range.js":"VbyL8","../../common/modes.js":"bRbY1","../../common/modes/languageFeatureRegistry.js":"dTCAG","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"7J4Ud":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getReindentEditOperations", function() {
    return getReindentEditOperations;
});
parcelHelpers.export(exports, "IndentationToSpacesAction", function() {
    return IndentationToSpacesAction;
});
parcelHelpers.export(exports, "IndentationToTabsAction", function() {
    return IndentationToTabsAction;
});
parcelHelpers.export(exports, "ChangeIndentationSizeAction", function() {
    return ChangeIndentationSizeAction;
});
parcelHelpers.export(exports, "IndentUsingTabs", function() {
    return IndentUsingTabs;
});
parcelHelpers.export(exports, "IndentUsingSpaces", function() {
    return IndentUsingSpaces;
});
parcelHelpers.export(exports, "DetectIndentation", function() {
    return DetectIndentation;
});
parcelHelpers.export(exports, "ReindentLinesAction", function() {
    return ReindentLinesAction;
});
parcelHelpers.export(exports, "ReindentSelectedLinesAction", function() {
    return ReindentSelectedLinesAction;
});
parcelHelpers.export(exports, "AutoIndentOnPasteCommand", function() {
    return AutoIndentOnPasteCommand;
});
parcelHelpers.export(exports, "AutoIndentOnPaste", function() {
    return AutoIndentOnPaste;
});
parcelHelpers.export(exports, "IndentationToSpacesCommand", function() {
    return IndentationToSpacesCommand;
});
parcelHelpers.export(exports, "IndentationToTabsCommand", function() {
    return IndentationToTabsCommand;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _stringsJs = require("../../../base/common/strings.js");
var _editorExtensionsJs = require("../../browser/editorExtensions.js");
var _shiftCommandJs = require("../../common/commands/shiftCommand.js");
var _editOperationJs = require("../../common/core/editOperation.js");
var _rangeJs = require("../../common/core/range.js");
var _selectionJs = require("../../common/core/selection.js");
var _editorContextKeysJs = require("../../common/editorContextKeys.js");
var _textModelJs = require("../../common/model/textModel.js");
var _languageConfigurationRegistryJs = require("../../common/modes/languageConfigurationRegistry.js");
var _modelServiceJs = require("../../common/services/modelService.js");
var _indentUtilsJs = require("./indentUtils.js");
var _nlsJs = require("../../../nls.js");
var _quickInputJs = require("../../../platform/quickinput/common/quickInput.js");
function getReindentEditOperations(model, startLineNumber, endLineNumber, inheritedIndent) {
    if (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) // Model is empty
    return [];
    var indentationRules = _languageConfigurationRegistryJs.LanguageConfigurationRegistry.getIndentationRules(model.getLanguageId());
    if (!indentationRules) return [];
    endLineNumber = Math.min(endLineNumber, model.getLineCount());
    // Skip `unIndentedLinePattern` lines
    while(startLineNumber <= endLineNumber){
        if (!indentationRules.unIndentedLinePattern) break;
        var text = model.getLineContent(startLineNumber);
        if (!indentationRules.unIndentedLinePattern.test(text)) break;
        startLineNumber++;
    }
    if (startLineNumber > endLineNumber - 1) return [];
    var ref = model.getOptions(), tabSize = ref.tabSize, indentSize = ref.indentSize, insertSpaces = ref.insertSpaces;
    var shiftIndent = function(indentation, count) {
        count = count || 1;
        return _shiftCommandJs.ShiftCommand.shiftIndent(indentation, indentation.length + count, tabSize, indentSize, insertSpaces);
    };
    var unshiftIndent = function(indentation, count) {
        count = count || 1;
        return _shiftCommandJs.ShiftCommand.unshiftIndent(indentation, indentation.length + count, tabSize, indentSize, insertSpaces);
    };
    var indentEdits = [];
    // indentation being passed to lines below
    var globalIndent;
    // Calculate indentation for the first line
    // If there is no passed-in indentation, we use the indentation of the first line as base.
    var currentLineText = model.getLineContent(startLineNumber);
    var adjustedLineContent = currentLineText;
    if (inheritedIndent !== undefined && inheritedIndent !== null) {
        globalIndent = inheritedIndent;
        var oldIndentation = _stringsJs.getLeadingWhitespace(currentLineText);
        adjustedLineContent = globalIndent + currentLineText.substring(oldIndentation.length);
        if (indentationRules.decreaseIndentPattern && indentationRules.decreaseIndentPattern.test(adjustedLineContent)) {
            globalIndent = unshiftIndent(globalIndent);
            adjustedLineContent = globalIndent + currentLineText.substring(oldIndentation.length);
        }
        if (currentLineText !== adjustedLineContent) indentEdits.push(_editOperationJs.EditOperation.replaceMove(new _selectionJs.Selection(startLineNumber, 1, startLineNumber, oldIndentation.length + 1), _textModelJs.TextModel.normalizeIndentation(globalIndent, indentSize, insertSpaces)));
    } else globalIndent = _stringsJs.getLeadingWhitespace(currentLineText);
    // idealIndentForNextLine doesn't equal globalIndent when there is a line matching `indentNextLinePattern`.
    var idealIndentForNextLine = globalIndent;
    if (indentationRules.increaseIndentPattern && indentationRules.increaseIndentPattern.test(adjustedLineContent)) {
        idealIndentForNextLine = shiftIndent(idealIndentForNextLine);
        globalIndent = shiftIndent(globalIndent);
    } else if (indentationRules.indentNextLinePattern && indentationRules.indentNextLinePattern.test(adjustedLineContent)) idealIndentForNextLine = shiftIndent(idealIndentForNextLine);
    startLineNumber++;
    // Calculate indentation adjustment for all following lines
    for(var lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++){
        var text1 = model.getLineContent(lineNumber);
        var oldIndentation1 = _stringsJs.getLeadingWhitespace(text1);
        var adjustedLineContent1 = idealIndentForNextLine + text1.substring(oldIndentation1.length);
        if (indentationRules.decreaseIndentPattern && indentationRules.decreaseIndentPattern.test(adjustedLineContent1)) {
            idealIndentForNextLine = unshiftIndent(idealIndentForNextLine);
            globalIndent = unshiftIndent(globalIndent);
        }
        if (oldIndentation1 !== idealIndentForNextLine) indentEdits.push(_editOperationJs.EditOperation.replaceMove(new _selectionJs.Selection(lineNumber, 1, lineNumber, oldIndentation1.length + 1), _textModelJs.TextModel.normalizeIndentation(idealIndentForNextLine, indentSize, insertSpaces)));
        // calculate idealIndentForNextLine
        if (indentationRules.unIndentedLinePattern && indentationRules.unIndentedLinePattern.test(text1)) continue;
        else if (indentationRules.increaseIndentPattern && indentationRules.increaseIndentPattern.test(adjustedLineContent1)) {
            globalIndent = shiftIndent(globalIndent);
            idealIndentForNextLine = globalIndent;
        } else if (indentationRules.indentNextLinePattern && indentationRules.indentNextLinePattern.test(adjustedLineContent1)) idealIndentForNextLine = shiftIndent(idealIndentForNextLine);
        else idealIndentForNextLine = globalIndent;
    }
    return indentEdits;
}
var IndentationToSpacesAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(IndentationToSpacesAction, EditorAction);
    var _super = _helpers.createSuper(IndentationToSpacesAction);
    function IndentationToSpacesAction() {
        _helpers.classCallCheck(this, IndentationToSpacesAction);
        return _super.call(this, {
            id: IndentationToSpacesAction.ID,
            label: _nlsJs.localize('indentationToSpaces', "Convert Indentation to Spaces"),
            alias: 'Convert Indentation to Spaces',
            precondition: _editorContextKeysJs.EditorContextKeys.writable
        });
    }
    _helpers.createClass(IndentationToSpacesAction, [
        {
            key: "run",
            value: function run(accessor, editor) {
                var model = editor.getModel();
                if (!model) return;
                var modelOpts = model.getOptions();
                var selection = editor.getSelection();
                if (!selection) return;
                var command = new IndentationToSpacesCommand(selection, modelOpts.tabSize);
                editor.pushUndoStop();
                editor.executeCommands(this.id, [
                    command
                ]);
                editor.pushUndoStop();
                model.updateOptions({
                    insertSpaces: true
                });
            }
        }
    ]);
    return IndentationToSpacesAction;
}(_editorExtensionsJs.EditorAction);
IndentationToSpacesAction.ID = 'editor.action.indentationToSpaces';
var IndentationToTabsAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(IndentationToTabsAction, EditorAction);
    var _super = _helpers.createSuper(IndentationToTabsAction);
    function IndentationToTabsAction() {
        _helpers.classCallCheck(this, IndentationToTabsAction);
        return _super.call(this, {
            id: IndentationToTabsAction.ID,
            label: _nlsJs.localize('indentationToTabs', "Convert Indentation to Tabs"),
            alias: 'Convert Indentation to Tabs',
            precondition: _editorContextKeysJs.EditorContextKeys.writable
        });
    }
    _helpers.createClass(IndentationToTabsAction, [
        {
            key: "run",
            value: function run(accessor, editor) {
                var model = editor.getModel();
                if (!model) return;
                var modelOpts = model.getOptions();
                var selection = editor.getSelection();
                if (!selection) return;
                var command = new IndentationToTabsCommand(selection, modelOpts.tabSize);
                editor.pushUndoStop();
                editor.executeCommands(this.id, [
                    command
                ]);
                editor.pushUndoStop();
                model.updateOptions({
                    insertSpaces: false
                });
            }
        }
    ]);
    return IndentationToTabsAction;
}(_editorExtensionsJs.EditorAction);
IndentationToTabsAction.ID = 'editor.action.indentationToTabs';
var ChangeIndentationSizeAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(ChangeIndentationSizeAction, EditorAction);
    var _super = _helpers.createSuper(ChangeIndentationSizeAction);
    function ChangeIndentationSizeAction(insertSpaces, opts) {
        _helpers.classCallCheck(this, ChangeIndentationSizeAction);
        var _this;
        _this = _super.call(this, opts);
        _this.insertSpaces = insertSpaces;
        return _this;
    }
    _helpers.createClass(ChangeIndentationSizeAction, [
        {
            key: "run",
            value: function run(accessor, editor) {
                var _this = this;
                var quickInputService = accessor.get(_quickInputJs.IQuickInputService);
                var modelService = accessor.get(_modelServiceJs.IModelService);
                var model = editor.getModel();
                if (!model) return;
                var creationOpts = modelService.getCreationOptions(model.getLanguageId(), model.uri, model.isForSimpleWidget);
                var picks = [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8
                ].map(function(n) {
                    return {
                        id: n.toString(),
                        label: n.toString(),
                        // add description for tabSize value set in the configuration
                        description: n === creationOpts.tabSize ? _nlsJs.localize('configuredTabSize', "Configured Tab Size") : undefined
                    };
                });
                // auto focus the tabSize set for the current editor
                var autoFocusIndex = Math.min(model.getOptions().tabSize - 1, 7);
                setTimeout(function() {
                    var _this1 = _this;
                    quickInputService.pick(picks, {
                        placeHolder: _nlsJs.localize({
                            key: 'selectTabWidth',
                            comment: [
                                'Tab corresponds to the tab key'
                            ]
                        }, "Select Tab Size for Current File"),
                        activeItem: picks[autoFocusIndex]
                    }).then(function(pick) {
                        if (pick) {
                            if (model && !model.isDisposed()) model.updateOptions({
                                tabSize: parseInt(pick.label, 10),
                                insertSpaces: _this1.insertSpaces
                            });
                        }
                    });
                }, 50 /* quick input is sensitive to being opened so soon after another */ );
            }
        }
    ]);
    return ChangeIndentationSizeAction;
}(_editorExtensionsJs.EditorAction);
var IndentUsingTabs = /*#__PURE__*/ function(ChangeIndentationSizeAction) {
    "use strict";
    _helpers.inherits(IndentUsingTabs, ChangeIndentationSizeAction);
    var _super = _helpers.createSuper(IndentUsingTabs);
    function IndentUsingTabs() {
        _helpers.classCallCheck(this, IndentUsingTabs);
        return _super.call(this, false, {
            id: IndentUsingTabs.ID,
            label: _nlsJs.localize('indentUsingTabs', "Indent Using Tabs"),
            alias: 'Indent Using Tabs',
            precondition: undefined
        });
    }
    return IndentUsingTabs;
}(ChangeIndentationSizeAction);
IndentUsingTabs.ID = 'editor.action.indentUsingTabs';
var IndentUsingSpaces = /*#__PURE__*/ function(ChangeIndentationSizeAction) {
    "use strict";
    _helpers.inherits(IndentUsingSpaces, ChangeIndentationSizeAction);
    var _super = _helpers.createSuper(IndentUsingSpaces);
    function IndentUsingSpaces() {
        _helpers.classCallCheck(this, IndentUsingSpaces);
        return _super.call(this, true, {
            id: IndentUsingSpaces.ID,
            label: _nlsJs.localize('indentUsingSpaces', "Indent Using Spaces"),
            alias: 'Indent Using Spaces',
            precondition: undefined
        });
    }
    return IndentUsingSpaces;
}(ChangeIndentationSizeAction);
IndentUsingSpaces.ID = 'editor.action.indentUsingSpaces';
var DetectIndentation = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(DetectIndentation, EditorAction);
    var _super = _helpers.createSuper(DetectIndentation);
    function DetectIndentation() {
        _helpers.classCallCheck(this, DetectIndentation);
        return _super.call(this, {
            id: DetectIndentation.ID,
            label: _nlsJs.localize('detectIndentation', "Detect Indentation from Content"),
            alias: 'Detect Indentation from Content',
            precondition: undefined
        });
    }
    _helpers.createClass(DetectIndentation, [
        {
            key: "run",
            value: function run(accessor, editor) {
                var modelService = accessor.get(_modelServiceJs.IModelService);
                var model = editor.getModel();
                if (!model) return;
                var creationOpts = modelService.getCreationOptions(model.getLanguageId(), model.uri, model.isForSimpleWidget);
                model.detectIndentation(creationOpts.insertSpaces, creationOpts.tabSize);
            }
        }
    ]);
    return DetectIndentation;
}(_editorExtensionsJs.EditorAction);
DetectIndentation.ID = 'editor.action.detectIndentation';
var ReindentLinesAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(ReindentLinesAction, EditorAction);
    var _super = _helpers.createSuper(ReindentLinesAction);
    function ReindentLinesAction() {
        _helpers.classCallCheck(this, ReindentLinesAction);
        return _super.call(this, {
            id: 'editor.action.reindentlines',
            label: _nlsJs.localize('editor.reindentlines', "Reindent Lines"),
            alias: 'Reindent Lines',
            precondition: _editorContextKeysJs.EditorContextKeys.writable
        });
    }
    _helpers.createClass(ReindentLinesAction, [
        {
            key: "run",
            value: function run(accessor, editor) {
                var model = editor.getModel();
                if (!model) return;
                var edits = getReindentEditOperations(model, 1, model.getLineCount());
                if (edits.length > 0) {
                    editor.pushUndoStop();
                    editor.executeEdits(this.id, edits);
                    editor.pushUndoStop();
                }
            }
        }
    ]);
    return ReindentLinesAction;
}(_editorExtensionsJs.EditorAction);
var ReindentSelectedLinesAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(ReindentSelectedLinesAction, EditorAction);
    var _super = _helpers.createSuper(ReindentSelectedLinesAction);
    function ReindentSelectedLinesAction() {
        _helpers.classCallCheck(this, ReindentSelectedLinesAction);
        return _super.call(this, {
            id: 'editor.action.reindentselectedlines',
            label: _nlsJs.localize('editor.reindentselectedlines', "Reindent Selected Lines"),
            alias: 'Reindent Selected Lines',
            precondition: _editorContextKeysJs.EditorContextKeys.writable
        });
    }
    _helpers.createClass(ReindentSelectedLinesAction, [
        {
            key: "run",
            value: function run(accessor, editor) {
                var model = editor.getModel();
                if (!model) return;
                var selections = editor.getSelections();
                if (selections === null) return;
                var edits = [];
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = selections[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var selection = _step.value;
                        var _edits;
                        var startLineNumber = selection.startLineNumber;
                        var endLineNumber = selection.endLineNumber;
                        if (startLineNumber !== endLineNumber && selection.endColumn === 1) endLineNumber--;
                        if (startLineNumber === 1) {
                            if (startLineNumber === endLineNumber) continue;
                        } else startLineNumber--;
                        var editOperations = getReindentEditOperations(model, startLineNumber, endLineNumber);
                        (_edits = edits).push.apply(_edits, _helpers.toConsumableArray(editOperations));
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                if (edits.length > 0) {
                    editor.pushUndoStop();
                    editor.executeEdits(this.id, edits);
                    editor.pushUndoStop();
                }
            }
        }
    ]);
    return ReindentSelectedLinesAction;
}(_editorExtensionsJs.EditorAction);
var AutoIndentOnPasteCommand = /*#__PURE__*/ function() {
    "use strict";
    function AutoIndentOnPasteCommand(edits, initialSelection) {
        _helpers.classCallCheck(this, AutoIndentOnPasteCommand);
        this._initialSelection = initialSelection;
        this._edits = [];
        this._selectionId = null;
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = edits[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var edit = _step.value;
                if (edit.range && typeof edit.text === 'string') this._edits.push(edit);
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
    }
    _helpers.createClass(AutoIndentOnPasteCommand, [
        {
            key: "getEditOperations",
            value: function getEditOperations(model, builder) {
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this._edits[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var edit = _step.value;
                        builder.addEditOperation(_rangeJs.Range.lift(edit.range), edit.text);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                var selectionIsSet = false;
                if (Array.isArray(this._edits) && this._edits.length === 1 && this._initialSelection.isEmpty()) {
                    if (this._edits[0].range.startColumn === this._initialSelection.endColumn && this._edits[0].range.startLineNumber === this._initialSelection.endLineNumber) {
                        selectionIsSet = true;
                        this._selectionId = builder.trackSelection(this._initialSelection, true);
                    } else if (this._edits[0].range.endColumn === this._initialSelection.startColumn && this._edits[0].range.endLineNumber === this._initialSelection.startLineNumber) {
                        selectionIsSet = true;
                        this._selectionId = builder.trackSelection(this._initialSelection, false);
                    }
                }
                if (!selectionIsSet) this._selectionId = builder.trackSelection(this._initialSelection);
            }
        },
        {
            key: "computeCursorState",
            value: function computeCursorState(model, helper) {
                return helper.getTrackedSelection(this._selectionId);
            }
        }
    ]);
    return AutoIndentOnPasteCommand;
}();
var AutoIndentOnPaste = /*#__PURE__*/ function() {
    "use strict";
    function AutoIndentOnPaste(editor) {
        var _this = this;
        _helpers.classCallCheck(this, AutoIndentOnPaste);
        this.callOnDispose = new _lifecycleJs.DisposableStore();
        this.callOnModel = new _lifecycleJs.DisposableStore();
        this.editor = editor;
        this.callOnDispose.add(editor.onDidChangeConfiguration(function() {
            return _this.update();
        }));
        this.callOnDispose.add(editor.onDidChangeModel(function() {
            return _this.update();
        }));
        this.callOnDispose.add(editor.onDidChangeModelLanguage(function() {
            return _this.update();
        }));
    }
    _helpers.createClass(AutoIndentOnPaste, [
        {
            key: "update",
            value: function update() {
                var _this = this;
                // clean up
                this.callOnModel.clear();
                // we are disabled
                if (this.editor.getOption(9 /* autoIndent */ ) < 4 /* Full */  || this.editor.getOption(47 /* formatOnPaste */ )) return;
                // no model
                if (!this.editor.hasModel()) return;
                this.callOnModel.add(this.editor.onDidPaste(function(param) {
                    var range = param.range;
                    _this.trigger(range);
                }));
            }
        },
        {
            key: "trigger",
            value: function trigger(range) {
                var selections = this.editor.getSelections();
                if (selections === null || selections.length > 1) return;
                var model = this.editor.getModel();
                if (!model) return;
                if (!model.isCheapToTokenize(range.getStartPosition().lineNumber)) return;
                var autoIndent = this.editor.getOption(9 /* autoIndent */ );
                var ref = model.getOptions(), tabSize = ref.tabSize, indentSize = ref.indentSize, insertSpaces = ref.insertSpaces;
                var textEdits = [];
                var indentConverter = {
                    shiftIndent: function(indentation) {
                        return _shiftCommandJs.ShiftCommand.shiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);
                    },
                    unshiftIndent: function(indentation) {
                        return _shiftCommandJs.ShiftCommand.unshiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);
                    }
                };
                var startLineNumber = range.startLineNumber;
                while(startLineNumber <= range.endLineNumber){
                    if (this.shouldIgnoreLine(model, startLineNumber)) {
                        startLineNumber++;
                        continue;
                    }
                    break;
                }
                if (startLineNumber > range.endLineNumber) return;
                var firstLineText = model.getLineContent(startLineNumber);
                if (!/\S/.test(firstLineText.substring(0, range.startColumn - 1))) {
                    var indentOfFirstLine = _languageConfigurationRegistryJs.LanguageConfigurationRegistry.getGoodIndentForLine(autoIndent, model, model.getLanguageId(), startLineNumber, indentConverter);
                    if (indentOfFirstLine !== null) {
                        var oldIndentation = _stringsJs.getLeadingWhitespace(firstLineText);
                        var newSpaceCnt = _indentUtilsJs.getSpaceCnt(indentOfFirstLine, tabSize);
                        var oldSpaceCnt = _indentUtilsJs.getSpaceCnt(oldIndentation, tabSize);
                        if (newSpaceCnt !== oldSpaceCnt) {
                            var newIndent = _indentUtilsJs.generateIndent(newSpaceCnt, tabSize, insertSpaces);
                            textEdits.push({
                                range: new _rangeJs.Range(startLineNumber, 1, startLineNumber, oldIndentation.length + 1),
                                text: newIndent
                            });
                            firstLineText = newIndent + firstLineText.substr(oldIndentation.length);
                        } else {
                            var indentMetadata = _languageConfigurationRegistryJs.LanguageConfigurationRegistry.getIndentMetadata(model, startLineNumber);
                            if (indentMetadata === 0 || indentMetadata === 8 /* UNINDENT_MASK */ ) // we paste content into a line where only contains whitespaces
                            // after pasting, the indentation of the first line is already correct
                            // the first line doesn't match any indentation rule
                            // then no-op.
                            return;
                        }
                    }
                }
                var firstLineNumber = startLineNumber;
                // ignore empty or ignored lines
                while(startLineNumber < range.endLineNumber){
                    if (!/\S/.test(model.getLineContent(startLineNumber + 1))) {
                        startLineNumber++;
                        continue;
                    }
                    break;
                }
                if (startLineNumber !== range.endLineNumber) {
                    var virtualModel = {
                        getLineTokens: function(lineNumber) {
                            return model.getLineTokens(lineNumber);
                        },
                        getLanguageId: function() {
                            return model.getLanguageId();
                        },
                        getLanguageIdAtPosition: function(lineNumber, column) {
                            return model.getLanguageIdAtPosition(lineNumber, column);
                        },
                        getLineContent: function(lineNumber) {
                            if (lineNumber === firstLineNumber) return firstLineText;
                            else return model.getLineContent(lineNumber);
                        }
                    };
                    var indentOfSecondLine = _languageConfigurationRegistryJs.LanguageConfigurationRegistry.getGoodIndentForLine(autoIndent, virtualModel, model.getLanguageId(), startLineNumber + 1, indentConverter);
                    if (indentOfSecondLine !== null) {
                        var newSpaceCntOfSecondLine = _indentUtilsJs.getSpaceCnt(indentOfSecondLine, tabSize);
                        var oldSpaceCntOfSecondLine = _indentUtilsJs.getSpaceCnt(_stringsJs.getLeadingWhitespace(model.getLineContent(startLineNumber + 1)), tabSize);
                        if (newSpaceCntOfSecondLine !== oldSpaceCntOfSecondLine) {
                            var spaceCntOffset = newSpaceCntOfSecondLine - oldSpaceCntOfSecondLine;
                            for(var i = startLineNumber + 1; i <= range.endLineNumber; i++){
                                var lineContent = model.getLineContent(i);
                                var originalIndent = _stringsJs.getLeadingWhitespace(lineContent);
                                var originalSpacesCnt = _indentUtilsJs.getSpaceCnt(originalIndent, tabSize);
                                var newSpacesCnt = originalSpacesCnt + spaceCntOffset;
                                var newIndent1 = _indentUtilsJs.generateIndent(newSpacesCnt, tabSize, insertSpaces);
                                if (newIndent1 !== originalIndent) textEdits.push({
                                    range: new _rangeJs.Range(i, 1, i, originalIndent.length + 1),
                                    text: newIndent1
                                });
                            }
                        }
                    }
                }
                if (textEdits.length > 0) {
                    this.editor.pushUndoStop();
                    var cmd = new AutoIndentOnPasteCommand(textEdits, this.editor.getSelection());
                    this.editor.executeCommand('autoIndentOnPaste', cmd);
                    this.editor.pushUndoStop();
                }
            }
        },
        {
            key: "shouldIgnoreLine",
            value: function shouldIgnoreLine(model, lineNumber) {
                model.forceTokenization(lineNumber);
                var nonWhitespaceColumn = model.getLineFirstNonWhitespaceColumn(lineNumber);
                if (nonWhitespaceColumn === 0) return true;
                var tokens = model.getLineTokens(lineNumber);
                if (tokens.getCount() > 0) {
                    var firstNonWhitespaceTokenIndex = tokens.findTokenIndexAtOffset(nonWhitespaceColumn);
                    if (firstNonWhitespaceTokenIndex >= 0 && tokens.getStandardTokenType(firstNonWhitespaceTokenIndex) === 1 /* Comment */ ) return true;
                }
                return false;
            }
        },
        {
            key: "dispose",
            value: function dispose() {
                this.callOnDispose.dispose();
                this.callOnModel.dispose();
            }
        }
    ]);
    return AutoIndentOnPaste;
}();
AutoIndentOnPaste.ID = 'editor.contrib.autoIndentOnPaste';
function getIndentationEditOperations(model, builder, tabSize, tabsToSpaces) {
    if (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) // Model is empty
    return;
    var spaces = '';
    for(var i = 0; i < tabSize; i++)spaces += ' ';
    var spacesRegExp = new RegExp(spaces, 'gi');
    for(var lineNumber = 1, lineCount = model.getLineCount(); lineNumber <= lineCount; lineNumber++){
        var lastIndentationColumn = model.getLineFirstNonWhitespaceColumn(lineNumber);
        if (lastIndentationColumn === 0) lastIndentationColumn = model.getLineMaxColumn(lineNumber);
        if (lastIndentationColumn === 1) continue;
        var originalIndentationRange = new _rangeJs.Range(lineNumber, 1, lineNumber, lastIndentationColumn);
        var originalIndentation = model.getValueInRange(originalIndentationRange);
        var newIndentation = tabsToSpaces ? originalIndentation.replace(/\t/ig, spaces) : originalIndentation.replace(spacesRegExp, '\t');
        builder.addEditOperation(originalIndentationRange, newIndentation);
    }
}
var IndentationToSpacesCommand = /*#__PURE__*/ function() {
    "use strict";
    function IndentationToSpacesCommand(selection, tabSize) {
        _helpers.classCallCheck(this, IndentationToSpacesCommand);
        this.selection = selection;
        this.tabSize = tabSize;
        this.selectionId = null;
    }
    _helpers.createClass(IndentationToSpacesCommand, [
        {
            key: "getEditOperations",
            value: function getEditOperations(model, builder) {
                this.selectionId = builder.trackSelection(this.selection);
                getIndentationEditOperations(model, builder, this.tabSize, true);
            }
        },
        {
            key: "computeCursorState",
            value: function computeCursorState(model, helper) {
                return helper.getTrackedSelection(this.selectionId);
            }
        }
    ]);
    return IndentationToSpacesCommand;
}();
var IndentationToTabsCommand = /*#__PURE__*/ function() {
    "use strict";
    function IndentationToTabsCommand(selection, tabSize) {
        _helpers.classCallCheck(this, IndentationToTabsCommand);
        this.selection = selection;
        this.tabSize = tabSize;
        this.selectionId = null;
    }
    _helpers.createClass(IndentationToTabsCommand, [
        {
            key: "getEditOperations",
            value: function getEditOperations(model, builder) {
                this.selectionId = builder.trackSelection(this.selection);
                getIndentationEditOperations(model, builder, this.tabSize, false);
            }
        },
        {
            key: "computeCursorState",
            value: function computeCursorState(model, helper) {
                return helper.getTrackedSelection(this.selectionId);
            }
        }
    ]);
    return IndentationToTabsCommand;
}();
_editorExtensionsJs.registerEditorContribution(AutoIndentOnPaste.ID, AutoIndentOnPaste);
_editorExtensionsJs.registerEditorAction(IndentationToSpacesAction);
_editorExtensionsJs.registerEditorAction(IndentationToTabsAction);
_editorExtensionsJs.registerEditorAction(IndentUsingTabs);
_editorExtensionsJs.registerEditorAction(IndentUsingSpaces);
_editorExtensionsJs.registerEditorAction(DetectIndentation);
_editorExtensionsJs.registerEditorAction(ReindentLinesAction);
_editorExtensionsJs.registerEditorAction(ReindentSelectedLinesAction);

},{"@swc/helpers":"erO4s","../../../base/common/lifecycle.js":"bcbPy","../../../base/common/strings.js":"jsb6w","../../browser/editorExtensions.js":"dFnlo","../../common/commands/shiftCommand.js":"9cBpK","../../common/core/editOperation.js":"3D5yS","../../common/core/range.js":"VbyL8","../../common/core/selection.js":"hjmnH","../../common/editorContextKeys.js":"2t2PW","../../common/model/textModel.js":"f18vR","../../common/modes/languageConfigurationRegistry.js":"fdCRx","../../common/services/modelService.js":"HyRTJ","./indentUtils.js":"fG9Tn","../../../nls.js":"9djYb","../../../platform/quickinput/common/quickInput.js":"2k9Ij","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"fG9Tn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ parcelHelpers.export(exports, "getSpaceCnt", function() {
    return getSpaceCnt;
});
parcelHelpers.export(exports, "generateIndent", function() {
    return generateIndent;
});
function getSpaceCnt(str, tabSize) {
    var spacesCnt = 0;
    for(var i = 0; i < str.length; i++)if (str.charAt(i) === '\t') spacesCnt += tabSize;
    else spacesCnt++;
    return spacesCnt;
}
function generateIndent(spacesCnt, tabSize, insertSpaces) {
    spacesCnt = spacesCnt < 0 ? 0 : spacesCnt;
    var result = '';
    if (!insertSpaces) {
        var tabsCnt = Math.floor(spacesCnt / tabSize);
        spacesCnt = spacesCnt % tabSize;
        for(var i = 0; i < tabsCnt; i++)result += '\t';
    }
    for(var i1 = 0; i1 < spacesCnt; i1++)result += ' ';
    return result;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"bbsil":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getInlayHints", function() {
    return getInlayHints;
});
parcelHelpers.export(exports, "InlayHintsController", function() {
    return InlayHintsController;
});
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
var _asyncJs = require("../../../base/common/async.js");
var _cancellationJs = require("../../../base/common/cancellation.js");
var _errorsJs = require("../../../base/common/errors.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _mapJs = require("../../../base/common/map.js");
var _typesJs = require("../../../base/common/types.js");
var _uriJs = require("../../../base/common/uri.js");
var _editorDomJs = require("../../browser/editorDom.js");
var _editorExtensionsJs = require("../../browser/editorExtensions.js");
var _editorOptionsJs = require("../../common/config/editorOptions.js");
var _positionJs = require("../../common/core/position.js");
var _rangeJs = require("../../common/core/range.js");
var _modesJs = require("../../common/modes.js");
var _languageFeatureRegistryJs = require("../../common/modes/languageFeatureRegistry.js");
var _resolverServiceJs = require("../../common/services/resolverService.js");
var _commandsJs = require("../../../platform/commands/common/commands.js");
var _colorRegistryJs = require("../../../platform/theme/common/colorRegistry.js");
var _themeServiceJs = require("../../../platform/theme/common/themeService.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var MAX_DECORATORS = 1500;
var RequestMap = /*#__PURE__*/ function() {
    "use strict";
    function RequestMap() {
        _helpers.classCallCheck(this, RequestMap);
        this._data = new _mapJs.ResourceMap();
    }
    _helpers.createClass(RequestMap, [
        {
            key: "push",
            value: function push(model, provider) {
                var value = this._data.get(model.uri);
                if (value === undefined) this._data.set(model.uri, new Set([
                    provider
                ]));
                else value.add(provider);
            }
        },
        {
            key: "pop",
            value: function pop(model, provider) {
                var value = this._data.get(model.uri);
                if (value) {
                    value.delete(provider);
                    if (value.size === 0) this._data.delete(model.uri);
                }
            }
        },
        {
            key: "has",
            value: function has(model, provider) {
                var _a;
                return Boolean((_a = this._data.get(model.uri)) === null || _a === void 0 ? void 0 : _a.has(provider));
            }
        }
    ]);
    return RequestMap;
}();
function getInlayHints(model, ranges, requests, token) {
    return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee1() {
        var _this, all, providers, promises;
        return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx1) {
            while(1)switch(_ctx1.prev = _ctx1.next){
                case 0:
                    _this = this;
                    all = [];
                    providers = _modesJs.InlayHintsProviderRegistry.ordered(model).reverse();
                    promises = providers.map(function(provider) {
                        return ranges.map(function(range) {
                            return __awaiter(_this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                                var result;
                                return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                                    while(1)switch(_ctx.prev = _ctx.next){
                                        case 0:
                                            _ctx.prev = 0;
                                            requests.push(model, provider);
                                            _ctx.next = 4;
                                            return provider.provideInlayHints(model, range, token);
                                        case 4:
                                            result = _ctx.sent;
                                            if (result === null || result === void 0 ? void 0 : result.length) all.push(result.filter(function(hint) {
                                                return range.containsPosition(hint.position);
                                            }));
                                            _ctx.next = 11;
                                            break;
                                        case 8:
                                            _ctx.prev = 8;
                                            _ctx.t0 = _ctx["catch"](0);
                                            _errorsJs.onUnexpectedExternalError(_ctx.t0);
                                        case 11:
                                            _ctx.prev = 11;
                                            requests.pop(model, provider);
                                            return _ctx.finish(11);
                                        case 14:
                                        case "end":
                                            return _ctx.stop();
                                    }
                                }, _callee, null, [
                                    [
                                        0,
                                        8,
                                        11,
                                        14
                                    ]
                                ]);
                            }));
                        });
                    });
                    _ctx1.next = 6;
                    return Promise.all(promises.flat());
                case 6:
                    return _ctx1.abrupt("return", all.flat().sort(function(a, b) {
                        return _positionJs.Position.compare(a.position, b.position);
                    }));
                case 7:
                case "end":
                    return _ctx1.stop();
            }
        }, _callee1, this);
    }));
}
var InlayHintsCache = /*#__PURE__*/ function() {
    "use strict";
    function InlayHintsCache() {
        _helpers.classCallCheck(this, InlayHintsCache);
        this._entries = new _mapJs.LRUCache(50);
    }
    _helpers.createClass(InlayHintsCache, [
        {
            key: "get",
            value: function get(model) {
                var key = InlayHintsCache._key(model);
                return this._entries.get(key);
            }
        },
        {
            key: "set",
            value: function set(model, value) {
                var key = InlayHintsCache._key(model);
                this._entries.set(key, value);
            }
        }
    ], [
        {
            key: "_key",
            value: function _key(model) {
                return "".concat(model.uri.toString(), "/").concat(model.getVersionId());
            }
        }
    ]);
    return InlayHintsCache;
}();
var InlayHintsController = /*#__PURE__*/ function() {
    "use strict";
    function InlayHintsController(_editor) {
        var _this = this;
        _helpers.classCallCheck(this, InlayHintsController);
        this._editor = _editor;
        this._decorationOwnerId = ++InlayHintsController._decorationOwnerIdPool;
        this._disposables = new _lifecycleJs.DisposableStore();
        this._sessionDisposables = new _lifecycleJs.DisposableStore();
        this._getInlayHintsDelays = new _languageFeatureRegistryJs.LanguageFeatureRequestDelays(_modesJs.InlayHintsProviderRegistry, 25, 500);
        this._cache = new InlayHintsCache();
        this._decorationsMetadata = new Map();
        this._ruleFactory = new _editorDomJs.DynamicCssRules(this._editor);
        this._disposables.add(_modesJs.InlayHintsProviderRegistry.onDidChange(function() {
            return _this._update();
        }));
        this._disposables.add(_editor.onDidChangeModel(function() {
            return _this._update();
        }));
        this._disposables.add(_editor.onDidChangeModelLanguage(function() {
            return _this._update();
        }));
        this._disposables.add(_editor.onDidChangeConfiguration(function(e) {
            if (e.hasChanged(126 /* inlayHints */ )) _this._update();
        }));
        this._update();
    }
    _helpers.createClass(InlayHintsController, [
        {
            key: "dispose",
            value: function dispose() {
                this._sessionDisposables.dispose();
                this._removeAllDecorations();
                this._disposables.dispose();
            }
        },
        {
            key: "_update",
            value: function _update() {
                var _this = this;
                this._sessionDisposables.clear();
                this._removeAllDecorations();
                if (!this._editor.getOption(126 /* inlayHints */ ).enabled) return;
                var model = this._editor.getModel();
                if (!model || !_modesJs.InlayHintsProviderRegistry.has(model)) return;
                // iff possible, quickly update from cache
                var cached = this._cache.get(model);
                if (cached) this._updateHintsDecorators([
                    model.getFullModelRange()
                ], cached);
                var requests = new RequestMap();
                var scheduler = new _asyncJs.RunOnceScheduler(function() {
                    return __awaiter(_this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                        var t1, cts, ranges, result;
                        return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                            while(1)switch(_ctx.prev = _ctx.next){
                                case 0:
                                    t1 = Date.now();
                                    cts = new _cancellationJs.CancellationTokenSource();
                                    this._sessionDisposables.add(_lifecycleJs.toDisposable(function() {
                                        return cts.dispose(true);
                                    }));
                                    ranges = this._getHintsRanges();
                                    _ctx.next = 6;
                                    return getInlayHints(model, ranges, requests, cts.token);
                                case 6:
                                    result = _ctx.sent;
                                    scheduler.delay = this._getInlayHintsDelays.update(model, Date.now() - t1);
                                    if (!cts.token.isCancellationRequested) {
                                        _ctx.next = 10;
                                        break;
                                    }
                                    return _ctx.abrupt("return");
                                case 10:
                                    this._updateHintsDecorators(ranges, result);
                                    this._cache.set(model, Array.from(this._decorationsMetadata.values()).map(function(obj) {
                                        return obj.hint;
                                    }));
                                case 12:
                                case "end":
                                    return _ctx.stop();
                            }
                        }, _callee, this);
                    }));
                }, this._getInlayHintsDelays.get(model));
                this._sessionDisposables.add(scheduler);
                // update inline hints when content or scroll position changes
                this._sessionDisposables.add(this._editor.onDidChangeModelContent(function() {
                    return scheduler.schedule();
                }));
                this._sessionDisposables.add(this._editor.onDidScrollChange(function() {
                    return scheduler.schedule();
                }));
                scheduler.schedule();
                // update inline hints when any any provider fires an event
                var providerListener = new _lifecycleJs.DisposableStore();
                this._sessionDisposables.add(providerListener);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function(_iterator, _step) {
                        var provider = _step.value;
                        if (typeof provider.onDidChangeInlayHints === 'function') providerListener.add(provider.onDidChangeInlayHints(function() {
                            if (!requests.has(model, provider)) scheduler.schedule();
                        }));
                    };
                    for(var _iterator = _modesJs.InlayHintsProviderRegistry.all(model)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop(_iterator, _step);
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        },
        {
            key: "_getHintsRanges",
            value: function _getHintsRanges() {
                var extra = 30;
                var model = this._editor.getModel();
                var visibleRanges = this._editor.getVisibleRangesPlusViewportAboveBelow();
                var result = [];
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = visibleRanges.sort(_rangeJs.Range.compareRangesUsingStarts)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var range = _step.value;
                        var extendedRange = model.validateRange(new _rangeJs.Range(range.startLineNumber - extra, range.startColumn, range.endLineNumber + extra, range.endColumn));
                        if (result.length === 0 || !_rangeJs.Range.areIntersectingOrTouching(result[result.length - 1], extendedRange)) result.push(extendedRange);
                        else result[result.length - 1] = _rangeJs.Range.plusRange(result[result.length - 1], extendedRange);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return result;
            }
        },
        {
            key: "_updateHintsDecorators",
            value: function _updateHintsDecorators(ranges, hints) {
                var ref = this._getLayoutInfo(), fontSize = ref.fontSize, fontFamily = ref.fontFamily;
                var model = this._editor.getModel();
                var newDecorationsData = [];
                var fontFamilyVar = '--code-editorInlayHintsFontFamily';
                this._editor.getContainerDomNode().style.setProperty(fontFamilyVar, fontFamily);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = hints[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var hint = _step.value;
                        var text = hint.text, position = hint.position, whitespaceBefore = hint.whitespaceBefore, whitespaceAfter = hint.whitespaceAfter;
                        var marginBefore = whitespaceBefore ? fontSize / 3 | 0 : 0;
                        var marginAfter = whitespaceAfter ? fontSize / 3 | 0 : 0;
                        var backgroundColor = void 0;
                        var color = void 0;
                        if (hint.kind === _modesJs.InlayHintKind.Parameter) {
                            backgroundColor = _themeServiceJs.themeColorFromId(_colorRegistryJs.editorInlayHintParameterBackground);
                            color = _themeServiceJs.themeColorFromId(_colorRegistryJs.editorInlayHintParameterForeground);
                        } else if (hint.kind === _modesJs.InlayHintKind.Type) {
                            backgroundColor = _themeServiceJs.themeColorFromId(_colorRegistryJs.editorInlayHintTypeBackground);
                            color = _themeServiceJs.themeColorFromId(_colorRegistryJs.editorInlayHintTypeForeground);
                        } else {
                            backgroundColor = _themeServiceJs.themeColorFromId(_colorRegistryJs.editorInlayHintBackground);
                            color = _themeServiceJs.themeColorFromId(_colorRegistryJs.editorInlayHintForeground);
                        }
                        var classNameRef = this._ruleFactory.createClassNameRef({
                            fontSize: "".concat(fontSize, "px"),
                            margin: "0px ".concat(marginAfter, "px 0px ").concat(marginBefore, "px"),
                            fontFamily: "var(".concat(fontFamilyVar, "), ").concat(_editorOptionsJs.EDITOR_FONT_DEFAULTS.fontFamily),
                            padding: "1px ".concat(Math.max(1, fontSize / 4) | 0, "px"),
                            borderRadius: "".concat(fontSize / 4 | 0, "px"),
                            verticalAlign: 'middle',
                            backgroundColor: backgroundColor,
                            color: color
                        });
                        var direction = 'before';
                        var range = _rangeJs.Range.fromPositions(position);
                        var word = model.getWordAtPosition(position);
                        var usesWordRange = false;
                        if (word) {
                            if (word.endColumn === position.column) {
                                direction = 'after';
                                usesWordRange = true;
                                range = wordToRange(word, position.lineNumber);
                            } else if (word.startColumn === position.column) {
                                usesWordRange = true;
                                range = wordToRange(word, position.lineNumber);
                            }
                        }
                        var _obj;
                        newDecorationsData.push({
                            decoration: {
                                range: range,
                                options: (_obj = {}, _helpers.defineProperty(_obj, direction, {
                                    content: fixSpace(text),
                                    inlineClassNameAffectsLetterSpacing: true,
                                    inlineClassName: classNameRef.className
                                }), _helpers.defineProperty(_obj, "description", 'InlayHint'), _helpers.defineProperty(_obj, "showIfCollapsed", !usesWordRange), _helpers.defineProperty(_obj, "stickiness", 0 /* AlwaysGrowsWhenTypingAtEdges */ ), _obj)
                            },
                            classNameRef: classNameRef
                        });
                        if (newDecorationsData.length > MAX_DECORATORS) break;
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                // collect all decoration ids that are affected by the ranges
                // and only update those decorations
                var decorationIdsToReplace = [];
                var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined, _iteratorNormalCompletion2 = true, _didIteratorError2 = false, _iteratorError2 = undefined;
                try {
                    for(var _iterator1 = ranges[Symbol.iterator](), _step1; !(_iteratorNormalCompletion2 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion2 = true){
                        var range1 = _step1.value;
                        try {
                            for(var _iterator2 = model.getDecorationsInRange(range1, this._decorationOwnerId, true)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion1 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion1 = true){
                                var id = _step2.value.id;
                                var metadata = this._decorationsMetadata.get(id);
                                if (metadata) {
                                    decorationIdsToReplace.push(id);
                                    metadata.classNameRef.dispose();
                                    this._decorationsMetadata.delete(id);
                                }
                            }
                        } catch (err) {
                            _didIteratorError1 = true;
                            _iteratorError1 = err;
                        } finally{
                            try {
                                if (!_iteratorNormalCompletion1 && _iterator2.return != null) {
                                    _iterator2.return();
                                }
                            } finally{
                                if (_didIteratorError1) {
                                    throw _iteratorError1;
                                }
                            }
                        }
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator1.return != null) {
                            _iterator1.return();
                        }
                    } finally{
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }
                var newDecorationIds = model.deltaDecorations(decorationIdsToReplace, newDecorationsData.map(function(d) {
                    return d.decoration;
                }), this._decorationOwnerId);
                for(var i = 0; i < newDecorationIds.length; i++)this._decorationsMetadata.set(newDecorationIds[i], {
                    hint: hints[i],
                    classNameRef: newDecorationsData[i].classNameRef
                });
            }
        },
        {
            key: "_getLayoutInfo",
            value: function _getLayoutInfo() {
                var options = this._editor.getOption(126 /* inlayHints */ );
                var editorFontSize = this._editor.getOption(45 /* fontSize */ );
                var fontSize = options.fontSize;
                if (!fontSize || fontSize < 5 || fontSize > editorFontSize) fontSize = editorFontSize * .9 | 0;
                var fontFamily = options.fontFamily || this._editor.getOption(42 /* fontFamily */ );
                return {
                    fontSize: fontSize,
                    fontFamily: fontFamily
                };
            }
        },
        {
            key: "_removeAllDecorations",
            value: function _removeAllDecorations() {
                this._editor.deltaDecorations(Array.from(this._decorationsMetadata.keys()), []);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this._decorationsMetadata.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var obj = _step.value;
                        obj.classNameRef.dispose();
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                this._decorationsMetadata.clear();
            }
        }
    ]);
    return InlayHintsController;
}();
InlayHintsController.ID = 'editor.contrib.InlayHints';
InlayHintsController._decorationOwnerIdPool = 0;
function wordToRange(word, lineNumber) {
    return new _rangeJs.Range(lineNumber, word.startColumn, lineNumber, word.endColumn);
}
// Prevents the view from potentially visible whitespace
function fixSpace(str) {
    var noBreakWhitespace = '\xa0';
    return str.replace(/[ \t]/g, noBreakWhitespace);
}
_editorExtensionsJs.registerEditorContribution(InlayHintsController.ID, InlayHintsController);
_commandsJs.CommandsRegistry.registerCommand('_executeInlayHintProvider', function(accessor) {
    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
        args[_key - 1] = arguments[_key];
    }
    return __awaiter(void 0, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
        var _args, uri, range, ref, data;
        return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
            while(1)switch(_ctx.prev = _ctx.next){
                case 0:
                    _args = _helpers.slicedToArray(args, 2), uri = _args[0], range = _args[1];
                    _typesJs.assertType(_uriJs.URI.isUri(uri));
                    _typesJs.assertType(_rangeJs.Range.isIRange(range));
                    _ctx.next = 5;
                    return accessor.get(_resolverServiceJs.ITextModelService).createModelReference(uri);
                case 5:
                    ref = _ctx.sent;
                    _ctx.prev = 6;
                    _ctx.next = 9;
                    return getInlayHints(ref.object.textEditorModel, [
                        _rangeJs.Range.lift(range)
                    ], new RequestMap(), _cancellationJs.CancellationToken.None);
                case 9:
                    data = _ctx.sent;
                    return _ctx.abrupt("return", data);
                case 11:
                    _ctx.prev = 11;
                    ref.dispose();
                    return _ctx.finish(11);
                case 14:
                case "end":
                    return _ctx.stop();
            }
        }, _callee, null, [
            [
                6,
                ,
                11,
                14
            ]
        ]);
    }));
});

},{"@swc/helpers":"erO4s","regenerator-runtime":"12Ae8","../../../base/common/async.js":"kMhSh","../../../base/common/cancellation.js":"1C4LY","../../../base/common/errors.js":"afm4i","../../../base/common/lifecycle.js":"bcbPy","../../../base/common/map.js":"4OXsW","../../../base/common/types.js":"lF7Cj","../../../base/common/uri.js":"4ZDLf","../../browser/editorDom.js":"e0iOe","../../browser/editorExtensions.js":"dFnlo","../../common/config/editorOptions.js":"jb70u","../../common/core/position.js":"6xP0w","../../common/core/range.js":"VbyL8","../../common/modes.js":"bRbY1","../../common/modes/languageFeatureRegistry.js":"dTCAG","../../common/services/resolverService.js":"944WH","../../../platform/commands/common/commands.js":"eeuTC","../../../platform/theme/common/colorRegistry.js":"lKtxS","../../../platform/theme/common/themeService.js":"kE7QB","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"4qBz8":[function(require,module,exports) {
var _helpers = require("@swc/helpers");
var _asyncJs = require("../../../base/common/async.js");
var _errorsJs = require("../../../base/common/errors.js");
var _editorStateJs = require("../../browser/core/editorState.js");
var _editorExtensionsJs = require("../../browser/editorExtensions.js");
var _rangeJs = require("../../common/core/range.js");
var _selectionJs = require("../../common/core/selection.js");
var _editorContextKeysJs = require("../../common/editorContextKeys.js");
var _textModelJs = require("../../common/model/textModel.js");
var _editorWorkerServiceJs = require("../../common/services/editorWorkerService.js");
var _editorColorRegistryJs = require("../../common/view/editorColorRegistry.js");
var _nlsJs = require("../../../nls.js");
var _themeServiceJs = require("../../../platform/theme/common/themeService.js");
var _inPlaceReplaceCommandJs = require("./inPlaceReplaceCommand.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var InPlaceReplaceController = /*#__PURE__*/ function() {
    "use strict";
    function InPlaceReplaceController1(editor, editorWorkerService) {
        _helpers.classCallCheck(this, InPlaceReplaceController1);
        this.decorationIds = [];
        this.editor = editor;
        this.editorWorkerService = editorWorkerService;
    }
    _helpers.createClass(InPlaceReplaceController1, [
        {
            key: "dispose",
            value: function dispose() {}
        },
        {
            key: "run",
            value: function run(source, up) {
                var _this = this;
                // cancel any pending request
                if (this.currentRequest) this.currentRequest.cancel();
                var editorSelection = this.editor.getSelection();
                var model = this.editor.getModel();
                if (!model || !editorSelection) return undefined;
                var selection = editorSelection;
                if (selection.startLineNumber !== selection.endLineNumber) // Can't accept multiline selection
                return undefined;
                var state = new _editorStateJs.EditorState(this.editor, 5 /* Position */ );
                var modelURI = model.uri;
                if (!this.editorWorkerService.canNavigateValueSet(modelURI)) return Promise.resolve(undefined);
                this.currentRequest = _asyncJs.createCancelablePromise(function(token) {
                    return _this.editorWorkerService.navigateValueSet(modelURI, selection, up);
                });
                return this.currentRequest.then(function(result) {
                    var _this1 = _this;
                    if (!result || !result.range || !result.value) // No proper result
                    return;
                    if (!state.validate(_this.editor)) // state has changed
                    return;
                    // Selection
                    var editRange = _rangeJs.Range.lift(result.range);
                    var highlightRange = result.range;
                    var diff = result.value.length - (selection.endColumn - selection.startColumn);
                    // highlight
                    highlightRange = {
                        startLineNumber: highlightRange.startLineNumber,
                        startColumn: highlightRange.startColumn,
                        endLineNumber: highlightRange.endLineNumber,
                        endColumn: highlightRange.startColumn + result.value.length
                    };
                    if (diff > 1) selection = new _selectionJs.Selection(selection.startLineNumber, selection.startColumn, selection.endLineNumber, selection.endColumn + diff - 1);
                    // Insert new text
                    var command = new _inPlaceReplaceCommandJs.InPlaceReplaceCommand(editRange, selection, result.value);
                    _this.editor.pushUndoStop();
                    _this.editor.executeCommand(source, command);
                    _this.editor.pushUndoStop();
                    // add decoration
                    _this.decorationIds = _this.editor.deltaDecorations(_this.decorationIds, [
                        {
                            range: highlightRange,
                            options: InPlaceReplaceController1.DECORATION
                        }
                    ]);
                    // remove decoration after delay
                    if (_this.decorationRemover) _this.decorationRemover.cancel();
                    _this.decorationRemover = _asyncJs.timeout(350);
                    _this.decorationRemover.then(function() {
                        return _this1.decorationIds = _this1.editor.deltaDecorations(_this1.decorationIds, []);
                    }).catch(_errorsJs.onUnexpectedError);
                }).catch(_errorsJs.onUnexpectedError);
            }
        }
    ], [
        {
            key: "get",
            value: function get(editor) {
                return editor.getContribution(InPlaceReplaceController1.ID);
            }
        }
    ]);
    return InPlaceReplaceController1;
}();
InPlaceReplaceController.ID = 'editor.contrib.inPlaceReplaceController';
InPlaceReplaceController.DECORATION = _textModelJs.ModelDecorationOptions.register({
    description: 'in-place-replace',
    className: 'valueSetReplacement'
});
InPlaceReplaceController = __decorate([
    __param(1, _editorWorkerServiceJs.IEditorWorkerService)
], InPlaceReplaceController);
var InPlaceReplaceUp = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(InPlaceReplaceUp, EditorAction);
    var _super = _helpers.createSuper(InPlaceReplaceUp);
    function InPlaceReplaceUp() {
        _helpers.classCallCheck(this, InPlaceReplaceUp);
        return _super.call(this, {
            id: 'editor.action.inPlaceReplace.up',
            label: _nlsJs.localize('InPlaceReplaceAction.previous.label', "Replace with Previous Value"),
            alias: 'Replace with Previous Value',
            precondition: _editorContextKeysJs.EditorContextKeys.writable,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: 3154 /* Comma */ ,
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    _helpers.createClass(InPlaceReplaceUp, [
        {
            key: "run",
            value: function run(accessor, editor) {
                var controller = InPlaceReplaceController.get(editor);
                if (!controller) return Promise.resolve(undefined);
                return controller.run(this.id, true);
            }
        }
    ]);
    return InPlaceReplaceUp;
}(_editorExtensionsJs.EditorAction);
var InPlaceReplaceDown = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(InPlaceReplaceDown, EditorAction);
    var _super = _helpers.createSuper(InPlaceReplaceDown);
    function InPlaceReplaceDown() {
        _helpers.classCallCheck(this, InPlaceReplaceDown);
        return _super.call(this, {
            id: 'editor.action.inPlaceReplace.down',
            label: _nlsJs.localize('InPlaceReplaceAction.next.label', "Replace with Next Value"),
            alias: 'Replace with Next Value',
            precondition: _editorContextKeysJs.EditorContextKeys.writable,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: 3156 /* Period */ ,
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    _helpers.createClass(InPlaceReplaceDown, [
        {
            key: "run",
            value: function run(accessor, editor) {
                var controller = InPlaceReplaceController.get(editor);
                if (!controller) return Promise.resolve(undefined);
                return controller.run(this.id, false);
            }
        }
    ]);
    return InPlaceReplaceDown;
}(_editorExtensionsJs.EditorAction);
_editorExtensionsJs.registerEditorContribution(InPlaceReplaceController.ID, InPlaceReplaceController);
_editorExtensionsJs.registerEditorAction(InPlaceReplaceUp);
_editorExtensionsJs.registerEditorAction(InPlaceReplaceDown);
_themeServiceJs.registerThemingParticipant(function(theme, collector) {
    var border = theme.getColor(_editorColorRegistryJs.editorBracketMatchBorder);
    if (border) collector.addRule(".monaco-editor.vs .valueSetReplacement { outline: solid 2px ".concat(border, "; }"));
});

},{"@swc/helpers":"erO4s","../../../base/common/async.js":"kMhSh","../../../base/common/errors.js":"afm4i","../../browser/core/editorState.js":"5J2rl","../../browser/editorExtensions.js":"dFnlo","../../common/core/range.js":"VbyL8","../../common/core/selection.js":"hjmnH","../../common/editorContextKeys.js":"2t2PW","../../common/model/textModel.js":"f18vR","../../common/services/editorWorkerService.js":"jXu2E","../../common/view/editorColorRegistry.js":"3F5El","../../../nls.js":"9djYb","../../../platform/theme/common/themeService.js":"kE7QB","./inPlaceReplaceCommand.js":"g4TSb"}],"g4TSb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "InPlaceReplaceCommand", function() {
    return InPlaceReplaceCommand;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _selectionJs = require("../../common/core/selection.js");
var InPlaceReplaceCommand = /*#__PURE__*/ function() {
    "use strict";
    function InPlaceReplaceCommand(editRange, originalSelection, text) {
        _helpers.classCallCheck(this, InPlaceReplaceCommand);
        this._editRange = editRange;
        this._originalSelection = originalSelection;
        this._text = text;
    }
    _helpers.createClass(InPlaceReplaceCommand, [
        {
            key: "getEditOperations",
            value: function getEditOperations(model, builder) {
                builder.addTrackedEditOperation(this._editRange, this._text);
            }
        },
        {
            key: "computeCursorState",
            value: function computeCursorState(model, helper) {
                var inverseEditOperations = helper.getInverseEditOperations();
                var srcRange = inverseEditOperations[0].range;
                if (!this._originalSelection.isEmpty()) // Preserve selection and extends to typed text
                return new _selectionJs.Selection(srcRange.endLineNumber, srcRange.endColumn - this._text.length, srcRange.endLineNumber, srcRange.endColumn);
                return new _selectionJs.Selection(srcRange.endLineNumber, Math.min(this._originalSelection.positionColumn, srcRange.endColumn), srcRange.endLineNumber, Math.min(this._originalSelection.positionColumn, srcRange.endColumn));
            }
        }
    ]);
    return InPlaceReplaceCommand;
}();

},{"@swc/helpers":"erO4s","../../common/core/selection.js":"hjmnH","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"kySWE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ExpandLineSelectionAction", function() {
    return ExpandLineSelectionAction;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _editorExtensionsJs = require("../../browser/editorExtensions.js");
var _cursorMoveCommandsJs = require("../../common/controller/cursorMoveCommands.js");
var _editorContextKeysJs = require("../../common/editorContextKeys.js");
var _nlsJs = require("../../../nls.js");
var ExpandLineSelectionAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(ExpandLineSelectionAction, EditorAction);
    var _super = _helpers.createSuper(ExpandLineSelectionAction);
    function ExpandLineSelectionAction() {
        _helpers.classCallCheck(this, ExpandLineSelectionAction);
        return _super.call(this, {
            id: 'expandLineSelection',
            label: _nlsJs.localize('expandLineSelection', "Expand Line Selection"),
            alias: 'Expand Line Selection',
            precondition: undefined,
            kbOpts: {
                weight: 0 /* EditorCore */ ,
                kbExpr: _editorContextKeysJs.EditorContextKeys.textInputFocus,
                primary: 2090 /* KeyL */ 
            }
        });
    }
    _helpers.createClass(ExpandLineSelectionAction, [
        {
            key: "run",
            value: function run(_accessor, editor, args) {
                args = args || {};
                if (!editor.hasModel()) return;
                var viewModel = editor._getViewModel();
                viewModel.model.pushStackElement();
                viewModel.setCursorStates(args.source, 3 /* Explicit */ , _cursorMoveCommandsJs.CursorMoveCommands.expandLineSelection(viewModel, viewModel.getCursorStates()));
                viewModel.revealPrimaryCursor(args.source, true);
            }
        }
    ]);
    return ExpandLineSelectionAction;
}(_editorExtensionsJs.EditorAction);
_editorExtensionsJs.registerEditorAction(ExpandLineSelectionAction);

},{"@swc/helpers":"erO4s","../../browser/editorExtensions.js":"dFnlo","../../common/controller/cursorMoveCommands.js":"5so8P","../../common/editorContextKeys.js":"2t2PW","../../../nls.js":"9djYb","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"aB5jB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DuplicateSelectionAction", function() {
    return DuplicateSelectionAction;
});
parcelHelpers.export(exports, "AbstractSortLinesAction", function() {
    return AbstractSortLinesAction;
});
parcelHelpers.export(exports, "SortLinesAscendingAction", function() {
    return SortLinesAscendingAction;
});
parcelHelpers.export(exports, "SortLinesDescendingAction", function() {
    return SortLinesDescendingAction;
});
parcelHelpers.export(exports, "DeleteDuplicateLinesAction", function() {
    return DeleteDuplicateLinesAction;
});
parcelHelpers.export(exports, "TrimTrailingWhitespaceAction", function() {
    return TrimTrailingWhitespaceAction;
});
parcelHelpers.export(exports, "DeleteLinesAction", function() {
    return DeleteLinesAction;
});
parcelHelpers.export(exports, "IndentLinesAction", function() {
    return IndentLinesAction;
});
parcelHelpers.export(exports, "InsertLineBeforeAction", function() {
    return InsertLineBeforeAction;
});
parcelHelpers.export(exports, "InsertLineAfterAction", function() {
    return InsertLineAfterAction;
});
parcelHelpers.export(exports, "AbstractDeleteAllToBoundaryAction", function() {
    return AbstractDeleteAllToBoundaryAction;
});
parcelHelpers.export(exports, "DeleteAllLeftAction", function() {
    return DeleteAllLeftAction;
});
parcelHelpers.export(exports, "DeleteAllRightAction", function() {
    return DeleteAllRightAction;
});
parcelHelpers.export(exports, "JoinLinesAction", function() {
    return JoinLinesAction;
});
parcelHelpers.export(exports, "TransposeAction", function() {
    return TransposeAction;
});
parcelHelpers.export(exports, "AbstractCaseAction", function() {
    return AbstractCaseAction;
});
parcelHelpers.export(exports, "UpperCaseAction", function() {
    return UpperCaseAction;
});
parcelHelpers.export(exports, "LowerCaseAction", function() {
    return LowerCaseAction;
});
parcelHelpers.export(exports, "TitleCaseAction", function() {
    return TitleCaseAction;
});
parcelHelpers.export(exports, "SnakeCaseAction", function() {
    return SnakeCaseAction;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _keyCodesJs = require("../../../base/common/keyCodes.js");
var _coreCommandsJs = require("../../browser/controller/coreCommands.js");
var _editorExtensionsJs = require("../../browser/editorExtensions.js");
var _replaceCommandJs = require("../../common/commands/replaceCommand.js");
var _trimTrailingWhitespaceCommandJs = require("../../common/commands/trimTrailingWhitespaceCommand.js");
var _cursorTypeOperationsJs = require("../../common/controller/cursorTypeOperations.js");
var _editOperationJs = require("../../common/core/editOperation.js");
var _positionJs = require("../../common/core/position.js");
var _rangeJs = require("../../common/core/range.js");
var _selectionJs = require("../../common/core/selection.js");
var _editorContextKeysJs = require("../../common/editorContextKeys.js");
var _copyLinesCommandJs = require("./copyLinesCommand.js");
var _moveLinesCommandJs = require("./moveLinesCommand.js");
var _sortLinesCommandJs = require("./sortLinesCommand.js");
var _nlsJs = require("../../../nls.js");
var _actionsJs = require("../../../platform/actions/common/actions.js");
// copy lines
var AbstractCopyLinesAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(AbstractCopyLinesAction, EditorAction);
    var _super = _helpers.createSuper(AbstractCopyLinesAction);
    function AbstractCopyLinesAction(down, opts) {
        _helpers.classCallCheck(this, AbstractCopyLinesAction);
        var _this;
        _this = _super.call(this, opts);
        _this.down = down;
        return _this;
    }
    _helpers.createClass(AbstractCopyLinesAction, [
        {
            key: "run",
            value: function run(_accessor, editor) {
                if (!editor.hasModel()) return;
                var selections = editor.getSelections().map(function(selection, index) {
                    return {
                        selection: selection,
                        index: index,
                        ignore: false
                    };
                });
                selections.sort(function(a, b) {
                    return _rangeJs.Range.compareRangesUsingStarts(a.selection, b.selection);
                });
                // Remove selections that would result in copying the same line
                var prev = selections[0];
                for(var i = 1; i < selections.length; i++){
                    var curr = selections[i];
                    if (prev.selection.endLineNumber === curr.selection.startLineNumber) {
                        // these two selections would copy the same line
                        if (prev.index < curr.index) // prev wins
                        curr.ignore = true;
                        else {
                            // curr wins
                            prev.ignore = true;
                            prev = curr;
                        }
                    }
                }
                var commands = [];
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = selections[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var selection1 = _step.value;
                        commands.push(new _copyLinesCommandJs.CopyLinesCommand(selection1.selection, this.down, selection1.ignore));
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                editor.pushUndoStop();
                editor.executeCommands(this.id, commands);
                editor.pushUndoStop();
            }
        }
    ]);
    return AbstractCopyLinesAction;
}(_editorExtensionsJs.EditorAction);
var CopyLinesUpAction = /*#__PURE__*/ function(AbstractCopyLinesAction) {
    "use strict";
    _helpers.inherits(CopyLinesUpAction, AbstractCopyLinesAction);
    var _super = _helpers.createSuper(CopyLinesUpAction);
    function CopyLinesUpAction() {
        _helpers.classCallCheck(this, CopyLinesUpAction);
        return _super.call(this, false, {
            id: 'editor.action.copyLinesUpAction',
            label: _nlsJs.localize('lines.copyUp', "Copy Line Up"),
            alias: 'Copy Line Up',
            precondition: _editorContextKeysJs.EditorContextKeys.writable,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: 1552 /* UpArrow */ ,
                linux: {
                    primary: 3600 /* UpArrow */ 
                },
                weight: 100 /* EditorContrib */ 
            },
            menuOpts: {
                menuId: _actionsJs.MenuId.MenubarSelectionMenu,
                group: '2_line',
                title: _nlsJs.localize({
                    key: 'miCopyLinesUp',
                    comment: [
                        '&& denotes a mnemonic'
                    ]
                }, "&&Copy Line Up"),
                order: 1
            }
        });
    }
    return CopyLinesUpAction;
}(AbstractCopyLinesAction);
var CopyLinesDownAction = /*#__PURE__*/ function(AbstractCopyLinesAction) {
    "use strict";
    _helpers.inherits(CopyLinesDownAction, AbstractCopyLinesAction);
    var _super = _helpers.createSuper(CopyLinesDownAction);
    function CopyLinesDownAction() {
        _helpers.classCallCheck(this, CopyLinesDownAction);
        return _super.call(this, true, {
            id: 'editor.action.copyLinesDownAction',
            label: _nlsJs.localize('lines.copyDown', "Copy Line Down"),
            alias: 'Copy Line Down',
            precondition: _editorContextKeysJs.EditorContextKeys.writable,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: 1554 /* DownArrow */ ,
                linux: {
                    primary: 3602 /* DownArrow */ 
                },
                weight: 100 /* EditorContrib */ 
            },
            menuOpts: {
                menuId: _actionsJs.MenuId.MenubarSelectionMenu,
                group: '2_line',
                title: _nlsJs.localize({
                    key: 'miCopyLinesDown',
                    comment: [
                        '&& denotes a mnemonic'
                    ]
                }, "Co&&py Line Down"),
                order: 2
            }
        });
    }
    return CopyLinesDownAction;
}(AbstractCopyLinesAction);
var DuplicateSelectionAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(DuplicateSelectionAction, EditorAction);
    var _super = _helpers.createSuper(DuplicateSelectionAction);
    function DuplicateSelectionAction() {
        _helpers.classCallCheck(this, DuplicateSelectionAction);
        return _super.call(this, {
            id: 'editor.action.duplicateSelection',
            label: _nlsJs.localize('duplicateSelection', "Duplicate Selection"),
            alias: 'Duplicate Selection',
            precondition: _editorContextKeysJs.EditorContextKeys.writable,
            menuOpts: {
                menuId: _actionsJs.MenuId.MenubarSelectionMenu,
                group: '2_line',
                title: _nlsJs.localize({
                    key: 'miDuplicateSelection',
                    comment: [
                        '&& denotes a mnemonic'
                    ]
                }, "&&Duplicate Selection"),
                order: 5
            }
        });
    }
    _helpers.createClass(DuplicateSelectionAction, [
        {
            key: "run",
            value: function run(accessor, editor, args) {
                if (!editor.hasModel()) return;
                var commands = [];
                var selections = editor.getSelections();
                var model = editor.getModel();
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = selections[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var selection = _step.value;
                        if (selection.isEmpty()) commands.push(new _copyLinesCommandJs.CopyLinesCommand(selection, true));
                        else {
                            var insertSelection = new _selectionJs.Selection(selection.endLineNumber, selection.endColumn, selection.endLineNumber, selection.endColumn);
                            commands.push(new _replaceCommandJs.ReplaceCommandThatSelectsText(insertSelection, model.getValueInRange(selection)));
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                editor.pushUndoStop();
                editor.executeCommands(this.id, commands);
                editor.pushUndoStop();
            }
        }
    ]);
    return DuplicateSelectionAction;
}(_editorExtensionsJs.EditorAction);
// move lines
var AbstractMoveLinesAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(AbstractMoveLinesAction, EditorAction);
    var _super = _helpers.createSuper(AbstractMoveLinesAction);
    function AbstractMoveLinesAction(down, opts) {
        _helpers.classCallCheck(this, AbstractMoveLinesAction);
        var _this;
        _this = _super.call(this, opts);
        _this.down = down;
        return _this;
    }
    _helpers.createClass(AbstractMoveLinesAction, [
        {
            key: "run",
            value: function run(_accessor, editor) {
                var commands = [];
                var selections = editor.getSelections() || [];
                var autoIndent = editor.getOption(9 /* autoIndent */ );
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = selections[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var selection = _step.value;
                        commands.push(new _moveLinesCommandJs.MoveLinesCommand(selection, this.down, autoIndent));
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                editor.pushUndoStop();
                editor.executeCommands(this.id, commands);
                editor.pushUndoStop();
            }
        }
    ]);
    return AbstractMoveLinesAction;
}(_editorExtensionsJs.EditorAction);
var MoveLinesUpAction = /*#__PURE__*/ function(AbstractMoveLinesAction) {
    "use strict";
    _helpers.inherits(MoveLinesUpAction, AbstractMoveLinesAction);
    var _super = _helpers.createSuper(MoveLinesUpAction);
    function MoveLinesUpAction() {
        _helpers.classCallCheck(this, MoveLinesUpAction);
        return _super.call(this, false, {
            id: 'editor.action.moveLinesUpAction',
            label: _nlsJs.localize('lines.moveUp', "Move Line Up"),
            alias: 'Move Line Up',
            precondition: _editorContextKeysJs.EditorContextKeys.writable,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: 528 /* UpArrow */ ,
                linux: {
                    primary: 528 /* UpArrow */ 
                },
                weight: 100 /* EditorContrib */ 
            },
            menuOpts: {
                menuId: _actionsJs.MenuId.MenubarSelectionMenu,
                group: '2_line',
                title: _nlsJs.localize({
                    key: 'miMoveLinesUp',
                    comment: [
                        '&& denotes a mnemonic'
                    ]
                }, "Mo&&ve Line Up"),
                order: 3
            }
        });
    }
    return MoveLinesUpAction;
}(AbstractMoveLinesAction);
var MoveLinesDownAction = /*#__PURE__*/ function(AbstractMoveLinesAction) {
    "use strict";
    _helpers.inherits(MoveLinesDownAction, AbstractMoveLinesAction);
    var _super = _helpers.createSuper(MoveLinesDownAction);
    function MoveLinesDownAction() {
        _helpers.classCallCheck(this, MoveLinesDownAction);
        return _super.call(this, true, {
            id: 'editor.action.moveLinesDownAction',
            label: _nlsJs.localize('lines.moveDown', "Move Line Down"),
            alias: 'Move Line Down',
            precondition: _editorContextKeysJs.EditorContextKeys.writable,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: 530 /* DownArrow */ ,
                linux: {
                    primary: 530 /* DownArrow */ 
                },
                weight: 100 /* EditorContrib */ 
            },
            menuOpts: {
                menuId: _actionsJs.MenuId.MenubarSelectionMenu,
                group: '2_line',
                title: _nlsJs.localize({
                    key: 'miMoveLinesDown',
                    comment: [
                        '&& denotes a mnemonic'
                    ]
                }, "Move &&Line Down"),
                order: 4
            }
        });
    }
    return MoveLinesDownAction;
}(AbstractMoveLinesAction);
var AbstractSortLinesAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(AbstractSortLinesAction, EditorAction);
    var _super = _helpers.createSuper(AbstractSortLinesAction);
    function AbstractSortLinesAction(descending, opts) {
        _helpers.classCallCheck(this, AbstractSortLinesAction);
        var _this;
        _this = _super.call(this, opts);
        _this.descending = descending;
        return _this;
    }
    _helpers.createClass(AbstractSortLinesAction, [
        {
            key: "run",
            value: function run(_accessor, editor) {
                var selections = editor.getSelections() || [];
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = selections[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var selection = _step.value;
                        if (!_sortLinesCommandJs.SortLinesCommand.canRun(editor.getModel(), selection, this.descending)) return;
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                var commands = [];
                for(var i = 0, len = selections.length; i < len; i++)commands[i] = new _sortLinesCommandJs.SortLinesCommand(selections[i], this.descending);
                editor.pushUndoStop();
                editor.executeCommands(this.id, commands);
                editor.pushUndoStop();
            }
        }
    ]);
    return AbstractSortLinesAction;
}(_editorExtensionsJs.EditorAction);
var SortLinesAscendingAction = /*#__PURE__*/ function(AbstractSortLinesAction) {
    "use strict";
    _helpers.inherits(SortLinesAscendingAction, AbstractSortLinesAction);
    var _super = _helpers.createSuper(SortLinesAscendingAction);
    function SortLinesAscendingAction() {
        _helpers.classCallCheck(this, SortLinesAscendingAction);
        return _super.call(this, false, {
            id: 'editor.action.sortLinesAscending',
            label: _nlsJs.localize('lines.sortAscending', "Sort Lines Ascending"),
            alias: 'Sort Lines Ascending',
            precondition: _editorContextKeysJs.EditorContextKeys.writable
        });
    }
    return SortLinesAscendingAction;
}(AbstractSortLinesAction);
var SortLinesDescendingAction = /*#__PURE__*/ function(AbstractSortLinesAction) {
    "use strict";
    _helpers.inherits(SortLinesDescendingAction, AbstractSortLinesAction);
    var _super = _helpers.createSuper(SortLinesDescendingAction);
    function SortLinesDescendingAction() {
        _helpers.classCallCheck(this, SortLinesDescendingAction);
        return _super.call(this, true, {
            id: 'editor.action.sortLinesDescending',
            label: _nlsJs.localize('lines.sortDescending', "Sort Lines Descending"),
            alias: 'Sort Lines Descending',
            precondition: _editorContextKeysJs.EditorContextKeys.writable
        });
    }
    return SortLinesDescendingAction;
}(AbstractSortLinesAction);
var DeleteDuplicateLinesAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(DeleteDuplicateLinesAction, EditorAction);
    var _super = _helpers.createSuper(DeleteDuplicateLinesAction);
    function DeleteDuplicateLinesAction() {
        _helpers.classCallCheck(this, DeleteDuplicateLinesAction);
        return _super.call(this, {
            id: 'editor.action.removeDuplicateLines',
            label: _nlsJs.localize('lines.deleteDuplicates', "Delete Duplicate Lines"),
            alias: 'Delete Duplicate Lines',
            precondition: _editorContextKeysJs.EditorContextKeys.writable
        });
    }
    _helpers.createClass(DeleteDuplicateLinesAction, [
        {
            key: "run",
            value: function run(_accessor, editor) {
                if (!editor.hasModel()) return;
                var model = editor.getModel();
                if (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) return;
                var edits = [];
                var endCursorState = [];
                var linesDeleted = 0;
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = editor.getSelections()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var selection = _step.value;
                        var uniqueLines = new Set();
                        var lines = [];
                        for(var i = selection.startLineNumber; i <= selection.endLineNumber; i++){
                            var line = model.getLineContent(i);
                            if (uniqueLines.has(line)) continue;
                            lines.push(line);
                            uniqueLines.add(line);
                        }
                        var selectionToReplace = new _selectionJs.Selection(selection.startLineNumber, 1, selection.endLineNumber, model.getLineMaxColumn(selection.endLineNumber));
                        var adjustedSelectionStart = selection.startLineNumber - linesDeleted;
                        var finalSelection = new _selectionJs.Selection(adjustedSelectionStart, 1, adjustedSelectionStart + lines.length - 1, lines[lines.length - 1].length);
                        edits.push(_editOperationJs.EditOperation.replace(selectionToReplace, lines.join('\n')));
                        endCursorState.push(finalSelection);
                        linesDeleted += selection.endLineNumber - selection.startLineNumber + 1 - lines.length;
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                editor.pushUndoStop();
                editor.executeEdits(this.id, edits, endCursorState);
                editor.pushUndoStop();
            }
        }
    ]);
    return DeleteDuplicateLinesAction;
}(_editorExtensionsJs.EditorAction);
var TrimTrailingWhitespaceAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(TrimTrailingWhitespaceAction, EditorAction);
    var _super = _helpers.createSuper(TrimTrailingWhitespaceAction);
    function TrimTrailingWhitespaceAction() {
        _helpers.classCallCheck(this, TrimTrailingWhitespaceAction);
        return _super.call(this, {
            id: TrimTrailingWhitespaceAction.ID,
            label: _nlsJs.localize('lines.trimTrailingWhitespace', "Trim Trailing Whitespace"),
            alias: 'Trim Trailing Whitespace',
            precondition: _editorContextKeysJs.EditorContextKeys.writable,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: _keyCodesJs.KeyChord(2089 /* KeyK */ , 2102 /* KeyX */ ),
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    _helpers.createClass(TrimTrailingWhitespaceAction, [
        {
            key: "run",
            value: function run(_accessor, editor, args) {
                var cursors = [];
                if (args.reason === 'auto-save') // See https://github.com/editorconfig/editorconfig-vscode/issues/47
                // It is very convenient for the editor config extension to invoke this action.
                // So, if we get a reason:'auto-save' passed in, let's preserve cursor positions.
                cursors = (editor.getSelections() || []).map(function(s) {
                    return new _positionJs.Position(s.positionLineNumber, s.positionColumn);
                });
                var selection = editor.getSelection();
                if (selection === null) return;
                var command = new _trimTrailingWhitespaceCommandJs.TrimTrailingWhitespaceCommand(selection, cursors);
                editor.pushUndoStop();
                editor.executeCommands(this.id, [
                    command
                ]);
                editor.pushUndoStop();
            }
        }
    ]);
    return TrimTrailingWhitespaceAction;
}(_editorExtensionsJs.EditorAction);
TrimTrailingWhitespaceAction.ID = 'editor.action.trimTrailingWhitespace';
var DeleteLinesAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(DeleteLinesAction, EditorAction);
    var _super = _helpers.createSuper(DeleteLinesAction);
    function DeleteLinesAction() {
        _helpers.classCallCheck(this, DeleteLinesAction);
        return _super.call(this, {
            id: 'editor.action.deleteLines',
            label: _nlsJs.localize('lines.delete', "Delete Line"),
            alias: 'Delete Line',
            precondition: _editorContextKeysJs.EditorContextKeys.writable,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.textInputFocus,
                primary: 3113 /* KeyK */ ,
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    _helpers.createClass(DeleteLinesAction, [
        {
            key: "run",
            value: function run(_accessor, editor) {
                if (!editor.hasModel()) return;
                var ops = this._getLinesToRemove(editor);
                var model = editor.getModel();
                if (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) // Model is empty
                return;
                var linesDeleted = 0;
                var edits = [];
                var cursorState = [];
                for(var i = 0, len = ops.length; i < len; i++){
                    var op = ops[i];
                    var startLineNumber = op.startLineNumber;
                    var endLineNumber = op.endLineNumber;
                    var startColumn = 1;
                    var endColumn = model.getLineMaxColumn(endLineNumber);
                    if (endLineNumber < model.getLineCount()) {
                        endLineNumber += 1;
                        endColumn = 1;
                    } else if (startLineNumber > 1) {
                        startLineNumber -= 1;
                        startColumn = model.getLineMaxColumn(startLineNumber);
                    }
                    edits.push(_editOperationJs.EditOperation.replace(new _selectionJs.Selection(startLineNumber, startColumn, endLineNumber, endColumn), ''));
                    cursorState.push(new _selectionJs.Selection(startLineNumber - linesDeleted, op.positionColumn, startLineNumber - linesDeleted, op.positionColumn));
                    linesDeleted += op.endLineNumber - op.startLineNumber + 1;
                }
                editor.pushUndoStop();
                editor.executeEdits(this.id, edits, cursorState);
                editor.pushUndoStop();
            }
        },
        {
            key: "_getLinesToRemove",
            value: function _getLinesToRemove(editor) {
                // Construct delete operations
                var operations = editor.getSelections().map(function(s) {
                    var endLineNumber = s.endLineNumber;
                    if (s.startLineNumber < s.endLineNumber && s.endColumn === 1) endLineNumber -= 1;
                    return {
                        startLineNumber: s.startLineNumber,
                        selectionStartColumn: s.selectionStartColumn,
                        endLineNumber: endLineNumber,
                        positionColumn: s.positionColumn
                    };
                });
                // Sort delete operations
                operations.sort(function(a, b) {
                    if (a.startLineNumber === b.startLineNumber) return a.endLineNumber - b.endLineNumber;
                    return a.startLineNumber - b.startLineNumber;
                });
                // Merge delete operations which are adjacent or overlapping
                var mergedOperations = [];
                var previousOperation = operations[0];
                for(var i = 1; i < operations.length; i++)if (previousOperation.endLineNumber + 1 >= operations[i].startLineNumber) // Merge current operations into the previous one
                previousOperation.endLineNumber = operations[i].endLineNumber;
                else {
                    // Push previous operation
                    mergedOperations.push(previousOperation);
                    previousOperation = operations[i];
                }
                // Push the last operation
                mergedOperations.push(previousOperation);
                return mergedOperations;
            }
        }
    ]);
    return DeleteLinesAction;
}(_editorExtensionsJs.EditorAction);
var IndentLinesAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(IndentLinesAction, EditorAction);
    var _super = _helpers.createSuper(IndentLinesAction);
    function IndentLinesAction() {
        _helpers.classCallCheck(this, IndentLinesAction);
        return _super.call(this, {
            id: 'editor.action.indentLines',
            label: _nlsJs.localize('lines.indent', "Indent Line"),
            alias: 'Indent Line',
            precondition: _editorContextKeysJs.EditorContextKeys.writable,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: 2137 /* BracketRight */ ,
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    _helpers.createClass(IndentLinesAction, [
        {
            key: "run",
            value: function run(_accessor, editor) {
                var viewModel = editor._getViewModel();
                if (!viewModel) return;
                editor.pushUndoStop();
                editor.executeCommands(this.id, _cursorTypeOperationsJs.TypeOperations.indent(viewModel.cursorConfig, editor.getModel(), editor.getSelections()));
                editor.pushUndoStop();
            }
        }
    ]);
    return IndentLinesAction;
}(_editorExtensionsJs.EditorAction);
var OutdentLinesAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(OutdentLinesAction, EditorAction);
    var _super = _helpers.createSuper(OutdentLinesAction);
    function OutdentLinesAction() {
        _helpers.classCallCheck(this, OutdentLinesAction);
        return _super.call(this, {
            id: 'editor.action.outdentLines',
            label: _nlsJs.localize('lines.outdent', "Outdent Line"),
            alias: 'Outdent Line',
            precondition: _editorContextKeysJs.EditorContextKeys.writable,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: 2135 /* BracketLeft */ ,
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    _helpers.createClass(OutdentLinesAction, [
        {
            key: "run",
            value: function run(_accessor, editor) {
                _coreCommandsJs.CoreEditingCommands.Outdent.runEditorCommand(_accessor, editor, null);
            }
        }
    ]);
    return OutdentLinesAction;
}(_editorExtensionsJs.EditorAction);
var InsertLineBeforeAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(InsertLineBeforeAction, EditorAction);
    var _super = _helpers.createSuper(InsertLineBeforeAction);
    function InsertLineBeforeAction() {
        _helpers.classCallCheck(this, InsertLineBeforeAction);
        return _super.call(this, {
            id: 'editor.action.insertLineBefore',
            label: _nlsJs.localize('lines.insertBefore', "Insert Line Above"),
            alias: 'Insert Line Above',
            precondition: _editorContextKeysJs.EditorContextKeys.writable,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: 3075 /* Enter */ ,
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    _helpers.createClass(InsertLineBeforeAction, [
        {
            key: "run",
            value: function run(_accessor, editor) {
                var viewModel = editor._getViewModel();
                if (!viewModel) return;
                editor.pushUndoStop();
                editor.executeCommands(this.id, _cursorTypeOperationsJs.TypeOperations.lineInsertBefore(viewModel.cursorConfig, editor.getModel(), editor.getSelections()));
            }
        }
    ]);
    return InsertLineBeforeAction;
}(_editorExtensionsJs.EditorAction);
var InsertLineAfterAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(InsertLineAfterAction, EditorAction);
    var _super = _helpers.createSuper(InsertLineAfterAction);
    function InsertLineAfterAction() {
        _helpers.classCallCheck(this, InsertLineAfterAction);
        return _super.call(this, {
            id: 'editor.action.insertLineAfter',
            label: _nlsJs.localize('lines.insertAfter', "Insert Line Below"),
            alias: 'Insert Line Below',
            precondition: _editorContextKeysJs.EditorContextKeys.writable,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: 2051 /* Enter */ ,
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    _helpers.createClass(InsertLineAfterAction, [
        {
            key: "run",
            value: function run(_accessor, editor) {
                var viewModel = editor._getViewModel();
                if (!viewModel) return;
                editor.pushUndoStop();
                editor.executeCommands(this.id, _cursorTypeOperationsJs.TypeOperations.lineInsertAfter(viewModel.cursorConfig, editor.getModel(), editor.getSelections()));
            }
        }
    ]);
    return InsertLineAfterAction;
}(_editorExtensionsJs.EditorAction);
var AbstractDeleteAllToBoundaryAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(AbstractDeleteAllToBoundaryAction, EditorAction);
    var _super = _helpers.createSuper(AbstractDeleteAllToBoundaryAction);
    function AbstractDeleteAllToBoundaryAction() {
        _helpers.classCallCheck(this, AbstractDeleteAllToBoundaryAction);
        return _super.apply(this, arguments);
    }
    _helpers.createClass(AbstractDeleteAllToBoundaryAction, [
        {
            key: "run",
            value: function run(_accessor, editor) {
                if (!editor.hasModel()) return;
                var primaryCursor = editor.getSelection();
                var rangesToDelete = this._getRangesToDelete(editor);
                // merge overlapping selections
                var effectiveRanges = [];
                for(var i = 0, count = rangesToDelete.length - 1; i < count; i++){
                    var range = rangesToDelete[i];
                    var nextRange = rangesToDelete[i + 1];
                    if (_rangeJs.Range.intersectRanges(range, nextRange) === null) effectiveRanges.push(range);
                    else rangesToDelete[i + 1] = _rangeJs.Range.plusRange(range, nextRange);
                }
                effectiveRanges.push(rangesToDelete[rangesToDelete.length - 1]);
                var endCursorState = this._getEndCursorState(primaryCursor, effectiveRanges);
                var edits = effectiveRanges.map(function(range) {
                    return _editOperationJs.EditOperation.replace(range, '');
                });
                editor.pushUndoStop();
                editor.executeEdits(this.id, edits, endCursorState);
                editor.pushUndoStop();
            }
        }
    ]);
    return AbstractDeleteAllToBoundaryAction;
}(_editorExtensionsJs.EditorAction);
var DeleteAllLeftAction = /*#__PURE__*/ function(AbstractDeleteAllToBoundaryAction) {
    "use strict";
    _helpers.inherits(DeleteAllLeftAction, AbstractDeleteAllToBoundaryAction);
    var _super = _helpers.createSuper(DeleteAllLeftAction);
    function DeleteAllLeftAction() {
        _helpers.classCallCheck(this, DeleteAllLeftAction);
        return _super.call(this, {
            id: 'deleteAllLeft',
            label: _nlsJs.localize('lines.deleteAllLeft', "Delete All Left"),
            alias: 'Delete All Left',
            precondition: _editorContextKeysJs.EditorContextKeys.writable,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.textInputFocus,
                primary: 0,
                mac: {
                    primary: 2049 /* Backspace */ 
                },
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    _helpers.createClass(DeleteAllLeftAction, [
        {
            key: "_getEndCursorState",
            value: function _getEndCursorState(primaryCursor, rangesToDelete) {
                var endPrimaryCursor = null;
                var endCursorState = [];
                var deletedLines = 0;
                rangesToDelete.forEach(function(range) {
                    var endCursor;
                    if (range.endColumn === 1 && deletedLines > 0) {
                        var newStartLine = range.startLineNumber - deletedLines;
                        endCursor = new _selectionJs.Selection(newStartLine, range.startColumn, newStartLine, range.startColumn);
                    } else endCursor = new _selectionJs.Selection(range.startLineNumber, range.startColumn, range.startLineNumber, range.startColumn);
                    deletedLines += range.endLineNumber - range.startLineNumber;
                    if (range.intersectRanges(primaryCursor)) endPrimaryCursor = endCursor;
                    else endCursorState.push(endCursor);
                });
                if (endPrimaryCursor) endCursorState.unshift(endPrimaryCursor);
                return endCursorState;
            }
        },
        {
            key: "_getRangesToDelete",
            value: function _getRangesToDelete(editor) {
                var selections = editor.getSelections();
                if (selections === null) return [];
                var rangesToDelete = selections;
                var model = editor.getModel();
                if (model === null) return [];
                rangesToDelete.sort(_rangeJs.Range.compareRangesUsingStarts);
                rangesToDelete = rangesToDelete.map(function(selection) {
                    if (selection.isEmpty()) {
                        if (selection.startColumn === 1) {
                            var deleteFromLine = Math.max(1, selection.startLineNumber - 1);
                            var deleteFromColumn = selection.startLineNumber === 1 ? 1 : model.getLineContent(deleteFromLine).length + 1;
                            return new _rangeJs.Range(deleteFromLine, deleteFromColumn, selection.startLineNumber, 1);
                        } else return new _rangeJs.Range(selection.startLineNumber, 1, selection.startLineNumber, selection.startColumn);
                    } else return new _rangeJs.Range(selection.startLineNumber, 1, selection.endLineNumber, selection.endColumn);
                });
                return rangesToDelete;
            }
        }
    ]);
    return DeleteAllLeftAction;
}(AbstractDeleteAllToBoundaryAction);
var DeleteAllRightAction = /*#__PURE__*/ function(AbstractDeleteAllToBoundaryAction) {
    "use strict";
    _helpers.inherits(DeleteAllRightAction, AbstractDeleteAllToBoundaryAction);
    var _super = _helpers.createSuper(DeleteAllRightAction);
    function DeleteAllRightAction() {
        _helpers.classCallCheck(this, DeleteAllRightAction);
        return _super.call(this, {
            id: 'deleteAllRight',
            label: _nlsJs.localize('lines.deleteAllRight', "Delete All Right"),
            alias: 'Delete All Right',
            precondition: _editorContextKeysJs.EditorContextKeys.writable,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.textInputFocus,
                primary: 0,
                mac: {
                    primary: 297 /* KeyK */ ,
                    secondary: [
                        2068 /* Delete */ 
                    ]
                },
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    _helpers.createClass(DeleteAllRightAction, [
        {
            key: "_getEndCursorState",
            value: function _getEndCursorState(primaryCursor, rangesToDelete) {
                var endPrimaryCursor = null;
                var endCursorState = [];
                for(var i = 0, len = rangesToDelete.length, offset = 0; i < len; i++){
                    var range = rangesToDelete[i];
                    var endCursor = new _selectionJs.Selection(range.startLineNumber - offset, range.startColumn, range.startLineNumber - offset, range.startColumn);
                    if (range.intersectRanges(primaryCursor)) endPrimaryCursor = endCursor;
                    else endCursorState.push(endCursor);
                }
                if (endPrimaryCursor) endCursorState.unshift(endPrimaryCursor);
                return endCursorState;
            }
        },
        {
            key: "_getRangesToDelete",
            value: function _getRangesToDelete(editor) {
                var model = editor.getModel();
                if (model === null) return [];
                var selections = editor.getSelections();
                if (selections === null) return [];
                var rangesToDelete = selections.map(function(sel) {
                    if (sel.isEmpty()) {
                        var maxColumn = model.getLineMaxColumn(sel.startLineNumber);
                        if (sel.startColumn === maxColumn) return new _rangeJs.Range(sel.startLineNumber, sel.startColumn, sel.startLineNumber + 1, 1);
                        else return new _rangeJs.Range(sel.startLineNumber, sel.startColumn, sel.startLineNumber, maxColumn);
                    }
                    return sel;
                });
                rangesToDelete.sort(_rangeJs.Range.compareRangesUsingStarts);
                return rangesToDelete;
            }
        }
    ]);
    return DeleteAllRightAction;
}(AbstractDeleteAllToBoundaryAction);
var JoinLinesAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(JoinLinesAction, EditorAction);
    var _super = _helpers.createSuper(JoinLinesAction);
    function JoinLinesAction() {
        _helpers.classCallCheck(this, JoinLinesAction);
        return _super.call(this, {
            id: 'editor.action.joinLines',
            label: _nlsJs.localize('lines.joinLines', "Join Lines"),
            alias: 'Join Lines',
            precondition: _editorContextKeysJs.EditorContextKeys.writable,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: 0,
                mac: {
                    primary: 296 /* KeyJ */ 
                },
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    _helpers.createClass(JoinLinesAction, [
        {
            key: "run",
            value: function run(_accessor, editor) {
                var selections = editor.getSelections();
                if (selections === null) return;
                var primaryCursor = editor.getSelection();
                if (primaryCursor === null) return;
                selections.sort(_rangeJs.Range.compareRangesUsingStarts);
                var reducedSelections = [];
                var lastSelection = selections.reduce(function(previousValue, currentValue) {
                    if (previousValue.isEmpty()) {
                        if (previousValue.endLineNumber === currentValue.startLineNumber) {
                            if (primaryCursor.equalsSelection(previousValue)) primaryCursor = currentValue;
                            return currentValue;
                        }
                        if (currentValue.startLineNumber > previousValue.endLineNumber + 1) {
                            reducedSelections.push(previousValue);
                            return currentValue;
                        } else return new _selectionJs.Selection(previousValue.startLineNumber, previousValue.startColumn, currentValue.endLineNumber, currentValue.endColumn);
                    } else {
                        if (currentValue.startLineNumber > previousValue.endLineNumber) {
                            reducedSelections.push(previousValue);
                            return currentValue;
                        } else return new _selectionJs.Selection(previousValue.startLineNumber, previousValue.startColumn, currentValue.endLineNumber, currentValue.endColumn);
                    }
                });
                reducedSelections.push(lastSelection);
                var model = editor.getModel();
                if (model === null) return;
                var edits = [];
                var endCursorState = [];
                var endPrimaryCursor = primaryCursor;
                var lineOffset = 0;
                for(var i = 0, len = reducedSelections.length; i < len; i++){
                    var selection = reducedSelections[i];
                    var startLineNumber = selection.startLineNumber;
                    var startColumn = 1;
                    var columnDeltaOffset = 0;
                    var endLineNumber = void 0, endColumn = void 0;
                    var selectionEndPositionOffset = model.getLineContent(selection.endLineNumber).length - selection.endColumn;
                    if (selection.isEmpty() || selection.startLineNumber === selection.endLineNumber) {
                        var position = selection.getStartPosition();
                        if (position.lineNumber < model.getLineCount()) {
                            endLineNumber = startLineNumber + 1;
                            endColumn = model.getLineMaxColumn(endLineNumber);
                        } else {
                            endLineNumber = position.lineNumber;
                            endColumn = model.getLineMaxColumn(position.lineNumber);
                        }
                    } else {
                        endLineNumber = selection.endLineNumber;
                        endColumn = model.getLineMaxColumn(endLineNumber);
                    }
                    var trimmedLinesContent = model.getLineContent(startLineNumber);
                    for(var i1 = startLineNumber + 1; i1 <= endLineNumber; i1++){
                        var lineText = model.getLineContent(i1);
                        var firstNonWhitespaceIdx = model.getLineFirstNonWhitespaceColumn(i1);
                        if (firstNonWhitespaceIdx >= 1) {
                            var insertSpace = true;
                            if (trimmedLinesContent === '') insertSpace = false;
                            if (insertSpace && (trimmedLinesContent.charAt(trimmedLinesContent.length - 1) === ' ' || trimmedLinesContent.charAt(trimmedLinesContent.length - 1) === '\t')) {
                                insertSpace = false;
                                trimmedLinesContent = trimmedLinesContent.replace(/[\s\uFEFF\xA0]+$/g, ' ');
                            }
                            var lineTextWithoutIndent = lineText.substr(firstNonWhitespaceIdx - 1);
                            trimmedLinesContent += (insertSpace ? ' ' : '') + lineTextWithoutIndent;
                            if (insertSpace) columnDeltaOffset = lineTextWithoutIndent.length + 1;
                            else columnDeltaOffset = lineTextWithoutIndent.length;
                        } else columnDeltaOffset = 0;
                    }
                    var deleteSelection = new _rangeJs.Range(startLineNumber, startColumn, endLineNumber, endColumn);
                    if (!deleteSelection.isEmpty()) {
                        var resultSelection = void 0;
                        if (selection.isEmpty()) {
                            edits.push(_editOperationJs.EditOperation.replace(deleteSelection, trimmedLinesContent));
                            resultSelection = new _selectionJs.Selection(deleteSelection.startLineNumber - lineOffset, trimmedLinesContent.length - columnDeltaOffset + 1, startLineNumber - lineOffset, trimmedLinesContent.length - columnDeltaOffset + 1);
                        } else if (selection.startLineNumber === selection.endLineNumber) {
                            edits.push(_editOperationJs.EditOperation.replace(deleteSelection, trimmedLinesContent));
                            resultSelection = new _selectionJs.Selection(selection.startLineNumber - lineOffset, selection.startColumn, selection.endLineNumber - lineOffset, selection.endColumn);
                        } else {
                            edits.push(_editOperationJs.EditOperation.replace(deleteSelection, trimmedLinesContent));
                            resultSelection = new _selectionJs.Selection(selection.startLineNumber - lineOffset, selection.startColumn, selection.startLineNumber - lineOffset, trimmedLinesContent.length - selectionEndPositionOffset);
                        }
                        if (_rangeJs.Range.intersectRanges(deleteSelection, primaryCursor) !== null) endPrimaryCursor = resultSelection;
                        else endCursorState.push(resultSelection);
                    }
                    lineOffset += deleteSelection.endLineNumber - deleteSelection.startLineNumber;
                }
                endCursorState.unshift(endPrimaryCursor);
                editor.pushUndoStop();
                editor.executeEdits(this.id, edits, endCursorState);
                editor.pushUndoStop();
            }
        }
    ]);
    return JoinLinesAction;
}(_editorExtensionsJs.EditorAction);
var TransposeAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(TransposeAction, EditorAction);
    var _super = _helpers.createSuper(TransposeAction);
    function TransposeAction() {
        _helpers.classCallCheck(this, TransposeAction);
        return _super.call(this, {
            id: 'editor.action.transpose',
            label: _nlsJs.localize('editor.transpose', "Transpose characters around the cursor"),
            alias: 'Transpose characters around the cursor',
            precondition: _editorContextKeysJs.EditorContextKeys.writable
        });
    }
    _helpers.createClass(TransposeAction, [
        {
            key: "run",
            value: function run(_accessor, editor) {
                var selections = editor.getSelections();
                if (selections === null) return;
                var model = editor.getModel();
                if (model === null) return;
                var commands = [];
                for(var i = 0, len = selections.length; i < len; i++){
                    var selection = selections[i];
                    if (!selection.isEmpty()) continue;
                    var cursor = selection.getStartPosition();
                    var maxColumn = model.getLineMaxColumn(cursor.lineNumber);
                    if (cursor.column >= maxColumn) {
                        if (cursor.lineNumber === model.getLineCount()) continue;
                        // The cursor is at the end of current line and current line is not empty
                        // then we transpose the character before the cursor and the line break if there is any following line.
                        var deleteSelection = new _rangeJs.Range(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber + 1, 1);
                        var chars = model.getValueInRange(deleteSelection).split('').reverse().join('');
                        commands.push(new _replaceCommandJs.ReplaceCommand(new _selectionJs.Selection(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber + 1, 1), chars));
                    } else {
                        var deleteSelection1 = new _rangeJs.Range(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber, cursor.column + 1);
                        var chars1 = model.getValueInRange(deleteSelection1).split('').reverse().join('');
                        commands.push(new _replaceCommandJs.ReplaceCommandThatPreservesSelection(deleteSelection1, chars1, new _selectionJs.Selection(cursor.lineNumber, cursor.column + 1, cursor.lineNumber, cursor.column + 1)));
                    }
                }
                editor.pushUndoStop();
                editor.executeCommands(this.id, commands);
                editor.pushUndoStop();
            }
        }
    ]);
    return TransposeAction;
}(_editorExtensionsJs.EditorAction);
var AbstractCaseAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(AbstractCaseAction, EditorAction);
    var _super = _helpers.createSuper(AbstractCaseAction);
    function AbstractCaseAction() {
        _helpers.classCallCheck(this, AbstractCaseAction);
        return _super.apply(this, arguments);
    }
    _helpers.createClass(AbstractCaseAction, [
        {
            key: "run",
            value: function run(_accessor, editor) {
                var selections = editor.getSelections();
                if (selections === null) return;
                var model = editor.getModel();
                if (model === null) return;
                var wordSeparators = editor.getOption(116 /* wordSeparators */ );
                var textEdits = [];
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = selections[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var selection = _step.value;
                        if (selection.isEmpty()) {
                            var cursor = selection.getStartPosition();
                            var word = editor.getConfiguredWordAtPosition(cursor);
                            if (!word) continue;
                            var wordRange = new _rangeJs.Range(cursor.lineNumber, word.startColumn, cursor.lineNumber, word.endColumn);
                            var text = model.getValueInRange(wordRange);
                            textEdits.push(_editOperationJs.EditOperation.replace(wordRange, this._modifyText(text, wordSeparators)));
                        } else {
                            var text1 = model.getValueInRange(selection);
                            textEdits.push(_editOperationJs.EditOperation.replace(selection, this._modifyText(text1, wordSeparators)));
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                editor.pushUndoStop();
                editor.executeEdits(this.id, textEdits);
                editor.pushUndoStop();
            }
        }
    ]);
    return AbstractCaseAction;
}(_editorExtensionsJs.EditorAction);
var UpperCaseAction = /*#__PURE__*/ function(AbstractCaseAction) {
    "use strict";
    _helpers.inherits(UpperCaseAction, AbstractCaseAction);
    var _super = _helpers.createSuper(UpperCaseAction);
    function UpperCaseAction() {
        _helpers.classCallCheck(this, UpperCaseAction);
        return _super.call(this, {
            id: 'editor.action.transformToUppercase',
            label: _nlsJs.localize('editor.transformToUppercase', "Transform to Uppercase"),
            alias: 'Transform to Uppercase',
            precondition: _editorContextKeysJs.EditorContextKeys.writable
        });
    }
    _helpers.createClass(UpperCaseAction, [
        {
            key: "_modifyText",
            value: function _modifyText(text, wordSeparators) {
                return text.toLocaleUpperCase();
            }
        }
    ]);
    return UpperCaseAction;
}(AbstractCaseAction);
var LowerCaseAction = /*#__PURE__*/ function(AbstractCaseAction) {
    "use strict";
    _helpers.inherits(LowerCaseAction, AbstractCaseAction);
    var _super = _helpers.createSuper(LowerCaseAction);
    function LowerCaseAction() {
        _helpers.classCallCheck(this, LowerCaseAction);
        return _super.call(this, {
            id: 'editor.action.transformToLowercase',
            label: _nlsJs.localize('editor.transformToLowercase', "Transform to Lowercase"),
            alias: 'Transform to Lowercase',
            precondition: _editorContextKeysJs.EditorContextKeys.writable
        });
    }
    _helpers.createClass(LowerCaseAction, [
        {
            key: "_modifyText",
            value: function _modifyText(text, wordSeparators) {
                return text.toLocaleLowerCase();
            }
        }
    ]);
    return LowerCaseAction;
}(AbstractCaseAction);
var BackwardsCompatibleRegExp = /*#__PURE__*/ function() {
    "use strict";
    function BackwardsCompatibleRegExp(_pattern, _flags) {
        _helpers.classCallCheck(this, BackwardsCompatibleRegExp);
        this._pattern = _pattern;
        this._flags = _flags;
        this._actual = null;
        this._evaluated = false;
    }
    _helpers.createClass(BackwardsCompatibleRegExp, [
        {
            key: "get",
            value: function get() {
                if (!this._evaluated) {
                    this._evaluated = true;
                    try {
                        this._actual = new RegExp(this._pattern, this._flags);
                    } catch (err) {
                    // this browser does not support this regular expression
                    }
                }
                return this._actual;
            }
        },
        {
            key: "isSupported",
            value: function isSupported() {
                return this.get() !== null;
            }
        }
    ]);
    return BackwardsCompatibleRegExp;
}();
var TitleCaseAction = /*#__PURE__*/ function(AbstractCaseAction) {
    "use strict";
    _helpers.inherits(TitleCaseAction, AbstractCaseAction);
    var _super = _helpers.createSuper(TitleCaseAction);
    function TitleCaseAction() {
        _helpers.classCallCheck(this, TitleCaseAction);
        return _super.call(this, {
            id: 'editor.action.transformToTitlecase',
            label: _nlsJs.localize('editor.transformToTitlecase', "Transform to Title Case"),
            alias: 'Transform to Title Case',
            precondition: _editorContextKeysJs.EditorContextKeys.writable
        });
    }
    _helpers.createClass(TitleCaseAction, [
        {
            key: "_modifyText",
            value: function _modifyText(text, wordSeparators) {
                var titleBoundary = TitleCaseAction.titleBoundary.get();
                if (!titleBoundary) // cannot support this
                return text;
                return text.toLocaleLowerCase().replace(titleBoundary, function(b) {
                    return b.toLocaleUpperCase();
                });
            }
        }
    ]);
    return TitleCaseAction;
}(AbstractCaseAction);
TitleCaseAction.titleBoundary = new BackwardsCompatibleRegExp('(^|[^\\p{L}\\p{N}\']|((^|\\P{L})\'))\\p{L}', 'gmu');
var SnakeCaseAction = /*#__PURE__*/ function(AbstractCaseAction) {
    "use strict";
    _helpers.inherits(SnakeCaseAction, AbstractCaseAction);
    var _super = _helpers.createSuper(SnakeCaseAction);
    function SnakeCaseAction() {
        _helpers.classCallCheck(this, SnakeCaseAction);
        return _super.call(this, {
            id: 'editor.action.transformToSnakecase',
            label: _nlsJs.localize('editor.transformToSnakecase', "Transform to Snake Case"),
            alias: 'Transform to Snake Case',
            precondition: _editorContextKeysJs.EditorContextKeys.writable
        });
    }
    _helpers.createClass(SnakeCaseAction, [
        {
            key: "_modifyText",
            value: function _modifyText(text, wordSeparators) {
                var caseBoundary = SnakeCaseAction.caseBoundary.get();
                var singleLetters = SnakeCaseAction.singleLetters.get();
                if (!caseBoundary || !singleLetters) // cannot support this
                return text;
                return text.replace(caseBoundary, '$1_$2').replace(singleLetters, '$1_$2$3').toLocaleLowerCase();
            }
        }
    ]);
    return SnakeCaseAction;
}(AbstractCaseAction);
SnakeCaseAction.caseBoundary = new BackwardsCompatibleRegExp('(\\p{Ll})(\\p{Lu})', 'gmu');
SnakeCaseAction.singleLetters = new BackwardsCompatibleRegExp('(\\p{Lu}|\\p{N})(\\p{Lu})(\\p{Ll})', 'gmu');
_editorExtensionsJs.registerEditorAction(CopyLinesUpAction);
_editorExtensionsJs.registerEditorAction(CopyLinesDownAction);
_editorExtensionsJs.registerEditorAction(DuplicateSelectionAction);
_editorExtensionsJs.registerEditorAction(MoveLinesUpAction);
_editorExtensionsJs.registerEditorAction(MoveLinesDownAction);
_editorExtensionsJs.registerEditorAction(SortLinesAscendingAction);
_editorExtensionsJs.registerEditorAction(SortLinesDescendingAction);
_editorExtensionsJs.registerEditorAction(DeleteDuplicateLinesAction);
_editorExtensionsJs.registerEditorAction(TrimTrailingWhitespaceAction);
_editorExtensionsJs.registerEditorAction(DeleteLinesAction);
_editorExtensionsJs.registerEditorAction(IndentLinesAction);
_editorExtensionsJs.registerEditorAction(OutdentLinesAction);
_editorExtensionsJs.registerEditorAction(InsertLineBeforeAction);
_editorExtensionsJs.registerEditorAction(InsertLineAfterAction);
_editorExtensionsJs.registerEditorAction(DeleteAllLeftAction);
_editorExtensionsJs.registerEditorAction(DeleteAllRightAction);
_editorExtensionsJs.registerEditorAction(JoinLinesAction);
_editorExtensionsJs.registerEditorAction(TransposeAction);
_editorExtensionsJs.registerEditorAction(UpperCaseAction);
_editorExtensionsJs.registerEditorAction(LowerCaseAction);
if (SnakeCaseAction.caseBoundary.isSupported() && SnakeCaseAction.singleLetters.isSupported()) _editorExtensionsJs.registerEditorAction(SnakeCaseAction);
if (TitleCaseAction.titleBoundary.isSupported()) _editorExtensionsJs.registerEditorAction(TitleCaseAction);

},{"@swc/helpers":"erO4s","../../../base/common/keyCodes.js":"4hRDv","../../browser/controller/coreCommands.js":"3tROU","../../browser/editorExtensions.js":"dFnlo","../../common/commands/replaceCommand.js":"kkstX","../../common/commands/trimTrailingWhitespaceCommand.js":"fDYJy","../../common/controller/cursorTypeOperations.js":"ebZuE","../../common/core/editOperation.js":"3D5yS","../../common/core/position.js":"6xP0w","../../common/core/range.js":"VbyL8","../../common/core/selection.js":"hjmnH","../../common/editorContextKeys.js":"2t2PW","./copyLinesCommand.js":"79q4u","./moveLinesCommand.js":"1lNXT","./sortLinesCommand.js":"cyZPR","../../../nls.js":"9djYb","../../../platform/actions/common/actions.js":"1qoxQ","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"fDYJy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TrimTrailingWhitespaceCommand", function() {
    return TrimTrailingWhitespaceCommand;
});
/**
 * Generate commands for trimming trailing whitespace on a model and ignore lines on which cursors are sitting.
 */ parcelHelpers.export(exports, "trimTrailingWhitespace", function() {
    return trimTrailingWhitespace;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _stringsJs = require("../../../base/common/strings.js");
var _editOperationJs = require("../core/editOperation.js");
var _rangeJs = require("../core/range.js");
var TrimTrailingWhitespaceCommand = /*#__PURE__*/ function() {
    "use strict";
    function TrimTrailingWhitespaceCommand(selection, cursors) {
        _helpers.classCallCheck(this, TrimTrailingWhitespaceCommand);
        this._selection = selection;
        this._cursors = cursors;
        this._selectionId = null;
    }
    _helpers.createClass(TrimTrailingWhitespaceCommand, [
        {
            key: "getEditOperations",
            value: function getEditOperations(model, builder) {
                var ops = trimTrailingWhitespace(model, this._cursors);
                for(var i = 0, len = ops.length; i < len; i++){
                    var op = ops[i];
                    builder.addEditOperation(op.range, op.text);
                }
                this._selectionId = builder.trackSelection(this._selection);
            }
        },
        {
            key: "computeCursorState",
            value: function computeCursorState(model, helper) {
                return helper.getTrackedSelection(this._selectionId);
            }
        }
    ]);
    return TrimTrailingWhitespaceCommand;
}();
function trimTrailingWhitespace(model, cursors) {
    // Sort cursors ascending
    cursors.sort(function(a, b) {
        if (a.lineNumber === b.lineNumber) return a.column - b.column;
        return a.lineNumber - b.lineNumber;
    });
    // Reduce multiple cursors on the same line and only keep the last one on the line
    for(var i = cursors.length - 2; i >= 0; i--)if (cursors[i].lineNumber === cursors[i + 1].lineNumber) // Remove cursor at `i`
    cursors.splice(i, 1);
    var r = [];
    var rLen = 0;
    var cursorIndex = 0;
    var cursorLen = cursors.length;
    for(var lineNumber = 1, lineCount = model.getLineCount(); lineNumber <= lineCount; lineNumber++){
        var lineContent = model.getLineContent(lineNumber);
        var maxLineColumn = lineContent.length + 1;
        var minEditColumn = 0;
        if (cursorIndex < cursorLen && cursors[cursorIndex].lineNumber === lineNumber) {
            minEditColumn = cursors[cursorIndex].column;
            cursorIndex++;
            if (minEditColumn === maxLineColumn) continue;
        }
        if (lineContent.length === 0) continue;
        var lastNonWhitespaceIndex = _stringsJs.lastNonWhitespaceIndex(lineContent);
        var fromColumn = 0;
        if (lastNonWhitespaceIndex === -1) // Entire line is whitespace
        fromColumn = 1;
        else if (lastNonWhitespaceIndex !== lineContent.length - 1) // There is trailing whitespace
        fromColumn = lastNonWhitespaceIndex + 2;
        else continue;
        fromColumn = Math.max(minEditColumn, fromColumn);
        r[rLen++] = _editOperationJs.EditOperation.delete(new _rangeJs.Range(lineNumber, fromColumn, lineNumber, maxLineColumn));
    }
    return r;
}

},{"@swc/helpers":"erO4s","../../../base/common/strings.js":"jsb6w","../core/editOperation.js":"3D5yS","../core/range.js":"VbyL8","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"79q4u":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CopyLinesCommand", function() {
    return CopyLinesCommand;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _rangeJs = require("../../common/core/range.js");
var _selectionJs = require("../../common/core/selection.js");
var CopyLinesCommand = /*#__PURE__*/ function() {
    "use strict";
    function CopyLinesCommand(selection, isCopyingDown, noop) {
        _helpers.classCallCheck(this, CopyLinesCommand);
        this._selection = selection;
        this._isCopyingDown = isCopyingDown;
        this._noop = noop || false;
        this._selectionDirection = 0 /* LTR */ ;
        this._selectionId = null;
        this._startLineNumberDelta = 0;
        this._endLineNumberDelta = 0;
    }
    _helpers.createClass(CopyLinesCommand, [
        {
            key: "getEditOperations",
            value: function getEditOperations(model, builder) {
                var s = this._selection;
                this._startLineNumberDelta = 0;
                this._endLineNumberDelta = 0;
                if (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {
                    this._endLineNumberDelta = 1;
                    s = s.setEndPosition(s.endLineNumber - 1, model.getLineMaxColumn(s.endLineNumber - 1));
                }
                var sourceLines = [];
                for(var i = s.startLineNumber; i <= s.endLineNumber; i++)sourceLines.push(model.getLineContent(i));
                var sourceText = sourceLines.join('\n');
                if (sourceText === '') // Duplicating empty line
                {
                    if (this._isCopyingDown) {
                        this._startLineNumberDelta++;
                        this._endLineNumberDelta++;
                    }
                }
                if (this._noop) builder.addEditOperation(new _rangeJs.Range(s.endLineNumber, model.getLineMaxColumn(s.endLineNumber), s.endLineNumber + 1, 1), s.endLineNumber === model.getLineCount() ? '' : '\n');
                else if (!this._isCopyingDown) builder.addEditOperation(new _rangeJs.Range(s.endLineNumber, model.getLineMaxColumn(s.endLineNumber), s.endLineNumber, model.getLineMaxColumn(s.endLineNumber)), '\n' + sourceText);
                else builder.addEditOperation(new _rangeJs.Range(s.startLineNumber, 1, s.startLineNumber, 1), sourceText + '\n');
                this._selectionId = builder.trackSelection(s);
                this._selectionDirection = this._selection.getDirection();
            }
        },
        {
            key: "computeCursorState",
            value: function computeCursorState(model, helper) {
                var result = helper.getTrackedSelection(this._selectionId);
                if (this._startLineNumberDelta !== 0 || this._endLineNumberDelta !== 0) {
                    var startLineNumber = result.startLineNumber;
                    var startColumn = result.startColumn;
                    var endLineNumber = result.endLineNumber;
                    var endColumn = result.endColumn;
                    if (this._startLineNumberDelta !== 0) {
                        startLineNumber = startLineNumber + this._startLineNumberDelta;
                        startColumn = 1;
                    }
                    if (this._endLineNumberDelta !== 0) {
                        endLineNumber = endLineNumber + this._endLineNumberDelta;
                        endColumn = 1;
                    }
                    result = _selectionJs.Selection.createWithDirection(startLineNumber, startColumn, endLineNumber, endColumn, this._selectionDirection);
                }
                return result;
            }
        }
    ]);
    return CopyLinesCommand;
}();

},{"@swc/helpers":"erO4s","../../common/core/range.js":"VbyL8","../../common/core/selection.js":"hjmnH","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"1lNXT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MoveLinesCommand", function() {
    return MoveLinesCommand;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _stringsJs = require("../../../base/common/strings.js");
var _shiftCommandJs = require("../../common/commands/shiftCommand.js");
var _rangeJs = require("../../common/core/range.js");
var _selectionJs = require("../../common/core/selection.js");
var _languageConfigurationJs = require("../../common/modes/languageConfiguration.js");
var _languageConfigurationRegistryJs = require("../../common/modes/languageConfigurationRegistry.js");
var _indentUtilsJs = require("../indentation/indentUtils.js");
var MoveLinesCommand = /*#__PURE__*/ function() {
    "use strict";
    function MoveLinesCommand(selection, isMovingDown, autoIndent) {
        _helpers.classCallCheck(this, MoveLinesCommand);
        this._selection = selection;
        this._isMovingDown = isMovingDown;
        this._autoIndent = autoIndent;
        this._selectionId = null;
        this._moveEndLineSelectionShrink = false;
    }
    _helpers.createClass(MoveLinesCommand, [
        {
            key: "getEditOperations",
            value: function getEditOperations(model, builder) {
                var modelLineCount = model.getLineCount();
                if (this._isMovingDown && this._selection.endLineNumber === modelLineCount) {
                    this._selectionId = builder.trackSelection(this._selection);
                    return;
                }
                if (!this._isMovingDown && this._selection.startLineNumber === 1) {
                    this._selectionId = builder.trackSelection(this._selection);
                    return;
                }
                this._moveEndPositionDown = false;
                var s = this._selection;
                if (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {
                    this._moveEndPositionDown = true;
                    s = s.setEndPosition(s.endLineNumber - 1, model.getLineMaxColumn(s.endLineNumber - 1));
                }
                var ref = model.getOptions(), tabSize = ref.tabSize, indentSize = ref.indentSize, insertSpaces = ref.insertSpaces;
                var indentConverter = this.buildIndentConverter(tabSize, indentSize, insertSpaces);
                var virtualModel = {
                    getLineTokens: function(lineNumber) {
                        return model.getLineTokens(lineNumber);
                    },
                    getLanguageId: function() {
                        return model.getLanguageId();
                    },
                    getLanguageIdAtPosition: function(lineNumber, column) {
                        return model.getLanguageIdAtPosition(lineNumber, column);
                    },
                    getLineContent: null
                };
                if (s.startLineNumber === s.endLineNumber && model.getLineMaxColumn(s.startLineNumber) === 1) {
                    // Current line is empty
                    var lineNumber1 = s.startLineNumber;
                    var otherLineNumber = this._isMovingDown ? lineNumber1 + 1 : lineNumber1 - 1;
                    if (model.getLineMaxColumn(otherLineNumber) === 1) // Other line number is empty too, so no editing is needed
                    // Add a no-op to force running by the model
                    builder.addEditOperation(new _rangeJs.Range(1, 1, 1, 1), null);
                    else {
                        // Type content from other line number on line number
                        builder.addEditOperation(new _rangeJs.Range(lineNumber1, 1, lineNumber1, 1), model.getLineContent(otherLineNumber));
                        // Remove content from other line number
                        builder.addEditOperation(new _rangeJs.Range(otherLineNumber, 1, otherLineNumber, model.getLineMaxColumn(otherLineNumber)), null);
                    }
                    // Track selection at the other line number
                    s = new _selectionJs.Selection(otherLineNumber, 1, otherLineNumber, 1);
                } else {
                    var movingLineNumber;
                    var movingLineText;
                    if (this._isMovingDown) {
                        movingLineNumber = s.endLineNumber + 1;
                        movingLineText = model.getLineContent(movingLineNumber);
                        // Delete line that needs to be moved
                        builder.addEditOperation(new _rangeJs.Range(movingLineNumber - 1, model.getLineMaxColumn(movingLineNumber - 1), movingLineNumber, model.getLineMaxColumn(movingLineNumber)), null);
                        var insertingText = movingLineText;
                        if (this.shouldAutoIndent(model, s)) {
                            var movingLineMatchResult = this.matchEnterRule(model, indentConverter, tabSize, movingLineNumber, s.startLineNumber - 1);
                            // if s.startLineNumber - 1 matches onEnter rule, we still honor that.
                            if (movingLineMatchResult !== null) {
                                var oldIndentation = _stringsJs.getLeadingWhitespace(model.getLineContent(movingLineNumber));
                                var newSpaceCnt = movingLineMatchResult + _indentUtilsJs.getSpaceCnt(oldIndentation, tabSize);
                                var newIndentation = _indentUtilsJs.generateIndent(newSpaceCnt, tabSize, insertSpaces);
                                insertingText = newIndentation + this.trimLeft(movingLineText);
                            } else {
                                // no enter rule matches, let's check indentatin rules then.
                                virtualModel.getLineContent = function(lineNumber) {
                                    if (lineNumber === s.startLineNumber) return model.getLineContent(movingLineNumber);
                                    else return model.getLineContent(lineNumber);
                                };
                                var indentOfMovingLine = _languageConfigurationRegistryJs.LanguageConfigurationRegistry.getGoodIndentForLine(this._autoIndent, virtualModel, model.getLanguageIdAtPosition(movingLineNumber, 1), s.startLineNumber, indentConverter);
                                if (indentOfMovingLine !== null) {
                                    var oldIndentation1 = _stringsJs.getLeadingWhitespace(model.getLineContent(movingLineNumber));
                                    var newSpaceCnt1 = _indentUtilsJs.getSpaceCnt(indentOfMovingLine, tabSize);
                                    var oldSpaceCnt = _indentUtilsJs.getSpaceCnt(oldIndentation1, tabSize);
                                    if (newSpaceCnt1 !== oldSpaceCnt) {
                                        var newIndentation1 = _indentUtilsJs.generateIndent(newSpaceCnt1, tabSize, insertSpaces);
                                        insertingText = newIndentation1 + this.trimLeft(movingLineText);
                                    }
                                }
                            }
                            // add edit operations for moving line first to make sure it's executed after we make indentation change
                            // to s.startLineNumber
                            builder.addEditOperation(new _rangeJs.Range(s.startLineNumber, 1, s.startLineNumber, 1), insertingText + '\n');
                            var ret = this.matchEnterRuleMovingDown(model, indentConverter, tabSize, s.startLineNumber, movingLineNumber, insertingText);
                            // check if the line being moved before matches onEnter rules, if so let's adjust the indentation by onEnter rules.
                            if (ret !== null) {
                                if (ret !== 0) this.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, ret);
                            } else {
                                // it doesn't match onEnter rules, let's check indentation rules then.
                                virtualModel.getLineContent = function(lineNumber) {
                                    if (lineNumber === s.startLineNumber) return insertingText;
                                    else if (lineNumber >= s.startLineNumber + 1 && lineNumber <= s.endLineNumber + 1) return model.getLineContent(lineNumber - 1);
                                    else return model.getLineContent(lineNumber);
                                };
                                var newIndentatOfMovingBlock = _languageConfigurationRegistryJs.LanguageConfigurationRegistry.getGoodIndentForLine(this._autoIndent, virtualModel, model.getLanguageIdAtPosition(movingLineNumber, 1), s.startLineNumber + 1, indentConverter);
                                if (newIndentatOfMovingBlock !== null) {
                                    var oldIndentation2 = _stringsJs.getLeadingWhitespace(model.getLineContent(s.startLineNumber));
                                    var newSpaceCnt2 = _indentUtilsJs.getSpaceCnt(newIndentatOfMovingBlock, tabSize);
                                    var oldSpaceCnt1 = _indentUtilsJs.getSpaceCnt(oldIndentation2, tabSize);
                                    if (newSpaceCnt2 !== oldSpaceCnt1) {
                                        var spaceCntOffset = newSpaceCnt2 - oldSpaceCnt1;
                                        this.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, spaceCntOffset);
                                    }
                                }
                            }
                        } else // Insert line that needs to be moved before
                        builder.addEditOperation(new _rangeJs.Range(s.startLineNumber, 1, s.startLineNumber, 1), insertingText + '\n');
                    } else {
                        movingLineNumber = s.startLineNumber - 1;
                        movingLineText = model.getLineContent(movingLineNumber);
                        // Delete line that needs to be moved
                        builder.addEditOperation(new _rangeJs.Range(movingLineNumber, 1, movingLineNumber + 1, 1), null);
                        // Insert line that needs to be moved after
                        builder.addEditOperation(new _rangeJs.Range(s.endLineNumber, model.getLineMaxColumn(s.endLineNumber), s.endLineNumber, model.getLineMaxColumn(s.endLineNumber)), '\n' + movingLineText);
                        if (this.shouldAutoIndent(model, s)) {
                            virtualModel.getLineContent = function(lineNumber) {
                                if (lineNumber === movingLineNumber) return model.getLineContent(s.startLineNumber);
                                else return model.getLineContent(lineNumber);
                            };
                            var ret1 = this.matchEnterRule(model, indentConverter, tabSize, s.startLineNumber, s.startLineNumber - 2);
                            // check if s.startLineNumber - 2 matches onEnter rules, if so adjust the moving block by onEnter rules.
                            if (ret1 !== null) {
                                if (ret1 !== 0) this.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, ret1);
                            } else {
                                // it doesn't match any onEnter rule, let's check indentation rules then.
                                var indentOfFirstLine = _languageConfigurationRegistryJs.LanguageConfigurationRegistry.getGoodIndentForLine(this._autoIndent, virtualModel, model.getLanguageIdAtPosition(s.startLineNumber, 1), movingLineNumber, indentConverter);
                                if (indentOfFirstLine !== null) {
                                    // adjust the indentation of the moving block
                                    var oldIndent = _stringsJs.getLeadingWhitespace(model.getLineContent(s.startLineNumber));
                                    var newSpaceCnt3 = _indentUtilsJs.getSpaceCnt(indentOfFirstLine, tabSize);
                                    var oldSpaceCnt2 = _indentUtilsJs.getSpaceCnt(oldIndent, tabSize);
                                    if (newSpaceCnt3 !== oldSpaceCnt2) {
                                        var spaceCntOffset1 = newSpaceCnt3 - oldSpaceCnt2;
                                        this.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, spaceCntOffset1);
                                    }
                                }
                            }
                        }
                    }
                }
                this._selectionId = builder.trackSelection(s);
            }
        },
        {
            key: "buildIndentConverter",
            value: function buildIndentConverter(tabSize, indentSize, insertSpaces) {
                return {
                    shiftIndent: function(indentation) {
                        return _shiftCommandJs.ShiftCommand.shiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);
                    },
                    unshiftIndent: function(indentation) {
                        return _shiftCommandJs.ShiftCommand.unshiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);
                    }
                };
            }
        },
        {
            key: "parseEnterResult",
            value: function parseEnterResult(model, indentConverter, tabSize, line, enter) {
                if (enter) {
                    var enterPrefix = enter.indentation;
                    if (enter.indentAction === _languageConfigurationJs.IndentAction.None) enterPrefix = enter.indentation + enter.appendText;
                    else if (enter.indentAction === _languageConfigurationJs.IndentAction.Indent) enterPrefix = enter.indentation + enter.appendText;
                    else if (enter.indentAction === _languageConfigurationJs.IndentAction.IndentOutdent) enterPrefix = enter.indentation;
                    else if (enter.indentAction === _languageConfigurationJs.IndentAction.Outdent) enterPrefix = indentConverter.unshiftIndent(enter.indentation) + enter.appendText;
                    var movingLineText = model.getLineContent(line);
                    if (this.trimLeft(movingLineText).indexOf(this.trimLeft(enterPrefix)) >= 0) {
                        var oldIndentation = _stringsJs.getLeadingWhitespace(model.getLineContent(line));
                        var newIndentation = _stringsJs.getLeadingWhitespace(enterPrefix);
                        var indentMetadataOfMovelingLine = _languageConfigurationRegistryJs.LanguageConfigurationRegistry.getIndentMetadata(model, line);
                        if (indentMetadataOfMovelingLine !== null && indentMetadataOfMovelingLine & 2 /* DECREASE_MASK */ ) newIndentation = indentConverter.unshiftIndent(newIndentation);
                        var newSpaceCnt = _indentUtilsJs.getSpaceCnt(newIndentation, tabSize);
                        var oldSpaceCnt = _indentUtilsJs.getSpaceCnt(oldIndentation, tabSize);
                        return newSpaceCnt - oldSpaceCnt;
                    }
                }
                return null;
            }
        },
        {
            /**
     *
     * @param model
     * @param indentConverter
     * @param tabSize
     * @param line the line moving down
     * @param futureAboveLineNumber the line which will be at the `line` position
     * @param futureAboveLineText
     */ key: "matchEnterRuleMovingDown",
            value: function matchEnterRuleMovingDown(model, indentConverter, tabSize, line, futureAboveLineNumber, futureAboveLineText) {
                if (_stringsJs.lastNonWhitespaceIndex(futureAboveLineText) >= 0) {
                    // break
                    var maxColumn = model.getLineMaxColumn(futureAboveLineNumber);
                    var enter = _languageConfigurationRegistryJs.LanguageConfigurationRegistry.getEnterAction(this._autoIndent, model, new _rangeJs.Range(futureAboveLineNumber, maxColumn, futureAboveLineNumber, maxColumn));
                    return this.parseEnterResult(model, indentConverter, tabSize, line, enter);
                } else {
                    // go upwards, starting from `line - 1`
                    var validPrecedingLine = line - 1;
                    while(validPrecedingLine >= 1){
                        var lineContent = model.getLineContent(validPrecedingLine);
                        var nonWhitespaceIdx = _stringsJs.lastNonWhitespaceIndex(lineContent);
                        if (nonWhitespaceIdx >= 0) break;
                        validPrecedingLine--;
                    }
                    if (validPrecedingLine < 1 || line > model.getLineCount()) return null;
                    var maxColumn1 = model.getLineMaxColumn(validPrecedingLine);
                    var enter1 = _languageConfigurationRegistryJs.LanguageConfigurationRegistry.getEnterAction(this._autoIndent, model, new _rangeJs.Range(validPrecedingLine, maxColumn1, validPrecedingLine, maxColumn1));
                    return this.parseEnterResult(model, indentConverter, tabSize, line, enter1);
                }
            }
        },
        {
            key: "matchEnterRule",
            value: function matchEnterRule(model, indentConverter, tabSize, line, oneLineAbove, previousLineText) {
                var validPrecedingLine = oneLineAbove;
                while(validPrecedingLine >= 1){
                    // ship empty lines as empty lines just inherit indentation
                    var lineContent = void 0;
                    if (validPrecedingLine === oneLineAbove && previousLineText !== undefined) lineContent = previousLineText;
                    else lineContent = model.getLineContent(validPrecedingLine);
                    var nonWhitespaceIdx = _stringsJs.lastNonWhitespaceIndex(lineContent);
                    if (nonWhitespaceIdx >= 0) break;
                    validPrecedingLine--;
                }
                if (validPrecedingLine < 1 || line > model.getLineCount()) return null;
                var maxColumn = model.getLineMaxColumn(validPrecedingLine);
                var enter = _languageConfigurationRegistryJs.LanguageConfigurationRegistry.getEnterAction(this._autoIndent, model, new _rangeJs.Range(validPrecedingLine, maxColumn, validPrecedingLine, maxColumn));
                return this.parseEnterResult(model, indentConverter, tabSize, line, enter);
            }
        },
        {
            key: "trimLeft",
            value: function trimLeft(str) {
                return str.replace(/^\s+/, '');
            }
        },
        {
            key: "shouldAutoIndent",
            value: function shouldAutoIndent(model, selection) {
                if (this._autoIndent < 4 /* Full */ ) return false;
                // if it's not easy to tokenize, we stop auto indent.
                if (!model.isCheapToTokenize(selection.startLineNumber)) return false;
                var languageAtSelectionStart = model.getLanguageIdAtPosition(selection.startLineNumber, 1);
                var languageAtSelectionEnd = model.getLanguageIdAtPosition(selection.endLineNumber, 1);
                if (languageAtSelectionStart !== languageAtSelectionEnd) return false;
                if (_languageConfigurationRegistryJs.LanguageConfigurationRegistry.getIndentRulesSupport(languageAtSelectionStart) === null) return false;
                return true;
            }
        },
        {
            key: "getIndentEditsOfMovingBlock",
            value: function getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, offset) {
                for(var i = s.startLineNumber; i <= s.endLineNumber; i++){
                    var lineContent = model.getLineContent(i);
                    var originalIndent = _stringsJs.getLeadingWhitespace(lineContent);
                    var originalSpacesCnt = _indentUtilsJs.getSpaceCnt(originalIndent, tabSize);
                    var newSpacesCnt = originalSpacesCnt + offset;
                    var newIndent = _indentUtilsJs.generateIndent(newSpacesCnt, tabSize, insertSpaces);
                    if (newIndent !== originalIndent) {
                        builder.addEditOperation(new _rangeJs.Range(i, 1, i, originalIndent.length + 1), newIndent);
                        if (i === s.endLineNumber && s.endColumn <= originalIndent.length + 1 && newIndent === '') // as users select part of the original indent white spaces
                        // when we adjust the indentation of endLine, we should adjust the cursor position as well.
                        this._moveEndLineSelectionShrink = true;
                    }
                }
            }
        },
        {
            key: "computeCursorState",
            value: function computeCursorState(model, helper) {
                var result = helper.getTrackedSelection(this._selectionId);
                if (this._moveEndPositionDown) result = result.setEndPosition(result.endLineNumber + 1, 1);
                if (this._moveEndLineSelectionShrink && result.startLineNumber < result.endLineNumber) result = result.setEndPosition(result.endLineNumber, 2);
                return result;
            }
        }
    ]);
    return MoveLinesCommand;
}();

},{"@swc/helpers":"erO4s","../../../base/common/strings.js":"jsb6w","../../common/commands/shiftCommand.js":"9cBpK","../../common/core/range.js":"VbyL8","../../common/core/selection.js":"hjmnH","../../common/modes/languageConfiguration.js":"9S02i","../../common/modes/languageConfigurationRegistry.js":"fdCRx","../indentation/indentUtils.js":"fG9Tn","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"cyZPR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SortLinesCommand", function() {
    return SortLinesCommand;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _editOperationJs = require("../../common/core/editOperation.js");
var _rangeJs = require("../../common/core/range.js");
var SortLinesCommand = /*#__PURE__*/ function() {
    "use strict";
    function SortLinesCommand(selection, descending) {
        _helpers.classCallCheck(this, SortLinesCommand);
        this.selection = selection;
        this.descending = descending;
        this.selectionId = null;
    }
    _helpers.createClass(SortLinesCommand, [
        {
            key: "getEditOperations",
            value: function getEditOperations(model, builder) {
                var op = sortLines(model, this.selection, this.descending);
                if (op) builder.addEditOperation(op.range, op.text);
                this.selectionId = builder.trackSelection(this.selection);
            }
        },
        {
            key: "computeCursorState",
            value: function computeCursorState(model, helper) {
                return helper.getTrackedSelection(this.selectionId);
            }
        }
    ], [
        {
            key: "getCollator",
            value: function getCollator() {
                if (!SortLinesCommand._COLLATOR) SortLinesCommand._COLLATOR = new Intl.Collator();
                return SortLinesCommand._COLLATOR;
            }
        },
        {
            key: "canRun",
            value: function canRun(model, selection, descending) {
                if (model === null) return false;
                var data = getSortData(model, selection, descending);
                if (!data) return false;
                for(var i = 0, len = data.before.length; i < len; i++){
                    if (data.before[i] !== data.after[i]) return true;
                }
                return false;
            }
        }
    ]);
    return SortLinesCommand;
}();
SortLinesCommand._COLLATOR = null;
function getSortData(model, selection, descending) {
    var startLineNumber = selection.startLineNumber;
    var endLineNumber = selection.endLineNumber;
    if (selection.endColumn === 1) endLineNumber--;
    // Nothing to sort if user didn't select anything.
    if (startLineNumber >= endLineNumber) return null;
    var linesToSort = [];
    // Get the contents of the selection to be sorted.
    for(var lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++)linesToSort.push(model.getLineContent(lineNumber));
    var sorted = linesToSort.slice(0);
    sorted.sort(SortLinesCommand.getCollator().compare);
    // If descending, reverse the order.
    if (descending === true) sorted = sorted.reverse();
    return {
        startLineNumber: startLineNumber,
        endLineNumber: endLineNumber,
        before: linesToSort,
        after: sorted
    };
}
/**
 * Generate commands for sorting lines on a model.
 */ function sortLines(model, selection, descending) {
    var data = getSortData(model, selection, descending);
    if (!data) return null;
    return _editOperationJs.EditOperation.replace(new _rangeJs.Range(data.startLineNumber, 1, data.endLineNumber, model.getLineMaxColumn(data.endLineNumber)), data.after.join('\n'));
}

},{"@swc/helpers":"erO4s","../../common/core/editOperation.js":"3D5yS","../../common/core/range.js":"VbyL8","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"cVXJH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CONTEXT_ONTYPE_RENAME_INPUT_VISIBLE", function() {
    return CONTEXT_ONTYPE_RENAME_INPUT_VISIBLE;
});
parcelHelpers.export(exports, "LinkedEditingContribution", function() {
    return LinkedEditingContribution;
});
parcelHelpers.export(exports, "LinkedEditingAction", function() {
    return LinkedEditingAction;
});
parcelHelpers.export(exports, "editorLinkedEditingBackground", function() {
    return editorLinkedEditingBackground;
});
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
var _arraysJs = require("../../../base/common/arrays.js");
var _asyncJs = require("../../../base/common/async.js");
var _cancellationJs = require("../../../base/common/cancellation.js");
var _colorJs = require("../../../base/common/color.js");
var _errorsJs = require("../../../base/common/errors.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _stringsJs = require("../../../base/common/strings.js");
var _uriJs = require("../../../base/common/uri.js");
var _editorExtensionsJs = require("../../browser/editorExtensions.js");
var _codeEditorServiceJs = require("../../browser/services/codeEditorService.js");
var _positionJs = require("../../common/core/position.js");
var _rangeJs = require("../../common/core/range.js");
var _editorContextKeysJs = require("../../common/editorContextKeys.js");
var _textModelJs = require("../../common/model/textModel.js");
var _modesJs = require("../../common/modes.js");
var _languageConfigurationRegistryJs = require("../../common/modes/languageConfigurationRegistry.js");
var _nlsJs = require("../../../nls.js");
var _contextkeyJs = require("../../../platform/contextkey/common/contextkey.js");
var _colorRegistryJs = require("../../../platform/theme/common/colorRegistry.js");
var _themeServiceJs = require("../../../platform/theme/common/themeService.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var CONTEXT_ONTYPE_RENAME_INPUT_VISIBLE = new _contextkeyJs.RawContextKey('LinkedEditingInputVisible', false);
var DECORATION_CLASS_NAME = 'linked-editing-decoration';
var LinkedEditingContribution = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(LinkedEditingContribution1, Disposable);
    var _super = _helpers.createSuper(LinkedEditingContribution1);
    function LinkedEditingContribution1(editor, contextKeyService) {
        _helpers.classCallCheck(this, LinkedEditingContribution1);
        var _this;
        _this = _super.call(this);
        _this._debounceDuration = 200;
        _this._localToDispose = _this._register(new _lifecycleJs.DisposableStore());
        _this._editor = editor;
        _this._enabled = false;
        _this._visibleContextKey = CONTEXT_ONTYPE_RENAME_INPUT_VISIBLE.bindTo(contextKeyService);
        _this._currentDecorations = [];
        _this._languageWordPattern = null;
        _this._currentWordPattern = null;
        _this._ignoreChangeEvent = false;
        _this._localToDispose = _this._register(new _lifecycleJs.DisposableStore());
        _this._rangeUpdateTriggerPromise = null;
        _this._rangeSyncTriggerPromise = null;
        _this._currentRequest = null;
        _this._currentRequestPosition = null;
        _this._currentRequestModelVersion = null;
        _this._register(_this._editor.onDidChangeModel(function() {
            return _this.reinitialize(true);
        }));
        _this._register(_this._editor.onDidChangeConfiguration(function(e) {
            if (e.hasChanged(61 /* linkedEditing */ ) || e.hasChanged(81 /* renameOnType */ )) _this.reinitialize(false);
        }));
        _this._register(_modesJs.LinkedEditingRangeProviderRegistry.onDidChange(function() {
            return _this.reinitialize(false);
        }));
        _this._register(_this._editor.onDidChangeModelLanguage(function() {
            return _this.reinitialize(true);
        }));
        _this.reinitialize(true);
        return _this;
    }
    _helpers.createClass(LinkedEditingContribution1, [
        {
            key: "reinitialize",
            value: function reinitialize(forceRefresh) {
                var _this = this;
                var model = this._editor.getModel();
                var isEnabled = model !== null && (this._editor.getOption(61 /* linkedEditing */ ) || this._editor.getOption(81 /* renameOnType */ )) && _modesJs.LinkedEditingRangeProviderRegistry.has(model);
                if (isEnabled === this._enabled && !forceRefresh) return;
                this._enabled = isEnabled;
                this.clearRanges();
                this._localToDispose.clear();
                if (!isEnabled || model === null) return;
                this._languageWordPattern = _languageConfigurationRegistryJs.LanguageConfigurationRegistry.getWordDefinition(model.getLanguageId());
                this._localToDispose.add(model.onDidChangeLanguageConfiguration(function() {
                    _this._languageWordPattern = _languageConfigurationRegistryJs.LanguageConfigurationRegistry.getWordDefinition(model.getLanguageId());
                }));
                var rangeUpdateScheduler = new _asyncJs.Delayer(this._debounceDuration);
                var triggerRangeUpdate = function() {
                    var _this1 = _this;
                    _this._rangeUpdateTriggerPromise = rangeUpdateScheduler.trigger(function() {
                        return _this1.updateRanges();
                    }, _this._debounceDuration);
                };
                var rangeSyncScheduler = new _asyncJs.Delayer(0);
                var triggerRangeSync = function(decorations) {
                    var _this2 = _this;
                    _this._rangeSyncTriggerPromise = rangeSyncScheduler.trigger(function() {
                        return _this2._syncRanges(decorations);
                    });
                };
                this._localToDispose.add(this._editor.onDidChangeCursorPosition(function() {
                    triggerRangeUpdate();
                }));
                this._localToDispose.add(this._editor.onDidChangeModelContent(function(e) {
                    if (!_this._ignoreChangeEvent) {
                        if (_this._currentDecorations.length > 0) {
                            var referenceRange = model.getDecorationRange(_this._currentDecorations[0]);
                            if (referenceRange && e.changes.every(function(c) {
                                return referenceRange.intersectRanges(c.range);
                            })) {
                                triggerRangeSync(_this._currentDecorations);
                                return;
                            }
                        }
                    }
                    triggerRangeUpdate();
                }));
                this._localToDispose.add({
                    dispose: function() {
                        rangeUpdateScheduler.cancel();
                        rangeSyncScheduler.cancel();
                    }
                });
                this.updateRanges();
            }
        },
        {
            key: "_syncRanges",
            value: function _syncRanges(decorations) {
                // dalayed invocation, make sure we're still on
                if (!this._editor.hasModel() || decorations !== this._currentDecorations || decorations.length === 0) // nothing to do
                return;
                var model = this._editor.getModel();
                var referenceRange = model.getDecorationRange(decorations[0]);
                if (!referenceRange || referenceRange.startLineNumber !== referenceRange.endLineNumber) return this.clearRanges();
                var referenceValue = model.getValueInRange(referenceRange);
                if (this._currentWordPattern) {
                    var match = referenceValue.match(this._currentWordPattern);
                    var matchLength = match ? match[0].length : 0;
                    if (matchLength !== referenceValue.length) return this.clearRanges();
                }
                var edits = [];
                for(var i = 1, len = decorations.length; i < len; i++){
                    var mirrorRange = model.getDecorationRange(decorations[i]);
                    if (!mirrorRange) continue;
                    if (mirrorRange.startLineNumber !== mirrorRange.endLineNumber) edits.push({
                        range: mirrorRange,
                        text: referenceValue
                    });
                    else {
                        var oldValue = model.getValueInRange(mirrorRange);
                        var newValue = referenceValue;
                        var rangeStartColumn = mirrorRange.startColumn;
                        var rangeEndColumn = mirrorRange.endColumn;
                        var commonPrefixLength = _stringsJs.commonPrefixLength(oldValue, newValue);
                        rangeStartColumn += commonPrefixLength;
                        oldValue = oldValue.substr(commonPrefixLength);
                        newValue = newValue.substr(commonPrefixLength);
                        var commonSuffixLength = _stringsJs.commonSuffixLength(oldValue, newValue);
                        rangeEndColumn -= commonSuffixLength;
                        oldValue = oldValue.substr(0, oldValue.length - commonSuffixLength);
                        newValue = newValue.substr(0, newValue.length - commonSuffixLength);
                        if (rangeStartColumn !== rangeEndColumn || newValue.length !== 0) edits.push({
                            range: new _rangeJs.Range(mirrorRange.startLineNumber, rangeStartColumn, mirrorRange.endLineNumber, rangeEndColumn),
                            text: newValue
                        });
                    }
                }
                if (edits.length === 0) return;
                try {
                    this._editor.popUndoStop();
                    this._ignoreChangeEvent = true;
                    var prevEditOperationType = this._editor._getViewModel().getPrevEditOperationType();
                    this._editor.executeEdits('linkedEditing', edits);
                    this._editor._getViewModel().setPrevEditOperationType(prevEditOperationType);
                } finally{
                    this._ignoreChangeEvent = false;
                }
            }
        },
        {
            key: "dispose",
            value: function dispose() {
                this.clearRanges();
                _helpers.get(_helpers.getPrototypeOf(LinkedEditingContribution1.prototype), "dispose", this).call(this);
            }
        },
        {
            key: "clearRanges",
            value: function clearRanges() {
                this._visibleContextKey.set(false);
                this._currentDecorations = this._editor.deltaDecorations(this._currentDecorations, []);
                if (this._currentRequest) {
                    this._currentRequest.cancel();
                    this._currentRequest = null;
                    this._currentRequestPosition = null;
                }
            }
        },
        {
            key: "updateRanges",
            value: function updateRanges() {
                var force = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee1() {
                    var _this, position, model, modelVersionId, range1, request;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx1) {
                        while(1)switch(_ctx1.prev = _ctx1.next){
                            case 0:
                                _this = this;
                                if (this._editor.hasModel()) {
                                    _ctx1.next = 4;
                                    break;
                                }
                                this.clearRanges();
                                return _ctx1.abrupt("return");
                            case 4:
                                position = this._editor.getPosition();
                                if (!(!this._enabled && !force || this._editor.getSelections().length > 1)) {
                                    _ctx1.next = 8;
                                    break;
                                }
                                // disabled or multicursor
                                this.clearRanges();
                                return _ctx1.abrupt("return");
                            case 8:
                                model = this._editor.getModel();
                                modelVersionId = model.getVersionId();
                                if (!(this._currentRequestPosition && this._currentRequestModelVersion === modelVersionId)) {
                                    _ctx1.next = 17;
                                    break;
                                }
                                if (!position.equals(this._currentRequestPosition)) {
                                    _ctx1.next = 13;
                                    break;
                                }
                                return _ctx1.abrupt("return");
                            case 13:
                                if (!(this._currentDecorations && this._currentDecorations.length > 0)) {
                                    _ctx1.next = 17;
                                    break;
                                }
                                range1 = model.getDecorationRange(this._currentDecorations[0]);
                                if (!(range1 && range1.containsPosition(position))) {
                                    _ctx1.next = 17;
                                    break;
                                }
                                return _ctx1.abrupt("return");
                            case 17:
                                this._currentRequestPosition = position;
                                this._currentRequestModelVersion = modelVersionId;
                                request = _asyncJs.createCancelablePromise(function(token) {
                                    return __awaiter(_this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                                        var response, ranges, foundReferenceRange, i, len, referenceRange, decorations;
                                        return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                                            while(1)switch(_ctx.prev = _ctx.next){
                                                case 0:
                                                    _ctx.prev = 0;
                                                    _ctx.next = 3;
                                                    return getLinkedEditingRanges(model, position, token);
                                                case 3:
                                                    response = _ctx.sent;
                                                    if (!(request !== this._currentRequest)) {
                                                        _ctx.next = 6;
                                                        break;
                                                    }
                                                    return _ctx.abrupt("return");
                                                case 6:
                                                    this._currentRequest = null;
                                                    if (!(modelVersionId !== model.getVersionId())) {
                                                        _ctx.next = 9;
                                                        break;
                                                    }
                                                    return _ctx.abrupt("return");
                                                case 9:
                                                    ranges = [];
                                                    if (response === null || response === void 0 ? void 0 : response.ranges) ranges = response.ranges;
                                                    this._currentWordPattern = (response === null || response === void 0 ? void 0 : response.wordPattern) || this._languageWordPattern;
                                                    foundReferenceRange = false;
                                                    i = 0, len = ranges.length;
                                                case 14:
                                                    if (!(i < len)) {
                                                        _ctx.next = 22;
                                                        break;
                                                    }
                                                    if (!_rangeJs.Range.containsPosition(ranges[i], position)) {
                                                        _ctx.next = 19;
                                                        break;
                                                    }
                                                    foundReferenceRange = true;
                                                    if (i !== 0) {
                                                        referenceRange = ranges[i];
                                                        ranges.splice(i, 1);
                                                        ranges.unshift(referenceRange);
                                                    }
                                                    return _ctx.abrupt("break", 22);
                                                case 19:
                                                    i++;
                                                    _ctx.next = 14;
                                                    break;
                                                case 22:
                                                    if (foundReferenceRange) {
                                                        _ctx.next = 25;
                                                        break;
                                                    }
                                                    // Cannot do linked editing if the ranges are not where the cursor is...
                                                    this.clearRanges();
                                                    return _ctx.abrupt("return");
                                                case 25:
                                                    decorations = ranges.map(function(range) {
                                                        return {
                                                            range: range,
                                                            options: LinkedEditingContribution1.DECORATION
                                                        };
                                                    });
                                                    this._visibleContextKey.set(true);
                                                    this._currentDecorations = this._editor.deltaDecorations(this._currentDecorations, decorations);
                                                    _ctx.next = 34;
                                                    break;
                                                case 30:
                                                    _ctx.prev = 30;
                                                    _ctx.t0 = _ctx["catch"](0);
                                                    if (!_errorsJs.isPromiseCanceledError(_ctx.t0)) _errorsJs.onUnexpectedError(_ctx.t0);
                                                    if (this._currentRequest === request || !this._currentRequest) // stop if we are still the latest request
                                                    this.clearRanges();
                                                case 34:
                                                case "end":
                                                    return _ctx.stop();
                                            }
                                        }, _callee, this, [
                                            [
                                                0,
                                                30
                                            ]
                                        ]);
                                    }));
                                });
                                this._currentRequest = request;
                                return _ctx1.abrupt("return", request);
                            case 22:
                            case "end":
                                return _ctx1.stop();
                        }
                    }, _callee1, this);
                }));
            }
        }
    ], [
        {
            key: "get",
            value: function get(editor) {
                return editor.getContribution(LinkedEditingContribution1.ID);
            }
        }
    ]);
    return LinkedEditingContribution1;
}(_lifecycleJs.Disposable);
LinkedEditingContribution.ID = 'editor.contrib.linkedEditing';
LinkedEditingContribution.DECORATION = _textModelJs.ModelDecorationOptions.register({
    description: 'linked-editing',
    stickiness: 0 /* AlwaysGrowsWhenTypingAtEdges */ ,
    className: DECORATION_CLASS_NAME
});
LinkedEditingContribution = __decorate([
    __param(1, _contextkeyJs.IContextKeyService)
], LinkedEditingContribution);
var LinkedEditingAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(LinkedEditingAction, EditorAction);
    var _super = _helpers.createSuper(LinkedEditingAction);
    function LinkedEditingAction() {
        _helpers.classCallCheck(this, LinkedEditingAction);
        return _super.call(this, {
            id: 'editor.action.linkedEditing',
            label: _nlsJs.localize('linkedEditing.label', "Start Linked Editing"),
            alias: 'Start Linked Editing',
            precondition: _contextkeyJs.ContextKeyExpr.and(_editorContextKeysJs.EditorContextKeys.writable, _editorContextKeysJs.EditorContextKeys.hasRenameProvider),
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: 3132 /* F2 */ ,
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    _helpers.createClass(LinkedEditingAction, [
        {
            key: "runCommand",
            value: function runCommand(accessor1, args) {
                var _this = this;
                var editorService = accessor1.get(_codeEditorServiceJs.ICodeEditorService);
                var ref = _helpers.slicedToArray(Array.isArray(args) && args || [
                    undefined,
                    undefined
                ], 2), uri = ref[0], pos = ref[1];
                if (_uriJs.URI.isUri(uri) && _positionJs.Position.isIPosition(pos)) return editorService.openCodeEditor({
                    resource: uri
                }, editorService.getActiveCodeEditor()).then(function(editor) {
                    var _this3 = _this;
                    if (!editor) return;
                    editor.setPosition(pos);
                    editor.invokeWithinContext(function(accessor) {
                        _this3.reportTelemetry(accessor, editor);
                        return _this3.run(accessor, editor);
                    });
                }, _errorsJs.onUnexpectedError);
                return _helpers.get(_helpers.getPrototypeOf(LinkedEditingAction.prototype), "runCommand", this).call(this, accessor1, args);
            }
        },
        {
            key: "run",
            value: function run(_accessor, editor) {
                var controller = LinkedEditingContribution.get(editor);
                if (controller) return Promise.resolve(controller.updateRanges(true));
                return Promise.resolve();
            }
        }
    ]);
    return LinkedEditingAction;
}(_editorExtensionsJs.EditorAction);
var LinkedEditingCommand = _editorExtensionsJs.EditorCommand.bindToContribution(LinkedEditingContribution.get);
_editorExtensionsJs.registerEditorCommand(new LinkedEditingCommand({
    id: 'cancelLinkedEditingInput',
    precondition: CONTEXT_ONTYPE_RENAME_INPUT_VISIBLE,
    handler: function(x) {
        return x.clearRanges();
    },
    kbOpts: {
        kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
        weight: 199,
        primary: 9 /* Escape */ ,
        secondary: [
            1033 /* Escape */ 
        ]
    }
}));
function getLinkedEditingRanges(model, position, token) {
    var _this = this;
    var orderedByScore = _modesJs.LinkedEditingRangeProviderRegistry.ordered(model);
    // in order of score ask the linked editing range provider
    // until someone response with a good result
    // (good = not null)
    return _asyncJs.first(orderedByScore.map(function(provider) {
        return function() {
            return __awaiter(_this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                    while(1)switch(_ctx.prev = _ctx.next){
                        case 0:
                            _ctx.prev = 0;
                            _ctx.next = 3;
                            return provider.provideLinkedEditingRanges(model, position, token);
                        case 3:
                            return _ctx.abrupt("return", _ctx.sent);
                        case 6:
                            _ctx.prev = 6;
                            _ctx.t0 = _ctx["catch"](0);
                            _errorsJs.onUnexpectedExternalError(_ctx.t0);
                            return _ctx.abrupt("return", undefined);
                        case 10:
                        case "end":
                            return _ctx.stop();
                    }
                }, _callee, null, [
                    [
                        0,
                        6
                    ]
                ]);
            }));
        };
    }), function(result) {
        return !!result && _arraysJs.isNonEmptyArray(result === null || result === void 0 ? void 0 : result.ranges);
    });
}
var editorLinkedEditingBackground = _colorRegistryJs.registerColor('editor.linkedEditingBackground', {
    dark: _colorJs.Color.fromHex('#f00').transparent(0.3),
    light: _colorJs.Color.fromHex('#f00').transparent(0.3),
    hc: _colorJs.Color.fromHex('#f00').transparent(0.3)
}, _nlsJs.localize('editorLinkedEditingBackground', 'Background color when the editor auto renames on type.'));
_themeServiceJs.registerThemingParticipant(function(theme, collector) {
    var editorLinkedEditingBackgroundColor = theme.getColor(editorLinkedEditingBackground);
    if (editorLinkedEditingBackgroundColor) collector.addRule(".monaco-editor .".concat(DECORATION_CLASS_NAME, " { background: ").concat(editorLinkedEditingBackgroundColor, "; border-left-color: ").concat(editorLinkedEditingBackgroundColor, "; }"));
});
_editorExtensionsJs.registerModelAndPositionCommand('_executeLinkedEditingProvider', function(model, position) {
    return getLinkedEditingRanges(model, position, _cancellationJs.CancellationToken.None);
});
_editorExtensionsJs.registerEditorContribution(LinkedEditingContribution.ID, LinkedEditingContribution);
_editorExtensionsJs.registerEditorAction(LinkedEditingAction);

},{"@swc/helpers":"erO4s","regenerator-runtime":"12Ae8","../../../base/common/arrays.js":"bZs3E","../../../base/common/async.js":"kMhSh","../../../base/common/cancellation.js":"1C4LY","../../../base/common/color.js":"2jKDp","../../../base/common/errors.js":"afm4i","../../../base/common/lifecycle.js":"bcbPy","../../../base/common/strings.js":"jsb6w","../../../base/common/uri.js":"4ZDLf","../../browser/editorExtensions.js":"dFnlo","../../browser/services/codeEditorService.js":"izkTN","../../common/core/position.js":"6xP0w","../../common/core/range.js":"VbyL8","../../common/editorContextKeys.js":"2t2PW","../../common/model/textModel.js":"f18vR","../../common/modes.js":"bRbY1","../../common/modes/languageConfigurationRegistry.js":"fdCRx","../../../nls.js":"9djYb","../../../platform/contextkey/common/contextkey.js":"5cjav","../../../platform/theme/common/colorRegistry.js":"lKtxS","../../../platform/theme/common/themeService.js":"kE7QB","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"8Hfzi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LinkDetector", function() {
    return LinkDetector;
});
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
var _asyncJs = require("../../../base/common/async.js");
var _cancellationJs = require("../../../base/common/cancellation.js");
var _errorsJs = require("../../../base/common/errors.js");
var _htmlContentJs = require("../../../base/common/htmlContent.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _networkJs = require("../../../base/common/network.js");
var _platformJs = require("../../../base/common/platform.js");
var _resourcesJs = require("../../../base/common/resources.js");
var _uriJs = require("../../../base/common/uri.js");
var _linksCss = require("./links.css");
var _editorExtensionsJs = require("../../browser/editorExtensions.js");
var _textModelJs = require("../../common/model/textModel.js");
var _modesJs = require("../../common/modes.js");
var _clickLinkGestureJs = require("../gotoSymbol/link/clickLinkGesture.js");
var _getLinksJs = require("./getLinks.js");
var _nlsJs = require("../../../nls.js");
var _notificationJs = require("../../../platform/notification/common/notification.js");
var _openerJs = require("../../../platform/opener/common/opener.js");
var _colorRegistryJs = require("../../../platform/theme/common/colorRegistry.js");
var _themeServiceJs = require("../../../platform/theme/common/themeService.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function getHoverMessage(link, useMetaKey) {
    var executeCmd = link.url && /^command:/i.test(link.url.toString());
    var label = link.tooltip ? link.tooltip : executeCmd ? _nlsJs.localize('links.navigate.executeCmd', 'Execute command') : _nlsJs.localize('links.navigate.follow', 'Follow link');
    var kb = useMetaKey ? _platformJs.isMacintosh ? _nlsJs.localize('links.navigate.kb.meta.mac', "cmd + click") : _nlsJs.localize('links.navigate.kb.meta', "ctrl + click") : _platformJs.isMacintosh ? _nlsJs.localize('links.navigate.kb.alt.mac', "option + click") : _nlsJs.localize('links.navigate.kb.alt', "alt + click");
    if (link.url) {
        var nativeLabel = '';
        if (/^command:/i.test(link.url.toString())) {
            // Don't show complete command arguments in the native tooltip
            var match = link.url.toString().match(/^command:([^?#]+)/);
            if (match) {
                var commandId = match[1];
                var nativeLabelText = _nlsJs.localize('tooltip.explanation', "Execute command {0}", commandId);
                nativeLabel = ' "'.concat(nativeLabelText, '"');
            }
        }
        var hoverMessage = new _htmlContentJs.MarkdownString('', true).appendMarkdown("[".concat(label, "](").concat(link.url.toString(true).replace(/ /g, '%20')).concat(nativeLabel, ") (").concat(kb, ")"));
        return hoverMessage;
    } else return new _htmlContentJs.MarkdownString().appendText("".concat(label, " (").concat(kb, ")"));
}
var decoration = {
    general: _textModelJs.ModelDecorationOptions.register({
        description: 'detected-link',
        stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
        collapseOnReplaceEdit: true,
        inlineClassName: 'detected-link'
    }),
    active: _textModelJs.ModelDecorationOptions.register({
        description: 'detected-link-active',
        stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
        collapseOnReplaceEdit: true,
        inlineClassName: 'detected-link-active'
    })
};
var LinkOccurrence = /*#__PURE__*/ function() {
    "use strict";
    function LinkOccurrence(link, decorationId) {
        _helpers.classCallCheck(this, LinkOccurrence);
        this.link = link;
        this.decorationId = decorationId;
    }
    _helpers.createClass(LinkOccurrence, [
        {
            key: "activate",
            value: function activate(changeAccessor, useMetaKey) {
                changeAccessor.changeDecorationOptions(this.decorationId, LinkOccurrence._getOptions(this.link, useMetaKey, true));
            }
        },
        {
            key: "deactivate",
            value: function deactivate(changeAccessor, useMetaKey) {
                changeAccessor.changeDecorationOptions(this.decorationId, LinkOccurrence._getOptions(this.link, useMetaKey, false));
            }
        }
    ], [
        {
            key: "decoration",
            value: function decoration(link, useMetaKey) {
                return {
                    range: link.range,
                    options: LinkOccurrence._getOptions(link, useMetaKey, false)
                };
            }
        },
        {
            key: "_getOptions",
            value: function _getOptions(link, useMetaKey, isActive) {
                var options = Object.assign({}, isActive ? decoration.active : decoration.general);
                options.hoverMessage = getHoverMessage(link, useMetaKey);
                return options;
            }
        }
    ]);
    return LinkOccurrence;
}();
var LinkDetector = /*#__PURE__*/ function() {
    "use strict";
    function LinkDetector1(editor, openerService, notificationService) {
        var _this = this;
        _helpers.classCallCheck(this, LinkDetector1);
        this.listenersToRemove = new _lifecycleJs.DisposableStore();
        this.editor = editor;
        this.openerService = openerService;
        this.notificationService = notificationService;
        var clickLinkGesture = new _clickLinkGestureJs.ClickLinkGesture(editor);
        this.listenersToRemove.add(clickLinkGesture);
        this.listenersToRemove.add(clickLinkGesture.onMouseMoveOrRelevantKeyDown(function(param) {
            var _param = _helpers.slicedToArray(param, 2), mouseEvent = _param[0], keyboardEvent = _param[1];
            _this._onEditorMouseMove(mouseEvent, keyboardEvent);
        }));
        this.listenersToRemove.add(clickLinkGesture.onExecute(function(e) {
            _this.onEditorMouseUp(e);
        }));
        this.listenersToRemove.add(clickLinkGesture.onCancel(function(e) {
            _this.cleanUpActiveLinkDecoration();
        }));
        this.enabled = editor.getOption(62 /* links */ );
        this.listenersToRemove.add(editor.onDidChangeConfiguration(function(e) {
            var enabled = editor.getOption(62 /* links */ );
            if (_this.enabled === enabled) // No change in our configuration option
            return;
            _this.enabled = enabled;
            // Remove any links (for the getting disabled case)
            _this.updateDecorations([]);
            // Stop any computation (for the getting disabled case)
            _this.stop();
            // Start computing (for the getting enabled case)
            _this.beginCompute();
        }));
        this.listenersToRemove.add(editor.onDidChangeModelContent(function(e) {
            return _this.onChange();
        }));
        this.listenersToRemove.add(editor.onDidChangeModel(function(e) {
            return _this.onModelChanged();
        }));
        this.listenersToRemove.add(editor.onDidChangeModelLanguage(function(e) {
            return _this.onModelModeChanged();
        }));
        this.listenersToRemove.add(_modesJs.LinkProviderRegistry.onDidChange(function(e) {
            return _this.onModelModeChanged();
        }));
        this.timeout = new _asyncJs.TimeoutTimer();
        this.computePromise = null;
        this.activeLinksList = null;
        this.currentOccurrences = {};
        this.activeLinkDecorationId = null;
        this.beginCompute();
    }
    _helpers.createClass(LinkDetector1, [
        {
            key: "onModelChanged",
            value: function onModelChanged() {
                this.currentOccurrences = {};
                this.activeLinkDecorationId = null;
                this.stop();
                this.beginCompute();
            }
        },
        {
            key: "onModelModeChanged",
            value: function onModelModeChanged() {
                this.stop();
                this.beginCompute();
            }
        },
        {
            key: "onChange",
            value: function onChange() {
                var _this = this;
                this.timeout.setIfNotSet(function() {
                    return _this.beginCompute();
                }, LinkDetector1.RECOMPUTE_TIME);
            }
        },
        {
            key: "beginCompute",
            value: function beginCompute() {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var model;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                if (!(!this.editor.hasModel() || !this.enabled)) {
                                    _ctx.next = 2;
                                    break;
                                }
                                return _ctx.abrupt("return");
                            case 2:
                                model = this.editor.getModel();
                                if (_modesJs.LinkProviderRegistry.has(model)) {
                                    _ctx.next = 5;
                                    break;
                                }
                                return _ctx.abrupt("return");
                            case 5:
                                if (this.activeLinksList) {
                                    this.activeLinksList.dispose();
                                    this.activeLinksList = null;
                                }
                                this.computePromise = _asyncJs.createCancelablePromise(function(token) {
                                    return _getLinksJs.getLinks(model, token);
                                });
                                _ctx.prev = 7;
                                _ctx.next = 10;
                                return this.computePromise;
                            case 10:
                                this.activeLinksList = _ctx.sent;
                                this.updateDecorations(this.activeLinksList.links);
                                _ctx.next = 17;
                                break;
                            case 14:
                                _ctx.prev = 14;
                                _ctx.t0 = _ctx["catch"](7);
                                _errorsJs.onUnexpectedError(_ctx.t0);
                            case 17:
                                _ctx.prev = 17;
                                this.computePromise = null;
                                return _ctx.finish(17);
                            case 20:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this, [
                        [
                            7,
                            14,
                            17,
                            20
                        ]
                    ]);
                }));
            }
        },
        {
            key: "updateDecorations",
            value: function updateDecorations(links) {
                var useMetaKey = this.editor.getOption(69 /* multiCursorModifier */ ) === 'altKey';
                var oldDecorations = [];
                var keys = Object.keys(this.currentOccurrences);
                for(var i = 0, len = keys.length; i < len; i++){
                    var decorationId = keys[i];
                    var occurance = this.currentOccurrences[decorationId];
                    oldDecorations.push(occurance.decorationId);
                }
                var newDecorations = [];
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                if (links) try {
                    // Not sure why this is sometimes null
                    for(var _iterator = links[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var link = _step.value;
                        newDecorations.push(LinkOccurrence.decoration(link, useMetaKey));
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                var decorations = this.editor.deltaDecorations(oldDecorations, newDecorations);
                this.currentOccurrences = {};
                this.activeLinkDecorationId = null;
                for(var i1 = 0, len1 = decorations.length; i1 < len1; i1++){
                    var occurance1 = new LinkOccurrence(links[i1], decorations[i1]);
                    this.currentOccurrences[occurance1.decorationId] = occurance1;
                }
            }
        },
        {
            key: "_onEditorMouseMove",
            value: function _onEditorMouseMove(mouseEvent, withKey) {
                var useMetaKey = this.editor.getOption(69 /* multiCursorModifier */ ) === 'altKey';
                if (this.isEnabled(mouseEvent, withKey)) {
                    var _this = this;
                    this.cleanUpActiveLinkDecoration(); // always remove previous link decoration as their can only be one
                    var occurrence = this.getLinkOccurrence(mouseEvent.target.position);
                    if (occurrence) this.editor.changeDecorations(function(changeAccessor) {
                        occurrence.activate(changeAccessor, useMetaKey);
                        _this.activeLinkDecorationId = occurrence.decorationId;
                    });
                } else this.cleanUpActiveLinkDecoration();
            }
        },
        {
            key: "cleanUpActiveLinkDecoration",
            value: function cleanUpActiveLinkDecoration() {
                var useMetaKey = this.editor.getOption(69 /* multiCursorModifier */ ) === 'altKey';
                if (this.activeLinkDecorationId) {
                    var occurrence = this.currentOccurrences[this.activeLinkDecorationId];
                    if (occurrence) this.editor.changeDecorations(function(changeAccessor) {
                        occurrence.deactivate(changeAccessor, useMetaKey);
                    });
                    this.activeLinkDecorationId = null;
                }
            }
        },
        {
            key: "onEditorMouseUp",
            value: function onEditorMouseUp(mouseEvent) {
                if (!this.isEnabled(mouseEvent)) return;
                var occurrence = this.getLinkOccurrence(mouseEvent.target.position);
                if (!occurrence) return;
                this.openLinkOccurrence(occurrence, mouseEvent.hasSideBySideModifier, true);
            }
        },
        {
            key: "openLinkOccurrence",
            value: function openLinkOccurrence(occurrence, openToSide) {
                var fromUserGesture = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
                var _this = this;
                if (!this.openerService) return;
                var link = occurrence.link;
                link.resolve(_cancellationJs.CancellationToken.None).then(function(uri) {
                    // Support for relative file URIs of the shape file://./relativeFile.txt or file:///./relativeFile.txt
                    if (typeof uri === 'string' && _this.editor.hasModel()) {
                        var modelUri = _this.editor.getModel().uri;
                        if (modelUri.scheme === _networkJs.Schemas.file && uri.startsWith("".concat(_networkJs.Schemas.file, ":"))) {
                            var parsedUri = _uriJs.URI.parse(uri);
                            if (parsedUri.scheme === _networkJs.Schemas.file) {
                                var fsPath = _resourcesJs.originalFSPath(parsedUri);
                                var relativePath = null;
                                if (fsPath.startsWith('/./')) relativePath = ".".concat(fsPath.substr(1));
                                else if (fsPath.startsWith('//./')) relativePath = ".".concat(fsPath.substr(2));
                                if (relativePath) uri = _resourcesJs.joinPath(modelUri, relativePath);
                            }
                        }
                    }
                    return _this.openerService.open(uri, {
                        openToSide: openToSide,
                        fromUserGesture: fromUserGesture,
                        allowContributedOpeners: true,
                        allowCommands: true
                    });
                }, function(err) {
                    var messageOrError = err instanceof Error ? err.message : err;
                    // different error cases
                    if (messageOrError === 'invalid') _this.notificationService.warn(_nlsJs.localize('invalid.url', 'Failed to open this link because it is not well-formed: {0}', link.url.toString()));
                    else if (messageOrError === 'missing') _this.notificationService.warn(_nlsJs.localize('missing.url', 'Failed to open this link because its target is missing.'));
                    else _errorsJs.onUnexpectedError(err);
                });
            }
        },
        {
            key: "getLinkOccurrence",
            value: function getLinkOccurrence(position) {
                if (!this.editor.hasModel() || !position) return null;
                var decorations = this.editor.getModel().getDecorationsInRange({
                    startLineNumber: position.lineNumber,
                    startColumn: position.column,
                    endLineNumber: position.lineNumber,
                    endColumn: position.column
                }, 0, true);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = decorations[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var decoration1 = _step.value;
                        var currentOccurrence = this.currentOccurrences[decoration1.id];
                        if (currentOccurrence) return currentOccurrence;
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return null;
            }
        },
        {
            key: "isEnabled",
            value: function isEnabled(mouseEvent, withKey) {
                return Boolean(mouseEvent.target.type === 6 /* CONTENT_TEXT */  && (mouseEvent.hasTriggerModifier || withKey && withKey.keyCodeIsTriggerKey));
            }
        },
        {
            key: "stop",
            value: function stop() {
                var _a;
                this.timeout.cancel();
                if (this.activeLinksList) {
                    (_a = this.activeLinksList) === null || _a === void 0 || _a.dispose();
                    this.activeLinksList = null;
                }
                if (this.computePromise) {
                    this.computePromise.cancel();
                    this.computePromise = null;
                }
            }
        },
        {
            key: "dispose",
            value: function dispose() {
                this.listenersToRemove.dispose();
                this.stop();
                this.timeout.dispose();
            }
        }
    ], [
        {
            key: "get",
            value: function get(editor) {
                return editor.getContribution(LinkDetector1.ID);
            }
        }
    ]);
    return LinkDetector1;
}();
LinkDetector.ID = 'editor.linkDetector';
LinkDetector.RECOMPUTE_TIME = 1000; // ms
LinkDetector = __decorate([
    __param(1, _openerJs.IOpenerService),
    __param(2, _notificationJs.INotificationService)
], LinkDetector);
var OpenLinkAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(OpenLinkAction, EditorAction);
    var _super = _helpers.createSuper(OpenLinkAction);
    function OpenLinkAction() {
        _helpers.classCallCheck(this, OpenLinkAction);
        return _super.call(this, {
            id: 'editor.action.openLink',
            label: _nlsJs.localize('label', "Open Link"),
            alias: 'Open Link',
            precondition: undefined
        });
    }
    _helpers.createClass(OpenLinkAction, [
        {
            key: "run",
            value: function run(accessor, editor) {
                var linkDetector = LinkDetector.get(editor);
                if (!linkDetector) return;
                if (!editor.hasModel()) return;
                var selections = editor.getSelections();
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = selections[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var sel = _step.value;
                        var link = linkDetector.getLinkOccurrence(sel.getEndPosition());
                        if (link) linkDetector.openLinkOccurrence(link, false);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        }
    ]);
    return OpenLinkAction;
}(_editorExtensionsJs.EditorAction);
_editorExtensionsJs.registerEditorContribution(LinkDetector.ID, LinkDetector);
_editorExtensionsJs.registerEditorAction(OpenLinkAction);
_themeServiceJs.registerThemingParticipant(function(theme, collector) {
    var activeLinkForeground = theme.getColor(_colorRegistryJs.editorActiveLinkForeground);
    if (activeLinkForeground) collector.addRule(".monaco-editor .detected-link-active { color: ".concat(activeLinkForeground, " !important; }"));
});

},{"@swc/helpers":"erO4s","regenerator-runtime":"12Ae8","../../../base/common/async.js":"kMhSh","../../../base/common/cancellation.js":"1C4LY","../../../base/common/errors.js":"afm4i","../../../base/common/htmlContent.js":"i3TMB","../../../base/common/lifecycle.js":"bcbPy","../../../base/common/network.js":"4fXI6","../../../base/common/platform.js":"8pohV","../../../base/common/resources.js":"14HNj","../../../base/common/uri.js":"4ZDLf","./links.css":"ck4Z5","../../browser/editorExtensions.js":"dFnlo","../../common/model/textModel.js":"f18vR","../../common/modes.js":"bRbY1","../gotoSymbol/link/clickLinkGesture.js":"bX2yk","./getLinks.js":"3wLJf","../../../nls.js":"9djYb","../../../platform/notification/common/notification.js":"baqho","../../../platform/opener/common/opener.js":"nEUGw","../../../platform/theme/common/colorRegistry.js":"lKtxS","../../../platform/theme/common/themeService.js":"kE7QB","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"ck4Z5":[function() {},{}],"3wLJf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Link", function() {
    return Link;
});
parcelHelpers.export(exports, "LinksList", function() {
    return LinksList;
});
parcelHelpers.export(exports, "getLinks", function() {
    return getLinks;
});
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
var _arraysJs = require("../../../base/common/arrays.js");
var _cancellationJs = require("../../../base/common/cancellation.js");
var _errorsJs = require("../../../base/common/errors.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _typesJs = require("../../../base/common/types.js");
var _uriJs = require("../../../base/common/uri.js");
var _rangeJs = require("../../common/core/range.js");
var _modesJs = require("../../common/modes.js");
var _modelServiceJs = require("../../common/services/modelService.js");
var _commandsJs = require("../../../platform/commands/common/commands.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var Link = /*#__PURE__*/ function() {
    "use strict";
    function Link(link, provider) {
        _helpers.classCallCheck(this, Link);
        this._link = link;
        this._provider = provider;
    }
    _helpers.createClass(Link, [
        {
            key: "toJSON",
            value: function toJSON() {
                return {
                    range: this.range,
                    url: this.url,
                    tooltip: this.tooltip
                };
            }
        },
        {
            key: "range",
            get: function get() {
                return this._link.range;
            }
        },
        {
            key: "url",
            get: function get() {
                return this._link.url;
            }
        },
        {
            key: "tooltip",
            get: function get() {
                return this._link.tooltip;
            }
        },
        {
            key: "resolve",
            value: function resolve(token) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var _this;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                _this = this;
                                if (!this._link.url) {
                                    _ctx.next = 3;
                                    break;
                                }
                                return _ctx.abrupt("return", this._link.url);
                            case 3:
                                if (!(typeof this._provider.resolveLink === 'function')) {
                                    _ctx.next = 5;
                                    break;
                                }
                                return _ctx.abrupt("return", Promise.resolve(this._provider.resolveLink(this._link, token)).then(function(value) {
                                    _this._link = value || _this._link;
                                    if (_this._link.url) // recurse
                                    return _this.resolve(token);
                                    return Promise.reject(new Error('missing'));
                                }));
                            case 5:
                                return _ctx.abrupt("return", Promise.reject(new Error('missing')));
                            case 6:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this);
                }));
            }
        }
    ]);
    return Link;
}();
var LinksList = /*#__PURE__*/ function() {
    "use strict";
    function LinksList(tuples) {
        _helpers.classCallCheck(this, LinksList);
        this._disposables = new _lifecycleJs.DisposableStore();
        var links = [];
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            var _this = this, _loop = function(_iterator, _step) {
                var _value = _helpers.slicedToArray(_step.value, 2), list = _value[0], provider = _value[1];
                // merge all links
                var newLinks = list.links.map(function(link) {
                    return new Link(link, provider);
                });
                links = LinksList._union(links, newLinks);
                // register disposables
                if (_lifecycleJs.isDisposable(list)) _this._disposables.add(list);
            };
            for(var _iterator = tuples[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop(_iterator, _step);
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
        this.links = links;
    }
    _helpers.createClass(LinksList, [
        {
            key: "dispose",
            value: function dispose() {
                this._disposables.dispose();
                this.links.length = 0;
            }
        }
    ], [
        {
            key: "_union",
            value: function _union(oldLinks, newLinks) {
                // reunite oldLinks with newLinks and remove duplicates
                var result = [];
                var oldIndex;
                var oldLen;
                var newIndex;
                var newLen;
                for(oldIndex = 0, newIndex = 0, oldLen = oldLinks.length, newLen = newLinks.length; oldIndex < oldLen && newIndex < newLen;){
                    var oldLink = oldLinks[oldIndex];
                    var newLink = newLinks[newIndex];
                    if (_rangeJs.Range.areIntersectingOrTouching(oldLink.range, newLink.range)) {
                        // Remove the oldLink
                        oldIndex++;
                        continue;
                    }
                    var comparisonResult = _rangeJs.Range.compareRangesUsingStarts(oldLink.range, newLink.range);
                    if (comparisonResult < 0) {
                        // oldLink is before
                        result.push(oldLink);
                        oldIndex++;
                    } else {
                        // newLink is before
                        result.push(newLink);
                        newIndex++;
                    }
                }
                for(; oldIndex < oldLen; oldIndex++)result.push(oldLinks[oldIndex]);
                for(; newIndex < newLen; newIndex++)result.push(newLinks[newIndex]);
                return result;
            }
        }
    ]);
    return LinksList;
}();
function getLinks(model, token) {
    var lists = [];
    // ask all providers for links in parallel
    var promises = _modesJs.LinkProviderRegistry.ordered(model).reverse().map(function(provider, i) {
        return Promise.resolve(provider.provideLinks(model, token)).then(function(result) {
            if (result) lists[i] = [
                result,
                provider
            ];
        }, _errorsJs.onUnexpectedExternalError);
    });
    return Promise.all(promises).then(function() {
        var result = new LinksList(_arraysJs.coalesce(lists));
        if (!token.isCancellationRequested) return result;
        result.dispose();
        return new LinksList([]);
    });
}
_commandsJs.CommandsRegistry.registerCommand('_executeLinkProvider', function(accessor) {
    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
        args[_key - 1] = arguments[_key];
    }
    return __awaiter(void 0, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
        var _args, uri, resolveCount, model, list, i, result;
        return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
            while(1)switch(_ctx.prev = _ctx.next){
                case 0:
                    _args = _helpers.slicedToArray(args, 2), uri = _args[0], resolveCount = _args[1];
                    _typesJs.assertType(uri instanceof _uriJs.URI);
                    if (typeof resolveCount !== 'number') resolveCount = 0;
                    model = accessor.get(_modelServiceJs.IModelService).getModel(uri);
                    if (model) {
                        _ctx.next = 6;
                        break;
                    }
                    return _ctx.abrupt("return", []);
                case 6:
                    _ctx.next = 8;
                    return getLinks(model, _cancellationJs.CancellationToken.None);
                case 8:
                    list = _ctx.sent;
                    if (list) {
                        _ctx.next = 11;
                        break;
                    }
                    return _ctx.abrupt("return", []);
                case 11:
                    i = 0;
                case 12:
                    if (!(i < Math.min(resolveCount, list.links.length))) {
                        _ctx.next = 18;
                        break;
                    }
                    _ctx.next = 15;
                    return list.links[i].resolve(_cancellationJs.CancellationToken.None);
                case 15:
                    i++;
                    _ctx.next = 12;
                    break;
                case 18:
                    result = list.links.slice(0);
                    list.dispose();
                    return _ctx.abrupt("return", result);
                case 21:
                case "end":
                    return _ctx.stop();
            }
        }, _callee);
    }));
});

},{"@swc/helpers":"erO4s","regenerator-runtime":"12Ae8","../../../base/common/arrays.js":"bZs3E","../../../base/common/cancellation.js":"1C4LY","../../../base/common/errors.js":"afm4i","../../../base/common/lifecycle.js":"bcbPy","../../../base/common/types.js":"lF7Cj","../../../base/common/uri.js":"4ZDLf","../../common/core/range.js":"VbyL8","../../common/modes.js":"bRbY1","../../common/services/modelService.js":"HyRTJ","../../../platform/commands/common/commands.js":"eeuTC","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"ciPbW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "InsertCursorAbove", function() {
    return InsertCursorAbove;
});
parcelHelpers.export(exports, "InsertCursorBelow", function() {
    return InsertCursorBelow;
});
parcelHelpers.export(exports, "MultiCursorSessionResult", function() {
    return MultiCursorSessionResult;
});
parcelHelpers.export(exports, "MultiCursorSession", function() {
    return MultiCursorSession;
});
parcelHelpers.export(exports, "MultiCursorSelectionController", function() {
    return MultiCursorSelectionController;
});
parcelHelpers.export(exports, "MultiCursorSelectionControllerAction", function() {
    return MultiCursorSelectionControllerAction;
});
parcelHelpers.export(exports, "AddSelectionToNextFindMatchAction", function() {
    return AddSelectionToNextFindMatchAction;
});
parcelHelpers.export(exports, "AddSelectionToPreviousFindMatchAction", function() {
    return AddSelectionToPreviousFindMatchAction;
});
parcelHelpers.export(exports, "MoveSelectionToNextFindMatchAction", function() {
    return MoveSelectionToNextFindMatchAction;
});
parcelHelpers.export(exports, "MoveSelectionToPreviousFindMatchAction", function() {
    return MoveSelectionToPreviousFindMatchAction;
});
parcelHelpers.export(exports, "SelectHighlightsAction", function() {
    return SelectHighlightsAction;
});
parcelHelpers.export(exports, "CompatChangeAll", function() {
    return CompatChangeAll;
});
parcelHelpers.export(exports, "SelectionHighlighter", function() {
    return SelectionHighlighter;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _ariaJs = require("../../../base/browser/ui/aria/aria.js");
var _asyncJs = require("../../../base/common/async.js");
var _keyCodesJs = require("../../../base/common/keyCodes.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _editorExtensionsJs = require("../../browser/editorExtensions.js");
var _cursorMoveCommandsJs = require("../../common/controller/cursorMoveCommands.js");
var _rangeJs = require("../../common/core/range.js");
var _selectionJs = require("../../common/core/selection.js");
var _editorContextKeysJs = require("../../common/editorContextKeys.js");
var _modelJs = require("../../common/model.js");
var _textModelJs = require("../../common/model/textModel.js");
var _modesJs = require("../../common/modes.js");
var _findControllerJs = require("../find/findController.js");
var _nlsJs = require("../../../nls.js");
var _actionsJs = require("../../../platform/actions/common/actions.js");
var _contextkeyJs = require("../../../platform/contextkey/common/contextkey.js");
var _colorRegistryJs = require("../../../platform/theme/common/colorRegistry.js");
var _themeServiceJs = require("../../../platform/theme/common/themeService.js");
function announceCursorChange(previousCursorState, cursorState) {
    var cursorDiff = cursorState.filter(function(cs) {
        return !previousCursorState.find(function(pcs) {
            return pcs.equals(cs);
        });
    });
    if (cursorDiff.length >= 1) {
        var cursorPositions = cursorDiff.map(function(cs) {
            return "line ".concat(cs.viewState.position.lineNumber, " column ").concat(cs.viewState.position.column);
        }).join(', ');
        var msg = cursorDiff.length === 1 ? _nlsJs.localize('cursorAdded', "Cursor added: {0}", cursorPositions) : _nlsJs.localize('cursorsAdded', "Cursors added: {0}", cursorPositions);
        _ariaJs.status(msg);
    }
}
var InsertCursorAbove = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(InsertCursorAbove, EditorAction);
    var _super = _helpers.createSuper(InsertCursorAbove);
    function InsertCursorAbove() {
        _helpers.classCallCheck(this, InsertCursorAbove);
        return _super.call(this, {
            id: 'editor.action.insertCursorAbove',
            label: _nlsJs.localize('mutlicursor.insertAbove', "Add Cursor Above"),
            alias: 'Add Cursor Above',
            precondition: undefined,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: 2576 /* UpArrow */ ,
                linux: {
                    primary: 1552 /* UpArrow */ ,
                    secondary: [
                        3088 /* UpArrow */ 
                    ]
                },
                weight: 100 /* EditorContrib */ 
            },
            menuOpts: {
                menuId: _actionsJs.MenuId.MenubarSelectionMenu,
                group: '3_multi',
                title: _nlsJs.localize({
                    key: 'miInsertCursorAbove',
                    comment: [
                        '&& denotes a mnemonic'
                    ]
                }, "&&Add Cursor Above"),
                order: 2
            }
        });
    }
    _helpers.createClass(InsertCursorAbove, [
        {
            key: "run",
            value: function run(accessor, editor, args) {
                if (!editor.hasModel()) return;
                var useLogicalLine = true;
                if (args && args.logicalLine === false) useLogicalLine = false;
                var viewModel = editor._getViewModel();
                if (viewModel.cursorConfig.readOnly) return;
                viewModel.pushStackElement();
                var previousCursorState = viewModel.getCursorStates();
                viewModel.setCursorStates(args.source, 3 /* Explicit */ , _cursorMoveCommandsJs.CursorMoveCommands.addCursorUp(viewModel, previousCursorState, useLogicalLine));
                viewModel.revealTopMostCursor(args.source);
                announceCursorChange(previousCursorState, viewModel.getCursorStates());
            }
        }
    ]);
    return InsertCursorAbove;
}(_editorExtensionsJs.EditorAction);
var InsertCursorBelow = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(InsertCursorBelow, EditorAction);
    var _super = _helpers.createSuper(InsertCursorBelow);
    function InsertCursorBelow() {
        _helpers.classCallCheck(this, InsertCursorBelow);
        return _super.call(this, {
            id: 'editor.action.insertCursorBelow',
            label: _nlsJs.localize('mutlicursor.insertBelow', "Add Cursor Below"),
            alias: 'Add Cursor Below',
            precondition: undefined,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: 2578 /* DownArrow */ ,
                linux: {
                    primary: 1554 /* DownArrow */ ,
                    secondary: [
                        3090 /* DownArrow */ 
                    ]
                },
                weight: 100 /* EditorContrib */ 
            },
            menuOpts: {
                menuId: _actionsJs.MenuId.MenubarSelectionMenu,
                group: '3_multi',
                title: _nlsJs.localize({
                    key: 'miInsertCursorBelow',
                    comment: [
                        '&& denotes a mnemonic'
                    ]
                }, "A&&dd Cursor Below"),
                order: 3
            }
        });
    }
    _helpers.createClass(InsertCursorBelow, [
        {
            key: "run",
            value: function run(accessor, editor, args) {
                if (!editor.hasModel()) return;
                var useLogicalLine = true;
                if (args && args.logicalLine === false) useLogicalLine = false;
                var viewModel = editor._getViewModel();
                if (viewModel.cursorConfig.readOnly) return;
                viewModel.pushStackElement();
                var previousCursorState = viewModel.getCursorStates();
                viewModel.setCursorStates(args.source, 3 /* Explicit */ , _cursorMoveCommandsJs.CursorMoveCommands.addCursorDown(viewModel, previousCursorState, useLogicalLine));
                viewModel.revealBottomMostCursor(args.source);
                announceCursorChange(previousCursorState, viewModel.getCursorStates());
            }
        }
    ]);
    return InsertCursorBelow;
}(_editorExtensionsJs.EditorAction);
var InsertCursorAtEndOfEachLineSelected = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(InsertCursorAtEndOfEachLineSelected, EditorAction);
    var _super = _helpers.createSuper(InsertCursorAtEndOfEachLineSelected);
    function InsertCursorAtEndOfEachLineSelected() {
        _helpers.classCallCheck(this, InsertCursorAtEndOfEachLineSelected);
        return _super.call(this, {
            id: 'editor.action.insertCursorAtEndOfEachLineSelected',
            label: _nlsJs.localize('mutlicursor.insertAtEndOfEachLineSelected', "Add Cursors to Line Ends"),
            alias: 'Add Cursors to Line Ends',
            precondition: undefined,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: 1575 /* KeyI */ ,
                weight: 100 /* EditorContrib */ 
            },
            menuOpts: {
                menuId: _actionsJs.MenuId.MenubarSelectionMenu,
                group: '3_multi',
                title: _nlsJs.localize({
                    key: 'miInsertCursorAtEndOfEachLineSelected',
                    comment: [
                        '&& denotes a mnemonic'
                    ]
                }, "Add C&&ursors to Line Ends"),
                order: 4
            }
        });
    }
    _helpers.createClass(InsertCursorAtEndOfEachLineSelected, [
        {
            key: "getCursorsForSelection",
            value: function getCursorsForSelection(selection, model, result) {
                if (selection.isEmpty()) return;
                for(var i = selection.startLineNumber; i < selection.endLineNumber; i++){
                    var currentLineMaxColumn = model.getLineMaxColumn(i);
                    result.push(new _selectionJs.Selection(i, currentLineMaxColumn, i, currentLineMaxColumn));
                }
                if (selection.endColumn > 1) result.push(new _selectionJs.Selection(selection.endLineNumber, selection.endColumn, selection.endLineNumber, selection.endColumn));
            }
        },
        {
            key: "run",
            value: function run(accessor, editor) {
                var _this = this;
                if (!editor.hasModel()) return;
                var model = editor.getModel();
                var selections = editor.getSelections();
                var viewModel = editor._getViewModel();
                var previousCursorState = viewModel.getCursorStates();
                var newSelections = [];
                selections.forEach(function(sel) {
                    return _this.getCursorsForSelection(sel, model, newSelections);
                });
                if (newSelections.length > 0) editor.setSelections(newSelections);
                announceCursorChange(previousCursorState, viewModel.getCursorStates());
            }
        }
    ]);
    return InsertCursorAtEndOfEachLineSelected;
}(_editorExtensionsJs.EditorAction);
var InsertCursorAtEndOfLineSelected = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(InsertCursorAtEndOfLineSelected, EditorAction);
    var _super = _helpers.createSuper(InsertCursorAtEndOfLineSelected);
    function InsertCursorAtEndOfLineSelected() {
        _helpers.classCallCheck(this, InsertCursorAtEndOfLineSelected);
        return _super.call(this, {
            id: 'editor.action.addCursorsToBottom',
            label: _nlsJs.localize('mutlicursor.addCursorsToBottom', "Add Cursors To Bottom"),
            alias: 'Add Cursors To Bottom',
            precondition: undefined
        });
    }
    _helpers.createClass(InsertCursorAtEndOfLineSelected, [
        {
            key: "run",
            value: function run(accessor, editor) {
                if (!editor.hasModel()) return;
                var selections = editor.getSelections();
                var lineCount = editor.getModel().getLineCount();
                var newSelections = [];
                for(var i = selections[0].startLineNumber; i <= lineCount; i++)newSelections.push(new _selectionJs.Selection(i, selections[0].startColumn, i, selections[0].endColumn));
                var viewModel = editor._getViewModel();
                var previousCursorState = viewModel.getCursorStates();
                if (newSelections.length > 0) editor.setSelections(newSelections);
                announceCursorChange(previousCursorState, viewModel.getCursorStates());
            }
        }
    ]);
    return InsertCursorAtEndOfLineSelected;
}(_editorExtensionsJs.EditorAction);
var InsertCursorAtTopOfLineSelected = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(InsertCursorAtTopOfLineSelected, EditorAction);
    var _super = _helpers.createSuper(InsertCursorAtTopOfLineSelected);
    function InsertCursorAtTopOfLineSelected() {
        _helpers.classCallCheck(this, InsertCursorAtTopOfLineSelected);
        return _super.call(this, {
            id: 'editor.action.addCursorsToTop',
            label: _nlsJs.localize('mutlicursor.addCursorsToTop', "Add Cursors To Top"),
            alias: 'Add Cursors To Top',
            precondition: undefined
        });
    }
    _helpers.createClass(InsertCursorAtTopOfLineSelected, [
        {
            key: "run",
            value: function run(accessor, editor) {
                if (!editor.hasModel()) return;
                var selections = editor.getSelections();
                var newSelections = [];
                for(var i = selections[0].startLineNumber; i >= 1; i--)newSelections.push(new _selectionJs.Selection(i, selections[0].startColumn, i, selections[0].endColumn));
                var viewModel = editor._getViewModel();
                var previousCursorState = viewModel.getCursorStates();
                if (newSelections.length > 0) editor.setSelections(newSelections);
                announceCursorChange(previousCursorState, viewModel.getCursorStates());
            }
        }
    ]);
    return InsertCursorAtTopOfLineSelected;
}(_editorExtensionsJs.EditorAction);
var MultiCursorSessionResult = function MultiCursorSessionResult(selections, revealRange, revealScrollType) {
    "use strict";
    _helpers.classCallCheck(this, MultiCursorSessionResult);
    this.selections = selections;
    this.revealRange = revealRange;
    this.revealScrollType = revealScrollType;
};
var MultiCursorSession = /*#__PURE__*/ function() {
    "use strict";
    function MultiCursorSession(_editor, findController, isDisconnectedFromFindController, searchText, wholeWord, matchCase, currentMatch) {
        _helpers.classCallCheck(this, MultiCursorSession);
        this._editor = _editor;
        this.findController = findController;
        this.isDisconnectedFromFindController = isDisconnectedFromFindController;
        this.searchText = searchText;
        this.wholeWord = wholeWord;
        this.matchCase = matchCase;
        this.currentMatch = currentMatch;
    }
    _helpers.createClass(MultiCursorSession, [
        {
            key: "addSelectionToNextFindMatch",
            value: function addSelectionToNextFindMatch() {
                if (!this._editor.hasModel()) return null;
                var nextMatch = this._getNextMatch();
                if (!nextMatch) return null;
                var allSelections = this._editor.getSelections();
                return new MultiCursorSessionResult(allSelections.concat(nextMatch), nextMatch, 0 /* Smooth */ );
            }
        },
        {
            key: "moveSelectionToNextFindMatch",
            value: function moveSelectionToNextFindMatch() {
                if (!this._editor.hasModel()) return null;
                var nextMatch = this._getNextMatch();
                if (!nextMatch) return null;
                var allSelections = this._editor.getSelections();
                return new MultiCursorSessionResult(allSelections.slice(0, allSelections.length - 1).concat(nextMatch), nextMatch, 0 /* Smooth */ );
            }
        },
        {
            key: "_getNextMatch",
            value: function _getNextMatch() {
                if (!this._editor.hasModel()) return null;
                if (this.currentMatch) {
                    var result = this.currentMatch;
                    this.currentMatch = null;
                    return result;
                }
                this.findController.highlightFindOptions();
                var allSelections = this._editor.getSelections();
                var lastAddedSelection = allSelections[allSelections.length - 1];
                var nextMatch = this._editor.getModel().findNextMatch(this.searchText, lastAddedSelection.getEndPosition(), false, this.matchCase, this.wholeWord ? this._editor.getOption(116 /* wordSeparators */ ) : null, false);
                if (!nextMatch) return null;
                return new _selectionJs.Selection(nextMatch.range.startLineNumber, nextMatch.range.startColumn, nextMatch.range.endLineNumber, nextMatch.range.endColumn);
            }
        },
        {
            key: "addSelectionToPreviousFindMatch",
            value: function addSelectionToPreviousFindMatch() {
                if (!this._editor.hasModel()) return null;
                var previousMatch = this._getPreviousMatch();
                if (!previousMatch) return null;
                var allSelections = this._editor.getSelections();
                return new MultiCursorSessionResult(allSelections.concat(previousMatch), previousMatch, 0 /* Smooth */ );
            }
        },
        {
            key: "moveSelectionToPreviousFindMatch",
            value: function moveSelectionToPreviousFindMatch() {
                if (!this._editor.hasModel()) return null;
                var previousMatch = this._getPreviousMatch();
                if (!previousMatch) return null;
                var allSelections = this._editor.getSelections();
                return new MultiCursorSessionResult(allSelections.slice(0, allSelections.length - 1).concat(previousMatch), previousMatch, 0 /* Smooth */ );
            }
        },
        {
            key: "_getPreviousMatch",
            value: function _getPreviousMatch() {
                if (!this._editor.hasModel()) return null;
                if (this.currentMatch) {
                    var result = this.currentMatch;
                    this.currentMatch = null;
                    return result;
                }
                this.findController.highlightFindOptions();
                var allSelections = this._editor.getSelections();
                var lastAddedSelection = allSelections[allSelections.length - 1];
                var previousMatch = this._editor.getModel().findPreviousMatch(this.searchText, lastAddedSelection.getStartPosition(), false, this.matchCase, this.wholeWord ? this._editor.getOption(116 /* wordSeparators */ ) : null, false);
                if (!previousMatch) return null;
                return new _selectionJs.Selection(previousMatch.range.startLineNumber, previousMatch.range.startColumn, previousMatch.range.endLineNumber, previousMatch.range.endColumn);
            }
        },
        {
            key: "selectAll",
            value: function selectAll() {
                if (!this._editor.hasModel()) return [];
                this.findController.highlightFindOptions();
                return this._editor.getModel().findMatches(this.searchText, true, false, this.matchCase, this.wholeWord ? this._editor.getOption(116 /* wordSeparators */ ) : null, false, 1073741824 /* MAX_SAFE_SMALL_INTEGER */ );
            }
        }
    ], [
        {
            key: "create",
            value: function create(editor, findController) {
                if (!editor.hasModel()) return null;
                var findState = findController.getState();
                // Find widget owns entirely what we search for if:
                //  - focus is not in the editor (i.e. it is in the find widget)
                //  - and the search widget is visible
                //  - and the search string is non-empty
                if (!editor.hasTextFocus() && findState.isRevealed && findState.searchString.length > 0) // Find widget owns what is searched for
                return new MultiCursorSession(editor, findController, false, findState.searchString, findState.wholeWord, findState.matchCase, null);
                // Otherwise, the selection gives the search text, and the find widget gives the search settings
                // The exception is the find state disassociation case: when beginning with a single, collapsed selection
                var isDisconnectedFromFindController = false;
                var wholeWord;
                var matchCase;
                var selections = editor.getSelections();
                if (selections.length === 1 && selections[0].isEmpty()) {
                    isDisconnectedFromFindController = true;
                    wholeWord = true;
                    matchCase = true;
                } else {
                    wholeWord = findState.wholeWord;
                    matchCase = findState.matchCase;
                }
                // Selection owns what is searched for
                var s = editor.getSelection();
                var searchText;
                var currentMatch = null;
                if (s.isEmpty()) {
                    // selection is empty => expand to current word
                    var word = editor.getConfiguredWordAtPosition(s.getStartPosition());
                    if (!word) return null;
                    searchText = word.word;
                    currentMatch = new _selectionJs.Selection(s.startLineNumber, word.startColumn, s.startLineNumber, word.endColumn);
                } else searchText = editor.getModel().getValueInRange(s).replace(/\r\n/g, '\n');
                return new MultiCursorSession(editor, findController, isDisconnectedFromFindController, searchText, wholeWord, matchCase, currentMatch);
            }
        }
    ]);
    return MultiCursorSession;
}();
var MultiCursorSelectionController = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(MultiCursorSelectionController, Disposable);
    var _super = _helpers.createSuper(MultiCursorSelectionController);
    function MultiCursorSelectionController(editor) {
        _helpers.classCallCheck(this, MultiCursorSelectionController);
        var _this;
        _this = _super.call(this);
        _this._sessionDispose = _this._register(new _lifecycleJs.DisposableStore());
        _this._editor = editor;
        _this._ignoreSelectionChange = false;
        _this._session = null;
        return _this;
    }
    _helpers.createClass(MultiCursorSelectionController, [
        {
            key: "dispose",
            value: function dispose() {
                this._endSession();
                _helpers.get(_helpers.getPrototypeOf(MultiCursorSelectionController.prototype), "dispose", this).call(this);
            }
        },
        {
            key: "_beginSessionIfNeeded",
            value: function _beginSessionIfNeeded(findController) {
                if (!this._session) {
                    var _this = this;
                    // Create a new session
                    var session = MultiCursorSession.create(this._editor, findController);
                    if (!session) return;
                    this._session = session;
                    var newState = {
                        searchString: this._session.searchText
                    };
                    if (this._session.isDisconnectedFromFindController) {
                        newState.wholeWordOverride = 1 /* True */ ;
                        newState.matchCaseOverride = 1 /* True */ ;
                        newState.isRegexOverride = 2 /* False */ ;
                    }
                    findController.getState().change(newState, false);
                    this._sessionDispose.add(this._editor.onDidChangeCursorSelection(function(e) {
                        if (_this._ignoreSelectionChange) return;
                        _this._endSession();
                    }));
                    this._sessionDispose.add(this._editor.onDidBlurEditorText(function() {
                        _this._endSession();
                    }));
                    this._sessionDispose.add(findController.getState().onFindReplaceStateChange(function(e) {
                        if (e.matchCase || e.wholeWord) _this._endSession();
                    }));
                }
            }
        },
        {
            key: "_endSession",
            value: function _endSession() {
                this._sessionDispose.clear();
                if (this._session && this._session.isDisconnectedFromFindController) {
                    var newState = {
                        wholeWordOverride: 0 /* NotSet */ ,
                        matchCaseOverride: 0 /* NotSet */ ,
                        isRegexOverride: 0 /* NotSet */ 
                    };
                    this._session.findController.getState().change(newState, false);
                }
                this._session = null;
            }
        },
        {
            key: "_setSelections",
            value: function _setSelections(selections) {
                this._ignoreSelectionChange = true;
                this._editor.setSelections(selections);
                this._ignoreSelectionChange = false;
            }
        },
        {
            key: "_expandEmptyToWord",
            value: function _expandEmptyToWord(model, selection) {
                if (!selection.isEmpty()) return selection;
                var word = this._editor.getConfiguredWordAtPosition(selection.getStartPosition());
                if (!word) return selection;
                return new _selectionJs.Selection(selection.startLineNumber, word.startColumn, selection.startLineNumber, word.endColumn);
            }
        },
        {
            key: "_applySessionResult",
            value: function _applySessionResult(result) {
                if (!result) return;
                this._setSelections(result.selections);
                if (result.revealRange) this._editor.revealRangeInCenterIfOutsideViewport(result.revealRange, result.revealScrollType);
            }
        },
        {
            key: "getSession",
            value: function getSession(findController) {
                return this._session;
            }
        },
        {
            key: "addSelectionToNextFindMatch",
            value: function addSelectionToNextFindMatch(findController) {
                if (!this._editor.hasModel()) return;
                if (!this._session) {
                    // If there are multiple cursors, handle the case where they do not all select the same text.
                    var allSelections = this._editor.getSelections();
                    if (allSelections.length > 1) {
                        var findState = findController.getState();
                        var matchCase = findState.matchCase;
                        var selectionsContainSameText = modelRangesContainSameText(this._editor.getModel(), allSelections, matchCase);
                        if (!selectionsContainSameText) {
                            var model = this._editor.getModel();
                            var resultingSelections = [];
                            for(var i = 0, len = allSelections.length; i < len; i++)resultingSelections[i] = this._expandEmptyToWord(model, allSelections[i]);
                            this._editor.setSelections(resultingSelections);
                            return;
                        }
                    }
                }
                this._beginSessionIfNeeded(findController);
                if (this._session) this._applySessionResult(this._session.addSelectionToNextFindMatch());
            }
        },
        {
            key: "addSelectionToPreviousFindMatch",
            value: function addSelectionToPreviousFindMatch(findController) {
                this._beginSessionIfNeeded(findController);
                if (this._session) this._applySessionResult(this._session.addSelectionToPreviousFindMatch());
            }
        },
        {
            key: "moveSelectionToNextFindMatch",
            value: function moveSelectionToNextFindMatch(findController) {
                this._beginSessionIfNeeded(findController);
                if (this._session) this._applySessionResult(this._session.moveSelectionToNextFindMatch());
            }
        },
        {
            key: "moveSelectionToPreviousFindMatch",
            value: function moveSelectionToPreviousFindMatch(findController) {
                this._beginSessionIfNeeded(findController);
                if (this._session) this._applySessionResult(this._session.moveSelectionToPreviousFindMatch());
            }
        },
        {
            key: "selectAll",
            value: function selectAll(findController) {
                if (!this._editor.hasModel()) return;
                var matches = null;
                var findState = findController.getState();
                // Special case: find widget owns entirely what we search for if:
                // - focus is not in the editor (i.e. it is in the find widget)
                // - and the search widget is visible
                // - and the search string is non-empty
                // - and we're searching for a regex
                if (findState.isRevealed && findState.searchString.length > 0 && findState.isRegex) matches = this._editor.getModel().findMatches(findState.searchString, true, findState.isRegex, findState.matchCase, findState.wholeWord ? this._editor.getOption(116 /* wordSeparators */ ) : null, false, 1073741824 /* MAX_SAFE_SMALL_INTEGER */ );
                else {
                    this._beginSessionIfNeeded(findController);
                    if (!this._session) return;
                    matches = this._session.selectAll();
                }
                if (findState.searchScope) {
                    var states = findState.searchScope;
                    var inSelection = [];
                    matches.forEach(function(match) {
                        states.forEach(function(state) {
                            if (match.range.endLineNumber <= state.endLineNumber && match.range.startLineNumber >= state.startLineNumber) inSelection.push(match);
                        });
                    });
                    matches = inSelection;
                }
                if (matches.length > 0) {
                    var editorSelection = this._editor.getSelection();
                    // Have the primary cursor remain the one where the action was invoked
                    for(var i = 0, len = matches.length; i < len; i++){
                        var match1 = matches[i];
                        var intersection = match1.range.intersectRanges(editorSelection);
                        if (intersection) {
                            // bingo!
                            matches[i] = matches[0];
                            matches[0] = match1;
                            break;
                        }
                    }
                    this._setSelections(matches.map(function(m) {
                        return new _selectionJs.Selection(m.range.startLineNumber, m.range.startColumn, m.range.endLineNumber, m.range.endColumn);
                    }));
                }
            }
        }
    ], [
        {
            key: "get",
            value: function get(editor) {
                return editor.getContribution(MultiCursorSelectionController.ID);
            }
        }
    ]);
    return MultiCursorSelectionController;
}(_lifecycleJs.Disposable);
MultiCursorSelectionController.ID = 'editor.contrib.multiCursorController';
var MultiCursorSelectionControllerAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(MultiCursorSelectionControllerAction, EditorAction);
    var _super = _helpers.createSuper(MultiCursorSelectionControllerAction);
    function MultiCursorSelectionControllerAction() {
        _helpers.classCallCheck(this, MultiCursorSelectionControllerAction);
        return _super.apply(this, arguments);
    }
    _helpers.createClass(MultiCursorSelectionControllerAction, [
        {
            key: "run",
            value: function run(accessor, editor) {
                var multiCursorController = MultiCursorSelectionController.get(editor);
                if (!multiCursorController) return;
                var findController = _findControllerJs.CommonFindController.get(editor);
                if (!findController) return;
                var viewModel = editor._getViewModel();
                if (viewModel) {
                    var previousCursorState = viewModel.getCursorStates();
                    this._run(multiCursorController, findController);
                    announceCursorChange(previousCursorState, viewModel.getCursorStates());
                }
            }
        }
    ]);
    return MultiCursorSelectionControllerAction;
}(_editorExtensionsJs.EditorAction);
var AddSelectionToNextFindMatchAction = /*#__PURE__*/ function(MultiCursorSelectionControllerAction) {
    "use strict";
    _helpers.inherits(AddSelectionToNextFindMatchAction, MultiCursorSelectionControllerAction);
    var _super = _helpers.createSuper(AddSelectionToNextFindMatchAction);
    function AddSelectionToNextFindMatchAction() {
        _helpers.classCallCheck(this, AddSelectionToNextFindMatchAction);
        return _super.call(this, {
            id: 'editor.action.addSelectionToNextFindMatch',
            label: _nlsJs.localize('addSelectionToNextFindMatch', "Add Selection To Next Find Match"),
            alias: 'Add Selection To Next Find Match',
            precondition: undefined,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.focus,
                primary: 2082 /* KeyD */ ,
                weight: 100 /* EditorContrib */ 
            },
            menuOpts: {
                menuId: _actionsJs.MenuId.MenubarSelectionMenu,
                group: '3_multi',
                title: _nlsJs.localize({
                    key: 'miAddSelectionToNextFindMatch',
                    comment: [
                        '&& denotes a mnemonic'
                    ]
                }, "Add &&Next Occurrence"),
                order: 5
            }
        });
    }
    _helpers.createClass(AddSelectionToNextFindMatchAction, [
        {
            key: "_run",
            value: function _run(multiCursorController, findController) {
                multiCursorController.addSelectionToNextFindMatch(findController);
            }
        }
    ]);
    return AddSelectionToNextFindMatchAction;
}(MultiCursorSelectionControllerAction);
var AddSelectionToPreviousFindMatchAction = /*#__PURE__*/ function(MultiCursorSelectionControllerAction) {
    "use strict";
    _helpers.inherits(AddSelectionToPreviousFindMatchAction, MultiCursorSelectionControllerAction);
    var _super = _helpers.createSuper(AddSelectionToPreviousFindMatchAction);
    function AddSelectionToPreviousFindMatchAction() {
        _helpers.classCallCheck(this, AddSelectionToPreviousFindMatchAction);
        return _super.call(this, {
            id: 'editor.action.addSelectionToPreviousFindMatch',
            label: _nlsJs.localize('addSelectionToPreviousFindMatch', "Add Selection To Previous Find Match"),
            alias: 'Add Selection To Previous Find Match',
            precondition: undefined,
            menuOpts: {
                menuId: _actionsJs.MenuId.MenubarSelectionMenu,
                group: '3_multi',
                title: _nlsJs.localize({
                    key: 'miAddSelectionToPreviousFindMatch',
                    comment: [
                        '&& denotes a mnemonic'
                    ]
                }, "Add P&&revious Occurrence"),
                order: 6
            }
        });
    }
    _helpers.createClass(AddSelectionToPreviousFindMatchAction, [
        {
            key: "_run",
            value: function _run(multiCursorController, findController) {
                multiCursorController.addSelectionToPreviousFindMatch(findController);
            }
        }
    ]);
    return AddSelectionToPreviousFindMatchAction;
}(MultiCursorSelectionControllerAction);
var MoveSelectionToNextFindMatchAction = /*#__PURE__*/ function(MultiCursorSelectionControllerAction) {
    "use strict";
    _helpers.inherits(MoveSelectionToNextFindMatchAction, MultiCursorSelectionControllerAction);
    var _super = _helpers.createSuper(MoveSelectionToNextFindMatchAction);
    function MoveSelectionToNextFindMatchAction() {
        _helpers.classCallCheck(this, MoveSelectionToNextFindMatchAction);
        return _super.call(this, {
            id: 'editor.action.moveSelectionToNextFindMatch',
            label: _nlsJs.localize('moveSelectionToNextFindMatch', "Move Last Selection To Next Find Match"),
            alias: 'Move Last Selection To Next Find Match',
            precondition: undefined,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.focus,
                primary: _keyCodesJs.KeyChord(2089 /* KeyK */ , 2082 /* KeyD */ ),
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    _helpers.createClass(MoveSelectionToNextFindMatchAction, [
        {
            key: "_run",
            value: function _run(multiCursorController, findController) {
                multiCursorController.moveSelectionToNextFindMatch(findController);
            }
        }
    ]);
    return MoveSelectionToNextFindMatchAction;
}(MultiCursorSelectionControllerAction);
var MoveSelectionToPreviousFindMatchAction = /*#__PURE__*/ function(MultiCursorSelectionControllerAction) {
    "use strict";
    _helpers.inherits(MoveSelectionToPreviousFindMatchAction, MultiCursorSelectionControllerAction);
    var _super = _helpers.createSuper(MoveSelectionToPreviousFindMatchAction);
    function MoveSelectionToPreviousFindMatchAction() {
        _helpers.classCallCheck(this, MoveSelectionToPreviousFindMatchAction);
        return _super.call(this, {
            id: 'editor.action.moveSelectionToPreviousFindMatch',
            label: _nlsJs.localize('moveSelectionToPreviousFindMatch', "Move Last Selection To Previous Find Match"),
            alias: 'Move Last Selection To Previous Find Match',
            precondition: undefined
        });
    }
    _helpers.createClass(MoveSelectionToPreviousFindMatchAction, [
        {
            key: "_run",
            value: function _run(multiCursorController, findController) {
                multiCursorController.moveSelectionToPreviousFindMatch(findController);
            }
        }
    ]);
    return MoveSelectionToPreviousFindMatchAction;
}(MultiCursorSelectionControllerAction);
var SelectHighlightsAction = /*#__PURE__*/ function(MultiCursorSelectionControllerAction) {
    "use strict";
    _helpers.inherits(SelectHighlightsAction, MultiCursorSelectionControllerAction);
    var _super = _helpers.createSuper(SelectHighlightsAction);
    function SelectHighlightsAction() {
        _helpers.classCallCheck(this, SelectHighlightsAction);
        return _super.call(this, {
            id: 'editor.action.selectHighlights',
            label: _nlsJs.localize('selectAllOccurrencesOfFindMatch', "Select All Occurrences of Find Match"),
            alias: 'Select All Occurrences of Find Match',
            precondition: undefined,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.focus,
                primary: 3114 /* KeyL */ ,
                weight: 100 /* EditorContrib */ 
            },
            menuOpts: {
                menuId: _actionsJs.MenuId.MenubarSelectionMenu,
                group: '3_multi',
                title: _nlsJs.localize({
                    key: 'miSelectHighlights',
                    comment: [
                        '&& denotes a mnemonic'
                    ]
                }, "Select All &&Occurrences"),
                order: 7
            }
        });
    }
    _helpers.createClass(SelectHighlightsAction, [
        {
            key: "_run",
            value: function _run(multiCursorController, findController) {
                multiCursorController.selectAll(findController);
            }
        }
    ]);
    return SelectHighlightsAction;
}(MultiCursorSelectionControllerAction);
var CompatChangeAll = /*#__PURE__*/ function(MultiCursorSelectionControllerAction) {
    "use strict";
    _helpers.inherits(CompatChangeAll, MultiCursorSelectionControllerAction);
    var _super = _helpers.createSuper(CompatChangeAll);
    function CompatChangeAll() {
        _helpers.classCallCheck(this, CompatChangeAll);
        return _super.call(this, {
            id: 'editor.action.changeAll',
            label: _nlsJs.localize('changeAll.label', "Change All Occurrences"),
            alias: 'Change All Occurrences',
            precondition: _contextkeyJs.ContextKeyExpr.and(_editorContextKeysJs.EditorContextKeys.writable, _editorContextKeysJs.EditorContextKeys.editorTextFocus),
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: 2108 /* F2 */ ,
                weight: 100 /* EditorContrib */ 
            },
            contextMenuOpts: {
                group: '1_modification',
                order: 1.2
            }
        });
    }
    _helpers.createClass(CompatChangeAll, [
        {
            key: "_run",
            value: function _run(multiCursorController, findController) {
                multiCursorController.selectAll(findController);
            }
        }
    ]);
    return CompatChangeAll;
}(MultiCursorSelectionControllerAction);
var SelectionHighlighterState = /*#__PURE__*/ function() {
    "use strict";
    function SelectionHighlighterState(_model, _searchText, _matchCase, _wordSeparators, prevState) {
        _helpers.classCallCheck(this, SelectionHighlighterState);
        this._model = _model;
        this._searchText = _searchText;
        this._matchCase = _matchCase;
        this._wordSeparators = _wordSeparators;
        this._modelVersionId = this._model.getVersionId();
        this._cachedFindMatches = null;
        if (prevState && this._model === prevState._model && this._searchText === prevState._searchText && this._matchCase === prevState._matchCase && this._wordSeparators === prevState._wordSeparators && this._modelVersionId === prevState._modelVersionId) this._cachedFindMatches = prevState._cachedFindMatches;
    }
    _helpers.createClass(SelectionHighlighterState, [
        {
            key: "findMatches",
            value: function findMatches() {
                if (this._cachedFindMatches === null) {
                    this._cachedFindMatches = this._model.findMatches(this._searchText, true, false, this._matchCase, this._wordSeparators, false).map(function(m) {
                        return m.range;
                    });
                    this._cachedFindMatches.sort(_rangeJs.Range.compareRangesUsingStarts);
                }
                return this._cachedFindMatches;
            }
        }
    ]);
    return SelectionHighlighterState;
}();
var SelectionHighlighter = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(SelectionHighlighter, Disposable);
    var _super = _helpers.createSuper(SelectionHighlighter);
    function SelectionHighlighter(editor) {
        _helpers.classCallCheck(this, SelectionHighlighter);
        var _this;
        _this = _super.call(this);
        _this.editor = editor;
        _this._isEnabled = editor.getOption(96 /* selectionHighlight */ );
        _this.decorations = [];
        _this.updateSoon = _this._register(new _asyncJs.RunOnceScheduler(function() {
            return _this._update();
        }, 300));
        _this.state = null;
        _this._register(editor.onDidChangeConfiguration(function(e) {
            _this._isEnabled = editor.getOption(96 /* selectionHighlight */ );
        }));
        _this._register(editor.onDidChangeCursorSelection(function(e) {
            if (!_this._isEnabled) // Early exit if nothing needs to be done!
            // Leave some form of early exit check here if you wish to continue being a cursor position change listener ;)
            return;
            if (e.selection.isEmpty()) {
                if (e.reason === 3 /* Explicit */ ) {
                    if (_this.state) // no longer valid
                    _this._setState(null);
                    _this.updateSoon.schedule();
                } else _this._setState(null);
            } else _this._update();
        }));
        _this._register(editor.onDidChangeModel(function(e) {
            _this._setState(null);
        }));
        _this._register(editor.onDidChangeModelContent(function(e) {
            if (_this._isEnabled) _this.updateSoon.schedule();
        }));
        _this._register(_findControllerJs.CommonFindController.get(editor).getState().onFindReplaceStateChange(function(e) {
            _this._update();
        }));
        return _this;
    }
    _helpers.createClass(SelectionHighlighter, [
        {
            key: "_update",
            value: function _update() {
                this._setState(SelectionHighlighter._createState(this.state, this._isEnabled, this.editor));
            }
        },
        {
            key: "_setState",
            value: function _setState(newState) {
                this.state = newState;
                if (!this.state) {
                    this.decorations = this.editor.deltaDecorations(this.decorations, []);
                    return;
                }
                if (!this.editor.hasModel()) return;
                var model = this.editor.getModel();
                if (model.isTooLargeForTokenization()) // the file is too large, so searching word under cursor in the whole document would be blocking the UI.
                return;
                var allMatches = this.state.findMatches();
                var selections = this.editor.getSelections();
                selections.sort(_rangeJs.Range.compareRangesUsingStarts);
                // do not overlap with selection (issue #64 and #512)
                var matches = [];
                for(var i = 0, j = 0, len = allMatches.length, lenJ = selections.length; i < len;){
                    var match = allMatches[i];
                    if (j >= lenJ) {
                        // finished all editor selections
                        matches.push(match);
                        i++;
                    } else {
                        var cmp = _rangeJs.Range.compareRangesUsingStarts(match, selections[j]);
                        if (cmp < 0) {
                            // match is before sel
                            if (selections[j].isEmpty() || !_rangeJs.Range.areIntersecting(match, selections[j])) matches.push(match);
                            i++;
                        } else if (cmp > 0) // sel is before match
                        j++;
                        else {
                            // sel is equal to match
                            i++;
                            j++;
                        }
                    }
                }
                var hasFindOccurrences = _modesJs.DocumentHighlightProviderRegistry.has(model) && this.editor.getOption(71 /* occurrencesHighlight */ );
                var decorations = matches.map(function(r) {
                    return {
                        range: r,
                        // Show in overviewRuler only if model has no semantic highlighting
                        options: hasFindOccurrences ? SelectionHighlighter._SELECTION_HIGHLIGHT : SelectionHighlighter._SELECTION_HIGHLIGHT_OVERVIEW
                    };
                });
                this.decorations = this.editor.deltaDecorations(this.decorations, decorations);
            }
        },
        {
            key: "dispose",
            value: function dispose() {
                this._setState(null);
                _helpers.get(_helpers.getPrototypeOf(SelectionHighlighter.prototype), "dispose", this).call(this);
            }
        }
    ], [
        {
            key: "_createState",
            value: function _createState(oldState, isEnabled, editor) {
                if (!isEnabled) return null;
                if (!editor.hasModel()) return null;
                var s = editor.getSelection();
                if (s.startLineNumber !== s.endLineNumber) // multiline forbidden for perf reasons
                return null;
                var multiCursorController = MultiCursorSelectionController.get(editor);
                if (!multiCursorController) return null;
                var findController = _findControllerJs.CommonFindController.get(editor);
                if (!findController) return null;
                var r = multiCursorController.getSession(findController);
                if (!r) {
                    var allSelections = editor.getSelections();
                    if (allSelections.length > 1) {
                        var findState = findController.getState();
                        var matchCase = findState.matchCase;
                        var selectionsContainSameText = modelRangesContainSameText(editor.getModel(), allSelections, matchCase);
                        if (!selectionsContainSameText) return null;
                    }
                    r = MultiCursorSession.create(editor, findController);
                }
                if (!r) return null;
                if (r.currentMatch) // This is an empty selection
                // Do not interfere with semantic word highlighting in the no selection case
                return null;
                if (/^[ \t]+$/.test(r.searchText)) // whitespace only selection
                return null;
                if (r.searchText.length > 200) // very long selection
                return null;
                // TODO: better handling of this case
                var findState1 = findController.getState();
                var caseSensitive = findState1.matchCase;
                // Return early if the find widget shows the exact same matches
                if (findState1.isRevealed) {
                    var findStateSearchString = findState1.searchString;
                    if (!caseSensitive) findStateSearchString = findStateSearchString.toLowerCase();
                    var mySearchString = r.searchText;
                    if (!caseSensitive) mySearchString = mySearchString.toLowerCase();
                    if (findStateSearchString === mySearchString && r.matchCase === findState1.matchCase && r.wholeWord === findState1.wholeWord && !findState1.isRegex) return null;
                }
                return new SelectionHighlighterState(editor.getModel(), r.searchText, r.matchCase, r.wholeWord ? editor.getOption(116 /* wordSeparators */ ) : null, oldState);
            }
        }
    ]);
    return SelectionHighlighter;
}(_lifecycleJs.Disposable);
SelectionHighlighter.ID = 'editor.contrib.selectionHighlighter';
SelectionHighlighter._SELECTION_HIGHLIGHT_OVERVIEW = _textModelJs.ModelDecorationOptions.register({
    description: 'selection-highlight-overview',
    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
    className: 'selectionHighlight',
    minimap: {
        color: _themeServiceJs.themeColorFromId(_colorRegistryJs.minimapSelectionOccurrenceHighlight),
        position: _modelJs.MinimapPosition.Inline
    },
    overviewRuler: {
        color: _themeServiceJs.themeColorFromId(_colorRegistryJs.overviewRulerSelectionHighlightForeground),
        position: _modelJs.OverviewRulerLane.Center
    }
});
SelectionHighlighter._SELECTION_HIGHLIGHT = _textModelJs.ModelDecorationOptions.register({
    description: 'selection-highlight',
    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
    className: 'selectionHighlight'
});
function modelRangesContainSameText(model, ranges, matchCase) {
    var selectedText = getValueInRange(model, ranges[0], !matchCase);
    for(var i = 1, len = ranges.length; i < len; i++){
        var range = ranges[i];
        if (range.isEmpty()) return false;
        var thisSelectedText = getValueInRange(model, range, !matchCase);
        if (selectedText !== thisSelectedText) return false;
    }
    return true;
}
function getValueInRange(model, range, toLowerCase) {
    var text = model.getValueInRange(range);
    return toLowerCase ? text.toLowerCase() : text;
}
_editorExtensionsJs.registerEditorContribution(MultiCursorSelectionController.ID, MultiCursorSelectionController);
_editorExtensionsJs.registerEditorContribution(SelectionHighlighter.ID, SelectionHighlighter);
_editorExtensionsJs.registerEditorAction(InsertCursorAbove);
_editorExtensionsJs.registerEditorAction(InsertCursorBelow);
_editorExtensionsJs.registerEditorAction(InsertCursorAtEndOfEachLineSelected);
_editorExtensionsJs.registerEditorAction(AddSelectionToNextFindMatchAction);
_editorExtensionsJs.registerEditorAction(AddSelectionToPreviousFindMatchAction);
_editorExtensionsJs.registerEditorAction(MoveSelectionToNextFindMatchAction);
_editorExtensionsJs.registerEditorAction(MoveSelectionToPreviousFindMatchAction);
_editorExtensionsJs.registerEditorAction(SelectHighlightsAction);
_editorExtensionsJs.registerEditorAction(CompatChangeAll);
_editorExtensionsJs.registerEditorAction(InsertCursorAtEndOfLineSelected);
_editorExtensionsJs.registerEditorAction(InsertCursorAtTopOfLineSelected);

},{"@swc/helpers":"erO4s","../../../base/browser/ui/aria/aria.js":"8SLUe","../../../base/common/async.js":"kMhSh","../../../base/common/keyCodes.js":"4hRDv","../../../base/common/lifecycle.js":"bcbPy","../../browser/editorExtensions.js":"dFnlo","../../common/controller/cursorMoveCommands.js":"5so8P","../../common/core/range.js":"VbyL8","../../common/core/selection.js":"hjmnH","../../common/editorContextKeys.js":"2t2PW","../../common/model.js":"dUHFC","../../common/model/textModel.js":"f18vR","../../common/modes.js":"bRbY1","../find/findController.js":"kgAfF","../../../nls.js":"9djYb","../../../platform/actions/common/actions.js":"1qoxQ","../../../platform/contextkey/common/contextkey.js":"5cjav","../../../platform/theme/common/colorRegistry.js":"lKtxS","../../../platform/theme/common/themeService.js":"kE7QB","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"i7PH7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TriggerParameterHintsAction", function() {
    return TriggerParameterHintsAction;
});
var _helpers = require("@swc/helpers");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _editorExtensionsJs = require("../../browser/editorExtensions.js");
var _editorContextKeysJs = require("../../common/editorContextKeys.js");
var _modesJs = require("../../common/modes.js");
var _provideSignatureHelpJs = require("./provideSignatureHelp.js");
var _nlsJs = require("../../../nls.js");
var _contextkeyJs = require("../../../platform/contextkey/common/contextkey.js");
var _instantiationJs = require("../../../platform/instantiation/common/instantiation.js");
var _parameterHintsWidgetJs = require("./parameterHintsWidget.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var ParameterHintsController = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(ParameterHintsController1, Disposable);
    var _super = _helpers.createSuper(ParameterHintsController1);
    function ParameterHintsController1(editor, instantiationService) {
        _helpers.classCallCheck(this, ParameterHintsController1);
        var _this;
        _this = _super.call(this);
        _this.editor = editor;
        _this.widget = _this._register(instantiationService.createInstance(_parameterHintsWidgetJs.ParameterHintsWidget, _this.editor));
        return _this;
    }
    _helpers.createClass(ParameterHintsController1, [
        {
            key: "cancel",
            value: function cancel() {
                this.widget.cancel();
            }
        },
        {
            key: "previous",
            value: function previous() {
                this.widget.previous();
            }
        },
        {
            key: "next",
            value: function next() {
                this.widget.next();
            }
        },
        {
            key: "trigger",
            value: function trigger(context) {
                this.widget.trigger(context);
            }
        }
    ], [
        {
            key: "get",
            value: function get(editor) {
                return editor.getContribution(ParameterHintsController1.ID);
            }
        }
    ]);
    return ParameterHintsController1;
}(_lifecycleJs.Disposable);
ParameterHintsController.ID = 'editor.controller.parameterHints';
ParameterHintsController = __decorate([
    __param(1, _instantiationJs.IInstantiationService)
], ParameterHintsController);
var TriggerParameterHintsAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(TriggerParameterHintsAction, EditorAction);
    var _super = _helpers.createSuper(TriggerParameterHintsAction);
    function TriggerParameterHintsAction() {
        _helpers.classCallCheck(this, TriggerParameterHintsAction);
        return _super.call(this, {
            id: 'editor.action.triggerParameterHints',
            label: _nlsJs.localize('parameterHints.trigger.label', "Trigger Parameter Hints"),
            alias: 'Trigger Parameter Hints',
            precondition: _editorContextKeysJs.EditorContextKeys.hasSignatureHelpProvider,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: 3082 /* Space */ ,
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    _helpers.createClass(TriggerParameterHintsAction, [
        {
            key: "run",
            value: function run(accessor, editor) {
                var controller = ParameterHintsController.get(editor);
                if (controller) controller.trigger({
                    triggerKind: _modesJs.SignatureHelpTriggerKind.Invoke
                });
            }
        }
    ]);
    return TriggerParameterHintsAction;
}(_editorExtensionsJs.EditorAction);
_editorExtensionsJs.registerEditorContribution(ParameterHintsController.ID, ParameterHintsController);
_editorExtensionsJs.registerEditorAction(TriggerParameterHintsAction);
var weight = 175;
var ParameterHintsCommand = _editorExtensionsJs.EditorCommand.bindToContribution(ParameterHintsController.get);
_editorExtensionsJs.registerEditorCommand(new ParameterHintsCommand({
    id: 'closeParameterHints',
    precondition: _provideSignatureHelpJs.Context.Visible,
    handler: function(x) {
        return x.cancel();
    },
    kbOpts: {
        weight: weight,
        kbExpr: _editorContextKeysJs.EditorContextKeys.focus,
        primary: 9 /* Escape */ ,
        secondary: [
            1033 /* Escape */ 
        ]
    }
}));
_editorExtensionsJs.registerEditorCommand(new ParameterHintsCommand({
    id: 'showPrevParameterHint',
    precondition: _contextkeyJs.ContextKeyExpr.and(_provideSignatureHelpJs.Context.Visible, _provideSignatureHelpJs.Context.MultipleSignatures),
    handler: function(x) {
        return x.previous();
    },
    kbOpts: {
        weight: weight,
        kbExpr: _editorContextKeysJs.EditorContextKeys.focus,
        primary: 16 /* UpArrow */ ,
        secondary: [
            528 /* UpArrow */ 
        ],
        mac: {
            primary: 16 /* UpArrow */ ,
            secondary: [
                528 /* UpArrow */ ,
                302 /* KeyP */ 
            ]
        }
    }
}));
_editorExtensionsJs.registerEditorCommand(new ParameterHintsCommand({
    id: 'showNextParameterHint',
    precondition: _contextkeyJs.ContextKeyExpr.and(_provideSignatureHelpJs.Context.Visible, _provideSignatureHelpJs.Context.MultipleSignatures),
    handler: function(x) {
        return x.next();
    },
    kbOpts: {
        weight: weight,
        kbExpr: _editorContextKeysJs.EditorContextKeys.focus,
        primary: 18 /* DownArrow */ ,
        secondary: [
            530 /* DownArrow */ 
        ],
        mac: {
            primary: 18 /* DownArrow */ ,
            secondary: [
                530 /* DownArrow */ ,
                300 /* KeyN */ 
            ]
        }
    }
}));

},{"@swc/helpers":"erO4s","../../../base/common/lifecycle.js":"bcbPy","../../browser/editorExtensions.js":"dFnlo","../../common/editorContextKeys.js":"2t2PW","../../common/modes.js":"bRbY1","./provideSignatureHelp.js":"4Rn0A","../../../nls.js":"9djYb","../../../platform/contextkey/common/contextkey.js":"5cjav","../../../platform/instantiation/common/instantiation.js":"9ABZB","./parameterHintsWidget.js":"8MI4y","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"4Rn0A":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Context", function() {
    return Context;
});
parcelHelpers.export(exports, "provideSignatureHelp", function() {
    return provideSignatureHelp;
});
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
var _cancellationJs = require("../../../base/common/cancellation.js");
var _errorsJs = require("../../../base/common/errors.js");
var _typesJs = require("../../../base/common/types.js");
var _uriJs = require("../../../base/common/uri.js");
var _positionJs = require("../../common/core/position.js");
var _modesJs = require("../../common/modes.js");
var _resolverServiceJs = require("../../common/services/resolverService.js");
var _commandsJs = require("../../../platform/commands/common/commands.js");
var _contextkeyJs = require("../../../platform/contextkey/common/contextkey.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var Context = {
    Visible: new _contextkeyJs.RawContextKey('parameterHintsVisible', false),
    MultipleSignatures: new _contextkeyJs.RawContextKey('parameterHintsMultipleSignatures', false)
};
function provideSignatureHelp(model, position, context, token) {
    return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
        var supports, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, support, result;
        return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
            while(1)switch(_ctx.prev = _ctx.next){
                case 0:
                    supports = _modesJs.SignatureHelpProviderRegistry.ordered(model);
                    _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    _ctx.prev = 2;
                    _iterator = supports[Symbol.iterator]();
                case 4:
                    if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                        _ctx.next = 20;
                        break;
                    }
                    support = _step.value;
                    _ctx.prev = 6;
                    _ctx.next = 9;
                    return support.provideSignatureHelp(model, position, token, context);
                case 9:
                    result = _ctx.sent;
                    if (!result) {
                        _ctx.next = 12;
                        break;
                    }
                    return _ctx.abrupt("return", result);
                case 12:
                    _ctx.next = 17;
                    break;
                case 14:
                    _ctx.prev = 14;
                    _ctx.t0 = _ctx["catch"](6);
                    _errorsJs.onUnexpectedExternalError(_ctx.t0);
                case 17:
                    _iteratorNormalCompletion = true;
                    _ctx.next = 4;
                    break;
                case 20:
                    _ctx.next = 26;
                    break;
                case 22:
                    _ctx.prev = 22;
                    _ctx.t1 = _ctx["catch"](2);
                    _didIteratorError = true;
                    _iteratorError = _ctx.t1;
                case 26:
                    _ctx.prev = 26;
                    _ctx.prev = 27;
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                    }
                case 29:
                    _ctx.prev = 29;
                    if (!_didIteratorError) {
                        _ctx.next = 32;
                        break;
                    }
                    throw _iteratorError;
                case 32:
                    return _ctx.finish(29);
                case 33:
                    return _ctx.finish(26);
                case 34:
                    return _ctx.abrupt("return", undefined);
                case 35:
                case "end":
                    return _ctx.stop();
            }
        }, _callee, null, [
            [
                2,
                22,
                26,
                34
            ],
            [
                6,
                14
            ],
            [
                27,
                ,
                29,
                33
            ]
        ]);
    }));
}
_commandsJs.CommandsRegistry.registerCommand('_executeSignatureHelpProvider', function(accessor) {
    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
        args[_key - 1] = arguments[_key];
    }
    return __awaiter(void 0, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
        var _args, uri, position, triggerCharacter, ref, result;
        return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
            while(1)switch(_ctx.prev = _ctx.next){
                case 0:
                    _args = _helpers.slicedToArray(args, 3), uri = _args[0], position = _args[1], triggerCharacter = _args[2];
                    _typesJs.assertType(_uriJs.URI.isUri(uri));
                    _typesJs.assertType(_positionJs.Position.isIPosition(position));
                    _typesJs.assertType(typeof triggerCharacter === 'string' || !triggerCharacter);
                    _ctx.next = 6;
                    return accessor.get(_resolverServiceJs.ITextModelService).createModelReference(uri);
                case 6:
                    ref = _ctx.sent;
                    _ctx.prev = 7;
                    _ctx.next = 10;
                    return provideSignatureHelp(ref.object.textEditorModel, _positionJs.Position.lift(position), {
                        triggerKind: _modesJs.SignatureHelpTriggerKind.Invoke,
                        isRetrigger: false,
                        triggerCharacter: triggerCharacter
                    }, _cancellationJs.CancellationToken.None);
                case 10:
                    result = _ctx.sent;
                    if (result) {
                        _ctx.next = 13;
                        break;
                    }
                    return _ctx.abrupt("return", undefined);
                case 13:
                    setTimeout(function() {
                        return result.dispose();
                    }, 0);
                    return _ctx.abrupt("return", result.value);
                case 15:
                    _ctx.prev = 15;
                    ref.dispose();
                    return _ctx.finish(15);
                case 18:
                case "end":
                    return _ctx.stop();
            }
        }, _callee, null, [
            [
                7,
                ,
                15,
                18
            ]
        ]);
    }));
});

},{"@swc/helpers":"erO4s","regenerator-runtime":"12Ae8","../../../base/common/cancellation.js":"1C4LY","../../../base/common/errors.js":"afm4i","../../../base/common/types.js":"lF7Cj","../../../base/common/uri.js":"4ZDLf","../../common/core/position.js":"6xP0w","../../common/modes.js":"bRbY1","../../common/services/resolverService.js":"944WH","../../../platform/commands/common/commands.js":"eeuTC","../../../platform/contextkey/common/contextkey.js":"5cjav","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"8MI4y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ParameterHintsWidget", function() {
    return ParameterHintsWidget;
});
parcelHelpers.export(exports, "editorHoverWidgetHighlightForeground", function() {
    return editorHoverWidgetHighlightForeground;
});
var _helpers = require("@swc/helpers");
var _domJs = require("../../../base/browser/dom.js");
var _ariaJs = require("../../../base/browser/ui/aria/aria.js");
var _scrollableElementJs = require("../../../base/browser/ui/scrollbar/scrollableElement.js");
var _codiconsJs = require("../../../base/common/codicons.js");
var _eventJs = require("../../../base/common/event.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _stringsJs = require("../../../base/common/strings.js");
var _typesJs = require("../../../base/common/types.js");
var _parameterHintsCss = require("./parameterHints.css");
var _markdownRendererJs = require("../../browser/core/markdownRenderer.js");
var _modeServiceJs = require("../../common/services/modeService.js");
var _parameterHintsModelJs = require("./parameterHintsModel.js");
var _provideSignatureHelpJs = require("./provideSignatureHelp.js");
var _nlsJs = require("../../../nls.js");
var _contextkeyJs = require("../../../platform/contextkey/common/contextkey.js");
var _openerJs = require("../../../platform/opener/common/opener.js");
var _colorRegistryJs = require("../../../platform/theme/common/colorRegistry.js");
var _iconRegistryJs = require("../../../platform/theme/common/iconRegistry.js");
var _themeJs = require("../../../platform/theme/common/theme.js");
var _themeServiceJs = require("../../../platform/theme/common/themeService.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var $ = _domJs.$;
var parameterHintsNextIcon = _iconRegistryJs.registerIcon('parameter-hints-next', _codiconsJs.Codicon.chevronDown, _nlsJs.localize('parameterHintsNextIcon', 'Icon for show next parameter hint.'));
var parameterHintsPreviousIcon = _iconRegistryJs.registerIcon('parameter-hints-previous', _codiconsJs.Codicon.chevronUp, _nlsJs.localize('parameterHintsPreviousIcon', 'Icon for show previous parameter hint.'));
var ParameterHintsWidget = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(ParameterHintsWidget1, Disposable);
    var _super = _helpers.createSuper(ParameterHintsWidget1);
    function ParameterHintsWidget1(editor, contextKeyService, openerService, modeService) {
        _helpers.classCallCheck(this, ParameterHintsWidget1);
        var _this;
        _this = _super.call(this);
        _this.editor = editor;
        _this.renderDisposeables = _this._register(new _lifecycleJs.DisposableStore());
        _this.visible = false;
        _this.announcedLabel = null;
        // Editor.IContentWidget.allowEditorOverflow
        _this.allowEditorOverflow = true;
        _this.markdownRenderer = _this._register(new _markdownRendererJs.MarkdownRenderer({
            editor: editor
        }, modeService, openerService));
        _this.model = _this._register(new _parameterHintsModelJs.ParameterHintsModel(editor));
        _this.keyVisible = _provideSignatureHelpJs.Context.Visible.bindTo(contextKeyService);
        _this.keyMultipleSignatures = _provideSignatureHelpJs.Context.MultipleSignatures.bindTo(contextKeyService);
        _this._register(_this.model.onChangedHints(function(newParameterHints) {
            if (newParameterHints) {
                _this.show();
                _this.render(newParameterHints);
            } else _this.hide();
        }));
        return _this;
    }
    _helpers.createClass(ParameterHintsWidget1, [
        {
            key: "createParameterHintDOMNodes",
            value: function createParameterHintDOMNodes() {
                var _this = this;
                var element = $('.editor-widget.parameter-hints-widget');
                var wrapper = _domJs.append(element, $('.phwrapper'));
                wrapper.tabIndex = -1;
                var controls = _domJs.append(wrapper, $('.controls'));
                var previous = _domJs.append(controls, $('.button' + _themeServiceJs.ThemeIcon.asCSSSelector(parameterHintsPreviousIcon)));
                var overloads = _domJs.append(controls, $('.overloads'));
                var next = _domJs.append(controls, $('.button' + _themeServiceJs.ThemeIcon.asCSSSelector(parameterHintsNextIcon)));
                this._register(_domJs.addDisposableListener(previous, 'click', function(e) {
                    _domJs.EventHelper.stop(e);
                    _this.previous();
                }));
                this._register(_domJs.addDisposableListener(next, 'click', function(e) {
                    _domJs.EventHelper.stop(e);
                    _this.next();
                }));
                var body = $('.body');
                var scrollbar = new _scrollableElementJs.DomScrollableElement(body, {});
                this._register(scrollbar);
                wrapper.appendChild(scrollbar.getDomNode());
                var signature = _domJs.append(body, $('.signature'));
                var docs = _domJs.append(body, $('.docs'));
                element.style.userSelect = 'text';
                this.domNodes = {
                    element: element,
                    signature: signature,
                    overloads: overloads,
                    docs: docs,
                    scrollbar: scrollbar
                };
                this.editor.addContentWidget(this);
                this.hide();
                this._register(this.editor.onDidChangeCursorSelection(function(e) {
                    if (_this.visible) _this.editor.layoutContentWidget(_this);
                }));
                var updateFont = function() {
                    if (!_this.domNodes) return;
                    var fontInfo = _this.editor.getOption(43 /* fontInfo */ );
                    _this.domNodes.element.style.fontSize = "".concat(fontInfo.fontSize, "px");
                    _this.domNodes.element.style.lineHeight = "".concat(fontInfo.lineHeight / fontInfo.fontSize);
                };
                updateFont();
                this._register(_eventJs.Event.chain(this.editor.onDidChangeConfiguration.bind(this.editor)).filter(function(e) {
                    return e.hasChanged(43 /* fontInfo */ );
                }).on(updateFont, null));
                this._register(this.editor.onDidLayoutChange(function(e) {
                    return _this.updateMaxHeight();
                }));
                this.updateMaxHeight();
            }
        },
        {
            key: "show",
            value: function show() {
                var _this = this;
                if (this.visible) return;
                if (!this.domNodes) this.createParameterHintDOMNodes();
                this.keyVisible.set(true);
                this.visible = true;
                setTimeout(function() {
                    if (_this.domNodes) _this.domNodes.element.classList.add('visible');
                }, 100);
                this.editor.layoutContentWidget(this);
            }
        },
        {
            key: "hide",
            value: function hide() {
                this.renderDisposeables.clear();
                if (!this.visible) return;
                this.keyVisible.reset();
                this.visible = false;
                this.announcedLabel = null;
                if (this.domNodes) this.domNodes.element.classList.remove('visible');
                this.editor.layoutContentWidget(this);
            }
        },
        {
            key: "getPosition",
            value: function getPosition() {
                if (this.visible) return {
                    position: this.editor.getPosition(),
                    preference: [
                        1 /* ABOVE */ ,
                        2 /* BELOW */ 
                    ]
                };
                return null;
            }
        },
        {
            key: "render",
            value: function render(hints) {
                var _a;
                this.renderDisposeables.clear();
                if (!this.domNodes) return;
                var multiple = hints.signatures.length > 1;
                this.domNodes.element.classList.toggle('multiple', multiple);
                this.keyMultipleSignatures.set(multiple);
                this.domNodes.signature.innerText = '';
                this.domNodes.docs.innerText = '';
                var signature = hints.signatures[hints.activeSignature];
                if (!signature) return;
                var code = _domJs.append(this.domNodes.signature, $('.code'));
                var fontInfo = this.editor.getOption(43 /* fontInfo */ );
                code.style.fontSize = "".concat(fontInfo.fontSize, "px");
                code.style.fontFamily = fontInfo.fontFamily;
                var hasParameters = signature.parameters.length > 0;
                var activeParameterIndex = (_a = signature.activeParameter) !== null && _a !== void 0 ? _a : hints.activeParameter;
                if (!hasParameters) {
                    var label = _domJs.append(code, $('span'));
                    label.textContent = signature.label;
                } else this.renderParameters(code, signature, activeParameterIndex);
                var activeParameter = signature.parameters[activeParameterIndex];
                if (activeParameter === null || activeParameter === void 0 ? void 0 : activeParameter.documentation) {
                    var documentation = $('span.documentation');
                    if (typeof activeParameter.documentation === 'string') documentation.textContent = activeParameter.documentation;
                    else {
                        var renderedContents = this.renderMarkdownDocs(activeParameter.documentation);
                        documentation.appendChild(renderedContents.element);
                    }
                    _domJs.append(this.domNodes.docs, $('p', {}, documentation));
                }
                if (signature.documentation === undefined) ;
                else if (typeof signature.documentation === 'string') _domJs.append(this.domNodes.docs, $('p', {}, signature.documentation));
                else {
                    var renderedContents1 = this.renderMarkdownDocs(signature.documentation);
                    _domJs.append(this.domNodes.docs, renderedContents1.element);
                }
                var hasDocs = this.hasDocs(signature, activeParameter);
                this.domNodes.signature.classList.toggle('has-docs', hasDocs);
                this.domNodes.docs.classList.toggle('empty', !hasDocs);
                this.domNodes.overloads.textContent = String(hints.activeSignature + 1).padStart(hints.signatures.length.toString().length, '0') + '/' + hints.signatures.length;
                if (activeParameter) {
                    var labelToAnnounce = '';
                    var param = signature.parameters[activeParameterIndex];
                    if (Array.isArray(param.label)) labelToAnnounce = signature.label.substring(param.label[0], param.label[1]);
                    else labelToAnnounce = param.label;
                    if (param.documentation) labelToAnnounce += typeof param.documentation === 'string' ? ", ".concat(param.documentation) : ", ".concat(param.documentation.value);
                    if (signature.documentation) labelToAnnounce += typeof signature.documentation === 'string' ? ", ".concat(signature.documentation) : ", ".concat(signature.documentation.value);
                    // Select method gets called on every user type while parameter hints are visible.
                    // We do not want to spam the user with same announcements, so we only announce if the current parameter changed.
                    if (this.announcedLabel !== labelToAnnounce) {
                        _ariaJs.alert(_nlsJs.localize('hint', "{0}, hint", labelToAnnounce));
                        this.announcedLabel = labelToAnnounce;
                    }
                }
                this.editor.layoutContentWidget(this);
                this.domNodes.scrollbar.scanDomNode();
            }
        },
        {
            key: "renderMarkdownDocs",
            value: function renderMarkdownDocs(markdown) {
                var _this = this;
                var renderedContents = this.renderDisposeables.add(this.markdownRenderer.render(markdown, {
                    asyncRenderCallback: function() {
                        var _a;
                        (_a = _this.domNodes) === null || _a === void 0 || _a.scrollbar.scanDomNode();
                    }
                }));
                renderedContents.element.classList.add('markdown-docs');
                return renderedContents;
            }
        },
        {
            key: "hasDocs",
            value: function hasDocs(signature, activeParameter) {
                if (activeParameter && typeof activeParameter.documentation === 'string' && _typesJs.assertIsDefined(activeParameter.documentation).length > 0) return true;
                if (activeParameter && typeof activeParameter.documentation === 'object' && _typesJs.assertIsDefined(activeParameter.documentation).value.length > 0) return true;
                if (signature.documentation && typeof signature.documentation === 'string' && _typesJs.assertIsDefined(signature.documentation).length > 0) return true;
                if (signature.documentation && typeof signature.documentation === 'object' && _typesJs.assertIsDefined(signature.documentation.value).length > 0) return true;
                return false;
            }
        },
        {
            key: "renderParameters",
            value: function renderParameters(parent, signature, activeParameterIndex) {
                var ref = _helpers.slicedToArray(this.getParameterLabelOffsets(signature, activeParameterIndex), 2), start = ref[0], end = ref[1];
                var beforeSpan = document.createElement('span');
                beforeSpan.textContent = signature.label.substring(0, start);
                var paramSpan = document.createElement('span');
                paramSpan.textContent = signature.label.substring(start, end);
                paramSpan.className = 'parameter active';
                var afterSpan = document.createElement('span');
                afterSpan.textContent = signature.label.substring(end);
                _domJs.append(parent, beforeSpan, paramSpan, afterSpan);
            }
        },
        {
            key: "getParameterLabelOffsets",
            value: function getParameterLabelOffsets(signature, paramIdx) {
                var param = signature.parameters[paramIdx];
                if (!param) return [
                    0,
                    0
                ];
                else if (Array.isArray(param.label)) return param.label;
                else if (!param.label.length) return [
                    0,
                    0
                ];
                else {
                    var regex = new RegExp("(\\W|^)".concat(_stringsJs.escapeRegExpCharacters(param.label), "(?=\\W|$)"), 'g');
                    regex.test(signature.label);
                    var idx = regex.lastIndex - param.label.length;
                    return idx >= 0 ? [
                        idx,
                        regex.lastIndex
                    ] : [
                        0,
                        0
                    ];
                }
            }
        },
        {
            key: "next",
            value: function next() {
                this.editor.focus();
                this.model.next();
            }
        },
        {
            key: "previous",
            value: function previous() {
                this.editor.focus();
                this.model.previous();
            }
        },
        {
            key: "cancel",
            value: function cancel() {
                this.model.cancel();
            }
        },
        {
            key: "getDomNode",
            value: function getDomNode() {
                if (!this.domNodes) this.createParameterHintDOMNodes();
                return this.domNodes.element;
            }
        },
        {
            key: "getId",
            value: function getId() {
                return ParameterHintsWidget1.ID;
            }
        },
        {
            key: "trigger",
            value: function trigger(context) {
                this.model.trigger(context, 0);
            }
        },
        {
            key: "updateMaxHeight",
            value: function updateMaxHeight() {
                if (!this.domNodes) return;
                var height = Math.max(this.editor.getLayoutInfo().height / 4, 250);
                var maxHeight = "".concat(height, "px");
                this.domNodes.element.style.maxHeight = maxHeight;
                var wrapper = this.domNodes.element.getElementsByClassName('phwrapper');
                if (wrapper.length) wrapper[0].style.maxHeight = maxHeight;
            }
        }
    ]);
    return ParameterHintsWidget1;
}(_lifecycleJs.Disposable);
ParameterHintsWidget.ID = 'editor.widget.parameterHintsWidget';
ParameterHintsWidget = __decorate([
    __param(1, _contextkeyJs.IContextKeyService),
    __param(2, _openerJs.IOpenerService),
    __param(3, _modeServiceJs.IModeService)
], ParameterHintsWidget);
var editorHoverWidgetHighlightForeground = _colorRegistryJs.registerColor('editorHoverWidget.highlightForeground', {
    dark: _colorRegistryJs.listHighlightForeground,
    light: _colorRegistryJs.listHighlightForeground,
    hc: _colorRegistryJs.listHighlightForeground
}, _nlsJs.localize('editorHoverWidgetHighlightForeground', 'Foreground color of the active item in the parameter hint.'));
_themeServiceJs.registerThemingParticipant(function(theme, collector) {
    var border = theme.getColor(_colorRegistryJs.editorHoverBorder);
    if (border) {
        var borderWidth = theme.type === _themeJs.ColorScheme.HIGH_CONTRAST ? 2 : 1;
        collector.addRule(".monaco-editor .parameter-hints-widget { border: ".concat(borderWidth, "px solid ").concat(border, "; }"));
        collector.addRule(".monaco-editor .parameter-hints-widget.multiple .body { border-left: 1px solid ".concat(border.transparent(0.5), "; }"));
        collector.addRule(".monaco-editor .parameter-hints-widget .signature.has-docs { border-bottom: 1px solid ".concat(border.transparent(0.5), "; }"));
    }
    var background = theme.getColor(_colorRegistryJs.editorHoverBackground);
    if (background) collector.addRule(".monaco-editor .parameter-hints-widget { background-color: ".concat(background, "; }"));
    var link = theme.getColor(_colorRegistryJs.textLinkForeground);
    if (link) collector.addRule(".monaco-editor .parameter-hints-widget a { color: ".concat(link, "; }"));
    var linkHover = theme.getColor(_colorRegistryJs.textLinkActiveForeground);
    if (linkHover) collector.addRule(".monaco-editor .parameter-hints-widget a:hover { color: ".concat(linkHover, "; }"));
    var foreground = theme.getColor(_colorRegistryJs.editorHoverForeground);
    if (foreground) collector.addRule(".monaco-editor .parameter-hints-widget { color: ".concat(foreground, "; }"));
    var codeBackground = theme.getColor(_colorRegistryJs.textCodeBlockBackground);
    if (codeBackground) collector.addRule(".monaco-editor .parameter-hints-widget code { background-color: ".concat(codeBackground, "; }"));
    var parameterHighlightColor = theme.getColor(editorHoverWidgetHighlightForeground);
    if (parameterHighlightColor) collector.addRule(".monaco-editor .parameter-hints-widget .parameter.active { color: ".concat(parameterHighlightColor, "}"));
});

},{"@swc/helpers":"erO4s","../../../base/browser/dom.js":"bxmlc","../../../base/browser/ui/aria/aria.js":"8SLUe","../../../base/browser/ui/scrollbar/scrollableElement.js":"gBkC9","../../../base/common/codicons.js":"j24JC","../../../base/common/event.js":"9IBcK","../../../base/common/lifecycle.js":"bcbPy","../../../base/common/strings.js":"jsb6w","../../../base/common/types.js":"lF7Cj","./parameterHints.css":"dRKAo","../../browser/core/markdownRenderer.js":"7tjMJ","../../common/services/modeService.js":"dNIX6","./parameterHintsModel.js":"kvUXI","./provideSignatureHelp.js":"4Rn0A","../../../nls.js":"9djYb","../../../platform/contextkey/common/contextkey.js":"5cjav","../../../platform/opener/common/opener.js":"nEUGw","../../../platform/theme/common/colorRegistry.js":"lKtxS","../../../platform/theme/common/iconRegistry.js":"evGtc","../../../platform/theme/common/theme.js":"9jy6b","../../../platform/theme/common/themeService.js":"kE7QB","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"dRKAo":[function() {},{}],"kvUXI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ParameterHintsModel", function() {
    return ParameterHintsModel;
});
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
var _asyncJs = require("../../../base/common/async.js");
var _errorsJs = require("../../../base/common/errors.js");
var _eventJs = require("../../../base/common/event.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _characterClassifierJs = require("../../common/core/characterClassifier.js");
var _modesJs = require("../../common/modes.js");
var _provideSignatureHelpJs = require("./provideSignatureHelp.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var ParameterHintState;
(function(ParameterHintState1) {
    ParameterHintState1.Default = {
        type: 0 /* Default */ 
    };
    var Pending = function Pending(request, previouslyActiveHints) {
        "use strict";
        _helpers.classCallCheck(this, Pending);
        this.request = request;
        this.previouslyActiveHints = previouslyActiveHints;
        this.type = 2 /* Pending */ ;
    };
    ParameterHintState1.Pending = Pending;
    var Active = function Active(hints) {
        "use strict";
        _helpers.classCallCheck(this, Active);
        this.hints = hints;
        this.type = 1 /* Active */ ;
    };
    ParameterHintState1.Active = Active;
})(ParameterHintState || (ParameterHintState = {}));
var ParameterHintsModel = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(ParameterHintsModel, Disposable);
    var _super = _helpers.createSuper(ParameterHintsModel);
    function ParameterHintsModel(editor) {
        var delay = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : ParameterHintsModel.DEFAULT_DELAY;
        _helpers.classCallCheck(this, ParameterHintsModel);
        var _this;
        _this = _super.call(this);
        _this._onChangedHints = _this._register(new _eventJs.Emitter());
        _this.onChangedHints = _this._onChangedHints.event;
        _this.triggerOnType = false;
        _this._state = ParameterHintState.Default;
        _this._pendingTriggers = [];
        _this._lastSignatureHelpResult = _this._register(new _lifecycleJs.MutableDisposable());
        _this.triggerChars = new _characterClassifierJs.CharacterSet();
        _this.retriggerChars = new _characterClassifierJs.CharacterSet();
        _this.triggerId = 0;
        _this.editor = editor;
        _this.throttledDelayer = new _asyncJs.Delayer(delay);
        _this._register(_this.editor.onDidBlurEditorWidget(function() {
            return _this.cancel();
        }));
        _this._register(_this.editor.onDidChangeConfiguration(function() {
            return _this.onEditorConfigurationChange();
        }));
        _this._register(_this.editor.onDidChangeModel(function(e) {
            return _this.onModelChanged();
        }));
        _this._register(_this.editor.onDidChangeModelLanguage(function(_) {
            return _this.onModelChanged();
        }));
        _this._register(_this.editor.onDidChangeCursorSelection(function(e) {
            return _this.onCursorChange(e);
        }));
        _this._register(_this.editor.onDidChangeModelContent(function(e) {
            return _this.onModelContentChange();
        }));
        _this._register(_modesJs.SignatureHelpProviderRegistry.onDidChange(_this.onModelChanged, _helpers.assertThisInitialized(_this)));
        _this._register(_this.editor.onDidType(function(text) {
            return _this.onDidType(text);
        }));
        _this.onEditorConfigurationChange();
        _this.onModelChanged();
        return _this;
    }
    _helpers.createClass(ParameterHintsModel, [
        {
            key: "state",
            get: function get() {
                return this._state;
            },
            set: function set(value) {
                if (this._state.type === 2 /* Pending */ ) this._state.request.cancel();
                this._state = value;
            }
        },
        {
            key: "cancel",
            value: function cancel() {
                var silent = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
                this.state = ParameterHintState.Default;
                this.throttledDelayer.cancel();
                if (!silent) this._onChangedHints.fire(undefined);
            }
        },
        {
            key: "trigger",
            value: function trigger(context, delay) {
                var _this = this;
                var model = this.editor.getModel();
                if (!model || !_modesJs.SignatureHelpProviderRegistry.has(model)) return;
                var triggerId = ++this.triggerId;
                this._pendingTriggers.push(context);
                this.throttledDelayer.trigger(function() {
                    return _this.doTrigger(triggerId);
                }, delay).catch(_errorsJs.onUnexpectedError);
            }
        },
        {
            key: "next",
            value: function next() {
                if (this.state.type !== 1 /* Active */ ) return;
                var length = this.state.hints.signatures.length;
                var activeSignature = this.state.hints.activeSignature;
                var last = activeSignature % length === length - 1;
                var cycle = this.editor.getOption(75 /* parameterHints */ ).cycle;
                // If there is only one signature, or we're on last signature of list
                if ((length < 2 || last) && !cycle) {
                    this.cancel();
                    return;
                }
                this.updateActiveSignature(last && cycle ? 0 : activeSignature + 1);
            }
        },
        {
            key: "previous",
            value: function previous() {
                if (this.state.type !== 1 /* Active */ ) return;
                var length = this.state.hints.signatures.length;
                var activeSignature = this.state.hints.activeSignature;
                var first = activeSignature === 0;
                var cycle = this.editor.getOption(75 /* parameterHints */ ).cycle;
                // If there is only one signature, or we're on first signature of list
                if ((length < 2 || first) && !cycle) {
                    this.cancel();
                    return;
                }
                this.updateActiveSignature(first && cycle ? length - 1 : activeSignature - 1);
            }
        },
        {
            key: "updateActiveSignature",
            value: function updateActiveSignature(activeSignature) {
                if (this.state.type !== 1 /* Active */ ) return;
                this.state = new ParameterHintState.Active(Object.assign(Object.assign({}, this.state.hints), {
                    activeSignature: activeSignature
                }));
                this._onChangedHints.fire(this.state.hints);
            }
        },
        {
            key: "doTrigger",
            value: function doTrigger(triggerId) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var isRetrigger, activeSignatureHelp, context, triggerContext, model, position, result;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                isRetrigger = this.state.type === 1 /* Active */  || this.state.type === 2 /* Pending */ ;
                                activeSignatureHelp = this.getLastActiveHints();
                                this.cancel(true);
                                if (!(this._pendingTriggers.length === 0)) {
                                    _ctx.next = 5;
                                    break;
                                }
                                return _ctx.abrupt("return", false);
                            case 5:
                                context = this._pendingTriggers.reduce(mergeTriggerContexts);
                                this._pendingTriggers = [];
                                triggerContext = {
                                    triggerKind: context.triggerKind,
                                    triggerCharacter: context.triggerCharacter,
                                    isRetrigger: isRetrigger,
                                    activeSignatureHelp: activeSignatureHelp
                                };
                                if (this.editor.hasModel()) {
                                    _ctx.next = 10;
                                    break;
                                }
                                return _ctx.abrupt("return", false);
                            case 10:
                                model = this.editor.getModel();
                                position = this.editor.getPosition();
                                this.state = new ParameterHintState.Pending(_asyncJs.createCancelablePromise(function(token) {
                                    return _provideSignatureHelpJs.provideSignatureHelp(model, position, triggerContext, token);
                                }), activeSignatureHelp);
                                _ctx.prev = 13;
                                _ctx.next = 16;
                                return this.state.request;
                            case 16:
                                result = _ctx.sent;
                                if (!(triggerId !== this.triggerId)) {
                                    _ctx.next = 20;
                                    break;
                                }
                                result === null || result === void 0 || result.dispose();
                                return _ctx.abrupt("return", false);
                            case 20:
                                if (!(!result || !result.value.signatures || result.value.signatures.length === 0)) {
                                    _ctx.next = 27;
                                    break;
                                }
                                result === null || result === void 0 || result.dispose();
                                this._lastSignatureHelpResult.clear();
                                this.cancel();
                                return _ctx.abrupt("return", false);
                            case 27:
                                this.state = new ParameterHintState.Active(result.value);
                                this._lastSignatureHelpResult.value = result;
                                this._onChangedHints.fire(this.state.hints);
                                return _ctx.abrupt("return", true);
                            case 31:
                                _ctx.next = 38;
                                break;
                            case 33:
                                _ctx.prev = 33;
                                _ctx.t0 = _ctx["catch"](13);
                                if (triggerId === this.triggerId) this.state = ParameterHintState.Default;
                                _errorsJs.onUnexpectedError(_ctx.t0);
                                return _ctx.abrupt("return", false);
                            case 38:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this, [
                        [
                            13,
                            33
                        ]
                    ]);
                }));
            }
        },
        {
            key: "getLastActiveHints",
            value: function getLastActiveHints() {
                switch(this.state.type){
                    case 1 /* Active */ :
                        return this.state.hints;
                    case 2 /* Pending */ :
                        return this.state.previouslyActiveHints;
                    default:
                        return undefined;
                }
            }
        },
        {
            key: "isTriggered",
            get: function get() {
                return this.state.type === 1 /* Active */  || this.state.type === 2 /* Pending */  || this.throttledDelayer.isTriggered();
            }
        },
        {
            key: "onModelChanged",
            value: function onModelChanged() {
                this.cancel();
                // Update trigger characters
                this.triggerChars = new _characterClassifierJs.CharacterSet();
                this.retriggerChars = new _characterClassifierJs.CharacterSet();
                var model = this.editor.getModel();
                if (!model) return;
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = _modesJs.SignatureHelpProviderRegistry.ordered(model)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var support = _step.value;
                        var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                        try {
                            for(var _iterator1 = (support.signatureHelpTriggerCharacters || [])[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                                var ch = _step1.value;
                                this.triggerChars.add(ch.charCodeAt(0));
                                // All trigger characters are also considered retrigger characters
                                this.retriggerChars.add(ch.charCodeAt(0));
                            }
                        } catch (err) {
                            _didIteratorError1 = true;
                            _iteratorError1 = err;
                        } finally{
                            try {
                                if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                                    _iterator1.return();
                                }
                            } finally{
                                if (_didIteratorError1) {
                                    throw _iteratorError1;
                                }
                            }
                        }
                        var _iteratorNormalCompletion2 = true, _didIteratorError2 = false, _iteratorError2 = undefined;
                        try {
                            for(var _iterator2 = (support.signatureHelpRetriggerCharacters || [])[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true){
                                var ch1 = _step2.value;
                                this.retriggerChars.add(ch1.charCodeAt(0));
                            }
                        } catch (err) {
                            _didIteratorError2 = true;
                            _iteratorError2 = err;
                        } finally{
                            try {
                                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                                    _iterator2.return();
                                }
                            } finally{
                                if (_didIteratorError2) {
                                    throw _iteratorError2;
                                }
                            }
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        },
        {
            key: "onDidType",
            value: function onDidType(text) {
                if (!this.triggerOnType) return;
                var lastCharIndex = text.length - 1;
                var triggerCharCode = text.charCodeAt(lastCharIndex);
                if (this.triggerChars.has(triggerCharCode) || this.isTriggered && this.retriggerChars.has(triggerCharCode)) this.trigger({
                    triggerKind: _modesJs.SignatureHelpTriggerKind.TriggerCharacter,
                    triggerCharacter: text.charAt(lastCharIndex)
                });
            }
        },
        {
            key: "onCursorChange",
            value: function onCursorChange(e) {
                if (e.source === 'mouse') this.cancel();
                else if (this.isTriggered) this.trigger({
                    triggerKind: _modesJs.SignatureHelpTriggerKind.ContentChange
                });
            }
        },
        {
            key: "onModelContentChange",
            value: function onModelContentChange() {
                if (this.isTriggered) this.trigger({
                    triggerKind: _modesJs.SignatureHelpTriggerKind.ContentChange
                });
            }
        },
        {
            key: "onEditorConfigurationChange",
            value: function onEditorConfigurationChange() {
                this.triggerOnType = this.editor.getOption(75 /* parameterHints */ ).enabled;
                if (!this.triggerOnType) this.cancel();
            }
        },
        {
            key: "dispose",
            value: function dispose() {
                this.cancel(true);
                _helpers.get(_helpers.getPrototypeOf(ParameterHintsModel.prototype), "dispose", this).call(this);
            }
        }
    ]);
    return ParameterHintsModel;
}(_lifecycleJs.Disposable);
ParameterHintsModel.DEFAULT_DELAY = 120; // ms
function mergeTriggerContexts(previous, current) {
    switch(current.triggerKind){
        case _modesJs.SignatureHelpTriggerKind.Invoke:
            // Invoke overrides previous triggers.
            return current;
        case _modesJs.SignatureHelpTriggerKind.ContentChange:
            // Ignore content changes triggers
            return previous;
        case _modesJs.SignatureHelpTriggerKind.TriggerCharacter:
        default:
            return current;
    }
}

},{"@swc/helpers":"erO4s","regenerator-runtime":"12Ae8","../../../base/common/async.js":"kMhSh","../../../base/common/errors.js":"afm4i","../../../base/common/event.js":"9IBcK","../../../base/common/lifecycle.js":"bcbPy","../../common/core/characterClassifier.js":"ewW0b","../../common/modes.js":"bRbY1","./provideSignatureHelp.js":"4Rn0A","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"72prI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rename", function() {
    return rename;
});
parcelHelpers.export(exports, "RenameAction", function() {
    return RenameAction;
});
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
var _ariaJs = require("../../../base/browser/ui/aria/aria.js");
var _asyncJs = require("../../../base/common/async.js");
var _cancellationJs = require("../../../base/common/cancellation.js");
var _errorsJs = require("../../../base/common/errors.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _typesJs = require("../../../base/common/types.js");
var _uriJs = require("../../../base/common/uri.js");
var _editorStateJs = require("../../browser/core/editorState.js");
var _editorExtensionsJs = require("../../browser/editorExtensions.js");
var _bulkEditServiceJs = require("../../browser/services/bulkEditService.js");
var _codeEditorServiceJs = require("../../browser/services/codeEditorService.js");
var _positionJs = require("../../common/core/position.js");
var _rangeJs = require("../../common/core/range.js");
var _editorContextKeysJs = require("../../common/editorContextKeys.js");
var _modesJs = require("../../common/modes.js");
var _textResourceConfigurationServiceJs = require("../../common/services/textResourceConfigurationService.js");
var _messageControllerJs = require("../message/messageController.js");
var _nlsJs = require("../../../nls.js");
var _configurationRegistryJs = require("../../../platform/configuration/common/configurationRegistry.js");
var _contextkeyJs = require("../../../platform/contextkey/common/contextkey.js");
var _instantiationJs = require("../../../platform/instantiation/common/instantiation.js");
var _logJs = require("../../../platform/log/common/log.js");
var _notificationJs = require("../../../platform/notification/common/notification.js");
var _progressJs = require("../../../platform/progress/common/progress.js");
var _platformJs = require("../../../platform/registry/common/platform.js");
var _renameInputFieldJs = require("./renameInputField.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var RenameSkeleton = /*#__PURE__*/ function() {
    "use strict";
    function RenameSkeleton(model, position) {
        _helpers.classCallCheck(this, RenameSkeleton);
        this.model = model;
        this.position = position;
        this._providerRenameIdx = 0;
        this._providers = _modesJs.RenameProviderRegistry.ordered(model);
    }
    _helpers.createClass(RenameSkeleton, [
        {
            key: "hasProvider",
            value: function hasProvider() {
                return this._providers.length > 0;
            }
        },
        {
            key: "resolveRenameLocation",
            value: function resolveRenameLocation(token) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var rejects, provider, res, word;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                rejects = [];
                                this._providerRenameIdx = 0;
                            case 2:
                                if (!(this._providerRenameIdx < this._providers.length)) {
                                    _ctx.next = 18;
                                    break;
                                }
                                provider = this._providers[this._providerRenameIdx];
                                if (provider.resolveRenameLocation) {
                                    _ctx.next = 6;
                                    break;
                                }
                                return _ctx.abrupt("break", 18);
                            case 6:
                                _ctx.next = 8;
                                return provider.resolveRenameLocation(this.model, this.position, token);
                            case 8:
                                res = _ctx.sent;
                                if (res) {
                                    _ctx.next = 11;
                                    break;
                                }
                                return _ctx.abrupt("continue", 15);
                            case 11:
                                if (!res.rejectReason) {
                                    _ctx.next = 14;
                                    break;
                                }
                                rejects.push(res.rejectReason);
                                return _ctx.abrupt("continue", 15);
                            case 14:
                                return _ctx.abrupt("return", res);
                            case 15:
                                this._providerRenameIdx++;
                                _ctx.next = 2;
                                break;
                            case 18:
                                word = this.model.getWordAtPosition(this.position);
                                if (word) {
                                    _ctx.next = 21;
                                    break;
                                }
                                return _ctx.abrupt("return", {
                                    range: _rangeJs.Range.fromPositions(this.position),
                                    text: '',
                                    rejectReason: rejects.length > 0 ? rejects.join('\n') : undefined
                                });
                            case 21:
                                return _ctx.abrupt("return", {
                                    range: new _rangeJs.Range(this.position.lineNumber, word.startColumn, this.position.lineNumber, word.endColumn),
                                    text: word.word,
                                    rejectReason: rejects.length > 0 ? rejects.join('\n') : undefined
                                });
                            case 22:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this);
                }));
            }
        },
        {
            key: "provideRenameEdits",
            value: function provideRenameEdits(newName, token) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                return _ctx.abrupt("return", this._provideRenameEdits(newName, this._providerRenameIdx, [], token));
                            case 1:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this);
                }));
            }
        },
        {
            key: "_provideRenameEdits",
            value: function _provideRenameEdits(newName, i, rejects, token) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var provider, result;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                provider = this._providers[i];
                                if (provider) {
                                    _ctx.next = 3;
                                    break;
                                }
                                return _ctx.abrupt("return", {
                                    edits: [],
                                    rejectReason: rejects.join('\n')
                                });
                            case 3:
                                _ctx.next = 5;
                                return provider.provideRenameEdits(this.model, this.position, newName, token);
                            case 5:
                                result = _ctx.sent;
                                if (result) {
                                    _ctx.next = 10;
                                    break;
                                }
                                return _ctx.abrupt("return", this._provideRenameEdits(newName, i + 1, rejects.concat(_nlsJs.localize('no result', "No result.")), token));
                            case 10:
                                if (!result.rejectReason) {
                                    _ctx.next = 12;
                                    break;
                                }
                                return _ctx.abrupt("return", this._provideRenameEdits(newName, i + 1, rejects.concat(result.rejectReason), token));
                            case 12:
                                return _ctx.abrupt("return", result);
                            case 13:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this);
                }));
            }
        }
    ]);
    return RenameSkeleton;
}();
function rename(model, position, newName) {
    return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
        var skeleton, loc;
        return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
            while(1)switch(_ctx.prev = _ctx.next){
                case 0:
                    skeleton = new RenameSkeleton(model, position);
                    _ctx.next = 3;
                    return skeleton.resolveRenameLocation(_cancellationJs.CancellationToken.None);
                case 3:
                    loc = _ctx.sent;
                    if (!(loc === null || loc === void 0 ? void 0 : loc.rejectReason)) {
                        _ctx.next = 6;
                        break;
                    }
                    return _ctx.abrupt("return", {
                        edits: [],
                        rejectReason: loc.rejectReason
                    });
                case 6:
                    return _ctx.abrupt("return", skeleton.provideRenameEdits(newName, _cancellationJs.CancellationToken.None));
                case 7:
                case "end":
                    return _ctx.stop();
            }
        }, _callee);
    }));
}
// ---  register actions and commands
var RenameController = /*#__PURE__*/ function() {
    "use strict";
    function RenameController1(editor, _instaService, _notificationService, _bulkEditService, _progressService, _logService, _configService) {
        var _this = this;
        _helpers.classCallCheck(this, RenameController1);
        this.editor = editor;
        this._instaService = _instaService;
        this._notificationService = _notificationService;
        this._bulkEditService = _bulkEditService;
        this._progressService = _progressService;
        this._logService = _logService;
        this._configService = _configService;
        this._dispoableStore = new _lifecycleJs.DisposableStore();
        this._cts = new _cancellationJs.CancellationTokenSource();
        this._renameInputField = this._dispoableStore.add(new _asyncJs.IdleValue(function() {
            return _this._dispoableStore.add(_this._instaService.createInstance(_renameInputFieldJs.RenameInputField, _this.editor, [
                'acceptRenameInput',
                'acceptRenameInputWithPreview'
            ]));
        }));
    }
    _helpers.createClass(RenameController1, [
        {
            key: "dispose",
            value: function dispose() {
                this._dispoableStore.dispose();
                this._cts.dispose(true);
            }
        },
        {
            key: "run",
            value: function run() {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee1() {
                    var _this1, position, skeleton, loc, resolveLocationOperation, selection, selectionStart, selectionEnd, supportPreview, inputFieldResult, renameOperation;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx1) {
                        while(1)switch(_ctx1.prev = _ctx1.next){
                            case 0:
                                _this1 = this;
                                this._cts.dispose(true);
                                if (this.editor.hasModel()) {
                                    _ctx1.next = 4;
                                    break;
                                }
                                return _ctx1.abrupt("return", undefined);
                            case 4:
                                position = this.editor.getPosition();
                                skeleton = new RenameSkeleton(this.editor.getModel(), position);
                                if (skeleton.hasProvider()) {
                                    _ctx1.next = 8;
                                    break;
                                }
                                return _ctx1.abrupt("return", undefined);
                            case 8:
                                this._cts = new _editorStateJs.EditorStateCancellationTokenSource(this.editor, 5 /* Value */ );
                                ;
                                _ctx1.prev = 10;
                                resolveLocationOperation = skeleton.resolveRenameLocation(this._cts.token);
                                this._progressService.showWhile(resolveLocationOperation, 250);
                                _ctx1.next = 15;
                                return resolveLocationOperation;
                            case 15:
                                loc = _ctx1.sent;
                                _ctx1.next = 22;
                                break;
                            case 18:
                                _ctx1.prev = 18;
                                _ctx1.t0 = _ctx1["catch"](10);
                                _messageControllerJs.MessageController.get(this.editor).showMessage(_ctx1.t0 || _nlsJs.localize('resolveRenameLocationFailed', "An unknown error occurred while resolving rename location"), position);
                                return _ctx1.abrupt("return", undefined);
                            case 22:
                                if (loc) {
                                    _ctx1.next = 24;
                                    break;
                                }
                                return _ctx1.abrupt("return", undefined);
                            case 24:
                                if (!loc.rejectReason) {
                                    _ctx1.next = 27;
                                    break;
                                }
                                _messageControllerJs.MessageController.get(this.editor).showMessage(loc.rejectReason, position);
                                return _ctx1.abrupt("return", undefined);
                            case 27:
                                if (!this._cts.token.isCancellationRequested) {
                                    _ctx1.next = 29;
                                    break;
                                }
                                return _ctx1.abrupt("return", undefined);
                            case 29:
                                this._cts.dispose();
                                this._cts = new _editorStateJs.EditorStateCancellationTokenSource(this.editor, 5 /* Value */ , loc.range);
                                selection = this.editor.getSelection();
                                selectionStart = 0;
                                selectionEnd = loc.text.length;
                                if (!_rangeJs.Range.isEmpty(selection) && !_rangeJs.Range.spansMultipleLines(selection) && _rangeJs.Range.containsRange(loc.range, selection)) {
                                    selectionStart = Math.max(0, selection.startColumn - loc.range.startColumn);
                                    selectionEnd = Math.min(loc.range.endColumn, selection.endColumn) - loc.range.startColumn;
                                }
                                supportPreview = this._bulkEditService.hasPreviewHandler() && this._configService.getValue(this.editor.getModel().uri, 'editor.rename.enablePreview');
                                _ctx1.next = 38;
                                return this._renameInputField.value.getInput(loc.range, loc.text, selectionStart, selectionEnd, supportPreview, this._cts.token);
                            case 38:
                                inputFieldResult = _ctx1.sent;
                                if (!(typeof inputFieldResult === 'boolean')) {
                                    _ctx1.next = 42;
                                    break;
                                }
                                if (inputFieldResult) this.editor.focus();
                                return _ctx1.abrupt("return", undefined);
                            case 42:
                                this.editor.focus();
                                renameOperation = _asyncJs.raceCancellation(skeleton.provideRenameEdits(inputFieldResult.newName, this._cts.token), this._cts.token).then(function(renameResult) {
                                    return __awaiter(_this1, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                                        var _this;
                                        return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                                            while(1)switch(_ctx.prev = _ctx.next){
                                                case 0:
                                                    _this = this;
                                                    if (!(!renameResult || !this.editor.hasModel())) {
                                                        _ctx.next = 3;
                                                        break;
                                                    }
                                                    return _ctx.abrupt("return");
                                                case 3:
                                                    if (!renameResult.rejectReason) {
                                                        _ctx.next = 6;
                                                        break;
                                                    }
                                                    this._notificationService.info(renameResult.rejectReason);
                                                    return _ctx.abrupt("return");
                                                case 6:
                                                    // collapse selection to active end
                                                    this.editor.setSelection(_rangeJs.Range.fromPositions(this.editor.getSelection().getPosition()));
                                                    this._bulkEditService.apply(_bulkEditServiceJs.ResourceEdit.convert(renameResult), {
                                                        editor: this.editor,
                                                        showPreview: inputFieldResult.wantsPreview,
                                                        label: _nlsJs.localize('label', "Renaming '{0}'", loc === null || loc === void 0 ? void 0 : loc.text),
                                                        quotableLabel: _nlsJs.localize('quotableLabel', "Renaming {0}", loc === null || loc === void 0 ? void 0 : loc.text)
                                                    }).then(function(result) {
                                                        if (result.ariaSummary) _ariaJs.alert(_nlsJs.localize('aria', "Successfully renamed '{0}' to '{1}'. Summary: {2}", loc.text, inputFieldResult.newName, result.ariaSummary));
                                                    }).catch(function(err) {
                                                        _this._notificationService.error(_nlsJs.localize('rename.failedApply', "Rename failed to apply edits"));
                                                        _this._logService.error(err);
                                                    });
                                                case 8:
                                                case "end":
                                                    return _ctx.stop();
                                            }
                                        }, _callee, this);
                                    }));
                                }, function(err) {
                                    _this1._notificationService.error(_nlsJs.localize('rename.failed', "Rename failed to compute edits"));
                                    _this1._logService.error(err);
                                });
                                this._progressService.showWhile(renameOperation, 250);
                                return _ctx1.abrupt("return", renameOperation);
                            case 46:
                            case "end":
                                return _ctx1.stop();
                        }
                    }, _callee1, this, [
                        [
                            10,
                            18
                        ]
                    ]);
                }));
            }
        },
        {
            key: "acceptRenameInput",
            value: function acceptRenameInput(wantsPreview) {
                this._renameInputField.value.acceptInput(wantsPreview);
            }
        },
        {
            key: "cancelRenameInput",
            value: function cancelRenameInput() {
                this._renameInputField.value.cancelInput(true);
            }
        }
    ], [
        {
            key: "get",
            value: function get(editor) {
                return editor.getContribution(RenameController1.ID);
            }
        }
    ]);
    return RenameController1;
}();
RenameController.ID = 'editor.contrib.renameController';
RenameController = __decorate([
    __param(1, _instantiationJs.IInstantiationService),
    __param(2, _notificationJs.INotificationService),
    __param(3, _bulkEditServiceJs.IBulkEditService),
    __param(4, _progressJs.IEditorProgressService),
    __param(5, _logJs.ILogService),
    __param(6, _textResourceConfigurationServiceJs.ITextResourceConfigurationService)
], RenameController);
var RenameAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(RenameAction, EditorAction);
    var _super = _helpers.createSuper(RenameAction);
    function RenameAction() {
        _helpers.classCallCheck(this, RenameAction);
        return _super.call(this, {
            id: 'editor.action.rename',
            label: _nlsJs.localize('rename.label', "Rename Symbol"),
            alias: 'Rename Symbol',
            precondition: _contextkeyJs.ContextKeyExpr.and(_editorContextKeysJs.EditorContextKeys.writable, _editorContextKeysJs.EditorContextKeys.hasRenameProvider),
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: 60 /* F2 */ ,
                weight: 100 /* EditorContrib */ 
            },
            contextMenuOpts: {
                group: '1_modification',
                order: 1.1
            }
        });
    }
    _helpers.createClass(RenameAction, [
        {
            key: "runCommand",
            value: function runCommand(accessor1, args) {
                var _this = this;
                var editorService = accessor1.get(_codeEditorServiceJs.ICodeEditorService);
                var ref = _helpers.slicedToArray(Array.isArray(args) && args || [
                    undefined,
                    undefined
                ], 2), uri = ref[0], pos = ref[1];
                if (_uriJs.URI.isUri(uri) && _positionJs.Position.isIPosition(pos)) return editorService.openCodeEditor({
                    resource: uri
                }, editorService.getActiveCodeEditor()).then(function(editor) {
                    var _this2 = _this;
                    if (!editor) return;
                    editor.setPosition(pos);
                    editor.invokeWithinContext(function(accessor) {
                        _this2.reportTelemetry(accessor, editor);
                        return _this2.run(accessor, editor);
                    });
                }, _errorsJs.onUnexpectedError);
                return _helpers.get(_helpers.getPrototypeOf(RenameAction.prototype), "runCommand", this).call(this, accessor1, args);
            }
        },
        {
            key: "run",
            value: function run(accessor, editor) {
                var controller = RenameController.get(editor);
                if (controller) return controller.run();
                return Promise.resolve();
            }
        }
    ]);
    return RenameAction;
}(_editorExtensionsJs.EditorAction);
_editorExtensionsJs.registerEditorContribution(RenameController.ID, RenameController);
_editorExtensionsJs.registerEditorAction(RenameAction);
var RenameCommand = _editorExtensionsJs.EditorCommand.bindToContribution(RenameController.get);
_editorExtensionsJs.registerEditorCommand(new RenameCommand({
    id: 'acceptRenameInput',
    precondition: _renameInputFieldJs.CONTEXT_RENAME_INPUT_VISIBLE,
    handler: function(x) {
        return x.acceptRenameInput(false);
    },
    kbOpts: {
        weight: 199,
        kbExpr: _editorContextKeysJs.EditorContextKeys.focus,
        primary: 3 /* Enter */ 
    }
}));
_editorExtensionsJs.registerEditorCommand(new RenameCommand({
    id: 'acceptRenameInputWithPreview',
    precondition: _contextkeyJs.ContextKeyExpr.and(_renameInputFieldJs.CONTEXT_RENAME_INPUT_VISIBLE, _contextkeyJs.ContextKeyExpr.has('config.editor.rename.enablePreview')),
    handler: function(x) {
        return x.acceptRenameInput(true);
    },
    kbOpts: {
        weight: 199,
        kbExpr: _editorContextKeysJs.EditorContextKeys.focus,
        primary: 1027 /* Enter */ 
    }
}));
_editorExtensionsJs.registerEditorCommand(new RenameCommand({
    id: 'cancelRenameInput',
    precondition: _renameInputFieldJs.CONTEXT_RENAME_INPUT_VISIBLE,
    handler: function(x) {
        return x.cancelRenameInput();
    },
    kbOpts: {
        weight: 199,
        kbExpr: _editorContextKeysJs.EditorContextKeys.focus,
        primary: 9 /* Escape */ ,
        secondary: [
            1033 /* Escape */ 
        ]
    }
}));
// ---- api bridge command
_editorExtensionsJs.registerModelAndPositionCommand('_executeDocumentRenameProvider', function(model, position) {
    for(var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){
        args[_key - 2] = arguments[_key];
    }
    var _args = _helpers.slicedToArray(args, 1), newName = _args[0];
    _typesJs.assertType(typeof newName === 'string');
    return rename(model, position, newName);
});
_editorExtensionsJs.registerModelAndPositionCommand('_executePrepareRename', function(model, position) {
    return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
        var skeleton, loc;
        return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
            while(1)switch(_ctx.prev = _ctx.next){
                case 0:
                    skeleton = new RenameSkeleton(model, position);
                    _ctx.next = 3;
                    return skeleton.resolveRenameLocation(_cancellationJs.CancellationToken.None);
                case 3:
                    loc = _ctx.sent;
                    if (!(loc === null || loc === void 0 ? void 0 : loc.rejectReason)) {
                        _ctx.next = 6;
                        break;
                    }
                    throw new Error(loc.rejectReason);
                case 6:
                    return _ctx.abrupt("return", loc);
                case 7:
                case "end":
                    return _ctx.stop();
            }
        }, _callee);
    }));
});
//todo@jrieken use editor options world
_platformJs.Registry.as(_configurationRegistryJs.Extensions.Configuration).registerConfiguration({
    id: 'editor',
    properties: {
        'editor.rename.enablePreview': {
            scope: 5 /* LANGUAGE_OVERRIDABLE */ ,
            description: _nlsJs.localize('enablePreview', "Enable/disable the ability to preview changes before renaming"),
            default: true,
            type: 'boolean'
        }
    }
});

},{"@swc/helpers":"erO4s","regenerator-runtime":"12Ae8","../../../base/browser/ui/aria/aria.js":"8SLUe","../../../base/common/async.js":"kMhSh","../../../base/common/cancellation.js":"1C4LY","../../../base/common/errors.js":"afm4i","../../../base/common/lifecycle.js":"bcbPy","../../../base/common/types.js":"lF7Cj","../../../base/common/uri.js":"4ZDLf","../../browser/core/editorState.js":"5J2rl","../../browser/editorExtensions.js":"dFnlo","../../browser/services/bulkEditService.js":"cjDLy","../../browser/services/codeEditorService.js":"izkTN","../../common/core/position.js":"6xP0w","../../common/core/range.js":"VbyL8","../../common/editorContextKeys.js":"2t2PW","../../common/modes.js":"bRbY1","../../common/services/textResourceConfigurationService.js":"4HS0r","../message/messageController.js":"2DdU3","../../../nls.js":"9djYb","../../../platform/configuration/common/configurationRegistry.js":"91Egq","../../../platform/contextkey/common/contextkey.js":"5cjav","../../../platform/instantiation/common/instantiation.js":"9ABZB","../../../platform/log/common/log.js":"ef3uL","../../../platform/notification/common/notification.js":"baqho","../../../platform/progress/common/progress.js":"dJdAd","../../../platform/registry/common/platform.js":"i9rTp","./renameInputField.js":"9gQS6","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"9gQS6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CONTEXT_RENAME_INPUT_VISIBLE", function() {
    return CONTEXT_RENAME_INPUT_VISIBLE;
});
parcelHelpers.export(exports, "RenameInputField", function() {
    return RenameInputField;
});
var _helpers = require("@swc/helpers");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _renameInputFieldCss = require("./renameInputField.css");
var _positionJs = require("../../common/core/position.js");
var _nlsJs = require("../../../nls.js");
var _contextkeyJs = require("../../../platform/contextkey/common/contextkey.js");
var _keybindingJs = require("../../../platform/keybinding/common/keybinding.js");
var _colorRegistryJs = require("../../../platform/theme/common/colorRegistry.js");
var _themeServiceJs = require("../../../platform/theme/common/themeService.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var CONTEXT_RENAME_INPUT_VISIBLE = new _contextkeyJs.RawContextKey('renameInputVisible', false, _nlsJs.localize('renameInputVisible', "Whether the rename input widget is visible"));
var RenameInputField = /*#__PURE__*/ function() {
    "use strict";
    function RenameInputField1(_editor, _acceptKeybindings, _themeService, _keybindingService, contextKeyService) {
        var _this = this;
        _helpers.classCallCheck(this, RenameInputField1);
        this._editor = _editor;
        this._acceptKeybindings = _acceptKeybindings;
        this._themeService = _themeService;
        this._keybindingService = _keybindingService;
        this._disposables = new _lifecycleJs.DisposableStore();
        this.allowEditorOverflow = true;
        this._visibleContextKey = CONTEXT_RENAME_INPUT_VISIBLE.bindTo(contextKeyService);
        this._editor.addContentWidget(this);
        this._disposables.add(this._editor.onDidChangeConfiguration(function(e) {
            if (e.hasChanged(43 /* fontInfo */ )) _this._updateFont();
        }));
        this._disposables.add(_themeService.onDidColorThemeChange(this._updateStyles, this));
    }
    _helpers.createClass(RenameInputField1, [
        {
            key: "dispose",
            value: function dispose() {
                this._disposables.dispose();
                this._editor.removeContentWidget(this);
            }
        },
        {
            key: "getId",
            value: function getId() {
                return '__renameInputWidget';
            }
        },
        {
            key: "getDomNode",
            value: function getDomNode() {
                if (!this._domNode) {
                    var _this = this;
                    this._domNode = document.createElement('div');
                    this._domNode.className = 'monaco-editor rename-box';
                    this._input = document.createElement('input');
                    this._input.className = 'rename-input';
                    this._input.type = 'text';
                    this._input.setAttribute('aria-label', _nlsJs.localize('renameAriaLabel', "Rename input. Type new name and press Enter to commit."));
                    this._domNode.appendChild(this._input);
                    this._label = document.createElement('div');
                    this._label.className = 'rename-label';
                    this._domNode.appendChild(this._label);
                    var updateLabel = function() {
                        var _a, _b;
                        var __acceptKeybindings = _helpers.slicedToArray(_this._acceptKeybindings, 2), accept = __acceptKeybindings[0], preview = __acceptKeybindings[1];
                        _this._keybindingService.lookupKeybinding(accept);
                        _this._label.innerText = _nlsJs.localize({
                            key: 'label',
                            comment: [
                                'placeholders are keybindings, e.g "F2 to Rename, Shift+F2 to Preview"'
                            ]
                        }, "{0} to Rename, {1} to Preview", (_a = _this._keybindingService.lookupKeybinding(accept)) === null || _a === void 0 ? void 0 : _a.getLabel(), (_b = _this._keybindingService.lookupKeybinding(preview)) === null || _b === void 0 ? void 0 : _b.getLabel());
                    };
                    updateLabel();
                    this._disposables.add(this._keybindingService.onDidUpdateKeybindings(updateLabel));
                    this._updateFont();
                    this._updateStyles(this._themeService.getColorTheme());
                }
                return this._domNode;
            }
        },
        {
            key: "_updateStyles",
            value: function _updateStyles(theme) {
                var _a, _b, _c, _d;
                if (!this._input || !this._domNode) return;
                var widgetShadowColor = theme.getColor(_colorRegistryJs.widgetShadow);
                this._domNode.style.backgroundColor = String((_a = theme.getColor(_colorRegistryJs.editorWidgetBackground)) !== null && _a !== void 0 ? _a : '');
                this._domNode.style.boxShadow = widgetShadowColor ? " 0 0 8px 2px ".concat(widgetShadowColor) : '';
                this._domNode.style.color = String((_b = theme.getColor(_colorRegistryJs.inputForeground)) !== null && _b !== void 0 ? _b : '');
                this._input.style.backgroundColor = String((_c = theme.getColor(_colorRegistryJs.inputBackground)) !== null && _c !== void 0 ? _c : '');
                // this._input.style.color = String(theme.getColor(inputForeground) ?? '');
                var border = theme.getColor(_colorRegistryJs.inputBorder);
                this._input.style.borderWidth = border ? '1px' : '0px';
                this._input.style.borderStyle = border ? 'solid' : 'none';
                this._input.style.borderColor = (_d = border === null || border === void 0 ? void 0 : border.toString()) !== null && _d !== void 0 ? _d : 'none';
            }
        },
        {
            key: "_updateFont",
            value: function _updateFont() {
                if (!this._input || !this._label) return;
                var fontInfo = this._editor.getOption(43 /* fontInfo */ );
                this._input.style.fontFamily = fontInfo.fontFamily;
                this._input.style.fontWeight = fontInfo.fontWeight;
                this._input.style.fontSize = "".concat(fontInfo.fontSize, "px");
                this._label.style.fontSize = "".concat(fontInfo.fontSize * 0.8, "px");
            }
        },
        {
            key: "getPosition",
            value: function getPosition() {
                if (!this._visible) return null;
                return {
                    position: this._position,
                    preference: [
                        2 /* BELOW */ ,
                        1 /* ABOVE */ 
                    ]
                };
            }
        },
        {
            key: "afterRender",
            value: function afterRender(position) {
                if (!position) // cancel rename when input widget isn't rendered anymore
                this.cancelInput(true);
            }
        },
        {
            key: "acceptInput",
            value: function acceptInput(wantsPreview) {
                if (this._currentAcceptInput) this._currentAcceptInput(wantsPreview);
            }
        },
        {
            key: "cancelInput",
            value: function cancelInput(focusEditor) {
                if (this._currentCancelInput) this._currentCancelInput(focusEditor);
            }
        },
        {
            key: "getInput",
            value: function getInput(where, value, selectionStart, selectionEnd, supportPreview, token) {
                var _this = this;
                this._domNode.classList.toggle('preview', supportPreview);
                this._position = new _positionJs.Position(where.startLineNumber, where.startColumn);
                this._input.value = value;
                this._input.setAttribute('selectionStart', selectionStart.toString());
                this._input.setAttribute('selectionEnd', selectionEnd.toString());
                this._input.size = Math.max((where.endColumn - where.startColumn) * 1.1, 20);
                var disposeOnDone = new _lifecycleJs.DisposableStore();
                return new Promise(function(resolve) {
                    var _this1 = _this;
                    _this._currentCancelInput = function(focusEditor) {
                        _this1._currentAcceptInput = undefined;
                        _this1._currentCancelInput = undefined;
                        resolve(focusEditor);
                        return true;
                    };
                    _this._currentAcceptInput = function(wantsPreview) {
                        if (_this1._input.value.trim().length === 0 || _this1._input.value === value) {
                            // empty or whitespace only or not changed
                            _this1.cancelInput(true);
                            return;
                        }
                        _this1._currentAcceptInput = undefined;
                        _this1._currentCancelInput = undefined;
                        resolve({
                            newName: _this1._input.value,
                            wantsPreview: supportPreview && wantsPreview
                        });
                    };
                    token.onCancellationRequested(function() {
                        return _this1.cancelInput(true);
                    });
                    disposeOnDone.add(_this._editor.onDidBlurEditorWidget(function() {
                        return _this1.cancelInput(false);
                    }));
                    _this._show();
                }).finally(function() {
                    disposeOnDone.dispose();
                    _this._hide();
                });
            }
        },
        {
            key: "_show",
            value: function _show() {
                var _this = this;
                this._editor.revealLineInCenterIfOutsideViewport(this._position.lineNumber, 0 /* Smooth */ );
                this._visible = true;
                this._visibleContextKey.set(true);
                this._editor.layoutContentWidget(this);
                setTimeout(function() {
                    _this._input.focus();
                    _this._input.setSelectionRange(parseInt(_this._input.getAttribute('selectionStart')), parseInt(_this._input.getAttribute('selectionEnd')));
                }, 100);
            }
        },
        {
            key: "_hide",
            value: function _hide() {
                this._visible = false;
                this._visibleContextKey.reset();
                this._editor.layoutContentWidget(this);
            }
        }
    ]);
    return RenameInputField1;
}();
RenameInputField = __decorate([
    __param(2, _themeServiceJs.IThemeService),
    __param(3, _keybindingJs.IKeybindingService),
    __param(4, _contextkeyJs.IContextKeyService)
], RenameInputField);

},{"@swc/helpers":"erO4s","../../../base/common/lifecycle.js":"bcbPy","./renameInputField.css":"gNMYQ","../../common/core/position.js":"6xP0w","../../../nls.js":"9djYb","../../../platform/contextkey/common/contextkey.js":"5cjav","../../../platform/keybinding/common/keybinding.js":"5rr15","../../../platform/theme/common/colorRegistry.js":"lKtxS","../../../platform/theme/common/themeService.js":"kE7QB","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"gNMYQ":[function() {},{}],"lTVcH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "provideSelectionRanges", function() {
    return provideSelectionRanges;
});
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
var _arraysJs = require("../../../base/common/arrays.js");
var _cancellationJs = require("../../../base/common/cancellation.js");
var _errorsJs = require("../../../base/common/errors.js");
var _editorExtensionsJs = require("../../browser/editorExtensions.js");
var _positionJs = require("../../common/core/position.js");
var _rangeJs = require("../../common/core/range.js");
var _selectionJs = require("../../common/core/selection.js");
var _editorContextKeysJs = require("../../common/editorContextKeys.js");
var _modesJs = require("../../common/modes.js");
var _bracketSelectionsJs = require("./bracketSelections.js");
var _wordSelectionsJs = require("./wordSelections.js");
var _nlsJs = require("../../../nls.js");
var _actionsJs = require("../../../platform/actions/common/actions.js");
var _commandsJs = require("../../../platform/commands/common/commands.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var SelectionRanges = /*#__PURE__*/ function() {
    "use strict";
    function SelectionRanges(index, ranges) {
        _helpers.classCallCheck(this, SelectionRanges);
        this.index = index;
        this.ranges = ranges;
    }
    _helpers.createClass(SelectionRanges, [
        {
            key: "mov",
            value: function mov(fwd) {
                var index = this.index + (fwd ? 1 : -1);
                if (index < 0 || index >= this.ranges.length) return this;
                var res = new SelectionRanges(index, this.ranges);
                if (res.ranges[index].equalsRange(this.ranges[this.index])) // next range equals this range, retry with next-next
                return res.mov(fwd);
                return res;
            }
        }
    ]);
    return SelectionRanges;
}();
var SmartSelectController = /*#__PURE__*/ function() {
    "use strict";
    function SmartSelectController(_editor) {
        _helpers.classCallCheck(this, SmartSelectController);
        this._editor = _editor;
        this._ignoreSelection = false;
    }
    _helpers.createClass(SmartSelectController, [
        {
            key: "dispose",
            value: function dispose() {
                var _a;
                (_a = this._selectionListener) === null || _a === void 0 || _a.dispose();
            }
        },
        {
            key: "run",
            value: function run(forward) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var _this, selections, model, newSelections;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                _this = this;
                                if (this._editor.hasModel()) {
                                    _ctx.next = 3;
                                    break;
                                }
                                return _ctx.abrupt("return");
                            case 3:
                                selections = this._editor.getSelections();
                                model = this._editor.getModel();
                                if (_modesJs.SelectionRangeRegistry.has(model)) {
                                    _ctx.next = 7;
                                    break;
                                }
                                return _ctx.abrupt("return");
                            case 7:
                                if (this._state) {
                                    _ctx.next = 10;
                                    break;
                                }
                                _ctx.next = 10;
                                return provideSelectionRanges(model, selections.map(function(s) {
                                    return s.getPosition();
                                }), this._editor.getOption(101 /* smartSelect */ ), _cancellationJs.CancellationToken.None).then(function(ranges1) {
                                    var _loop = function(i) {
                                        ranges1[i] = ranges1[i].filter(function(range) {
                                            // filter ranges inside the selection
                                            return range.containsPosition(selections[i].getStartPosition()) && range.containsPosition(selections[i].getEndPosition());
                                        });
                                        // prepend current selection
                                        ranges1[i].unshift(selections[i]);
                                    };
                                    var _this1 = _this;
                                    var _a1;
                                    if (!_arraysJs.isNonEmptyArray(ranges1) || ranges1.length !== selections.length) // invalid result
                                    return;
                                    if (!_this._editor.hasModel() || !_arraysJs.equals(_this._editor.getSelections(), selections, function(a, b) {
                                        return a.equalsSelection(b);
                                    })) // invalid editor state
                                    return;
                                    for(var i = 0; i < ranges1.length; i++)_loop(i);
                                    _this._state = ranges1.map(function(ranges) {
                                        return new SelectionRanges(0, ranges);
                                    });
                                    // listen to caret move and forget about state
                                    (_a1 = _this._selectionListener) === null || _a1 === void 0 || _a1.dispose();
                                    _this._selectionListener = _this._editor.onDidChangeCursorPosition(function() {
                                        var _a;
                                        if (!_this1._ignoreSelection) {
                                            (_a = _this1._selectionListener) === null || _a === void 0 || _a.dispose();
                                            _this1._state = undefined;
                                        }
                                    });
                                });
                            case 10:
                                if (this._state) {
                                    _ctx.next = 12;
                                    break;
                                }
                                return _ctx.abrupt("return");
                            case 12:
                                this._state = this._state.map(function(state) {
                                    return state.mov(forward);
                                });
                                newSelections = this._state.map(function(state) {
                                    return _selectionJs.Selection.fromPositions(state.ranges[state.index].getStartPosition(), state.ranges[state.index].getEndPosition());
                                });
                                this._ignoreSelection = true;
                                try {
                                    this._editor.setSelections(newSelections);
                                } finally{
                                    this._ignoreSelection = false;
                                }
                            case 16:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this);
                }));
            }
        }
    ], [
        {
            key: "get",
            value: function get(editor) {
                return editor.getContribution(SmartSelectController.ID);
            }
        }
    ]);
    return SmartSelectController;
}();
SmartSelectController.ID = 'editor.contrib.smartSelectController';
var AbstractSmartSelect = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(AbstractSmartSelect, EditorAction);
    var _super = _helpers.createSuper(AbstractSmartSelect);
    function AbstractSmartSelect(forward, opts) {
        _helpers.classCallCheck(this, AbstractSmartSelect);
        var _this;
        _this = _super.call(this, opts);
        _this._forward = forward;
        return _this;
    }
    _helpers.createClass(AbstractSmartSelect, [
        {
            key: "run",
            value: function run(_accessor, editor) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var controller;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                controller = SmartSelectController.get(editor);
                                if (!controller) {
                                    _ctx.next = 4;
                                    break;
                                }
                                _ctx.next = 4;
                                return controller.run(this._forward);
                            case 4:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this);
                }));
            }
        }
    ]);
    return AbstractSmartSelect;
}(_editorExtensionsJs.EditorAction);
var GrowSelectionAction = /*#__PURE__*/ function(AbstractSmartSelect) {
    "use strict";
    _helpers.inherits(GrowSelectionAction, AbstractSmartSelect);
    var _super = _helpers.createSuper(GrowSelectionAction);
    function GrowSelectionAction() {
        _helpers.classCallCheck(this, GrowSelectionAction);
        return _super.call(this, true, {
            id: 'editor.action.smartSelect.expand',
            label: _nlsJs.localize('smartSelect.expand', "Expand Selection"),
            alias: 'Expand Selection',
            precondition: undefined,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: 1553 /* RightArrow */ ,
                mac: {
                    primary: 3345 /* RightArrow */ ,
                    secondary: [
                        1297 /* RightArrow */ 
                    ]
                },
                weight: 100 /* EditorContrib */ 
            },
            menuOpts: {
                menuId: _actionsJs.MenuId.MenubarSelectionMenu,
                group: '1_basic',
                title: _nlsJs.localize({
                    key: 'miSmartSelectGrow',
                    comment: [
                        '&& denotes a mnemonic'
                    ]
                }, "&&Expand Selection"),
                order: 2
            }
        });
    }
    return GrowSelectionAction;
}(AbstractSmartSelect);
// renamed command id
_commandsJs.CommandsRegistry.registerCommandAlias('editor.action.smartSelect.grow', 'editor.action.smartSelect.expand');
var ShrinkSelectionAction = /*#__PURE__*/ function(AbstractSmartSelect) {
    "use strict";
    _helpers.inherits(ShrinkSelectionAction, AbstractSmartSelect);
    var _super = _helpers.createSuper(ShrinkSelectionAction);
    function ShrinkSelectionAction() {
        _helpers.classCallCheck(this, ShrinkSelectionAction);
        return _super.call(this, false, {
            id: 'editor.action.smartSelect.shrink',
            label: _nlsJs.localize('smartSelect.shrink', "Shrink Selection"),
            alias: 'Shrink Selection',
            precondition: undefined,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: 1551 /* LeftArrow */ ,
                mac: {
                    primary: 3343 /* LeftArrow */ ,
                    secondary: [
                        1295 /* LeftArrow */ 
                    ]
                },
                weight: 100 /* EditorContrib */ 
            },
            menuOpts: {
                menuId: _actionsJs.MenuId.MenubarSelectionMenu,
                group: '1_basic',
                title: _nlsJs.localize({
                    key: 'miSmartSelectShrink',
                    comment: [
                        '&& denotes a mnemonic'
                    ]
                }, "&&Shrink Selection"),
                order: 3
            }
        });
    }
    return ShrinkSelectionAction;
}(AbstractSmartSelect);
_editorExtensionsJs.registerEditorContribution(SmartSelectController.ID, SmartSelectController);
_editorExtensionsJs.registerEditorAction(GrowSelectionAction);
_editorExtensionsJs.registerEditorAction(ShrinkSelectionAction);
// word selection
_modesJs.SelectionRangeRegistry.register('*', new _wordSelectionsJs.WordSelectionRangeProvider());
function provideSelectionRanges(model, positions, options, token) {
    return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
        var providers, work, allRawRanges, _iteratorNormalCompletion1, _didIteratorError1, _iteratorError1, _iterator1, _step1, provider;
        return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
            while(1)switch(_ctx.prev = _ctx.next){
                case 0:
                    providers = _modesJs.SelectionRangeRegistry.all(model);
                    if (providers.length === 1) // add word selection and bracket selection when no provider exists
                    providers.unshift(new _bracketSelectionsJs.BracketSelectionRangeProvider());
                    work = [];
                    allRawRanges = [];
                    _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                    _ctx.prev = 5;
                    for(_iterator1 = providers[Symbol.iterator](); !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                        provider = _step1.value;
                        work.push(Promise.resolve(provider.provideSelectionRanges(model, positions, token)).then(function(allProviderRanges) {
                            if (_arraysJs.isNonEmptyArray(allProviderRanges) && allProviderRanges.length === positions.length) for(var i = 0; i < positions.length; i++){
                                if (!allRawRanges[i]) allRawRanges[i] = [];
                                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                                try {
                                    for(var _iterator = allProviderRanges[i][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                                        var oneProviderRanges = _step.value;
                                        if (_rangeJs.Range.isIRange(oneProviderRanges.range) && _rangeJs.Range.containsPosition(oneProviderRanges.range, positions[i])) allRawRanges[i].push(_rangeJs.Range.lift(oneProviderRanges.range));
                                    }
                                } catch (err) {
                                    _didIteratorError = true;
                                    _iteratorError = err;
                                } finally{
                                    try {
                                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                                            _iterator.return();
                                        }
                                    } finally{
                                        if (_didIteratorError) {
                                            throw _iteratorError;
                                        }
                                    }
                                }
                            }
                        }, _errorsJs.onUnexpectedExternalError));
                    }
                    _ctx.next = 13;
                    break;
                case 9:
                    _ctx.prev = 9;
                    _ctx.t0 = _ctx["catch"](5);
                    _didIteratorError1 = true;
                    _iteratorError1 = _ctx.t0;
                case 13:
                    _ctx.prev = 13;
                    _ctx.prev = 14;
                    if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                        _iterator1.return();
                    }
                case 16:
                    _ctx.prev = 16;
                    if (!_didIteratorError1) {
                        _ctx.next = 19;
                        break;
                    }
                    throw _iteratorError1;
                case 19:
                    return _ctx.finish(16);
                case 20:
                    return _ctx.finish(13);
                case 21:
                    _ctx.next = 23;
                    return Promise.all(work);
                case 23:
                    return _ctx.abrupt("return", allRawRanges.map(function(oneRawRanges) {
                        if (oneRawRanges.length === 0) return [];
                        // sort all by start/end position
                        oneRawRanges.sort(function(a, b) {
                            if (_positionJs.Position.isBefore(a.getStartPosition(), b.getStartPosition())) return 1;
                            else if (_positionJs.Position.isBefore(b.getStartPosition(), a.getStartPosition())) return -1;
                            else if (_positionJs.Position.isBefore(a.getEndPosition(), b.getEndPosition())) return -1;
                            else if (_positionJs.Position.isBefore(b.getEndPosition(), a.getEndPosition())) return 1;
                            else return 0;
                        });
                        // remove ranges that don't contain the former range or that are equal to the
                        // former range
                        var oneRanges = [];
                        var last;
                        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                        try {
                            for(var _iterator = oneRawRanges[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                                var range = _step.value;
                                if (!last || _rangeJs.Range.containsRange(range, last) && !_rangeJs.Range.equalsRange(range, last)) {
                                    oneRanges.push(range);
                                    last = range;
                                }
                            }
                        } catch (err) {
                            _didIteratorError = true;
                            _iteratorError = err;
                        } finally{
                            try {
                                if (!_iteratorNormalCompletion && _iterator.return != null) {
                                    _iterator.return();
                                }
                            } finally{
                                if (_didIteratorError) {
                                    throw _iteratorError;
                                }
                            }
                        }
                        if (!options.selectLeadingAndTrailingWhitespace) return oneRanges;
                        // add ranges that expand trivia at line starts and ends whenever a range
                        // wraps onto the a new line
                        var oneRangesWithTrivia = [
                            oneRanges[0]
                        ];
                        for(var i = 1; i < oneRanges.length; i++){
                            var prev = oneRanges[i - 1];
                            var cur = oneRanges[i];
                            if (cur.startLineNumber !== prev.startLineNumber || cur.endLineNumber !== prev.endLineNumber) {
                                // add line/block range without leading/failing whitespace
                                var rangeNoWhitespace = new _rangeJs.Range(prev.startLineNumber, model.getLineFirstNonWhitespaceColumn(prev.startLineNumber), prev.endLineNumber, model.getLineLastNonWhitespaceColumn(prev.endLineNumber));
                                if (rangeNoWhitespace.containsRange(prev) && !rangeNoWhitespace.equalsRange(prev) && cur.containsRange(rangeNoWhitespace) && !cur.equalsRange(rangeNoWhitespace)) oneRangesWithTrivia.push(rangeNoWhitespace);
                                // add line/block range
                                var rangeFull = new _rangeJs.Range(prev.startLineNumber, 1, prev.endLineNumber, model.getLineMaxColumn(prev.endLineNumber));
                                if (rangeFull.containsRange(prev) && !rangeFull.equalsRange(rangeNoWhitespace) && cur.containsRange(rangeFull) && !cur.equalsRange(rangeFull)) oneRangesWithTrivia.push(rangeFull);
                            }
                            oneRangesWithTrivia.push(cur);
                        }
                        return oneRangesWithTrivia;
                    }));
                case 24:
                case "end":
                    return _ctx.stop();
            }
        }, _callee, null, [
            [
                5,
                9,
                13,
                21
            ],
            [
                14,
                ,
                16,
                20
            ]
        ]);
    }));
}
_editorExtensionsJs.registerModelCommand('_executeSelectionRangeProvider', function(model) {
    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
        args[_key - 1] = arguments[_key];
    }
    var _args = _helpers.slicedToArray(args, 1), positions = _args[0];
    return provideSelectionRanges(model, positions, {
        selectLeadingAndTrailingWhitespace: true
    }, _cancellationJs.CancellationToken.None);
});

},{"@swc/helpers":"erO4s","regenerator-runtime":"12Ae8","../../../base/common/arrays.js":"bZs3E","../../../base/common/cancellation.js":"1C4LY","../../../base/common/errors.js":"afm4i","../../browser/editorExtensions.js":"dFnlo","../../common/core/position.js":"6xP0w","../../common/core/range.js":"VbyL8","../../common/core/selection.js":"hjmnH","../../common/editorContextKeys.js":"2t2PW","../../common/modes.js":"bRbY1","./bracketSelections.js":"2rlge","./wordSelections.js":"iLecM","../../../nls.js":"9djYb","../../../platform/actions/common/actions.js":"1qoxQ","../../../platform/commands/common/commands.js":"eeuTC","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"iLecM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "WordSelectionRangeProvider", function() {
    return WordSelectionRangeProvider;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _stringsJs = require("../../../base/common/strings.js");
var _rangeJs = require("../../common/core/range.js");
var WordSelectionRangeProvider = /*#__PURE__*/ function() {
    "use strict";
    function WordSelectionRangeProvider() {
        _helpers.classCallCheck(this, WordSelectionRangeProvider);
    }
    _helpers.createClass(WordSelectionRangeProvider, [
        {
            key: "provideSelectionRanges",
            value: function provideSelectionRanges(model, positions) {
                var result = [];
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = positions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var position = _step.value;
                        var bucket = [];
                        result.push(bucket);
                        this._addInWordRanges(bucket, model, position);
                        this._addWordRanges(bucket, model, position);
                        this._addWhitespaceLine(bucket, model, position);
                        bucket.push({
                            range: model.getFullModelRange()
                        });
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return result;
            }
        },
        {
            key: "_addInWordRanges",
            value: function _addInWordRanges(bucket, model, pos) {
                var obj = model.getWordAtPosition(pos);
                if (!obj) return;
                var word = obj.word, startColumn = obj.startColumn;
                var offset = pos.column - startColumn;
                var start = offset;
                var end = offset;
                var lastCh = 0;
                // LEFT anchor (start)
                for(; start >= 0; start--){
                    var ch = word.charCodeAt(start);
                    if (start !== offset && (ch === 95 /* Underline */  || ch === 45 /* Dash */ )) break;
                    else if (_stringsJs.isLowerAsciiLetter(ch) && _stringsJs.isUpperAsciiLetter(lastCh)) break;
                    lastCh = ch;
                }
                start += 1;
                // RIGHT anchor (end)
                for(; end < word.length; end++){
                    var ch1 = word.charCodeAt(end);
                    if (_stringsJs.isUpperAsciiLetter(ch1) && _stringsJs.isLowerAsciiLetter(lastCh)) break;
                    else if (ch1 === 95 /* Underline */  || ch1 === 45 /* Dash */ ) break;
                    lastCh = ch1;
                }
                if (start < end) bucket.push({
                    range: new _rangeJs.Range(pos.lineNumber, startColumn + start, pos.lineNumber, startColumn + end)
                });
            }
        },
        {
            key: "_addWordRanges",
            value: function _addWordRanges(bucket, model, pos) {
                var word = model.getWordAtPosition(pos);
                if (word) bucket.push({
                    range: new _rangeJs.Range(pos.lineNumber, word.startColumn, pos.lineNumber, word.endColumn)
                });
            }
        },
        {
            key: "_addWhitespaceLine",
            value: function _addWhitespaceLine(bucket, model, pos) {
                if (model.getLineLength(pos.lineNumber) > 0 && model.getLineFirstNonWhitespaceColumn(pos.lineNumber) === 0 && model.getLineLastNonWhitespaceColumn(pos.lineNumber) === 0) bucket.push({
                    range: new _rangeJs.Range(pos.lineNumber, 1, pos.lineNumber, model.getLineMaxColumn(pos.lineNumber))
                });
            }
        }
    ]);
    return WordSelectionRangeProvider;
}();

},{"@swc/helpers":"erO4s","../../../base/common/strings.js":"jsb6w","../../common/core/range.js":"VbyL8","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"kRx40":[function(require,module,exports) {
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _stopwatchJs = require("../../../base/common/stopwatch.js");
var _editorExtensionsJs = require("../../browser/editorExtensions.js");
var _nlsJs = require("../../../nls.js");
var ForceRetokenizeAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(ForceRetokenizeAction, EditorAction);
    var _super = _helpers.createSuper(ForceRetokenizeAction);
    function ForceRetokenizeAction() {
        _helpers.classCallCheck(this, ForceRetokenizeAction);
        return _super.call(this, {
            id: 'editor.action.forceRetokenize',
            label: _nlsJs.localize('forceRetokenize', "Developer: Force Retokenize"),
            alias: 'Developer: Force Retokenize',
            precondition: undefined
        });
    }
    _helpers.createClass(ForceRetokenizeAction, [
        {
            key: "run",
            value: function run(accessor, editor) {
                if (!editor.hasModel()) return;
                var model = editor.getModel();
                model.resetTokenization();
                var sw = new _stopwatchJs.StopWatch(true);
                model.forceTokenization(model.getLineCount());
                sw.stop();
                console.log("tokenization took ".concat(sw.elapsed()));
            }
        }
    ]);
    return ForceRetokenizeAction;
}(_editorExtensionsJs.EditorAction);
_editorExtensionsJs.registerEditorAction(ForceRetokenizeAction);

},{"@swc/helpers":"erO4s","../../../base/common/stopwatch.js":"5CaFX","../../browser/editorExtensions.js":"dFnlo","../../../nls.js":"9djYb"}],"brrTf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ToggleTabFocusModeAction", function() {
    return ToggleTabFocusModeAction;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _ariaJs = require("../../../base/browser/ui/aria/aria.js");
var _editorExtensionsJs = require("../../browser/editorExtensions.js");
var _commonEditorConfigJs = require("../../common/config/commonEditorConfig.js");
var _nlsJs = require("../../../nls.js");
var ToggleTabFocusModeAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(ToggleTabFocusModeAction, EditorAction);
    var _super = _helpers.createSuper(ToggleTabFocusModeAction);
    function ToggleTabFocusModeAction() {
        _helpers.classCallCheck(this, ToggleTabFocusModeAction);
        return _super.call(this, {
            id: ToggleTabFocusModeAction.ID,
            label: _nlsJs.localize({
                key: 'toggle.tabMovesFocus',
                comment: [
                    'Turn on/off use of tab key for moving focus around VS Code'
                ]
            }, "Toggle Tab Key Moves Focus"),
            alias: 'Toggle Tab Key Moves Focus',
            precondition: undefined,
            kbOpts: {
                kbExpr: null,
                primary: 2091 /* KeyM */ ,
                mac: {
                    primary: 1323 /* KeyM */ 
                },
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    _helpers.createClass(ToggleTabFocusModeAction, [
        {
            key: "run",
            value: function run(accessor, editor) {
                var oldValue = _commonEditorConfigJs.TabFocus.getTabFocusMode();
                var newValue = !oldValue;
                _commonEditorConfigJs.TabFocus.setTabFocusMode(newValue);
                if (newValue) _ariaJs.alert(_nlsJs.localize('toggle.tabMovesFocus.on', "Pressing Tab will now move focus to the next focusable element"));
                else _ariaJs.alert(_nlsJs.localize('toggle.tabMovesFocus.off', "Pressing Tab will now insert the tab character"));
            }
        }
    ]);
    return ToggleTabFocusModeAction;
}(_editorExtensionsJs.EditorAction);
ToggleTabFocusModeAction.ID = 'editor.action.toggleTabFocusMode';
_editorExtensionsJs.registerEditorAction(ToggleTabFocusModeAction);

},{"@swc/helpers":"erO4s","../../../base/browser/ui/aria/aria.js":"8SLUe","../../browser/editorExtensions.js":"dFnlo","../../common/config/commonEditorConfig.js":"8biw4","../../../nls.js":"9djYb","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"7lq6v":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UnusualLineTerminatorsDetector", function() {
    return UnusualLineTerminatorsDetector;
});
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _resourcesJs = require("../../../base/common/resources.js");
var _editorExtensionsJs = require("../../browser/editorExtensions.js");
var _codeEditorServiceJs = require("../../browser/services/codeEditorService.js");
var _nlsJs = require("../../../nls.js");
var _dialogsJs = require("../../../platform/dialogs/common/dialogs.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var ignoreUnusualLineTerminators = 'ignoreUnusualLineTerminators';
function writeIgnoreState(codeEditorService, model, state) {
    codeEditorService.setModelProperty(model.uri, ignoreUnusualLineTerminators, state);
}
function readIgnoreState(codeEditorService, model) {
    return codeEditorService.getModelProperty(model.uri, ignoreUnusualLineTerminators);
}
var UnusualLineTerminatorsDetector = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(UnusualLineTerminatorsDetector1, Disposable);
    var _super = _helpers.createSuper(UnusualLineTerminatorsDetector1);
    function UnusualLineTerminatorsDetector1(_editor, _dialogService, _codeEditorService) {
        _helpers.classCallCheck(this, UnusualLineTerminatorsDetector1);
        var _this;
        _this = _super.call(this);
        _this._editor = _editor;
        _this._dialogService = _dialogService;
        _this._codeEditorService = _codeEditorService;
        _this._config = _this._editor.getOption(113 /* unusualLineTerminators */ );
        _this._register(_this._editor.onDidChangeConfiguration(function(e) {
            if (e.hasChanged(113 /* unusualLineTerminators */ )) {
                _this._config = _this._editor.getOption(113 /* unusualLineTerminators */ );
                _this._checkForUnusualLineTerminators();
            }
        }));
        _this._register(_this._editor.onDidChangeModel(function() {
            _this._checkForUnusualLineTerminators();
        }));
        _this._register(_this._editor.onDidChangeModelContent(function(e) {
            if (e.isUndoing) // skip checking in case of undoing
            return;
            _this._checkForUnusualLineTerminators();
        }));
        return _this;
    }
    _helpers.createClass(UnusualLineTerminatorsDetector1, [
        {
            key: "_checkForUnusualLineTerminators",
            value: function _checkForUnusualLineTerminators() {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var model, ignoreState, result;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                if (!(this._config === 'off')) {
                                    _ctx.next = 2;
                                    break;
                                }
                                return _ctx.abrupt("return");
                            case 2:
                                if (this._editor.hasModel()) {
                                    _ctx.next = 4;
                                    break;
                                }
                                return _ctx.abrupt("return");
                            case 4:
                                model = this._editor.getModel();
                                if (model.mightContainUnusualLineTerminators()) {
                                    _ctx.next = 7;
                                    break;
                                }
                                return _ctx.abrupt("return");
                            case 7:
                                ignoreState = readIgnoreState(this._codeEditorService, model);
                                if (!(ignoreState === true)) {
                                    _ctx.next = 10;
                                    break;
                                }
                                return _ctx.abrupt("return");
                            case 10:
                                if (!this._editor.getOption(80 /* readOnly */ )) {
                                    _ctx.next = 12;
                                    break;
                                }
                                return _ctx.abrupt("return");
                            case 12:
                                if (!(this._config === 'auto')) {
                                    _ctx.next = 15;
                                    break;
                                }
                                // just do it!
                                model.removeUnusualLineTerminators(this._editor.getSelections());
                                return _ctx.abrupt("return");
                            case 15:
                                _ctx.next = 17;
                                return this._dialogService.confirm({
                                    title: _nlsJs.localize('unusualLineTerminators.title', "Unusual Line Terminators"),
                                    message: _nlsJs.localize('unusualLineTerminators.message', "Detected unusual line terminators"),
                                    detail: _nlsJs.localize('unusualLineTerminators.detail', "The file '{0}' contains one or more unusual line terminator characters, like Line Separator (LS) or Paragraph Separator (PS).\n\nIt is recommended to remove them from the file. This can be configured via `editor.unusualLineTerminators`.", _resourcesJs.basename(model.uri)),
                                    primaryButton: _nlsJs.localize('unusualLineTerminators.fix', "Remove Unusual Line Terminators"),
                                    secondaryButton: _nlsJs.localize('unusualLineTerminators.ignore', "Ignore")
                                });
                            case 17:
                                result = _ctx.sent;
                                if (result.confirmed) {
                                    _ctx.next = 21;
                                    break;
                                }
                                // this model should be ignored
                                writeIgnoreState(this._codeEditorService, model, true);
                                return _ctx.abrupt("return");
                            case 21:
                                model.removeUnusualLineTerminators(this._editor.getSelections());
                            case 22:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this);
                }));
            }
        }
    ]);
    return UnusualLineTerminatorsDetector1;
}(_lifecycleJs.Disposable);
UnusualLineTerminatorsDetector.ID = 'editor.contrib.unusualLineTerminatorsDetector';
UnusualLineTerminatorsDetector = __decorate([
    __param(1, _dialogsJs.IDialogService),
    __param(2, _codeEditorServiceJs.ICodeEditorService)
], UnusualLineTerminatorsDetector);
_editorExtensionsJs.registerEditorContribution(UnusualLineTerminatorsDetector.ID, UnusualLineTerminatorsDetector);

},{"@swc/helpers":"erO4s","regenerator-runtime":"12Ae8","../../../base/common/lifecycle.js":"bcbPy","../../../base/common/resources.js":"14HNj","../../browser/editorExtensions.js":"dFnlo","../../browser/services/codeEditorService.js":"izkTN","../../../nls.js":"9djYb","../../../platform/dialogs/common/dialogs.js":"6IMIA","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"kClr0":[function(require,module,exports) {
var _helpers = require("@swc/helpers");
var _asyncJs = require("../../../base/common/async.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _editorExtensionsJs = require("../../browser/editorExtensions.js");
var _modesJs = require("../../common/modes.js");
var _getSemanticTokensJs = require("../../common/services/getSemanticTokens.js");
var _modelServiceJs = require("../../common/services/modelService.js");
var _modelServiceImplJs = require("../../common/services/modelServiceImpl.js");
var _semanticTokensProviderStylingJs = require("../../common/services/semanticTokensProviderStyling.js");
var _configurationJs = require("../../../platform/configuration/common/configuration.js");
var _themeServiceJs = require("../../../platform/theme/common/themeService.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var ViewportSemanticTokensContribution = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(ViewportSemanticTokensContribution1, Disposable);
    var _super = _helpers.createSuper(ViewportSemanticTokensContribution1);
    function ViewportSemanticTokensContribution1(editor, _modelService, _themeService, _configurationService) {
        _helpers.classCallCheck(this, ViewportSemanticTokensContribution1);
        var _this;
        _this = _super.call(this);
        _this._modelService = _modelService;
        _this._themeService = _themeService;
        _this._configurationService = _configurationService;
        _this._editor = editor;
        _this._tokenizeViewport = new _asyncJs.RunOnceScheduler(function() {
            return _this._tokenizeViewportNow();
        }, 100);
        _this._outstandingRequests = [];
        _this._register(_this._editor.onDidScrollChange(function() {
            _this._tokenizeViewport.schedule();
        }));
        _this._register(_this._editor.onDidChangeModel(function() {
            _this._cancelAll();
            _this._tokenizeViewport.schedule();
        }));
        _this._register(_this._editor.onDidChangeModelContent(function(e) {
            _this._cancelAll();
            _this._tokenizeViewport.schedule();
        }));
        _this._register(_modesJs.DocumentRangeSemanticTokensProviderRegistry.onDidChange(function() {
            _this._cancelAll();
            _this._tokenizeViewport.schedule();
        }));
        _this._register(_this._configurationService.onDidChangeConfiguration(function(e) {
            if (e.affectsConfiguration(_modelServiceImplJs.SEMANTIC_HIGHLIGHTING_SETTING_ID)) {
                _this._cancelAll();
                _this._tokenizeViewport.schedule();
            }
        }));
        _this._register(_this._themeService.onDidColorThemeChange(function() {
            _this._cancelAll();
            _this._tokenizeViewport.schedule();
        }));
        return _this;
    }
    _helpers.createClass(ViewportSemanticTokensContribution1, [
        {
            key: "_cancelAll",
            value: function _cancelAll() {
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this._outstandingRequests[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var request = _step.value;
                        request.cancel();
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                this._outstandingRequests = [];
            }
        },
        {
            key: "_removeOutstandingRequest",
            value: function _removeOutstandingRequest(req) {
                for(var i = 0, len = this._outstandingRequests.length; i < len; i++)if (this._outstandingRequests[i] === req) {
                    this._outstandingRequests.splice(i, 1);
                    return;
                }
            }
        },
        {
            key: "_tokenizeViewportNow",
            value: function _tokenizeViewportNow() {
                var _this = this;
                if (!this._editor.hasModel()) return;
                var model = this._editor.getModel();
                if (model.hasCompleteSemanticTokens()) return;
                if (!_modelServiceImplJs.isSemanticColoringEnabled(model, this._themeService, this._configurationService)) {
                    if (model.hasSomeSemanticTokens()) model.setSemanticTokens(null, false);
                    return;
                }
                if (!_getSemanticTokensJs.hasDocumentRangeSemanticTokensProvider(model)) {
                    if (model.hasSomeSemanticTokens()) model.setSemanticTokens(null, false);
                    return;
                }
                var visibleRanges = this._editor.getVisibleRangesPlusViewportAboveBelow();
                this._outstandingRequests = this._outstandingRequests.concat(visibleRanges.map(function(range) {
                    return _this._requestRange(model, range);
                }));
            }
        },
        {
            key: "_requestRange",
            value: function _requestRange(model, range) {
                var _this = this;
                var requestVersionId = model.getVersionId();
                var request = _asyncJs.createCancelablePromise(function(token) {
                    return Promise.resolve(_getSemanticTokensJs.getDocumentRangeSemanticTokens(model, range, token));
                });
                request.then(function(r) {
                    if (!r || !r.tokens || model.isDisposed() || model.getVersionId() !== requestVersionId) return;
                    var provider = r.provider, result = r.tokens;
                    var styling = _this._modelService.getSemanticTokensProviderStyling(provider);
                    model.setPartialSemanticTokens(range, _semanticTokensProviderStylingJs.toMultilineTokens2(result, styling, model.getLanguageId()));
                }).then(function() {
                    return _this._removeOutstandingRequest(request);
                }, function() {
                    return _this._removeOutstandingRequest(request);
                });
                return request;
            }
        }
    ]);
    return ViewportSemanticTokensContribution1;
}(_lifecycleJs.Disposable);
ViewportSemanticTokensContribution.ID = 'editor.contrib.viewportSemanticTokens';
ViewportSemanticTokensContribution = __decorate([
    __param(1, _modelServiceJs.IModelService),
    __param(2, _themeServiceJs.IThemeService),
    __param(3, _configurationJs.IConfigurationService)
], ViewportSemanticTokensContribution);
_editorExtensionsJs.registerEditorContribution(ViewportSemanticTokensContribution.ID, ViewportSemanticTokensContribution);

},{"@swc/helpers":"erO4s","../../../base/common/async.js":"kMhSh","../../../base/common/lifecycle.js":"bcbPy","../../browser/editorExtensions.js":"dFnlo","../../common/modes.js":"bRbY1","../../common/services/getSemanticTokens.js":"hervw","../../common/services/modelService.js":"HyRTJ","../../common/services/modelServiceImpl.js":"7ld2U","../../common/services/semanticTokensProviderStyling.js":"aIXCD","../../../platform/configuration/common/configuration.js":"9wFfb","../../../platform/theme/common/themeService.js":"kE7QB"}],"idZ3D":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getOccurrencesAtPosition", function() {
    return getOccurrencesAtPosition;
});
var _helpers = require("@swc/helpers");
var _ariaJs = require("../../../base/browser/ui/aria/aria.js");
var _arraysJs = require("../../../base/common/arrays.js");
var _asyncJs = require("../../../base/common/async.js");
var _cancellationJs = require("../../../base/common/cancellation.js");
var _errorsJs = require("../../../base/common/errors.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _editorExtensionsJs = require("../../browser/editorExtensions.js");
var _rangeJs = require("../../common/core/range.js");
var _editorContextKeysJs = require("../../common/editorContextKeys.js");
var _modelJs = require("../../common/model.js");
var _textModelJs = require("../../common/model/textModel.js");
var _modesJs = require("../../common/modes.js");
var _nlsJs = require("../../../nls.js");
var _contextkeyJs = require("../../../platform/contextkey/common/contextkey.js");
var _colorRegistryJs = require("../../../platform/theme/common/colorRegistry.js");
var _themeServiceJs = require("../../../platform/theme/common/themeService.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var editorWordHighlight = _colorRegistryJs.registerColor('editor.wordHighlightBackground', {
    dark: '#575757B8',
    light: '#57575740',
    hc: null
}, _nlsJs.localize('wordHighlight', 'Background color of a symbol during read-access, like reading a variable. The color must not be opaque so as not to hide underlying decorations.'), true);
var editorWordHighlightStrong = _colorRegistryJs.registerColor('editor.wordHighlightStrongBackground', {
    dark: '#004972B8',
    light: '#0e639c40',
    hc: null
}, _nlsJs.localize('wordHighlightStrong', 'Background color of a symbol during write-access, like writing to a variable. The color must not be opaque so as not to hide underlying decorations.'), true);
var editorWordHighlightBorder = _colorRegistryJs.registerColor('editor.wordHighlightBorder', {
    light: null,
    dark: null,
    hc: _colorRegistryJs.activeContrastBorder
}, _nlsJs.localize('wordHighlightBorder', 'Border color of a symbol during read-access, like reading a variable.'));
var editorWordHighlightStrongBorder = _colorRegistryJs.registerColor('editor.wordHighlightStrongBorder', {
    light: null,
    dark: null,
    hc: _colorRegistryJs.activeContrastBorder
}, _nlsJs.localize('wordHighlightStrongBorder', 'Border color of a symbol during write-access, like writing to a variable.'));
var overviewRulerWordHighlightForeground = _colorRegistryJs.registerColor('editorOverviewRuler.wordHighlightForeground', {
    dark: '#A0A0A0CC',
    light: '#A0A0A0CC',
    hc: '#A0A0A0CC'
}, _nlsJs.localize('overviewRulerWordHighlightForeground', 'Overview ruler marker color for symbol highlights. The color must not be opaque so as not to hide underlying decorations.'), true);
var overviewRulerWordHighlightStrongForeground = _colorRegistryJs.registerColor('editorOverviewRuler.wordHighlightStrongForeground', {
    dark: '#C0A0C0CC',
    light: '#C0A0C0CC',
    hc: '#C0A0C0CC'
}, _nlsJs.localize('overviewRulerWordHighlightStrongForeground', 'Overview ruler marker color for write-access symbol highlights. The color must not be opaque so as not to hide underlying decorations.'), true);
var ctxHasWordHighlights = new _contextkeyJs.RawContextKey('hasWordHighlights', false);
function getOccurrencesAtPosition(model, position, token) {
    var orderedByScore = _modesJs.DocumentHighlightProviderRegistry.ordered(model);
    // in order of score ask the occurrences provider
    // until someone response with a good result
    // (good = none empty array)
    return _asyncJs.first(orderedByScore.map(function(provider) {
        return function() {
            return Promise.resolve(provider.provideDocumentHighlights(model, position, token)).then(undefined, _errorsJs.onUnexpectedExternalError);
        };
    }), _arraysJs.isNonEmptyArray);
}
var OccurenceAtPositionRequest = /*#__PURE__*/ function() {
    "use strict";
    function OccurenceAtPositionRequest(model, selection, wordSeparators) {
        var _this = this;
        _helpers.classCallCheck(this, OccurenceAtPositionRequest);
        this._wordRange = this._getCurrentWordRange(model, selection);
        this.result = _asyncJs.createCancelablePromise(function(token) {
            return _this._compute(model, selection, wordSeparators, token);
        });
    }
    _helpers.createClass(OccurenceAtPositionRequest, [
        {
            key: "_getCurrentWordRange",
            value: function _getCurrentWordRange(model, selection) {
                var word = model.getWordAtPosition(selection.getPosition());
                if (word) return new _rangeJs.Range(selection.startLineNumber, word.startColumn, selection.startLineNumber, word.endColumn);
                return null;
            }
        },
        {
            key: "isValid",
            value: function isValid(model, selection, decorationIds) {
                var lineNumber = selection.startLineNumber;
                var startColumn = selection.startColumn;
                var endColumn = selection.endColumn;
                var currentWordRange = this._getCurrentWordRange(model, selection);
                var requestIsValid = Boolean(this._wordRange && this._wordRange.equalsRange(currentWordRange));
                // Even if we are on a different word, if that word is in the decorations ranges, the request is still valid
                // (Same symbol)
                for(var i = 0, len = decorationIds.length; !requestIsValid && i < len; i++){
                    var range = model.getDecorationRange(decorationIds[i]);
                    if (range && range.startLineNumber === lineNumber) {
                        if (range.startColumn <= startColumn && range.endColumn >= endColumn) requestIsValid = true;
                    }
                }
                return requestIsValid;
            }
        },
        {
            key: "cancel",
            value: function cancel() {
                this.result.cancel();
            }
        }
    ]);
    return OccurenceAtPositionRequest;
}();
var SemanticOccurenceAtPositionRequest = /*#__PURE__*/ function(OccurenceAtPositionRequest) {
    "use strict";
    _helpers.inherits(SemanticOccurenceAtPositionRequest, OccurenceAtPositionRequest);
    var _super = _helpers.createSuper(SemanticOccurenceAtPositionRequest);
    function SemanticOccurenceAtPositionRequest() {
        _helpers.classCallCheck(this, SemanticOccurenceAtPositionRequest);
        return _super.apply(this, arguments);
    }
    _helpers.createClass(SemanticOccurenceAtPositionRequest, [
        {
            key: "_compute",
            value: function _compute(model, selection, wordSeparators, token) {
                return getOccurrencesAtPosition(model, selection.getPosition(), token).then(function(value) {
                    return value || [];
                });
            }
        }
    ]);
    return SemanticOccurenceAtPositionRequest;
}(OccurenceAtPositionRequest);
var TextualOccurenceAtPositionRequest = /*#__PURE__*/ function(OccurenceAtPositionRequest) {
    "use strict";
    _helpers.inherits(TextualOccurenceAtPositionRequest, OccurenceAtPositionRequest);
    var _super = _helpers.createSuper(TextualOccurenceAtPositionRequest);
    function TextualOccurenceAtPositionRequest(model, selection, wordSeparators) {
        _helpers.classCallCheck(this, TextualOccurenceAtPositionRequest);
        var _this;
        _this = _super.call(this, model, selection, wordSeparators);
        _this._selectionIsEmpty = selection.isEmpty();
        return _this;
    }
    _helpers.createClass(TextualOccurenceAtPositionRequest, [
        {
            key: "_compute",
            value: function _compute(model, selection, wordSeparators, token) {
                return _asyncJs.timeout(250, token).then(function() {
                    if (!selection.isEmpty()) return [];
                    var word = model.getWordAtPosition(selection.getPosition());
                    if (!word || word.word.length > 1000) return [];
                    var matches = model.findMatches(word.word, true, false, true, wordSeparators, false);
                    return matches.map(function(m) {
                        return {
                            range: m.range,
                            kind: _modesJs.DocumentHighlightKind.Text
                        };
                    });
                });
            }
        },
        {
            key: "isValid",
            value: function isValid(model, selection, decorationIds) {
                var currentSelectionIsEmpty = selection.isEmpty();
                if (this._selectionIsEmpty !== currentSelectionIsEmpty) return false;
                return _helpers.get(_helpers.getPrototypeOf(TextualOccurenceAtPositionRequest.prototype), "isValid", this).call(this, model, selection, decorationIds);
            }
        }
    ]);
    return TextualOccurenceAtPositionRequest;
}(OccurenceAtPositionRequest);
function computeOccurencesAtPosition(model, selection, wordSeparators) {
    if (_modesJs.DocumentHighlightProviderRegistry.has(model)) return new SemanticOccurenceAtPositionRequest(model, selection, wordSeparators);
    return new TextualOccurenceAtPositionRequest(model, selection, wordSeparators);
}
_editorExtensionsJs.registerModelAndPositionCommand('_executeDocumentHighlights', function(model, position) {
    return getOccurrencesAtPosition(model, position, _cancellationJs.CancellationToken.None);
});
var WordHighlighter = /*#__PURE__*/ function() {
    "use strict";
    function WordHighlighter(editor, contextKeyService) {
        var _this = this;
        _helpers.classCallCheck(this, WordHighlighter);
        this.toUnhook = new _lifecycleJs.DisposableStore();
        this.workerRequestTokenId = 0;
        this.workerRequestCompleted = false;
        this.workerRequestValue = [];
        this.lastCursorPositionChangeTime = 0;
        this.renderDecorationsTimer = -1;
        this.editor = editor;
        this._hasWordHighlights = ctxHasWordHighlights.bindTo(contextKeyService);
        this._ignorePositionChangeEvent = false;
        this.occurrencesHighlight = this.editor.getOption(71 /* occurrencesHighlight */ );
        this.model = this.editor.getModel();
        this.toUnhook.add(editor.onDidChangeCursorPosition(function(e) {
            if (_this._ignorePositionChangeEvent) // We are changing the position => ignore this event
            return;
            if (!_this.occurrencesHighlight) // Early exit if nothing needs to be done!
            // Leave some form of early exit check here if you wish to continue being a cursor position change listener ;)
            return;
            _this._onPositionChanged(e);
        }));
        this.toUnhook.add(editor.onDidChangeModelContent(function(e) {
            _this._stopAll();
        }));
        this.toUnhook.add(editor.onDidChangeConfiguration(function(e) {
            var newValue = _this.editor.getOption(71 /* occurrencesHighlight */ );
            if (_this.occurrencesHighlight !== newValue) {
                _this.occurrencesHighlight = newValue;
                _this._stopAll();
            }
        }));
        this._decorationIds = [];
        this.workerRequestTokenId = 0;
        this.workerRequest = null;
        this.workerRequestCompleted = false;
        this.lastCursorPositionChangeTime = 0;
        this.renderDecorationsTimer = -1;
    }
    _helpers.createClass(WordHighlighter, [
        {
            key: "hasDecorations",
            value: function hasDecorations() {
                return this._decorationIds.length > 0;
            }
        },
        {
            key: "restore",
            value: function restore() {
                if (!this.occurrencesHighlight) return;
                this._run();
            }
        },
        {
            key: "_getSortedHighlights",
            value: function _getSortedHighlights() {
                var _this = this;
                return _arraysJs.coalesce(this._decorationIds.map(function(id) {
                    return _this.model.getDecorationRange(id);
                }).sort(_rangeJs.Range.compareRangesUsingStarts));
            }
        },
        {
            key: "moveNext",
            value: function moveNext() {
                var _this = this;
                var highlights = this._getSortedHighlights();
                var index = highlights.findIndex(function(range) {
                    return range.containsPosition(_this.editor.getPosition());
                });
                var newIndex = (index + 1) % highlights.length;
                var dest = highlights[newIndex];
                try {
                    this._ignorePositionChangeEvent = true;
                    this.editor.setPosition(dest.getStartPosition());
                    this.editor.revealRangeInCenterIfOutsideViewport(dest);
                    var word = this._getWord();
                    if (word) {
                        var lineContent = this.editor.getModel().getLineContent(dest.startLineNumber);
                        _ariaJs.alert("".concat(lineContent, ", ").concat(newIndex + 1, " of ").concat(highlights.length, " for '").concat(word.word, "'"));
                    }
                } finally{
                    this._ignorePositionChangeEvent = false;
                }
            }
        },
        {
            key: "moveBack",
            value: function moveBack() {
                var _this = this;
                var highlights = this._getSortedHighlights();
                var index = highlights.findIndex(function(range) {
                    return range.containsPosition(_this.editor.getPosition());
                });
                var newIndex = (index - 1 + highlights.length) % highlights.length;
                var dest = highlights[newIndex];
                try {
                    this._ignorePositionChangeEvent = true;
                    this.editor.setPosition(dest.getStartPosition());
                    this.editor.revealRangeInCenterIfOutsideViewport(dest);
                    var word = this._getWord();
                    if (word) {
                        var lineContent = this.editor.getModel().getLineContent(dest.startLineNumber);
                        _ariaJs.alert("".concat(lineContent, ", ").concat(newIndex + 1, " of ").concat(highlights.length, " for '").concat(word.word, "'"));
                    }
                } finally{
                    this._ignorePositionChangeEvent = false;
                }
            }
        },
        {
            key: "_removeDecorations",
            value: function _removeDecorations() {
                if (this._decorationIds.length > 0) {
                    // remove decorations
                    this._decorationIds = this.editor.deltaDecorations(this._decorationIds, []);
                    this._hasWordHighlights.set(false);
                }
            }
        },
        {
            key: "_stopAll",
            value: function _stopAll() {
                // Remove any existing decorations
                this._removeDecorations();
                // Cancel any renderDecorationsTimer
                if (this.renderDecorationsTimer !== -1) {
                    clearTimeout(this.renderDecorationsTimer);
                    this.renderDecorationsTimer = -1;
                }
                // Cancel any worker request
                if (this.workerRequest !== null) {
                    this.workerRequest.cancel();
                    this.workerRequest = null;
                }
                // Invalidate any worker request callback
                if (!this.workerRequestCompleted) {
                    this.workerRequestTokenId++;
                    this.workerRequestCompleted = true;
                }
            }
        },
        {
            key: "_onPositionChanged",
            value: function _onPositionChanged(e) {
                // disabled
                if (!this.occurrencesHighlight) {
                    this._stopAll();
                    return;
                }
                // ignore typing & other
                if (e.reason !== 3 /* Explicit */ ) {
                    this._stopAll();
                    return;
                }
                this._run();
            }
        },
        {
            key: "_getWord",
            value: function _getWord() {
                var editorSelection = this.editor.getSelection();
                var lineNumber = editorSelection.startLineNumber;
                var startColumn = editorSelection.startColumn;
                return this.model.getWordAtPosition({
                    lineNumber: lineNumber,
                    column: startColumn
                });
            }
        },
        {
            key: "_run",
            value: function _run() {
                var editorSelection = this.editor.getSelection();
                // ignore multiline selection
                if (editorSelection.startLineNumber !== editorSelection.endLineNumber) {
                    this._stopAll();
                    return;
                }
                var startColumn = editorSelection.startColumn;
                var endColumn = editorSelection.endColumn;
                var word = this._getWord();
                // The selection must be inside a word or surround one word at most
                if (!word || word.startColumn > startColumn || word.endColumn < endColumn) {
                    this._stopAll();
                    return;
                }
                // All the effort below is trying to achieve this:
                // - when cursor is moved to a word, trigger immediately a findOccurrences request
                // - 250ms later after the last cursor move event, render the occurrences
                // - no flickering!
                var workerRequestIsValid = this.workerRequest && this.workerRequest.isValid(this.model, editorSelection, this._decorationIds);
                // There are 4 cases:
                // a) old workerRequest is valid & completed, renderDecorationsTimer fired
                // b) old workerRequest is valid & completed, renderDecorationsTimer not fired
                // c) old workerRequest is valid, but not completed
                // d) old workerRequest is not valid
                // For a) no action is needed
                // For c), member 'lastCursorPositionChangeTime' will be used when installing the timer so no action is needed
                this.lastCursorPositionChangeTime = new Date().getTime();
                if (workerRequestIsValid) {
                    if (this.workerRequestCompleted && this.renderDecorationsTimer !== -1) {
                        // case b)
                        // Delay the firing of renderDecorationsTimer by an extra 250 ms
                        clearTimeout(this.renderDecorationsTimer);
                        this.renderDecorationsTimer = -1;
                        this._beginRenderDecorations();
                    }
                } else {
                    var _this = this;
                    // case d)
                    // Stop all previous actions and start fresh
                    this._stopAll();
                    var myRequestId = ++this.workerRequestTokenId;
                    this.workerRequestCompleted = false;
                    this.workerRequest = computeOccurencesAtPosition(this.model, this.editor.getSelection(), this.editor.getOption(116 /* wordSeparators */ ));
                    this.workerRequest.result.then(function(data) {
                        if (myRequestId === _this.workerRequestTokenId) {
                            _this.workerRequestCompleted = true;
                            _this.workerRequestValue = data || [];
                            _this._beginRenderDecorations();
                        }
                    }, _errorsJs.onUnexpectedError);
                }
            }
        },
        {
            key: "_beginRenderDecorations",
            value: function _beginRenderDecorations() {
                var _this = this;
                var currentTime = new Date().getTime();
                var minimumRenderTime = this.lastCursorPositionChangeTime + 250;
                if (currentTime >= minimumRenderTime) {
                    // Synchronous
                    this.renderDecorationsTimer = -1;
                    this.renderDecorations();
                } else // Asynchronous
                this.renderDecorationsTimer = setTimeout(function() {
                    _this.renderDecorations();
                }, minimumRenderTime - currentTime);
            }
        },
        {
            key: "renderDecorations",
            value: function renderDecorations() {
                this.renderDecorationsTimer = -1;
                var decorations = [];
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.workerRequestValue[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var info = _step.value;
                        if (info.range) decorations.push({
                            range: info.range,
                            options: WordHighlighter._getDecorationOptions(info.kind)
                        });
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                this._decorationIds = this.editor.deltaDecorations(this._decorationIds, decorations);
                this._hasWordHighlights.set(this.hasDecorations());
            }
        },
        {
            key: "dispose",
            value: function dispose() {
                this._stopAll();
                this.toUnhook.dispose();
            }
        }
    ], [
        {
            key: "_getDecorationOptions",
            value: function _getDecorationOptions(kind) {
                if (kind === _modesJs.DocumentHighlightKind.Write) return this._WRITE_OPTIONS;
                else if (kind === _modesJs.DocumentHighlightKind.Text) return this._TEXT_OPTIONS;
                else return this._REGULAR_OPTIONS;
            }
        }
    ]);
    return WordHighlighter;
}();
WordHighlighter._WRITE_OPTIONS = _textModelJs.ModelDecorationOptions.register({
    description: 'word-highlight-strong',
    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
    className: 'wordHighlightStrong',
    overviewRuler: {
        color: _themeServiceJs.themeColorFromId(overviewRulerWordHighlightStrongForeground),
        position: _modelJs.OverviewRulerLane.Center
    },
    minimap: {
        color: _themeServiceJs.themeColorFromId(_colorRegistryJs.minimapSelectionOccurrenceHighlight),
        position: _modelJs.MinimapPosition.Inline
    }
});
WordHighlighter._TEXT_OPTIONS = _textModelJs.ModelDecorationOptions.register({
    description: 'selection-highlight',
    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
    className: 'selectionHighlight',
    overviewRuler: {
        color: _themeServiceJs.themeColorFromId(_colorRegistryJs.overviewRulerSelectionHighlightForeground),
        position: _modelJs.OverviewRulerLane.Center
    },
    minimap: {
        color: _themeServiceJs.themeColorFromId(_colorRegistryJs.minimapSelectionOccurrenceHighlight),
        position: _modelJs.MinimapPosition.Inline
    }
});
WordHighlighter._REGULAR_OPTIONS = _textModelJs.ModelDecorationOptions.register({
    description: 'word-highlight',
    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ ,
    className: 'wordHighlight',
    overviewRuler: {
        color: _themeServiceJs.themeColorFromId(overviewRulerWordHighlightForeground),
        position: _modelJs.OverviewRulerLane.Center
    },
    minimap: {
        color: _themeServiceJs.themeColorFromId(_colorRegistryJs.minimapSelectionOccurrenceHighlight),
        position: _modelJs.MinimapPosition.Inline
    }
});
var WordHighlighterContribution = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(WordHighlighterContribution1, Disposable);
    var _super = _helpers.createSuper(WordHighlighterContribution1);
    function WordHighlighterContribution1(editor, contextKeyService) {
        _helpers.classCallCheck(this, WordHighlighterContribution1);
        var _this;
        _this = _super.call(this);
        _this.wordHighlighter = null;
        var createWordHighlighterIfPossible = function() {
            if (editor.hasModel()) _this.wordHighlighter = new WordHighlighter(editor, contextKeyService);
        };
        _this._register(editor.onDidChangeModel(function(e) {
            if (_this.wordHighlighter) {
                _this.wordHighlighter.dispose();
                _this.wordHighlighter = null;
            }
            createWordHighlighterIfPossible();
        }));
        createWordHighlighterIfPossible();
        return _this;
    }
    _helpers.createClass(WordHighlighterContribution1, [
        {
            key: "saveViewState",
            value: function saveViewState() {
                if (this.wordHighlighter && this.wordHighlighter.hasDecorations()) return true;
                return false;
            }
        },
        {
            key: "moveNext",
            value: function moveNext() {
                if (this.wordHighlighter) this.wordHighlighter.moveNext();
            }
        },
        {
            key: "moveBack",
            value: function moveBack() {
                if (this.wordHighlighter) this.wordHighlighter.moveBack();
            }
        },
        {
            key: "restoreViewState",
            value: function restoreViewState(state) {
                if (this.wordHighlighter && state) this.wordHighlighter.restore();
            }
        },
        {
            key: "dispose",
            value: function dispose() {
                if (this.wordHighlighter) {
                    this.wordHighlighter.dispose();
                    this.wordHighlighter = null;
                }
                _helpers.get(_helpers.getPrototypeOf(WordHighlighterContribution1.prototype), "dispose", this).call(this);
            }
        }
    ], [
        {
            key: "get",
            value: function get(editor) {
                return editor.getContribution(WordHighlighterContribution1.ID);
            }
        }
    ]);
    return WordHighlighterContribution1;
}(_lifecycleJs.Disposable);
WordHighlighterContribution.ID = 'editor.contrib.wordHighlighter';
WordHighlighterContribution = __decorate([
    __param(1, _contextkeyJs.IContextKeyService)
], WordHighlighterContribution);
var WordHighlightNavigationAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(WordHighlightNavigationAction, EditorAction);
    var _super = _helpers.createSuper(WordHighlightNavigationAction);
    function WordHighlightNavigationAction(next, opts) {
        _helpers.classCallCheck(this, WordHighlightNavigationAction);
        var _this;
        _this = _super.call(this, opts);
        _this._isNext = next;
        return _this;
    }
    _helpers.createClass(WordHighlightNavigationAction, [
        {
            key: "run",
            value: function run(accessor, editor) {
                var controller = WordHighlighterContribution.get(editor);
                if (!controller) return;
                if (this._isNext) controller.moveNext();
                else controller.moveBack();
            }
        }
    ]);
    return WordHighlightNavigationAction;
}(_editorExtensionsJs.EditorAction);
var NextWordHighlightAction = /*#__PURE__*/ function(WordHighlightNavigationAction) {
    "use strict";
    _helpers.inherits(NextWordHighlightAction, WordHighlightNavigationAction);
    var _super = _helpers.createSuper(NextWordHighlightAction);
    function NextWordHighlightAction() {
        _helpers.classCallCheck(this, NextWordHighlightAction);
        return _super.call(this, true, {
            id: 'editor.action.wordHighlight.next',
            label: _nlsJs.localize('wordHighlight.next.label', "Go to Next Symbol Highlight"),
            alias: 'Go to Next Symbol Highlight',
            precondition: ctxHasWordHighlights,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: 65 /* F7 */ ,
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    return NextWordHighlightAction;
}(WordHighlightNavigationAction);
var PrevWordHighlightAction = /*#__PURE__*/ function(WordHighlightNavigationAction) {
    "use strict";
    _helpers.inherits(PrevWordHighlightAction, WordHighlightNavigationAction);
    var _super = _helpers.createSuper(PrevWordHighlightAction);
    function PrevWordHighlightAction() {
        _helpers.classCallCheck(this, PrevWordHighlightAction);
        return _super.call(this, false, {
            id: 'editor.action.wordHighlight.prev',
            label: _nlsJs.localize('wordHighlight.previous.label', "Go to Previous Symbol Highlight"),
            alias: 'Go to Previous Symbol Highlight',
            precondition: ctxHasWordHighlights,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: 1089 /* F7 */ ,
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    return PrevWordHighlightAction;
}(WordHighlightNavigationAction);
var TriggerWordHighlightAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(TriggerWordHighlightAction, EditorAction);
    var _super = _helpers.createSuper(TriggerWordHighlightAction);
    function TriggerWordHighlightAction() {
        _helpers.classCallCheck(this, TriggerWordHighlightAction);
        return _super.call(this, {
            id: 'editor.action.wordHighlight.trigger',
            label: _nlsJs.localize('wordHighlight.trigger.label', "Trigger Symbol Highlight"),
            alias: 'Trigger Symbol Highlight',
            precondition: ctxHasWordHighlights.toNegated(),
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.editorTextFocus,
                primary: 0,
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    _helpers.createClass(TriggerWordHighlightAction, [
        {
            key: "run",
            value: function run(accessor, editor, args) {
                var controller = WordHighlighterContribution.get(editor);
                if (!controller) return;
                controller.restoreViewState(true);
            }
        }
    ]);
    return TriggerWordHighlightAction;
}(_editorExtensionsJs.EditorAction);
_editorExtensionsJs.registerEditorContribution(WordHighlighterContribution.ID, WordHighlighterContribution);
_editorExtensionsJs.registerEditorAction(NextWordHighlightAction);
_editorExtensionsJs.registerEditorAction(PrevWordHighlightAction);
_editorExtensionsJs.registerEditorAction(TriggerWordHighlightAction);
_themeServiceJs.registerThemingParticipant(function(theme, collector) {
    var selectionHighlight = theme.getColor(_colorRegistryJs.editorSelectionHighlight);
    if (selectionHighlight) {
        collector.addRule(".monaco-editor .focused .selectionHighlight { background-color: ".concat(selectionHighlight, "; }"));
        collector.addRule(".monaco-editor .selectionHighlight { background-color: ".concat(selectionHighlight.transparent(0.5), "; }"));
    }
    var wordHighlight = theme.getColor(editorWordHighlight);
    if (wordHighlight) collector.addRule(".monaco-editor .wordHighlight { background-color: ".concat(wordHighlight, "; }"));
    var wordHighlightStrong = theme.getColor(editorWordHighlightStrong);
    if (wordHighlightStrong) collector.addRule(".monaco-editor .wordHighlightStrong { background-color: ".concat(wordHighlightStrong, "; }"));
    var selectionHighlightBorder = theme.getColor(_colorRegistryJs.editorSelectionHighlightBorder);
    if (selectionHighlightBorder) collector.addRule(".monaco-editor .selectionHighlight { border: 1px ".concat(theme.type === 'hc' ? 'dotted' : 'solid', " ").concat(selectionHighlightBorder, "; box-sizing: border-box; }"));
    var wordHighlightBorder = theme.getColor(editorWordHighlightBorder);
    if (wordHighlightBorder) collector.addRule(".monaco-editor .wordHighlight { border: 1px ".concat(theme.type === 'hc' ? 'dashed' : 'solid', " ").concat(wordHighlightBorder, "; box-sizing: border-box; }"));
    var wordHighlightStrongBorder = theme.getColor(editorWordHighlightStrongBorder);
    if (wordHighlightStrongBorder) collector.addRule(".monaco-editor .wordHighlightStrong { border: 1px ".concat(theme.type === 'hc' ? 'dashed' : 'solid', " ").concat(wordHighlightStrongBorder, "; box-sizing: border-box; }"));
});

},{"@swc/helpers":"erO4s","../../../base/browser/ui/aria/aria.js":"8SLUe","../../../base/common/arrays.js":"bZs3E","../../../base/common/async.js":"kMhSh","../../../base/common/cancellation.js":"1C4LY","../../../base/common/errors.js":"afm4i","../../../base/common/lifecycle.js":"bcbPy","../../browser/editorExtensions.js":"dFnlo","../../common/core/range.js":"VbyL8","../../common/editorContextKeys.js":"2t2PW","../../common/model.js":"dUHFC","../../common/model/textModel.js":"f18vR","../../common/modes.js":"bRbY1","../../../nls.js":"9djYb","../../../platform/contextkey/common/contextkey.js":"5cjav","../../../platform/theme/common/colorRegistry.js":"lKtxS","../../../platform/theme/common/themeService.js":"kE7QB","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"g49mg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MoveWordCommand", function() {
    return MoveWordCommand;
});
parcelHelpers.export(exports, "WordLeftCommand", function() {
    return WordLeftCommand;
});
parcelHelpers.export(exports, "WordRightCommand", function() {
    return WordRightCommand;
});
parcelHelpers.export(exports, "CursorWordStartLeft", function() {
    return CursorWordStartLeft;
});
parcelHelpers.export(exports, "CursorWordEndLeft", function() {
    return CursorWordEndLeft;
});
parcelHelpers.export(exports, "CursorWordLeft", function() {
    return CursorWordLeft;
});
parcelHelpers.export(exports, "CursorWordStartLeftSelect", function() {
    return CursorWordStartLeftSelect;
});
parcelHelpers.export(exports, "CursorWordEndLeftSelect", function() {
    return CursorWordEndLeftSelect;
});
parcelHelpers.export(exports, "CursorWordLeftSelect", function() {
    return CursorWordLeftSelect;
});
parcelHelpers.export(exports, "CursorWordAccessibilityLeft", function() {
    return CursorWordAccessibilityLeft;
});
parcelHelpers.export(exports, "CursorWordAccessibilityLeftSelect", function() {
    return CursorWordAccessibilityLeftSelect;
});
parcelHelpers.export(exports, "CursorWordStartRight", function() {
    return CursorWordStartRight;
});
parcelHelpers.export(exports, "CursorWordEndRight", function() {
    return CursorWordEndRight;
});
parcelHelpers.export(exports, "CursorWordRight", function() {
    return CursorWordRight;
});
parcelHelpers.export(exports, "CursorWordStartRightSelect", function() {
    return CursorWordStartRightSelect;
});
parcelHelpers.export(exports, "CursorWordEndRightSelect", function() {
    return CursorWordEndRightSelect;
});
parcelHelpers.export(exports, "CursorWordRightSelect", function() {
    return CursorWordRightSelect;
});
parcelHelpers.export(exports, "CursorWordAccessibilityRight", function() {
    return CursorWordAccessibilityRight;
});
parcelHelpers.export(exports, "CursorWordAccessibilityRightSelect", function() {
    return CursorWordAccessibilityRightSelect;
});
parcelHelpers.export(exports, "DeleteWordCommand", function() {
    return DeleteWordCommand;
});
parcelHelpers.export(exports, "DeleteWordLeftCommand", function() {
    return DeleteWordLeftCommand;
});
parcelHelpers.export(exports, "DeleteWordRightCommand", function() {
    return DeleteWordRightCommand;
});
parcelHelpers.export(exports, "DeleteWordStartLeft", function() {
    return DeleteWordStartLeft;
});
parcelHelpers.export(exports, "DeleteWordEndLeft", function() {
    return DeleteWordEndLeft;
});
parcelHelpers.export(exports, "DeleteWordLeft", function() {
    return DeleteWordLeft;
});
parcelHelpers.export(exports, "DeleteWordStartRight", function() {
    return DeleteWordStartRight;
});
parcelHelpers.export(exports, "DeleteWordEndRight", function() {
    return DeleteWordEndRight;
});
parcelHelpers.export(exports, "DeleteWordRight", function() {
    return DeleteWordRight;
});
parcelHelpers.export(exports, "DeleteInsideWord", function() {
    return DeleteInsideWord;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _editorExtensionsJs = require("../../browser/editorExtensions.js");
var _replaceCommandJs = require("../../common/commands/replaceCommand.js");
var _editorOptionsJs = require("../../common/config/editorOptions.js");
var _cursorCommonJs = require("../../common/controller/cursorCommon.js");
var _cursorWordOperationsJs = require("../../common/controller/cursorWordOperations.js");
var _wordCharacterClassifierJs = require("../../common/controller/wordCharacterClassifier.js");
var _positionJs = require("../../common/core/position.js");
var _rangeJs = require("../../common/core/range.js");
var _selectionJs = require("../../common/core/selection.js");
var _editorContextKeysJs = require("../../common/editorContextKeys.js");
var _languageConfigurationRegistryJs = require("../../common/modes/languageConfigurationRegistry.js");
var _nlsJs = require("../../../nls.js");
var _accessibilityJs = require("../../../platform/accessibility/common/accessibility.js");
var _contextkeyJs = require("../../../platform/contextkey/common/contextkey.js");
var _contextkeysJs = require("../../../platform/contextkey/common/contextkeys.js");
var MoveWordCommand = /*#__PURE__*/ function(EditorCommand) {
    "use strict";
    _helpers.inherits(MoveWordCommand, EditorCommand);
    var _super = _helpers.createSuper(MoveWordCommand);
    function MoveWordCommand(opts) {
        _helpers.classCallCheck(this, MoveWordCommand);
        var _this;
        _this = _super.call(this, opts);
        _this._inSelectionMode = opts.inSelectionMode;
        _this._wordNavigationType = opts.wordNavigationType;
        return _this;
    }
    _helpers.createClass(MoveWordCommand, [
        {
            key: "runEditorCommand",
            value: function runEditorCommand(accessor, editor, args) {
                var _this = this;
                if (!editor.hasModel()) return;
                var wordSeparators = _wordCharacterClassifierJs.getMapForWordSeparators(editor.getOption(116 /* wordSeparators */ ));
                var model = editor.getModel();
                var selections = editor.getSelections();
                var result = selections.map(function(sel) {
                    var inPosition = new _positionJs.Position(sel.positionLineNumber, sel.positionColumn);
                    var outPosition = _this._move(wordSeparators, model, inPosition, _this._wordNavigationType);
                    return _this._moveTo(sel, outPosition, _this._inSelectionMode);
                });
                model.pushStackElement();
                editor._getViewModel().setCursorStates('moveWordCommand', 3 /* Explicit */ , result.map(function(r) {
                    return _cursorCommonJs.CursorState.fromModelSelection(r);
                }));
                if (result.length === 1) {
                    var pos = new _positionJs.Position(result[0].positionLineNumber, result[0].positionColumn);
                    editor.revealPosition(pos, 0 /* Smooth */ );
                }
            }
        },
        {
            key: "_moveTo",
            value: function _moveTo(from, to, inSelectionMode) {
                if (inSelectionMode) // move just position
                return new _selectionJs.Selection(from.selectionStartLineNumber, from.selectionStartColumn, to.lineNumber, to.column);
                else // move everything
                return new _selectionJs.Selection(to.lineNumber, to.column, to.lineNumber, to.column);
            }
        }
    ]);
    return MoveWordCommand;
}(_editorExtensionsJs.EditorCommand);
var WordLeftCommand = /*#__PURE__*/ function(MoveWordCommand) {
    "use strict";
    _helpers.inherits(WordLeftCommand, MoveWordCommand);
    var _super = _helpers.createSuper(WordLeftCommand);
    function WordLeftCommand() {
        _helpers.classCallCheck(this, WordLeftCommand);
        return _super.apply(this, arguments);
    }
    _helpers.createClass(WordLeftCommand, [
        {
            key: "_move",
            value: function _move(wordSeparators, model, position, wordNavigationType) {
                return _cursorWordOperationsJs.WordOperations.moveWordLeft(wordSeparators, model, position, wordNavigationType);
            }
        }
    ]);
    return WordLeftCommand;
}(MoveWordCommand);
var WordRightCommand = /*#__PURE__*/ function(MoveWordCommand) {
    "use strict";
    _helpers.inherits(WordRightCommand, MoveWordCommand);
    var _super = _helpers.createSuper(WordRightCommand);
    function WordRightCommand() {
        _helpers.classCallCheck(this, WordRightCommand);
        return _super.apply(this, arguments);
    }
    _helpers.createClass(WordRightCommand, [
        {
            key: "_move",
            value: function _move(wordSeparators, model, position, wordNavigationType) {
                return _cursorWordOperationsJs.WordOperations.moveWordRight(wordSeparators, model, position, wordNavigationType);
            }
        }
    ]);
    return WordRightCommand;
}(MoveWordCommand);
var CursorWordStartLeft = /*#__PURE__*/ function(WordLeftCommand) {
    "use strict";
    _helpers.inherits(CursorWordStartLeft, WordLeftCommand);
    var _super = _helpers.createSuper(CursorWordStartLeft);
    function CursorWordStartLeft() {
        _helpers.classCallCheck(this, CursorWordStartLeft);
        return _super.call(this, {
            inSelectionMode: false,
            wordNavigationType: 0 /* WordStart */ ,
            id: 'cursorWordStartLeft',
            precondition: undefined
        });
    }
    return CursorWordStartLeft;
}(WordLeftCommand);
var CursorWordEndLeft = /*#__PURE__*/ function(WordLeftCommand) {
    "use strict";
    _helpers.inherits(CursorWordEndLeft, WordLeftCommand);
    var _super = _helpers.createSuper(CursorWordEndLeft);
    function CursorWordEndLeft() {
        _helpers.classCallCheck(this, CursorWordEndLeft);
        return _super.call(this, {
            inSelectionMode: false,
            wordNavigationType: 2 /* WordEnd */ ,
            id: 'cursorWordEndLeft',
            precondition: undefined
        });
    }
    return CursorWordEndLeft;
}(WordLeftCommand);
var CursorWordLeft = /*#__PURE__*/ function(WordLeftCommand) {
    "use strict";
    _helpers.inherits(CursorWordLeft, WordLeftCommand);
    var _super = _helpers.createSuper(CursorWordLeft);
    function CursorWordLeft() {
        _helpers.classCallCheck(this, CursorWordLeft);
        var _a;
        return _super.call(this, {
            inSelectionMode: false,
            wordNavigationType: 1 /* WordStartFast */ ,
            id: 'cursorWordLeft',
            precondition: undefined,
            kbOpts: {
                kbExpr: _contextkeyJs.ContextKeyExpr.and(_editorContextKeysJs.EditorContextKeys.textInputFocus, (_a = _contextkeyJs.ContextKeyExpr.and(_accessibilityJs.CONTEXT_ACCESSIBILITY_MODE_ENABLED, _contextkeysJs.IsWindowsContext)) === null || _a === void 0 ? void 0 : _a.negate()),
                primary: 2063 /* LeftArrow */ ,
                mac: {
                    primary: 527 /* LeftArrow */ 
                },
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    return CursorWordLeft;
}(WordLeftCommand);
var CursorWordStartLeftSelect = /*#__PURE__*/ function(WordLeftCommand) {
    "use strict";
    _helpers.inherits(CursorWordStartLeftSelect, WordLeftCommand);
    var _super = _helpers.createSuper(CursorWordStartLeftSelect);
    function CursorWordStartLeftSelect() {
        _helpers.classCallCheck(this, CursorWordStartLeftSelect);
        return _super.call(this, {
            inSelectionMode: true,
            wordNavigationType: 0 /* WordStart */ ,
            id: 'cursorWordStartLeftSelect',
            precondition: undefined
        });
    }
    return CursorWordStartLeftSelect;
}(WordLeftCommand);
var CursorWordEndLeftSelect = /*#__PURE__*/ function(WordLeftCommand) {
    "use strict";
    _helpers.inherits(CursorWordEndLeftSelect, WordLeftCommand);
    var _super = _helpers.createSuper(CursorWordEndLeftSelect);
    function CursorWordEndLeftSelect() {
        _helpers.classCallCheck(this, CursorWordEndLeftSelect);
        return _super.call(this, {
            inSelectionMode: true,
            wordNavigationType: 2 /* WordEnd */ ,
            id: 'cursorWordEndLeftSelect',
            precondition: undefined
        });
    }
    return CursorWordEndLeftSelect;
}(WordLeftCommand);
var CursorWordLeftSelect = /*#__PURE__*/ function(WordLeftCommand) {
    "use strict";
    _helpers.inherits(CursorWordLeftSelect, WordLeftCommand);
    var _super = _helpers.createSuper(CursorWordLeftSelect);
    function CursorWordLeftSelect() {
        _helpers.classCallCheck(this, CursorWordLeftSelect);
        var _a;
        return _super.call(this, {
            inSelectionMode: true,
            wordNavigationType: 1 /* WordStartFast */ ,
            id: 'cursorWordLeftSelect',
            precondition: undefined,
            kbOpts: {
                kbExpr: _contextkeyJs.ContextKeyExpr.and(_editorContextKeysJs.EditorContextKeys.textInputFocus, (_a = _contextkeyJs.ContextKeyExpr.and(_accessibilityJs.CONTEXT_ACCESSIBILITY_MODE_ENABLED, _contextkeysJs.IsWindowsContext)) === null || _a === void 0 ? void 0 : _a.negate()),
                primary: 3087 /* LeftArrow */ ,
                mac: {
                    primary: 1551 /* LeftArrow */ 
                },
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    return CursorWordLeftSelect;
}(WordLeftCommand);
var CursorWordAccessibilityLeft = /*#__PURE__*/ function(WordLeftCommand) {
    "use strict";
    _helpers.inherits(CursorWordAccessibilityLeft, WordLeftCommand);
    var _super = _helpers.createSuper(CursorWordAccessibilityLeft);
    function CursorWordAccessibilityLeft() {
        _helpers.classCallCheck(this, CursorWordAccessibilityLeft);
        return _super.call(this, {
            inSelectionMode: false,
            wordNavigationType: 3 /* WordAccessibility */ ,
            id: 'cursorWordAccessibilityLeft',
            precondition: undefined
        });
    }
    _helpers.createClass(CursorWordAccessibilityLeft, [
        {
            key: "_move",
            value: function _move(_, model, position, wordNavigationType) {
                return _helpers.get(_helpers.getPrototypeOf(CursorWordAccessibilityLeft.prototype), "_move", this).call(this, _wordCharacterClassifierJs.getMapForWordSeparators(_editorOptionsJs.EditorOptions.wordSeparators.defaultValue), model, position, wordNavigationType);
            }
        }
    ]);
    return CursorWordAccessibilityLeft;
}(WordLeftCommand);
var CursorWordAccessibilityLeftSelect = /*#__PURE__*/ function(WordLeftCommand) {
    "use strict";
    _helpers.inherits(CursorWordAccessibilityLeftSelect, WordLeftCommand);
    var _super = _helpers.createSuper(CursorWordAccessibilityLeftSelect);
    function CursorWordAccessibilityLeftSelect() {
        _helpers.classCallCheck(this, CursorWordAccessibilityLeftSelect);
        return _super.call(this, {
            inSelectionMode: true,
            wordNavigationType: 3 /* WordAccessibility */ ,
            id: 'cursorWordAccessibilityLeftSelect',
            precondition: undefined
        });
    }
    _helpers.createClass(CursorWordAccessibilityLeftSelect, [
        {
            key: "_move",
            value: function _move(_, model, position, wordNavigationType) {
                return _helpers.get(_helpers.getPrototypeOf(CursorWordAccessibilityLeftSelect.prototype), "_move", this).call(this, _wordCharacterClassifierJs.getMapForWordSeparators(_editorOptionsJs.EditorOptions.wordSeparators.defaultValue), model, position, wordNavigationType);
            }
        }
    ]);
    return CursorWordAccessibilityLeftSelect;
}(WordLeftCommand);
var CursorWordStartRight = /*#__PURE__*/ function(WordRightCommand) {
    "use strict";
    _helpers.inherits(CursorWordStartRight, WordRightCommand);
    var _super = _helpers.createSuper(CursorWordStartRight);
    function CursorWordStartRight() {
        _helpers.classCallCheck(this, CursorWordStartRight);
        return _super.call(this, {
            inSelectionMode: false,
            wordNavigationType: 0 /* WordStart */ ,
            id: 'cursorWordStartRight',
            precondition: undefined
        });
    }
    return CursorWordStartRight;
}(WordRightCommand);
var CursorWordEndRight = /*#__PURE__*/ function(WordRightCommand) {
    "use strict";
    _helpers.inherits(CursorWordEndRight, WordRightCommand);
    var _super = _helpers.createSuper(CursorWordEndRight);
    function CursorWordEndRight() {
        _helpers.classCallCheck(this, CursorWordEndRight);
        var _a;
        return _super.call(this, {
            inSelectionMode: false,
            wordNavigationType: 2 /* WordEnd */ ,
            id: 'cursorWordEndRight',
            precondition: undefined,
            kbOpts: {
                kbExpr: _contextkeyJs.ContextKeyExpr.and(_editorContextKeysJs.EditorContextKeys.textInputFocus, (_a = _contextkeyJs.ContextKeyExpr.and(_accessibilityJs.CONTEXT_ACCESSIBILITY_MODE_ENABLED, _contextkeysJs.IsWindowsContext)) === null || _a === void 0 ? void 0 : _a.negate()),
                primary: 2065 /* RightArrow */ ,
                mac: {
                    primary: 529 /* RightArrow */ 
                },
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    return CursorWordEndRight;
}(WordRightCommand);
var CursorWordRight = /*#__PURE__*/ function(WordRightCommand) {
    "use strict";
    _helpers.inherits(CursorWordRight, WordRightCommand);
    var _super = _helpers.createSuper(CursorWordRight);
    function CursorWordRight() {
        _helpers.classCallCheck(this, CursorWordRight);
        return _super.call(this, {
            inSelectionMode: false,
            wordNavigationType: 2 /* WordEnd */ ,
            id: 'cursorWordRight',
            precondition: undefined
        });
    }
    return CursorWordRight;
}(WordRightCommand);
var CursorWordStartRightSelect = /*#__PURE__*/ function(WordRightCommand) {
    "use strict";
    _helpers.inherits(CursorWordStartRightSelect, WordRightCommand);
    var _super = _helpers.createSuper(CursorWordStartRightSelect);
    function CursorWordStartRightSelect() {
        _helpers.classCallCheck(this, CursorWordStartRightSelect);
        return _super.call(this, {
            inSelectionMode: true,
            wordNavigationType: 0 /* WordStart */ ,
            id: 'cursorWordStartRightSelect',
            precondition: undefined
        });
    }
    return CursorWordStartRightSelect;
}(WordRightCommand);
var CursorWordEndRightSelect = /*#__PURE__*/ function(WordRightCommand) {
    "use strict";
    _helpers.inherits(CursorWordEndRightSelect, WordRightCommand);
    var _super = _helpers.createSuper(CursorWordEndRightSelect);
    function CursorWordEndRightSelect() {
        _helpers.classCallCheck(this, CursorWordEndRightSelect);
        var _a;
        return _super.call(this, {
            inSelectionMode: true,
            wordNavigationType: 2 /* WordEnd */ ,
            id: 'cursorWordEndRightSelect',
            precondition: undefined,
            kbOpts: {
                kbExpr: _contextkeyJs.ContextKeyExpr.and(_editorContextKeysJs.EditorContextKeys.textInputFocus, (_a = _contextkeyJs.ContextKeyExpr.and(_accessibilityJs.CONTEXT_ACCESSIBILITY_MODE_ENABLED, _contextkeysJs.IsWindowsContext)) === null || _a === void 0 ? void 0 : _a.negate()),
                primary: 3089 /* RightArrow */ ,
                mac: {
                    primary: 1553 /* RightArrow */ 
                },
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    return CursorWordEndRightSelect;
}(WordRightCommand);
var CursorWordRightSelect = /*#__PURE__*/ function(WordRightCommand) {
    "use strict";
    _helpers.inherits(CursorWordRightSelect, WordRightCommand);
    var _super = _helpers.createSuper(CursorWordRightSelect);
    function CursorWordRightSelect() {
        _helpers.classCallCheck(this, CursorWordRightSelect);
        return _super.call(this, {
            inSelectionMode: true,
            wordNavigationType: 2 /* WordEnd */ ,
            id: 'cursorWordRightSelect',
            precondition: undefined
        });
    }
    return CursorWordRightSelect;
}(WordRightCommand);
var CursorWordAccessibilityRight = /*#__PURE__*/ function(WordRightCommand) {
    "use strict";
    _helpers.inherits(CursorWordAccessibilityRight, WordRightCommand);
    var _super = _helpers.createSuper(CursorWordAccessibilityRight);
    function CursorWordAccessibilityRight() {
        _helpers.classCallCheck(this, CursorWordAccessibilityRight);
        return _super.call(this, {
            inSelectionMode: false,
            wordNavigationType: 3 /* WordAccessibility */ ,
            id: 'cursorWordAccessibilityRight',
            precondition: undefined
        });
    }
    _helpers.createClass(CursorWordAccessibilityRight, [
        {
            key: "_move",
            value: function _move(_, model, position, wordNavigationType) {
                return _helpers.get(_helpers.getPrototypeOf(CursorWordAccessibilityRight.prototype), "_move", this).call(this, _wordCharacterClassifierJs.getMapForWordSeparators(_editorOptionsJs.EditorOptions.wordSeparators.defaultValue), model, position, wordNavigationType);
            }
        }
    ]);
    return CursorWordAccessibilityRight;
}(WordRightCommand);
var CursorWordAccessibilityRightSelect = /*#__PURE__*/ function(WordRightCommand) {
    "use strict";
    _helpers.inherits(CursorWordAccessibilityRightSelect, WordRightCommand);
    var _super = _helpers.createSuper(CursorWordAccessibilityRightSelect);
    function CursorWordAccessibilityRightSelect() {
        _helpers.classCallCheck(this, CursorWordAccessibilityRightSelect);
        return _super.call(this, {
            inSelectionMode: true,
            wordNavigationType: 3 /* WordAccessibility */ ,
            id: 'cursorWordAccessibilityRightSelect',
            precondition: undefined
        });
    }
    _helpers.createClass(CursorWordAccessibilityRightSelect, [
        {
            key: "_move",
            value: function _move(_, model, position, wordNavigationType) {
                return _helpers.get(_helpers.getPrototypeOf(CursorWordAccessibilityRightSelect.prototype), "_move", this).call(this, _wordCharacterClassifierJs.getMapForWordSeparators(_editorOptionsJs.EditorOptions.wordSeparators.defaultValue), model, position, wordNavigationType);
            }
        }
    ]);
    return CursorWordAccessibilityRightSelect;
}(WordRightCommand);
var DeleteWordCommand = /*#__PURE__*/ function(EditorCommand) {
    "use strict";
    _helpers.inherits(DeleteWordCommand, EditorCommand);
    var _super = _helpers.createSuper(DeleteWordCommand);
    function DeleteWordCommand(opts) {
        _helpers.classCallCheck(this, DeleteWordCommand);
        var _this;
        _this = _super.call(this, opts);
        _this._whitespaceHeuristics = opts.whitespaceHeuristics;
        _this._wordNavigationType = opts.wordNavigationType;
        return _this;
    }
    _helpers.createClass(DeleteWordCommand, [
        {
            key: "runEditorCommand",
            value: function runEditorCommand(accessor, editor, args) {
                var _this = this;
                if (!editor.hasModel()) return;
                var wordSeparators = _wordCharacterClassifierJs.getMapForWordSeparators(editor.getOption(116 /* wordSeparators */ ));
                var model = editor.getModel();
                var selections = editor.getSelections();
                var autoClosingBrackets = editor.getOption(5 /* autoClosingBrackets */ );
                var autoClosingQuotes = editor.getOption(8 /* autoClosingQuotes */ );
                var autoClosingPairs = _languageConfigurationRegistryJs.LanguageConfigurationRegistry.getAutoClosingPairs(model.getLanguageId());
                var viewModel = editor._getViewModel();
                var commands = selections.map(function(sel) {
                    var deleteRange = _this._delete({
                        wordSeparators: wordSeparators,
                        model: model,
                        selection: sel,
                        whitespaceHeuristics: _this._whitespaceHeuristics,
                        autoClosingDelete: editor.getOption(6 /* autoClosingDelete */ ),
                        autoClosingBrackets: autoClosingBrackets,
                        autoClosingQuotes: autoClosingQuotes,
                        autoClosingPairs: autoClosingPairs,
                        autoClosedCharacters: viewModel.getCursorAutoClosedCharacters()
                    }, _this._wordNavigationType);
                    return new _replaceCommandJs.ReplaceCommand(deleteRange, '');
                });
                editor.pushUndoStop();
                editor.executeCommands(this.id, commands);
                editor.pushUndoStop();
            }
        }
    ]);
    return DeleteWordCommand;
}(_editorExtensionsJs.EditorCommand);
var DeleteWordLeftCommand = /*#__PURE__*/ function(DeleteWordCommand) {
    "use strict";
    _helpers.inherits(DeleteWordLeftCommand, DeleteWordCommand);
    var _super = _helpers.createSuper(DeleteWordLeftCommand);
    function DeleteWordLeftCommand() {
        _helpers.classCallCheck(this, DeleteWordLeftCommand);
        return _super.apply(this, arguments);
    }
    _helpers.createClass(DeleteWordLeftCommand, [
        {
            key: "_delete",
            value: function _delete(ctx, wordNavigationType) {
                var r = _cursorWordOperationsJs.WordOperations.deleteWordLeft(ctx, wordNavigationType);
                if (r) return r;
                return new _rangeJs.Range(1, 1, 1, 1);
            }
        }
    ]);
    return DeleteWordLeftCommand;
}(DeleteWordCommand);
var DeleteWordRightCommand = /*#__PURE__*/ function(DeleteWordCommand) {
    "use strict";
    _helpers.inherits(DeleteWordRightCommand, DeleteWordCommand);
    var _super = _helpers.createSuper(DeleteWordRightCommand);
    function DeleteWordRightCommand() {
        _helpers.classCallCheck(this, DeleteWordRightCommand);
        return _super.apply(this, arguments);
    }
    _helpers.createClass(DeleteWordRightCommand, [
        {
            key: "_delete",
            value: function _delete(ctx, wordNavigationType) {
                var r = _cursorWordOperationsJs.WordOperations.deleteWordRight(ctx, wordNavigationType);
                if (r) return r;
                var lineCount = ctx.model.getLineCount();
                var maxColumn = ctx.model.getLineMaxColumn(lineCount);
                return new _rangeJs.Range(lineCount, maxColumn, lineCount, maxColumn);
            }
        }
    ]);
    return DeleteWordRightCommand;
}(DeleteWordCommand);
var DeleteWordStartLeft = /*#__PURE__*/ function(DeleteWordLeftCommand) {
    "use strict";
    _helpers.inherits(DeleteWordStartLeft, DeleteWordLeftCommand);
    var _super = _helpers.createSuper(DeleteWordStartLeft);
    function DeleteWordStartLeft() {
        _helpers.classCallCheck(this, DeleteWordStartLeft);
        return _super.call(this, {
            whitespaceHeuristics: false,
            wordNavigationType: 0 /* WordStart */ ,
            id: 'deleteWordStartLeft',
            precondition: _editorContextKeysJs.EditorContextKeys.writable
        });
    }
    return DeleteWordStartLeft;
}(DeleteWordLeftCommand);
var DeleteWordEndLeft = /*#__PURE__*/ function(DeleteWordLeftCommand) {
    "use strict";
    _helpers.inherits(DeleteWordEndLeft, DeleteWordLeftCommand);
    var _super = _helpers.createSuper(DeleteWordEndLeft);
    function DeleteWordEndLeft() {
        _helpers.classCallCheck(this, DeleteWordEndLeft);
        return _super.call(this, {
            whitespaceHeuristics: false,
            wordNavigationType: 2 /* WordEnd */ ,
            id: 'deleteWordEndLeft',
            precondition: _editorContextKeysJs.EditorContextKeys.writable
        });
    }
    return DeleteWordEndLeft;
}(DeleteWordLeftCommand);
var DeleteWordLeft = /*#__PURE__*/ function(DeleteWordLeftCommand) {
    "use strict";
    _helpers.inherits(DeleteWordLeft, DeleteWordLeftCommand);
    var _super = _helpers.createSuper(DeleteWordLeft);
    function DeleteWordLeft() {
        _helpers.classCallCheck(this, DeleteWordLeft);
        return _super.call(this, {
            whitespaceHeuristics: true,
            wordNavigationType: 0 /* WordStart */ ,
            id: 'deleteWordLeft',
            precondition: _editorContextKeysJs.EditorContextKeys.writable,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.textInputFocus,
                primary: 2049 /* Backspace */ ,
                mac: {
                    primary: 513 /* Backspace */ 
                },
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    return DeleteWordLeft;
}(DeleteWordLeftCommand);
var DeleteWordStartRight = /*#__PURE__*/ function(DeleteWordRightCommand) {
    "use strict";
    _helpers.inherits(DeleteWordStartRight, DeleteWordRightCommand);
    var _super = _helpers.createSuper(DeleteWordStartRight);
    function DeleteWordStartRight() {
        _helpers.classCallCheck(this, DeleteWordStartRight);
        return _super.call(this, {
            whitespaceHeuristics: false,
            wordNavigationType: 0 /* WordStart */ ,
            id: 'deleteWordStartRight',
            precondition: _editorContextKeysJs.EditorContextKeys.writable
        });
    }
    return DeleteWordStartRight;
}(DeleteWordRightCommand);
var DeleteWordEndRight = /*#__PURE__*/ function(DeleteWordRightCommand) {
    "use strict";
    _helpers.inherits(DeleteWordEndRight, DeleteWordRightCommand);
    var _super = _helpers.createSuper(DeleteWordEndRight);
    function DeleteWordEndRight() {
        _helpers.classCallCheck(this, DeleteWordEndRight);
        return _super.call(this, {
            whitespaceHeuristics: false,
            wordNavigationType: 2 /* WordEnd */ ,
            id: 'deleteWordEndRight',
            precondition: _editorContextKeysJs.EditorContextKeys.writable
        });
    }
    return DeleteWordEndRight;
}(DeleteWordRightCommand);
var DeleteWordRight = /*#__PURE__*/ function(DeleteWordRightCommand) {
    "use strict";
    _helpers.inherits(DeleteWordRight, DeleteWordRightCommand);
    var _super = _helpers.createSuper(DeleteWordRight);
    function DeleteWordRight() {
        _helpers.classCallCheck(this, DeleteWordRight);
        return _super.call(this, {
            whitespaceHeuristics: true,
            wordNavigationType: 2 /* WordEnd */ ,
            id: 'deleteWordRight',
            precondition: _editorContextKeysJs.EditorContextKeys.writable,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.textInputFocus,
                primary: 2068 /* Delete */ ,
                mac: {
                    primary: 532 /* Delete */ 
                },
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    return DeleteWordRight;
}(DeleteWordRightCommand);
var DeleteInsideWord = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(DeleteInsideWord, EditorAction);
    var _super = _helpers.createSuper(DeleteInsideWord);
    function DeleteInsideWord() {
        _helpers.classCallCheck(this, DeleteInsideWord);
        return _super.call(this, {
            id: 'deleteInsideWord',
            precondition: _editorContextKeysJs.EditorContextKeys.writable,
            label: _nlsJs.localize('deleteInsideWord', "Delete Word"),
            alias: 'Delete Word'
        });
    }
    _helpers.createClass(DeleteInsideWord, [
        {
            key: "run",
            value: function run(accessor, editor, args) {
                if (!editor.hasModel()) return;
                var wordSeparators = _wordCharacterClassifierJs.getMapForWordSeparators(editor.getOption(116 /* wordSeparators */ ));
                var model = editor.getModel();
                var selections = editor.getSelections();
                var commands = selections.map(function(sel) {
                    var deleteRange = _cursorWordOperationsJs.WordOperations.deleteInsideWord(wordSeparators, model, sel);
                    return new _replaceCommandJs.ReplaceCommand(deleteRange, '');
                });
                editor.pushUndoStop();
                editor.executeCommands(this.id, commands);
                editor.pushUndoStop();
            }
        }
    ]);
    return DeleteInsideWord;
}(_editorExtensionsJs.EditorAction);
_editorExtensionsJs.registerEditorCommand(new CursorWordStartLeft());
_editorExtensionsJs.registerEditorCommand(new CursorWordEndLeft());
_editorExtensionsJs.registerEditorCommand(new CursorWordLeft());
_editorExtensionsJs.registerEditorCommand(new CursorWordStartLeftSelect());
_editorExtensionsJs.registerEditorCommand(new CursorWordEndLeftSelect());
_editorExtensionsJs.registerEditorCommand(new CursorWordLeftSelect());
_editorExtensionsJs.registerEditorCommand(new CursorWordStartRight());
_editorExtensionsJs.registerEditorCommand(new CursorWordEndRight());
_editorExtensionsJs.registerEditorCommand(new CursorWordRight());
_editorExtensionsJs.registerEditorCommand(new CursorWordStartRightSelect());
_editorExtensionsJs.registerEditorCommand(new CursorWordEndRightSelect());
_editorExtensionsJs.registerEditorCommand(new CursorWordRightSelect());
_editorExtensionsJs.registerEditorCommand(new CursorWordAccessibilityLeft());
_editorExtensionsJs.registerEditorCommand(new CursorWordAccessibilityLeftSelect());
_editorExtensionsJs.registerEditorCommand(new CursorWordAccessibilityRight());
_editorExtensionsJs.registerEditorCommand(new CursorWordAccessibilityRightSelect());
_editorExtensionsJs.registerEditorCommand(new DeleteWordStartLeft());
_editorExtensionsJs.registerEditorCommand(new DeleteWordEndLeft());
_editorExtensionsJs.registerEditorCommand(new DeleteWordLeft());
_editorExtensionsJs.registerEditorCommand(new DeleteWordStartRight());
_editorExtensionsJs.registerEditorCommand(new DeleteWordEndRight());
_editorExtensionsJs.registerEditorCommand(new DeleteWordRight());
_editorExtensionsJs.registerEditorAction(DeleteInsideWord);

},{"@swc/helpers":"erO4s","../../browser/editorExtensions.js":"dFnlo","../../common/commands/replaceCommand.js":"kkstX","../../common/config/editorOptions.js":"jb70u","../../common/controller/cursorCommon.js":"kzouZ","../../common/controller/cursorWordOperations.js":"c7Tmb","../../common/controller/wordCharacterClassifier.js":"52AHc","../../common/core/position.js":"6xP0w","../../common/core/range.js":"VbyL8","../../common/core/selection.js":"hjmnH","../../common/editorContextKeys.js":"2t2PW","../../common/modes/languageConfigurationRegistry.js":"fdCRx","../../../nls.js":"9djYb","../../../platform/accessibility/common/accessibility.js":"26z4P","../../../platform/contextkey/common/contextkey.js":"5cjav","../../../platform/contextkey/common/contextkeys.js":"9XyCu","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"bP7kk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DeleteWordPartLeft", function() {
    return DeleteWordPartLeft;
});
parcelHelpers.export(exports, "DeleteWordPartRight", function() {
    return DeleteWordPartRight;
});
parcelHelpers.export(exports, "WordPartLeftCommand", function() {
    return WordPartLeftCommand;
});
parcelHelpers.export(exports, "CursorWordPartLeft", function() {
    return CursorWordPartLeft;
});
parcelHelpers.export(exports, "CursorWordPartLeftSelect", function() {
    return CursorWordPartLeftSelect;
});
parcelHelpers.export(exports, "WordPartRightCommand", function() {
    return WordPartRightCommand;
});
parcelHelpers.export(exports, "CursorWordPartRight", function() {
    return CursorWordPartRight;
});
parcelHelpers.export(exports, "CursorWordPartRightSelect", function() {
    return CursorWordPartRightSelect;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _editorExtensionsJs = require("../../browser/editorExtensions.js");
var _cursorWordOperationsJs = require("../../common/controller/cursorWordOperations.js");
var _rangeJs = require("../../common/core/range.js");
var _editorContextKeysJs = require("../../common/editorContextKeys.js");
var _wordOperationsJs = require("../wordOperations/wordOperations.js");
var _commandsJs = require("../../../platform/commands/common/commands.js");
var DeleteWordPartLeft = /*#__PURE__*/ function(DeleteWordCommand) {
    "use strict";
    _helpers.inherits(DeleteWordPartLeft, DeleteWordCommand);
    var _super = _helpers.createSuper(DeleteWordPartLeft);
    function DeleteWordPartLeft() {
        _helpers.classCallCheck(this, DeleteWordPartLeft);
        return _super.call(this, {
            whitespaceHeuristics: true,
            wordNavigationType: 0 /* WordStart */ ,
            id: 'deleteWordPartLeft',
            precondition: _editorContextKeysJs.EditorContextKeys.writable,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.textInputFocus,
                primary: 0,
                mac: {
                    primary: 769 /* Backspace */ 
                },
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    _helpers.createClass(DeleteWordPartLeft, [
        {
            key: "_delete",
            value: function _delete(ctx, wordNavigationType) {
                var r = _cursorWordOperationsJs.WordPartOperations.deleteWordPartLeft(ctx);
                if (r) return r;
                return new _rangeJs.Range(1, 1, 1, 1);
            }
        }
    ]);
    return DeleteWordPartLeft;
}(_wordOperationsJs.DeleteWordCommand);
var DeleteWordPartRight = /*#__PURE__*/ function(DeleteWordCommand) {
    "use strict";
    _helpers.inherits(DeleteWordPartRight, DeleteWordCommand);
    var _super = _helpers.createSuper(DeleteWordPartRight);
    function DeleteWordPartRight() {
        _helpers.classCallCheck(this, DeleteWordPartRight);
        return _super.call(this, {
            whitespaceHeuristics: true,
            wordNavigationType: 2 /* WordEnd */ ,
            id: 'deleteWordPartRight',
            precondition: _editorContextKeysJs.EditorContextKeys.writable,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.textInputFocus,
                primary: 0,
                mac: {
                    primary: 788 /* Delete */ 
                },
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    _helpers.createClass(DeleteWordPartRight, [
        {
            key: "_delete",
            value: function _delete(ctx, wordNavigationType) {
                var r = _cursorWordOperationsJs.WordPartOperations.deleteWordPartRight(ctx);
                if (r) return r;
                var lineCount = ctx.model.getLineCount();
                var maxColumn = ctx.model.getLineMaxColumn(lineCount);
                return new _rangeJs.Range(lineCount, maxColumn, lineCount, maxColumn);
            }
        }
    ]);
    return DeleteWordPartRight;
}(_wordOperationsJs.DeleteWordCommand);
var WordPartLeftCommand = /*#__PURE__*/ function(MoveWordCommand) {
    "use strict";
    _helpers.inherits(WordPartLeftCommand, MoveWordCommand);
    var _super = _helpers.createSuper(WordPartLeftCommand);
    function WordPartLeftCommand() {
        _helpers.classCallCheck(this, WordPartLeftCommand);
        return _super.apply(this, arguments);
    }
    _helpers.createClass(WordPartLeftCommand, [
        {
            key: "_move",
            value: function _move(wordSeparators, model, position, wordNavigationType) {
                return _cursorWordOperationsJs.WordPartOperations.moveWordPartLeft(wordSeparators, model, position);
            }
        }
    ]);
    return WordPartLeftCommand;
}(_wordOperationsJs.MoveWordCommand);
var CursorWordPartLeft = /*#__PURE__*/ function(WordPartLeftCommand) {
    "use strict";
    _helpers.inherits(CursorWordPartLeft, WordPartLeftCommand);
    var _super = _helpers.createSuper(CursorWordPartLeft);
    function CursorWordPartLeft() {
        _helpers.classCallCheck(this, CursorWordPartLeft);
        return _super.call(this, {
            inSelectionMode: false,
            wordNavigationType: 0 /* WordStart */ ,
            id: 'cursorWordPartLeft',
            precondition: undefined,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.textInputFocus,
                primary: 0,
                mac: {
                    primary: 783 /* LeftArrow */ 
                },
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    return CursorWordPartLeft;
}(WordPartLeftCommand);
// Register previous id for compatibility purposes
_commandsJs.CommandsRegistry.registerCommandAlias('cursorWordPartStartLeft', 'cursorWordPartLeft');
var CursorWordPartLeftSelect = /*#__PURE__*/ function(WordPartLeftCommand) {
    "use strict";
    _helpers.inherits(CursorWordPartLeftSelect, WordPartLeftCommand);
    var _super = _helpers.createSuper(CursorWordPartLeftSelect);
    function CursorWordPartLeftSelect() {
        _helpers.classCallCheck(this, CursorWordPartLeftSelect);
        return _super.call(this, {
            inSelectionMode: true,
            wordNavigationType: 0 /* WordStart */ ,
            id: 'cursorWordPartLeftSelect',
            precondition: undefined,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.textInputFocus,
                primary: 0,
                mac: {
                    primary: 1807 /* LeftArrow */ 
                },
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    return CursorWordPartLeftSelect;
}(WordPartLeftCommand);
// Register previous id for compatibility purposes
_commandsJs.CommandsRegistry.registerCommandAlias('cursorWordPartStartLeftSelect', 'cursorWordPartLeftSelect');
var WordPartRightCommand = /*#__PURE__*/ function(MoveWordCommand) {
    "use strict";
    _helpers.inherits(WordPartRightCommand, MoveWordCommand);
    var _super = _helpers.createSuper(WordPartRightCommand);
    function WordPartRightCommand() {
        _helpers.classCallCheck(this, WordPartRightCommand);
        return _super.apply(this, arguments);
    }
    _helpers.createClass(WordPartRightCommand, [
        {
            key: "_move",
            value: function _move(wordSeparators, model, position, wordNavigationType) {
                return _cursorWordOperationsJs.WordPartOperations.moveWordPartRight(wordSeparators, model, position);
            }
        }
    ]);
    return WordPartRightCommand;
}(_wordOperationsJs.MoveWordCommand);
var CursorWordPartRight = /*#__PURE__*/ function(WordPartRightCommand) {
    "use strict";
    _helpers.inherits(CursorWordPartRight, WordPartRightCommand);
    var _super = _helpers.createSuper(CursorWordPartRight);
    function CursorWordPartRight() {
        _helpers.classCallCheck(this, CursorWordPartRight);
        return _super.call(this, {
            inSelectionMode: false,
            wordNavigationType: 2 /* WordEnd */ ,
            id: 'cursorWordPartRight',
            precondition: undefined,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.textInputFocus,
                primary: 0,
                mac: {
                    primary: 785 /* RightArrow */ 
                },
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    return CursorWordPartRight;
}(WordPartRightCommand);
var CursorWordPartRightSelect = /*#__PURE__*/ function(WordPartRightCommand) {
    "use strict";
    _helpers.inherits(CursorWordPartRightSelect, WordPartRightCommand);
    var _super = _helpers.createSuper(CursorWordPartRightSelect);
    function CursorWordPartRightSelect() {
        _helpers.classCallCheck(this, CursorWordPartRightSelect);
        return _super.call(this, {
            inSelectionMode: true,
            wordNavigationType: 2 /* WordEnd */ ,
            id: 'cursorWordPartRightSelect',
            precondition: undefined,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.textInputFocus,
                primary: 0,
                mac: {
                    primary: 1809 /* RightArrow */ 
                },
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    return CursorWordPartRightSelect;
}(WordPartRightCommand);
_editorExtensionsJs.registerEditorCommand(new DeleteWordPartLeft());
_editorExtensionsJs.registerEditorCommand(new DeleteWordPartRight());
_editorExtensionsJs.registerEditorCommand(new CursorWordPartLeft());
_editorExtensionsJs.registerEditorCommand(new CursorWordPartLeftSelect());
_editorExtensionsJs.registerEditorCommand(new CursorWordPartRight());
_editorExtensionsJs.registerEditorCommand(new CursorWordPartRightSelect());

},{"@swc/helpers":"erO4s","../../browser/editorExtensions.js":"dFnlo","../../common/controller/cursorWordOperations.js":"c7Tmb","../../common/core/range.js":"VbyL8","../../common/editorContextKeys.js":"2t2PW","../wordOperations/wordOperations.js":"g49mg","../../../platform/commands/common/commands.js":"eeuTC","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"2bfvT":[function(require,module,exports) {
var _helpers = require("@swc/helpers");
var _accessibilityHelpCss = require("./accessibilityHelp.css");
var _domJs = require("../../../../base/browser/dom.js");
var _fastDomNodeJs = require("../../../../base/browser/fastDomNode.js");
var _formattedTextRendererJs = require("../../../../base/browser/formattedTextRenderer.js");
var _ariaJs = require("../../../../base/browser/ui/aria/aria.js");
var _widgetJs = require("../../../../base/browser/ui/widget.js");
var _lifecycleJs = require("../../../../base/common/lifecycle.js");
var _platformJs = require("../../../../base/common/platform.js");
var _stringsJs = require("../../../../base/common/strings.js");
var _uriJs = require("../../../../base/common/uri.js");
var _editorExtensionsJs = require("../../../browser/editorExtensions.js");
var _editorContextKeysJs = require("../../../common/editorContextKeys.js");
var _toggleTabFocusModeJs = require("../../../contrib/toggleTabFocusMode/toggleTabFocusMode.js");
var _contextkeyJs = require("../../../../platform/contextkey/common/contextkey.js");
var _instantiationJs = require("../../../../platform/instantiation/common/instantiation.js");
var _keybindingJs = require("../../../../platform/keybinding/common/keybinding.js");
var _openerJs = require("../../../../platform/opener/common/opener.js");
var _colorRegistryJs = require("../../../../platform/theme/common/colorRegistry.js");
var _themeServiceJs = require("../../../../platform/theme/common/themeService.js");
var _standaloneStringsJs = require("../../../common/standaloneStrings.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var CONTEXT_ACCESSIBILITY_WIDGET_VISIBLE = new _contextkeyJs.RawContextKey('accessibilityHelpWidgetVisible', false);
var AccessibilityHelpController = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(AccessibilityHelpController1, Disposable);
    var _super = _helpers.createSuper(AccessibilityHelpController1);
    function AccessibilityHelpController1(editor, instantiationService) {
        _helpers.classCallCheck(this, AccessibilityHelpController1);
        var _this;
        _this = _super.call(this);
        _this._editor = editor;
        _this._widget = _this._register(instantiationService.createInstance(AccessibilityHelpWidget, _this._editor));
        return _this;
    }
    _helpers.createClass(AccessibilityHelpController1, [
        {
            key: "show",
            value: function show() {
                this._widget.show();
            }
        },
        {
            key: "hide",
            value: function hide() {
                this._widget.hide();
            }
        }
    ], [
        {
            key: "get",
            value: function get(editor) {
                return editor.getContribution(AccessibilityHelpController1.ID);
            }
        }
    ]);
    return AccessibilityHelpController1;
}(_lifecycleJs.Disposable);
AccessibilityHelpController.ID = 'editor.contrib.accessibilityHelpController';
AccessibilityHelpController = __decorate([
    __param(1, _instantiationJs.IInstantiationService)
], AccessibilityHelpController);
function getSelectionLabel(selections, charactersSelected) {
    if (!selections || selections.length === 0) return _standaloneStringsJs.AccessibilityHelpNLS.noSelection;
    if (selections.length === 1) {
        if (charactersSelected) return _stringsJs.format(_standaloneStringsJs.AccessibilityHelpNLS.singleSelectionRange, selections[0].positionLineNumber, selections[0].positionColumn, charactersSelected);
        return _stringsJs.format(_standaloneStringsJs.AccessibilityHelpNLS.singleSelection, selections[0].positionLineNumber, selections[0].positionColumn);
    }
    if (charactersSelected) return _stringsJs.format(_standaloneStringsJs.AccessibilityHelpNLS.multiSelectionRange, selections.length, charactersSelected);
    if (selections.length > 0) return _stringsJs.format(_standaloneStringsJs.AccessibilityHelpNLS.multiSelection, selections.length);
    return '';
}
var AccessibilityHelpWidget = /*#__PURE__*/ function(Widget) {
    "use strict";
    _helpers.inherits(AccessibilityHelpWidget1, Widget);
    var _super = _helpers.createSuper(AccessibilityHelpWidget1);
    function AccessibilityHelpWidget1(editor, _contextKeyService, _keybindingService, _openerService) {
        _helpers.classCallCheck(this, AccessibilityHelpWidget1);
        var _this;
        _this = _super.call(this);
        _this._contextKeyService = _contextKeyService;
        _this._keybindingService = _keybindingService;
        _this._openerService = _openerService;
        _this._editor = editor;
        _this._isVisibleKey = CONTEXT_ACCESSIBILITY_WIDGET_VISIBLE.bindTo(_this._contextKeyService);
        _this._domNode = _fastDomNodeJs.createFastDomNode(document.createElement('div'));
        _this._domNode.setClassName('accessibilityHelpWidget');
        _this._domNode.setDisplay('none');
        _this._domNode.setAttribute('role', 'dialog');
        _this._domNode.setAttribute('aria-hidden', 'true');
        _this._contentDomNode = _fastDomNodeJs.createFastDomNode(document.createElement('div'));
        _this._contentDomNode.setAttribute('role', 'document');
        _this._domNode.appendChild(_this._contentDomNode);
        _this._isVisible = false;
        _this._register(_this._editor.onDidLayoutChange(function() {
            if (_this._isVisible) _this._layout();
        }));
        // Intentionally not configurable!
        _this._register(_domJs.addStandardDisposableListener(_this._contentDomNode.domNode, 'keydown', function(e) {
            if (!_this._isVisible) return;
            if (e.equals(2083 /* KeyE */ )) {
                _ariaJs.alert(_standaloneStringsJs.AccessibilityHelpNLS.emergencyConfOn);
                _this._editor.updateOptions({
                    accessibilitySupport: 'on'
                });
                _domJs.clearNode(_this._contentDomNode.domNode);
                _this._buildContent();
                _this._contentDomNode.domNode.focus();
                e.preventDefault();
                e.stopPropagation();
            }
            if (e.equals(2086 /* KeyH */ )) {
                _ariaJs.alert(_standaloneStringsJs.AccessibilityHelpNLS.openingDocs);
                var url = _this._editor.getRawOptions().accessibilityHelpUrl;
                if (typeof url === 'undefined') url = 'https://go.microsoft.com/fwlink/?linkid=852450';
                _this._openerService.open(_uriJs.URI.parse(url));
                e.preventDefault();
                e.stopPropagation();
            }
        }));
        _this.onblur(_this._contentDomNode.domNode, function() {
            _this.hide();
        });
        _this._editor.addOverlayWidget(_helpers.assertThisInitialized(_this));
        return _this;
    }
    _helpers.createClass(AccessibilityHelpWidget1, [
        {
            key: "dispose",
            value: function dispose() {
                this._editor.removeOverlayWidget(this);
                _helpers.get(_helpers.getPrototypeOf(AccessibilityHelpWidget1.prototype), "dispose", this).call(this);
            }
        },
        {
            key: "getId",
            value: function getId() {
                return AccessibilityHelpWidget1.ID;
            }
        },
        {
            key: "getDomNode",
            value: function getDomNode() {
                return this._domNode.domNode;
            }
        },
        {
            key: "getPosition",
            value: function getPosition() {
                return {
                    preference: null
                };
            }
        },
        {
            key: "show",
            value: function show() {
                if (this._isVisible) return;
                this._isVisible = true;
                this._isVisibleKey.set(true);
                this._layout();
                this._domNode.setDisplay('block');
                this._domNode.setAttribute('aria-hidden', 'false');
                this._contentDomNode.domNode.tabIndex = 0;
                this._buildContent();
                this._contentDomNode.domNode.focus();
            }
        },
        {
            key: "_descriptionForCommand",
            value: function _descriptionForCommand(commandId, msg, noKbMsg) {
                var kb = this._keybindingService.lookupKeybinding(commandId);
                if (kb) return _stringsJs.format(msg, kb.getAriaLabel());
                return _stringsJs.format(noKbMsg, commandId);
            }
        },
        {
            key: "_buildContent",
            value: function _buildContent() {
                var options = this._editor.getOptions();
                var selections = this._editor.getSelections();
                var charactersSelected = 0;
                if (selections) {
                    var model = this._editor.getModel();
                    if (model) selections.forEach(function(selection) {
                        charactersSelected += model.getValueLengthInRange(selection);
                    });
                }
                var text = getSelectionLabel(selections, charactersSelected);
                if (options.get(53 /* inDiffEditor */ )) {
                    if (options.get(80 /* readOnly */ )) text += _standaloneStringsJs.AccessibilityHelpNLS.readonlyDiffEditor;
                    else text += _standaloneStringsJs.AccessibilityHelpNLS.editableDiffEditor;
                } else if (options.get(80 /* readOnly */ )) text += _standaloneStringsJs.AccessibilityHelpNLS.readonlyEditor;
                else text += _standaloneStringsJs.AccessibilityHelpNLS.editableEditor;
                var turnOnMessage = _platformJs.isMacintosh ? _standaloneStringsJs.AccessibilityHelpNLS.changeConfigToOnMac : _standaloneStringsJs.AccessibilityHelpNLS.changeConfigToOnWinLinux;
                switch(options.get(2 /* accessibilitySupport */ )){
                    case 0 /* Unknown */ :
                        text += '\n\n - ' + turnOnMessage;
                        break;
                    case 2 /* Enabled */ :
                        text += '\n\n - ' + _standaloneStringsJs.AccessibilityHelpNLS.auto_on;
                        break;
                    case 1 /* Disabled */ :
                        text += '\n\n - ' + _standaloneStringsJs.AccessibilityHelpNLS.auto_off;
                        text += ' ' + turnOnMessage;
                        break;
                }
                if (options.get(129 /* tabFocusMode */ )) text += '\n\n - ' + this._descriptionForCommand(_toggleTabFocusModeJs.ToggleTabFocusModeAction.ID, _standaloneStringsJs.AccessibilityHelpNLS.tabFocusModeOnMsg, _standaloneStringsJs.AccessibilityHelpNLS.tabFocusModeOnMsgNoKb);
                else text += '\n\n - ' + this._descriptionForCommand(_toggleTabFocusModeJs.ToggleTabFocusModeAction.ID, _standaloneStringsJs.AccessibilityHelpNLS.tabFocusModeOffMsg, _standaloneStringsJs.AccessibilityHelpNLS.tabFocusModeOffMsgNoKb);
                var openDocMessage = _platformJs.isMacintosh ? _standaloneStringsJs.AccessibilityHelpNLS.openDocMac : _standaloneStringsJs.AccessibilityHelpNLS.openDocWinLinux;
                text += '\n\n - ' + openDocMessage;
                text += '\n\n' + _standaloneStringsJs.AccessibilityHelpNLS.outroMsg;
                this._contentDomNode.domNode.appendChild(_formattedTextRendererJs.renderFormattedText(text));
                // Per https://www.w3.org/TR/wai-aria/roles#document, Authors SHOULD provide a title or label for documents
                this._contentDomNode.domNode.setAttribute('aria-label', text);
            }
        },
        {
            key: "hide",
            value: function hide() {
                if (!this._isVisible) return;
                this._isVisible = false;
                this._isVisibleKey.reset();
                this._domNode.setDisplay('none');
                this._domNode.setAttribute('aria-hidden', 'true');
                this._contentDomNode.domNode.tabIndex = -1;
                _domJs.clearNode(this._contentDomNode.domNode);
                this._editor.focus();
            }
        },
        {
            key: "_layout",
            value: function _layout() {
                var editorLayout = this._editor.getLayoutInfo();
                var w = Math.max(5, Math.min(AccessibilityHelpWidget1.WIDTH, editorLayout.width - 40));
                var h = Math.max(5, Math.min(AccessibilityHelpWidget1.HEIGHT, editorLayout.height - 40));
                this._domNode.setWidth(w);
                this._domNode.setHeight(h);
                var top = Math.round((editorLayout.height - h) / 2);
                this._domNode.setTop(top);
                var left = Math.round((editorLayout.width - w) / 2);
                this._domNode.setLeft(left);
            }
        }
    ]);
    return AccessibilityHelpWidget1;
}(_widgetJs.Widget);
AccessibilityHelpWidget.ID = 'editor.contrib.accessibilityHelpWidget';
AccessibilityHelpWidget.WIDTH = 500;
AccessibilityHelpWidget.HEIGHT = 300;
AccessibilityHelpWidget = __decorate([
    __param(1, _contextkeyJs.IContextKeyService),
    __param(2, _keybindingJs.IKeybindingService),
    __param(3, _openerJs.IOpenerService)
], AccessibilityHelpWidget);
var ShowAccessibilityHelpAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(ShowAccessibilityHelpAction, EditorAction);
    var _super = _helpers.createSuper(ShowAccessibilityHelpAction);
    function ShowAccessibilityHelpAction() {
        _helpers.classCallCheck(this, ShowAccessibilityHelpAction);
        return _super.call(this, {
            id: 'editor.action.showAccessibilityHelp',
            label: _standaloneStringsJs.AccessibilityHelpNLS.showAccessibilityHelpAction,
            alias: 'Show Accessibility Help',
            precondition: undefined,
            kbOpts: {
                primary: 571 /* F1 */ ,
                weight: 100 /* EditorContrib */ ,
                linux: {
                    primary: 1595 /* F1 */ ,
                    secondary: [
                        571 /* F1 */ 
                    ]
                }
            }
        });
    }
    _helpers.createClass(ShowAccessibilityHelpAction, [
        {
            key: "run",
            value: function run(accessor, editor) {
                var controller = AccessibilityHelpController.get(editor);
                if (controller) controller.show();
            }
        }
    ]);
    return ShowAccessibilityHelpAction;
}(_editorExtensionsJs.EditorAction);
_editorExtensionsJs.registerEditorContribution(AccessibilityHelpController.ID, AccessibilityHelpController);
_editorExtensionsJs.registerEditorAction(ShowAccessibilityHelpAction);
var AccessibilityHelpCommand = _editorExtensionsJs.EditorCommand.bindToContribution(AccessibilityHelpController.get);
_editorExtensionsJs.registerEditorCommand(new AccessibilityHelpCommand({
    id: 'closeAccessibilityHelp',
    precondition: CONTEXT_ACCESSIBILITY_WIDGET_VISIBLE,
    handler: function(x) {
        return x.hide();
    },
    kbOpts: {
        weight: 200,
        kbExpr: _editorContextKeysJs.EditorContextKeys.focus,
        primary: 9 /* Escape */ ,
        secondary: [
            1033 /* Escape */ 
        ]
    }
}));
_themeServiceJs.registerThemingParticipant(function(theme, collector) {
    var widgetBackground = theme.getColor(_colorRegistryJs.editorWidgetBackground);
    if (widgetBackground) collector.addRule(".monaco-editor .accessibilityHelpWidget { background-color: ".concat(widgetBackground, "; }"));
    var widgetForeground = theme.getColor(_colorRegistryJs.editorWidgetForeground);
    if (widgetForeground) collector.addRule(".monaco-editor .accessibilityHelpWidget { color: ".concat(widgetForeground, "; }"));
    var widgetShadowColor = theme.getColor(_colorRegistryJs.widgetShadow);
    if (widgetShadowColor) collector.addRule(".monaco-editor .accessibilityHelpWidget { box-shadow: 0 2px 8px ".concat(widgetShadowColor, "; }"));
    var hcBorder = theme.getColor(_colorRegistryJs.contrastBorder);
    if (hcBorder) collector.addRule(".monaco-editor .accessibilityHelpWidget { border: 2px solid ".concat(hcBorder, "; }"));
});

},{"@swc/helpers":"erO4s","./accessibilityHelp.css":"gVVe6","../../../../base/browser/dom.js":"bxmlc","../../../../base/browser/fastDomNode.js":"gph4o","../../../../base/browser/formattedTextRenderer.js":"7xqRg","../../../../base/browser/ui/aria/aria.js":"8SLUe","../../../../base/browser/ui/widget.js":"2HEtf","../../../../base/common/lifecycle.js":"bcbPy","../../../../base/common/platform.js":"8pohV","../../../../base/common/strings.js":"jsb6w","../../../../base/common/uri.js":"4ZDLf","../../../browser/editorExtensions.js":"dFnlo","../../../common/editorContextKeys.js":"2t2PW","../../../contrib/toggleTabFocusMode/toggleTabFocusMode.js":"brrTf","../../../../platform/contextkey/common/contextkey.js":"5cjav","../../../../platform/instantiation/common/instantiation.js":"9ABZB","../../../../platform/keybinding/common/keybinding.js":"5rr15","../../../../platform/opener/common/opener.js":"nEUGw","../../../../platform/theme/common/colorRegistry.js":"lKtxS","../../../../platform/theme/common/themeService.js":"kE7QB","../../../common/standaloneStrings.js":"325YA"}],"gVVe6":[function() {},{}],"dG7U7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "IPadShowKeyboard", function() {
    return IPadShowKeyboard;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _iPadShowKeyboardCss = require("./iPadShowKeyboard.css");
var _domJs = require("../../../../base/browser/dom.js");
var _lifecycleJs = require("../../../../base/common/lifecycle.js");
var _editorExtensionsJs = require("../../../browser/editorExtensions.js");
var _platformJs = require("../../../../base/common/platform.js");
var IPadShowKeyboard = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(IPadShowKeyboard, Disposable);
    var _super = _helpers.createSuper(IPadShowKeyboard);
    function IPadShowKeyboard(editor) {
        _helpers.classCallCheck(this, IPadShowKeyboard);
        var _this;
        _this = _super.call(this);
        _this.editor = editor;
        _this.widget = null;
        if (_platformJs.isIOS) {
            _this._register(editor.onDidChangeConfiguration(function() {
                return _this.update();
            }));
            _this.update();
        }
        return _this;
    }
    _helpers.createClass(IPadShowKeyboard, [
        {
            key: "update",
            value: function update() {
                var shouldHaveWidget = !this.editor.getOption(80 /* readOnly */ );
                if (!this.widget && shouldHaveWidget) this.widget = new ShowKeyboardWidget(this.editor);
                else if (this.widget && !shouldHaveWidget) {
                    this.widget.dispose();
                    this.widget = null;
                }
            }
        },
        {
            key: "dispose",
            value: function dispose() {
                _helpers.get(_helpers.getPrototypeOf(IPadShowKeyboard.prototype), "dispose", this).call(this);
                if (this.widget) {
                    this.widget.dispose();
                    this.widget = null;
                }
            }
        }
    ]);
    return IPadShowKeyboard;
}(_lifecycleJs.Disposable);
IPadShowKeyboard.ID = 'editor.contrib.iPadShowKeyboard';
var ShowKeyboardWidget = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(ShowKeyboardWidget, Disposable);
    var _super = _helpers.createSuper(ShowKeyboardWidget);
    function ShowKeyboardWidget(editor) {
        _helpers.classCallCheck(this, ShowKeyboardWidget);
        var _this;
        _this = _super.call(this);
        _this.editor = editor;
        _this._domNode = document.createElement('textarea');
        _this._domNode.className = 'iPadShowKeyboard';
        _this._register(_domJs.addDisposableListener(_this._domNode, 'touchstart', function(e) {
            _this.editor.focus();
        }));
        _this._register(_domJs.addDisposableListener(_this._domNode, 'focus', function(e) {
            _this.editor.focus();
        }));
        _this.editor.addOverlayWidget(_helpers.assertThisInitialized(_this));
        return _this;
    }
    _helpers.createClass(ShowKeyboardWidget, [
        {
            key: "dispose",
            value: function dispose() {
                this.editor.removeOverlayWidget(this);
                _helpers.get(_helpers.getPrototypeOf(ShowKeyboardWidget.prototype), "dispose", this).call(this);
            }
        },
        {
            // ----- IOverlayWidget API
            key: "getId",
            value: function getId() {
                return ShowKeyboardWidget.ID;
            }
        },
        {
            key: "getDomNode",
            value: function getDomNode() {
                return this._domNode;
            }
        },
        {
            key: "getPosition",
            value: function getPosition() {
                return {
                    preference: 1 /* BOTTOM_RIGHT_CORNER */ 
                };
            }
        }
    ]);
    return ShowKeyboardWidget;
}(_lifecycleJs.Disposable);
ShowKeyboardWidget.ID = 'editor.contrib.ShowKeyboardWidget';
_editorExtensionsJs.registerEditorContribution(IPadShowKeyboard.ID, IPadShowKeyboard);

},{"@swc/helpers":"erO4s","./iPadShowKeyboard.css":"hLMrm","../../../../base/browser/dom.js":"bxmlc","../../../../base/common/lifecycle.js":"bcbPy","../../../browser/editorExtensions.js":"dFnlo","../../../../base/common/platform.js":"8pohV","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"hLMrm":[function() {},{}],"5JtmY":[function(require,module,exports) {
var _helpers = require("@swc/helpers");
var _inspectTokensCss = require("./inspectTokens.css");
var _domJs = require("../../../../base/browser/dom.js");
var _colorJs = require("../../../../base/common/color.js");
var _lifecycleJs = require("../../../../base/common/lifecycle.js");
var _editorExtensionsJs = require("../../../browser/editorExtensions.js");
var _modesJs = require("../../../common/modes.js");
var _nullModeJs = require("../../../common/modes/nullMode.js");
var _modeServiceJs = require("../../../common/services/modeService.js");
var _standaloneThemeServiceJs = require("../../common/standaloneThemeService.js");
var _colorRegistryJs = require("../../../../platform/theme/common/colorRegistry.js");
var _themeServiceJs = require("../../../../platform/theme/common/themeService.js");
var _standaloneStringsJs = require("../../../common/standaloneStrings.js");
var _themeJs = require("../../../../platform/theme/common/theme.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var InspectTokensController = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(InspectTokensController1, Disposable);
    var _super = _helpers.createSuper(InspectTokensController1);
    function InspectTokensController1(editor, standaloneColorService, modeService) {
        _helpers.classCallCheck(this, InspectTokensController1);
        var _this;
        _this = _super.call(this);
        _this._editor = editor;
        _this._modeService = modeService;
        _this._widget = null;
        _this._register(_this._editor.onDidChangeModel(function(e) {
            return _this.stop();
        }));
        _this._register(_this._editor.onDidChangeModelLanguage(function(e) {
            return _this.stop();
        }));
        _this._register(_modesJs.TokenizationRegistry.onDidChange(function(e) {
            return _this.stop();
        }));
        _this._register(_this._editor.onKeyUp(function(e) {
            return e.keyCode === 9 /* Escape */  && _this.stop();
        }));
        return _this;
    }
    _helpers.createClass(InspectTokensController1, [
        {
            key: "dispose",
            value: function dispose() {
                this.stop();
                _helpers.get(_helpers.getPrototypeOf(InspectTokensController1.prototype), "dispose", this).call(this);
            }
        },
        {
            key: "launch",
            value: function launch() {
                if (this._widget) return;
                if (!this._editor.hasModel()) return;
                this._widget = new InspectTokensWidget(this._editor, this._modeService);
            }
        },
        {
            key: "stop",
            value: function stop() {
                if (this._widget) {
                    this._widget.dispose();
                    this._widget = null;
                }
            }
        }
    ], [
        {
            key: "get",
            value: function get(editor) {
                return editor.getContribution(InspectTokensController1.ID);
            }
        }
    ]);
    return InspectTokensController1;
}(_lifecycleJs.Disposable);
InspectTokensController.ID = 'editor.contrib.inspectTokens';
InspectTokensController = __decorate([
    __param(1, _standaloneThemeServiceJs.IStandaloneThemeService),
    __param(2, _modeServiceJs.IModeService)
], InspectTokensController);
var InspectTokens = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(InspectTokens, EditorAction);
    var _super = _helpers.createSuper(InspectTokens);
    function InspectTokens() {
        _helpers.classCallCheck(this, InspectTokens);
        return _super.call(this, {
            id: 'editor.action.inspectTokens',
            label: _standaloneStringsJs.InspectTokensNLS.inspectTokensAction,
            alias: 'Developer: Inspect Tokens',
            precondition: undefined
        });
    }
    _helpers.createClass(InspectTokens, [
        {
            key: "run",
            value: function run(accessor, editor) {
                var controller = InspectTokensController.get(editor);
                if (controller) controller.launch();
            }
        }
    ]);
    return InspectTokens;
}(_editorExtensionsJs.EditorAction);
function renderTokenText(tokenText) {
    var result = '';
    for(var charIndex = 0, len = tokenText.length; charIndex < len; charIndex++){
        var charCode = tokenText.charCodeAt(charIndex);
        switch(charCode){
            case 9 /* Tab */ :
                result += '\u2192'; // &rarr;
                break;
            case 32 /* Space */ :
                result += '\u00B7'; // &middot;
                break;
            default:
                result += String.fromCharCode(charCode);
        }
    }
    return result;
}
function getSafeTokenizationSupport(languageIdCodec, languageId) {
    var tokenizationSupport = _modesJs.TokenizationRegistry.get(languageId);
    if (tokenizationSupport) return tokenizationSupport;
    var encodedLanguageId = languageIdCodec.encodeLanguageId(languageId);
    return {
        getInitialState: function() {
            return _nullModeJs.NULL_STATE;
        },
        tokenize: function(line, hasEOL, state, deltaOffset) {
            return _nullModeJs.nullTokenize(languageId, line, state, deltaOffset);
        },
        tokenize2: function(line, hasEOL, state, deltaOffset) {
            return _nullModeJs.nullTokenize2(encodedLanguageId, line, state, deltaOffset);
        }
    };
}
var InspectTokensWidget = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(InspectTokensWidget, Disposable);
    var _super = _helpers.createSuper(InspectTokensWidget);
    function InspectTokensWidget(editor, modeService) {
        _helpers.classCallCheck(this, InspectTokensWidget);
        var _this;
        _this = _super.call(this);
        // Editor.IContentWidget.allowEditorOverflow
        _this.allowEditorOverflow = true;
        _this._editor = editor;
        _this._modeService = modeService;
        _this._model = _this._editor.getModel();
        _this._domNode = document.createElement('div');
        _this._domNode.className = 'tokens-inspect-widget';
        _this._tokenizationSupport = getSafeTokenizationSupport(_this._modeService.languageIdCodec, _this._model.getLanguageId());
        _this._compute(_this._editor.getPosition());
        _this._register(_this._editor.onDidChangeCursorPosition(function(e) {
            return _this._compute(_this._editor.getPosition());
        }));
        _this._editor.addContentWidget(_helpers.assertThisInitialized(_this));
        return _this;
    }
    _helpers.createClass(InspectTokensWidget, [
        {
            key: "dispose",
            value: function dispose() {
                this._editor.removeContentWidget(this);
                _helpers.get(_helpers.getPrototypeOf(InspectTokensWidget.prototype), "dispose", this).call(this);
            }
        },
        {
            key: "getId",
            value: function getId() {
                return InspectTokensWidget._ID;
            }
        },
        {
            key: "_compute",
            value: function _compute(position) {
                var data = this._getTokensAtLine(position.lineNumber);
                var token1Index = 0;
                for(var i = data.tokens1.length - 1; i >= 0; i--){
                    var t = data.tokens1[i];
                    if (position.column - 1 >= t.offset) {
                        token1Index = i;
                        break;
                    }
                }
                var token2Index = 0;
                for(var i1 = data.tokens2.length >>> 1; i1 >= 0; i1--)if (position.column - 1 >= data.tokens2[i1 << 1]) {
                    token2Index = i1;
                    break;
                }
                var lineContent = this._model.getLineContent(position.lineNumber);
                var tokenText = '';
                if (token1Index < data.tokens1.length) {
                    var tokenStartIndex = data.tokens1[token1Index].offset;
                    var tokenEndIndex = token1Index + 1 < data.tokens1.length ? data.tokens1[token1Index + 1].offset : lineContent.length;
                    tokenText = lineContent.substring(tokenStartIndex, tokenEndIndex);
                }
                _domJs.reset(this._domNode, _domJs.$('h2.tm-token', undefined, renderTokenText(tokenText), _domJs.$('span.tm-token-length', undefined, "".concat(tokenText.length, " ").concat(tokenText.length === 1 ? 'char' : 'chars'))));
                _domJs.append(this._domNode, _domJs.$('hr.tokens-inspect-separator', {
                    'style': 'clear:both'
                }));
                var metadata = (token2Index << 1) + 1 < data.tokens2.length ? this._decodeMetadata(data.tokens2[(token2Index << 1) + 1]) : null;
                _domJs.append(this._domNode, _domJs.$('table.tm-metadata-table', undefined, _domJs.$('tbody', undefined, _domJs.$('tr', undefined, _domJs.$('td.tm-metadata-key', undefined, 'language'), _domJs.$('td.tm-metadata-value', undefined, "".concat(metadata ? metadata.languageId : '-?-'))), _domJs.$('tr', undefined, _domJs.$('td.tm-metadata-key', undefined, 'token type'), _domJs.$('td.tm-metadata-value', undefined, "".concat(metadata ? this._tokenTypeToString(metadata.tokenType) : '-?-'))), _domJs.$('tr', undefined, _domJs.$('td.tm-metadata-key', undefined, 'font style'), _domJs.$('td.tm-metadata-value', undefined, "".concat(metadata ? this._fontStyleToString(metadata.fontStyle) : '-?-'))), _domJs.$('tr', undefined, _domJs.$('td.tm-metadata-key', undefined, 'foreground'), _domJs.$('td.tm-metadata-value', undefined, "".concat(metadata ? _colorJs.Color.Format.CSS.formatHex(metadata.foreground) : '-?-'))), _domJs.$('tr', undefined, _domJs.$('td.tm-metadata-key', undefined, 'background'), _domJs.$('td.tm-metadata-value', undefined, "".concat(metadata ? _colorJs.Color.Format.CSS.formatHex(metadata.background) : '-?-'))))));
                _domJs.append(this._domNode, _domJs.$('hr.tokens-inspect-separator'));
                if (token1Index < data.tokens1.length) _domJs.append(this._domNode, _domJs.$('span.tm-token-type', undefined, data.tokens1[token1Index].type));
                this._editor.layoutContentWidget(this);
            }
        },
        {
            key: "_decodeMetadata",
            value: function _decodeMetadata(metadata) {
                var colorMap = _modesJs.TokenizationRegistry.getColorMap();
                var languageId = _modesJs.TokenMetadata.getLanguageId(metadata);
                var tokenType = _modesJs.TokenMetadata.getTokenType(metadata);
                var fontStyle = _modesJs.TokenMetadata.getFontStyle(metadata);
                var foreground = _modesJs.TokenMetadata.getForeground(metadata);
                var background = _modesJs.TokenMetadata.getBackground(metadata);
                return {
                    languageId: this._modeService.languageIdCodec.decodeLanguageId(languageId),
                    tokenType: tokenType,
                    fontStyle: fontStyle,
                    foreground: colorMap[foreground],
                    background: colorMap[background]
                };
            }
        },
        {
            key: "_tokenTypeToString",
            value: function _tokenTypeToString(tokenType) {
                switch(tokenType){
                    case 0 /* Other */ :
                        return 'Other';
                    case 1 /* Comment */ :
                        return 'Comment';
                    case 2 /* String */ :
                        return 'String';
                    case 4 /* RegEx */ :
                        return 'RegEx';
                    default:
                        return '??';
                }
            }
        },
        {
            key: "_fontStyleToString",
            value: function _fontStyleToString(fontStyle) {
                var r = '';
                if (fontStyle & 1 /* Italic */ ) r += 'italic ';
                if (fontStyle & 2 /* Bold */ ) r += 'bold ';
                if (fontStyle & 4 /* Underline */ ) r += 'underline ';
                if (r.length === 0) r = '---';
                return r;
            }
        },
        {
            key: "_getTokensAtLine",
            value: function _getTokensAtLine(lineNumber) {
                var stateBeforeLine = this._getStateBeforeLine(lineNumber);
                var tokenizationResult1 = this._tokenizationSupport.tokenize(this._model.getLineContent(lineNumber), true, stateBeforeLine, 0);
                var tokenizationResult2 = this._tokenizationSupport.tokenize2(this._model.getLineContent(lineNumber), true, stateBeforeLine, 0);
                return {
                    startState: stateBeforeLine,
                    tokens1: tokenizationResult1.tokens,
                    tokens2: tokenizationResult2.tokens,
                    endState: tokenizationResult1.endState
                };
            }
        },
        {
            key: "_getStateBeforeLine",
            value: function _getStateBeforeLine(lineNumber) {
                var state = this._tokenizationSupport.getInitialState();
                for(var i = 1; i < lineNumber; i++){
                    var tokenizationResult = this._tokenizationSupport.tokenize(this._model.getLineContent(i), true, state, 0);
                    state = tokenizationResult.endState;
                }
                return state;
            }
        },
        {
            key: "getDomNode",
            value: function getDomNode() {
                return this._domNode;
            }
        },
        {
            key: "getPosition",
            value: function getPosition() {
                return {
                    position: this._editor.getPosition(),
                    preference: [
                        2 /* BELOW */ ,
                        1 /* ABOVE */ 
                    ]
                };
            }
        }
    ]);
    return InspectTokensWidget;
}(_lifecycleJs.Disposable);
InspectTokensWidget._ID = 'editor.contrib.inspectTokensWidget';
_editorExtensionsJs.registerEditorContribution(InspectTokensController.ID, InspectTokensController);
_editorExtensionsJs.registerEditorAction(InspectTokens);
_themeServiceJs.registerThemingParticipant(function(theme, collector) {
    var border = theme.getColor(_colorRegistryJs.editorHoverBorder);
    if (border) {
        var borderWidth = theme.type === _themeJs.ColorScheme.HIGH_CONTRAST ? 2 : 1;
        collector.addRule(".monaco-editor .tokens-inspect-widget { border: ".concat(borderWidth, "px solid ").concat(border, "; }"));
        collector.addRule(".monaco-editor .tokens-inspect-widget .tokens-inspect-separator { background-color: ".concat(border, "; }"));
    }
    var background = theme.getColor(_colorRegistryJs.editorHoverBackground);
    if (background) collector.addRule(".monaco-editor .tokens-inspect-widget { background-color: ".concat(background, "; }"));
    var foreground = theme.getColor(_colorRegistryJs.editorHoverForeground);
    if (foreground) collector.addRule(".monaco-editor .tokens-inspect-widget { color: ".concat(foreground, "; }"));
});

},{"@swc/helpers":"erO4s","./inspectTokens.css":"lha33","../../../../base/browser/dom.js":"bxmlc","../../../../base/common/color.js":"2jKDp","../../../../base/common/lifecycle.js":"bcbPy","../../../browser/editorExtensions.js":"dFnlo","../../../common/modes.js":"bRbY1","../../../common/modes/nullMode.js":"djmFz","../../../common/services/modeService.js":"dNIX6","../../common/standaloneThemeService.js":"bYuaJ","../../../../platform/theme/common/colorRegistry.js":"lKtxS","../../../../platform/theme/common/themeService.js":"kE7QB","../../../common/standaloneStrings.js":"325YA","../../../../platform/theme/common/theme.js":"9jy6b"}],"lha33":[function() {},{}],"apeKH":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _platformJs = require("../../../../platform/registry/common/platform.js");
var _quickAccessJs = require("../../../../platform/quickinput/common/quickAccess.js");
var _standaloneStringsJs = require("../../../common/standaloneStrings.js");
var _helpQuickAccessJs = require("../../../../platform/quickinput/browser/helpQuickAccess.js");
_platformJs.Registry.as(_quickAccessJs.Extensions.Quickaccess).registerQuickAccessProvider({
    ctor: _helpQuickAccessJs.HelpQuickAccessProvider,
    prefix: '',
    helpEntries: [
        {
            description: _standaloneStringsJs.QuickHelpNLS.helpQuickAccessActionLabel,
            needsEditor: true
        }
    ]
});

},{"../../../../platform/registry/common/platform.js":"i9rTp","../../../../platform/quickinput/common/quickAccess.js":"kFQx1","../../../common/standaloneStrings.js":"325YA","../../../../platform/quickinput/browser/helpQuickAccess.js":"d0FGx"}],"d0FGx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HelpQuickAccessProvider", function() {
    return HelpQuickAccessProvider;
});
var _helpers = require("@swc/helpers");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _nlsJs = require("../../../nls.js");
var _quickAccessJs = require("../common/quickAccess.js");
var _quickInputJs = require("../common/quickInput.js");
var _platformJs = require("../../registry/common/platform.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var HelpQuickAccessProvider = /*#__PURE__*/ function() {
    "use strict";
    function HelpQuickAccessProvider1(quickInputService) {
        _helpers.classCallCheck(this, HelpQuickAccessProvider1);
        this.quickInputService = quickInputService;
        this.registry = _platformJs.Registry.as(_quickAccessJs.Extensions.Quickaccess);
    }
    _helpers.createClass(HelpQuickAccessProvider1, [
        {
            key: "provide",
            value: function provide(picker) {
                var _this = this;
                var disposables = new _lifecycleJs.DisposableStore();
                // Open a picker with the selected value if picked
                disposables.add(picker.onDidAccept(function() {
                    var _selectedItems = _helpers.slicedToArray(picker.selectedItems, 1), item = _selectedItems[0];
                    if (item) _this.quickInputService.quickAccess.show(item.prefix, {
                        preserveValue: true
                    });
                }));
                // Also open a picker when we detect the user typed the exact
                // name of a provider (e.g. `?term` for terminals)
                disposables.add(picker.onDidChangeValue(function(value) {
                    var providerDescriptor = _this.registry.getQuickAccessProvider(value.substr(HelpQuickAccessProvider1.PREFIX.length));
                    if (providerDescriptor && providerDescriptor.prefix && providerDescriptor.prefix !== HelpQuickAccessProvider1.PREFIX) _this.quickInputService.quickAccess.show(providerDescriptor.prefix, {
                        preserveValue: true
                    });
                }));
                // Fill in all providers separated by editor/global scope
                var ref = this.getQuickAccessProviders(), editorProviders = ref.editorProviders, globalProviders = ref.globalProviders;
                picker.items = editorProviders.length === 0 || globalProviders.length === 0 ? _helpers.toConsumableArray(editorProviders.length === 0 ? globalProviders : editorProviders) : // With groups
                [
                    {
                        label: _nlsJs.localize('globalCommands', "global commands"),
                        type: 'separator'
                    }
                ].concat(_helpers.toConsumableArray(globalProviders), [
                    {
                        label: _nlsJs.localize('editorCommands', "editor commands"),
                        type: 'separator'
                    }
                ], _helpers.toConsumableArray(editorProviders));
                return disposables;
            }
        },
        {
            key: "getQuickAccessProviders",
            value: function getQuickAccessProviders() {
                var globalProviders = [];
                var editorProviders = [];
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.registry.getQuickAccessProviders().sort(function(providerA, providerB) {
                        return providerA.prefix.localeCompare(providerB.prefix);
                    })[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var provider = _step.value;
                        if (provider.prefix === HelpQuickAccessProvider1.PREFIX) continue; // exclude help which is already active
                        var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                        try {
                            for(var _iterator1 = provider.helpEntries[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                                var helpEntry = _step1.value;
                                var prefix = helpEntry.prefix || provider.prefix;
                                var label = prefix || '\u2026' /* ... */ ;
                                (helpEntry.needsEditor ? editorProviders : globalProviders).push({
                                    prefix: prefix,
                                    label: label,
                                    ariaLabel: _nlsJs.localize('helpPickAriaLabel', "{0}, {1}", label, helpEntry.description),
                                    description: helpEntry.description
                                });
                            }
                        } catch (err) {
                            _didIteratorError1 = true;
                            _iteratorError1 = err;
                        } finally{
                            try {
                                if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                                    _iterator1.return();
                                }
                            } finally{
                                if (_didIteratorError1) {
                                    throw _iteratorError1;
                                }
                            }
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return {
                    editorProviders: editorProviders,
                    globalProviders: globalProviders
                };
            }
        }
    ]);
    return HelpQuickAccessProvider1;
}();
HelpQuickAccessProvider.PREFIX = '?';
HelpQuickAccessProvider = __decorate([
    __param(0, _quickInputJs.IQuickInputService)
], HelpQuickAccessProvider);

},{"@swc/helpers":"erO4s","../../../base/common/lifecycle.js":"bcbPy","../../../nls.js":"9djYb","../common/quickAccess.js":"kFQx1","../common/quickInput.js":"2k9Ij","../../registry/common/platform.js":"i9rTp","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"ScNzc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StandaloneGotoLineQuickAccessProvider", function() {
    return StandaloneGotoLineQuickAccessProvider;
});
parcelHelpers.export(exports, "GotoLineAction", function() {
    return GotoLineAction;
});
var _helpers = require("@swc/helpers");
var _gotoLineQuickAccessJs = require("../../../contrib/quickAccess/gotoLineQuickAccess.js");
var _platformJs = require("../../../../platform/registry/common/platform.js");
var _quickAccessJs = require("../../../../platform/quickinput/common/quickAccess.js");
var _codeEditorServiceJs = require("../../../browser/services/codeEditorService.js");
var _typesJs = require("../../../../base/common/types.js");
var _standaloneStringsJs = require("../../../common/standaloneStrings.js");
var _eventJs = require("../../../../base/common/event.js");
var _editorExtensionsJs = require("../../../browser/editorExtensions.js");
var _editorContextKeysJs = require("../../../common/editorContextKeys.js");
var _quickInputJs = require("../../../../platform/quickinput/common/quickInput.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var StandaloneGotoLineQuickAccessProvider = /*#__PURE__*/ function(AbstractGotoLineQuickAccessProvider) {
    "use strict";
    _helpers.inherits(StandaloneGotoLineQuickAccessProvider1, AbstractGotoLineQuickAccessProvider);
    var _super = _helpers.createSuper(StandaloneGotoLineQuickAccessProvider1);
    function StandaloneGotoLineQuickAccessProvider1(editorService) {
        _helpers.classCallCheck(this, StandaloneGotoLineQuickAccessProvider1);
        var _this;
        _this = _super.call(this);
        _this.editorService = editorService;
        _this.onDidActiveTextEditorControlChange = _eventJs.Event.None;
        return _this;
    }
    _helpers.createClass(StandaloneGotoLineQuickAccessProvider1, [
        {
            key: "activeTextEditorControl",
            get: function get() {
                return _typesJs.withNullAsUndefined(this.editorService.getFocusedCodeEditor());
            }
        }
    ]);
    return StandaloneGotoLineQuickAccessProvider1;
}(_gotoLineQuickAccessJs.AbstractGotoLineQuickAccessProvider);
StandaloneGotoLineQuickAccessProvider = __decorate([
    __param(0, _codeEditorServiceJs.ICodeEditorService)
], StandaloneGotoLineQuickAccessProvider);
_platformJs.Registry.as(_quickAccessJs.Extensions.Quickaccess).registerQuickAccessProvider({
    ctor: StandaloneGotoLineQuickAccessProvider,
    prefix: StandaloneGotoLineQuickAccessProvider.PREFIX,
    helpEntries: [
        {
            description: _standaloneStringsJs.GoToLineNLS.gotoLineActionLabel,
            needsEditor: true
        }
    ]
});
var GotoLineAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(GotoLineAction, EditorAction);
    var _super = _helpers.createSuper(GotoLineAction);
    function GotoLineAction() {
        _helpers.classCallCheck(this, GotoLineAction);
        return _super.call(this, {
            id: 'editor.action.gotoLine',
            label: _standaloneStringsJs.GoToLineNLS.gotoLineActionLabel,
            alias: 'Go to Line/Column...',
            precondition: undefined,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.focus,
                primary: 2085 /* KeyG */ ,
                mac: {
                    primary: 293 /* KeyG */ 
                },
                weight: 100 /* EditorContrib */ 
            }
        });
    }
    _helpers.createClass(GotoLineAction, [
        {
            key: "run",
            value: function run(accessor) {
                accessor.get(_quickInputJs.IQuickInputService).quickAccess.show(StandaloneGotoLineQuickAccessProvider.PREFIX);
            }
        }
    ]);
    return GotoLineAction;
}(_editorExtensionsJs.EditorAction);
_editorExtensionsJs.registerEditorAction(GotoLineAction);

},{"@swc/helpers":"erO4s","../../../contrib/quickAccess/gotoLineQuickAccess.js":"PUkOO","../../../../platform/registry/common/platform.js":"i9rTp","../../../../platform/quickinput/common/quickAccess.js":"kFQx1","../../../browser/services/codeEditorService.js":"izkTN","../../../../base/common/types.js":"lF7Cj","../../../common/standaloneStrings.js":"325YA","../../../../base/common/event.js":"9IBcK","../../../browser/editorExtensions.js":"dFnlo","../../../common/editorContextKeys.js":"2t2PW","../../../../platform/quickinput/common/quickInput.js":"2k9Ij","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"PUkOO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AbstractGotoLineQuickAccessProvider", function() {
    return AbstractGotoLineQuickAccessProvider;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _editorBrowserJs = require("../../browser/editorBrowser.js");
var _editorNavigationQuickAccessJs = require("./editorNavigationQuickAccess.js");
var _nlsJs = require("../../../nls.js");
var AbstractGotoLineQuickAccessProvider = /*#__PURE__*/ function(AbstractEditorNavigationQuickAccessProvider) {
    "use strict";
    _helpers.inherits(AbstractGotoLineQuickAccessProvider, AbstractEditorNavigationQuickAccessProvider);
    var _super = _helpers.createSuper(AbstractGotoLineQuickAccessProvider);
    function AbstractGotoLineQuickAccessProvider() {
        _helpers.classCallCheck(this, AbstractGotoLineQuickAccessProvider);
        return _super.call(this, {
            canAcceptInBackground: true
        });
    }
    _helpers.createClass(AbstractGotoLineQuickAccessProvider, [
        {
            key: "provideWithoutTextEditor",
            value: function provideWithoutTextEditor(picker) {
                var label = _nlsJs.localize('cannotRunGotoLine', "Open a text editor first to go to a line.");
                picker.items = [
                    {
                        label: label
                    }
                ];
                picker.ariaLabel = label;
                return _lifecycleJs.Disposable.None;
            }
        },
        {
            key: "provideWithTextEditor",
            value: function provideWithTextEditor(context, picker, token) {
                var _this = this;
                var editor = context.editor;
                var disposables = new _lifecycleJs.DisposableStore();
                // Goto line once picked
                disposables.add(picker.onDidAccept(function(event) {
                    var _selectedItems = _helpers.slicedToArray(picker.selectedItems, 1), item = _selectedItems[0];
                    if (item) {
                        if (!_this.isValidLineNumber(editor, item.lineNumber)) return;
                        _this.gotoLocation(context, {
                            range: _this.toRange(item.lineNumber, item.column),
                            keyMods: picker.keyMods,
                            preserveFocus: event.inBackground
                        });
                        if (!event.inBackground) picker.hide();
                    }
                }));
                // React to picker changes
                var updatePickerAndEditor = function() {
                    var position = _this.parsePosition(editor, picker.value.trim().substr(AbstractGotoLineQuickAccessProvider.PREFIX.length));
                    var label = _this.getPickLabel(editor, position.lineNumber, position.column);
                    // Picker
                    picker.items = [
                        {
                            lineNumber: position.lineNumber,
                            column: position.column,
                            label: label
                        }
                    ];
                    // ARIA Label
                    picker.ariaLabel = label;
                    // Clear decorations for invalid range
                    if (!_this.isValidLineNumber(editor, position.lineNumber)) {
                        _this.clearDecorations(editor);
                        return;
                    }
                    // Reveal
                    var range = _this.toRange(position.lineNumber, position.column);
                    editor.revealRangeInCenter(range, 0 /* Smooth */ );
                    // Decorate
                    _this.addDecorations(editor, range);
                };
                updatePickerAndEditor();
                disposables.add(picker.onDidChangeValue(function() {
                    return updatePickerAndEditor();
                }));
                // Adjust line number visibility as needed
                var codeEditor = _editorBrowserJs.getCodeEditor(editor);
                if (codeEditor) {
                    var options = codeEditor.getOptions();
                    var lineNumbers = options.get(59 /* lineNumbers */ );
                    if (lineNumbers.renderType === 2 /* Relative */ ) {
                        codeEditor.updateOptions({
                            lineNumbers: 'on'
                        });
                        disposables.add(_lifecycleJs.toDisposable(function() {
                            return codeEditor.updateOptions({
                                lineNumbers: 'relative'
                            });
                        }));
                    }
                }
                return disposables;
            }
        },
        {
            key: "toRange",
            value: function toRange() {
                var lineNumber = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1, column = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
                return {
                    startLineNumber: lineNumber,
                    startColumn: column,
                    endLineNumber: lineNumber,
                    endColumn: column
                };
            }
        },
        {
            key: "parsePosition",
            value: function parsePosition(editor, value) {
                // Support line-col formats of `line,col`, `line:col`, `line#col`
                var numbers = value.split(/,|:|#/).map(function(part) {
                    return parseInt(part, 10);
                }).filter(function(part) {
                    return !isNaN(part);
                });
                var endLine = this.lineCount(editor) + 1;
                return {
                    lineNumber: numbers[0] > 0 ? numbers[0] : endLine + numbers[0],
                    column: numbers[1]
                };
            }
        },
        {
            key: "getPickLabel",
            value: function getPickLabel(editor, lineNumber, column) {
                // Location valid: indicate this as picker label
                if (this.isValidLineNumber(editor, lineNumber)) {
                    if (this.isValidColumn(editor, lineNumber, column)) return _nlsJs.localize('gotoLineColumnLabel', "Go to line {0} and character {1}.", lineNumber, column);
                    return _nlsJs.localize('gotoLineLabel', "Go to line {0}.", lineNumber);
                }
                // Location invalid: show generic label
                var position = editor.getPosition() || {
                    lineNumber: 1,
                    column: 1
                };
                var lineCount = this.lineCount(editor);
                if (lineCount > 1) return _nlsJs.localize('gotoLineLabelEmptyWithLimit', "Current Line: {0}, Character: {1}. Type a line number between 1 and {2} to navigate to.", position.lineNumber, position.column, lineCount);
                return _nlsJs.localize('gotoLineLabelEmpty', "Current Line: {0}, Character: {1}. Type a line number to navigate to.", position.lineNumber, position.column);
            }
        },
        {
            key: "isValidLineNumber",
            value: function isValidLineNumber(editor, lineNumber) {
                if (!lineNumber || typeof lineNumber !== 'number') return false;
                return lineNumber > 0 && lineNumber <= this.lineCount(editor);
            }
        },
        {
            key: "isValidColumn",
            value: function isValidColumn(editor, lineNumber, column) {
                if (!column || typeof column !== 'number') return false;
                var model = this.getModel(editor);
                if (!model) return false;
                var positionCandidate = {
                    lineNumber: lineNumber,
                    column: column
                };
                return model.validatePosition(positionCandidate).equals(positionCandidate);
            }
        },
        {
            key: "lineCount",
            value: function lineCount(editor) {
                var _a, _b;
                return (_b = (_a = this.getModel(editor)) === null || _a === void 0 ? void 0 : _a.getLineCount()) !== null && _b !== void 0 ? _b : 0;
            }
        }
    ]);
    return AbstractGotoLineQuickAccessProvider;
}(_editorNavigationQuickAccessJs.AbstractEditorNavigationQuickAccessProvider);
AbstractGotoLineQuickAccessProvider.PREFIX = ':';

},{"@swc/helpers":"erO4s","../../../base/common/lifecycle.js":"bcbPy","../../browser/editorBrowser.js":"4mNuz","./editorNavigationQuickAccess.js":"9J6me","../../../nls.js":"9djYb","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"9J6me":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AbstractEditorNavigationQuickAccessProvider", function() {
    return AbstractEditorNavigationQuickAccessProvider;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _functionalJs = require("../../../base/common/functional.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _typesJs = require("../../../base/common/types.js");
var _editorBrowserJs = require("../../browser/editorBrowser.js");
var _modelJs = require("../../common/model.js");
var _editorColorRegistryJs = require("../../common/view/editorColorRegistry.js");
var _themeServiceJs = require("../../../platform/theme/common/themeService.js");
var AbstractEditorNavigationQuickAccessProvider = /*#__PURE__*/ function() {
    "use strict";
    function AbstractEditorNavigationQuickAccessProvider(options) {
        _helpers.classCallCheck(this, AbstractEditorNavigationQuickAccessProvider);
        this.options = options;
        //#endregion
        //#region Decorations Utils
        this.rangeHighlightDecorationId = undefined;
    }
    _helpers.createClass(AbstractEditorNavigationQuickAccessProvider, [
        {
            //#region Provider methods
            key: "provide",
            value: function provide(picker, token) {
                var _this = this;
                var _a;
                var disposables = new _lifecycleJs.DisposableStore();
                // Apply options if any
                picker.canAcceptInBackground = !!((_a = this.options) === null || _a === void 0 ? void 0 : _a.canAcceptInBackground);
                // Disable filtering & sorting, we control the results
                picker.matchOnLabel = picker.matchOnDescription = picker.matchOnDetail = picker.sortByLabel = false;
                // Provide based on current active editor
                var pickerDisposable = disposables.add(new _lifecycleJs.MutableDisposable());
                pickerDisposable.value = this.doProvide(picker, token);
                // Re-create whenever the active editor changes
                disposables.add(this.onDidActiveTextEditorControlChange(function() {
                    // Clear old
                    pickerDisposable.value = undefined;
                    // Add new
                    pickerDisposable.value = _this.doProvide(picker, token);
                }));
                return disposables;
            }
        },
        {
            key: "doProvide",
            value: function doProvide(picker, token) {
                var disposables = new _lifecycleJs.DisposableStore();
                // With text control
                var editor = this.activeTextEditorControl;
                if (editor && this.canProvideWithTextEditor(editor)) {
                    var _this = this;
                    var context = {
                        editor: editor
                    };
                    // Restore any view state if this picker was closed
                    // without actually going to a line
                    var codeEditor = _editorBrowserJs.getCodeEditor(editor);
                    if (codeEditor) {
                        var _this1 = this;
                        // Remember view state and update it when the cursor position
                        // changes even later because it could be that the user has
                        // configured quick access to remain open when focus is lost and
                        // we always want to restore the current location.
                        var lastKnownEditorViewState = _typesJs.withNullAsUndefined(editor.saveViewState());
                        disposables.add(codeEditor.onDidChangeCursorPosition(function() {
                            lastKnownEditorViewState = _typesJs.withNullAsUndefined(editor.saveViewState());
                        }));
                        context.restoreViewState = function() {
                            if (lastKnownEditorViewState && editor === _this1.activeTextEditorControl) editor.restoreViewState(lastKnownEditorViewState);
                        };
                        disposables.add(_functionalJs.once(token.onCancellationRequested)(function() {
                            var _a;
                            return (_a = context.restoreViewState) === null || _a === void 0 ? void 0 : _a.call(context);
                        }));
                    }
                    // Clean up decorations on dispose
                    disposables.add(_lifecycleJs.toDisposable(function() {
                        return _this.clearDecorations(editor);
                    }));
                    // Ask subclass for entries
                    disposables.add(this.provideWithTextEditor(context, picker, token));
                } else disposables.add(this.provideWithoutTextEditor(picker, token));
                return disposables;
            }
        },
        {
            /**
     * Subclasses to implement if they can operate on the text editor.
     */ key: "canProvideWithTextEditor",
            value: function canProvideWithTextEditor(editor) {
                return true;
            }
        },
        {
            key: "gotoLocation",
            value: function gotoLocation(param, options) {
                var editor = param.editor;
                editor.setSelection(options.range);
                editor.revealRangeInCenter(options.range, 0 /* Smooth */ );
                if (!options.preserveFocus) editor.focus();
            }
        },
        {
            key: "getModel",
            value: function getModel(editor) {
                var _a;
                return _editorBrowserJs.isDiffEditor(editor) ? (_a = editor.getModel()) === null || _a === void 0 ? void 0 : _a.modified : editor.getModel();
            }
        },
        {
            key: "addDecorations",
            value: function addDecorations(editor, range) {
                var _this = this;
                editor.changeDecorations(function(changeAccessor) {
                    // Reset old decorations if any
                    var deleteDecorations = [];
                    if (_this.rangeHighlightDecorationId) {
                        deleteDecorations.push(_this.rangeHighlightDecorationId.overviewRulerDecorationId);
                        deleteDecorations.push(_this.rangeHighlightDecorationId.rangeHighlightId);
                        _this.rangeHighlightDecorationId = undefined;
                    }
                    // Add new decorations for the range
                    var newDecorations = [
                        // highlight the entire line on the range
                        {
                            range: range,
                            options: {
                                description: 'quick-access-range-highlight',
                                className: 'rangeHighlight',
                                isWholeLine: true
                            }
                        },
                        // also add overview ruler highlight
                        {
                            range: range,
                            options: {
                                description: 'quick-access-range-highlight-overview',
                                overviewRuler: {
                                    color: _themeServiceJs.themeColorFromId(_editorColorRegistryJs.overviewRulerRangeHighlight),
                                    position: _modelJs.OverviewRulerLane.Full
                                }
                            }
                        }
                    ];
                    var ref = _helpers.slicedToArray(changeAccessor.deltaDecorations(deleteDecorations, newDecorations), 2), rangeHighlightId = ref[0], overviewRulerDecorationId = ref[1];
                    _this.rangeHighlightDecorationId = {
                        rangeHighlightId: rangeHighlightId,
                        overviewRulerDecorationId: overviewRulerDecorationId
                    };
                });
            }
        },
        {
            key: "clearDecorations",
            value: function clearDecorations(editor) {
                var rangeHighlightDecorationId = this.rangeHighlightDecorationId;
                if (rangeHighlightDecorationId) {
                    editor.changeDecorations(function(changeAccessor) {
                        changeAccessor.deltaDecorations([
                            rangeHighlightDecorationId.overviewRulerDecorationId,
                            rangeHighlightDecorationId.rangeHighlightId
                        ], []);
                    });
                    this.rangeHighlightDecorationId = undefined;
                }
            }
        }
    ]);
    return AbstractEditorNavigationQuickAccessProvider;
}();

},{"@swc/helpers":"erO4s","../../../base/common/functional.js":"hZEZA","../../../base/common/lifecycle.js":"bcbPy","../../../base/common/types.js":"lF7Cj","../../browser/editorBrowser.js":"4mNuz","../../common/model.js":"dUHFC","../../common/view/editorColorRegistry.js":"3F5El","../../../platform/theme/common/themeService.js":"kE7QB","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"43DCE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StandaloneGotoSymbolQuickAccessProvider", function() {
    return StandaloneGotoSymbolQuickAccessProvider;
});
parcelHelpers.export(exports, "GotoLineAction", function() {
    return GotoLineAction;
});
var _helpers = require("@swc/helpers");
var _codiconStylesJs = require("../../../../base/browser/ui/codicons/codiconStyles.js"); // The codicon symbol styles are defined here and must be loaded
var _symbolIconsJs = require("../../../contrib/symbolIcons/symbolIcons.js"); // The codicon symbol colors are defined here and must be loaded to get colors
var _gotoSymbolQuickAccessJs = require("../../../contrib/quickAccess/gotoSymbolQuickAccess.js");
var _platformJs = require("../../../../platform/registry/common/platform.js");
var _quickAccessJs = require("../../../../platform/quickinput/common/quickAccess.js");
var _codeEditorServiceJs = require("../../../browser/services/codeEditorService.js");
var _typesJs = require("../../../../base/common/types.js");
var _standaloneStringsJs = require("../../../common/standaloneStrings.js");
var _eventJs = require("../../../../base/common/event.js");
var _editorExtensionsJs = require("../../../browser/editorExtensions.js");
var _editorContextKeysJs = require("../../../common/editorContextKeys.js");
var _quickInputJs = require("../../../../platform/quickinput/common/quickInput.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var StandaloneGotoSymbolQuickAccessProvider = /*#__PURE__*/ function(AbstractGotoSymbolQuickAccessProvider) {
    "use strict";
    _helpers.inherits(StandaloneGotoSymbolQuickAccessProvider1, AbstractGotoSymbolQuickAccessProvider);
    var _super = _helpers.createSuper(StandaloneGotoSymbolQuickAccessProvider1);
    function StandaloneGotoSymbolQuickAccessProvider1(editorService) {
        _helpers.classCallCheck(this, StandaloneGotoSymbolQuickAccessProvider1);
        var _this;
        _this = _super.call(this);
        _this.editorService = editorService;
        _this.onDidActiveTextEditorControlChange = _eventJs.Event.None;
        return _this;
    }
    _helpers.createClass(StandaloneGotoSymbolQuickAccessProvider1, [
        {
            key: "activeTextEditorControl",
            get: function get() {
                return _typesJs.withNullAsUndefined(this.editorService.getFocusedCodeEditor());
            }
        }
    ]);
    return StandaloneGotoSymbolQuickAccessProvider1;
}(_gotoSymbolQuickAccessJs.AbstractGotoSymbolQuickAccessProvider);
StandaloneGotoSymbolQuickAccessProvider = __decorate([
    __param(0, _codeEditorServiceJs.ICodeEditorService)
], StandaloneGotoSymbolQuickAccessProvider);
_platformJs.Registry.as(_quickAccessJs.Extensions.Quickaccess).registerQuickAccessProvider({
    ctor: StandaloneGotoSymbolQuickAccessProvider,
    prefix: _gotoSymbolQuickAccessJs.AbstractGotoSymbolQuickAccessProvider.PREFIX,
    helpEntries: [
        {
            description: _standaloneStringsJs.QuickOutlineNLS.quickOutlineActionLabel,
            prefix: _gotoSymbolQuickAccessJs.AbstractGotoSymbolQuickAccessProvider.PREFIX,
            needsEditor: true
        },
        {
            description: _standaloneStringsJs.QuickOutlineNLS.quickOutlineByCategoryActionLabel,
            prefix: _gotoSymbolQuickAccessJs.AbstractGotoSymbolQuickAccessProvider.PREFIX_BY_CATEGORY,
            needsEditor: true
        }
    ]
});
var GotoLineAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(GotoLineAction, EditorAction);
    var _super = _helpers.createSuper(GotoLineAction);
    function GotoLineAction() {
        _helpers.classCallCheck(this, GotoLineAction);
        return _super.call(this, {
            id: 'editor.action.quickOutline',
            label: _standaloneStringsJs.QuickOutlineNLS.quickOutlineActionLabel,
            alias: 'Go to Symbol...',
            precondition: _editorContextKeysJs.EditorContextKeys.hasDocumentSymbolProvider,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.focus,
                primary: 3117 /* KeyO */ ,
                weight: 100 /* EditorContrib */ 
            },
            contextMenuOpts: {
                group: 'navigation',
                order: 3
            }
        });
    }
    _helpers.createClass(GotoLineAction, [
        {
            key: "run",
            value: function run(accessor) {
                accessor.get(_quickInputJs.IQuickInputService).quickAccess.show(_gotoSymbolQuickAccessJs.AbstractGotoSymbolQuickAccessProvider.PREFIX);
            }
        }
    ]);
    return GotoLineAction;
}(_editorExtensionsJs.EditorAction);
_editorExtensionsJs.registerEditorAction(GotoLineAction);

},{"@swc/helpers":"erO4s","../../../../base/browser/ui/codicons/codiconStyles.js":"bu4zl","../../../contrib/symbolIcons/symbolIcons.js":"jk3Ol","../../../contrib/quickAccess/gotoSymbolQuickAccess.js":"28Jpy","../../../../platform/registry/common/platform.js":"i9rTp","../../../../platform/quickinput/common/quickAccess.js":"kFQx1","../../../browser/services/codeEditorService.js":"izkTN","../../../../base/common/types.js":"lF7Cj","../../../common/standaloneStrings.js":"325YA","../../../../base/common/event.js":"9IBcK","../../../browser/editorExtensions.js":"dFnlo","../../../common/editorContextKeys.js":"2t2PW","../../../../platform/quickinput/common/quickInput.js":"2k9Ij","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"28Jpy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AbstractGotoSymbolQuickAccessProvider", function() {
    return AbstractGotoSymbolQuickAccessProvider;
});
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
var _asyncJs = require("../../../base/common/async.js");
var _cancellationJs = require("../../../base/common/cancellation.js");
var _codiconsJs = require("../../../base/common/codicons.js");
var _fuzzyScorerJs = require("../../../base/common/fuzzyScorer.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _stringsJs = require("../../../base/common/strings.js");
var _rangeJs = require("../../common/core/range.js");
var _modesJs = require("../../common/modes.js");
var _outlineModelJs = require("../documentSymbols/outlineModel.js");
var _editorNavigationQuickAccessJs = require("./editorNavigationQuickAccess.js");
var _nlsJs = require("../../../nls.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var AbstractGotoSymbolQuickAccessProvider = /*#__PURE__*/ function(AbstractEditorNavigationQuickAccessProvider) {
    "use strict";
    _helpers.inherits(AbstractGotoSymbolQuickAccessProvider, AbstractEditorNavigationQuickAccessProvider);
    var _super = _helpers.createSuper(AbstractGotoSymbolQuickAccessProvider);
    function AbstractGotoSymbolQuickAccessProvider() {
        var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : Object.create(null);
        _helpers.classCallCheck(this, AbstractGotoSymbolQuickAccessProvider);
        var _this;
        _this = _super.call(this, options);
        _this.options = options;
        _this.options.canAcceptInBackground = true;
        return _this;
    }
    _helpers.createClass(AbstractGotoSymbolQuickAccessProvider, [
        {
            key: "provideWithoutTextEditor",
            value: function provideWithoutTextEditor(picker) {
                this.provideLabelPick(picker, _nlsJs.localize('cannotRunGotoSymbolWithoutEditor', "To go to a symbol, first open a text editor with symbol information."));
                return _lifecycleJs.Disposable.None;
            }
        },
        {
            key: "provideWithTextEditor",
            value: function provideWithTextEditor(context, picker, token) {
                var editor = context.editor;
                var model = this.getModel(editor);
                if (!model) return _lifecycleJs.Disposable.None;
                // Provide symbols from model if available in registry
                if (_modesJs.DocumentSymbolProviderRegistry.has(model)) return this.doProvideWithEditorSymbols(context, model, picker, token);
                // Otherwise show an entry for a model without registry
                // But give a chance to resolve the symbols at a later
                // point if possible
                return this.doProvideWithoutEditorSymbols(context, model, picker, token);
            }
        },
        {
            key: "doProvideWithoutEditorSymbols",
            value: function doProvideWithoutEditorSymbols(context, model, picker, token) {
                var _this = this;
                var disposables = new _lifecycleJs.DisposableStore();
                // Generic pick for not having any symbol information
                this.provideLabelPick(picker, _nlsJs.localize('cannotRunGotoSymbolWithoutSymbolProvider', "The active text editor does not provide symbol information."));
                // Wait for changes to the registry and see if eventually
                // we do get symbols. This can happen if the picker is opened
                // very early after the model has loaded but before the
                // language registry is ready.
                // https://github.com/microsoft/vscode/issues/70607
                (function() {
                    return __awaiter(_this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                        var result;
                        return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                            while(1)switch(_ctx.prev = _ctx.next){
                                case 0:
                                    _ctx.next = 2;
                                    return this.waitForLanguageSymbolRegistry(model, disposables);
                                case 2:
                                    result = _ctx.sent;
                                    if (!(!result || token.isCancellationRequested)) {
                                        _ctx.next = 5;
                                        break;
                                    }
                                    return _ctx.abrupt("return");
                                case 5:
                                    disposables.add(this.doProvideWithEditorSymbols(context, model, picker, token));
                                case 6:
                                case "end":
                                    return _ctx.stop();
                            }
                        }, _callee, this);
                    }));
                })();
                return disposables;
            }
        },
        {
            key: "provideLabelPick",
            value: function provideLabelPick(picker, label) {
                picker.items = [
                    {
                        label: label,
                        index: 0,
                        kind: 14 /* String */ 
                    }
                ];
                picker.ariaLabel = label;
            }
        },
        {
            key: "waitForLanguageSymbolRegistry",
            value: function waitForLanguageSymbolRegistry(model, disposables) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var symbolProviderRegistryPromise, symbolProviderListener;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                if (!_modesJs.DocumentSymbolProviderRegistry.has(model)) {
                                    _ctx.next = 2;
                                    break;
                                }
                                return _ctx.abrupt("return", true);
                            case 2:
                                symbolProviderRegistryPromise = new _asyncJs.DeferredPromise();
                                symbolProviderListener = disposables.add(_modesJs.DocumentSymbolProviderRegistry.onDidChange(function() {
                                    if (_modesJs.DocumentSymbolProviderRegistry.has(model)) {
                                        symbolProviderListener.dispose();
                                        symbolProviderRegistryPromise.complete(true);
                                    }
                                }));
                                // Resolve promise when we get disposed too
                                disposables.add(_lifecycleJs.toDisposable(function() {
                                    return symbolProviderRegistryPromise.complete(false);
                                }));
                                return _ctx.abrupt("return", symbolProviderRegistryPromise.p);
                            case 6:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee);
                }));
            }
        },
        {
            key: "doProvideWithEditorSymbols",
            value: function doProvideWithEditorSymbols(context, model, picker, token) {
                var _this = this;
                var editor = context.editor;
                var disposables = new _lifecycleJs.DisposableStore();
                // Goto symbol once picked
                disposables.add(picker.onDidAccept(function(event) {
                    var _selectedItems = _helpers.slicedToArray(picker.selectedItems, 1), item = _selectedItems[0];
                    if (item && item.range) {
                        _this.gotoLocation(context, {
                            range: item.range.selection,
                            keyMods: picker.keyMods,
                            preserveFocus: event.inBackground
                        });
                        if (!event.inBackground) picker.hide();
                    }
                }));
                // Goto symbol side by side if enabled
                disposables.add(picker.onDidTriggerItemButton(function(param) {
                    var item = param.item;
                    if (item && item.range) {
                        _this.gotoLocation(context, {
                            range: item.range.selection,
                            keyMods: picker.keyMods,
                            forceSideBySide: true
                        });
                        picker.hide();
                    }
                }));
                // Resolve symbols from document once and reuse this
                // request for all filtering and typing then on
                var symbolsPromise = this.getDocumentSymbols(model, token);
                // Set initial picks and update on type
                var picksCts = undefined;
                var updatePickerItems = function() {
                    return __awaiter(_this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                        var query, items;
                        return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                            while(1)switch(_ctx.prev = _ctx.next){
                                case 0:
                                    // Cancel any previous ask for picks and busy
                                    picksCts === null || picksCts === void 0 || picksCts.dispose(true);
                                    picker.busy = false;
                                    // Create new cancellation source for this run
                                    picksCts = new _cancellationJs.CancellationTokenSource(token);
                                    // Collect symbol picks
                                    picker.busy = true;
                                    _ctx.prev = 4;
                                    query = _fuzzyScorerJs.prepareQuery(picker.value.substr(AbstractGotoSymbolQuickAccessProvider.PREFIX.length).trim());
                                    _ctx.next = 8;
                                    return this.doGetSymbolPicks(symbolsPromise, query, undefined, picksCts.token);
                                case 8:
                                    items = _ctx.sent;
                                    if (!token.isCancellationRequested) {
                                        _ctx.next = 11;
                                        break;
                                    }
                                    return _ctx.abrupt("return");
                                case 11:
                                    if (items.length > 0) picker.items = items;
                                    else if (query.original.length > 0) this.provideLabelPick(picker, _nlsJs.localize('noMatchingSymbolResults', "No matching editor symbols"));
                                    else this.provideLabelPick(picker, _nlsJs.localize('noSymbolResults', "No editor symbols"));
                                case 12:
                                    _ctx.prev = 12;
                                    if (!token.isCancellationRequested) picker.busy = false;
                                    return _ctx.finish(12);
                                case 15:
                                case "end":
                                    return _ctx.stop();
                            }
                        }, _callee, this, [
                            [
                                4,
                                ,
                                12,
                                15
                            ]
                        ]);
                    }));
                };
                disposables.add(picker.onDidChangeValue(function() {
                    return updatePickerItems();
                }));
                updatePickerItems();
                // Reveal and decorate when active item changes
                // However, ignore the very first event so that
                // opening the picker is not immediately revealing
                // and decorating the first entry.
                var ignoreFirstActiveEvent = true;
                disposables.add(picker.onDidChangeActive(function() {
                    var _activeItems = _helpers.slicedToArray(picker.activeItems, 1), item = _activeItems[0];
                    if (item && item.range) {
                        if (ignoreFirstActiveEvent) {
                            ignoreFirstActiveEvent = false;
                            return;
                        }
                        // Reveal
                        editor.revealRangeInCenter(item.range.selection, 0 /* Smooth */ );
                        // Decorate
                        _this.addDecorations(editor, item.range.decoration);
                    }
                }));
                return disposables;
            }
        },
        {
            key: "doGetSymbolPicks",
            value: function doGetSymbolPicks(symbolsPromise, query, options, token) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var _this, symbols, filterBySymbolKind, filterPos, symbolQuery, containerQuery, filteredSymbolPicks, index, _this1, symbol, symbolLabel, symbolLabelWithIcon, symbolLabelIconOffset, containerLabel, symbolScore, symbolMatches, containerScore, containerMatches, skipContainerQuery, ref, ref1, ref2, deprecated, sortedFilteredSymbolPicks, symbolPicks, lastSymbolKind, lastSeparator, lastSymbolKindCounter, updateLastSeparatorLabel, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, symbolPick;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                updateLastSeparatorLabel = function _updateLastSeparatorLabel() {
                                    if (lastSeparator && typeof lastSymbolKind === 'number' && lastSymbolKindCounter > 0) lastSeparator.label = _stringsJs.format(NLS_SYMBOL_KIND_CACHE[lastSymbolKind] || FALLBACK_NLS_SYMBOL_KIND, lastSymbolKindCounter);
                                };
                                _this = this;
                                _ctx.next = 4;
                                return symbolsPromise;
                            case 4:
                                symbols = _ctx.sent;
                                if (!token.isCancellationRequested) {
                                    _ctx.next = 7;
                                    break;
                                }
                                return _ctx.abrupt("return", []);
                            case 7:
                                filterBySymbolKind = query.original.indexOf(AbstractGotoSymbolQuickAccessProvider.SCOPE_PREFIX) === 0;
                                filterPos = filterBySymbolKind ? 1 : 0;
                                ;
                                ;
                                if (query.values && query.values.length > 1) {
                                    symbolQuery = _fuzzyScorerJs.pieceToQuery(query.values[0]); // symbol: only match on first part
                                    containerQuery = _fuzzyScorerJs.pieceToQuery(query.values.slice(1)); // container: match on all but first parts
                                } else symbolQuery = query;
                                filteredSymbolPicks = [];
                                index = 0;
                            case 14:
                                if (!(index < symbols.length)) {
                                    _ctx.next = 45;
                                    break;
                                }
                                _this1 = this;
                                symbol = symbols[index];
                                symbolLabel = _stringsJs.trim(symbol.name);
                                symbolLabelWithIcon = "$(symbol-".concat(_modesJs.SymbolKinds.toString(symbol.kind) || 'property', ") ").concat(symbolLabel);
                                symbolLabelIconOffset = symbolLabelWithIcon.length - symbolLabel.length;
                                containerLabel = symbol.containerName;
                                if (options === null || options === void 0 ? void 0 : options.extraContainerLabel) {
                                    if (containerLabel) containerLabel = "".concat(options.extraContainerLabel, " \u2022 ").concat(containerLabel);
                                    else containerLabel = options.extraContainerLabel;
                                }
                                symbolScore = undefined;
                                symbolMatches = undefined;
                                containerScore = undefined;
                                containerMatches = undefined;
                                if (!(query.original.length > filterPos)) {
                                    _ctx.next = 40;
                                    break;
                                }
                                skipContainerQuery = false;
                                if (symbolQuery !== query) {
                                    ;
                                    ref = _helpers.slicedToArray(_fuzzyScorerJs.scoreFuzzy2(symbolLabelWithIcon, Object.assign(Object.assign({}, query), {
                                        values: undefined /* disable multi-query support */ 
                                    }), filterPos, symbolLabelIconOffset), 2), symbolScore = ref[0], symbolMatches = ref[1], ref;
                                    if (typeof symbolScore === 'number') skipContainerQuery = true; // since we consumed the query, skip any container matching
                                }
                                if (!(typeof symbolScore !== 'number')) {
                                    _ctx.next = 34;
                                    break;
                                }
                                ;
                                ref1 = _helpers.slicedToArray(_fuzzyScorerJs.scoreFuzzy2(symbolLabelWithIcon, symbolQuery, filterPos, symbolLabelIconOffset), 2), symbolScore = ref1[0], symbolMatches = ref1[1], ref1;
                                if (!(typeof symbolScore !== 'number')) {
                                    _ctx.next = 34;
                                    break;
                                }
                                return _ctx.abrupt("continue", 42);
                            case 34:
                                if (!(!skipContainerQuery && containerQuery)) {
                                    _ctx.next = 40;
                                    break;
                                }
                                ;
                                if (containerLabel && containerQuery.original.length > 0) ref2 = _helpers.slicedToArray(_fuzzyScorerJs.scoreFuzzy2(containerLabel, containerQuery), 2), containerScore = ref2[0], containerMatches = ref2[1], ref2;
                                if (!(typeof containerScore !== 'number')) {
                                    _ctx.next = 39;
                                    break;
                                }
                                return _ctx.abrupt("continue", 42);
                            case 39:
                                if (typeof symbolScore === 'number') symbolScore += containerScore; // boost symbolScore by containerScore
                            case 40:
                                deprecated = symbol.tags && symbol.tags.indexOf(1 /* Deprecated */ ) >= 0;
                                filteredSymbolPicks.push({
                                    index: index,
                                    kind: symbol.kind,
                                    score: symbolScore,
                                    label: symbolLabelWithIcon,
                                    ariaLabel: symbolLabel,
                                    description: containerLabel,
                                    highlights: deprecated ? undefined : {
                                        label: symbolMatches,
                                        description: containerMatches
                                    },
                                    range: {
                                        selection: _rangeJs.Range.collapseToStart(symbol.selectionRange),
                                        decoration: symbol.range
                                    },
                                    strikethrough: deprecated,
                                    buttons: function() {
                                        var _a, _b;
                                        var openSideBySideDirection = ((_a = _this1.options) === null || _a === void 0 ? void 0 : _a.openSideBySideDirection) ? (_b = _this1.options) === null || _b === void 0 ? void 0 : _b.openSideBySideDirection() : undefined;
                                        if (!openSideBySideDirection) return undefined;
                                        return [
                                            {
                                                iconClass: openSideBySideDirection === 'right' ? _codiconsJs.Codicon.splitHorizontal.classNames : _codiconsJs.Codicon.splitVertical.classNames,
                                                tooltip: openSideBySideDirection === 'right' ? _nlsJs.localize('openToSide', "Open to the Side") : _nlsJs.localize('openToBottom', "Open to the Bottom")
                                            }
                                        ];
                                    }()
                                });
                            case 42:
                                index++;
                                _ctx.next = 14;
                                break;
                            case 45:
                                sortedFilteredSymbolPicks = filteredSymbolPicks.sort(function(symbolA, symbolB) {
                                    return filterBySymbolKind ? _this.compareByKindAndScore(symbolA, symbolB) : _this.compareByScore(symbolA, symbolB);
                                });
                                symbolPicks = [];
                                if (!filterBySymbolKind) {
                                    _ctx.next = 72;
                                    break;
                                }
                                lastSymbolKind = undefined;
                                lastSeparator = undefined;
                                lastSymbolKindCounter = 0;
                                ;
                                _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                                _ctx.prev = 53;
                                for(_iterator = sortedFilteredSymbolPicks[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                                    symbolPick = _step.value;
                                    // Found new kind
                                    if (lastSymbolKind !== symbolPick.kind) {
                                        // Update last separator with number of symbols we found for kind
                                        updateLastSeparatorLabel();
                                        lastSymbolKind = symbolPick.kind;
                                        lastSymbolKindCounter = 1;
                                        // Add new separator for new kind
                                        lastSeparator = {
                                            type: 'separator'
                                        };
                                        symbolPicks.push(lastSeparator);
                                    } else lastSymbolKindCounter++;
                                    // Add to final result
                                    symbolPicks.push(symbolPick);
                                }
                                _ctx.next = 61;
                                break;
                            case 57:
                                _ctx.prev = 57;
                                _ctx.t0 = _ctx["catch"](53);
                                _didIteratorError = true;
                                _iteratorError = _ctx.t0;
                            case 61:
                                _ctx.prev = 61;
                                _ctx.prev = 62;
                                if (!_iteratorNormalCompletion && _iterator.return != null) {
                                    _iterator.return();
                                }
                            case 64:
                                _ctx.prev = 64;
                                if (!_didIteratorError) {
                                    _ctx.next = 67;
                                    break;
                                }
                                throw _iteratorError;
                            case 67:
                                return _ctx.finish(64);
                            case 68:
                                return _ctx.finish(61);
                            case 69:
                                // Update last separator with number of symbols we found for kind
                                updateLastSeparatorLabel();
                                _ctx.next = 73;
                                break;
                            case 72:
                                if (sortedFilteredSymbolPicks.length > 0) symbolPicks = [
                                    {
                                        label: _nlsJs.localize('symbols', "symbols ({0})", filteredSymbolPicks.length),
                                        type: 'separator'
                                    }
                                ].concat(_helpers.toConsumableArray(sortedFilteredSymbolPicks));
                            case 73:
                                return _ctx.abrupt("return", symbolPicks);
                            case 74:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this, [
                        [
                            53,
                            57,
                            61,
                            69
                        ],
                        [
                            62,
                            ,
                            64,
                            68
                        ]
                    ]);
                }));
            }
        },
        {
            key: "compareByScore",
            value: function compareByScore(symbolA, symbolB) {
                if (typeof symbolA.score !== 'number' && typeof symbolB.score === 'number') return 1;
                else if (typeof symbolA.score === 'number' && typeof symbolB.score !== 'number') return -1;
                if (typeof symbolA.score === 'number' && typeof symbolB.score === 'number') {
                    if (symbolA.score > symbolB.score) return -1;
                    else if (symbolA.score < symbolB.score) return 1;
                }
                if (symbolA.index < symbolB.index) return -1;
                else if (symbolA.index > symbolB.index) return 1;
                return 0;
            }
        },
        {
            key: "compareByKindAndScore",
            value: function compareByKindAndScore(symbolA, symbolB) {
                var kindA = NLS_SYMBOL_KIND_CACHE[symbolA.kind] || FALLBACK_NLS_SYMBOL_KIND;
                var kindB = NLS_SYMBOL_KIND_CACHE[symbolB.kind] || FALLBACK_NLS_SYMBOL_KIND;
                // Sort by type first if scoped search
                var result = kindA.localeCompare(kindB);
                if (result === 0) return this.compareByScore(symbolA, symbolB);
                return result;
            }
        },
        {
            key: "getDocumentSymbols",
            value: function getDocumentSymbols(document, token) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    var model;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                _ctx.next = 2;
                                return _outlineModelJs.OutlineModel.create(document, token);
                            case 2:
                                model = _ctx.sent;
                                return _ctx.abrupt("return", token.isCancellationRequested ? [] : model.asListOfDocumentSymbols());
                            case 4:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee);
                }));
            }
        }
    ]);
    return AbstractGotoSymbolQuickAccessProvider;
}(_editorNavigationQuickAccessJs.AbstractEditorNavigationQuickAccessProvider);
AbstractGotoSymbolQuickAccessProvider.PREFIX = '@';
AbstractGotoSymbolQuickAccessProvider.SCOPE_PREFIX = ':';
AbstractGotoSymbolQuickAccessProvider.PREFIX_BY_CATEGORY = "".concat(AbstractGotoSymbolQuickAccessProvider.PREFIX).concat(AbstractGotoSymbolQuickAccessProvider.SCOPE_PREFIX);
// #region NLS Helpers
var FALLBACK_NLS_SYMBOL_KIND = _nlsJs.localize('property', "properties ({0})");
var _obj;
var NLS_SYMBOL_KIND_CACHE = (_obj = {}, _helpers.defineProperty(_obj, 5 /* Method */ , _nlsJs.localize('method', "methods ({0})")), _helpers.defineProperty(_obj, 11 /* Function */ , _nlsJs.localize('function', "functions ({0})")), _helpers.defineProperty(_obj, 8 /* Constructor */ , _nlsJs.localize('_constructor', "constructors ({0})")), _helpers.defineProperty(_obj, 12 /* Variable */ , _nlsJs.localize('variable', "variables ({0})")), _helpers.defineProperty(_obj, 4 /* Class */ , _nlsJs.localize('class', "classes ({0})")), _helpers.defineProperty(_obj, 22 /* Struct */ , _nlsJs.localize('struct', "structs ({0})")), _helpers.defineProperty(_obj, 23 /* Event */ , _nlsJs.localize('event', "events ({0})")), _helpers.defineProperty(_obj, 24 /* Operator */ , _nlsJs.localize('operator', "operators ({0})")), _helpers.defineProperty(_obj, 10 /* Interface */ , _nlsJs.localize('interface', "interfaces ({0})")), _helpers.defineProperty(_obj, 2 /* Namespace */ , _nlsJs.localize('namespace', "namespaces ({0})")), _helpers.defineProperty(_obj, 3 /* Package */ , _nlsJs.localize('package', "packages ({0})")), _helpers.defineProperty(_obj, 25 /* TypeParameter */ , _nlsJs.localize('typeParameter', "type parameters ({0})")), _helpers.defineProperty(_obj, 1 /* Module */ , _nlsJs.localize('modules', "modules ({0})")), _helpers.defineProperty(_obj, 6 /* Property */ , _nlsJs.localize('property', "properties ({0})")), _helpers.defineProperty(_obj, 9 /* Enum */ , _nlsJs.localize('enum', "enumerations ({0})")), _helpers.defineProperty(_obj, 21 /* EnumMember */ , _nlsJs.localize('enumMember', "enumeration members ({0})")), _helpers.defineProperty(_obj, 14 /* String */ , _nlsJs.localize('string', "strings ({0})")), _helpers.defineProperty(_obj, 0 /* File */ , _nlsJs.localize('file', "files ({0})")), _helpers.defineProperty(_obj, 17 /* Array */ , _nlsJs.localize('array', "arrays ({0})")), _helpers.defineProperty(_obj, 15 /* Number */ , _nlsJs.localize('number', "numbers ({0})")), _helpers.defineProperty(_obj, 16 /* Boolean */ , _nlsJs.localize('boolean', "booleans ({0})")), _helpers.defineProperty(_obj, 18 /* Object */ , _nlsJs.localize('object', "objects ({0})")), _helpers.defineProperty(_obj, 19 /* Key */ , _nlsJs.localize('key', "keys ({0})")), _helpers.defineProperty(_obj, 7 /* Field */ , _nlsJs.localize('field', "fields ({0})")), _helpers.defineProperty(_obj, 13 /* Constant */ , _nlsJs.localize('constant', "constants ({0})")), _obj); //#endregion

},{"@swc/helpers":"erO4s","regenerator-runtime":"12Ae8","../../../base/common/async.js":"kMhSh","../../../base/common/cancellation.js":"1C4LY","../../../base/common/codicons.js":"j24JC","../../../base/common/fuzzyScorer.js":"i97Bx","../../../base/common/lifecycle.js":"bcbPy","../../../base/common/strings.js":"jsb6w","../../common/core/range.js":"VbyL8","../../common/modes.js":"bRbY1","../documentSymbols/outlineModel.js":"lQeld","./editorNavigationQuickAccess.js":"9J6me","../../../nls.js":"9djYb","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"i97Bx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scoreFuzzy2", function() {
    return scoreFuzzy2;
});
parcelHelpers.export(exports, "prepareQuery", function() {
    return prepareQuery;
});
parcelHelpers.export(exports, "pieceToQuery", function() {
    return pieceToQuery;
}) //#endregion
;
var _helpers = require("@swc/helpers");
var _filtersJs = require("./filters.js");
var _pathJs = require("./path.js");
var _platformJs = require("./platform.js");
var _stringsJs = require("./strings.js");
var NO_SCORE2 = [
    undefined,
    []
];
function scoreFuzzy2(target, query) {
    var patternStart = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0, wordStart = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
    // Score: multiple inputs
    var preparedQuery = query;
    if (preparedQuery.values && preparedQuery.values.length > 1) return doScoreFuzzy2Multiple(target, preparedQuery.values, patternStart, wordStart);
    // Score: single input
    return doScoreFuzzy2Single(target, query, patternStart, wordStart);
}
function doScoreFuzzy2Multiple(target, query, patternStart, wordStart) {
    var totalScore = 0;
    var totalMatches = [];
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = query[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var queryPiece = _step.value;
            var _totalMatches;
            var ref = _helpers.slicedToArray(doScoreFuzzy2Single(target, queryPiece, patternStart, wordStart), 2), score = ref[0], matches = ref[1];
            if (typeof score !== 'number') // if a single query value does not match, return with
            // no score entirely, we require all queries to match
            return NO_SCORE2;
            totalScore += score;
            (_totalMatches = totalMatches).push.apply(_totalMatches, _helpers.toConsumableArray(matches));
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    // if we have a score, ensure that the positions are
    // sorted in ascending order and distinct
    return [
        totalScore,
        normalizeMatches(totalMatches)
    ];
}
function doScoreFuzzy2Single(target, query, patternStart, wordStart) {
    var score = _filtersJs.fuzzyScore(query.original, query.originalLowercase, patternStart, target, target.toLowerCase(), wordStart, true);
    if (!score) return NO_SCORE2;
    return [
        score[0],
        _filtersJs.createMatches(score)
    ];
}
var NO_ITEM_SCORE = Object.freeze({
    score: 0
});
function normalizeMatches(matches) {
    // sort matches by start to be able to normalize
    var sortedMatches = matches.sort(function(matchA, matchB) {
        return matchA.start - matchB.start;
    });
    // merge matches that overlap
    var normalizedMatches = [];
    var currentMatch = undefined;
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = sortedMatches[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var match = _step.value;
            // if we have no current match or the matches
            // do not overlap, we take it as is and remember
            // it for future merging
            if (!currentMatch || !matchOverlaps(currentMatch, match)) {
                currentMatch = match;
                normalizedMatches.push(match);
            } else {
                currentMatch.start = Math.min(currentMatch.start, match.start);
                currentMatch.end = Math.max(currentMatch.end, match.end);
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    return normalizedMatches;
}
function matchOverlaps(matchA, matchB) {
    if (matchA.end < matchB.start) return false; // A ends before B starts
    if (matchB.end < matchA.start) return false; // B ends before A starts
    return true;
}
/*
 * If a query is wrapped in quotes, the user does not want to
 * use fuzzy search for this query.
 */ function queryExpectsExactMatch(query) {
    return query.startsWith('"') && query.endsWith('"');
}
/**
 * Helper function to prepare a search value for scoring by removing unwanted characters
 * and allowing to score on multiple pieces separated by whitespace character.
 */ var MULTIPLE_QUERY_VALUES_SEPARATOR = ' ';
function prepareQuery(original) {
    if (typeof original !== 'string') original = '';
    var originalLowercase = original.toLowerCase();
    var ref = normalizeQuery(original), pathNormalized = ref.pathNormalized, normalized = ref.normalized, normalizedLowercase = ref.normalizedLowercase;
    var containsPathSeparator = pathNormalized.indexOf(_pathJs.sep) >= 0;
    var expectExactMatch = queryExpectsExactMatch(original);
    var values = undefined;
    var originalSplit = original.split(MULTIPLE_QUERY_VALUES_SEPARATOR);
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    if (originalSplit.length > 1) try {
        for(var _iterator = originalSplit[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var originalPiece = _step.value;
            var expectExactMatchPiece = queryExpectsExactMatch(originalPiece);
            var ref1 = normalizeQuery(originalPiece), pathNormalizedPiece = ref1.pathNormalized, normalizedPiece = ref1.normalized, normalizedLowercasePiece = ref1.normalizedLowercase;
            if (normalizedPiece) {
                if (!values) values = [];
                values.push({
                    original: originalPiece,
                    originalLowercase: originalPiece.toLowerCase(),
                    pathNormalized: pathNormalizedPiece,
                    normalized: normalizedPiece,
                    normalizedLowercase: normalizedLowercasePiece,
                    expectContiguousMatch: expectExactMatchPiece
                });
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    return {
        original: original,
        originalLowercase: originalLowercase,
        pathNormalized: pathNormalized,
        normalized: normalized,
        normalizedLowercase: normalizedLowercase,
        values: values,
        containsPathSeparator: containsPathSeparator,
        expectContiguousMatch: expectExactMatch
    };
}
function normalizeQuery(original) {
    var pathNormalized;
    if (_platformJs.isWindows) pathNormalized = original.replace(/\//g, _pathJs.sep); // Help Windows users to search for paths when using slash
    else pathNormalized = original.replace(/\\/g, _pathJs.sep); // Help macOS/Linux users to search for paths when using backslash
    // we remove quotes here because quotes are used for exact match search
    var normalized = _stringsJs.stripWildcards(pathNormalized).replace(/\s|"/g, '');
    return {
        pathNormalized: pathNormalized,
        normalized: normalized,
        normalizedLowercase: normalized.toLowerCase()
    };
}
function pieceToQuery(arg1) {
    if (Array.isArray(arg1)) return prepareQuery(arg1.map(function(piece) {
        return piece.original;
    }).join(MULTIPLE_QUERY_VALUES_SEPARATOR));
    return prepareQuery(arg1.original);
}

},{"@swc/helpers":"erO4s","./filters.js":"m7Exq","./path.js":"cLsfX","./platform.js":"8pohV","./strings.js":"jsb6w","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"5IR8K":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StandaloneCommandsQuickAccessProvider", function() {
    return StandaloneCommandsQuickAccessProvider;
});
parcelHelpers.export(exports, "GotoLineAction", function() {
    return GotoLineAction;
});
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
var _platformJs = require("../../../../platform/registry/common/platform.js");
var _quickAccessJs = require("../../../../platform/quickinput/common/quickAccess.js");
var _standaloneStringsJs = require("../../../common/standaloneStrings.js");
var _codeEditorServiceJs = require("../../../browser/services/codeEditorService.js");
var _commandsQuickAccessJs = require("../../../contrib/quickAccess/commandsQuickAccess.js");
var _typesJs = require("../../../../base/common/types.js");
var _instantiationJs = require("../../../../platform/instantiation/common/instantiation.js");
var _keybindingJs = require("../../../../platform/keybinding/common/keybinding.js");
var _commandsJs = require("../../../../platform/commands/common/commands.js");
var _telemetryJs = require("../../../../platform/telemetry/common/telemetry.js");
var _dialogsJs = require("../../../../platform/dialogs/common/dialogs.js");
var _editorExtensionsJs = require("../../../browser/editorExtensions.js");
var _editorContextKeysJs = require("../../../common/editorContextKeys.js");
var _quickInputJs = require("../../../../platform/quickinput/common/quickInput.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var StandaloneCommandsQuickAccessProvider = /*#__PURE__*/ function(AbstractEditorCommandsQuickAccessProvider) {
    "use strict";
    _helpers.inherits(StandaloneCommandsQuickAccessProvider1, AbstractEditorCommandsQuickAccessProvider);
    var _super = _helpers.createSuper(StandaloneCommandsQuickAccessProvider1);
    function StandaloneCommandsQuickAccessProvider1(instantiationService, codeEditorService, keybindingService, commandService, telemetryService, dialogService) {
        _helpers.classCallCheck(this, StandaloneCommandsQuickAccessProvider1);
        var _this;
        _this = _super.call(this, {
            showAlias: false
        }, instantiationService, keybindingService, commandService, telemetryService, dialogService);
        _this.codeEditorService = codeEditorService;
        return _this;
    }
    _helpers.createClass(StandaloneCommandsQuickAccessProvider1, [
        {
            key: "activeTextEditorControl",
            get: function get() {
                return _typesJs.withNullAsUndefined(this.codeEditorService.getFocusedCodeEditor());
            }
        },
        {
            key: "getCommandPicks",
            value: function getCommandPicks() {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                return _ctx.abrupt("return", this.getCodeEditorCommandPicks());
                            case 1:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, this);
                }));
            }
        }
    ]);
    return StandaloneCommandsQuickAccessProvider1;
}(_commandsQuickAccessJs.AbstractEditorCommandsQuickAccessProvider);
StandaloneCommandsQuickAccessProvider = __decorate([
    __param(0, _instantiationJs.IInstantiationService),
    __param(1, _codeEditorServiceJs.ICodeEditorService),
    __param(2, _keybindingJs.IKeybindingService),
    __param(3, _commandsJs.ICommandService),
    __param(4, _telemetryJs.ITelemetryService),
    __param(5, _dialogsJs.IDialogService)
], StandaloneCommandsQuickAccessProvider);
_platformJs.Registry.as(_quickAccessJs.Extensions.Quickaccess).registerQuickAccessProvider({
    ctor: StandaloneCommandsQuickAccessProvider,
    prefix: StandaloneCommandsQuickAccessProvider.PREFIX,
    helpEntries: [
        {
            description: _standaloneStringsJs.QuickCommandNLS.quickCommandHelp,
            needsEditor: true
        }
    ]
});
var GotoLineAction = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(GotoLineAction, EditorAction);
    var _super = _helpers.createSuper(GotoLineAction);
    function GotoLineAction() {
        _helpers.classCallCheck(this, GotoLineAction);
        return _super.call(this, {
            id: 'editor.action.quickCommand',
            label: _standaloneStringsJs.QuickCommandNLS.quickCommandActionLabel,
            alias: 'Command Palette',
            precondition: undefined,
            kbOpts: {
                kbExpr: _editorContextKeysJs.EditorContextKeys.focus,
                primary: 59 /* F1 */ ,
                weight: 100 /* EditorContrib */ 
            },
            contextMenuOpts: {
                group: 'z_commands',
                order: 1
            }
        });
    }
    _helpers.createClass(GotoLineAction, [
        {
            key: "run",
            value: function run(accessor) {
                accessor.get(_quickInputJs.IQuickInputService).quickAccess.show(StandaloneCommandsQuickAccessProvider.PREFIX);
            }
        }
    ]);
    return GotoLineAction;
}(_editorExtensionsJs.EditorAction);
_editorExtensionsJs.registerEditorAction(GotoLineAction);

},{"@swc/helpers":"erO4s","regenerator-runtime":"12Ae8","../../../../platform/registry/common/platform.js":"i9rTp","../../../../platform/quickinput/common/quickAccess.js":"kFQx1","../../../common/standaloneStrings.js":"325YA","../../../browser/services/codeEditorService.js":"izkTN","../../../contrib/quickAccess/commandsQuickAccess.js":"1BPL0","../../../../base/common/types.js":"lF7Cj","../../../../platform/instantiation/common/instantiation.js":"9ABZB","../../../../platform/keybinding/common/keybinding.js":"5rr15","../../../../platform/commands/common/commands.js":"eeuTC","../../../../platform/telemetry/common/telemetry.js":"ers5B","../../../../platform/dialogs/common/dialogs.js":"6IMIA","../../../browser/editorExtensions.js":"dFnlo","../../../common/editorContextKeys.js":"2t2PW","../../../../platform/quickinput/common/quickInput.js":"2k9Ij","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"1BPL0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AbstractEditorCommandsQuickAccessProvider", function() {
    return AbstractEditorCommandsQuickAccessProvider;
});
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _iconLabelsJs = require("../../../base/common/iconLabels.js");
var _commandsQuickAccessJs = require("../../../platform/quickinput/browser/commandsQuickAccess.js");
var AbstractEditorCommandsQuickAccessProvider = /*#__PURE__*/ function(AbstractCommandsQuickAccessProvider) {
    "use strict";
    _helpers.inherits(AbstractEditorCommandsQuickAccessProvider, AbstractCommandsQuickAccessProvider);
    var _super = _helpers.createSuper(AbstractEditorCommandsQuickAccessProvider);
    function AbstractEditorCommandsQuickAccessProvider(options, instantiationService, keybindingService, commandService, telemetryService, dialogService) {
        _helpers.classCallCheck(this, AbstractEditorCommandsQuickAccessProvider);
        return _super.call(this, options, instantiationService, keybindingService, commandService, telemetryService, dialogService);
    }
    _helpers.createClass(AbstractEditorCommandsQuickAccessProvider, [
        {
            key: "getCodeEditorCommandPicks",
            value: function getCodeEditorCommandPicks() {
                var activeTextEditorControl = this.activeTextEditorControl;
                if (!activeTextEditorControl) return [];
                var editorCommandPicks = [];
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = activeTextEditorControl.getSupportedActions()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var editorAction = _step.value;
                        editorCommandPicks.push({
                            commandId: editorAction.id,
                            commandAlias: editorAction.alias,
                            label: _iconLabelsJs.stripIcons(editorAction.label) || editorAction.id
                        });
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return editorCommandPicks;
            }
        }
    ]);
    return AbstractEditorCommandsQuickAccessProvider;
}(_commandsQuickAccessJs.AbstractCommandsQuickAccessProvider);

},{"@swc/helpers":"erO4s","../../../base/common/iconLabels.js":"i39TM","../../../platform/quickinput/browser/commandsQuickAccess.js":"ehgTQ","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"ehgTQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AbstractCommandsQuickAccessProvider", function() {
    return AbstractCommandsQuickAccessProvider;
});
parcelHelpers.export(exports, "CommandsHistory", function() {
    return CommandsHistory;
});
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
var _errorMessageJs = require("../../../base/common/errorMessage.js");
var _errorsJs = require("../../../base/common/errors.js");
var _filtersJs = require("../../../base/common/filters.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
var _mapJs = require("../../../base/common/map.js");
var _severityJs = require("../../../base/common/severity.js");
var _severityJsDefault = parcelHelpers.interopDefault(_severityJs);
var _typesJs = require("../../../base/common/types.js");
var _nlsJs = require("../../../nls.js");
var _commandsJs = require("../../commands/common/commands.js");
var _configurationJs = require("../../configuration/common/configuration.js");
var _dialogsJs = require("../../dialogs/common/dialogs.js");
var _instantiationJs = require("../../instantiation/common/instantiation.js");
var _keybindingJs = require("../../keybinding/common/keybinding.js");
var _pickerQuickAccessJs = require("./pickerQuickAccess.js");
var _storageJs = require("../../storage/common/storage.js");
var _telemetryJs = require("../../telemetry/common/telemetry.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var AbstractCommandsQuickAccessProvider = /*#__PURE__*/ function(PickerQuickAccessProvider) {
    "use strict";
    _helpers.inherits(AbstractCommandsQuickAccessProvider1, PickerQuickAccessProvider);
    var _super = _helpers.createSuper(AbstractCommandsQuickAccessProvider1);
    function AbstractCommandsQuickAccessProvider1(options, instantiationService, keybindingService, commandService, telemetryService, dialogService) {
        _helpers.classCallCheck(this, AbstractCommandsQuickAccessProvider1);
        var _this;
        _this = _super.call(this, AbstractCommandsQuickAccessProvider1.PREFIX, options);
        _this.instantiationService = instantiationService;
        _this.keybindingService = keybindingService;
        _this.commandService = commandService;
        _this.telemetryService = telemetryService;
        _this.dialogService = dialogService;
        _this.commandsHistory = _this._register(_this.instantiationService.createInstance(CommandsHistory));
        _this.options = options;
        return _this;
    }
    _helpers.createClass(AbstractCommandsQuickAccessProvider1, [
        {
            key: "_getPicks",
            value: function _getPicks(filter, disposables, token) {
                return __awaiter(this, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee1() {
                    var _this, allCommandPicks, filteredCommandPicks, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, commandPick, labelHighlights, aliasHighlights, mapLabelToCommand, _iteratorNormalCompletion1, _didIteratorError1, _iteratorError1, _iterator1, _step1, commandPick1, existingCommandForLabel, commandPicks, addSeparator, i, _this1, commandPick2, keybinding, ariaLabel;
                    return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx1) {
                        while(1)switch(_ctx1.prev = _ctx1.next){
                            case 0:
                                _this = this;
                                _ctx1.next = 3;
                                return this.getCommandPicks(disposables, token);
                            case 3:
                                allCommandPicks = _ctx1.sent;
                                if (!token.isCancellationRequested) {
                                    _ctx1.next = 6;
                                    break;
                                }
                                return _ctx1.abrupt("return", []);
                            case 6:
                                filteredCommandPicks = [];
                                _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                                _ctx1.prev = 8;
                                for(_iterator = allCommandPicks[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                                    commandPick = _step.value;
                                    labelHighlights = _typesJs.withNullAsUndefined(AbstractCommandsQuickAccessProvider1.WORD_FILTER(filter, commandPick.label));
                                    aliasHighlights = commandPick.commandAlias ? _typesJs.withNullAsUndefined(AbstractCommandsQuickAccessProvider1.WORD_FILTER(filter, commandPick.commandAlias)) : undefined;
                                    // Add if matching in label or alias
                                    if (labelHighlights || aliasHighlights) {
                                        commandPick.highlights = {
                                            label: labelHighlights,
                                            detail: this.options.showAlias ? aliasHighlights : undefined
                                        };
                                        filteredCommandPicks.push(commandPick);
                                    } else if (filter === commandPick.commandId) filteredCommandPicks.push(commandPick);
                                }
                                _ctx1.next = 16;
                                break;
                            case 12:
                                _ctx1.prev = 12;
                                _ctx1.t0 = _ctx1["catch"](8);
                                _didIteratorError = true;
                                _iteratorError = _ctx1.t0;
                            case 16:
                                _ctx1.prev = 16;
                                _ctx1.prev = 17;
                                if (!_iteratorNormalCompletion && _iterator.return != null) {
                                    _iterator.return();
                                }
                            case 19:
                                _ctx1.prev = 19;
                                if (!_didIteratorError) {
                                    _ctx1.next = 22;
                                    break;
                                }
                                throw _iteratorError;
                            case 22:
                                return _ctx1.finish(19);
                            case 23:
                                return _ctx1.finish(16);
                            case 24:
                                mapLabelToCommand = new Map();
                                _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                                _ctx1.prev = 26;
                                for(_iterator1 = filteredCommandPicks[Symbol.iterator](); !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                                    commandPick1 = _step1.value;
                                    existingCommandForLabel = mapLabelToCommand.get(commandPick1.label);
                                    if (existingCommandForLabel) {
                                        commandPick1.description = commandPick1.commandId;
                                        existingCommandForLabel.description = existingCommandForLabel.commandId;
                                    } else mapLabelToCommand.set(commandPick1.label, commandPick1);
                                }
                                _ctx1.next = 34;
                                break;
                            case 30:
                                _ctx1.prev = 30;
                                _ctx1.t1 = _ctx1["catch"](26);
                                _didIteratorError1 = true;
                                _iteratorError1 = _ctx1.t1;
                            case 34:
                                _ctx1.prev = 34;
                                _ctx1.prev = 35;
                                if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                                    _iterator1.return();
                                }
                            case 37:
                                _ctx1.prev = 37;
                                if (!_didIteratorError1) {
                                    _ctx1.next = 40;
                                    break;
                                }
                                throw _iteratorError1;
                            case 40:
                                return _ctx1.finish(37);
                            case 41:
                                return _ctx1.finish(34);
                            case 42:
                                // Sort by MRU order and fallback to name otherwise
                                filteredCommandPicks.sort(function(commandPickA, commandPickB) {
                                    var commandACounter = _this.commandsHistory.peek(commandPickA.commandId);
                                    var commandBCounter = _this.commandsHistory.peek(commandPickB.commandId);
                                    if (commandACounter && commandBCounter) return commandACounter > commandBCounter ? -1 : 1; // use more recently used command before older
                                    if (commandACounter) return -1; // first command was used, so it wins over the non used one
                                    if (commandBCounter) return 1; // other command was used so it wins over the command
                                    // both commands were never used, so we sort by name
                                    return commandPickA.label.localeCompare(commandPickB.label);
                                });
                                commandPicks = [];
                                addSeparator = false;
                                for(i = 0; i < filteredCommandPicks.length; i++){
                                    _this1 = this;
                                    commandPick2 = filteredCommandPicks[i];
                                    keybinding = this.keybindingService.lookupKeybinding(commandPick2.commandId);
                                    ariaLabel = keybinding ? _nlsJs.localize('commandPickAriaLabelWithKeybinding', "{0}, {1}", commandPick2.label, keybinding.getAriaLabel()) : commandPick2.label;
                                    // Separator: recently used
                                    if (i === 0 && this.commandsHistory.peek(commandPick2.commandId)) {
                                        commandPicks.push({
                                            type: 'separator',
                                            label: _nlsJs.localize('recentlyUsed', "recently used")
                                        });
                                        addSeparator = true;
                                    }
                                    // Separator: other commands
                                    if (i !== 0 && addSeparator && !this.commandsHistory.peek(commandPick2.commandId)) {
                                        commandPicks.push({
                                            type: 'separator',
                                            label: _nlsJs.localize('morecCommands', "other commands")
                                        });
                                        addSeparator = false; // only once
                                    }
                                    // Command
                                    commandPicks.push(Object.assign(Object.assign({}, commandPick2), {
                                        ariaLabel: ariaLabel,
                                        detail: this.options.showAlias && commandPick2.commandAlias !== commandPick2.label ? commandPick2.commandAlias : undefined,
                                        keybinding: keybinding,
                                        accept: function() {
                                            return __awaiter(_this1, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                                                return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                                                    while(1)switch(_ctx.prev = _ctx.next){
                                                        case 0:
                                                            // Add to history
                                                            this.commandsHistory.push(commandPick2.commandId);
                                                            // Telementry
                                                            this.telemetryService.publicLog2('workbenchActionExecuted', {
                                                                id: commandPick2.commandId,
                                                                from: 'quick open'
                                                            });
                                                            _ctx.prev = 2;
                                                            _ctx.next = 5;
                                                            return this.commandService.executeCommand(commandPick2.commandId);
                                                        case 5:
                                                            _ctx.next = 10;
                                                            break;
                                                        case 7:
                                                            _ctx.prev = 7;
                                                            _ctx.t0 = _ctx["catch"](2);
                                                            if (!_errorsJs.isPromiseCanceledError(_ctx.t0)) this.dialogService.show(_severityJsDefault.default.Error, _nlsJs.localize('canNotRun', "Command '{0}' resulted in an error ({1})", commandPick2.label, _errorMessageJs.toErrorMessage(_ctx.t0)));
                                                        case 10:
                                                        case "end":
                                                            return _ctx.stop();
                                                    }
                                                }, _callee, this, [
                                                    [
                                                        2,
                                                        7
                                                    ]
                                                ]);
                                            }));
                                        }
                                    }));
                                }
                                return _ctx1.abrupt("return", commandPicks);
                            case 47:
                            case "end":
                                return _ctx1.stop();
                        }
                    }, _callee1, this, [
                        [
                            8,
                            12,
                            16,
                            24
                        ],
                        [
                            17,
                            ,
                            19,
                            23
                        ],
                        [
                            26,
                            30,
                            34,
                            42
                        ],
                        [
                            35,
                            ,
                            37,
                            41
                        ]
                    ]);
                }));
            }
        }
    ]);
    return AbstractCommandsQuickAccessProvider1;
}(_pickerQuickAccessJs.PickerQuickAccessProvider);
AbstractCommandsQuickAccessProvider.PREFIX = '>';
AbstractCommandsQuickAccessProvider.WORD_FILTER = _filtersJs.or(_filtersJs.matchesPrefix, _filtersJs.matchesWords, _filtersJs.matchesContiguousSubString);
AbstractCommandsQuickAccessProvider = __decorate([
    __param(1, _instantiationJs.IInstantiationService),
    __param(2, _keybindingJs.IKeybindingService),
    __param(3, _commandsJs.ICommandService),
    __param(4, _telemetryJs.ITelemetryService),
    __param(5, _dialogsJs.IDialogService)
], AbstractCommandsQuickAccessProvider);
var CommandsHistory = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(CommandsHistory1, Disposable);
    var _super = _helpers.createSuper(CommandsHistory1);
    function CommandsHistory1(storageService, configurationService) {
        _helpers.classCallCheck(this, CommandsHistory1);
        var _this;
        _this = _super.call(this);
        _this.storageService = storageService;
        _this.configurationService = configurationService;
        _this.configuredCommandsHistoryLength = 0;
        _this.updateConfiguration();
        _this.load();
        _this.registerListeners();
        return _this;
    }
    _helpers.createClass(CommandsHistory1, [
        {
            key: "registerListeners",
            value: function registerListeners() {
                var _this = this;
                this._register(this.configurationService.onDidChangeConfiguration(function() {
                    return _this.updateConfiguration();
                }));
            }
        },
        {
            key: "updateConfiguration",
            value: function updateConfiguration() {
                this.configuredCommandsHistoryLength = CommandsHistory1.getConfiguredCommandHistoryLength(this.configurationService);
                if (CommandsHistory1.cache && CommandsHistory1.cache.limit !== this.configuredCommandsHistoryLength) {
                    CommandsHistory1.cache.limit = this.configuredCommandsHistoryLength;
                    CommandsHistory1.saveState(this.storageService);
                }
            }
        },
        {
            key: "load",
            value: function load() {
                var raw = this.storageService.get(CommandsHistory1.PREF_KEY_CACHE, 0 /* GLOBAL */ );
                var serializedCache;
                if (raw) try {
                    serializedCache = JSON.parse(raw);
                } catch (error) {
                // invalid data
                }
                var cache = CommandsHistory1.cache = new _mapJs.LRUCache(this.configuredCommandsHistoryLength, 1);
                if (serializedCache) {
                    var entries;
                    if (serializedCache.usesLRU) entries = serializedCache.entries;
                    else entries = serializedCache.entries.sort(function(a, b) {
                        return a.value - b.value;
                    });
                    entries.forEach(function(entry) {
                        return cache.set(entry.key, entry.value);
                    });
                }
                CommandsHistory1.counter = this.storageService.getNumber(CommandsHistory1.PREF_KEY_COUNTER, 0 /* GLOBAL */ , CommandsHistory1.counter);
            }
        },
        {
            key: "push",
            value: function push(commandId) {
                if (!CommandsHistory1.cache) return;
                CommandsHistory1.cache.set(commandId, CommandsHistory1.counter++); // set counter to command
                CommandsHistory1.saveState(this.storageService);
            }
        },
        {
            key: "peek",
            value: function peek(commandId) {
                var _a;
                return (_a = CommandsHistory1.cache) === null || _a === void 0 ? void 0 : _a.peek(commandId);
            }
        }
    ], [
        {
            key: "saveState",
            value: function saveState(storageService) {
                if (!CommandsHistory1.cache) return;
                var serializedCache = {
                    usesLRU: true,
                    entries: []
                };
                CommandsHistory1.cache.forEach(function(value, key) {
                    return serializedCache.entries.push({
                        key: key,
                        value: value
                    });
                });
                storageService.store(CommandsHistory1.PREF_KEY_CACHE, JSON.stringify(serializedCache), 0 /* GLOBAL */ , 0 /* USER */ );
                storageService.store(CommandsHistory1.PREF_KEY_COUNTER, CommandsHistory1.counter, 0 /* GLOBAL */ , 0 /* USER */ );
            }
        },
        {
            key: "getConfiguredCommandHistoryLength",
            value: function getConfiguredCommandHistoryLength(configurationService) {
                var _a, _b;
                var config = configurationService.getValue();
                var configuredCommandHistoryLength = (_b = (_a = config.workbench) === null || _a === void 0 ? void 0 : _a.commandPalette) === null || _b === void 0 ? void 0 : _b.history;
                if (typeof configuredCommandHistoryLength === 'number') return configuredCommandHistoryLength;
                return CommandsHistory1.DEFAULT_COMMANDS_HISTORY_LENGTH;
            }
        }
    ]);
    return CommandsHistory1;
}(_lifecycleJs.Disposable);
CommandsHistory.DEFAULT_COMMANDS_HISTORY_LENGTH = 50;
CommandsHistory.PREF_KEY_CACHE = 'commandPalette.mru.cache';
CommandsHistory.PREF_KEY_COUNTER = 'commandPalette.mru.counter';
CommandsHistory.counter = 1;
CommandsHistory = __decorate([
    __param(0, _storageJs.IStorageService),
    __param(1, _configurationJs.IConfigurationService)
], CommandsHistory);

},{"@swc/helpers":"erO4s","regenerator-runtime":"12Ae8","../../../base/common/errorMessage.js":"eVUCO","../../../base/common/errors.js":"afm4i","../../../base/common/filters.js":"m7Exq","../../../base/common/lifecycle.js":"bcbPy","../../../base/common/map.js":"4OXsW","../../../base/common/severity.js":"a9BBX","../../../base/common/types.js":"lF7Cj","../../../nls.js":"9djYb","../../commands/common/commands.js":"eeuTC","../../configuration/common/configuration.js":"9wFfb","../../dialogs/common/dialogs.js":"6IMIA","../../instantiation/common/instantiation.js":"9ABZB","../../keybinding/common/keybinding.js":"5rr15","./pickerQuickAccess.js":"a0lKs","../../storage/common/storage.js":"1m95n","../../telemetry/common/telemetry.js":"ers5B","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"eVUCO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Tries to generate a human readable error message out of the error. If the verbose parameter
 * is set to true, the error message will include stacktrace details if provided.
 *
 * @returns A string containing the error message.
 */ parcelHelpers.export(exports, "toErrorMessage", function() {
    return toErrorMessage;
});
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _arraysJs = require("./arrays.js");
var _typesJs = require("./types.js");
var _nlsJs = require("../../nls.js");
function exceptionToErrorMessage(exception, verbose) {
    if (verbose && (exception.stack || exception.stacktrace)) return _nlsJs.localize('stackTrace.format', "{0}: {1}", detectSystemErrorMessage(exception), stackToString(exception.stack) || stackToString(exception.stacktrace));
    return detectSystemErrorMessage(exception);
}
function stackToString(stack) {
    if (Array.isArray(stack)) return stack.join('\n');
    return stack;
}
function detectSystemErrorMessage(exception) {
    // See https://nodejs.org/api/errors.html#errors_class_system_error
    if (typeof exception.code === 'string' && typeof exception.errno === 'number' && typeof exception.syscall === 'string') return _nlsJs.localize('nodeExceptionMessage', "A system error occurred ({0})", exception.message);
    return exception.message || _nlsJs.localize('error.defaultMessage', "An unknown error occurred. Please consult the log for more details.");
}
function toErrorMessage() {
    var error = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null, verbose = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    if (!error) return _nlsJs.localize('error.defaultMessage', "An unknown error occurred. Please consult the log for more details.");
    if (Array.isArray(error)) {
        var errors = _arraysJs.coalesce(error);
        var msg = toErrorMessage(errors[0], verbose);
        if (errors.length > 1) return _nlsJs.localize('error.moreErrors', "{0} ({1} errors in total)", msg, errors.length);
        return msg;
    }
    if (_typesJs.isString(error)) return error;
    if (error.detail) {
        var detail = error.detail;
        if (detail.error) return exceptionToErrorMessage(detail.error, verbose);
        if (detail.exception) return exceptionToErrorMessage(detail.exception, verbose);
    }
    if (error.stack) return exceptionToErrorMessage(error, verbose);
    if (error.message) return error.message;
    return _nlsJs.localize('error.defaultMessage', "An unknown error occurred. Please consult the log for more details.");
}

},{"./arrays.js":"bZs3E","./types.js":"lF7Cj","../../nls.js":"9djYb","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"a0lKs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TriggerAction", function() {
    return TriggerAction;
});
parcelHelpers.export(exports, "PickerQuickAccessProvider", function() {
    return PickerQuickAccessProvider;
});
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
var _asyncJs = require("../../../base/common/async.js");
var _cancellationJs = require("../../../base/common/cancellation.js");
var _lifecycleJs = require("../../../base/common/lifecycle.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var TriggerAction;
(function(TriggerAction1) {
    /**
     * Do nothing after the button was clicked.
     */ TriggerAction1[TriggerAction1["NO_ACTION"] = 0] = "NO_ACTION";
    /**
     * Close the picker.
     */ TriggerAction1[TriggerAction1["CLOSE_PICKER"] = 1] = "CLOSE_PICKER";
    /**
     * Update the results of the picker.
     */ TriggerAction1[TriggerAction1["REFRESH_PICKER"] = 2] = "REFRESH_PICKER";
    /**
     * Remove the item from the picker.
     */ TriggerAction1[TriggerAction1["REMOVE_ITEM"] = 3] = "REMOVE_ITEM";
})(TriggerAction || (TriggerAction = {}));
function isPicksWithActive(obj) {
    var candidate = obj;
    return Array.isArray(candidate.items);
}
function isFastAndSlowPicks(obj) {
    var candidate = obj;
    return !!candidate.picks && candidate.additionalPicks instanceof Promise;
}
var PickerQuickAccessProvider = /*#__PURE__*/ function(Disposable) {
    "use strict";
    _helpers.inherits(PickerQuickAccessProvider, Disposable);
    var _super = _helpers.createSuper(PickerQuickAccessProvider);
    function PickerQuickAccessProvider(prefix, options) {
        _helpers.classCallCheck(this, PickerQuickAccessProvider);
        var _this;
        _this = _super.call(this);
        _this.prefix = prefix;
        _this.options = options;
        return _this;
    }
    _helpers.createClass(PickerQuickAccessProvider, [
        {
            key: "provide",
            value: function provide(picker, token) {
                var _this2 = this;
                var _a1;
                var disposables = new _lifecycleJs.DisposableStore();
                // Apply options if any
                picker.canAcceptInBackground = !!((_a1 = this.options) === null || _a1 === void 0 ? void 0 : _a1.canAcceptInBackground);
                // Disable filtering & sorting, we control the results
                picker.matchOnLabel = picker.matchOnDescription = picker.matchOnDetail = picker.sortByLabel = false;
                // Set initial picks and update on type
                var picksCts = undefined;
                var picksDisposable = disposables.add(new _lifecycleJs.MutableDisposable());
                var updatePickerItems = function() {
                    return __awaiter(_this2, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee1() {
                        var _this, picksDisposables, picksToken, picksFilter, providedPicks, applyPicks, _this1, fastPicksApplied, slowPicksApplied, awaitedPicks;
                        return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx1) {
                            while(1)switch(_ctx1.prev = _ctx1.next){
                                case 0:
                                    _this = this;
                                    picksDisposables = picksDisposable.value = new _lifecycleJs.DisposableStore();
                                    // Cancel any previous ask for picks and busy
                                    picksCts === null || picksCts === void 0 || picksCts.dispose(true);
                                    picker.busy = false;
                                    // Create new cancellation source for this run
                                    picksCts = new _cancellationJs.CancellationTokenSource(token);
                                    picksToken = picksCts.token;
                                    picksFilter = picker.value.substr(this.prefix.length).trim();
                                    providedPicks = this._getPicks(picksFilter, picksDisposables, picksToken);
                                    applyPicks = function(picks, skipEmpty) {
                                        var _a;
                                        var items;
                                        var activeItem = undefined;
                                        if (isPicksWithActive(picks)) {
                                            items = picks.items;
                                            activeItem = picks.active;
                                        } else items = picks;
                                        if (items.length === 0) {
                                            if (skipEmpty) return false;
                                            if (picksFilter.length > 0 && ((_a = _this.options) === null || _a === void 0 ? void 0 : _a.noResultsPick)) items = [
                                                _this.options.noResultsPick
                                            ];
                                        }
                                        picker.items = items;
                                        if (activeItem) picker.activeItems = [
                                            activeItem
                                        ];
                                        return true;
                                    };
                                    if (!(providedPicks === null)) {
                                        _ctx1.next = 13;
                                        break;
                                    }
                                    ;
                                    _ctx1.next = 36;
                                    break;
                                case 13:
                                    if (!isFastAndSlowPicks(providedPicks)) {
                                        _ctx1.next = 21;
                                        break;
                                    }
                                    _this1 = this;
                                    fastPicksApplied = false;
                                    slowPicksApplied = false;
                                    _ctx1.next = 19;
                                    return Promise.all([
                                        // Fast Picks: to reduce amount of flicker, we race against
                                        // the slow picks over 500ms and then set the fast picks.
                                        // If the slow picks are faster, we reduce the flicker by
                                        // only setting the items once.
                                        function() {
                                            return __awaiter(_this1, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                                                return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                                                    while(1)switch(_ctx.prev = _ctx.next){
                                                        case 0:
                                                            _ctx.next = 2;
                                                            return _asyncJs.timeout(PickerQuickAccessProvider.FAST_PICKS_RACE_DELAY);
                                                        case 2:
                                                            if (!picksToken.isCancellationRequested) {
                                                                _ctx.next = 4;
                                                                break;
                                                            }
                                                            return _ctx.abrupt("return");
                                                        case 4:
                                                            if (!slowPicksApplied) fastPicksApplied = applyPicks(providedPicks.picks, true);
                                                        case 5:
                                                        case "end":
                                                            return _ctx.stop();
                                                    }
                                                }, _callee);
                                            }));
                                        }(),
                                        // Slow Picks: we await the slow picks and then set them at
                                        // once together with the fast picks, but only if we actually
                                        // have additional results.
                                        function() {
                                            return __awaiter(_this1, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                                                var awaitedAdditionalPicks, picks, activePick, additionalPicks, additionalActivePick, fallbackActivePick, fallbackActivePickCandidate;
                                                return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                                                    while(1)switch(_ctx.prev = _ctx.next){
                                                        case 0:
                                                            picker.busy = true;
                                                            _ctx.prev = 1;
                                                            _ctx.next = 4;
                                                            return providedPicks.additionalPicks;
                                                        case 4:
                                                            awaitedAdditionalPicks = _ctx.sent;
                                                            if (!picksToken.isCancellationRequested) {
                                                                _ctx.next = 7;
                                                                break;
                                                            }
                                                            return _ctx.abrupt("return");
                                                        case 7:
                                                            ;
                                                            activePick = undefined;
                                                            if (isPicksWithActive(providedPicks.picks)) {
                                                                picks = providedPicks.picks.items;
                                                                activePick = providedPicks.picks.active;
                                                            } else picks = providedPicks.picks;
                                                            ;
                                                            additionalActivePick = undefined;
                                                            if (isPicksWithActive(awaitedAdditionalPicks)) {
                                                                additionalPicks = awaitedAdditionalPicks.items;
                                                                additionalActivePick = awaitedAdditionalPicks.active;
                                                            } else additionalPicks = awaitedAdditionalPicks;
                                                            if (additionalPicks.length > 0 || !fastPicksApplied) {
                                                                fallbackActivePick = undefined;
                                                                if (!activePick && !additionalActivePick) {
                                                                    fallbackActivePickCandidate = picker.activeItems[0];
                                                                    if (fallbackActivePickCandidate && picks.indexOf(fallbackActivePickCandidate) !== -1) fallbackActivePick = fallbackActivePickCandidate;
                                                                }
                                                                applyPicks({
                                                                    items: _helpers.toConsumableArray(picks).concat(_helpers.toConsumableArray(additionalPicks)),
                                                                    active: activePick || additionalActivePick || fallbackActivePick
                                                                });
                                                            }
                                                        case 14:
                                                            _ctx.prev = 14;
                                                            if (!picksToken.isCancellationRequested) picker.busy = false;
                                                            slowPicksApplied = true;
                                                            return _ctx.finish(14);
                                                        case 18:
                                                        case "end":
                                                            return _ctx.stop();
                                                    }
                                                }, _callee, null, [
                                                    [
                                                        1,
                                                        ,
                                                        14,
                                                        18
                                                    ]
                                                ]);
                                            }));
                                        }()
                                    ]);
                                case 19:
                                    _ctx1.next = 36;
                                    break;
                                case 21:
                                    if (providedPicks instanceof Promise) {
                                        _ctx1.next = 25;
                                        break;
                                    }
                                    applyPicks(providedPicks);
                                    _ctx1.next = 36;
                                    break;
                                case 25:
                                    picker.busy = true;
                                    _ctx1.prev = 26;
                                    _ctx1.next = 29;
                                    return providedPicks;
                                case 29:
                                    awaitedPicks = _ctx1.sent;
                                    if (!picksToken.isCancellationRequested) {
                                        _ctx1.next = 32;
                                        break;
                                    }
                                    return _ctx1.abrupt("return");
                                case 32:
                                    applyPicks(awaitedPicks);
                                case 33:
                                    _ctx1.prev = 33;
                                    if (!picksToken.isCancellationRequested) picker.busy = false;
                                    return _ctx1.finish(33);
                                case 36:
                                case "end":
                                    return _ctx1.stop();
                            }
                        }, _callee1, this, [
                            [
                                26,
                                ,
                                33,
                                36
                            ]
                        ]);
                    }));
                };
                disposables.add(picker.onDidChangeValue(function() {
                    return updatePickerItems();
                }));
                updatePickerItems();
                // Accept the pick on accept and hide picker
                disposables.add(picker.onDidAccept(function(event) {
                    var _selectedItems = _helpers.slicedToArray(picker.selectedItems, 1), item = _selectedItems[0];
                    if (typeof (item === null || item === void 0 ? void 0 : item.accept) === 'function') {
                        if (!event.inBackground) picker.hide(); // hide picker unless we accept in background
                        item.accept(picker.keyMods, event);
                    }
                }));
                // Trigger the pick with button index if button triggered
                disposables.add(picker.onDidTriggerItemButton(function(param) {
                    var button = param.button, item = param.item;
                    return __awaiter(_this2, void 0, void 0, _regeneratorRuntimeDefault.default.mark(function _callee() {
                        var _b, _c, buttonIndex, result, action, index, items, removed, activeItems, keepScrollPositionBefore;
                        return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                            while(1)switch(_ctx.prev = _ctx.next){
                                case 0:
                                    ;
                                    if (!(typeof item.trigger === 'function')) {
                                        _ctx.next = 26;
                                        break;
                                    }
                                    buttonIndex = (_c = (_b = item.buttons) === null || _b === void 0 ? void 0 : _b.indexOf(button)) !== null && _c !== void 0 ? _c : -1;
                                    if (!(buttonIndex >= 0)) {
                                        _ctx.next = 26;
                                        break;
                                    }
                                    result = item.trigger(buttonIndex, picker.keyMods);
                                    if (!(typeof result === 'number')) {
                                        _ctx.next = 9;
                                        break;
                                    }
                                    _ctx.t0 = result;
                                    _ctx.next = 12;
                                    break;
                                case 9:
                                    _ctx.next = 11;
                                    return result;
                                case 11:
                                    _ctx.t0 = _ctx.sent;
                                case 12:
                                    action = _ctx.t0;
                                    if (!token.isCancellationRequested) {
                                        _ctx.next = 15;
                                        break;
                                    }
                                    return _ctx.abrupt("return");
                                case 15:
                                    _ctx.t1 = action;
                                    _ctx.next = _ctx.t1 === TriggerAction.NO_ACTION ? 18 : _ctx.t1 === TriggerAction.CLOSE_PICKER ? 19 : _ctx.t1 === TriggerAction.REFRESH_PICKER ? 21 : _ctx.t1 === TriggerAction.REMOVE_ITEM ? 23 : 26;
                                    break;
                                case 18:
                                    return _ctx.abrupt("break", 26);
                                case 19:
                                    picker.hide();
                                    return _ctx.abrupt("break", 26);
                                case 21:
                                    updatePickerItems();
                                    return _ctx.abrupt("break", 26);
                                case 23:
                                    index = picker.items.indexOf(item);
                                    if (index !== -1) {
                                        items = picker.items.slice();
                                        removed = items.splice(index, 1);
                                        activeItems = picker.activeItems.filter(function(activeItem) {
                                            return activeItem !== removed[0];
                                        });
                                        keepScrollPositionBefore = picker.keepScrollPosition;
                                        picker.keepScrollPosition = true;
                                        picker.items = items;
                                        if (activeItems) picker.activeItems = activeItems;
                                        picker.keepScrollPosition = keepScrollPositionBefore;
                                    }
                                    return _ctx.abrupt("break", 26);
                                case 26:
                                case "end":
                                    return _ctx.stop();
                            }
                        }, _callee);
                    }));
                }));
                return disposables;
            }
        }
    ]);
    return PickerQuickAccessProvider;
}(_lifecycleJs.Disposable);
PickerQuickAccessProvider.FAST_PICKS_RACE_DELAY = 200; // timeout before we accept fast results before slow results are present

},{"@swc/helpers":"erO4s","regenerator-runtime":"12Ae8","../../../base/common/async.js":"kMhSh","../../../base/common/cancellation.js":"1C4LY","../../../base/common/lifecycle.js":"bcbPy","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"4b0k3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StandaloneReferencesController", function() {
    return StandaloneReferencesController;
});
var _helpers = require("@swc/helpers");
var _editorExtensionsJs = require("../../../browser/editorExtensions.js");
var _codeEditorServiceJs = require("../../../browser/services/codeEditorService.js");
var _referencesControllerJs = require("../../../contrib/gotoSymbol/peek/referencesController.js");
var _configurationJs = require("../../../../platform/configuration/common/configuration.js");
var _contextkeyJs = require("../../../../platform/contextkey/common/contextkey.js");
var _instantiationJs = require("../../../../platform/instantiation/common/instantiation.js");
var _notificationJs = require("../../../../platform/notification/common/notification.js");
var _storageJs = require("../../../../platform/storage/common/storage.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var StandaloneReferencesController = /*#__PURE__*/ function(ReferencesController) {
    "use strict";
    _helpers.inherits(StandaloneReferencesController1, ReferencesController);
    var _super = _helpers.createSuper(StandaloneReferencesController1);
    function StandaloneReferencesController1(editor, contextKeyService, editorService, notificationService, instantiationService, storageService, configurationService) {
        _helpers.classCallCheck(this, StandaloneReferencesController1);
        return _super.call(this, true, editor, contextKeyService, editorService, notificationService, instantiationService, storageService, configurationService);
    }
    return StandaloneReferencesController1;
}(_referencesControllerJs.ReferencesController);
StandaloneReferencesController = __decorate([
    __param(1, _contextkeyJs.IContextKeyService),
    __param(2, _codeEditorServiceJs.ICodeEditorService),
    __param(3, _notificationJs.INotificationService),
    __param(4, _instantiationJs.IInstantiationService),
    __param(5, _storageJs.IStorageService),
    __param(6, _configurationJs.IConfigurationService)
], StandaloneReferencesController);
_editorExtensionsJs.registerEditorContribution(_referencesControllerJs.ReferencesController.ID, StandaloneReferencesController);

},{"@swc/helpers":"erO4s","../../../browser/editorExtensions.js":"dFnlo","../../../browser/services/codeEditorService.js":"izkTN","../../../contrib/gotoSymbol/peek/referencesController.js":"kj3BP","../../../../platform/configuration/common/configuration.js":"9wFfb","../../../../platform/contextkey/common/contextkey.js":"5cjav","../../../../platform/instantiation/common/instantiation.js":"9ABZB","../../../../platform/notification/common/notification.js":"baqho","../../../../platform/storage/common/storage.js":"1m95n","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"fyzaj":[function(require,module,exports) {
var _helpers = require("@swc/helpers");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _editorExtensionsJs = require("../../../browser/editorExtensions.js");
var _standaloneThemeServiceJs = require("../../common/standaloneThemeService.js");
var _standaloneStringsJs = require("../../../common/standaloneStrings.js");
var ToggleHighContrast = /*#__PURE__*/ function(EditorAction) {
    "use strict";
    _helpers.inherits(ToggleHighContrast, EditorAction);
    var _super = _helpers.createSuper(ToggleHighContrast);
    function ToggleHighContrast() {
        _helpers.classCallCheck(this, ToggleHighContrast);
        var _this;
        _this = _super.call(this, {
            id: 'editor.action.toggleHighContrast',
            label: _standaloneStringsJs.ToggleHighContrastNLS.toggleHighContrast,
            alias: 'Toggle High Contrast Theme',
            precondition: undefined
        });
        _this._originalThemeName = null;
        return _this;
    }
    _helpers.createClass(ToggleHighContrast, [
        {
            key: "run",
            value: function run(accessor, editor) {
                var standaloneThemeService = accessor.get(_standaloneThemeServiceJs.IStandaloneThemeService);
                if (this._originalThemeName) {
                    // We must toggle back to the integrator's theme
                    standaloneThemeService.setTheme(this._originalThemeName);
                    this._originalThemeName = null;
                } else {
                    this._originalThemeName = standaloneThemeService.getColorTheme().themeName;
                    standaloneThemeService.setTheme('hc-black');
                }
            }
        }
    ]);
    return ToggleHighContrast;
}(_editorExtensionsJs.EditorAction);
_editorExtensionsJs.registerEditorAction(ToggleHighContrast);

},{"@swc/helpers":"erO4s","../../../browser/editorExtensions.js":"dFnlo","../../common/standaloneThemeService.js":"bYuaJ","../../../common/standaloneStrings.js":"325YA"}],"9u22Y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "languageId", function() {
    return languageId;
});
parcelHelpers.export(exports, "InlayHintsProvider", function() {
    return InlayHintsProvider;
});
parcelHelpers.export(exports, "registerLibraries", function() {
    return registerLibraries;
});
parcelHelpers.export(exports, "registerLanguage", function() {
    return registerLanguage;
});
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
/*
 * Monotone Framework Analyzer
 * Copyright (C) 2022  Manuel Meitinger
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */ var _monacoEditor = require("monaco-editor");
var _helpers1 = require("./helpers");
var languageId = 'while';
var InlayHintsProvider = /*#__PURE__*/ function() {
    "use strict";
    function InlayHintsProvider() {
        _helpers.classCallCheck(this, InlayHintsProvider);
        _helpers.defineProperty(this, "listeners", new Set());
        _helpers.defineProperty(this, "inlayHints", new Map());
    }
    _helpers.createClass(InlayHintsProvider, [
        {
            key: "notifyListeners",
            value: function notifyListeners() {
                this.listeners.forEach(function(listener) {
                    return listener();
                });
            }
        },
        {
            key: "setInlayHints",
            value: function setInlayHints(id, inlayHints) {
                this.inlayHints.set(id, inlayHints);
                this.notifyListeners();
            }
        },
        {
            key: "clearInlayHints",
            value: function clearInlayHints(id) {
                if (this.inlayHints.delete(id)) this.notifyListeners();
            }
        },
        {
            key: "onDidChangeInlayHints",
            value: function onDidChangeInlayHints(listener, thisArg) {
                var _this = this;
                this.listeners.add(listener.bind(thisArg));
                return {
                    dispose: function() {
                        _this.listeners.delete(listener);
                    }
                };
            }
        },
        {
            key: "provideInlayHints",
            value: function provideInlayHints(model, _range, _token) {
                var ref;
                return (ref = this.inlayHints.get(model.id)) === null || ref === void 0 ? void 0 : ref.slice();
            }
        }
    ]);
    return InlayHintsProvider;
}();
_helpers.defineProperty(InlayHintsProvider, "instance", new InlayHintsProvider());
var registerLibraries = function() {
    var _ref1 = _helpers.asyncToGenerator(_regeneratorRuntimeDefault.default.mark(function _callee1() {
        var fetchUrl, register;
        return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx1) {
            while(1)switch(_ctx1.prev = _ctx1.next){
                case 0:
                    fetchUrl = function() {
                        var _ref = _helpers.asyncToGenerator(_regeneratorRuntimeDefault.default.mark(function _callee(url) {
                            var response;
                            return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
                                while(1)switch(_ctx.prev = _ctx.next){
                                    case 0:
                                        _ctx.next = 2;
                                        return fetch(url.toString());
                                    case 2:
                                        response = _ctx.sent;
                                        _ctx.next = 5;
                                        return response.ok ? response.text() : _helpers1._throw(new Error(response.statusText));
                                    case 5:
                                        return _ctx.abrupt("return", _ctx.sent);
                                    case 6:
                                    case "end":
                                        return _ctx.stop();
                                }
                            }, _callee);
                        }));
                        return function fetchUrl(url) {
                            return _ref.apply(this, arguments);
                        };
                    }();
                    register = function(filePath) {
                        return function(content) {
                            return _monacoEditor.languages.typescript.typescriptDefaults.addExtraLib(content, filePath);
                        };
                    };
                    _ctx1.next = 4;
                    return Promise.all([
                        fetchUrl(new URL(require("b6a67dee2d791cf0"))).then(register('program.d.ts')),
                        fetchUrl(new URL(require("45c554c77aa3b892"))).then(register('framework.d.ts')),
                        fetchUrl(new URL(require("f047e753f62599bb"))).then(function(content) {
                            return content.replaceAll('readonly', 'const').replace('export interface Environment', 'define global');
                        }).then(register('environment.d.ts'))
                    ]);
                case 4:
                case "end":
                    return _ctx1.stop();
            }
        }, _callee1);
    }));
    return function registerLibraries() {
        return _ref1.apply(this, arguments);
    };
}();
var registerLanguage = function() {
    var keywords = [
        'skip',
        'if',
        'then',
        'else',
        'while',
        'do',
        'not',
        'and',
        'or'
    ];
    var constants = [
        'true',
        'false'
    ];
    var operators = [
        ':=',
        '==',
        '!=',
        '+',
        '-',
        '*',
        '/',
        '>',
        '<',
        '<=',
        '>='
    ];
    var completions = keywords.map(function(keyword) {
        return {
            text: keyword,
            type: _monacoEditor.languages.CompletionItemKind.Keyword
        };
    }).concat(constants.map(function(constant) {
        return {
            text: constant,
            type: _monacoEditor.languages.CompletionItemKind.Constant
        };
    })).concat(operators.map(function(operator) {
        return {
            text: operator,
            type: _monacoEditor.languages.CompletionItemKind.Operator
        };
    }));
    _monacoEditor.languages.register({
        id: languageId
    });
    _monacoEditor.languages.setLanguageConfiguration(languageId, {
        brackets: [
            [
                '(',
                ')'
            ]
        ],
        folding: {
            markers: {
                start: /\(/,
                end: /\)/
            }
        }
    });
    _monacoEditor.languages.setMonarchTokensProvider(languageId, {
        defaultToken: 'invalid',
        brackets: [
            {
                open: '(',
                close: ')',
                token: 'delimiter.parenthesis'
            }
        ],
        keywords: keywords,
        constants: constants,
        tokenizer: {
            root: [
                [
                    /[a-z_]+/,
                    {
                        cases: {
                            '@keywords': 'keyword',
                            '@constants': 'constant',
                            '@default': 'variable'
                        }
                    }
                ],
                [
                    /[ \t\r\n]+/,
                    'white'
                ],
                [
                    /[()]/,
                    '@brackets'
                ],
                [
                    new RegExp(operators.map(function(operator) {
                        return _helpers.toConsumableArray(operator).flatMap(function(c) {
                            return [
                                '\\',
                                c
                            ];
                        }).join('');
                    }).join('|')),
                    'operator'
                ],
                [
                    /[0-9]+/,
                    'number'
                ],
                [
                    /[;]/,
                    'delimiter'
                ]
            ]
        }
    });
    _monacoEditor.languages.registerCompletionItemProvider(languageId, {
        provideCompletionItems: function(model, position) {
            var word = model.getWordUntilPosition(position);
            var range = {
                startLineNumber: position.lineNumber,
                endLineNumber: position.lineNumber,
                startColumn: word.startColumn,
                endColumn: word.endColumn
            };
            return {
                suggestions: completions.filter(function(completion) {
                    return completion.text.length > word.word.length && completion.text.startsWith(word.word);
                }).map(function(completion) {
                    return {
                        label: completion.text,
                        kind: completion.type,
                        insertText: completion.text,
                        range: range
                    };
                })
            };
        }
    });
    _monacoEditor.languages.registerInlayHintsProvider(languageId, InlayHintsProvider.instance);
};

},{"@swc/helpers":"erO4s","regenerator-runtime":"12Ae8","monaco-editor":"cBoAt","./helpers":"csAGw","b6a67dee2d791cf0":"enSGi","45c554c77aa3b892":"aurC6","f047e753f62599bb":"fjqiw","@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"csAGw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "_throw", function() {
    return _throw;
});
parcelHelpers.export(exports, "runWorker", function() {
    return runWorker;
});
parcelHelpers.export(exports, "cardinality", function() {
    return cardinality;
});
parcelHelpers.export(exports, "difference", function() {
    return difference;
});
parcelHelpers.export(exports, "intersection", function() {
    return intersection;
});
parcelHelpers.export(exports, "isElement", function() {
    return isElement;
});
parcelHelpers.export(exports, "isEqual", function() {
    return isEqual;
});
parcelHelpers.export(exports, "isStrictSubset", function() {
    return isStrictSubset;
});
parcelHelpers.export(exports, "isSubset", function() {
    return isSubset;
});
parcelHelpers.export(exports, "union", function() {
    return union;
});
parcelHelpers.export(exports, "formatExpression", function() {
    return formatExpression;
});
var _throw = function(e) {
    throw e;
};
var runWorker = function(worker) {
    onmessage = function(e) {
        return postMessage(worker(e.data));
    };
};
var asSet = function(values) {
    return values instanceof Set ? values : new Set(values);
};
var cardinality = function(s) {
    return asSet(s).size;
};
var difference = function(a, b) {
    var result = new Set(a);
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = b[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var value = _step.value;
            result.delete(value);
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    return result;
};
var intersection = function(a, b) {
    var result = new Set();
    var setA = asSet(a);
    var setB = asSet(b);
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = setB[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var value = _step.value;
            if (setA.has(value)) result.add(value);
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    return result;
};
var isElement = function(e, s) {
    return Array.isArray(s) ? s.includes(e) : asSet(s).has(e);
};
var internalIsSubset = function(setA, setB) {
    if (setA.size > setB.size) return false;
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = setA[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var key = _step.value;
            if (!setB.has(key)) return false;
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    return true;
};
var isEqual = function(a, b) {
    var setA = asSet(a);
    var setB = asSet(b);
    return setA.size === setB.size && internalIsSubset(setA, setB);
};
var isStrictSubset = function(a, b) {
    var setA = asSet(a);
    var setB = asSet(b);
    return setA.size !== setB.size && internalIsSubset(setA, setB);
};
var isSubset = function(a, b) {
    return internalIsSubset(asSet(a), asSet(b));
};
var union = function(a, b) {
    var result = new Set(a);
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = b[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var value = _step.value;
            result.add(value);
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    return result;
};
var formatExpression = function(expression) {
    switch(expression.type){
        case 'true':
        case 'false':
            return expression.type;
        case 'var':
            return expression.name;
        case 'not':
            return "(not ".concat(formatExpression(expression.value), ")");
        case 'n':
            return expression.value.toString();
        case '+':
        case '-':
        case '*':
        case '/':
        case '<':
        case '>':
        case '<=':
        case '>=':
        case '==':
        case '!=':
        case 'or':
        case 'and':
            return "(".concat(formatExpression(expression.left), " ").concat(expression.type, " ").concat(formatExpression(expression.right), ")");
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"enSGi":[function(require,module,exports) {
module.exports = require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("h2xNS");

},{"./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"aurC6":[function(require,module,exports) {
module.exports = require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("boLZc");

},{"./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"fjqiw":[function(require,module,exports) {
module.exports = require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("7Ucya");

},{"./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"4p05g":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "predefinedFrameworks", function() {
    return predefinedFrameworks;
});
parcelHelpers.export(exports, "defaultProgram", function() {
    return defaultProgram;
});
parcelHelpers.export(exports, "defaultFramework", function() {
    return defaultFramework;
});
var predefinedFrameworks = {
    'Available Expressions Analysis': [
        'define({',
        '    type: "forward",',
        '    init: expressions,',
        '    extremal: [],',
        '    combine: (l, r) => intersection(l, r),',
        '    compare: (l, r) => isSubset(r, l),',
        '    transfer: (statement, v) => {',
        '        switch (statement.type) {',
        '            case "skip":',
        '                return v',
        '            case "assign":',
        '                return union(',
        '                    difference(',
        '                        v,',
        '                        [...expressions].filter(expression => isElement(statement.variable, freeVariables(expression)))',
        '                    ),',
        '                    [...allExpressions(statement.expression)].filter(expression => !isElement(statement.variable, freeVariables(expression)))',
        '                )',
        '            case "if":',
        '            case "while":',
        '                return union(v, allExpressions(statement.condition))',
        '        }',
        '    },',
        '    format: formatExpression',
        '})',
        ''
    ].join('\r\n'),
    'Reaching Definition Analysis': [
        'define<[string, number]>({',
        '    type: "forward",',
        '    init: [],',
        '    extremal: [...variables].map(variable => unique([variable, 0])),',
        '    combine: (l, r) => union(l, r),',
        '    compare: (l, r) => isSubset(l, r),',
        '    transfer: (statement, v) => {',
        '        if (statement.type === "assign") {',
        '            return [...v].filter(([variable, _]) => variable !== statement.variable).concat([unique([statement.variable, statement.label])])',
        '        } else {',
        '            return v',
        '        }',
        '    },',
        // eslint-disable-next-line no-template-curly-in-string
        '    format: ([variable, label]) => `(${variable},${label === 0 ? "?" : label.toString()})`',
        '})',
        ''
    ].join('\r\n'),
    'Very Busy Expressions Analysis': [
        'define({',
        '    type: "backward",',
        '    init: expressions,',
        '    extremal: [],',
        '    combine: (l, r) => intersection(l, r),',
        '    compare: (l, r) => isSubset(r, l),',
        '    transfer: (statement, v) => {',
        '        switch (statement.type) {',
        '            case "skip":',
        '                return v',
        '            case "assign":',
        '                return union(',
        '                    difference(',
        '                        v,',
        '                        [...expressions].filter(expression => isElement(statement.variable, freeVariables(expression)))',
        '                    ),',
        '                    allExpressions(statement.expression)',
        '                )',
        '            case "if":',
        '            case "while":',
        '                return union(v, allExpressions(statement.condition))',
        '        }',
        '    },',
        '    format: formatExpression',
        '})',
        ''
    ].join('\r\n'),
    'Live Variables Analysis': [
        'define<string>({',
        '    type: "backward",',
        '    init: [],',
        '    extremal: [],',
        '    combine: (l, r) => union(l, r),',
        '    compare: (l, r) => isSubset(l, r),',
        '    transfer: (statement, v) => {',
        '        switch (statement.type) {',
        '            case "skip":',
        '                return v',
        '            case "assign":',
        '                return union(difference(v, [statement.variable]), freeVariables(statement.expression))',
        '            case "if":',
        '            case "while":',
        '                return union(v, freeVariables(statement.condition))',
        '        }',
        '    },',
        '    format: s => s',
        '})',
        ''
    ].join('\r\n')
};
var defaultProgram = [
    'x := a + b',
    'y := a * b',
    'while y > a + b do (',
    '    a := a + 1',
    '    x := x + b',
    ')',
    ''
].join('\r\n');
var defaultFramework = predefinedFrameworks['Available Expressions Analysis'];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"5oERU"}],"eYKDV":[function(require,module,exports) {
var workerURL = require('./helpers/get-worker-url');
var bundleURL = require('./helpers/bundle-url');
var url = bundleURL.getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("eoaGF");
module.exports = workerURL(url, bundleURL.getOrigin(url), false);

},{"./helpers/get-worker-url":"5dbxD","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"5dbxD":[function(require,module,exports) {
"use strict";
module.exports = function(workerUrl, origin, isESM) {
    if (origin === self.location.origin) // If the worker bundle's url is on the same origin as the document,
    // use the worker bundle's own url.
    return workerUrl;
    else {
        // Otherwise, create a blob URL which loads the worker bundle with `importScripts`.
        var source = isESM ? 'import ' + JSON.stringify(workerUrl) + ';' : 'importScripts(' + JSON.stringify(workerUrl) + ');';
        return URL.createObjectURL(new Blob([
            source
        ], {
            type: 'application/javascript'
        }));
    }
};

},{}],"ebzAd":[function(require,module,exports) {
var workerURL = require('./helpers/get-worker-url');
var bundleURL = require('./helpers/bundle-url');
var url = bundleURL.getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("bIVsG");
module.exports = workerURL(url, bundleURL.getOrigin(url), false);

},{"./helpers/get-worker-url":"5dbxD","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"c9N0f":[function(require,module,exports) {
var workerURL = require('./helpers/get-worker-url');
var bundleURL = require('./helpers/bundle-url');
var url = bundleURL.getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("3ugLH");
module.exports = workerURL(url, bundleURL.getOrigin(url), false);

},{"./helpers/get-worker-url":"5dbxD","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"iE5Pi":[function(require,module,exports) {
var workerURL = require('./helpers/get-worker-url');
var bundleURL = require('./helpers/bundle-url');
var url = bundleURL.getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("lxKYq");
module.exports = workerURL(url, bundleURL.getOrigin(url), false);

},{"./helpers/get-worker-url":"5dbxD","./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"htoDK":[function(require,module,exports) {
module.exports = require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("hHh70");

},{"./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}],"7q1qc":[function(require,module,exports) {
module.exports = require('./helpers/bundle-url').getBundleURL('3wiNu') + require('./helpers/bundle-manifest').resolve("hYTAc");

},{"./helpers/bundle-url":"jkqJ4","./helpers/bundle-manifest":"8Y9me"}]},["2rRk1","kExux"], "kExux", "parcelRequire3aa6")

//# sourceMappingURL=index.eed7fbe6.js.map
